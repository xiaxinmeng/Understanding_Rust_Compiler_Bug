{"sha": "86d8644c1bfa4b8feddfa588e8e599e420acd040", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZDg2NDRjMWJmYTRiOGZlZGRmYTU4OGU4ZTU5OWU0MjBhY2QwNDA=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-26T12:20:41Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-07-01T19:06:22Z"}, "message": "Optimise fast path of checked_ops with `unlikely`", "tree": {"sha": "caabbf553105ddbfbeeb9a6f084b9d611f36d47b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caabbf553105ddbfbeeb9a6f084b9d611f36d47b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d8644c1bfa4b8feddfa588e8e599e420acd040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d8644c1bfa4b8feddfa588e8e599e420acd040", "html_url": "https://github.com/rust-lang/rust/commit/86d8644c1bfa4b8feddfa588e8e599e420acd040", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d8644c1bfa4b8feddfa588e8e599e420acd040/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f781babf87dea29c44f93842b7ac9eb809549d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/f781babf87dea29c44f93842b7ac9eb809549d29", "html_url": "https://github.com/rust-lang/rust/commit/f781babf87dea29c44f93842b7ac9eb809549d29"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "60c496ba2d3c404562f1f617fe5a633107eb3997", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/86d8644c1bfa4b8feddfa588e8e599e420acd040/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8644c1bfa4b8feddfa588e8e599e420acd040/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=86d8644c1bfa4b8feddfa588e8e599e420acd040", "patch": "@@ -21,6 +21,21 @@ macro_rules! try_opt {\n     };\n }\n \n+#[cfg(bootstrap)]\n+macro_rules! unlikely {\n+    ($e: expr) => {\n+        $e\n+    };\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[allow_internal_unstable(const_likely)]\n+macro_rules! unlikely {\n+    ($e: expr) => {\n+        intrinsics::unlikely($e)\n+    };\n+}\n+\n macro_rules! impl_nonzero_fmt {\n     ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n@@ -745,7 +760,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -787,7 +802,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -829,7 +844,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -871,7 +886,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -900,7 +915,7 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     Some(self.div_euclid(rhs))\n@@ -929,7 +944,7 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -957,7 +972,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 || (self == Self::MIN && rhs == -1) {\n+                if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n                     None\n                 } else {\n                     Some(self.rem_euclid(rhs))\n@@ -983,7 +998,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -1007,7 +1022,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -1031,7 +1046,7 @@ $EndFeature, \"\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -1738,7 +1753,7 @@ $EndFeature, \"\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (self, true)\n                 } else {\n                     (self / rhs, false)\n@@ -1771,7 +1786,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringi\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (self, true)\n                 } else {\n                     (self.div_euclid(rhs), false)\n@@ -1805,7 +1820,7 @@ $EndFeature, \"\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (0, true)\n                 } else {\n                     (self % rhs, false)\n@@ -1838,7 +1853,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n                           without modifying the original\"]\n             #[inline]\n             pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n-                if self == Self::MIN && rhs == -1 {\n+                if unlikely!(self == Self::MIN && rhs == -1) {\n                     (0, true)\n                 } else {\n                     (self.rem_euclid(rhs), false)\n@@ -1869,7 +1884,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[allow(unused_attributes)]\n             #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n-                if self == Self::MIN {\n+                if unlikely!(self == Self::MIN) {\n                     (Self::MIN, true)\n                 } else {\n                     (-self, false)\n@@ -2981,7 +2996,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeat\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3021,7 +3036,7 @@ assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3061,7 +3076,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3100,11 +3115,12 @@ assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-                match rhs {\n-                    0 => None,\n+                if unlikely!(rhs == 0) {\n+                    None\n+                } else {\n                     // SAFETY: div by zero has been checked above and unsigned types have no other\n                     // failure modes for division\n-                    rhs => Some(unsafe { intrinsics::unchecked_div(self, rhs) }),\n+                    Some(unsafe { intrinsics::unchecked_div(self, rhs) })\n                 }\n             }\n         }\n@@ -3127,7 +3143,7 @@ assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 {\n+                if unlikely!(rhs == 0) {\n                     None\n                 } else {\n                     Some(self.div_euclid(rhs))\n@@ -3154,7 +3170,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 {\n+                if unlikely!(rhs == 0) {\n                     None\n                 } else {\n                     // SAFETY: div by zero has been checked above and unsigned types have no other\n@@ -3182,7 +3198,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n                           without modifying the original\"]\n             #[inline]\n             pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n-                if rhs == 0 {\n+                if unlikely!(rhs == 0) {\n                     None\n                 } else {\n                     Some(self.rem_euclid(rhs))\n@@ -3209,7 +3225,7 @@ assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3232,7 +3248,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature,\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n \n@@ -3255,7 +3271,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature,\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n-                if b {None} else {Some(a)}\n+                if unlikely!(b) {None} else {Some(a)}\n             }\n         }\n "}]}