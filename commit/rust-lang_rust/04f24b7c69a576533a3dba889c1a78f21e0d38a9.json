{"sha": "04f24b7c69a576533a3dba889c1a78f21e0d38a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZjI0YjdjNjlhNTc2NTMzYTNkYmE4ODljMWE3OGYyMWUwZDM4YTk=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-05T14:34:25Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-05T17:36:50Z"}, "message": "Fix MinGW termination callbacks not being invoked", "tree": {"sha": "9a3e2cf03c5a9248b4e8d4a2b549f219713f0ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3e2cf03c5a9248b4e8d4a2b549f219713f0ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f24b7c69a576533a3dba889c1a78f21e0d38a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f24b7c69a576533a3dba889c1a78f21e0d38a9", "html_url": "https://github.com/rust-lang/rust/commit/04f24b7c69a576533a3dba889c1a78f21e0d38a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f24b7c69a576533a3dba889c1a78f21e0d38a9/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e3467c2150eddc636e88346255bec20feb38b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3467c2150eddc636e88346255bec20feb38b3a", "html_url": "https://github.com/rust-lang/rust/commit/8e3467c2150eddc636e88346255bec20feb38b3a"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "bd1946133e8afe40708865f1fff3852d5dcfb3a0", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/04f24b7c69a576533a3dba889c1a78f21e0d38a9/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f24b7c69a576533a3dba889c1a78f21e0d38a9/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=04f24b7c69a576533a3dba889c1a78f21e0d38a9", "patch": "@@ -60,37 +60,36 @@ pub mod eh_frames {\n     }\n \n     // Unwind info registration/deregistration routines.\n-    // See the docs of `unwind` module in libstd.\n+    // See the docs of libpanic_unwind.\n     extern \"C\" {\n         fn rust_eh_register_frames(eh_frame_begin: *const u8, object: *mut u8);\n         fn rust_eh_unregister_frames(eh_frame_begin: *const u8, object: *mut u8);\n     }\n \n-    unsafe fn init() {\n+    unsafe extern \"C\" fn init() {\n         // register unwind info on module startup\n         rust_eh_register_frames(&__EH_FRAME_BEGIN__ as *const u8, &mut OBJ as *mut _ as *mut u8);\n     }\n \n-    unsafe fn uninit() {\n+    unsafe extern \"C\" fn uninit() {\n         // unregister on shutdown\n         rust_eh_unregister_frames(&__EH_FRAME_BEGIN__ as *const u8, &mut OBJ as *mut _ as *mut u8);\n     }\n \n-    // MSVC-specific init/uninit routine registration\n-    pub mod ms_init {\n-        // .CRT$X?? sections are roughly analogous to ELF's .init_array and .fini_array,\n-        // except that they exploit the fact that linker will sort them alphabitically,\n-        // so e.g., sections with names between .CRT$XIA and .CRT$XIZ are guaranteed to be\n-        // placed between those two, without requiring any ordering of objects on the linker\n-        // command line.\n-        // Note that ordering of same-named sections from different objects is not guaranteed.\n-        // Since .CRT$XIA contains init array's header symbol, which must always come first,\n-        // we place our initialization callback into .CRT$XIB.\n+    // MinGW-specific init/uninit routine registration\n+    pub mod mingw_init {\n+        // MinGW's startup objects (crt0.o / dllcrt0.o) will invoke global constructors in the\n+        // .ctors and .dtors sections on startup and exit. In the case of DLLs, this is done when\n+        // the DLL is loaded and unloaded.\n+        //\n+        // The linker will sort the sections, which ensures that our callbacks are located at the\n+        // end of the list. Since constructors are run in reverse order, this ensures that our\n+        // callbacks are the first and last ones executed.\n \n-        #[link_section = \".CRT$XIB\"] // .CRT$XI? : C initialization callbacks\n-        pub static P_INIT: unsafe fn() = super::init;\n+        #[link_section = \".ctors.65535\"] // .ctors.* : C initialization callbacks\n+        pub static P_INIT: unsafe extern \"C\" fn() = super::init;\n \n-        #[link_section = \".CRT$XTY\"] // .CRT$XT? : C termination callbacks\n-        pub static P_UNINIT: unsafe fn() = super::uninit;\n+        #[link_section = \".dtors.65535\"] // .dtors.* : C termination callbacks\n+        pub static P_UNINIT: unsafe extern \"C\" fn() = super::uninit;\n     }\n }"}]}