{"sha": "047a4bb43278d24d619580fcea7e22366918388d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0N2E0YmI0MzI3OGQyNGQ2MTk1ODBmY2VhN2UyMjM2NjkxODM4OGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-30T05:07:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T05:07:50Z"}, "message": "Rollup merge of #67657 - jumbatm:cleanup-const-hack, r=oli-obk\n\nClean up const-hack PRs now that const if / match exist.\n\nCloses #67627.\n\nCleans up these merged PRs tagged with `const-hack`:\n\n- #63810\n- #63786\n- #61635\n- #58044\n\nreverting their contents to have the match or if expressions they originally contained.\n\nr? @oli-obk\n\nThere's one more PR in those tagged with `const-hack` that originally wasn't merged (#65107). Reading the thread, it looks like it was originally closed because the `const-hack` for the checked arithmetic non-negligibly hurt performance, and because there was no way to manipulate the returned Option at compile time anyway (with neither const if nor const match). Would you like me to add these changes to the changes from this PR here too, now that we have the necessary features?", "tree": {"sha": "1349336173ba1144bdd6c4357bff7b363ef57b63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1349336173ba1144bdd6c4357bff7b363ef57b63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047a4bb43278d24d619580fcea7e22366918388d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCYYmCRBK7hj4Ov3rIwAAdHIIAAi6cql+yI/nWoW0uTLLs5fe\nMmMd5EjT7u9isnECzLOhG7LU7BMJ9bt+lRPJNkMwl4UmLVrsjnLK5DSK0/+ngRdN\nr70pDlsrzwvEuqA1FzPHfo7+BZRAcFqEKzHz4+ZV3SOH9BJL0OmqLmvBBftDlPe3\nnX/6D08xeMKHlxC4Lp81zRti49j8AWV3UnE0cQt/fbHd9yKHtkCjC9weBdRV3JnP\nWNSlcXyHZiHR7I1JBFjoYoK59YqRqSbPWJi0IK8A/cI/reEu4ZYz7vBIU1d28xy/\n309SJfEqK7+CdG7QgZ3KiRai2Yfk9cJb1S7/3TkyF94Qj4mIBIgwytyntPH599w=\n=F1Pq\n-----END PGP SIGNATURE-----\n", "payload": "tree 1349336173ba1144bdd6c4357bff7b363ef57b63\nparent 0eb19dcf8beef2010eb4f4a63be0de7871d2db84\nparent 91c2f78b504e60e5c82ff3944d6663785bf47eee\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1577682470 +0900\ncommitter GitHub <noreply@github.com> 1577682470 +0900\n\nRollup merge of #67657 - jumbatm:cleanup-const-hack, r=oli-obk\n\nClean up const-hack PRs now that const if / match exist.\n\nCloses #67627.\n\nCleans up these merged PRs tagged with `const-hack`:\n\n- #63810\n- #63786\n- #61635\n- #58044\n\nreverting their contents to have the match or if expressions they originally contained.\n\nr? @oli-obk\n\nThere's one more PR in those tagged with `const-hack` that originally wasn't merged (#65107). Reading the thread, it looks like it was originally closed because the `const-hack` for the checked arithmetic non-negligibly hurt performance, and because there was no way to manipulate the returned Option at compile time anyway (with neither const if nor const match). Would you like me to add these changes to the changes from this PR here too, now that we have the necessary features?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047a4bb43278d24d619580fcea7e22366918388d", "html_url": "https://github.com/rust-lang/rust/commit/047a4bb43278d24d619580fcea7e22366918388d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047a4bb43278d24d619580fcea7e22366918388d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb19dcf8beef2010eb4f4a63be0de7871d2db84", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb19dcf8beef2010eb4f4a63be0de7871d2db84", "html_url": "https://github.com/rust-lang/rust/commit/0eb19dcf8beef2010eb4f4a63be0de7871d2db84"}, {"sha": "91c2f78b504e60e5c82ff3944d6663785bf47eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c2f78b504e60e5c82ff3944d6663785bf47eee", "html_url": "https://github.com/rust-lang/rust/commit/91c2f78b504e60e5c82ff3944d6663785bf47eee"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "590f4e46c1d2fe2dc5e390904519c5ba50d40e14", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/047a4bb43278d24d619580fcea7e22366918388d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a4bb43278d24d619580fcea7e22366918388d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=047a4bb43278d24d619580fcea7e22366918388d", "patch": "@@ -71,6 +71,8 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n+#![feature(const_if_match)]\n+#![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n #![feature(const_ptr_offset_from)]"}, {"sha": "14540394caba13d8437d0455e51538addb3ffbbe", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/047a4bb43278d24d619580fcea7e22366918388d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a4bb43278d24d619580fcea7e22366918388d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=047a4bb43278d24d619580fcea7e22366918388d", "patch": "@@ -1416,18 +1416,14 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow_internal_unstable(const_if_match)]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n-                // sign is -1 (all ones) for negative numbers, 0 otherwise.\n-                let sign = self >> ($BITS - 1);\n-                // For positive self, sign == 0 so the expression is simply\n-                // (self ^ 0).wrapping_sub(0) == self == abs(self).\n-                //\n-                // For negative self, self ^ sign == self ^ all_ones.\n-                // But all_ones ^ self == all_ones - self == -1 - self.\n-                // So for negative numbers, (self ^ sign).wrapping_sub(sign) is\n-                // (-1 - self).wrapping_sub(-1) == -self == abs(self).\n-                (self ^ sign).wrapping_sub(sign)\n+                 if self.is_negative() {\n+                     self.wrapping_neg()\n+                 } else {\n+                     self\n+                 }\n             }\n         }\n \n@@ -1713,8 +1709,13 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow_internal_unstable(const_if_match)]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n-                ((!self).wrapping_add(1), self == Self::min_value())\n+                if self == Self::min_value() {\n+                    (Self::min_value(), true)\n+                } else {\n+                    (-self, false)\n+                }\n             }\n         }\n \n@@ -2041,7 +2042,11 @@ $EndFeature, \"\n             #[rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\")]\n             #[inline]\n             pub const fn signum(self) -> Self {\n-                (self > 0) as Self - (self < 0) as Self\n+                match self {\n+                    n if n > 0 =>  1,\n+                    0          =>  0,\n+                    _          => -1,\n+                }\n             }\n         }\n "}, {"sha": "fc3c02e1f066df2573de4a3bdd8385b5cc4d9cff", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/047a4bb43278d24d619580fcea7e22366918388d/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a4bb43278d24d619580fcea7e22366918388d/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=047a4bb43278d24d619580fcea7e22366918388d", "patch": "@@ -288,10 +288,7 @@ impl<T: ?Sized> *const T {\n         T: Sized,\n     {\n         let pointee_size = mem::size_of::<T>();\n-        let ok = 0 < pointee_size && pointee_size <= isize::max_value() as usize;\n-        // assert that the pointee size is valid in a const eval compatible way\n-        // FIXME: do this with a real assert at some point\n-        [()][(!ok) as usize];\n+        assert!(0 < pointee_size && pointee_size <= isize::max_value() as usize);\n         intrinsics::ptr_offset_from(self, origin)\n     }\n "}]}