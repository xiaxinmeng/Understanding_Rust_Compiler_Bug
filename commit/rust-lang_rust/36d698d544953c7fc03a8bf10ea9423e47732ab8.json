{"sha": "36d698d544953c7fc03a8bf10ea9423e47732ab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDY5OGQ1NDQ5NTNjN2ZjMDNhOGJmMTBlYTk0MjNlNDc3MzJhYjg=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-08-25T13:18:24Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-08-25T13:24:52Z"}, "message": "bigint: cfg(target_arch = ...) => cfg(target_word_size = ...)", "tree": {"sha": "b31f0252dc124267d4a3349474bf7095af68b5e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b31f0252dc124267d4a3349474bf7095af68b5e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d698d544953c7fc03a8bf10ea9423e47732ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d698d544953c7fc03a8bf10ea9423e47732ab8", "html_url": "https://github.com/rust-lang/rust/commit/36d698d544953c7fc03a8bf10ea9423e47732ab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d698d544953c7fc03a8bf10ea9423e47732ab8/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a649e6b8b3e42bb8fa8fa806d783ecd9b543784", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a649e6b8b3e42bb8fa8fa806d783ecd9b543784", "html_url": "https://github.com/rust-lang/rust/commit/6a649e6b8b3e42bb8fa8fa806d783ecd9b543784"}], "stats": {"total": 36, "additions": 11, "deletions": 25}, "files": [{"sha": "e2fc3e6bd8abd0a390d9375b68a2af50a169d129", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/36d698d544953c7fc03a8bf10ea9423e47732ab8/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d698d544953c7fc03a8bf10ea9423e47732ab8/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=36d698d544953c7fc03a8bf10ea9423e47732ab8", "patch": "@@ -32,30 +32,26 @@ A BigDigit is a BigUint's composing element.\n \n A BigDigit is half the size of machine word size.\n */\n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"arm\")]\n-#[cfg(target_arch = \"mips\")]\n+#[cfg(target_word_size = \"32\")]\n pub type BigDigit = u16;\n \n /**\n A BigDigit is a BigUint's composing element.\n \n A BigDigit is half the size of machine word size.\n */\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(target_word_size = \"64\")]\n pub type BigDigit = u32;\n \n pub static ZERO_BIG_DIGIT: BigDigit = 0;\n \n pub mod BigDigit {\n     use bigint::BigDigit;\n \n-    #[cfg(target_arch = \"x86\")]\n-    #[cfg(target_arch = \"arm\")]\n-    #[cfg(target_arch = \"mips\")]\n+    #[cfg(target_word_size = \"32\")]\n     pub static bits: uint = 16;\n \n-    #[cfg(target_arch = \"x86_64\")]\n+    #[cfg(target_word_size = \"64\")]\n     pub static bits: uint = 32;\n \n     pub static base: uint = 1 << bits;\n@@ -659,8 +655,7 @@ impl BigUint {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n-\n+#[cfg(target_word_size = \"64\")]\n fn get_radix_base(radix: uint) -> (uint, uint) {\n     assert!(1 < radix && radix <= 16);\n     match radix {\n@@ -683,10 +678,7 @@ fn get_radix_base(radix: uint) -> (uint, uint) {\n     }\n }\n \n-#[cfg(target_arch = \"arm\")]\n-#[cfg(target_arch = \"x86\")]\n-#[cfg(target_arch = \"mips\")]\n-\n+#[cfg(target_word_size = \"32\")]\n fn get_radix_base(radix: uint) -> (uint, uint) {\n     assert!(1 < radix && radix <= 16);\n     match radix {\n@@ -1233,7 +1225,7 @@ mod biguint_tests {\n \n         test_shl_bits();\n \n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(target_word_size = \"64\")]\n         fn test_shl_bits() {\n             check(~[0x7654_3210, 0xfedc_ba98,\n                     0x7654_3210, 0xfedc_ba98], 4,\n@@ -1245,9 +1237,7 @@ mod biguint_tests {\n                     0x5555_4444, 0x7777_6666, 0x8888]);\n         }\n \n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"mips\")]\n+        #[cfg(target_word_size = \"32\")]\n         fn test_shl_bits() {\n             check(~[0x3210, 0x7654, 0xba98, 0xfedc,\n                     0x3210, 0x7654, 0xba98, 0xfedc], 4,\n@@ -1262,9 +1252,7 @@ mod biguint_tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_arch = \"x86\"))]\n-    #[ignore(cfg(target_arch = \"arm\"))]\n-    #[ignore(cfg(target_arch = \"mips\"))]\n+    #[ignore(cfg(target_word_size = \"32\"))]\n     fn test_shr() {\n         fn check(v: ~[BigDigit], shift: uint, ans: ~[BigDigit]) {\n             assert_eq!(BigUint::new(v) >> shift, BigUint::new(ans));\n@@ -1279,7 +1267,7 @@ mod biguint_tests {\n         check(~[0, 1], 1, ~[0x80000000]);\n         test_shr_bits();\n \n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(target_word_size = \"64\")]\n         fn test_shr_bits() {\n             check(~[0x6543_2100, 0xedcb_a987,\n                     0x6543_210f, 0xedcb_a987, 0xf], 4,\n@@ -1291,9 +1279,7 @@ mod biguint_tests {\n                     0x6666_5555, 0x8888_7777]);\n         }\n \n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"mips\")]\n+        #[cfg(target_word_size = \"32\")]\n         fn test_shr_bits() {\n             check(~[0x2100, 0x6543, 0xa987, 0xedcb,\n                     0x210f, 0x6543, 0xa987, 0xedcb, 0xf], 4,"}]}