{"sha": "f522f268676de8c3b2e7d655208e20acd37bb2fc", "node_id": "C_kwDOAAsO6NoAKGY1MjJmMjY4Njc2ZGU4YzNiMmU3ZDY1NTIwOGUyMGFjZDM3YmIyZmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-12T18:17:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-12T18:17:32Z"}, "message": "Rollup merge of #90795 - GuillaumeGomez:more-search-index-comments, r=notriddle\n\nAdd more comments to explain the code to generate the search index\n\nFixes #90766.\n\nI tried to put comments when the code wasn't easy to understand at first sight and added more documentation on the recursive function. Please tell me if I misused the terminology or if comments can be improved or added into other places.\n\nr? `@notriddle`", "tree": {"sha": "4765e94bd7642bd08b5d76ca9878d97d720b173a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4765e94bd7642bd08b5d76ca9878d97d720b173a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f522f268676de8c3b2e7d655208e20acd37bb2fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjq+9CRBK7hj4Ov3rIwAAbroIAF8G0N7YXF/kUTVs/tTX4gjG\n/VyfcaFWP3ljCHDg+WtZkUpHqS6twqFS7eGp5hNVirMXi31R9uSX+OG2pWu4Umsn\nKea7kcMyCWlfnOrl/VgSO3d7ZJYBDh3NWzvT3zoY9TvKehRsgESoHwZ7SbvImnAP\nmggwcGJCMgR+5xy2051DtSOKLmXUADYlzwJ+2JR8353zO4VgW4neKucnFeY7PBX7\nGXFJElSXMC54/jDYv8PWVt5yzf2YWHunCopLN2vJErlmrUkpyn/jJHychPOTSNFm\nCHtuz1TNngxFWXNdbTstgZR/V6IXnk90H40ZeNzJs6hkaUIC3gQD8r0wKmMRga8=\n=OouD\n-----END PGP SIGNATURE-----\n", "payload": "tree 4765e94bd7642bd08b5d76ca9878d97d720b173a\nparent 640f365bff2101a69dfee8f0f3be3ca5706dd343\nparent 9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636741052 +0100\ncommitter GitHub <noreply@github.com> 1636741052 +0100\n\nRollup merge of #90795 - GuillaumeGomez:more-search-index-comments, r=notriddle\n\nAdd more comments to explain the code to generate the search index\n\nFixes #90766.\n\nI tried to put comments when the code wasn't easy to understand at first sight and added more documentation on the recursive function. Please tell me if I misused the terminology or if comments can be improved or added into other places.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f522f268676de8c3b2e7d655208e20acd37bb2fc", "html_url": "https://github.com/rust-lang/rust/commit/f522f268676de8c3b2e7d655208e20acd37bb2fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f522f268676de8c3b2e7d655208e20acd37bb2fc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640f365bff2101a69dfee8f0f3be3ca5706dd343", "url": "https://api.github.com/repos/rust-lang/rust/commits/640f365bff2101a69dfee8f0f3be3ca5706dd343", "html_url": "https://github.com/rust-lang/rust/commit/640f365bff2101a69dfee8f0f3be3ca5706dd343"}, {"sha": "9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "html_url": "https://github.com/rust-lang/rust/commit/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "7aa950d905de14a4ef5f21bd20c69467a108d7ae", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f522f268676de8c3b2e7d655208e20acd37bb2fc/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f522f268676de8c3b2e7d655208e20acd37bb2fc/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=f522f268676de8c3b2e7d655208e20acd37bb2fc", "patch": "@@ -244,8 +244,10 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return\n-/// `[Display, Option]` (we just returns the list of the types, we don't care about the\n-/// wrapped types in here).\n+/// `[Display, Option]`. If a type parameter has no trait bound, it is discarded.\n+///\n+/// Important note: It goes through generics recursively. So if you have\n+/// `T: Option<Result<(), ()>>`, it'll go into `Option` and then into `Result`.\n crate fn get_real_types<'tcx>(\n     generics: &Generics,\n     arg: &Type,\n@@ -329,7 +331,10 @@ crate fn get_real_types<'tcx>(\n         return;\n     }\n \n+    // If this argument is a type parameter and not a trait bound or a type, we need to look\n+    // for its bounds.\n     if let Type::Generic(arg_s) = *arg {\n+        // First we check if the bounds are in a `where` predicate...\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n             WherePredicate::BoundPredicate { ty, .. } => {\n                 ty.def_id_no_primitives() == arg.def_id_no_primitives()\n@@ -352,6 +357,7 @@ crate fn get_real_types<'tcx>(\n             }\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n         }\n+        // Otherwise we check if the trait bounds are \"inlined\" like `T: Option<u32>`...\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n             let mut ty_generics = Vec::new();\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n@@ -363,6 +369,11 @@ crate fn get_real_types<'tcx>(\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n         }\n     } else {\n+        // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n+        // looking at `Option`, we enter this \"else\" condition, otherwise if it's `T`, we don't.\n+        //\n+        // So in here, we can add it directly and look for its own type parameters (so for `Option`,\n+        // we will look for them but not for `T`).\n         let mut ty_generics = Vec::new();\n         if let Some(arg_generics) = arg.generics() {\n             for gen in arg_generics.iter() {"}]}