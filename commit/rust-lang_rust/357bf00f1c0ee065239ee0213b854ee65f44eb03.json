{"sha": "357bf00f1c0ee065239ee0213b854ee65f44eb03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1N2JmMDBmMWMwZWUwNjUyMzllZTAyMTNiODU0ZWU2NWY0NGViMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T22:02:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T22:02:33Z"}, "message": "Auto merge of #48925 - zackmdavis:fn_must_stabilize, r=nikomatsakis\n\nstabilize `#[must_use]` for functions and must-use comparison operators (RFC 1940)\n\nr? @nikomatsakis", "tree": {"sha": "4769114d678a6150b43718a2d595a0bdad894e72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4769114d678a6150b43718a2d595a0bdad894e72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/357bf00f1c0ee065239ee0213b854ee65f44eb03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/357bf00f1c0ee065239ee0213b854ee65f44eb03", "html_url": "https://github.com/rust-lang/rust/commit/357bf00f1c0ee065239ee0213b854ee65f44eb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/357bf00f1c0ee065239ee0213b854ee65f44eb03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17841cc97ac950312355403b6cfe11b916e242a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17841cc97ac950312355403b6cfe11b916e242a6", "html_url": "https://github.com/rust-lang/rust/commit/17841cc97ac950312355403b6cfe11b916e242a6"}, {"sha": "3dbdccc6a9c1ead58325d415381b25c676386c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbdccc6a9c1ead58325d415381b25c676386c34", "html_url": "https://github.com/rust-lang/rust/commit/3dbdccc6a9c1ead58325d415381b25c676386c34"}], "stats": {"total": 504, "additions": 167, "deletions": 337}, "files": [{"sha": "71b6cd663a0833a129e33e83a4317a2d49af91ef", "filename": "src/doc/unstable-book/src/language-features/fn-must-use.md", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffn-must-use.md", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffn-must-use.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffn-must-use.md?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1,30 +0,0 @@\n-# `fn_must_use`\n-\n-The tracking issue for this feature is [#43302].\n-\n-[#43302]: https://github.com/rust-lang/rust/issues/43302\n-\n-------------------------\n-\n-The `fn_must_use` feature allows functions and methods to be annotated with\n-`#[must_use]`, indicating that the `unused_must_use` lint should require their\n-return values to be used (similarly to how types annotated with `must_use`,\n-most notably `Result`, are linted if not used).\n-\n-## Examples\n-\n-```rust\n-#![feature(fn_must_use)]\n-\n-#[must_use]\n-fn double(x: i32) -> i32 {\n-    2 * x\n-}\n-\n-fn main() {\n-    double(4); // warning: unused return value of `double` which must be used\n-\n-    let _ = double(4); // (no warning)\n-}\n-\n-```"}, {"sha": "881607f65ba654c71e97ff42d28cfa1e36e90ee3", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -96,7 +96,7 @@\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n-#![feature(fn_must_use)]\n+#![cfg_attr(stage0, feature(fn_must_use))]\n #![feature(from_ref)]\n #![feature(fundamental)]\n #![feature(lang_items)]"}, {"sha": "6fd0b33f02a60a9632249c6be29dac951d248ea7", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -1282,6 +1282,7 @@ fn test_box_slice_clone() {\n }\n \n #[test]\n+#[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;"}, {"sha": "f4ed24cc3a3727129bb6f219c6f497156fb98c92", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -76,7 +76,6 @@\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n #![feature(extern_types)]\n-#![feature(fn_must_use)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n #![feature(iterator_flatten)]\n@@ -114,6 +113,7 @@\n \n #![cfg_attr(stage0, feature(target_feature))]\n #![cfg_attr(stage0, feature(cfg_target_feature))]\n+#![cfg_attr(stage0, feature(fn_must_use))]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "9e1b75ba3366abbea6f3e42038ba422d738f026b", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 53, "deletions": 47, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc::ty::adjustment;\n@@ -72,54 +73,59 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n-        if cx.tcx.features().fn_must_use {\n-            let maybe_def = match expr.node {\n-                hir::ExprCall(ref callee, _) => {\n-                    match callee.node {\n-                        hir::ExprPath(ref qpath) => {\n-                            Some(cx.tables.qpath_def(qpath, callee.hir_id))\n-                        },\n-                        _ => None\n-                    }\n-                },\n-                hir::ExprMethodCall(..) => {\n-                    cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n-                },\n-                _ => None\n-            };\n-            if let Some(def) = maybe_def {\n-                let def_id = def.def_id();\n-                fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n-            }\n-            let must_use_op = match expr.node {\n-                // Hardcoding operators here seemed more expedient than the\n-                // refactoring that would be needed to look up the `#[must_use]`\n-                // attribute which does exist on the comparison trait methods\n-                hir::ExprBinary(bin_op, ..)  => {\n-                    match bin_op.node {\n-                        hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n-                            Some(\"comparison\")\n-                        },\n-                        hir::BiAdd | hir::BiSub | hir::BiDiv | hir::BiMul | hir::BiRem => {\n-                            Some(\"arithmetic operation\")\n-                        },\n-                        hir::BiAnd | hir::BiOr => {\n-                            Some(\"logical operation\")\n-                        },\n-                        hir::BiBitXor | hir::BiBitAnd | hir::BiBitOr | hir::BiShl | hir::BiShr => {\n-                            Some(\"bitwise operation\")\n-                        },\n-                    }\n-                },\n-                hir::ExprUnary(..) => Some(\"unary operation\"),\n-                _ => None\n-            };\n-            if let Some(must_use_op) = must_use_op {\n-                cx.span_lint(UNUSED_MUST_USE, expr.span,\n-                    &format!(\"unused {} which must be used\", must_use_op));\n-                op_warned = true;\n-            }\n+        let maybe_def = match expr.node {\n+            hir::ExprCall(ref callee, _) => {\n+                match callee.node {\n+                    hir::ExprPath(ref qpath) => {\n+                        let def = cx.tables.qpath_def(qpath, callee.hir_id);\n+                        if let Def::Fn(_) = def {\n+                            Some(def)\n+                        } else {  // `Def::Local` if it was a closure, for which we\n+                            None  // do not currently support must-use linting\n+                        }\n+                    },\n+                    _ => None\n+                }\n+            },\n+            hir::ExprMethodCall(..) => {\n+                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+            },\n+            _ => None\n+        };\n+        if let Some(def) = maybe_def {\n+            let def_id = def.def_id();\n+            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n         }\n+        let must_use_op = match expr.node {\n+            // Hardcoding operators here seemed more expedient than the\n+            // refactoring that would be needed to look up the `#[must_use]`\n+            // attribute which does exist on the comparison trait methods\n+            hir::ExprBinary(bin_op, ..)  => {\n+                match bin_op.node {\n+                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n+                        Some(\"comparison\")\n+                    },\n+                    hir::BiAdd | hir::BiSub | hir::BiDiv | hir::BiMul | hir::BiRem => {\n+                        Some(\"arithmetic operation\")\n+                    },\n+                    hir::BiAnd | hir::BiOr => {\n+                        Some(\"logical operation\")\n+                    },\n+                    hir::BiBitXor | hir::BiBitAnd | hir::BiBitOr | hir::BiShl | hir::BiShr => {\n+                        Some(\"bitwise operation\")\n+                    },\n+                }\n+            },\n+            hir::ExprUnary(..) => Some(\"unary operation\"),\n+            _ => None\n+        };\n+\n+        if let Some(must_use_op) = must_use_op {\n+            cx.span_lint(UNUSED_MUST_USE, expr.span,\n+                         &format!(\"unused {} which must be used\", must_use_op));\n+            op_warned = true;\n+        }\n+\n         if !(ty_warned || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }"}, {"sha": "7c358aafa9ba2c2be230b068e80a02406f1be065", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -988,6 +988,7 @@ impl CStr {\n     /// behavior when `ptr` is used inside the `unsafe` block:\n     ///\n     /// ```no_run\n+    /// # #![allow(unused_must_use)]\n     /// use std::ffi::{CString};\n     ///\n     /// let ptr = CString::new(\"Hello\").unwrap().as_ptr();\n@@ -1003,6 +1004,7 @@ impl CStr {\n     /// To fix the problem, bind the `CString` to a local variable:\n     ///\n     /// ```no_run\n+    /// # #![allow(unused_must_use)]\n     /// use std::ffi::{CString};\n     ///\n     /// let hello = CString::new(\"Hello\").unwrap();"}, {"sha": "9310dad9172a9f816436039b0d6bb4e15d836dc6", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -518,6 +518,7 @@ mod tests {\n         }\n     }\n \n+    #[allow(unused_must_use)]\n     #[test]\n     fn cloning() {\n         let (tx1, rx1) = channel::<i32>();\n@@ -540,6 +541,7 @@ mod tests {\n         tx3.send(()).unwrap();\n     }\n \n+    #[allow(unused_must_use)]\n     #[test]\n     fn cloning2() {\n         let (tx1, rx1) = channel::<i32>();"}, {"sha": "f16b1ba440ac46feb799250ac6d90b2cff1f55a1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -369,9 +369,6 @@ declare_features! (\n     // #[doc(include=\"some-file\")]\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n \n-    // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n-    (active, fn_must_use, \"1.21.0\", Some(43302), None),\n-\n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n@@ -591,6 +588,8 @@ declare_features! (\n     (accepted, target_feature, \"1.27.0\", None, None),\n     // Trait object syntax with `dyn` prefix\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n+    // allow `#[must_use]` on functions; and, must-use operators (RFC 1940)\n+    (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1545,11 +1544,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                         function may change over time, for now \\\n                                         a top-level `fn main()` is required\");\n                 }\n-                if let Some(attr) = attr::find_by_name(&i.attrs[..], \"must_use\") {\n-                    gate_feature_post!(&self, fn_must_use, attr.span,\n-                                       \"`#[must_use]` on functions is experimental\",\n-                                       GateStrength::Soft);\n-                }\n             }\n \n             ast::ItemKind::Struct(..) => {\n@@ -1581,7 +1575,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                    \"trait aliases are not yet fully implemented\");\n             }\n \n-            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, ref impl_items) => {\n+            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,\n                                        i.span,\n@@ -1594,16 +1588,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        i.span,\n                                        \"specialization is unstable\");\n                 }\n-\n-                for impl_item in impl_items {\n-                    if let ast::ImplItemKind::Method(..) = impl_item.node {\n-                        if let Some(attr) = attr::find_by_name(&impl_item.attrs[..], \"must_use\") {\n-                            gate_feature_post!(&self, fn_must_use, attr.span,\n-                                               \"`#[must_use]` on methods is experimental\",\n-                                               GateStrength::Soft);\n-                        }\n-                    }\n-                }\n             }\n \n             ast::ItemKind::Trait(ast::IsAuto::Yes, ..) => {"}, {"sha": "1c04199c05f7c7ec60e1af295be21fe3de263d3e", "filename": "src/test/ui/feature-gate-fn_must_use-cap-lints-allow.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: --cap-lints allow\n-\n-// This tests that the fn_must_use feature-gate warning respects the lint\n-// cap. (See discussion in Issue #44213.)\n-\n-#![feature(rustc_attrs)]\n-\n-#[must_use] // (no feature-gate warning because of the lint cap!)\n-fn need_to_use_it() -> bool { true }\n-\n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful"}, {"sha": "a2c1dedff385ad9640c66ebfcf2efda04cfd4445", "filename": "src/test/ui/feature-gate-fn_must_use-cap-lints-allow.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.stderr?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1,8 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate-fn_must_use-cap-lints-allow.rs:22:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "72fdcc76cf4f62a236e2453290f31db54a12f9df", "filename": "src/test/ui/feature-gate-fn_must_use.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_attrs)]\n-\n-struct MyStruct;\n-\n-impl MyStruct {\n-    #[must_use] //~ WARN `#[must_use]` on methods is experimental\n-    fn need_to_use_method() -> bool { true }\n-}\n-\n-#[must_use] //~ WARN `#[must_use]` on functions is experimental\n-fn need_to_use_it() -> bool { true }\n-\n-\n-// Feature gates are tidy-required to have a specially named (or\n-// comment-annotated) compile-fail test (which MUST fail), but for\n-// backwards-compatibility reasons, we want `#[must_use]` on functions to be\n-// compilable even if the `fn_must_use` feature is absent, thus necessitating\n-// the usage of `#[rustc_error]` here, pragmatically if awkwardly solving this\n-// dilemma until a superior solution can be devised.\n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful"}, {"sha": "431c57abd2653ce6c87bc5fe93a1302e5dca5ff6", "filename": "src/test/ui/feature-gate-fn_must_use.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.stderr?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1,24 +0,0 @@\n-warning: `#[must_use]` on methods is experimental (see issue #43302)\n-  --> $DIR/feature-gate-fn_must_use.rs:16:5\n-   |\n-LL |     #[must_use] //~ WARN `#[must_use]` on methods is experimental\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n-\n-warning: `#[must_use]` on functions is experimental (see issue #43302)\n-  --> $DIR/feature-gate-fn_must_use.rs:20:1\n-   |\n-LL | #[must_use] //~ WARN `#[must_use]` on functions is experimental\n-   | ^^^^^^^^^^^\n-   |\n-   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n-\n-error: compilation successful\n-  --> $DIR/feature-gate-fn_must_use.rs:31:1\n-   |\n-LL | fn main() {} //~ ERROR compilation successful\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7b0c81dbab6511ced7ca328851f6ff58a3c5e9ca", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -661,7 +661,6 @@ mod must_use {\n     mod inner { #![must_use=\"1400\"] }\n \n     #[must_use = \"1400\"] fn f() { }\n-    //~^ WARN `#[must_use]` on functions is experimental\n \n     #[must_use = \"1400\"] struct S;\n "}, {"sha": "76ab50c9089afa1d0be488e3e1932869c990f011", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 73, "deletions": 81, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -12,14 +12,6 @@ LL |     mod inner { #![macro_escape] }\n    |\n    = help: consider an outer attribute, #[macro_use] mod ...\n \n-warning: `#[must_use]` on functions is experimental (see issue #43302)\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:5\n-   |\n-LL |     #[must_use = \"1400\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n-\n warning: unknown lint: `x5400`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:33\n    |\n@@ -799,433 +791,433 @@ LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:742:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:742:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:746:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:746:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:738:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:738:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:767:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:767:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:772:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:771:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:772:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:771:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:775:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:775:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:779:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:779:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:806:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:805:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:806:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:805:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:810:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:809:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:810:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:809:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:802:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:802:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:831:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:831:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:835:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:835:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:839:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:838:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:839:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:838:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:843:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:842:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:843:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:842:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:847:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:846:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:847:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:846:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:827:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:827:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1309,7 +1301,7 @@ LL | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: compilation successful\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:858:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:857:1\n    |\n LL | / fn main() { //~ ERROR compilation successful\n LL | |     println!(\"Hello World\");"}, {"sha": "def23046db21d673eefc29ead7f95dcfa45450b4", "filename": "src/test/ui/fn_must_use.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn_must_use.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -10,7 +10,6 @@\n \n // compile-pass\n \n-#![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n #[derive(PartialEq, Eq)]", "previous_filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.rs"}, {"sha": "5026dac0a949e3f0da97c203deb34df5ffa59257", "filename": "src/test/ui/fn_must_use.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn_must_use.stderr?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -1,47 +1,47 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:61:5\n+  --> $DIR/fn_must_use.rs:60:5\n    |\n LL |     need_to_use_this_value(); //~ WARN unused return value\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/fn_must_use.rs:14:9\n+  --> $DIR/fn_must_use.rs:13:9\n    |\n LL | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:66:5\n+  --> $DIR/fn_must_use.rs:65:5\n    |\n LL |     m.need_to_use_this_method_value(); //~ WARN unused return value\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `EvenNature::is_even` which must be used: no side effects\n-  --> $DIR/fn_must_use.rs:67:5\n+  --> $DIR/fn_must_use.rs:66:5\n    |\n LL |     m.is_even(); // trait method!\n    |     ^^^^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n-  --> $DIR/fn_must_use.rs:73:5\n+  --> $DIR/fn_must_use.rs:72:5\n    |\n LL |     2.eq(&3); //~ WARN unused return value\n    |     ^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n-  --> $DIR/fn_must_use.rs:74:5\n+  --> $DIR/fn_must_use.rs:73:5\n    |\n LL |     m.eq(&n); //~ WARN unused return value\n    |     ^^^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/fn_must_use.rs:77:5\n+  --> $DIR/fn_must_use.rs:76:5\n    |\n LL |     2 == 3; //~ WARN unused comparison\n    |     ^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/fn_must_use.rs:78:5\n+  --> $DIR/fn_must_use.rs:77:5\n    |\n LL |     m == n; //~ WARN unused comparison\n    |     ^^^^^^", "previous_filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.stderr"}, {"sha": "c0575f817c8d172a522fd41d6d6a77e7e06af5b0", "filename": "src/test/ui/lint/must-use-ops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -12,7 +12,6 @@\n \n // compile-pass\n \n-#![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n fn main() {"}, {"sha": "5703536ef48fd1e1153450e0a1e077b351d8c6a5", "filename": "src/test/ui/lint/must-use-ops.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.stderr?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -1,131 +1,131 @@\n warning: unused comparison which must be used\n-  --> $DIR/must-use-ops.rs:23:5\n+  --> $DIR/must-use-ops.rs:22:5\n    |\n LL |     val == 1;\n    |     ^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/must-use-ops.rs:16:9\n+  --> $DIR/must-use-ops.rs:15:9\n    |\n LL | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/must-use-ops.rs:24:5\n+  --> $DIR/must-use-ops.rs:23:5\n    |\n LL |     val < 1;\n    |     ^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/must-use-ops.rs:25:5\n+  --> $DIR/must-use-ops.rs:24:5\n    |\n LL |     val <= 1;\n    |     ^^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/must-use-ops.rs:26:5\n+  --> $DIR/must-use-ops.rs:25:5\n    |\n LL |     val != 1;\n    |     ^^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/must-use-ops.rs:27:5\n+  --> $DIR/must-use-ops.rs:26:5\n    |\n LL |     val >= 1;\n    |     ^^^^^^^^\n \n warning: unused comparison which must be used\n-  --> $DIR/must-use-ops.rs:28:5\n+  --> $DIR/must-use-ops.rs:27:5\n    |\n LL |     val > 1;\n    |     ^^^^^^^\n \n warning: unused arithmetic operation which must be used\n-  --> $DIR/must-use-ops.rs:31:5\n+  --> $DIR/must-use-ops.rs:30:5\n    |\n LL |     val + 2;\n    |     ^^^^^^^\n \n warning: unused arithmetic operation which must be used\n-  --> $DIR/must-use-ops.rs:32:5\n+  --> $DIR/must-use-ops.rs:31:5\n    |\n LL |     val - 2;\n    |     ^^^^^^^\n \n warning: unused arithmetic operation which must be used\n-  --> $DIR/must-use-ops.rs:33:5\n+  --> $DIR/must-use-ops.rs:32:5\n    |\n LL |     val / 2;\n    |     ^^^^^^^\n \n warning: unused arithmetic operation which must be used\n-  --> $DIR/must-use-ops.rs:34:5\n+  --> $DIR/must-use-ops.rs:33:5\n    |\n LL |     val * 2;\n    |     ^^^^^^^\n \n warning: unused arithmetic operation which must be used\n-  --> $DIR/must-use-ops.rs:35:5\n+  --> $DIR/must-use-ops.rs:34:5\n    |\n LL |     val % 2;\n    |     ^^^^^^^\n \n warning: unused logical operation which must be used\n-  --> $DIR/must-use-ops.rs:38:5\n+  --> $DIR/must-use-ops.rs:37:5\n    |\n LL |     true && true;\n    |     ^^^^^^^^^^^^\n \n warning: unused logical operation which must be used\n-  --> $DIR/must-use-ops.rs:39:5\n+  --> $DIR/must-use-ops.rs:38:5\n    |\n LL |     false || true;\n    |     ^^^^^^^^^^^^^\n \n warning: unused bitwise operation which must be used\n-  --> $DIR/must-use-ops.rs:42:5\n+  --> $DIR/must-use-ops.rs:41:5\n    |\n LL |     5 ^ val;\n    |     ^^^^^^^\n \n warning: unused bitwise operation which must be used\n-  --> $DIR/must-use-ops.rs:43:5\n+  --> $DIR/must-use-ops.rs:42:5\n    |\n LL |     5 & val;\n    |     ^^^^^^^\n \n warning: unused bitwise operation which must be used\n-  --> $DIR/must-use-ops.rs:44:5\n+  --> $DIR/must-use-ops.rs:43:5\n    |\n LL |     5 | val;\n    |     ^^^^^^^\n \n warning: unused bitwise operation which must be used\n-  --> $DIR/must-use-ops.rs:45:5\n+  --> $DIR/must-use-ops.rs:44:5\n    |\n LL |     5 << val;\n    |     ^^^^^^^^\n \n warning: unused bitwise operation which must be used\n-  --> $DIR/must-use-ops.rs:46:5\n+  --> $DIR/must-use-ops.rs:45:5\n    |\n LL |     5 >> val;\n    |     ^^^^^^^^\n \n warning: unused unary operation which must be used\n-  --> $DIR/must-use-ops.rs:49:5\n+  --> $DIR/must-use-ops.rs:48:5\n    |\n LL |     !val;\n    |     ^^^^\n \n warning: unused unary operation which must be used\n-  --> $DIR/must-use-ops.rs:50:5\n+  --> $DIR/must-use-ops.rs:49:5\n    |\n LL |     -val;\n    |     ^^^^\n \n warning: unused unary operation which must be used\n-  --> $DIR/must-use-ops.rs:51:5\n+  --> $DIR/must-use-ops.rs:50:5\n    |\n LL |     *val_pointer;\n    |     ^^^^^^^^^^^^"}, {"sha": "eff1f98eb714e69706637b09d3583c1565f63669", "filename": "src/test/ui/span/gated-features-attr-spans.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -8,33 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n-\n-#[repr(align(16))]\n-struct Gem {\n-    mohs_hardness: u8,\n-    poofed: bool,\n-    weapon: Weapon,\n-}\n-\n #[repr(simd)] //~ ERROR are experimental\n struct Weapon {\n     name: String,\n     damage: u32\n }\n \n-impl Gem {\n-    #[must_use] fn summon_weapon(&self) -> Weapon { self.weapon }\n-    //~^ WARN is experimental\n-}\n-\n-#[must_use] //~ WARN is experimental\n-fn bubble(gem: Gem) -> Result<Gem, ()> {\n-    if gem.poofed {\n-        Ok(gem)\n-    } else {\n-        Err(())\n-    }\n-}\n-\n fn main() {}"}, {"sha": "a99530529fcf1a802d80f3a197ea925f7a90ef35", "filename": "src/test/ui/span/gated-features-attr-spans.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357bf00f1c0ee065239ee0213b854ee65f44eb03/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr?ref=357bf00f1c0ee065239ee0213b854ee65f44eb03", "patch": "@@ -1,27 +1,11 @@\n error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n-  --> $DIR/gated-features-attr-spans.rs:20:1\n+  --> $DIR/gated-features-attr-spans.rs:11:1\n    |\n LL | #[repr(simd)] //~ ERROR are experimental\n    | ^^^^^^^^^^^^^\n    |\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n-warning: `#[must_use]` on methods is experimental (see issue #43302)\n-  --> $DIR/gated-features-attr-spans.rs:27:5\n-   |\n-LL |     #[must_use] fn summon_weapon(&self) -> Weapon { self.weapon }\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n-\n-warning: `#[must_use]` on functions is experimental (see issue #43302)\n-  --> $DIR/gated-features-attr-spans.rs:31:1\n-   |\n-LL | #[must_use] //~ WARN is experimental\n-   | ^^^^^^^^^^^\n-   |\n-   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}]}