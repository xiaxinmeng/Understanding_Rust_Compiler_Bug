{"sha": "05d653199871955eba90abdd3b176603f030ab60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDY1MzE5OTg3MTk1NWViYTkwYWJkZDNiMTc2NjAzZjAzMGFiNjA=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-07T03:00:59Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-20T18:42:11Z"}, "message": "Error recovery for `let` with `+=`", "tree": {"sha": "bd052f7d528467baac2355d19fa8601400c955f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd052f7d528467baac2355d19fa8601400c955f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d653199871955eba90abdd3b176603f030ab60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d653199871955eba90abdd3b176603f030ab60", "html_url": "https://github.com/rust-lang/rust/commit/05d653199871955eba90abdd3b176603f030ab60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d653199871955eba90abdd3b176603f030ab60/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ff12acb184672393692e087927a66ff7907d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ff12acb184672393692e087927a66ff7907d71", "html_url": "https://github.com/rust-lang/rust/commit/48ff12acb184672393692e087927a66ff7907d71"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "224f4ebf5382859416c731efdde0192983e28229", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/05d653199871955eba90abdd3b176603f030ab60/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d653199871955eba90abdd3b176603f030ab60/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=05d653199871955eba90abdd3b176603f030ab60", "patch": "@@ -222,44 +222,43 @@ impl<'a> Parser<'a> {\n         has_ty: bool,\n         skip_eq: bool,\n     ) -> PResult<'a, Option<P<Expr>>> {\n-        let parse = if !self.eat(&token::Eq) && !skip_eq {\n+        // In case of code like `let x: i8 += 1`, `i8` is interpreted as a trait consuming the `+`\n+        // from `+=`.\n+        let ate_plus = self.prev_token.is_like_plus() && has_ty;\n+        let parse = if !skip_eq && (ate_plus || matches!(self.token.kind, TokenKind::BinOpEq(_))) {\n             // Error recovery for `let x += 1`\n-            if matches!(self.token.kind, TokenKind::BinOpEq(_)) {\n-                let mut err = struct_span_err!(\n-                    self.sess.span_diagnostic,\n-                    self.token.span,\n-                    E0067,\n-                    \"can't reassign to a uninitialized variable\"\n-                );\n+            let mut err = struct_span_err!(\n+                self.sess.span_diagnostic,\n+                self.token.span,\n+                E0067,\n+                \"can't reassign to a uninitialized variable\"\n+            );\n+            err.span_suggestion_short(\n+                self.token.span,\n+                \"replace with `=` to initialize the variable\",\n+                \"=\".to_string(),\n+                if has_ty {\n+                    // for `let x: i8 += 1` it's highly likely that the `+` is a typo\n+                    Applicability::MachineApplicable\n+                } else {\n+                    // for `let x += 1` it's a bit less likely that the `+` is a typo\n+                    Applicability::MaybeIncorrect\n+                },\n+            );\n+            // In case of code like `let x += 1` it's possible the user may have meant to write `x += 1`\n+            if !has_ty {\n                 err.span_suggestion_short(\n-                    self.token.span,\n-                    \"replace with `=` to initialize the variable\",\n-                    \"=\".to_string(),\n-                    if has_ty {\n-                        // for `let x: i8 += 1` it's highly likely that the `+` is a typo\n-                        Applicability::MachineApplicable\n-                    } else {\n-                        // for `let x += 1` it's a bit less likely that the `+` is a typo\n-                        Applicability::MaybeIncorrect\n-                    },\n+                    let_span,\n+                    \"remove to reassign to a previously initialized variable\",\n+                    \"\".to_string(),\n+                    Applicability::MaybeIncorrect,\n                 );\n-                // In case of code like `let x += 1` it's possible the user may have meant to write `x += 1`\n-                if !has_ty {\n-                    err.span_suggestion_short(\n-                        let_span,\n-                        \"remove to reassign to a previously initialized variable\",\n-                        \"\".to_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                err.emit();\n-                self.bump();\n-                true\n-            } else {\n-                false\n             }\n-        } else {\n+            err.emit();\n+            self.bump();\n             true\n+        } else {\n+            self.eat(&token::Eq) || skip_eq\n         };\n \n         if parse { Ok(Some(self.parse_expr()?)) } else { Ok(None) }"}, {"sha": "98473e9f096d85d8f5dfb1eb9cebf45309ccf875", "filename": "src/test/ui/parser/let-binop-plus.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d653199871955eba90abdd3b176603f030ab60/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d653199871955eba90abdd3b176603f030ab60/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.rs?ref=05d653199871955eba90abdd3b176603f030ab60", "patch": "@@ -3,5 +3,6 @@\n fn main() {\n     let a: i8 += 1;\n     //~^ ERROR expected trait, found builtin type `i8`\n+    //~| ERROR can't reassign to a uninitialized variable\n     let _ = a;\n }"}, {"sha": "d7d84ff16a0a1fbc48dc9c8de68df7f4472b3559", "filename": "src/test/ui/parser/let-binop-plus.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05d653199871955eba90abdd3b176603f030ab60/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d653199871955eba90abdd3b176603f030ab60/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop-plus.stderr?ref=05d653199871955eba90abdd3b176603f030ab60", "patch": "@@ -1,9 +1,16 @@\n+error[E0067]: can't reassign to a uninitialized variable\n+  --> $DIR/let-binop-plus.rs:4:16\n+   |\n+LL |     let a: i8 += 1;\n+   |                ^ help: replace with `=` to initialize the variable\n+\n error[E0404]: expected trait, found builtin type `i8`\n   --> $DIR/let-binop-plus.rs:4:12\n    |\n LL |     let a: i8 += 1;\n    |            ^^ not a trait\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0404`.\n+Some errors have detailed explanations: E0067, E0404.\n+For more information about an error, try `rustc --explain E0067`."}]}