{"sha": "616cb6356fbb7553058940732c5030f537fdf394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNmNiNjM1NmZiYjc1NTMwNTg5NDA3MzJjNTAzMGY1MzdmZGYzOTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-02T19:16:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "miri engine: also check return type before calling function", "tree": {"sha": "602c518d494a7966dfd74dc89a2faf544acdc587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602c518d494a7966dfd74dc89a2faf544acdc587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/616cb6356fbb7553058940732c5030f537fdf394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/616cb6356fbb7553058940732c5030f537fdf394", "html_url": "https://github.com/rust-lang/rust/commit/616cb6356fbb7553058940732c5030f537fdf394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/616cb6356fbb7553058940732c5030f537fdf394/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b9b1de0529efe839a9fa8440d9f0aceed60661", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b9b1de0529efe839a9fa8440d9f0aceed60661", "html_url": "https://github.com/rust-lang/rust/commit/d2b9b1de0529efe839a9fa8440d9f0aceed60661"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "e83b514c69190bc49827df4b6043c7fae021c961", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=616cb6356fbb7553058940732c5030f537fdf394", "patch": "@@ -560,6 +560,10 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n                 a.hash_stable(hcx, hasher);\n                 b.hash_stable(hcx, hasher)\n             },\n+            FunctionRetMismatch(a, b) => {\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher)\n+            },\n             NoMirFor(ref s) => s.hash_stable(hcx, hasher),\n             UnterminatedCString(ptr) => ptr.hash_stable(hcx, hasher),\n             PointerOutOfBounds {"}, {"sha": "fe466e247c91749b8f5a2f6dc1b5be7ead80b362", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=616cb6356fbb7553058940732c5030f537fdf394", "patch": "@@ -186,6 +186,7 @@ pub enum EvalErrorKind<'tcx, O> {\n \n     FunctionAbiMismatch(Abi, Abi),\n     FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n+    FunctionRetMismatch(Ty<'tcx>, Ty<'tcx>),\n     FunctionArgCountMismatch,\n     NoMirFor(String),\n     UnterminatedCString(Pointer),\n@@ -294,7 +295,8 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n         use self::EvalErrorKind::*;\n         match *self {\n             MachineError(ref inner) => inner,\n-            FunctionAbiMismatch(..) | FunctionArgMismatch(..) | FunctionArgCountMismatch =>\n+            FunctionAbiMismatch(..) | FunctionArgMismatch(..) | FunctionRetMismatch(..)\n+            | FunctionArgCountMismatch =>\n                 \"tried to call a function through a function pointer of incompatible type\",\n             InvalidMemoryAccess =>\n                 \"tried to access memory through an invalid pointer\",\n@@ -470,6 +472,10 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n                 write!(f, \"tried to call a function with argument of type {:?} \\\n                            passing data of type {:?}\",\n                     callee_ty, caller_ty),\n+            FunctionRetMismatch(caller_ty, callee_ty) =>\n+                write!(f, \"tried to call a function with return type {:?} \\\n+                           passing return place of type {:?}\",\n+                    callee_ty, caller_ty),\n             FunctionArgCountMismatch =>\n                 write!(f, \"tried to call a function with incorrect number of arguments\"),\n             BoundsCheck { ref len, ref index } =>"}, {"sha": "3f62883c6a57b549cead28b2fcc35ec7532e7177", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=616cb6356fbb7553058940732c5030f537fdf394", "patch": "@@ -492,6 +492,10 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n                 tcx.lift(&a)?,\n                 tcx.lift(&b)?,\n             ),\n+            FunctionRetMismatch(a, b) => FunctionRetMismatch(\n+                tcx.lift(&a)?,\n+                tcx.lift(&b)?,\n+            ),\n             FunctionArgCountMismatch => FunctionArgCountMismatch,\n             NoMirFor(ref s) => NoMirFor(s.clone()),\n             UnterminatedCString(ptr) => UnterminatedCString(ptr),"}, {"sha": "e15a721731e8744b3f14001abefacc1b64b89e9e", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=616cb6356fbb7553058940732c5030f537fdf394", "patch": "@@ -231,6 +231,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     /// Mark a storage as live, killing the previous content and returning it.\n     /// Remember to deallocate that!\n     pub fn storage_live(&mut self, local: mir::Local) -> EvalResult<'tcx, LocalValue> {\n+        assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n         let layout = self.layout_of_local(self.cur_frame(), local)?;\n@@ -242,6 +243,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     /// Returns the old value of the local.\n     /// Remember to deallocate that!\n     pub fn storage_dead(&mut self, local: mir::Local) -> LocalValue {\n+        assert!(local != mir::RETURN_PLACE, \"Cannot make return place dead\");\n         trace!(\"{:?} is now dead\", local);\n \n         mem::replace(&mut self.frame_mut().locals[local], LocalValue::Dead)\n@@ -446,6 +448,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             let dummy =\n                 LocalValue::Live(Operand::Immediate(Value::Scalar(ScalarMaybeUndef::Undef)));\n             let mut locals = IndexVec::from_elem(dummy, &mir.local_decls);\n+            // Return place is handled specially by the `eval_place` functions, and the\n+            // entry in `locals` should never be used. Make it dead, to be sure.\n+            locals[mir::RETURN_PLACE] = LocalValue::Dead;\n             // Now mark those locals as dead that we do not want to initialize\n             match self.tcx.describe_def(instance.def_id()) {\n                 // statics and constants don't have `Storage*` statements, no need to look for them"}, {"sha": "e82d60af639fc4a6270a89673cd46f951068db19", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=616cb6356fbb7553058940732c5030f537fdf394", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n \n                 let return_place = match dest {\n                     Some(place) => *place,\n-                    None => Place::null(&self),\n+                    None => Place::null(&self), // any access will error. good!\n                 };\n                 self.push_stack_frame(\n                     instance,\n@@ -373,6 +373,20 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         trace!(\"Caller has too many args over\");\n                         return err!(FunctionArgCountMismatch);\n                     }\n+                    // Don't forget to check the return type!\n+                    if let Some(caller_ret) = dest {\n+                        let callee_ret = self.eval_place(&mir::Place::Local(mir::RETURN_PLACE))?;\n+                        if !Self::check_argument_compat(caller_ret.layout, callee_ret.layout) {\n+                            return err!(FunctionRetMismatch(\n+                                caller_ret.layout.ty, callee_ret.layout.ty\n+                            ));\n+                        }\n+                    } else {\n+                        // FIXME: The caller thinks this function cannot return. How do\n+                        // we verify that the callee agrees?\n+                        // On the plus side, the the callee every writes to its return place,\n+                        // that will be detected as UB (because we set that to NULL above).\n+                    }\n                     Ok(())\n                 })();\n                 match res {"}, {"sha": "626baf207eebc0aa4871168e4a0a98fb0a6dbccc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616cb6356fbb7553058940732c5030f537fdf394/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=616cb6356fbb7553058940732c5030f537fdf394", "patch": "@@ -154,6 +154,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     // FIXME: figure out the rules and start linting\n                     | FunctionAbiMismatch(..)\n                     | FunctionArgMismatch(..)\n+                    | FunctionRetMismatch(..)\n                     | FunctionArgCountMismatch\n                     // fine at runtime, might be a register address or sth\n                     | ReadBytesAsPointer"}]}