{"sha": "bdcc6f939a10bc23a434b2ef301238650841dec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkY2M2ZjkzOWExMGJjMjNhNDM0YjJlZjMwMTIzODY1MDg0MWRlYzk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-02T16:28:55Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-16T13:57:08Z"}, "message": "Index enumeration by minimally sized type", "tree": {"sha": "ed3c7a9f50dd05496bdea2894b65d6f7c58800bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3c7a9f50dd05496bdea2894b65d6f7c58800bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdcc6f939a10bc23a434b2ef301238650841dec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc6f939a10bc23a434b2ef301238650841dec9", "html_url": "https://github.com/rust-lang/rust/commit/bdcc6f939a10bc23a434b2ef301238650841dec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc6f939a10bc23a434b2ef301238650841dec9/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dcfc07d2c441e6e18c34dfe844c7bdc1c0137fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dcfc07d2c441e6e18c34dfe844c7bdc1c0137fe", "html_url": "https://github.com/rust-lang/rust/commit/7dcfc07d2c441e6e18c34dfe844c7bdc1c0137fe"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "fbd8d87930842ef47506482b92356dfb49672825", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bdcc6f939a10bc23a434b2ef301238650841dec9/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcc6f939a10bc23a434b2ef301238650841dec9/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=bdcc6f939a10bc23a434b2ef301238650841dec9", "patch": "@@ -102,6 +102,7 @@ use core::mem::size_of;\n use core::mem;\n use core::ptr;\n use core::slice as core_slice;\n+use core::{u8, u16, u32};\n \n use borrow::{Borrow, BorrowMut, ToOwned};\n use boxed::Box;\n@@ -1329,19 +1330,31 @@ impl<T> [T] {\n     pub fn sort_by_key<K, F>(&mut self, f: F)\n         where F: FnMut(&T) -> K, K: Ord\n     {\n-        let mut indices: Vec<_> = self.iter().map(f).enumerate().map(|(i, k)| (k, i)).collect();\n-        // The elements of `indices` are unique, as they are indexed, so any sort will be stable\n-        // with respect to the original slice. We use `sort_unstable` here because it requires less\n-        // memory allocation.\n-        indices.sort_unstable();\n-        for i in 0..self.len() {\n-            let mut index = indices[i].1;\n-            while index < i {\n-                index = indices[index].1;\n-            }\n-            indices[i].1 = index;\n-            self.swap(i, index);\n+        // Helper macro for indexing our vector by the smallest possible type, to reduce allocation.\n+        macro_rules! sort_by_key {\n+            ($t:ty, $slice:ident, $f:ident) => ({\n+                let mut indices: Vec<_> =\n+                    $slice.iter().map($f).enumerate().map(|(i, k)| (k, i as $t)).collect();\n+                // The elements of `indices` are unique, as they are indexed, so any sort will be\n+                // stable with respect to the original slice. We use `sort_unstable` here because it\n+                // requires less memory allocation.\n+                indices.sort_unstable();\n+                for i in 0..$slice.len() {\n+                    let mut index = indices[i].1;\n+                    while (index as usize) < i {\n+                        index = indices[index as usize].1;\n+                    }\n+                    indices[i].1 = index;\n+                    $slice.swap(i, index as usize);\n+                }\n+            })\n         }\n+\n+        let len = self.len();\n+        if len <= ( u8::MAX as usize) { return sort_by_key!( u8, self, f) }\n+        if len <= (u16::MAX as usize) { return sort_by_key!(u16, self, f) }\n+        if len <= (u32::MAX as usize) { return sort_by_key!(u32, self, f) }\n+        sort_by_key!(usize, self, f)\n     }\n \n     /// Sorts the slice, but may not preserve the order of equal elements."}]}