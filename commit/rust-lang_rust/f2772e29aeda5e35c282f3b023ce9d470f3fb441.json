{"sha": "f2772e29aeda5e35c282f3b023ce9d470f3fb441", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNzcyZTI5YWVkYTVlMzVjMjgyZjNiMDIzY2U5ZDQ3MGYzZmI0NDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T16:14:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T16:14:08Z"}, "message": "add crate graph", "tree": {"sha": "f517fd3d40f569de0d4dbb2529f38c9d470b2db9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f517fd3d40f569de0d4dbb2529f38c9d470b2db9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2772e29aeda5e35c282f3b023ce9d470f3fb441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2772e29aeda5e35c282f3b023ce9d470f3fb441", "html_url": "https://github.com/rust-lang/rust/commit/f2772e29aeda5e35c282f3b023ce9d470f3fb441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2772e29aeda5e35c282f3b023ce9d470f3fb441/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a5bc94774a50837f8c9bf8b96c8272882aca640", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5bc94774a50837f8c9bf8b96c8272882aca640", "html_url": "https://github.com/rust-lang/rust/commit/7a5bc94774a50837f8c9bf8b96c8272882aca640"}], "stats": {"total": 146, "additions": 131, "deletions": 15}, "files": [{"sha": "f1d72da151da51931ffdbea56ea6dc66405c2bd9", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=f2772e29aeda5e35c282f3b023ce9d470f3fb441", "patch": "@@ -5,7 +5,7 @@ use std::{\n     },\n     fmt,\n     time::Instant,\n-    collections::HashMap,\n+    collections::{HashMap, HashSet, VecDeque},\n     panic,\n };\n \n@@ -23,7 +23,7 @@ use {\n     module_map::Problem,\n     symbol_index::FileSymbols,\n     module_map::{ModuleMap, ChangeKind},\n-    JobToken,\n+    JobToken, CrateGraph, CrateId,\n };\n \n #[derive(Debug)]\n@@ -37,7 +37,6 @@ impl AnalysisHostImpl {\n             data: Arc::new(WorldData::default()),\n         }\n     }\n-\n     pub fn analysis(\n         &self,\n         file_resolver: Arc<dyn FileResolver>,\n@@ -48,7 +47,6 @@ impl AnalysisHostImpl {\n             data: self.data.clone(),\n         }\n     }\n-\n     pub fn change_files(&mut self, changes: &mut dyn Iterator<Item=(FileId, Option<String>)>) {\n         let data = self.data_mut();\n         for (file_id, text) in changes {\n@@ -71,7 +69,15 @@ impl AnalysisHostImpl {\n             }\n         }\n     }\n-\n+    pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n+        let mut visited = HashSet::new();\n+        for &file_id in graph.crate_roots.values() {\n+            if !visited.insert(file_id) {\n+                panic!(\"duplicate crate root: {:?}\", file_id);\n+            }\n+        }\n+        self.data_mut().crate_graph = graph;\n+    }\n     fn data_mut(&mut self) -> &mut WorldData {\n         Arc::make_mut(&mut self.data)\n     }\n@@ -145,6 +151,33 @@ impl AnalysisImpl {\n             .collect()\n     }\n \n+    pub fn crate_root(&self, id: FileId) -> Vec<CrateId> {\n+        let module_map = &self.data.module_map;\n+        let crate_graph = &self.data.crate_graph;\n+        let mut res = Vec::new();\n+        let mut work = VecDeque::new();\n+        work.push_back(id);\n+        let mut visited = HashSet::new();\n+        while let Some(id) = work.pop_front() {\n+            if let Some(crate_id) = crate_graph.crate_id_for_crate_root(id) {\n+                res.push(crate_id);\n+                continue;\n+            }\n+            let mid = module_map.file2module(id);\n+            let parents = module_map\n+                .parent_module_ids(\n+                    mid,\n+                    &*self.file_resolver,\n+                    &|file_id| self.file_syntax(file_id),\n+                )\n+                .into_iter()\n+                .map(|id| module_map.module2file(id))\n+                .filter(|&id| visited.insert(id));\n+            work.extend(parents);\n+        }\n+        res\n+    }\n+\n     pub fn approximately_resolve_symbol(\n         &self,\n         id: FileId,\n@@ -295,6 +328,7 @@ impl AnalysisImpl {\n \n #[derive(Clone, Default, Debug)]\n struct WorldData {\n+    crate_graph: CrateGraph,\n     file_map: HashMap<FileId, Arc<FileData>>,\n     module_map: ModuleMap,\n }\n@@ -356,3 +390,12 @@ impl SourceChange {\n         }\n     }\n }\n+\n+impl CrateGraph {\n+    fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n+        let (&crate_id, _) = self.crate_roots\n+            .iter()\n+            .find(|(_crate_id, &root_id)| root_id == file_id)?;\n+        Some(crate_id)\n+    }\n+}"}, {"sha": "041abbb89581444ec6611e2655ee9d9159227f1f", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=f2772e29aeda5e35c282f3b023ce9d470f3fb441", "patch": "@@ -15,7 +15,10 @@ mod module_map;\n mod imp;\n mod job;\n \n-use std::sync::Arc;\n+use std::{\n+    sync::Arc,\n+    collections::HashMap,\n+};\n \n use relative_path::{RelativePath, RelativePathBuf};\n use libsyntax2::{File, TextRange, TextUnit, AtomEdit};\n@@ -30,6 +33,14 @@ pub use job::{JobToken, JobHandle};\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct FileId(pub u32);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct CrateId(pub u32);\n+\n+#[derive(Debug, Clone, Default)]\n+pub struct CrateGraph {\n+    pub crate_roots: HashMap<CrateId, FileId>,\n+}\n+\n pub trait FileResolver: Send + Sync + 'static {\n     fn file_stem(&self, id: FileId) -> String;\n     fn resolve(&self, id: FileId, path: &RelativePath) -> Option<FileId>;\n@@ -53,6 +64,9 @@ impl AnalysisHost {\n     pub fn change_files(&mut self, mut changes: impl Iterator<Item=(FileId, Option<String>)>) {\n         self.imp.change_files(&mut changes)\n     }\n+    pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n+        self.imp.set_crate_graph(graph)\n+    }\n }\n \n #[derive(Debug)]\n@@ -168,6 +182,9 @@ impl Analysis {\n     pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n         self.imp.parent_module(file_id)\n     }\n+    pub fn crate_root(&self, file_id: FileId) -> Vec<CrateId> {\n+        self.imp.crate_root(file_id)\n+    }\n     pub fn runnables(&self, file_id: FileId) -> Vec<Runnable> {\n         let file = self.file_syntax(file_id);\n         libeditor::runnables(&file)"}, {"sha": "38935807d7573b181745e983bf2cbdd9eadf8b6e", "filename": "crates/libanalysis/src/module_map.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs?ref=f2772e29aeda5e35c282f3b023ce9d470f3fb441", "patch": "@@ -91,16 +91,38 @@ impl ModuleMap {\n         file_resolver: &FileResolver,\n         syntax_provider: &SyntaxProvider,\n     ) -> Vec<(ModuleId, SmolStr, SyntaxNode)> {\n-        let links = self.links(file_resolver, syntax_provider);\n-        let res = links\n+        let mut res = Vec::new();\n+        self.for_each_parent_link(m, file_resolver, syntax_provider, |link| {\n+            res.push(\n+                (link.owner, link.name().clone(), link.syntax.clone())\n+            )\n+        });\n+        res\n+    }\n+\n+    pub fn parent_module_ids(\n+        &self,\n+        m: ModuleId,\n+        file_resolver: &FileResolver,\n+        syntax_provider: &SyntaxProvider,\n+    ) -> Vec<ModuleId> {\n+        let mut res = Vec::new();\n+        self.for_each_parent_link(m, file_resolver, syntax_provider, |link| res.push(link.owner));\n+        res\n+    }\n+\n+    fn for_each_parent_link(\n+        &self,\n+        m: ModuleId,\n+        file_resolver: &FileResolver,\n+        syntax_provider: &SyntaxProvider,\n+        f: impl FnMut(&Link)\n+    ) {\n+        self.links(file_resolver, syntax_provider)\n             .links\n             .iter()\n             .filter(move |link| link.points_to.iter().any(|&it| it == m))\n-            .map(|link| {\n-                (link.owner, link.name().clone(), link.syntax.clone())\n-            })\n-            .collect();\n-        res\n+            .for_each(f)\n     }\n \n     pub fn problems("}, {"sha": "c098c8e8c01f49d33b419d474f0474ec383218b8", "filename": "crates/libanalysis/tests/tests.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2772e29aeda5e35c282f3b023ce9d470f3fb441/crates%2Flibanalysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Ftests%2Ftests.rs?ref=f2772e29aeda5e35c282f3b023ce9d470f3fb441", "patch": "@@ -2,10 +2,13 @@ extern crate libanalysis;\n extern crate relative_path;\n extern crate test_utils;\n \n-use std::path::{Path};\n+use std::{\n+    collections::HashMap,\n+    path::{Path},\n+};\n \n use relative_path::RelativePath;\n-use libanalysis::{AnalysisHost, FileId, FileResolver, JobHandle};\n+use libanalysis::{AnalysisHost, FileId, FileResolver, JobHandle, CrateGraph, CrateId};\n use test_utils::assert_eq_dbg;\n \n struct FileMap(&'static [(u32, &'static str)]);\n@@ -112,3 +115,34 @@ fn test_resolve_parent_module() {\n         &symbols,\n     );\n }\n+\n+#[test]\n+fn test_resolve_crate_root() {\n+    let mut world = AnalysisHost::new();\n+    world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n+    world.change_file(FileId(2), Some(\"\".to_string()));\n+\n+    let snap = world.analysis(FileMap(&[\n+        (1, \"/lib.rs\"),\n+        (2, \"/foo.rs\"),\n+    ]));\n+    assert!(snap.crate_root(FileId(2)).is_empty());\n+\n+    let crate_graph = CrateGraph {\n+        crate_roots: {\n+            let mut m = HashMap::new();\n+            m.insert(CrateId(1), FileId(1));\n+            m\n+        },\n+    };\n+    world.set_crate_graph(crate_graph);\n+\n+    let snap = world.analysis(FileMap(&[\n+        (1, \"/lib.rs\"),\n+        (2, \"/foo.rs\"),\n+    ]));\n+    assert_eq!(\n+        snap.crate_root(FileId(2)),\n+        vec![CrateId(1)],\n+    );\n+}"}]}