{"sha": "8347f7851a4f662ac8d89636c728610dc8971a75", "node_id": "C_kwDOAAsO6NoAKDgzNDdmNzg1MWE0ZjY2MmFjOGQ4OTYzNmM3Mjg2MTBkYzg5NzFhNzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-27T21:32:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-27T21:32:29Z"}, "message": "Rollup merge of #93363 - lcnr:pass-by-value, r=petrochenkov\n\n`#[rustc_pass_by_value]` cleanup", "tree": {"sha": "cae6c302b7905c00d1fc09cc8d41432de4dc8821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cae6c302b7905c00d1fc09cc8d41432de4dc8821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8347f7851a4f662ac8d89636c728610dc8971a75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8w9tCRBK7hj4Ov3rIwAA2uMIAGbhc9Us0zLOlml4ViEwz9tV\nQm+C7EoleKxlXMpLTfysP3+p6sLhJzRyvqPGy9muQeOiFiSvm+EjT8IOuX80N0+N\nou7iQ4Cm5lixXZ3N0L3MhUCHxaOpIQTKeHkfqB1VxswMke+QUdH6wIiHxP2isV7V\nvP9F0hM289t+ojzWpoE58ihU8FBiOdxRWNPXLYoM+ptBod4W9AEqcaNWShvJv3UM\nNcuMh6Hbc1/2Ed9xk2gtziw/8ris59U0xfd8RhS7hwb0lYu45i4hKMdfTW2OeXqk\n2uyakEAokZ7ekWPFtg9asyEzeH4FQgaoQpo/IR40BaFs5tYAeGvwc8lkdzdFbeY=\n=VnYJ\n-----END PGP SIGNATURE-----\n", "payload": "tree cae6c302b7905c00d1fc09cc8d41432de4dc8821\nparent 5d79874e79403a1dd629ab82f5f729be2240c5bd\nparent 2684dfe58383e3486201bacce7caa8af5fd88a49\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643319149 +0100\ncommitter GitHub <noreply@github.com> 1643319149 +0100\n\nRollup merge of #93363 - lcnr:pass-by-value, r=petrochenkov\n\n`#[rustc_pass_by_value]` cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8347f7851a4f662ac8d89636c728610dc8971a75", "html_url": "https://github.com/rust-lang/rust/commit/8347f7851a4f662ac8d89636c728610dc8971a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8347f7851a4f662ac8d89636c728610dc8971a75/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d79874e79403a1dd629ab82f5f729be2240c5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d79874e79403a1dd629ab82f5f729be2240c5bd", "html_url": "https://github.com/rust-lang/rust/commit/5d79874e79403a1dd629ab82f5f729be2240c5bd"}, {"sha": "2684dfe58383e3486201bacce7caa8af5fd88a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/2684dfe58383e3486201bacce7caa8af5fd88a49", "html_url": "https://github.com/rust-lang/rust/commit/2684dfe58383e3486201bacce7caa8af5fd88a49"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "96dbd3dca156eaaf7d1c17b1661e6aee152f95a2", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -607,7 +607,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         &mut self,\n         macro_def: &ast::MacroDef,\n         ident: &Ident,\n-        sp: &Span,\n+        sp: Span,\n         print_visibility: impl FnOnce(&mut Self),\n     ) {\n         let (kw, has_bang) = if macro_def.macro_rules {\n@@ -623,7 +623,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             macro_def.body.delim(),\n             &macro_def.body.inner_tokens(),\n             true,\n-            *sp,\n+            sp,\n         );\n         if macro_def.body.need_semicolon() {\n             self.word(\";\");"}, {"sha": "e575d6aa7e2fcf446cf2afecb81a0668aa564768", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -347,7 +347,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n-                self.print_mac_def(macro_def, &item.ident, &item.span, |state| {\n+                self.print_mac_def(macro_def, &item.ident, item.span, |state| {\n                     state.print_visibility(&item.vis)\n                 });\n             }"}, {"sha": "fc7f01f041d34cbb14065600e3a34bfeaea00fa1", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -625,7 +625,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     rustc_attr!(\n         rustc_pass_by_value, Normal,\n-        template!(Word), WarnFollowing,\n+        template!(Word), ErrorFollowing,\n         \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n     ),\n     BuiltinAttribute {"}, {"sha": "a47ebaf1237a1ec611a12dc642a13faef5414fc6", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -571,7 +571,7 @@ impl<'a> State<'a> {\n                 self.ann.nested(self, Nested::Body(body));\n             }\n             hir::ItemKind::Macro(ref macro_def) => {\n-                self.print_mac_def(macro_def, &item.ident, &item.span, |state| {\n+                self.print_mac_def(macro_def, &item.ident, item.span, |state| {\n                     state.print_visibility(&item.vis)\n                 });\n             }"}, {"sha": "6bf25732f6035fc485044dfb840fd339accfbe8a", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -336,5 +336,5 @@ fn is_arg_inside_call(arg: Span, call: Span) -> bool {\n     // panic call in the source file, to avoid invalid suggestions when macros are involved.\n     // We specifically check for the spans to not be identical, as that happens sometimes when\n     // proc_macros lie about spans and apply the same span to all the tokens they produce.\n-    call.contains(arg) && !call.source_equal(&arg)\n+    call.contains(arg) && !call.source_equal(arg)\n }"}, {"sha": "2caf929788f182f6efbc873525aa92a7824633fc", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -76,10 +76,10 @@ fn gen_args(cx: &LateContext<'_>, segment: &PathSegment<'_>) -> String {\n             .map(|arg| match arg {\n                 GenericArg::Lifetime(lt) => lt.name.ident().to_string(),\n                 GenericArg::Type(ty) => {\n-                    cx.tcx.sess.source_map().span_to_snippet(ty.span).unwrap_or_default()\n+                    cx.tcx.sess.source_map().span_to_snippet(ty.span).unwrap_or_else(|_| \"_\".into())\n                 }\n                 GenericArg::Const(c) => {\n-                    cx.tcx.sess.source_map().span_to_snippet(c.span).unwrap_or_default()\n+                    cx.tcx.sess.source_map().span_to_snippet(c.span).unwrap_or_else(|_| \"_\".into())\n                 }\n                 GenericArg::Infer(_) => String::from(\"_\"),\n             })"}, {"sha": "965d30a7b92c9121dfd13f43695f1b6d91c0c4df", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -230,7 +230,7 @@ where\n }\n \n /// Format a string showing the start line and column, and end line and column within a file.\n-pub fn source_range_no_file<'tcx>(tcx: TyCtxt<'tcx>, span: &Span) -> String {\n+pub fn source_range_no_file<'tcx>(tcx: TyCtxt<'tcx>, span: Span) -> String {\n     let source_map = tcx.sess.source_map();\n     let start = source_map.lookup_char_pos(span.lo());\n     let end = source_map.lookup_char_pos(span.hi());\n@@ -629,7 +629,7 @@ fn tooltip<'tcx>(\n     let mut text = Vec::new();\n     text.push(format!(\"{}: {}:\", spanview_id, &source_map.span_to_embeddable_string(span)));\n     for statement in statements {\n-        let source_range = source_range_no_file(tcx, &statement.source_info.span);\n+        let source_range = source_range_no_file(tcx, statement.source_info.span);\n         text.push(format!(\n             \"\\n{}{}: {}: {:?}\",\n             TOOLTIP_INDENT,\n@@ -639,7 +639,7 @@ fn tooltip<'tcx>(\n         ));\n     }\n     if let Some(term) = terminator {\n-        let source_range = source_range_no_file(tcx, &term.source_info.span);\n+        let source_range = source_range_no_file(tcx, term.source_info.span);\n         text.push(format!(\n             \"\\n{}{}: {}: {:?}\",\n             TOOLTIP_INDENT,"}, {"sha": "d1cb2826dedfcffb90990613206039496703b06b", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -28,7 +28,7 @@ impl CoverageStatement {\n                 let stmt = &mir_body[bb].statements[stmt_index];\n                 format!(\n                     \"{}: @{}[{}]: {:?}\",\n-                    source_range_no_file(tcx, &span),\n+                    source_range_no_file(tcx, span),\n                     bb.index(),\n                     stmt_index,\n                     stmt\n@@ -38,7 +38,7 @@ impl CoverageStatement {\n                 let term = mir_body[bb].terminator();\n                 format!(\n                     \"{}: @{}.{}: {:?}\",\n-                    source_range_no_file(tcx, &span),\n+                    source_range_no_file(tcx, span),\n                     bb.index(),\n                     term_type(&term.kind),\n                     term.kind\n@@ -155,7 +155,7 @@ impl CoverageSpan {\n     pub fn format<'tcx>(&self, tcx: TyCtxt<'tcx>, mir_body: &mir::Body<'tcx>) -> String {\n         format!(\n             \"{}\\n    {}\",\n-            source_range_no_file(tcx, &self.span),\n+            source_range_no_file(tcx, self.span),\n             self.format_coverage_statements(tcx, mir_body).replace('\\n', \"\\n    \"),\n         )\n     }"}, {"sha": "2c3db35bb66cb34b170623265b09019f6d5999d3", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -612,7 +612,7 @@ impl Span {\n \n     #[inline]\n     /// Returns `true` if `hi == lo`.\n-    pub fn is_empty(&self) -> bool {\n+    pub fn is_empty(self) -> bool {\n         let span = self.data_untracked();\n         span.hi == span.lo\n     }\n@@ -640,7 +640,7 @@ impl Span {\n     ///\n     /// Use this instead of `==` when either span could be generated code,\n     /// and you only care that they point to the same bytes of source text.\n-    pub fn source_equal(&self, other: &Span) -> bool {\n+    pub fn source_equal(self, other: Span) -> bool {\n         let span = self.data();\n         let other = other.data();\n         span.lo == other.lo && span.hi == other.hi\n@@ -681,17 +681,17 @@ impl Span {\n     }\n \n     #[inline]\n-    pub fn rust_2015(&self) -> bool {\n+    pub fn rust_2015(self) -> bool {\n         self.edition() == edition::Edition::Edition2015\n     }\n \n     #[inline]\n-    pub fn rust_2018(&self) -> bool {\n+    pub fn rust_2018(self) -> bool {\n         self.edition() >= edition::Edition::Edition2018\n     }\n \n     #[inline]\n-    pub fn rust_2021(&self) -> bool {\n+    pub fn rust_2021(self) -> bool {\n         self.edition() >= edition::Edition::Edition2021\n     }\n \n@@ -712,15 +712,15 @@ impl Span {\n     /// Checks if a span is \"internal\" to a macro in which `#[unstable]`\n     /// items can be used (that is, a macro marked with\n     /// `#[allow_internal_unstable]`).\n-    pub fn allows_unstable(&self, feature: Symbol) -> bool {\n+    pub fn allows_unstable(self, feature: Symbol) -> bool {\n         self.ctxt()\n             .outer_expn_data()\n             .allow_internal_unstable\n             .map_or(false, |features| features.iter().any(|&f| f == feature))\n     }\n \n     /// Checks if this span arises from a compiler desugaring of kind `kind`.\n-    pub fn is_desugaring(&self, kind: DesugaringKind) -> bool {\n+    pub fn is_desugaring(self, kind: DesugaringKind) -> bool {\n         match self.ctxt().outer_expn_data().kind {\n             ExpnKind::Desugaring(k) => k == kind,\n             _ => false,\n@@ -729,7 +729,7 @@ impl Span {\n \n     /// Returns the compiler desugaring that created this span, or `None`\n     /// if this span is not from a desugaring.\n-    pub fn desugaring_kind(&self) -> Option<DesugaringKind> {\n+    pub fn desugaring_kind(self) -> Option<DesugaringKind> {\n         match self.ctxt().outer_expn_data().kind {\n             ExpnKind::Desugaring(k) => Some(k),\n             _ => None,\n@@ -739,7 +739,7 @@ impl Span {\n     /// Checks if a span is \"internal\" to a macro in which `unsafe`\n     /// can be used without triggering the `unsafe_code` lint.\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n-    pub fn allows_unsafe(&self) -> bool {\n+    pub fn allows_unsafe(self) -> bool {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n     }\n \n@@ -752,7 +752,7 @@ impl Span {\n                     return None;\n                 }\n \n-                let is_recursive = expn_data.call_site.source_equal(&prev_span);\n+                let is_recursive = expn_data.call_site.source_equal(prev_span);\n \n                 prev_span = self;\n                 self = expn_data.call_site;\n@@ -866,13 +866,13 @@ impl Span {\n \n     /// Equivalent of `Span::call_site` from the proc macro API,\n     /// except that the location is taken from the `self` span.\n-    pub fn with_call_site_ctxt(&self, expn_id: ExpnId) -> Span {\n+    pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {\n         self.with_ctxt_from_mark(expn_id, Transparency::Transparent)\n     }\n \n     /// Equivalent of `Span::mixed_site` from the proc macro API,\n     /// except that the location is taken from the `self` span.\n-    pub fn with_mixed_site_ctxt(&self, expn_id: ExpnId) -> Span {\n+    pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {\n         self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)\n     }\n "}, {"sha": "61e4074a7c80bf1cf9d846df96bccb2a9f91000c", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347f7851a4f662ac8d89636c728610dc8971a75/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=8347f7851a4f662ac8d89636c728610dc8971a75", "patch": "@@ -61,6 +61,15 @@ use rustc_data_structures::fx::FxIndexSet;\n /// using the callback `SPAN_TRACK` to access the query engine.\n ///\n #[derive(Clone, Copy, Eq, PartialEq, Hash)]\n+// FIXME(@lcnr): Enable this attribute once the bootstrap\n+// compiler knows of `rustc_pass_by_value`.\n+//\n+// Right now, this lint would only trigger when compiling the\n+// stage 2 compiler, which is fairly annoying as there are\n+// a lot of places using `&Span` right now. After the next bootstrap bump,\n+// the lint will already trigger when using stage 1, which is a lot less annoying.\n+//\n+// #[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub struct Span {\n     base_or_index: u32,\n     len_or_tag: u16,"}]}