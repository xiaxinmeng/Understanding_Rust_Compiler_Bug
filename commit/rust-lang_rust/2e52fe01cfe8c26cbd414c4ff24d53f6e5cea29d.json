{"sha": "2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "node_id": "C_kwDOAAsO6NoAKDJlNTJmZTAxY2ZlOGMyNmNiZDQxNGM0ZmYyNGQ1M2Y2ZTVjZWEyOWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-27T01:49:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T17:20:56Z"}, "message": "remove some now-unnecessary parameters from check_bytes", "tree": {"sha": "5ff5db8fbea93741ed028c502c53b315a24ed10a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff5db8fbea93741ed028c502c53b315a24ed10a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "html_url": "https://github.com/rust-lang/rust/commit/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da13935ecc5b07e3e6deebc68bde049440430461", "url": "https://api.github.com/repos/rust-lang/rust/commits/da13935ecc5b07e3e6deebc68bde049440430461", "html_url": "https://github.com/rust-lang/rust/commit/da13935ecc5b07e3e6deebc68bde049440430461"}], "stats": {"total": 38, "additions": 7, "deletions": 31}, "files": [{"sha": "91607f2ad777ed9564468ca629c6b06c24c2e760", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "patch": "@@ -962,15 +962,10 @@ impl<'tcx, 'a, Prov: Provenance, Extra> AllocRef<'a, 'tcx, Prov, Extra> {\n     }\n \n     /// `range` is relative to this allocation reference, not the base of the allocation.\n-    pub fn check_bytes(\n-        &self,\n-        range: AllocRange,\n-        allow_uninit: bool,\n-        allow_ptr: bool,\n-    ) -> InterpResult<'tcx> {\n+    pub fn check_bytes(&self, range: AllocRange) -> InterpResult<'tcx> {\n         Ok(self\n             .alloc\n-            .check_bytes(&self.tcx, self.range.subrange(range), allow_uninit, allow_ptr)\n+            .check_bytes(&self.tcx, self.range.subrange(range))\n             .map_err(|e| e.to_interp_error(self.alloc_id))?)\n     }\n "}, {"sha": "5a636b38f385b4c9d392913a9b42a55c251e7a2f", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "patch": "@@ -893,11 +893,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // We also accept uninit, for consistency with the slow path.\n                 let alloc = self.ecx.get_ptr_alloc(mplace.ptr, size, mplace.align)?.expect(\"we already excluded size 0\");\n \n-                match alloc.check_bytes(\n-                    alloc_range(Size::ZERO, size),\n-                    /*allow_uninit*/ false,\n-                    /*allow_ptr*/ false,\n-                ) {\n+                match alloc.check_bytes(alloc_range(Size::ZERO, size)) {\n                     // In the happy case, we needn't check anything else.\n                     Ok(()) => {}\n                     // Some error happened, try to provide a more detailed description."}, {"sha": "12a3604f4bbe2ff961f2a84dbce8623b490d1a85", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=2e52fe01cfe8c26cbd414c4ff24d53f6e5cea29d", "patch": "@@ -415,25 +415,10 @@ impl<Prov: Provenance, Extra> Allocation<Prov, Extra> {\n \n /// Reading and writing.\n impl<Prov: Provenance, Extra> Allocation<Prov, Extra> {\n-    /// Validates that `ptr.offset` and `ptr.offset + size` do not point to the middle of a\n-    /// relocation. If `allow_uninit`/`allow_ptr` is `false`, also enforces that the memory in the\n-    /// given range contains no uninitialized bytes/relocations.\n-    pub fn check_bytes(\n-        &self,\n-        cx: &impl HasDataLayout,\n-        range: AllocRange,\n-        allow_uninit: bool,\n-        allow_ptr: bool,\n-    ) -> AllocResult {\n-        // Check bounds and relocations on the edges.\n-        self.get_bytes_with_uninit_and_ptr(cx, range)?;\n-        // Check uninit and ptr.\n-        if !allow_uninit {\n-            self.check_init(range)?;\n-        }\n-        if !allow_ptr {\n-            self.check_relocations(cx, range)?;\n-        }\n+    /// Validates that this memory range is initiailized and contains no relocations.\n+    pub fn check_bytes(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {\n+        // This implicitly does all the checking we are asking for.\n+        self.get_bytes(cx, range)?;\n         Ok(())\n     }\n "}]}