{"sha": "e70ff68aafbb923946856fea201e0251869f0dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MGZmNjhhYWZiYjkyMzk0Njg1NmZlYTIwMWUwMjUxODY5ZjBkZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T08:34:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-22T08:34:26Z"}, "message": "Auto merge of #51660 - lqd:the-MIRnistry-of-walks, r=nikomatsakis\n\nNLL: Walk the MIR only once for the \"unused mut\" lint\n\nTurns the quadratic loop gathering local variable assignments into a single MIR walk, and brings down the number of `super_mir` calls generated from `do_mir_borrowck` to the expected levels seen in `nll::replace_regions_in_mir` and `nll::compute_regions`, i.e. on clap: 1883 `super_mir` calls instead of 8011.\n\nThe limited perf numbers I could gather on my machines look to be what we expected: `clap-check` seems to be gaining back a lot of the 7% we previously saw in `visit_mir`.\n\nFixes #51641.\n\nr? @nikomatsakis", "tree": {"sha": "70ff13c39f5cfe453f09774e6b0f9f22426d4a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ff13c39f5cfe453f09774e6b0f9f22426d4a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70ff68aafbb923946856fea201e0251869f0dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70ff68aafbb923946856fea201e0251869f0dd5", "html_url": "https://github.com/rust-lang/rust/commit/e70ff68aafbb923946856fea201e0251869f0dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70ff68aafbb923946856fea201e0251869f0dd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dae5c0e06f10042fc3b29a55bf6285e539c06db", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dae5c0e06f10042fc3b29a55bf6285e539c06db", "html_url": "https://github.com/rust-lang/rust/commit/7dae5c0e06f10042fc3b29a55bf6285e539c06db"}, {"sha": "63a4e721b30964022cbe7abb98dabc74f3a7a676", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a4e721b30964022cbe7abb98dabc74f3a7a676", "html_url": "https://github.com/rust-lang/rust/commit/63a4e721b30964022cbe7abb98dabc74f3a7a676"}], "stats": {"total": 117, "additions": 84, "deletions": 33}, "files": [{"sha": "115f36c149b64907ce33fa3974f5c9088803efbf", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e70ff68aafbb923946856fea201e0251869f0dd5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ff68aafbb923946856fea201e0251869f0dd5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e70ff68aafbb923946856fea201e0251869f0dd5", "patch": "@@ -61,6 +61,7 @@ mod location;\n crate mod place_ext;\n mod prefixes;\n mod path_utils;\n+mod used_muts;\n \n pub(crate) mod nll;\n \n@@ -281,20 +282,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             .filter(|&local| !mbcx.mir.local_decls[*local].is_user_variable.is_some())\n             .cloned()\n             .collect();\n-\n-    for local in temporary_used_locals {\n-        for location in mbcx.mir.find_assignments(local) {\n-            for moi in &mbcx.move_data.loc_map[location] {\n-                let mpi = &mbcx.move_data.moves[*moi].path;\n-                let path = &mbcx.move_data.move_paths[*mpi];\n-                debug!(\"assignment of {:?} to {:?}, adding {:?} to used mutable set\",\n-                       path.place, local, path.place);\n-                if let Place::Local(user_local) = path.place {\n-                    mbcx.used_mut.insert(user_local);\n-                }\n-            }\n-        }\n-    }\n+    mbcx.gather_used_muts(temporary_used_locals);\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n "}, {"sha": "dbe19bc47859f917801e66bbfc279a34d2235b75", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e70ff68aafbb923946856fea201e0251869f0dd5/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ff68aafbb923946856fea201e0251869f0dd5/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=e70ff68aafbb923946856fea201e0251869f0dd5", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::mir::visit::{PlaceContext, Visitor};\n+use rustc::mir::{Local, Location, Place};\n+\n+use rustc_data_structures::fx::FxHashSet;\n+\n+use borrow_check::MirBorrowckCtxt;\n+use util::collect_writes::is_place_assignment;\n+\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n+    /// Walks the MIR looking for assignments to a set of locals, as part of the unused mutable\n+    /// local variables lint, to update the context's `used_mut` in a single walk.\n+    crate fn gather_used_muts(&mut self, locals: FxHashSet<Local>) {\n+        let mut visitor = GatherUsedMutsVisitor {\n+            needles: locals,\n+            mbcx: self,\n+        };\n+        visitor.visit_mir(visitor.mbcx.mir);\n+    }\n+}\n+\n+/// MIR visitor gathering the assignments to a set of locals, in a single walk.\n+/// 'visit = the duration of the MIR walk\n+struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'gcx: 'tcx, 'tcx: 'cx> {\n+    needles: FxHashSet<Local>,\n+    mbcx: &'visit mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n+}\n+\n+impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n+    fn visit_local(\n+        &mut self,\n+        local: &Local,\n+        place_context: PlaceContext<'tcx>,\n+        location: Location,\n+    ) {\n+        if !self.needles.contains(local) {\n+            return;\n+        }\n+\n+        if is_place_assignment(&place_context) {\n+            // Propagate the Local assigned at this Location as a used mutable local variable\n+            for moi in &self.mbcx.move_data.loc_map[location] {\n+                let mpi = &self.mbcx.move_data.moves[*moi].path;\n+                let path = &self.mbcx.move_data.move_paths[*mpi];\n+                debug!(\n+                    \"assignment of {:?} to {:?}, adding {:?} to used mutable set\",\n+                    path.place, local, path.place\n+                );\n+                if let Place::Local(user_local) = path.place {\n+                    self.mbcx.used_mut.insert(user_local);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "23f753f8569bb780170cb0118e6c61a453106f48", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e70ff68aafbb923946856fea201e0251869f0dd5/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70ff68aafbb923946856fea201e0251869f0dd5/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=e70ff68aafbb923946856fea201e0251869f0dd5", "patch": "@@ -43,25 +43,24 @@ impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n             return;\n         }\n \n-        match place_context {\n-            PlaceContext::Store | PlaceContext::Call => {\n-                self.locations.push(location);\n-            }\n-            PlaceContext::AsmOutput |\n-            PlaceContext::Drop |\n-            PlaceContext::Inspect |\n-            PlaceContext::Borrow { .. } |\n-            PlaceContext::Projection(..) |\n-            PlaceContext::Copy |\n-            PlaceContext::Move |\n-            PlaceContext::StorageLive |\n-            PlaceContext::StorageDead |\n-            PlaceContext::Validate => {\n-                // TO-DO\n-                // self.super_local(local)\n-            }\n+        if is_place_assignment(&place_context) {\n+            self.locations.push(location);\n         }\n     }\n-    // TO-DO\n-    // fn super_local()\n+}\n+\n+/// Returns true if this place context represents an assignment statement\n+crate fn is_place_assignment(place_context: &PlaceContext) -> bool {\n+    match *place_context {\n+        PlaceContext::Store | PlaceContext::Call | PlaceContext::AsmOutput => true,\n+        PlaceContext::Drop\n+        | PlaceContext::Inspect\n+        | PlaceContext::Borrow { .. }\n+        | PlaceContext::Projection(..)\n+        | PlaceContext::Copy\n+        | PlaceContext::Move\n+        | PlaceContext::StorageLive\n+        | PlaceContext::StorageDead\n+        | PlaceContext::Validate => false,\n+    }\n }"}]}