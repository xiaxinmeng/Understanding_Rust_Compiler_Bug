{"sha": "6dfed7e813ae1d660ddaa4de778214b7906b87b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZmVkN2U4MTNhZTFkNjYwZGRhYTRkZTc3ODIxNGI3OTA2Yjg3YjM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-11T17:11:48Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-19T17:38:37Z"}, "message": "small refactoring: replaced mutable state with `return` statements in control flow.\n\nAs a drive-by, removed some dead-code.", "tree": {"sha": "dd69dc31b7816f836f9495512a7a76171873b4ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd69dc31b7816f836f9495512a7a76171873b4ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dfed7e813ae1d660ddaa4de778214b7906b87b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfed7e813ae1d660ddaa4de778214b7906b87b3", "html_url": "https://github.com/rust-lang/rust/commit/6dfed7e813ae1d660ddaa4de778214b7906b87b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dfed7e813ae1d660ddaa4de778214b7906b87b3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be645be6603b833a5b2540cb03e613e6718974aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/be645be6603b833a5b2540cb03e613e6718974aa", "html_url": "https://github.com/rust-lang/rust/commit/be645be6603b833a5b2540cb03e613e6718974aa"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "03f0d4f3c2e61dfbf79bf76c35cb01d7668d2bda", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6dfed7e813ae1d660ddaa4de778214b7906b87b3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dfed7e813ae1d660ddaa4de778214b7906b87b3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6dfed7e813ae1d660ddaa4de778214b7906b87b3", "patch": "@@ -1702,7 +1702,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"check_access_permissions({:?}, {:?}, {:?})\",\n             place, kind, is_local_mutation_allowed\n         );\n-        let mut error_reported = false;\n+\n         match kind {\n             Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n             | Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. }))\n@@ -1715,9 +1715,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     BorrowKind::Shared => unreachable!(),\n                 };\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n-                    Ok(root_place) => self.add_used_mut(root_place, flow_state),\n+                    Ok(root_place) => {\n+                        self.add_used_mut(root_place, flow_state);\n+                        return false;\n+                    }\n                     Err(place_err) => {\n-                        error_reported = true;\n                         let item_msg = self.get_default_err_msg(place);\n                         let mut err = self.tcx\n                             .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n@@ -1731,15 +1733,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         }\n \n                         err.emit();\n+                        return true;\n                     }\n                 }\n             }\n             Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n-                    Ok(root_place) => self.add_used_mut(root_place, flow_state),\n+                    Ok(root_place) => {\n+                        self.add_used_mut(root_place, flow_state);\n+                        return false;\n+                    }\n                     Err(place_err) => {\n-                        error_reported = true;\n-\n                         let err_info = if let Place::Projection(\n                             box Projection {\n                                 base: Place::Local(local),\n@@ -1748,11 +1752,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         ) = *place_err {\n                             let locations = self.mir.find_assignments(local);\n                             if locations.len() > 0 {\n-                                let item_msg = if error_reported {\n-                                    self.get_secondary_err_msg(&Place::Local(local))\n-                                } else {\n-                                    self.get_default_err_msg(place)\n-                                };\n+                                let item_msg = self.get_secondary_err_msg(&Place::Local(local));\n                                 let sp = self.mir.source_info(locations[0]).span;\n                                 let mut to_suggest_span = String::new();\n                                 if let Ok(src) =\n@@ -1797,6 +1797,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                             err.emit();\n                         }\n+\n+                        return true;\n                     }\n                 }\n             }\n@@ -1815,15 +1817,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         ),\n                     );\n                 }\n+                return false;\n+            }\n+            Activation(..) => {\n+                // permission checks are done at Reservation point.\n+                return false;\n             }\n-            Activation(..) => {} // permission checks are done at Reservation point.\n             Read(ReadKind::Borrow(BorrowKind::Unique))\n             | Read(ReadKind::Borrow(BorrowKind::Mut { .. }))\n             | Read(ReadKind::Borrow(BorrowKind::Shared))\n-            | Read(ReadKind::Copy) => {} // Access authorized\n+            | Read(ReadKind::Copy) => {\n+                // Access authorized\n+                return false;\n+            }\n         }\n-\n-        error_reported\n     }\n \n     /// Adds the place into the used mutable variables set"}]}