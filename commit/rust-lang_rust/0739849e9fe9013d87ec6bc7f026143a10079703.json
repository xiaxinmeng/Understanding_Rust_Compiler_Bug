{"sha": "0739849e9fe9013d87ec6bc7f026143a10079703", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Mzk4NDllOWZlOTAxM2Q4N2VjNmJjN2YwMjYxNDNhMTAwNzk3MDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T23:40:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T23:40:21Z"}, "message": "rustc: Make all type lookups go through the one ty::ann_to_ty_param_substs_opt_and_ty() function", "tree": {"sha": "41bcfb59b24ea1bd573bb24e57859f1234398137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bcfb59b24ea1bd573bb24e57859f1234398137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0739849e9fe9013d87ec6bc7f026143a10079703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0739849e9fe9013d87ec6bc7f026143a10079703", "html_url": "https://github.com/rust-lang/rust/commit/0739849e9fe9013d87ec6bc7f026143a10079703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0739849e9fe9013d87ec6bc7f026143a10079703/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2eb3187098888304444f41ada25ce120662651", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2eb3187098888304444f41ada25ce120662651", "html_url": "https://github.com/rust-lang/rust/commit/4f2eb3187098888304444f41ada25ce120662651"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "fcee03bf0e4060aaf0bd04f1c2a81ee9f4fdda41", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 22, "deletions": 44, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0739849e9fe9013d87ec6bc7f026143a10079703/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0739849e9fe9013d87ec6bc7f026143a10079703/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=0739849e9fe9013d87ec6bc7f026143a10079703", "patch": "@@ -1440,35 +1440,7 @@ fn eq_raw_ty(&raw_t a, &raw_t b) -> bool {\n fn eq_ty(&t a, &t b) -> bool { ret a == b; }\n \n \n-fn ann_to_type(&node_type_table ntt, &ast::ann ann) -> t {\n-    alt (ann) {\n-        case (ast::ann_none(_)) {\n-            log_err \"ann_to_type() called on node with no type\";\n-            fail;\n-        }\n-        case (ast::ann_type(_, ?ty, _, _)) {\n-            ret ty;\n-        }\n-    }\n-}\n-\n-fn ann_to_type_params(&node_type_table ntt, &ast::ann ann) -> vec[t] {\n-    alt (ann) {\n-        case (ast::ann_none(_)) {\n-            log_err \"ann_to_type_params() called on node with no type params\";\n-            fail;\n-        }\n-        case (ast::ann_type(_, _, ?tps, _)) {\n-            alt (tps) {\n-                case (none[vec[t]]) {\n-                    let vec[t] result = vec();\n-                    ret result;\n-                }\n-                case (some[vec[t]](?tps)) { ret tps; }\n-            }\n-        }\n-    }\n-}\n+// Type lookups\n \n fn ann_to_ty_param_substs_opt_and_ty(&node_type_table ntt, &ast::ann ann)\n         -> ty_param_substs_opt_and_ty {\n@@ -1482,27 +1454,33 @@ fn ann_to_ty_param_substs_opt_and_ty(&node_type_table ntt, &ast::ann ann)\n     }\n }\n \n+fn ann_to_type(&node_type_table ntt, &ast::ann ann) -> t {\n+    ret ann_to_ty_param_substs_opt_and_ty(ntt, ann)._1;\n+}\n+\n+fn ann_to_type_params(&node_type_table ntt, &ast::ann ann) -> vec[t] {\n+    alt (ann_to_ty_param_substs_opt_and_ty(ntt, ann)._0) {\n+        case (none[vec[t]]) {\n+            let vec[t] result = vec();\n+            ret result;\n+        }\n+        case (some[vec[t]](?tps)) { ret tps; }\n+    }\n+}\n+\n // Returns the type of an annotation, with type parameter substitutions\n // performed if applicable.\n-fn ann_to_monotype(ctxt cx,  &node_type_table ntt, ast::ann a) -> t {\n-    // TODO: Refactor to use recursive pattern matching when we're more\n-    // confident that it works.\n-    alt (a) {\n-        case (ast::ann_none(_)) {\n-            log_err \"ann_to_monotype() called on expression with no type!\";\n-            fail;\n-        }\n-        case (ast::ann_type(_, ?typ, ?tps_opt, _)) {\n-            alt (tps_opt) {\n-                case (none[vec[t]]) { ret typ; }\n-                case (some[vec[t]](?tps)) {\n-                    ret substitute_type_params(cx, tps, typ);\n-                }\n-            }\n+fn ann_to_monotype(ctxt cx, &node_type_table ntt, ast::ann a) -> t {\n+    auto tpot = ann_to_ty_param_substs_opt_and_ty(ntt, a);\n+    alt (tpot._0) {\n+        case (none[vec[t]]) { ret tpot._1; }\n+        case (some[vec[t]](?tps)) {\n+            ret substitute_type_params(cx, tps, tpot._1);\n         }\n     }\n }\n \n+\n // Turns a type into an ann_type, using defaults for other fields.\n fn triv_ann(uint node_id, t typ) -> ast::ann {\n     ret ast::ann_type(node_id, typ, none[vec[t]], none[@ts_ann]);"}]}