{"sha": "efac093093f1bd598957822e9e859b33c5f13e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYWMwOTMwOTNmMWJkNTk4OTU3ODIyZTllODU5YjMzYzVmMTNlMWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-20T00:11:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T00:11:25Z"}, "message": "Merge #4525\n\n4525: Better cursor placement when adding impl members r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fd502d36d055c26ad2ae73580ff0859bbf3ab302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd502d36d055c26ad2ae73580ff0859bbf3ab302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efac093093f1bd598957822e9e859b33c5f13e1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexHWtCRBK7hj4Ov3rIwAAdHIIAE2N2V0YZyFiUwhsRzfZTCpp\n0lkbW7wT3O4+/BdDP33AkT6yVl0UwzvHAf2HmaB+t+BqWyBmaizlqen1nWjGpwE/\nmH1WqjG8iYZ9iYHzItkjIZe1+Ww5VrG8gqPQ+AaSi1B5/yyb03okM6RsS22RNTD4\nDqwVhSDEOiyigLGuMiryEC5SUyvqraUBpHlFmM8Tvbo3vXgzRSrUagmLo99VvSrs\n8l+zVo53UYO/AeqjfsKGhgHjbIeMEPm8kooB2DWi/hXN4cHtmWisSAxxk//7RYKZ\n36FMbh8HynosPwgwpn8macg6GK7huDVfRsBYkqOc/T5u3gtJ6amc53dBw0KAfwc=\n=caau\n-----END PGP SIGNATURE-----\n", "payload": "tree fd502d36d055c26ad2ae73580ff0859bbf3ab302\nparent b26dbf80090ccdd753b35d6254246229e9ff8728\nparent 767d169a2ae543f28544e85e15bac1b6aa1cab23\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589933485 +0000\ncommitter GitHub <noreply@github.com> 1589933485 +0000\n\nMerge #4525\n\n4525: Better cursor placement when adding impl members r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efac093093f1bd598957822e9e859b33c5f13e1f", "html_url": "https://github.com/rust-lang/rust/commit/efac093093f1bd598957822e9e859b33c5f13e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efac093093f1bd598957822e9e859b33c5f13e1f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b26dbf80090ccdd753b35d6254246229e9ff8728", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26dbf80090ccdd753b35d6254246229e9ff8728", "html_url": "https://github.com/rust-lang/rust/commit/b26dbf80090ccdd753b35d6254246229e9ff8728"}, {"sha": "767d169a2ae543f28544e85e15bac1b6aa1cab23", "url": "https://api.github.com/repos/rust-lang/rust/commits/767d169a2ae543f28544e85e15bac1b6aa1cab23", "html_url": "https://github.com/rust-lang/rust/commit/767d169a2ae543f28544e85e15bac1b6aa1cab23"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "abacd4065fc9f4a20fc93b0341f33362135e1aa3", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/efac093093f1bd598957822e9e859b33c5f13e1f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efac093093f1bd598957822e9e859b33c5f13e1f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=efac093093f1bd598957822e9e859b33c5f13e1f", "patch": "@@ -45,8 +45,8 @@ enum AddMissingImplMembersMode {\n // }\n //\n // impl Trait<u32> for () {\n-//     $0fn foo(&self) -> u32 {\n-//         todo!()\n+//     fn foo(&self) -> u32 {\n+//         ${0:todo!()}\n //     }\n //\n // }\n@@ -167,15 +167,23 @@ fn add_missing_impl_members_inner(\n         let original_range = impl_item_list.syntax().text_range();\n         match ctx.config.snippet_cap {\n             None => builder.replace(original_range, new_impl_item_list.to_string()),\n-            Some(cap) => builder.replace_snippet(\n-                cap,\n-                original_range,\n-                render_snippet(\n+            Some(cap) => {\n+                let mut cursor = Cursor::Before(first_new_item.syntax());\n+                let placeholder;\n+                if let ast::AssocItem::FnDef(func) = &first_new_item {\n+                    if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast) {\n+                        if m.syntax().text() == \"todo!()\" {\n+                            placeholder = m;\n+                            cursor = Cursor::Replace(placeholder.syntax());\n+                        }\n+                    }\n+                }\n+                builder.replace_snippet(\n                     cap,\n-                    new_impl_item_list.syntax(),\n-                    Cursor::Before(first_new_item.syntax()),\n-                ),\n-            ),\n+                    original_range,\n+                    render_snippet(cap, new_impl_item_list.syntax(), cursor),\n+                )\n+            }\n         };\n     })\n }\n@@ -271,8 +279,8 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    $0fn foo(&self) {\n-        todo!()\n+    fn foo(&self) {\n+        ${0:todo!()}\n     }\n \n }\"#,\n@@ -291,8 +299,8 @@ impl Foo for S { <|> }\"#,\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    $0fn foo(&self) {\n-        todo!()\n+    fn foo(&self) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -310,8 +318,8 @@ impl Foo<u32> for S { <|> }\"#,\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl Foo<u32> for S {\n-    $0fn foo(&self, t: u32) -> &u32 {\n-        todo!()\n+    fn foo(&self, t: u32) -> &u32 {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -329,8 +337,8 @@ impl<U> Foo<U> for S { <|> }\"#,\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl<U> Foo<U> for S {\n-    $0fn foo(&self, t: U) -> &U {\n-        todo!()\n+    fn foo(&self, t: U) -> &U {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -348,8 +356,8 @@ impl Foo for S {}<|>\"#,\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    $0fn foo(&self) {\n-        todo!()\n+    fn foo(&self) {\n+        ${0:todo!()}\n     }\n }\"#,\n         )\n@@ -373,8 +381,8 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    $0fn foo(&self, bar: foo::Bar) {\n-        todo!()\n+    fn foo(&self, bar: foo::Bar) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -398,8 +406,8 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    $0fn foo(&self, bar: foo::Bar<u32>) {\n-        todo!()\n+    fn foo(&self, bar: foo::Bar<u32>) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -423,8 +431,8 @@ mod foo {\n }\n struct S;\n impl foo::Foo<u32> for S {\n-    $0fn foo(&self, bar: foo::Bar<u32>) {\n-        todo!()\n+    fn foo(&self, bar: foo::Bar<u32>) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -451,8 +459,8 @@ mod foo {\n struct Param;\n struct S;\n impl foo::Foo<Param> for S {\n-    $0fn foo(&self, bar: Param) {\n-        todo!()\n+    fn foo(&self, bar: Param) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -478,8 +486,8 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    $0fn foo(&self, bar: foo::Bar<u32>::Assoc) {\n-        todo!()\n+    fn foo(&self, bar: foo::Bar<u32>::Assoc) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -505,8 +513,8 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    $0fn foo(&self, bar: foo::Bar<foo::Baz>) {\n-        todo!()\n+    fn foo(&self, bar: foo::Bar<foo::Baz>) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -530,8 +538,8 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    $0fn foo(&self, bar: dyn Fn(u32) -> i32) {\n-        todo!()\n+    fn foo(&self, bar: dyn Fn(u32) -> i32) {\n+        ${0:todo!()}\n     }\n }\"#,\n         );\n@@ -645,8 +653,8 @@ trait Foo<T = Self> {\n \n struct S;\n impl Foo for S {\n-    $0fn bar(&self, other: &Self) {\n-        todo!()\n+    fn bar(&self, other: &Self) {\n+        ${0:todo!()}\n     }\n }\"#,\n         )\n@@ -670,8 +678,8 @@ trait Foo<T1, T2 = Self> {\n \n struct S<T>;\n impl Foo<T> for S<T> {\n-    $0fn bar(&self, this: &T, that: &Self) {\n-        todo!()\n+    fn bar(&self, this: &T, that: &Self) {\n+        ${0:todo!()}\n     }\n }\"#,\n         )"}, {"sha": "3808aded1ff41e28e5e9b38add4bea8c005a6eda", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efac093093f1bd598957822e9e859b33c5f13e1f/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efac093093f1bd598957822e9e859b33c5f13e1f/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=efac093093f1bd598957822e9e859b33c5f13e1f", "patch": "@@ -180,8 +180,8 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    $0fn foo(&self) -> u32 {\n-        todo!()\n+    fn foo(&self) -> u32 {\n+        ${0:todo!()}\n     }\n \n }"}, {"sha": "f329fcc107247381c20add0e1e0854ba0d054fce", "filename": "docs/user/assists.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efac093093f1bd598957822e9e859b33c5f13e1f/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/efac093093f1bd598957822e9e859b33c5f13e1f/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=efac093093f1bd598957822e9e859b33c5f13e1f", "patch": "@@ -175,8 +175,8 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    $0fn foo(&self) -> u32 {\n-        todo!()\n+    fn foo(&self) -> u32 {\n+        ${0:todo!()}\n     }\n \n }"}]}