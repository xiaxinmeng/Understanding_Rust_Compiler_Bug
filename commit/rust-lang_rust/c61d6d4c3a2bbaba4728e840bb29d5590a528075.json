{"sha": "c61d6d4c3a2bbaba4728e840bb29d5590a528075", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWQ2ZDRjM2EyYmJhYmE0NzI4ZTg0MGJiMjlkNTU5MGE1MjgwNzU=", "commit": {"author": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-11-22T18:21:01Z"}, "committer": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-11-26T20:04:49Z"}, "message": "Format type aliases\n\nFixes #486", "tree": {"sha": "71c6d4d51ff79380373870dbb5f567659a780702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c6d4d51ff79380373870dbb5f567659a780702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61d6d4c3a2bbaba4728e840bb29d5590a528075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61d6d4c3a2bbaba4728e840bb29d5590a528075", "html_url": "https://github.com/rust-lang/rust/commit/c61d6d4c3a2bbaba4728e840bb29d5590a528075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61d6d4c3a2bbaba4728e840bb29d5590a528075/comments", "author": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68bc387925e25e1168ade10d3a7c10c64ece406b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bc387925e25e1168ade10d3a7c10c64ece406b", "html_url": "https://github.com/rust-lang/rust/commit/68bc387925e25e1168ade10d3a7c10c64ece406b"}], "stats": {"total": 111, "additions": 108, "deletions": 3}, "files": [{"sha": "9ba2985c2a07ee1b3b92e5febdcd1dc4514f9e52", "filename": "src/items.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c61d6d4c3a2bbaba4728e840bb29d5590a528075/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61d6d4c3a2bbaba4728e840bb29d5590a528075/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c61d6d4c3a2bbaba4728e840bb29d5590a528075", "patch": "@@ -739,6 +739,61 @@ fn format_tuple_struct(context: &RewriteContext,\n     Some(result)\n }\n \n+pub fn rewrite_type_alias(context: &RewriteContext,\n+                          indent: Indent,\n+                          ident: ast::Ident,\n+                          ty: &ast::Ty,\n+                          generics: &ast::Generics,\n+                          vis: ast::Visibility,\n+                          span: Span)\n+                          -> Option<String> {\n+    let mut result = String::new();\n+\n+    result.push_str(&format_visibility(vis));\n+    result.push_str(\"type \");\n+    result.push_str(&ident.to_string());\n+\n+    let generics_indent = indent + result.len();\n+    let generics_span = mk_sp(span_after(span, \"type\", context.codemap), ty.span.lo);\n+    let generics_str = try_opt!(rewrite_generics(context,\n+                                                 generics,\n+                                                 indent,\n+                                                 generics_indent,\n+                                                 generics_span));\n+\n+    result.push_str(&generics_str);\n+    result.push_str(\" = \");\n+\n+    let last_line_length = match generics_str.rfind(\"\\n\") {\n+        Some(index) => \" = \".len() + generics_str.len() - index,\n+        None => result.len(),\n+    };\n+\n+    let budget = try_opt!(context.config\n+                                 .max_width\n+                                 .checked_sub(indent.width() + last_line_length + \";\".len()));\n+    let type_indent = indent + last_line_length;\n+    // Try to fit the type on the same line\n+    let ty_str = try_opt!(ty.rewrite(context, budget, type_indent)\n+                            .or_else(|| {\n+                                // The line was to short try and put the type on the next line\n+\n+                                // Remove the space after '='\n+                                result.pop();\n+                                let type_indent = indent.block_indent(context.config);\n+                                result.push('\\n');\n+                                result.push_str(&type_indent.to_string(context.config));\n+                                let budget = try_opt!(context.config\n+                                                             .max_width\n+                                                             .checked_sub(type_indent.width() +\n+                                                                          \";\".len()));\n+                                ty.rewrite(context, budget, type_indent)\n+                            }));\n+    result.push_str(&ty_str);\n+    result.push_str(\";\");\n+    Some(result)\n+}\n+\n impl Rewrite for ast::StructField {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if contains_skip(&self.node.attrs) {"}, {"sha": "7b694de4535af2e9f2f1cb900b71615287de301a", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c61d6d4c3a2bbaba4728e840bb29d5590a528075/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61d6d4c3a2bbaba4728e840bb29d5590a528075/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c61d6d4c3a2bbaba4728e840bb29d5590a528075", "patch": "@@ -21,7 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::{rewrite_static, format_impl};\n+use items::{rewrite_static, rewrite_type_alias, format_impl};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -299,8 +299,15 @@ impl<'a> FmtVisitor<'a> {\n                               item.span,\n                               item.id)\n             }\n-            ast::Item_::ItemTy(..) => {\n-                // FIXME(#486): format type aliases.\n+            ast::Item_::ItemTy(ref ty, ref generics) => {\n+                let rewrite = rewrite_type_alias(&self.get_context(),\n+                                                 self.block_indent,\n+                                                 item.ident,\n+                                                 ty,\n+                                                 generics,\n+                                                 item.vis,\n+                                                 item.span);\n+                self.push_rewrite(item.span, rewrite);\n             }\n         }\n     }"}, {"sha": "3f8a6ccfe3eb457c95db5288fdd5846deef415bf", "filename": "tests/source/type_alias.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c61d6d4c3a2bbaba4728e840bb29d5590a528075/tests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61d6d4c3a2bbaba4728e840bb29d5590a528075/tests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype_alias.rs?ref=c61d6d4c3a2bbaba4728e840bb29d5590a528075", "patch": "@@ -0,0 +1,16 @@\n+\n+type PrivateTest<'a, I> = (Box<Parser<Input=I, Output=char> + 'a>, Box<Parser<Input=I, Output=char> + 'a>);\n+\n+pub type PublicTest<'a, I, O> = Result<Vec<MyLongType>, Box<Parser<Input=I, Output=char> + 'a>, Box<Parser<Input=I, Output=char> + 'a>>;\n+\n+pub type LongGenericListTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> = Option<Vec<MyType>>;\n+\n+pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n+\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<Test>;\n+\n+pub type CommentTest< /* Lifetime */ 'a\n+            ,\n+        // Type\n+        T\n+                    > = ();"}, {"sha": "a468f7920e3ed801f4125e3d747361543a3b83bd", "filename": "tests/target/type_alias.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c61d6d4c3a2bbaba4728e840bb29d5590a528075/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61d6d4c3a2bbaba4728e840bb29d5590a528075/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=c61d6d4c3a2bbaba4728e840bb29d5590a528075", "patch": "@@ -0,0 +1,27 @@\n+\n+type PrivateTest<'a, I> = (Box<Parser<Input = I, Output = char> + 'a>,\n+                           Box<Parser<Input = I, Output = char> + 'a>);\n+\n+pub type PublicTest<'a, I, O> = Result<Vec<MyLongType>,\n+                                       Box<Parser<Input = I, Output = char> + 'a>,\n+                                       Box<Parser<Input = I, Output = char> + 'a>>;\n+\n+pub type LongGenericListTest<'a,\n+                             'b,\n+                             'c,\n+                             'd,\n+                             LONGPARAMETERNAME,\n+                             LONGPARAMETERNAME,\n+                             LONGPARAMETERNAME,\n+                             A,\n+                             B,\n+                             C> = Option<Vec<MyType>>;\n+\n+pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n+\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n+    Vec<Test>;\n+\n+pub type CommentTest<// Lifetime\n+                     'a, // Type\n+                     T> = ();"}]}