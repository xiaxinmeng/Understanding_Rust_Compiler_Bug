{"sha": "4d81e8bb2269fb123152c228cfc3670adad5ceb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODFlOGJiMjI2OWZiMTIzMTUyYzIyOGNmYzM2NzBhZGFkNWNlYjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-18T05:54:49Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-07-22T04:35:40Z"}, "message": "Use Config::full_docs to trim documentation", "tree": {"sha": "dc8fa6858acef72a79319c6f12875a0d39b67cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8fa6858acef72a79319c6f12875a0d39b67cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d81e8bb2269fb123152c228cfc3670adad5ceb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d81e8bb2269fb123152c228cfc3670adad5ceb2", "html_url": "https://github.com/rust-lang/rust/commit/4d81e8bb2269fb123152c228cfc3670adad5ceb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d81e8bb2269fb123152c228cfc3670adad5ceb2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84d93a4edd808e913debc35a007bac7cfb1db07f", "url": "https://api.github.com/repos/rust-lang/rust/commits/84d93a4edd808e913debc35a007bac7cfb1db07f", "html_url": "https://github.com/rust-lang/rust/commit/84d93a4edd808e913debc35a007bac7cfb1db07f"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "7f7ae53884751211a9254c1583059d3a778f7174", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d81e8bb2269fb123152c228cfc3670adad5ceb2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81e8bb2269fb123152c228cfc3670adad5ceb2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4d81e8bb2269fb123152c228cfc3670adad5ceb2", "patch": "@@ -41,7 +41,7 @@ use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use {escape, generated_code, SaveContext, PathCollector, docs_for_attrs, lower_attributes, Dump};\n+use {escape, generated_code, SaveContext, PathCollector, lower_attributes, Dump};\n use span_utils::SpanUtils;\n use sig;\n \n@@ -531,7 +531,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: Some(::id_from_def_id(parent_id)),\n                 children: vec![],\n                 decl_id: None,\n-                docs: docs_for_attrs(attrs),\n+                docs: self.save_ctxt.docs_for_attrs(attrs),\n                 sig,\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             });\n@@ -580,7 +580,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: None,\n                 children: fields,\n                 decl_id: None,\n-                docs: docs_for_attrs(&item.attrs),\n+                docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n                 sig: sig::item_signature(item, &self.save_ctxt),\n                 attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n             });\n@@ -637,7 +637,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent,\n                             children: vec![],\n                             decl_id: None,\n-                            docs: docs_for_attrs(&variant.node.attrs),\n+                            docs: self.save_ctxt.docs_for_attrs(&variant.node.attrs),\n                             sig: sig::variant_signature(variant, &self.save_ctxt),\n                             attributes: lower_attributes(variant.node.attrs.clone(),\n                                                          &self.save_ctxt),\n@@ -671,7 +671,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent,\n                             children: vec![],\n                             decl_id: None,\n-                            docs: docs_for_attrs(&variant.node.attrs),\n+                            docs: self.save_ctxt.docs_for_attrs(&variant.node.attrs),\n                             sig: sig::variant_signature(variant, &self.save_ctxt),\n                             attributes: lower_attributes(variant.node.attrs.clone(),\n                                                          &self.save_ctxt),\n@@ -742,7 +742,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 parent: None,\n                 children,\n                 decl_id: None,\n-                docs: docs_for_attrs(&item.attrs),\n+                docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n                 sig: sig::item_signature(item, &self.save_ctxt),\n                 attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n             });\n@@ -1039,7 +1039,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         parent: Some(::id_from_def_id(trait_id)),\n                         children: vec![],\n                         decl_id: None,\n-                        docs: docs_for_attrs(&trait_item.attrs),\n+                        docs: self.save_ctxt.docs_for_attrs(&trait_item.attrs),\n                         sig: sig::assoc_type_signature(trait_item.id,\n                                                        trait_item.ident,\n                                                        Some(bounds),\n@@ -1113,7 +1113,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             children,\n             parent: None,\n             decl_id: None,\n-            docs: docs_for_attrs(attrs),\n+            docs: self.save_ctxt.docs_for_attrs(attrs),\n             sig: None,\n             attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n         });\n@@ -1250,7 +1250,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         parent: None,\n                         children: vec![],\n                         decl_id: None,\n-                        docs: docs_for_attrs(&item.attrs),\n+                        docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n                         sig: sig::item_signature(item, &self.save_ctxt),\n                         attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n                     });"}, {"sha": "0ff331ad032485e78e06b33f5e4e5326186dbba3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4d81e8bb2269fb123152c228cfc3670adad5ceb2/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81e8bb2269fb123152c228cfc3670adad5ceb2/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4d81e8bb2269fb123152c228cfc3670adad5ceb2", "patch": "@@ -160,7 +160,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::foreign_item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -183,7 +183,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::foreign_item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -207,7 +207,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -236,7 +236,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -259,7 +259,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -283,7 +283,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: m.items.iter().map(|i| id_from_node_id(i.id, self)).collect(),\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n@@ -311,7 +311,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                  .map(|v| id_from_node_id(v.node.data.id(), self))\n                                  .collect(),\n                     decl_id: None,\n-                    docs: docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(&item.attrs),\n                     sig: sig::item_signature(item, self),\n                     attributes: lower_attributes(item.attrs.to_owned(), self),\n                 }))\n@@ -372,7 +372,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 parent: Some(id_from_node_id(scope, self)),\n                 children: vec![],\n                 decl_id: None,\n-                docs: docs_for_attrs(&field.attrs),\n+                docs: self.docs_for_attrs(&field.attrs),\n                 sig: sig::field_signature(field, self),\n                 attributes: lower_attributes(field.attrs.clone(), self),\n             })\n@@ -417,7 +417,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             result.push_str(\">\");\n \n                             (result, trait_id, decl_id,\n-                             docs_for_attrs(&item.attrs),\n+                             self.docs_for_attrs(&item.attrs),\n                              item.attrs.to_vec())\n                         }\n                         _ => {\n@@ -442,7 +442,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         Some(Node::NodeItem(item)) => {\n                             (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n                              Some(def_id), None,\n-                             docs_for_attrs(&item.attrs),\n+                             self.docs_for_attrs(&item.attrs),\n                              item.attrs.to_vec())\n                         }\n                         r => {\n@@ -771,6 +771,31 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn enclosing_scope(&self, id: NodeId) -> NodeId {\n         self.tcx.hir.get_enclosing_scope(id).unwrap_or(CRATE_NODE_ID)\n     }\n+\n+    fn docs_for_attrs(&self, attrs: &[Attribute]) -> String {\n+        let mut result = String::new();\n+\n+        for attr in attrs {\n+            if attr.check_name(\"doc\") {\n+                if let Some(val) = attr.value_str() {\n+                    if attr.is_sugared_doc {\n+                        result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n+                    } else {\n+                        result.push_str(&val.as_str());\n+                    }\n+                    result.push('\\n');\n+                }\n+            }\n+        }\n+\n+        if !self.config.full_docs {\n+            if let Some(index) = result.find(\"\\n\\n\") {\n+                result.truncate(index);\n+            }\n+        }\n+\n+        result\n+    }\n }\n \n fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n@@ -847,25 +872,6 @@ impl<'a> Visitor<'a> for PathCollector {\n     }\n }\n \n-fn docs_for_attrs(attrs: &[Attribute]) -> String {\n-    let mut result = String::new();\n-\n-    for attr in attrs {\n-        if attr.check_name(\"doc\") {\n-            if let Some(val) = attr.value_str() {\n-                if attr.is_sugared_doc {\n-                    result.push_str(&strip_doc_comment_decoration(&val.as_str()));\n-                } else {\n-                    result.push_str(&val.as_str());\n-                }\n-                result.push('\\n');\n-            }\n-        }\n-    }\n-\n-    result\n-}\n-\n #[derive(Clone, Copy, Debug, RustcEncodable)]\n pub enum Format {\n     Json,"}]}