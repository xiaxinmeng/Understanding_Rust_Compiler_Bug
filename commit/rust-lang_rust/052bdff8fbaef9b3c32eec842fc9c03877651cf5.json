{"sha": "052bdff8fbaef9b3c32eec842fc9c03877651cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MmJkZmY4ZmJhZWY5YjNjMzJlZWM4NDJmYzljMDM4Nzc2NTFjZjU=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2018-11-15T08:35:23Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2018-11-15T14:17:03Z"}, "message": "lint based on closure pipe span", "tree": {"sha": "60a800d0a5f9f89683d50ed72d5e949ec0645fe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a800d0a5f9f89683d50ed72d5e949ec0645fe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052bdff8fbaef9b3c32eec842fc9c03877651cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052bdff8fbaef9b3c32eec842fc9c03877651cf5", "html_url": "https://github.com/rust-lang/rust/commit/052bdff8fbaef9b3c32eec842fc9c03877651cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052bdff8fbaef9b3c32eec842fc9c03877651cf5/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec0ba9545f7c848aafc0bc1b8762507395edd41", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec0ba9545f7c848aafc0bc1b8762507395edd41", "html_url": "https://github.com/rust-lang/rust/commit/4ec0ba9545f7c848aafc0bc1b8762507395edd41"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "d08a4b47b31bf1fe11b3bf967bd8b2df91f65566", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/052bdff8fbaef9b3c32eec842fc9c03877651cf5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052bdff8fbaef9b3c32eec842fc9c03877651cf5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=052bdff8fbaef9b3c32eec842fc9c03877651cf5", "patch": "@@ -1092,13 +1092,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(found_span) = found_span {\n             err.span_label(found_span, format!(\"takes {}\", found_str));\n \n+            // move |_| { ... }\n+            // ^^^^^^^^-- def_span\n+            //\n+            // move |_| { ... }\n+            // ^^^^^-- prefix\n+            let prefix_span = self.tcx.sess.source_map().span_until_char(found_span, '|');\n+            // move |_| { ... }\n+            //      ^^^-- pipe_span\n+            let pipe_span = if let Some(span) = found_span.trim_start(prefix_span) {\n+                span\n+            } else {\n+                found_span\n+            };\n+\n             // Suggest to take and ignore the arguments with expected_args_length `_`s if\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_with_applicability(\n-                    found_span,\n+                    pipe_span,\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n                         if expected_args.len() < 2 {"}, {"sha": "ed9162d23489250b3a00e9f1d7c23d188a1c5d82", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052bdff8fbaef9b3c32eec842fc9c03877651cf5/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052bdff8fbaef9b3c32eec842fc9c03877651cf5/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=052bdff8fbaef9b3c32eec842fc9c03877651cf5", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     //~^ ERROR closure is expected to take\n     f(|| panic!());\n     //~^ ERROR closure is expected to take\n+    f(move || panic!());\n+    //~^ ERROR closure is expected to take\n \n     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n     //~^ ERROR closure is expected to take"}]}