{"sha": "745af720bb9824b5a1810d1326a3c4bbc8eef1e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NWFmNzIwYmI5ODI0YjVhMTgxMGQxMzI2YTNjNGJiYzhlZWYxZTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-28T22:19:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-28T22:19:58Z"}, "message": "Rollup merge of #61157 - czipperz:BufReader-Seek-remove-extra-discard_buffer, r=nikomatsakis\n\nBufReader: In Seek impl, remove extra discard_buffer call\n\nAs far as I can tell, this code does nothing.  I'm not sure why it even is there.", "tree": {"sha": "e4bb7387415a46d8f1bbc944796f594d8a0de79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4bb7387415a46d8f1bbc944796f594d8a0de79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/745af720bb9824b5a1810d1326a3c4bbc8eef1e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7bQOCRBK7hj4Ov3rIwAAdHIIAF7r/tIDxKZMtCieC3Ous41z\npfGFvmpt7Mgm9E+7EEBf3mpU4HjBn87EfCyCzEUxzJDF4zs0+EwEHIaADTHM4QYQ\n53c4ZWuvAESIV3In+5XkIRD+0wfzmqn2rJaRz3OMDi3rJigRf/FGZ25G9LAlNMLY\nUuvUVw/ryP+r8InNNlJskloEXsivMK3pjnRuw4wuPLUH6nNIupT1BaDvMYc/3Q37\nIckMj0EyS54+IjoqJOeJwPjXv2PXGZSoUKzpZmVJdVkS8K+GHyWIaa2WEAg6UF3S\ncrEr4f7Wg+LiVdu98BRbuDP1r1u1jl+scGJKY0FPjKpWbrJEjjkBOVE13dk28R8=\n=5ndZ\n-----END PGP SIGNATURE-----\n", "payload": "tree e4bb7387415a46d8f1bbc944796f594d8a0de79b\nparent bfe9080ea023927f2a047a3b23ec579188c63b7d\nparent b1ae49cae078d472d9ac55168d7bf5e07ff15a40\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559081998 +0200\ncommitter GitHub <noreply@github.com> 1559081998 +0200\n\nRollup merge of #61157 - czipperz:BufReader-Seek-remove-extra-discard_buffer, r=nikomatsakis\n\nBufReader: In Seek impl, remove extra discard_buffer call\n\nAs far as I can tell, this code does nothing.  I'm not sure why it even is there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/745af720bb9824b5a1810d1326a3c4bbc8eef1e5", "html_url": "https://github.com/rust-lang/rust/commit/745af720bb9824b5a1810d1326a3c4bbc8eef1e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/745af720bb9824b5a1810d1326a3c4bbc8eef1e5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe9080ea023927f2a047a3b23ec579188c63b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe9080ea023927f2a047a3b23ec579188c63b7d", "html_url": "https://github.com/rust-lang/rust/commit/bfe9080ea023927f2a047a3b23ec579188c63b7d"}, {"sha": "b1ae49cae078d472d9ac55168d7bf5e07ff15a40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ae49cae078d472d9ac55168d7bf5e07ff15a40", "html_url": "https://github.com/rust-lang/rust/commit/b1ae49cae078d472d9ac55168d7bf5e07ff15a40"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "d0e56acc8fb272a6833659db20a9fd2041aa4122", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/745af720bb9824b5a1810d1326a3c4bbc8eef1e5/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745af720bb9824b5a1810d1326a3c4bbc8eef1e5/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=745af720bb9824b5a1810d1326a3c4bbc8eef1e5", "patch": "@@ -1162,6 +1162,41 @@ mod tests {\n         assert_eq!(reader.get_ref().pos, expected);\n     }\n \n+    #[test]\n+    fn test_buffered_reader_seek_underflow_discard_buffer_between_seeks() {\n+        // gimmick reader that returns Err after first seek\n+        struct ErrAfterFirstSeekReader {\n+            first_seek: bool,\n+        }\n+        impl Read for ErrAfterFirstSeekReader {\n+            fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+                for x in &mut *buf {\n+                    *x = 0;\n+                }\n+                Ok(buf.len())\n+            }\n+        }\n+        impl Seek for ErrAfterFirstSeekReader {\n+            fn seek(&mut self, _: SeekFrom) -> io::Result<u64> {\n+                if self.first_seek {\n+                    self.first_seek = false;\n+                    Ok(0)\n+                } else {\n+                    Err(io::Error::new(io::ErrorKind::Other, \"oh no!\"))\n+                }\n+            }\n+        }\n+\n+        let mut reader = BufReader::with_capacity(5, ErrAfterFirstSeekReader { first_seek: true });\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 0, 0, 0, 0][..]));\n+\n+        // The following seek will require two underlying seeks.  The first will\n+        // succeed but the second will fail.  This should still invalidate the\n+        // buffer.\n+        assert!(reader.seek(SeekFrom::Current(i64::min_value())).is_err());\n+        assert_eq!(reader.buffer().len(), 0);\n+    }\n+\n     #[test]\n     fn test_buffered_writer() {\n         let inner = Vec::new();"}]}