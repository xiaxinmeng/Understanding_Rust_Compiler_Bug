{"sha": "b4032a86ea97a4a15fb2274f4af9d749cb68e483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MDMyYTg2ZWE5N2E0YTE1ZmIyMjc0ZjRhZjlkNzQ5Y2I2OGU0ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T16:34:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T16:34:40Z"}, "message": "Auto merge of #1216 - RalfJung:env, r=RalfJung\n\nmove environ init to update_environ\n\n@christianpoveda I thought of a way to simplify initialization a bit. :)", "tree": {"sha": "e770d5db2e5f337c3367e3beb8d71984b0ab063d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e770d5db2e5f337c3367e3beb8d71984b0ab063d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4032a86ea97a4a15fb2274f4af9d749cb68e483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4032a86ea97a4a15fb2274f4af9d749cb68e483", "html_url": "https://github.com/rust-lang/rust/commit/b4032a86ea97a4a15fb2274f4af9d749cb68e483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4032a86ea97a4a15fb2274f4af9d749cb68e483/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a25459e53c73b18126c2404929245256f1a58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a25459e53c73b18126c2404929245256f1a58e", "html_url": "https://github.com/rust-lang/rust/commit/e9a25459e53c73b18126c2404929245256f1a58e"}, {"sha": "87dbf10e84c4545c90be11325107fa0f2876f1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87dbf10e84c4545c90be11325107fa0f2876f1fd", "html_url": "https://github.com/rust-lang/rust/commit/87dbf10e84c4545c90be11325107fa0f2876f1fd"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b06db5676f3e9e5e7927d94c00c2cab9307d67c2", "filename": "src/shims/env.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4032a86ea97a4a15fb2274f4af9d749cb68e483/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4032a86ea97a4a15fb2274f4af9d749cb68e483/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b4032a86ea97a4a15fb2274f4af9d749cb68e483", "patch": "@@ -30,11 +30,6 @@ impl EnvVars {\n                 }\n             }\n         }\n-        // Initialize the `environ` static\n-        let layout = ecx.layout_of(ecx.tcx.types.usize)?;\n-        let place = ecx.allocate(layout, MiriMemoryKind::Machine.into());\n-        ecx.write_scalar(Scalar::from_machine_usize(0, &*ecx.tcx), place.into())?;\n-        ecx.memory.extra.environ = Some(place);\n         ecx.update_environ()\n     }\n }\n@@ -160,17 +155,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    /// Updates the `environ` static. It should not be called before\n-    /// `EnvVars::init`.\n+    /// Updates the `environ` static.\n+    /// The first time it gets called, also initializes `extra.environ`.\n     fn update_environ(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        // Deallocate the old environ value.\n-        let old_vars_ptr = this.read_scalar(this.memory.extra.environ.unwrap().into())?.not_undef()?;\n-        // The pointer itself can be null because `EnvVars::init` only\n-        // initializes the place for the static but not the static itself.\n-        if !this.is_null(old_vars_ptr)? {\n+        // Deallocate the old environ value, if any.\n+        if let Some(environ) = this.memory.extra.environ {\n+            let old_vars_ptr = this.read_scalar(environ.into())?.not_undef()?;\n             this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Machine.into())?;\n+        } else {\n+            // No `environ` allocated yet, let's do that.\n+            let layout = this.layout_of(this.tcx.types.usize)?;\n+            let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+            this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n+            this.memory.extra.environ = Some(place);\n         }\n+\n         // Collect all the pointers to each variable in a vector.\n         let mut vars: Vec<Scalar<Tag>> = this.machine.env_vars.map.values().map(|&ptr| ptr.into()).collect();\n         // Add the trailing null pointer."}]}