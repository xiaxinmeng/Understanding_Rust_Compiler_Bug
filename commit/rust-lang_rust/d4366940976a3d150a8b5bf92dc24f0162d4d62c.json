{"sha": "d4366940976a3d150a8b5bf92dc24f0162d4d62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MzY2OTQwOTc2YTNkMTUwYThiNWJmOTJkYzI0ZjAxNjJkNGQ2MmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T14:02:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T14:02:51Z"}, "message": "Path expressions", "tree": {"sha": "5d43e0d49dd2cdb322a3cd367655929dc3e3d3ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d43e0d49dd2cdb322a3cd367655929dc3e3d3ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4366940976a3d150a8b5bf92dc24f0162d4d62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4366940976a3d150a8b5bf92dc24f0162d4d62c", "html_url": "https://github.com/rust-lang/rust/commit/d4366940976a3d150a8b5bf92dc24f0162d4d62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4366940976a3d150a8b5bf92dc24f0162d4d62c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c385e8105c7fad07a5728979e86a2a6a5e88ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c385e8105c7fad07a5728979e86a2a6a5e88ba", "html_url": "https://github.com/rust-lang/rust/commit/69c385e8105c7fad07a5728979e86a2a6a5e88ba"}], "stats": {"total": 337, "additions": 320, "deletions": 17}, "files": [{"sha": "8232ba1dc394e04a9a2fb99a3df85e86ab121bcf", "filename": "src/grammar.ron", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -120,6 +120,7 @@ Grammar(\n         \"PLACEHOLDER_PAT\",\n \n         \"TUPLE_EXPR\",\n+        \"PATH_EXPR\",\n \n         \"EXTERN_BLOCK\",\n         \"ENUM_VARIANT\",\n@@ -133,15 +134,18 @@ Grammar(\n         \"LITERAL\",\n         \"ALIAS\",\n         \"VISIBILITY\",\n-        \"TYPE_PARAM_LIST\",\n         \"WHERE_CLAUSE\",\n-        \"LIFETIME_PARAM\",\n-        \"TYPE_PARAM\",\n         \"ABI\",\n         \"NAME\",\n         \"NAME_REF\",\n         \"VALUE_PARAMETER\",\n         \"BLOCK\",\n         \"LET_STMT\",\n+\n+        \"TYPE_PARAM\",\n+        \"LIFETIME_PARAM\",\n+        \"TYPE_PARAM_LIST\",\n+        \"TYPE_ARG_LIST\",\n+\n     ]\n )"}, {"sha": "ece69824834694d098d4ece784b56e44d8d4ae08", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -2,7 +2,16 @@ use super::*;\n \n // test expr_literals\n // fn foo() {\n-//     let _ = 92;\n+//     let _ = true;\n+//     let _ = false;\n+//     let _ = 1;\n+//     let _ = 2.0;\n+//     let _ = b'a';\n+//     let _ = 'b';\n+//     let _ = \"c\";\n+//     let _ = r\"d\";\n+//     let _ = b\"e\";\n+//     let _ = br\"f\";\n // }\n pub(super) fn literal(p: &mut Parser) -> bool {\n     match p.current() {\n@@ -21,6 +30,9 @@ pub(super) fn expr(p: &mut Parser) {\n     if literal(p) {\n         return;\n     }\n+    if paths::is_path_start(p) {\n+        return path_expr(p);\n+    }\n \n     match p.current() {\n         L_PAREN => tuple_expr(p),\n@@ -35,3 +47,16 @@ fn tuple_expr(p: &mut Parser) {\n     p.expect(R_PAREN);\n     m.complete(p, TUPLE_EXPR);\n }\n+\n+// test path_expr\n+// fn foo() {\n+//     let _ = a;\n+//     let _ = a::b;\n+//     let _ = ::a::<b>;\n+// }\n+fn path_expr(p: &mut Parser) {\n+    assert!(paths::is_path_start(p));\n+    let m = p.start();\n+    paths::expr_path(p);\n+    m.complete(p, PATH_EXPR);\n+}"}, {"sha": "e4823eadbf026a781b4fd8c4e3a5d1cbb55a8125", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -27,6 +27,7 @@ mod items;\n mod paths;\n mod patterns;\n mod type_params;\n+mod type_args;\n mod types;\n \n use {"}, {"sha": "69ed84665a052e2984c709ac5acc29fee69a8b76", "filename": "src/parser/grammar/paths.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpaths.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -8,19 +8,26 @@ pub(super) fn is_path_start(p: &Parser) -> bool {\n }\n \n pub(super) fn use_path(p: &mut Parser) {\n-    path(p)\n+    path(p, Mode::Use)\n }\n \n pub(super) fn type_path(p: &mut Parser) {\n-    path(p)\n+    path(p, Mode::Type)\n }\n \n-fn path(p: &mut Parser) {\n+pub(super) fn expr_path(p: &mut Parser) {\n+    path(p, Mode::Expr)\n+}\n+\n+#[derive(Clone, Copy, Eq, PartialEq)]\n+enum Mode { Use, Type, Expr }\n+\n+fn path(p: &mut Parser, mode: Mode) {\n     if !is_path_start(p) {\n         return;\n     }\n     let path = p.start();\n-    path_segment(p, true);\n+    path_segment(p, mode, true);\n     let mut qual = path.complete(p, PATH);\n     loop {\n         let use_tree = match p.nth(1) {\n@@ -30,7 +37,7 @@ fn path(p: &mut Parser) {\n         if p.at(COLONCOLON) && !use_tree {\n             let path = qual.precede(p);\n             p.bump();\n-            path_segment(p, false);\n+            path_segment(p, mode, false);\n             let path = path.complete(p, PATH);\n             qual = path;\n         } else {\n@@ -39,17 +46,28 @@ fn path(p: &mut Parser) {\n     }\n }\n \n-fn path_segment(p: &mut Parser, first: bool) {\n+fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n     let segment = p.start();\n     if first {\n         p.eat(COLONCOLON);\n     }\n     match p.current() {\n-        IDENT => name_ref(p),\n+        IDENT => {\n+            name_ref(p);\n+            path_generic_args(p, mode);\n+        },\n         SELF_KW | SUPER_KW => p.bump(),\n         _ => {\n             p.error(\"expected identifier\");\n         }\n     };\n     segment.complete(p, PATH_SEGMENT);\n }\n+\n+fn path_generic_args(p: &mut Parser, mode: Mode) {\n+    match mode {\n+        Mode::Use => return,\n+        Mode::Type => type_args::list(p, false),\n+        Mode::Expr => type_args::list(p, true),\n+    }\n+}"}, {"sha": "20e75b4b0dbdb5ca151f3af8c59ba472d2b444ea", "filename": "src/parser/grammar/type_args.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fparser%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_args.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -0,0 +1,26 @@\n+use super::*;\n+\n+pub(super) fn list(p: &mut Parser, colon_colon_required: bool) {\n+    let m;\n+    match (colon_colon_required, p.nth(0), p.nth(1)) {\n+        (_, COLONCOLON, L_ANGLE) => {\n+            m = p.start();\n+            p.bump();\n+            p.bump();\n+        }\n+        (false, L_ANGLE, _) => {\n+            m = p.start();\n+            p.bump();\n+        }\n+        _ => return\n+    };\n+\n+    while !p.at(EOF) && !p.at(R_ANGLE) {\n+        types::type_(p);\n+        if !p.at(R_ANGLE) && !p.expect(COMMA) {\n+            break;\n+        }\n+    }\n+    p.expect(R_ANGLE);\n+    m.complete(p, TYPE_ARG_LIST);\n+}"}, {"sha": "bc2a995f6add5f9f06a761005835c2f551b09036", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -115,6 +115,7 @@ pub enum SyntaxKind {\n     BIND_PAT,\n     PLACEHOLDER_PAT,\n     TUPLE_EXPR,\n+    PATH_EXPR,\n     EXTERN_BLOCK,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -127,16 +128,17 @@ pub enum SyntaxKind {\n     LITERAL,\n     ALIAS,\n     VISIBILITY,\n-    TYPE_PARAM_LIST,\n     WHERE_CLAUSE,\n-    LIFETIME_PARAM,\n-    TYPE_PARAM,\n     ABI,\n     NAME,\n     NAME_REF,\n     VALUE_PARAMETER,\n     BLOCK,\n     LET_STMT,\n+    TYPE_PARAM,\n+    LIFETIME_PARAM,\n+    TYPE_PARAM_LIST,\n+    TYPE_ARG_LIST,\n     // Technical SyntaxKinds: they appear temporally during parsing,\n     // but never end up in the final tree\n     #[doc(hidden)]\n@@ -259,6 +261,7 @@ impl SyntaxKind {\n             BIND_PAT => &SyntaxInfo { name: \"BIND_PAT\" },\n             PLACEHOLDER_PAT => &SyntaxInfo { name: \"PLACEHOLDER_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n+            PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n@@ -271,16 +274,17 @@ impl SyntaxKind {\n             LITERAL => &SyntaxInfo { name: \"LITERAL\" },\n             ALIAS => &SyntaxInfo { name: \"ALIAS\" },\n             VISIBILITY => &SyntaxInfo { name: \"VISIBILITY\" },\n-            TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n             WHERE_CLAUSE => &SyntaxInfo { name: \"WHERE_CLAUSE\" },\n-            LIFETIME_PARAM => &SyntaxInfo { name: \"LIFETIME_PARAM\" },\n-            TYPE_PARAM => &SyntaxInfo { name: \"TYPE_PARAM\" },\n             ABI => &SyntaxInfo { name: \"ABI\" },\n             NAME => &SyntaxInfo { name: \"NAME\" },\n             NAME_REF => &SyntaxInfo { name: \"NAME_REF\" },\n             VALUE_PARAMETER => &SyntaxInfo { name: \"VALUE_PARAMETER\" },\n             BLOCK => &SyntaxInfo { name: \"BLOCK\" },\n             LET_STMT => &SyntaxInfo { name: \"LET_STMT\" },\n+            TYPE_PARAM => &SyntaxInfo { name: \"TYPE_PARAM\" },\n+            LIFETIME_PARAM => &SyntaxInfo { name: \"LIFETIME_PARAM\" },\n+            TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n+            TYPE_ARG_LIST => &SyntaxInfo { name: \"TYPE_ARG_LIST\" },\n \n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },"}, {"sha": "e9855bad7c30284b9002caeb2a566cb200737d1e", "filename": "tests/data/parser/inline/0039_path_expr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0039_path_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0039_path_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0039_path_expr.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    let _ = a;\n+    let _ = a::b;\n+    let _ = ::a::<b>;\n+}"}, {"sha": "d149fbb759f9aa15b5e74b7a3dfac35b6691761a", "filename": "tests/data/parser/inline/0039_path_expr.txt", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0039_path_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0039_path_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0039_path_expr.txt?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -0,0 +1,74 @@\n+FILE@[0; 68)\n+  FN_ITEM@[0; 68)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    L_PAREN@[6; 7)\n+    R_PAREN@[7; 8)\n+    BLOCK@[8; 68)\n+      WHITESPACE@[8; 9)\n+      L_CURLY@[9; 10)\n+      LET_STMT@[10; 30)\n+        WHITESPACE@[10; 15)\n+        LET_KW@[15; 18)\n+        PLACEHOLDER_PAT@[18; 21)\n+          WHITESPACE@[18; 19)\n+          UNDERSCORE@[19; 20)\n+          WHITESPACE@[20; 21)\n+        EQ@[21; 22)\n+        PATH_EXPR@[22; 24)\n+          PATH@[22; 24)\n+            PATH_SEGMENT@[22; 24)\n+              NAME_REF@[22; 24)\n+                WHITESPACE@[22; 23)\n+                IDENT@[23; 24) \"a\"\n+        SEMI@[24; 25)\n+        WHITESPACE@[25; 30)\n+      LET_STMT@[30; 48)\n+        LET_KW@[30; 33)\n+        PLACEHOLDER_PAT@[33; 36)\n+          WHITESPACE@[33; 34)\n+          UNDERSCORE@[34; 35)\n+          WHITESPACE@[35; 36)\n+        EQ@[36; 37)\n+        PATH_EXPR@[37; 42)\n+          PATH@[37; 42)\n+            PATH@[37; 39)\n+              PATH_SEGMENT@[37; 39)\n+                NAME_REF@[37; 39)\n+                  WHITESPACE@[37; 38)\n+                  IDENT@[38; 39) \"a\"\n+            COLONCOLON@[39; 41)\n+            PATH_SEGMENT@[41; 42)\n+              NAME_REF@[41; 42)\n+                IDENT@[41; 42) \"b\"\n+        SEMI@[42; 43)\n+        WHITESPACE@[43; 48)\n+      LET_STMT@[48; 66)\n+        LET_KW@[48; 51)\n+        PLACEHOLDER_PAT@[51; 54)\n+          WHITESPACE@[51; 52)\n+          UNDERSCORE@[52; 53)\n+          WHITESPACE@[53; 54)\n+        EQ@[54; 55)\n+        PATH_EXPR@[55; 64)\n+          PATH@[55; 64)\n+            PATH_SEGMENT@[55; 64)\n+              WHITESPACE@[55; 56)\n+              COLONCOLON@[56; 58)\n+              NAME_REF@[58; 59)\n+                IDENT@[58; 59) \"a\"\n+              TYPE_ARG_LIST@[59; 64)\n+                COLONCOLON@[59; 61)\n+                L_ANGLE@[61; 62)\n+                PATH_TYPE@[62; 63)\n+                  PATH@[62; 63)\n+                    PATH_SEGMENT@[62; 63)\n+                      NAME_REF@[62; 63)\n+                        IDENT@[62; 63) \"b\"\n+                R_ANGLE@[63; 64)\n+        SEMI@[64; 65)\n+        WHITESPACE@[65; 66)\n+      R_CURLY@[66; 67)\n+      WHITESPACE@[67; 68)"}, {"sha": "2e11a5a6e68c80abe5a7397236f9bfef1d7d814b", "filename": "tests/data/parser/inline/0040_expr_literals.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0040_expr_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0040_expr_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0040_expr_literals.rs?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -0,0 +1,12 @@\n+fn foo() {\n+    let _ = true;\n+    let _ = false;\n+    let _ = 1;\n+    let _ = 2.0;\n+    let _ = b'a';\n+    let _ = 'b';\n+    let _ = \"c\";\n+    let _ = r\"d\";\n+    let _ = b\"e\";\n+    let _ = br\"f\";\n+}"}, {"sha": "83d72bf950f95425478254cd375e8f4d760a188d", "filename": "tests/data/parser/inline/0040_expr_literals.txt", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0040_expr_literals.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d4366940976a3d150a8b5bf92dc24f0162d4d62c/tests%2Fdata%2Fparser%2Finline%2F0040_expr_literals.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0040_expr_literals.txt?ref=d4366940976a3d150a8b5bf92dc24f0162d4d62c", "patch": "@@ -0,0 +1,134 @@\n+FILE@[0; 189)\n+  FN_ITEM@[0; 189)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    L_PAREN@[6; 7)\n+    R_PAREN@[7; 8)\n+    BLOCK@[8; 189)\n+      WHITESPACE@[8; 9)\n+      L_CURLY@[9; 10)\n+      LET_STMT@[10; 33)\n+        WHITESPACE@[10; 15)\n+        LET_KW@[15; 18)\n+        PLACEHOLDER_PAT@[18; 21)\n+          WHITESPACE@[18; 19)\n+          UNDERSCORE@[19; 20)\n+          WHITESPACE@[20; 21)\n+        EQ@[21; 22)\n+        LITERAL@[22; 27)\n+          WHITESPACE@[22; 23)\n+          TRUE_KW@[23; 27)\n+        SEMI@[27; 28)\n+        WHITESPACE@[28; 33)\n+      LET_STMT@[33; 52)\n+        LET_KW@[33; 36)\n+        PLACEHOLDER_PAT@[36; 39)\n+          WHITESPACE@[36; 37)\n+          UNDERSCORE@[37; 38)\n+          WHITESPACE@[38; 39)\n+        EQ@[39; 40)\n+        LITERAL@[40; 46)\n+          WHITESPACE@[40; 41)\n+          FALSE_KW@[41; 46)\n+        SEMI@[46; 47)\n+        WHITESPACE@[47; 52)\n+      LET_STMT@[52; 67)\n+        LET_KW@[52; 55)\n+        PLACEHOLDER_PAT@[55; 58)\n+          WHITESPACE@[55; 56)\n+          UNDERSCORE@[56; 57)\n+          WHITESPACE@[57; 58)\n+        EQ@[58; 59)\n+        LITERAL@[59; 61)\n+          WHITESPACE@[59; 60)\n+          INT_NUMBER@[60; 61)\n+        SEMI@[61; 62)\n+        WHITESPACE@[62; 67)\n+      LET_STMT@[67; 84)\n+        LET_KW@[67; 70)\n+        PLACEHOLDER_PAT@[70; 73)\n+          WHITESPACE@[70; 71)\n+          UNDERSCORE@[71; 72)\n+          WHITESPACE@[72; 73)\n+        EQ@[73; 74)\n+        LITERAL@[74; 78)\n+          WHITESPACE@[74; 75)\n+          FLOAT_NUMBER@[75; 78)\n+        SEMI@[78; 79)\n+        WHITESPACE@[79; 84)\n+      LET_STMT@[84; 102)\n+        LET_KW@[84; 87)\n+        PLACEHOLDER_PAT@[87; 90)\n+          WHITESPACE@[87; 88)\n+          UNDERSCORE@[88; 89)\n+          WHITESPACE@[89; 90)\n+        EQ@[90; 91)\n+        LITERAL@[91; 96)\n+          WHITESPACE@[91; 92)\n+          BYTE@[92; 96)\n+        SEMI@[96; 97)\n+        WHITESPACE@[97; 102)\n+      LET_STMT@[102; 119)\n+        LET_KW@[102; 105)\n+        PLACEHOLDER_PAT@[105; 108)\n+          WHITESPACE@[105; 106)\n+          UNDERSCORE@[106; 107)\n+          WHITESPACE@[107; 108)\n+        EQ@[108; 109)\n+        LITERAL@[109; 113)\n+          WHITESPACE@[109; 110)\n+          CHAR@[110; 113)\n+        SEMI@[113; 114)\n+        WHITESPACE@[114; 119)\n+      LET_STMT@[119; 136)\n+        LET_KW@[119; 122)\n+        PLACEHOLDER_PAT@[122; 125)\n+          WHITESPACE@[122; 123)\n+          UNDERSCORE@[123; 124)\n+          WHITESPACE@[124; 125)\n+        EQ@[125; 126)\n+        LITERAL@[126; 130)\n+          WHITESPACE@[126; 127)\n+          STRING@[127; 130)\n+        SEMI@[130; 131)\n+        WHITESPACE@[131; 136)\n+      LET_STMT@[136; 154)\n+        LET_KW@[136; 139)\n+        PLACEHOLDER_PAT@[139; 142)\n+          WHITESPACE@[139; 140)\n+          UNDERSCORE@[140; 141)\n+          WHITESPACE@[141; 142)\n+        EQ@[142; 143)\n+        LITERAL@[143; 148)\n+          WHITESPACE@[143; 144)\n+          RAW_STRING@[144; 148)\n+        SEMI@[148; 149)\n+        WHITESPACE@[149; 154)\n+      LET_STMT@[154; 172)\n+        LET_KW@[154; 157)\n+        PLACEHOLDER_PAT@[157; 160)\n+          WHITESPACE@[157; 158)\n+          UNDERSCORE@[158; 159)\n+          WHITESPACE@[159; 160)\n+        EQ@[160; 161)\n+        LITERAL@[161; 166)\n+          WHITESPACE@[161; 162)\n+          BYTE_STRING@[162; 166)\n+        SEMI@[166; 167)\n+        WHITESPACE@[167; 172)\n+      LET_STMT@[172; 187)\n+        LET_KW@[172; 175)\n+        PLACEHOLDER_PAT@[175; 178)\n+          WHITESPACE@[175; 176)\n+          UNDERSCORE@[176; 177)\n+          WHITESPACE@[177; 178)\n+        EQ@[178; 179)\n+        LITERAL@[179; 185)\n+          WHITESPACE@[179; 180)\n+          RAW_BYTE_STRING@[180; 185)\n+        SEMI@[185; 186)\n+        WHITESPACE@[186; 187)\n+      R_CURLY@[187; 188)\n+      WHITESPACE@[188; 189)"}]}