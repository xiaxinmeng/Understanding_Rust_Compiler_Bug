{"sha": "abb616209d23f0883f4e96253c4233c29741fc7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYjYxNjIwOWQyM2YwODgzZjRlOTYyNTNjNDIzM2MyOTc0MWZjN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-31T07:51:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-31T07:51:35Z"}, "message": "auto merge of #13220 : brson/rust/from_iter, r=thestinger", "tree": {"sha": "b860d566ba0c30adf456121deb4b807daa4dfaba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b860d566ba0c30adf456121deb4b807daa4dfaba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abb616209d23f0883f4e96253c4233c29741fc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abb616209d23f0883f4e96253c4233c29741fc7d", "html_url": "https://github.com/rust-lang/rust/commit/abb616209d23f0883f4e96253c4233c29741fc7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abb616209d23f0883f4e96253c4233c29741fc7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6281299230aca568723463897ed7448c9b51c4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6281299230aca568723463897ed7448c9b51c4a7", "html_url": "https://github.com/rust-lang/rust/commit/6281299230aca568723463897ed7448c9b51c4a7"}, {"sha": "ee052198c51599c987a6d2e9601eaaba21316c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee052198c51599c987a6d2e9601eaaba21316c52", "html_url": "https://github.com/rust-lang/rust/commit/ee052198c51599c987a6d2e9601eaaba21316c52"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "861aba57ec39ecc1e5651c2015bea616afae4375", "filename": "src/doc/guide-container.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Fdoc%2Fguide-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Fdoc%2Fguide-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-container.md?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -278,7 +278,7 @@ vectors is as follows:\n \n ~~~ {.ignore}\n impl<A> FromIterator<A> for ~[A] {\n-    pub fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\n+    pub fn from_iter<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n         let mut xs = with_capacity(lower);\n         for x in iterator {"}, {"sha": "570f88112315c22ee9b79a0aa631121981104151", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -582,7 +582,7 @@ impl<A> DoubleEndedIterator<A> for MoveItems<A> {\n }\n \n impl<A> FromIterator<A> for DList<A> {\n-    fn from_iterator<T: Iterator<A>>(iterator: T) -> DList<A> {\n+    fn from_iter<T: Iterator<A>>(iterator: T) -> DList<A> {\n         let mut ret = DList::new();\n         ret.extend(iterator);\n         ret"}, {"sha": "1868abbbcc4a4c2a51138c68df4700564987643d", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -1356,7 +1356,7 @@ pub type Values<'a, K, V> =\n     iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n \n impl<K: TotalEq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n-    fn from_iterator<T: Iterator<(K, V)>>(iter: T) -> HashMap<K, V, H> {\n+    fn from_iter<T: Iterator<(K, V)>>(iter: T) -> HashMap<K, V, H> {\n         let (lower, _) = iter.size_hint();\n         let mut map = HashMap::with_capacity_and_hasher(lower, Default::default());\n         map.extend(iter);\n@@ -1540,7 +1540,7 @@ impl<T: TotalEq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T,\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n-    fn from_iterator<I: Iterator<T>>(iter: I) -> HashSet<T, H> {\n+    fn from_iter<I: Iterator<T>>(iter: I) -> HashSet<T, H> {\n         let (lower, _) = iter.size_hint();\n         let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n         set.extend(iter);"}, {"sha": "78bc72e77e2e2ebf6e70c5b8bf688fed9ce18496", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -193,7 +193,7 @@ impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n }\n \n impl<T: Ord> FromIterator<T> for PriorityQueue<T> {\n-    fn from_iterator<Iter: Iterator<T>>(iter: Iter) -> PriorityQueue<T> {\n+    fn from_iter<Iter: Iterator<T>>(iter: Iter) -> PriorityQueue<T> {\n         let mut q = PriorityQueue::new();\n         q.extend(iter);\n         q"}, {"sha": "5da7a33eef2c80b1dcc2d665d0ff513829823956", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -386,7 +386,7 @@ impl<A: Eq> Eq for RingBuf<A> {\n }\n \n impl<A> FromIterator<A> for RingBuf<A> {\n-    fn from_iterator<T: Iterator<A>>(iterator: T) -> RingBuf<A> {\n+    fn from_iter<T: Iterator<A>>(iterator: T) -> RingBuf<A> {\n         let (lower, _) = iterator.size_hint();\n         let mut deq = RingBuf::with_capacity(lower);\n         deq.extend(iterator);\n@@ -778,7 +778,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_from_iterator() {\n+    fn test_from_iter() {\n         use std::iter;\n         let v = ~[1,2,3,4,5,6,7];\n         let deq: RingBuf<int> = v.iter().map(|&x| x).collect();"}, {"sha": "96392894692f941cfb8f5143b980b41f2904068b", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -971,7 +971,7 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n }\n \n impl<K: TotalOrd, V> FromIterator<(K, V)> for TreeMap<K, V> {\n-    fn from_iterator<T: Iterator<(K, V)>>(iter: T) -> TreeMap<K, V> {\n+    fn from_iter<T: Iterator<(K, V)>>(iter: T) -> TreeMap<K, V> {\n         let mut map = TreeMap::new();\n         map.extend(iter);\n         map\n@@ -988,7 +988,7 @@ impl<K: TotalOrd, V> Extendable<(K, V)> for TreeMap<K, V> {\n }\n \n impl<T: TotalOrd> FromIterator<T> for TreeSet<T> {\n-    fn from_iterator<Iter: Iterator<T>>(iter: Iter) -> TreeSet<T> {\n+    fn from_iter<Iter: Iterator<T>>(iter: Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n         set.extend(iter);\n         set"}, {"sha": "a5124312dc9f86ed04ef291adc9ab594f7c29c90", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -261,7 +261,7 @@ impl<T> TrieMap<T> {\n }\n \n impl<T> FromIterator<(uint, T)> for TrieMap<T> {\n-    fn from_iterator<Iter: Iterator<(uint, T)>>(iter: Iter) -> TrieMap<T> {\n+    fn from_iter<Iter: Iterator<(uint, T)>>(iter: Iter) -> TrieMap<T> {\n         let mut map = TrieMap::new();\n         map.extend(iter);\n         map\n@@ -346,7 +346,7 @@ impl TrieSet {\n }\n \n impl FromIterator<uint> for TrieSet {\n-    fn from_iterator<Iter: Iterator<uint>>(iter: Iter) -> TrieSet {\n+    fn from_iter<Iter: Iterator<uint>>(iter: Iter) -> TrieSet {\n         let mut set = TrieSet::new();\n         set.extend(iter);\n         set"}, {"sha": "3e3766f1c11002dd8f50371f6b48a67a516dc32d", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -76,7 +76,7 @@ use mem;\n /// Conversion from an `Iterator`\n pub trait FromIterator<A> {\n     /// Build a container with elements from an external iterator.\n-    fn from_iterator<T: Iterator<A>>(iterator: T) -> Self;\n+    fn from_iter<T: Iterator<A>>(iterator: T) -> Self;\n }\n \n /// A type growable from an `Iterator` implementation\n@@ -460,7 +460,7 @@ pub trait Iterator<A> {\n     /// ```\n     #[inline]\n     fn collect<B: FromIterator<A>>(&mut self) -> B {\n-        FromIterator::from_iterator(self.by_ref())\n+        FromIterator::from_iter(self.by_ref())\n     }\n \n     /// Loops through `n` iterations, returning the `n`th element of the\n@@ -2336,7 +2336,7 @@ mod tests {\n     #[test]\n     fn test_counter_from_iter() {\n         let it = count(0, 5).take(10);\n-        let xs: ~[int] = FromIterator::from_iterator(it);\n+        let xs: ~[int] = FromIterator::from_iter(it);\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n "}, {"sha": "19b7a5ca6735e6498200223912311968f7b67075", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -593,7 +593,7 @@ pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) ->\n         }\n     });\n \n-    let v: V = FromIterator::from_iterator(iter.by_ref());\n+    let v: V = FromIterator::from_iter(iter.by_ref());\n \n     if iter.state {\n         None"}, {"sha": "fa16b6f6eeb6e2432a8cb09e3fdf5a1b3af35b3b", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -230,7 +230,7 @@ pub fn collect<T, E, Iter: Iterator<Result<T, E>>, V: FromIterator<T>>(iter: Ite\n         }\n     });\n \n-    let v: V = FromIterator::from_iterator(iter.by_ref());\n+    let v: V = FromIterator::from_iter(iter.by_ref());\n \n     match iter.state {\n         Some(err) => Err(err),"}, {"sha": "19bb9e728ae0a24a77e2d9d13338fd8c741b3004", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -2891,7 +2891,7 @@ impl<T> Drop for MoveItems<T> {\n pub type RevMoveItems<T> = Rev<MoveItems<T>>;\n \n impl<A> FromIterator<A> for ~[A] {\n-    fn from_iterator<T: Iterator<A>>(mut iterator: T) -> ~[A] {\n+    fn from_iter<T: Iterator<A>>(mut iterator: T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n         let mut xs = with_capacity(lower);\n         for x in iterator {"}, {"sha": "6d23877b02b7d043f6a01e62650f220af84f43f4", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -3019,7 +3019,7 @@ impl Clone for ~str {\n \n impl FromIterator<char> for ~str {\n     #[inline]\n-    fn from_iterator<T: Iterator<char>>(iterator: T) -> ~str {\n+    fn from_iter<T: Iterator<char>>(iterator: T) -> ~str {\n         let (lower, _) = iterator.size_hint();\n         let mut buf = with_capacity(lower);\n         buf.extend(iterator);"}, {"sha": "6265171f7d7471fc602c43a06b7280c4aadb2f0e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -305,7 +305,7 @@ impl<T:Clone> Clone for Vec<T> {\n }\n \n impl<T> FromIterator<T> for Vec<T> {\n-    fn from_iterator<I:Iterator<T>>(mut iterator: I) -> Vec<T> {\n+    fn from_iter<I:Iterator<T>>(mut iterator: I) -> Vec<T> {\n         let (lower, _) = iterator.size_hint();\n         let mut vector = Vec::with_capacity(lower);\n         for element in iterator {"}, {"sha": "e5e3a05f9988346a101b879519b5b1c6d2685c42", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -126,7 +126,7 @@ impl<T> Container for OwnedSlice<T> {\n }\n \n impl<T> FromIterator<T> for OwnedSlice<T> {\n-    fn from_iterator<I: Iterator<T>>(mut iter: I) -> OwnedSlice<T> {\n+    fn from_iter<I: Iterator<T>>(mut iter: I) -> OwnedSlice<T> {\n         OwnedSlice::from_vec(iter.collect())\n     }\n }"}, {"sha": "1dcebd7a01617b6d0ac536c3d54208fae166d7dc", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb616209d23f0883f4e96253c4233c29741fc7d/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=abb616209d23f0883f4e96253c4233c29741fc7d", "patch": "@@ -29,7 +29,7 @@ impl<T> Container for SmallVector<T> {\n }\n \n impl<T> FromIterator<T> for SmallVector<T> {\n-    fn from_iterator<I: Iterator<T>>(iter: I) -> SmallVector<T> {\n+    fn from_iter<I: Iterator<T>>(iter: I) -> SmallVector<T> {\n         let mut v = Zero;\n         v.extend(iter);\n         v\n@@ -167,7 +167,7 @@ mod test {\n     }\n \n     #[test]\n-    fn test_from_iterator() {\n+    fn test_from_iter() {\n         let v: SmallVector<int> = (vec!(1, 2, 3)).move_iter().collect();\n         assert_eq!(3, v.len());\n         assert_eq!(&1, v.get(0));"}]}