{"sha": "dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "node_id": "C_kwDOAAsO6NoAKGRkNzhjZTdiYmU3MGZjYjg3ZWNjNGYwY2UxMTYxMWJlMGIzYTdlNTk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-31T18:07:50Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:50:33Z"}, "message": "Add `Operators` lint pass", "tree": {"sha": "8d40e076d16e66ed16f3aa6e47335092e2710c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d40e076d16e66ed16f3aa6e47335092e2710c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "html_url": "https://github.com/rust-lang/rust/commit/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b776fb82941cadfc752368901f210831d5184d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/b776fb82941cadfc752368901f210831d5184d95", "html_url": "https://github.com/rust-lang/rust/commit/b776fb82941cadfc752368901f210831d5184d95"}], "stats": {"total": 164, "additions": 91, "deletions": 73}, "files": [{"sha": "7728157d2282dbc18c6664c6a3aa36668ae4b424", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "patch": "@@ -3,7 +3,6 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n-    LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n@@ -260,6 +259,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n+    LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),"}, {"sha": "26852445fdcdf56743fdaa7a8fe28fc34244c104", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "patch": "@@ -3,7 +3,6 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n-    LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n     LintId::of(attrs::DEPRECATED_SEMVER),\n@@ -51,6 +50,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(misc::MODULO_ONE),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n+    LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n     LintId::of(ptr::MUT_FROM_REF),"}, {"sha": "f0ce0db65a7a4e9cd17497eba82a028758e82723", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "patch": "@@ -35,7 +35,6 @@ store.register_lints(&[\n     utils::internal_lints::PRODUCE_ICE,\n     #[cfg(feature = \"internal\")]\n     utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n-    absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n     almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE,\n     approx_const::APPROX_CONSTANT,\n     as_conversions::AS_CONVERSIONS,\n@@ -437,6 +436,7 @@ store.register_lints(&[\n     octal_escapes::OCTAL_ESCAPES,\n     only_used_in_recursion::ONLY_USED_IN_RECURSION,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n+    operators::ABSURD_EXTREME_COMPARISONS,\n     option_env_unwrap::OPTION_ENV_UNWRAP,\n     option_if_let_else::OPTION_IF_LET_ELSE,\n     overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,"}, {"sha": "16e72400fbf134d9e35433af9f18c5da18aa84ae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "patch": "@@ -168,7 +168,6 @@ mod utils;\n mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n-mod absurd_extreme_comparisons;\n mod almost_complete_letter_range;\n mod approx_const;\n mod as_conversions;\n@@ -336,6 +335,7 @@ mod numeric_arithmetic;\n mod octal_escapes;\n mod only_used_in_recursion;\n mod open_options;\n+mod operators;\n mod option_env_unwrap;\n mod option_if_let_else;\n mod overflow_check_conditional;\n@@ -683,7 +683,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(derivable_impls::DerivableImpls));\n     store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n     store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n-    store.register_late_pass(|| Box::new(absurd_extreme_comparisons::AbsurdExtremeComparisons));\n     store.register_late_pass(|| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n     store.register_late_pass(|| Box::new(regex::Regex));\n     store.register_late_pass(|| Box::new(copies::CopyAndPaste));\n@@ -941,6 +940,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n     store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_retain::ManualRetain::new(msrv)));\n+    store.register_late_pass(|| Box::new(operators::Operators));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1ec4240afefe5c4939909735ef9d17c881d23efe", "filename": "clippy_lints/src/operators/absurd_extreme_comparisons.rs", "status": "renamed", "additions": 35, "deletions": 68, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs?ref=dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "patch": "@@ -1,7 +1,6 @@\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use clippy_utils::comparisons::{normalize_comparison, Rel};\n use clippy_utils::consts::{constant, Constant};\n@@ -10,73 +9,41 @@ use clippy_utils::source::snippet;\n use clippy_utils::ty::is_isize_or_usize;\n use clippy_utils::{clip, int_bits, unsext};\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for comparisons where one side of the relation is\n-    /// either the minimum or maximum value for its type and warns if it involves a\n-    /// case that is always true or always false. Only integer and boolean types are\n-    /// checked.\n-    ///\n-    /// ### Why is this bad?\n-    /// An expression like `min <= x` may misleadingly imply\n-    /// that it is possible for `x` to be less than the minimum. Expressions like\n-    /// `max < x` are probably mistakes.\n-    ///\n-    /// ### Known problems\n-    /// For `usize` the size of the current compile target will\n-    /// be assumed (e.g., 64 bits on 64 bit systems). This means code that uses such\n-    /// a comparison to detect target pointer width will trigger this lint. One can\n-    /// use `mem::sizeof` and compare its value or conditional compilation\n-    /// attributes\n-    /// like `#[cfg(target_pointer_width = \"64\")] ..` instead.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let vec: Vec<isize> = Vec::new();\n-    /// if vec.len() <= 0 {}\n-    /// if 100 > i32::MAX {}\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub ABSURD_EXTREME_COMPARISONS,\n-    correctness,\n-    \"a comparison with a maximum or minimum value that is always true or false\"\n-}\n+use super::ABSURD_EXTREME_COMPARISONS;\n \n-declare_lint_pass!(AbsurdExtremeComparisons => [ABSURD_EXTREME_COMPARISONS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for AbsurdExtremeComparisons {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Binary(ref cmp, lhs, rhs) = expr.kind {\n-            if let Some((culprit, result)) = detect_absurd_comparison(cx, cmp.node, lhs, rhs) {\n-                if !expr.span.from_expansion() {\n-                    let msg = \"this comparison involving the minimum or maximum element for this \\\n-                               type contains a case that is always true or always false\";\n-\n-                    let conclusion = match result {\n-                        AbsurdComparisonResult::AlwaysFalse => \"this comparison is always false\".to_owned(),\n-                        AbsurdComparisonResult::AlwaysTrue => \"this comparison is always true\".to_owned(),\n-                        AbsurdComparisonResult::InequalityImpossible => format!(\n-                            \"the case where the two sides are not equal never occurs, consider using `{} == {}` \\\n-                             instead\",\n-                            snippet(cx, lhs.span, \"lhs\"),\n-                            snippet(cx, rhs.span, \"rhs\")\n-                        ),\n-                    };\n-\n-                    let help = format!(\n-                        \"because `{}` is the {} value for this type, {}\",\n-                        snippet(cx, culprit.expr.span, \"x\"),\n-                        match culprit.which {\n-                            ExtremeType::Minimum => \"minimum\",\n-                            ExtremeType::Maximum => \"maximum\",\n-                        },\n-                        conclusion\n-                    );\n-\n-                    span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, None, &help);\n-                }\n-            }\n-        }\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    lhs: &'tcx Expr<'_>,\n+    rhs: &'tcx Expr<'_>,\n+) {\n+    if let Some((culprit, result)) = detect_absurd_comparison(cx, op, lhs, rhs) {\n+        let msg = \"this comparison involving the minimum or maximum element for this \\\n+                           type contains a case that is always true or always false\";\n+\n+        let conclusion = match result {\n+            AbsurdComparisonResult::AlwaysFalse => \"this comparison is always false\".to_owned(),\n+            AbsurdComparisonResult::AlwaysTrue => \"this comparison is always true\".to_owned(),\n+            AbsurdComparisonResult::InequalityImpossible => format!(\n+                \"the case where the two sides are not equal never occurs, consider using `{} == {}` \\\n+                         instead\",\n+                snippet(cx, lhs.span, \"lhs\"),\n+                snippet(cx, rhs.span, \"rhs\")\n+            ),\n+        };\n+\n+        let help = format!(\n+            \"because `{}` is the {} value for this type, {}\",\n+            snippet(cx, culprit.expr.span, \"x\"),\n+            match culprit.which {\n+                ExtremeType::Minimum => \"minimum\",\n+                ExtremeType::Maximum => \"maximum\",\n+            },\n+            conclusion\n+        );\n+\n+        span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, None, &help);\n     }\n }\n ", "previous_filename": "clippy_lints/src/absurd_extreme_comparisons.rs"}, {"sha": "6f5a16472773ff70cfa6d2345b50574837966f79", "filename": "clippy_lints/src/operators/mod.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=dd78ce7bbe70fcb87ecc4f0ce11611be0b3a7e59", "patch": "@@ -0,0 +1,51 @@\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+mod absurd_extreme_comparisons;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for comparisons where one side of the relation is\n+    /// either the minimum or maximum value for its type and warns if it involves a\n+    /// case that is always true or always false. Only integer and boolean types are\n+    /// checked.\n+    ///\n+    /// ### Why is this bad?\n+    /// An expression like `min <= x` may misleadingly imply\n+    /// that it is possible for `x` to be less than the minimum. Expressions like\n+    /// `max < x` are probably mistakes.\n+    ///\n+    /// ### Known problems\n+    /// For `usize` the size of the current compile target will\n+    /// be assumed (e.g., 64 bits on 64 bit systems). This means code that uses such\n+    /// a comparison to detect target pointer width will trigger this lint. One can\n+    /// use `mem::sizeof` and compare its value or conditional compilation\n+    /// attributes\n+    /// like `#[cfg(target_pointer_width = \"64\")] ..` instead.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let vec: Vec<isize> = Vec::new();\n+    /// if vec.len() <= 0 {}\n+    /// if 100 > i32::MAX {}\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub ABSURD_EXTREME_COMPARISONS,\n+    correctness,\n+    \"a comparison with a maximum or minimum value that is always true or false\"\n+}\n+\n+pub struct Operators;\n+impl_lint_pass!(Operators => [\n+    ABSURD_EXTREME_COMPARISONS,\n+]);\n+impl<'tcx> LateLintPass<'tcx> for Operators {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Binary(op, lhs, rhs) = e.kind {\n+            if !e.span.from_expansion() {\n+                absurd_extreme_comparisons::check(cx, e, op.node, lhs, rhs);\n+            }\n+        }\n+    }\n+}"}]}