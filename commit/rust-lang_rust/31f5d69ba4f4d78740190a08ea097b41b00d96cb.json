{"sha": "31f5d69ba4f4d78740190a08ea097b41b00d96cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjVkNjliYTRmNGQ3ODc0MDE5MGEwOGVhMDk3YjQxYjAwZDk2Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T09:38:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T09:38:34Z"}, "message": "Auto merge of #60125 - estebank:continue-evaluating, r=oli-obk\n\nDon't stop evaluating due to errors before borrow checking\n\nr? @oli-obk\n\nFix #60005. Follow up to #59903. Blocked on #53708, fixing the ICE in `src/test/ui/consts/match_ice.rs`.", "tree": {"sha": "bc4730f0e3bb9ead3ee01e9d11975b1692314bde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4730f0e3bb9ead3ee01e9d11975b1692314bde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f5d69ba4f4d78740190a08ea097b41b00d96cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f5d69ba4f4d78740190a08ea097b41b00d96cb", "html_url": "https://github.com/rust-lang/rust/commit/31f5d69ba4f4d78740190a08ea097b41b00d96cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f5d69ba4f4d78740190a08ea097b41b00d96cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f11354a9c1bf0c5ac250c7fa2bafc289a662f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f11354a9c1bf0c5ac250c7fa2bafc289a662f42", "html_url": "https://github.com/rust-lang/rust/commit/0f11354a9c1bf0c5ac250c7fa2bafc289a662f42"}, {"sha": "87ef96d3946ed4add766c0a2cd72d8443e92e4a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ef96d3946ed4add766c0a2cd72d8443e92e4a0", "html_url": "https://github.com/rust-lang/rust/commit/87ef96d3946ed4add766c0a2cd72d8443e92e4a0"}], "stats": {"total": 574, "additions": 449, "deletions": 125}, "files": [{"sha": "7e3d6d752ccdcf83c96c0eb750f27e4ebba26eee", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -5,9 +5,7 @@\n \n use crate::dep_graph::{DepKind, DepTrackingMapConfig};\n use std::marker::PhantomData;\n-use syntax_pos::DUMMY_SP;\n use crate::infer::InferCtxt;\n-use syntax_pos::Span;\n use crate::traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n              TraitEngine, Vtable};\n use crate::ty::{self, Ty, TyCtxt};\n@@ -69,7 +67,7 @@ pub fn codegen_fulfill_obligation<'a, 'tcx>(ty: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"fulfill_obligation: register_predicate_obligation {:?}\", predicate);\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });\n-        let vtable = infcx.drain_fulfillment_cx_or_panic(DUMMY_SP, &mut fulfill_cx, &vtable);\n+        let vtable = infcx.drain_fulfillment_cx_or_panic(&mut fulfill_cx, &vtable);\n \n         info!(\"Cache miss: {:?} => {:?}\", trait_ref, vtable);\n         vtable\n@@ -141,7 +139,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// unified, and hence we need to process those obligations to get\n     /// the complete picture of the type.\n     fn drain_fulfillment_cx_or_panic<T>(&self,\n-                                        span: Span,\n                                         fulfill_cx: &mut FulfillmentContext<'tcx>,\n                                         result: &T)\n                                         -> T::Lifted\n@@ -153,15 +150,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // contains unbound type parameters. It could be a slight\n         // optimization to stop iterating early.\n         if let Err(errors) = fulfill_cx.select_all_or_error(self) {\n-            span_bug!(span, \"Encountered errors `{:?}` resolving bounds after type-checking\",\n-                      errors);\n+            bug!(\"Encountered errors `{:?}` resolving bounds after type-checking\", errors);\n         }\n \n         let result = self.resolve_type_vars_if_possible(result);\n         let result = self.tcx.erase_regions(&result);\n \n         self.tcx.lift_to_global(&result).unwrap_or_else(||\n-            span_bug!(span, \"Uninferred types/regions in `{:?}`\", result)\n+            bug!(\"Uninferred types/regions in `{:?}`\", result)\n         )\n     }\n }"}, {"sha": "9a90ccda9140ca9bca1b3e7cea46f4a092124986", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -85,7 +85,7 @@ impl BoundRegion {\n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `libsyntax/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n+         RustcEncodable, RustcDecodable, HashStable, Debug)]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n     Bool,"}, {"sha": "f8b1271b8b5c6b6a717a8fd08abe818429afda4b", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -936,13 +936,6 @@ fn analysis<'tcx>(\n         });\n     });\n \n-    // Abort so we don't try to construct MIR with liveness errors.\n-    // We also won't want to continue with errors from rvalue promotion\n-    // We only do so if the only error found so far *isn't* a missing `fn main()`\n-    if !(entry_point.is_none() && sess.err_count() == 1) {\n-        tcx.sess.abort_if_errors();\n-    }\n-\n     time(sess, \"borrow checking\", || {\n         if tcx.use_ast_borrowck() {\n             borrowck::check_crate(tcx);"}, {"sha": "c41a09aecaad6d35fb8ec6d6f27188d1f5c08a8b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -211,6 +211,7 @@ impl<'a, 'tcx> LiteralExpander<'a, 'tcx> {\n         // the constant's pointee type\n         crty: Ty<'tcx>,\n     ) -> ConstValue<'tcx> {\n+        debug!(\"fold_const_value_deref {:?} {:?} {:?}\", val, rty, crty);\n         match (val, &crty.sty, &rty.sty) {\n             // the easy case, deref a reference\n             (ConstValue::Scalar(Scalar::Ptr(p)), x, y) if x == y => ConstValue::ByRef(\n@@ -238,6 +239,7 @@ impl<'a, 'tcx> LiteralExpander<'a, 'tcx> {\n \n impl<'a, 'tcx> PatternFolder<'tcx> for LiteralExpander<'a, 'tcx> {\n     fn fold_pattern(&mut self, pat: &Pattern<'tcx>) -> Pattern<'tcx> {\n+        debug!(\"fold_pattern {:?} {:?} {:?}\", pat, pat.ty.sty, pat.kind);\n         match (&pat.ty.sty, &*pat.kind) {\n             (\n                 &ty::Ref(_, rty, _),"}, {"sha": "e0b9921ca8d6ece421f7ca9daf995b4947a569f2", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -603,7 +603,9 @@ fn check_legality_of_move_bindings(\n             E0009,\n             \"cannot bind by-move and by-ref in the same pattern\",\n         );\n-        err.span_label(by_ref_span.unwrap(), \"both by-ref and by-move used\");\n+        if let Some(by_ref_span) = by_ref_span {\n+            err.span_label(by_ref_span, \"both by-ref and by-move used\");\n+        }\n         for span in span_vec.iter(){\n             err.span_label(*span, \"by-move pattern here\");\n         }"}, {"sha": "e354ec3e0baf02e93017bab7a2f6d38da13e6ca0", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -974,10 +974,27 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternKind::Wild\n             }\n             ty::Adt(adt_def, _) if !self.tcx.has_attr(adt_def.did, \"structural_match\") => {\n-                let msg = format!(\"to use a constant of type `{}` in a pattern, \\\n-                                    `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                    self.tcx.def_path_str(adt_def.did),\n-                                    self.tcx.def_path_str(adt_def.did));\n+                let path = self.tcx.def_path_str(adt_def.did);\n+                let msg = format!(\n+                    \"to use a constant of type `{}` in a pattern, \\\n+                     `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                    path,\n+                    path,\n+                );\n+                self.tcx.sess.span_err(span, &msg);\n+                PatternKind::Wild\n+            }\n+            ty::Ref(_, ty::TyS { sty: ty::Adt(adt_def, _), .. }, _)\n+            if !self.tcx.has_attr(adt_def.did, \"structural_match\") => {\n+                // HACK(estebank): Side-step ICE #53708, but anything other than erroring here\n+                // would be wrong. Returnging `PatternKind::Wild` is not technically correct.\n+                let path = self.tcx.def_path_str(adt_def.did);\n+                let msg = format!(\n+                    \"to use a constant of type `{}` in a pattern, \\\n+                     `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                    path,\n+                    path,\n+                );\n                 self.tcx.sess.span_err(span, &msg);\n                 PatternKind::Wild\n             }"}, {"sha": "bbcdd2c1812ae34e91aea2e854b1e9419583b11e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1502,9 +1502,11 @@ impl MirPass for QualifyAndPromoteConstants {\n                                 tcx.sess,\n                                 span,\n                                 E0723,\n-                                \"{} (see issue #57563)\",\n+                                \"{}\",\n                                 err,\n                             );\n+                            diag.note(\"for more information, see issue \\\n+                                       https://github.com/rust-lang/rust/issues/57563\");\n                             diag.help(\n                                 \"add #![feature(const_fn)] to the crate attributes to enable\",\n                             );"}, {"sha": "9ea5e5cd145a0e73340ec37082f4692e1f224a5d", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -9,9 +9,15 @@ fn foo() -> isize {\n     match x {\n         Enum::A(_) if { x = Enum::B(false); false } => 1,\n         //~^ ERROR cannot assign in a pattern guard\n+        //~| WARN cannot assign `x` in match guard\n+        //~| WARN this error has been downgraded to a warning for backwards compatibility\n+        //~| WARN this represents potential undefined behavior in your code and this warning will\n         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n         //~^ ERROR cannot mutably borrow in a pattern guard\n-        //~^^ ERROR cannot assign in a pattern guard\n+        //~| ERROR cannot assign in a pattern guard\n+        //~| WARN cannot mutably borrow `x` in match guard\n+        //~| WARN this error has been downgraded to a warning for backwards compatibility\n+        //~| WARN this represents potential undefined behavior in your code and this warning will\n         Enum::A(p) => *p,\n         Enum::B(_) => 2,\n     }"}, {"sha": "d12d751d89b766983824be81dbac8c8421095419", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -5,20 +5,43 @@ LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n \n error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:12:38\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:38\n    |\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                      ^ borrowed mutably in pattern guard\n    |\n    = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n \n error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:12:41\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:41\n    |\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n \n+warning[E0510]: cannot assign `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n+   |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n+warning[E0510]: cannot mutably borrow `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:15:33\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n+   |                                 ^^^^^^ cannot mutably borrow\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0301, E0302.\n+Some errors have detailed explanations: E0301, E0302, E0510.\n For more information about an error, try `rustc --explain E0301`."}, {"sha": "322048c7fbf3f124aa1b77ad583e7d09992cfa07", "filename": "src/test/ui/consts/const_let_refutable.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,5 +1,11 @@\n fn main() {}\n \n const fn slice([a, b]: &[i32]) -> i32 { //~ ERROR refutable pattern in function argument\n-    a + b\n+    a + b //~ ERROR can only call other `const fn` within a `const fn`\n+    //~^ WARN use of possibly uninitialized variable: `a`\n+    //~| WARN this error has been downgraded to a warning for backwards compatibility\n+    //~| WARN this represents potential undefined behavior in your code and this warning will\n+    //~| WARN use of possibly uninitialized variable: `b`\n+    //~| WARN this error has been downgraded to a warning for backwards compatibility\n+    //~| WARN this represents potential undefined behavior in your code and this warning will\n }"}, {"sha": "20433bbf8b5c764afecdaab642654234d7d29dd1", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,6 +4,34 @@ error[E0005]: refutable pattern in function argument: `&[]` not covered\n LL | const fn slice([a, b]: &[i32]) -> i32 {\n    |                ^^^^^^ pattern `&[]` not covered\n \n-error: aborting due to previous error\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const std::ops::Add::add` is not stable as `const fn`\n+  --> $DIR/const_let_refutable.rs:4:5\n+   |\n+LL |     a + b\n+   |     ^^^^^\n+   |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+warning[E0381]: use of possibly uninitialized variable: `a`\n+  --> $DIR/const_let_refutable.rs:4:5\n+   |\n+LL |     a + b\n+   |     ^ use of possibly uninitialized `a`\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n+warning[E0381]: use of possibly uninitialized variable: `b`\n+  --> $DIR/const_let_refutable.rs:4:9\n+   |\n+LL |     a + b\n+   |         ^ use of possibly uninitialized `b`\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0005`.\n+Some errors have detailed explanations: E0005, E0381, E0723.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "1c13bfceb6cc28c56793b830707baca6ba60d682", "filename": "src/test/ui/consts/match_ice.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -2,9 +2,17 @@\n \n struct S;\n \n+#[derive(PartialEq, Eq)]\n+struct T;\n+\n fn main() {\n     const C: &S = &S;\n-    match C { //~ ERROR non-exhaustive\n-        C => {} // this is a common bug around constants and references in patterns\n+    match C {\n+        C => {}\n+        //~^ ERROR to use a constant of type `S` in a pattern, `S` must be annotated with\n+    }\n+    const K: &T = &T;\n+    match K { //~ ERROR non-exhaustive patterns: `&T` not covered\n+        K => {}\n     }\n }"}, {"sha": "158581fcb1599c460f70b677ab78f086c17d8ea4", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,11 +1,17 @@\n-error[E0004]: non-exhaustive patterns: `&S` not covered\n-  --> $DIR/match_ice.rs:7:11\n+error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match_ice.rs:11:9\n    |\n-LL |     match C {\n-   |           ^ pattern `&S` not covered\n+LL |         C => {}\n+   |         ^\n+\n+error[E0004]: non-exhaustive patterns: `&T` not covered\n+  --> $DIR/match_ice.rs:15:11\n+   |\n+LL |     match K {\n+   |           ^ pattern `&T` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "ac8d082fc19049471de832c7a30bae5fa6588de9", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,9 +1,10 @@\n-error[E0723]: heap allocations are not allowed in const fn (see issue #57563)\n+error[E0723]: heap allocations are not allowed in const fn\n   --> $DIR/bad_const_fn_body_ice.rs:2:5\n    |\n LL |     vec![1, 2, 3]\n    |     ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "b1a50be99835d4c6dc1428f32d6fa3555fea4169", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,41 +1,46 @@\n-error[E0723]: unsizing casts are not allowed in const fn (see issue #57563)\n+error[E0723]: unsizing casts are not allowed in const fn\n   --> $DIR/cast_errors.rs:3:41\n    |\n LL | const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n    |                                         ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:5:23\n    |\n LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:8:5\n    |\n LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:11:28\n    |\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:13:21\n    |\n LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "7f6132ce9cd5e74fef1cc68dc2a831106a8552f2", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,9 +1,10 @@\n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cmp_fn_pointers.rs:1:14\n    |\n LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    |              ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "cb85956266b0e1275b912605b2886686b7d615f3", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,9 +1,10 @@\n-error[E0723]: loops are not allowed in const fn (see issue #57563)\n+error[E0723]: loops are not allowed in const fn\n   --> $DIR/loop_ice.rs:2:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7af379924608ff4d15f603b248deb08179cae9c4", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 66, "deletions": 33, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,12 +4,13 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     const fn into_inner(self) -> T { self.0 }\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:39:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n@@ -18,12 +19,13 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:46:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n@@ -32,228 +34,256 @@ error[E0493]: destructors cannot be evaluated at compile-time\n LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:53:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:58:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:76:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:78:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:80:33\n    |\n LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:82:35\n    |\n LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: only int and `bool` operations are stable in const fn (see issue #57563)\n+error[E0723]: only int and `bool` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:84:35\n    |\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:86:43\n    |\n LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: cannot access `static` items in const fn (see issue #57563)\n+error[E0723]: cannot access `static` items in const fn\n   --> $DIR/min_const_fn.rs:90:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: cannot access `static` items in const fn (see issue #57563)\n+error[E0723]: cannot access `static` items in const fn\n   --> $DIR/min_const_fn.rs:91:36\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                    ^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n+error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n+error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n+error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn (see issue #57563)\n+error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:102:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } }\n    |                             ^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:104:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/min_const_fn.rs:106:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:108:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:113:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:118:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:123:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n+error[E0723]: `impl Trait` in const fn is unstable\n   --> $DIR/min_const_fn.rs:129:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:131:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:133:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: `impl Trait` in const fn is unstable (see issue #57563)\n+error[E0723]: `impl Trait` in const fn is unstable\n   --> $DIR/min_const_fn.rs:134:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:135:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:136:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n warning[E0515]: cannot return reference to temporary value\n@@ -268,28 +298,31 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:144:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn.rs:147:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn.rs:149:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 36 previous errors"}, {"sha": "b6445329db383e7dcfd28088b43b9a575a1a2f56", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,17 +1,19 @@\n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn_dyn.rs:9:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable (see issue #57563)\n+error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n warning[E0716]: temporary value dropped while borrowed"}, {"sha": "5316d07afa428c7644d52a02fd19d3ff9fe1f47e", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,17 +1,19 @@\n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn_fn_ptr.rs:11:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn_fn_ptr.rs:14:59\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "c52d7c85115613ead1b8b33c11ec707adb471a09", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,33 +1,37 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn`\n   --> $DIR/min_const_fn_libstd_stability.rs:15:25\n    |\n LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n   --> $DIR/min_const_fn_libstd_stability.rs:22:26\n    |\n LL | const fn bar2() -> u32 { foo2() }\n    |                          ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn_libstd_stability.rs:26:26\n    |\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                          ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n   --> $DIR/min_const_fn_libstd_stability.rs:34:32\n    |\n LL | const fn bar2_gated() -> u32 { foo2_gated() }\n    |                                ^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "af39b99e90cc97f7905e2231d98e8e6784961b4a", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,33 +1,37 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:15:41\n    |\n LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    |                                         ^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:22:42\n    |\n LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |                                          ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn (see issue #57563)\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:26:33\n    |\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                                 ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:34:48\n    |\n LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n    |                                                ^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "e4534d9ab98f6e2c93df51847f0b2813e0f6c2f9", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,25 +1,28 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:15:32\n    |\n LL | const unsafe fn bar() -> u32 { foo() }\n    |                                ^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:22:33\n    |\n LL | const unsafe fn bar2() -> u32 { foo2() }\n    |                                 ^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn` (see issue #57563)\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:30:39\n    |\n LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() }\n    |                                       ^^^^^^^^^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "ed55849124f274a8e95e60bfb99a17af8707d841", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,17 +1,19 @@\n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/mutable_borrow.rs:3:9\n    |\n LL |     let b = &mut a;\n    |         ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/mutable_borrow.rs:12:13\n    |\n LL |         let b = &mut a;\n    |             ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "b8ad775f1c34fb2c6025e82fd351439d1b045637", "filename": "src/test/ui/consts/single_variant_match_ice.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -10,12 +10,13 @@ error[E0019]: constant contains unimplemented expression type\n LL |     x => 42,\n    |     ^\n \n-error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn (see issue #57563)\n+error[E0723]: `if`, `match`, `&&` and `||` are not stable in const fn\n   --> $DIR/single_variant_match_ice.rs:18:13\n    |\n LL |             Prob => 0x1,\n    |             ^^^^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "ce781da7d47e17a099e8d36349352f0af0f78979", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -10,6 +10,9 @@ fn transmute<T, U>(t: T) -> U {\n     let Helper::U(u) = Helper::T(t, []);\n     //~^ ERROR refutable pattern in local binding: `T(_, _)` not covered\n     u\n+    //~^ WARN use of possibly uninitialized variable: `u`\n+    //~| WARN this error has been downgraded to a warning for backwards compatibility\n+    //~| WARN this represents potential undefined behavior in your code and this warning will\n }\n \n fn main() {"}, {"sha": "6608ad763b2e94c5f7bfcd90f3ebac419768c0ea", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -11,6 +11,16 @@ LL | | }\n LL |       let Helper::U(u) = Helper::T(t, []);\n    |           ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n \n+warning[E0381]: use of possibly uninitialized variable: `u`\n+  --> $DIR/empty-never-array.rs:12:5\n+   |\n+LL |     u\n+   |     ^ use of possibly uninitialized `u`\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0005`.\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "cdda735ba443554f05cde8285a295a8d99b59f1b", "filename": "src/test/ui/error-codes/E0007.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,6 +4,7 @@ fn main() {\n         op_string @ Some(s) => {},\n         //~^ ERROR E0007\n         //~| ERROR E0303\n+        //~| ERROR E0382\n         None => {},\n     }\n }"}, {"sha": "89a6298c8752fbea999b5165e42f071f94610227", "filename": "src/test/ui/error-codes/E0007.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -10,7 +10,19 @@ error[E0303]: pattern bindings are not allowed after an `@`\n LL |         op_string @ Some(s) => {},\n    |                          ^ not allowed after `@`\n \n-error: aborting due to 2 previous errors\n+error[E0382]: use of moved value\n+  --> $DIR/E0007.rs:4:26\n+   |\n+LL |     let x = Some(\"s\".to_string());\n+   |         - move occurs because `x` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait\n+LL |     match x {\n+LL |         op_string @ Some(s) => {},\n+   |         -----------------^-\n+   |         |                |\n+   |         |                value used here after move\n+   |         value moved here\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0007, E0303.\n+Some errors have detailed explanations: E0007, E0303, E0382.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "8caa4f0931d57d1ae1607f212a8a6d1c394fb21b", "filename": "src/test/ui/error-codes/E0030-teach.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,5 +4,6 @@ fn main() {\n     match 5u32 {\n         1000 ..= 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n+        //~| ERROR lower range bound must be less than or equal to upper\n     }\n }"}, {"sha": "800f66416a81397f1f770b0e4f6a1bbf3f77b262", "filename": "src/test/ui/error-codes/E0030-teach.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -6,6 +6,12 @@ LL |         1000 ..= 5 => {}\n    |\n    = note: When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range.\n \n-error: aborting due to previous error\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/E0030-teach.rs:5:9\n+   |\n+LL |         1000 ..= 5 => {}\n+   |         ^^^^ lower bound larger than upper bound\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0030`."}, {"sha": "3b451801c99df5983106f8a6d1cb1212dcfbc354", "filename": "src/test/ui/error-codes/E0301.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     match Some(()) {\n         None => { },\n         option if option.take().is_none() => {}, //~ ERROR E0301\n-        Some(_) => { }\n+        Some(_) => { } //~^ ERROR E0596\n     }\n }"}, {"sha": "44e823631b592738f05a25f4640bd0dab6596c83", "filename": "src/test/ui/error-codes/E0301.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -6,6 +6,15 @@ LL |         option if option.take().is_none() => {},\n    |\n    = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0596]: cannot borrow `option` as mutable, as it is immutable for the pattern guard\n+  --> $DIR/E0301.rs:4:19\n+   |\n+LL |         option if option.take().is_none() => {},\n+   |                   ^^^^^^ cannot borrow as mutable\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0301`.\n+Some errors have detailed explanations: E0301, E0596.\n+For more information about an error, try `rustc --explain E0301`."}, {"sha": "69f5953deb22335851091b70a59aa1e35b07d4ee", "filename": "src/test/ui/error-codes/E0302.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     match Some(()) {\n         None => { },\n         option if { option = None; false } => { }, //~ ERROR E0302\n+        //~^ ERROR cannot assign to `option`, as it is immutable for the pattern guard\n         Some(_) => { }\n     }\n }"}, {"sha": "a077fcaea4101c8a3cf36f512157928fbc5b5e83", "filename": "src/test/ui/error-codes/E0302.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,6 +4,14 @@ error[E0302]: cannot assign in a pattern guard\n LL |         option if { option = None; false } => { },\n    |                     ^^^^^^^^^^^^^ assignment in pattern guard\n \n-error: aborting due to previous error\n+error[E0594]: cannot assign to `option`, as it is immutable for the pattern guard\n+  --> $DIR/E0302.rs:4:21\n+   |\n+LL |         option if { option = None; false } => { },\n+   |                     ^^^^^^^^^^^^^ cannot assign\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0302`."}, {"sha": "3dbd4e717a0dbd2755cb07f4bcdeb9ad16496a94", "filename": "src/test/ui/issues/issue-15381.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,5 +4,8 @@ fn main() {\n     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n         //~^ ERROR refutable pattern in `for` loop binding: `&[]` not covered\n         println!(\"y={}\", y);\n+        //~^ WARN borrow of possibly uninitialized variable: `y`\n+        //~| WARN this error has been downgraded to a warning for backwards compatibility\n+        //~| WARN this represents potential undefined behavior in your code and this warning will\n     }\n }"}, {"sha": "0f44a0f170f84939675a23af97d34b5f68839509", "filename": "src/test/ui/issues/issue-15381.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15381.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,6 +4,16 @@ error[E0005]: refutable pattern in `for` loop binding: `&[]` not covered\n LL |     for &[x,y,z] in values.chunks(3).filter(|&xs| xs.len() == 3) {\n    |         ^^^^^^^^ pattern `&[]` not covered\n \n+warning[E0381]: borrow of possibly uninitialized variable: `y`\n+  --> $DIR/issue-15381.rs:6:26\n+   |\n+LL |         println!(\"y={}\", y);\n+   |                          ^ use of possibly uninitialized `y`\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0005`.\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "e17c5eea2a4454e7df41607bbed1a4edc7027c9d", "filename": "src/test/ui/issues/issue-23302-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,4 +1,5 @@\n const A: i32 = B; //~ ERROR cycle detected\n+//~^ ERROR cycle detected\n \n const B: i32 = A;\n "}, {"sha": "94624640809b77c5b6e0baed5c84bec7bd2f18b7", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -10,18 +10,36 @@ note: ...which requires checking which parts of `A` are promotable to static...\n LL | const A: i32 = B;\n    |                ^\n note: ...which requires const checking if rvalue is promotable to static `B`...\n-  --> $DIR/issue-23302-3.rs:3:1\n+  --> $DIR/issue-23302-3.rs:4:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n note: ...which requires checking which parts of `B` are promotable to static...\n-  --> $DIR/issue-23302-3.rs:3:16\n+  --> $DIR/issue-23302-3.rs:4:16\n    |\n LL | const B: i32 = A;\n    |                ^\n    = note: ...which again requires const checking if rvalue is promotable to static `A`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n-error: aborting due to previous error\n+error[E0391]: cycle detected when processing `A`\n+  --> $DIR/issue-23302-3.rs:1:16\n+   |\n+LL | const A: i32 = B;\n+   |                ^\n+   |\n+note: ...which requires processing `B`...\n+  --> $DIR/issue-23302-3.rs:4:16\n+   |\n+LL | const B: i32 = A;\n+   |                ^\n+   = note: ...which again requires processing `A`, completing the cycle\n+note: cycle used when processing `A`\n+  --> $DIR/issue-23302-3.rs:1:1\n+   |\n+LL | const A: i32 = B;\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "609043942b7d93e2f62892cfef1f0cf8a88e3b93", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,9 +1,10 @@\n-error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+error[E0723]: function pointers in const fn are unstable\n   --> $DIR/issue-37550.rs:3:9\n    |\n LL |     let x = || t;\n    |         ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "60fdf7c3e8a479b18b5e7355cb941a6f4fc6fd50", "filename": "src/test/ui/issues/issue-41255.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -9,6 +9,8 @@ fn main() {\n     match x {\n         5.0 => {}, //~ ERROR floating-point types cannot be used in patterns\n                    //~| WARNING hard error\n+                   //~| ERROR floating-point types cannot be used in patterns\n+                   //~| WARNING this was previously accepted by the compiler but is being\n         5.0f32 => {}, //~ ERROR floating-point types cannot be used in patterns\n                       //~| WARNING hard error\n         -5.0 => {}, //~ ERROR floating-point types cannot be used in patterns"}, {"sha": "c334742cfc4a46f4f2d7cc9f12f9b69ad769d0b1", "filename": "src/test/ui/issues/issue-41255.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -13,7 +13,7 @@ LL | #![forbid(illegal_floating_point_literal_pattern)]\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:12:9\n+  --> $DIR/issue-41255.rs:14:9\n    |\n LL |         5.0f32 => {},\n    |         ^^^^^^\n@@ -22,7 +22,7 @@ LL |         5.0f32 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:14:10\n+  --> $DIR/issue-41255.rs:16:10\n    |\n LL |         -5.0 => {},\n    |          ^^^\n@@ -31,7 +31,7 @@ LL |         -5.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:16:9\n+  --> $DIR/issue-41255.rs:18:9\n    |\n LL |         1.0 .. 33.0 => {},\n    |         ^^^\n@@ -40,7 +40,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:16:16\n+  --> $DIR/issue-41255.rs:18:16\n    |\n LL |         1.0 .. 33.0 => {},\n    |                ^^^^\n@@ -49,7 +49,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:20:9\n+  --> $DIR/issue-41255.rs:22:9\n    |\n LL |         39.0 ..= 70.0 => {},\n    |         ^^^^\n@@ -58,7 +58,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:20:18\n+  --> $DIR/issue-41255.rs:22:18\n    |\n LL |         39.0 ..= 70.0 => {},\n    |                  ^^^^\n@@ -67,7 +67,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:29:10\n+  --> $DIR/issue-41255.rs:31:10\n    |\n LL |         (3.14, 1) => {},\n    |          ^^^^\n@@ -76,13 +76,22 @@ LL |         (3.14, 1) => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:36:18\n+  --> $DIR/issue-41255.rs:38:18\n    |\n LL |         Foo { x: 2.0 } => {},\n    |                  ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 9 previous errors\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:10:9\n+   |\n+LL |         5.0 => {},\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "b4af3581a0de07b44c64fcf1d653e33850a4a049", "filename": "src/test/ui/issues/issue-6804.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6804.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -10,6 +10,8 @@ fn main() {\n     match x {\n         NAN => {}, //~ ERROR floating-point types cannot be used\n         //~^ WARN this was previously accepted by the compiler but is being phased out\n+        //~| ERROR floating-point types cannot be used in patterns\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n         _ => {},\n     };\n "}, {"sha": "ab4467e5135ed256cbcb20f75b21ca2342869fd9", "filename": "src/test/ui/issues/issue-6804.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-6804.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fissues%2Fissue-6804.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6804.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -13,13 +13,22 @@ LL | #![deny(illegal_floating_point_literal_pattern)]\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-6804.rs:17:10\n+  --> $DIR/issue-6804.rs:19:10\n    |\n LL |         [NAN, _] => {},\n    |          ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 2 previous errors\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-6804.rs:11:9\n+   |\n+LL |         NAN => {},\n+   |         ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "0f5ab7fff384050684ab068f5d14fe3c0e9d7119", "filename": "src/test/ui/match/match-range-fail-dominate.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -62,5 +62,14 @@ error: unreachable pattern\n LL |       0.02f64 => {}\n    |       ^^^^^^^\n \n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/match-range-fail-dominate.rs:35:7\n+   |\n+LL |       0.01f64 ... 6.5f64 => {}\n+   |       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n error: aborting due to 5 previous errors\n "}, {"sha": "261e95229a76e5895022f0a82f524b69bae3658d", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,4 +1,4 @@\n-thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1069:5\n+thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1071:5\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}, {"sha": "20a1d017cdd1818f09b2aa48f47b0dd13993eff8", "filename": "src/test/ui/pattern/pattern-bindings-after-at.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -7,6 +7,9 @@ fn main() {\n     match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR pattern bindings are not allowed after an `@`\n+        //~| WARN cannot borrow `_` as immutable because it is also borrowed as mutable\n+        //~| WARN this error has been downgraded to a warning for backwards compatibility\n+        //~| WARN this represents potential undefined behavior in your code and this warning will\n             **z = None;\n             println!(\"{}\", *a);\n         }"}, {"sha": "3a2cffcbf45f08284b8778ccd5e4f8803c269d9b", "filename": "src/test/ui/pattern/pattern-bindings-after-at.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-bindings-after-at.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,6 +4,22 @@ error[E0303]: pattern bindings are not allowed after an `@`\n LL |         ref mut z @ &mut Some(ref a) => {\n    |                               ^^^^^ not allowed after `@`\n \n+warning[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/pattern-bindings-after-at.rs:8:31\n+   |\n+LL |         ref mut z @ &mut Some(ref a) => {\n+   |         ----------------------^^^^^-\n+   |         |                     |\n+   |         |                     immutable borrow occurs here\n+   |         mutable borrow occurs here\n+...\n+LL |             **z = None;\n+   |             ---------- mutable borrow later used here\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0303`.\n+Some errors have detailed explanations: E0303, E0502.\n+For more information about an error, try `rustc --explain E0303`."}, {"sha": "a618aba9413f025d3585eecb6c0e563ab7dc1966", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -6,6 +6,9 @@ fn foo(res: Result<u32, &R>) -> u32 {\n     let Ok(x) = res;\n     //~^ ERROR refutable pattern\n     x\n+    //~^ WARN use of possibly uninitialized variable: `x`\n+    //~| WARN this error has been downgraded to a warning for backwards compatibility\n+    //~| WARN this represents potential undefined behavior in your code and this warning will\n }\n \n fn main() {"}, {"sha": "940ab94a6133233a3ec252989a177d81143506b2", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -4,6 +4,16 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n LL |     let Ok(x) = res;\n    |         ^^^^^ pattern `Err(_)` not covered\n \n+warning[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/recursive-types-are-not-uninhabited.rs:8:5\n+   |\n+LL |     x\n+   |     ^ use of possibly uninitialized `x`\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0005`.\n+Some errors have detailed explanations: E0005, E0381.\n+For more information about an error, try `rustc --explain E0005`."}, {"sha": "919ae62a182564bd8bea4f14c7aa2e2e531284d6", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -5,5 +5,6 @@ pub fn main() {\n     // The below desugars to &(ref n, mut m).\n     for (n, mut m) in &tups {\n         //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        //~| ERROR cannot move out of borrowed content\n     }\n }"}, {"sha": "d9a59e63453c2104f7806b186617c6f1abe29730", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -6,6 +6,21 @@ LL |     for (n, mut m) in &tups {\n    |          |\n    |          both by-ref and by-move used\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/for.rs:6:23\n+   |\n+LL |     for (n, mut m) in &tups {\n+   |             -----     ^^^^^ cannot move out of borrowed content\n+   |             |\n+   |             data moved here\n+   |\n+note: move occurs because `m` has type `Foo`, which does not implement the `Copy` trait\n+  --> $DIR/for.rs:6:13\n+   |\n+LL |     for (n, mut m) in &tups {\n+   |             ^^^^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0009`.\n+Some errors have detailed explanations: E0009, E0507.\n+For more information about an error, try `rustc --explain E0009`."}, {"sha": "1cca27520618d531e7ce2f964320e1c3f9ad1162", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -20,6 +20,8 @@ fn main() {\n         f32::INFINITY => { }\n         //~^ WARNING floating-point types cannot be used in patterns\n         //~| WARNING will become a hard error in a future release\n+        //~| WARNING floating-point types cannot be used in patterns\n+        //~| WARNING this was previously accepted by the compiler but is being phased out\n         _ => { }\n     }\n }"}, {"sha": "4ec1e8ddb9533ff62e29c5a33e69f4e0af736ea5", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -14,5 +14,14 @@ LL |         f32::INFINITY => { }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n+warning: floating-point types cannot be used in patterns\n+  --> $DIR/match-forbidden-without-eq.rs:20:9\n+   |\n+LL |         f32::INFINITY => { }\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n error: aborting due to previous error\n "}, {"sha": "6a47c5b14146b0c37b9ea687f60660a95b317056", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f5d69ba4f4d78740190a08ea097b41b00d96cb/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=31f5d69ba4f4d78740190a08ea097b41b00d96cb", "patch": "@@ -1,17 +1,19 @@\n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/ranged_ints2_const.rs:11:9\n    |\n LL |     let y = &mut x.0;\n    |         ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable (see issue #57563)\n+error[E0723]: mutable references in const fn are unstable\n   --> $DIR/ranged_ints2_const.rs:18:9\n    |\n LL |     let y = unsafe { &mut x.0 };\n    |         ^\n    |\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block"}]}