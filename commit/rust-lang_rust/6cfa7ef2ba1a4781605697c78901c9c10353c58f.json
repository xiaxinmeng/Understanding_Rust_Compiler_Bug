{"sha": "6cfa7ef2ba1a4781605697c78901c9c10353c58f", "node_id": "C_kwDOAAsO6NoAKDZjZmE3ZWYyYmExYTQ3ODE2MDU2OTdjNzg5MDFjOWMxMDM1M2M1OGY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-19T19:08:02Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T15:35:53Z"}, "message": "Remove miri from the submodule list and require it for CI to pass", "tree": {"sha": "481c87036c06440c818089ed8f0cb8003edae785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481c87036c06440c818089ed8f0cb8003edae785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cfa7ef2ba1a4781605697c78901c9c10353c58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfa7ef2ba1a4781605697c78901c9c10353c58f", "html_url": "https://github.com/rust-lang/rust/commit/6cfa7ef2ba1a4781605697c78901c9c10353c58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cfa7ef2ba1a4781605697c78901c9c10353c58f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9382d03bd170de57878444e4ed0322a6d44907b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9382d03bd170de57878444e4ed0322a6d44907b", "html_url": "https://github.com/rust-lang/rust/commit/d9382d03bd170de57878444e4ed0322a6d44907b"}], "stats": {"total": 347, "additions": 133, "deletions": 214}, "files": [{"sha": "90ab802697088002cf3021cfe280d2d55d72da75", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -2,7 +2,7 @@ This directory contains the source code of the rust project, including:\n \n - The test suite\n - The bootstrapping build system\n-- Various submodules for tools, like cargo, miri, etc.\n+- Various submodules for tools, like cargo, etc.\n \n For more information on how various parts of the compiler work, see the [rustc dev guide].\n "}, {"sha": "9937b08561cb0529738b955de8c2a02006198896", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -456,7 +456,7 @@ tool_check_step!(Rustdoc, \"src/tools/rustdoc\", \"src/librustdoc\", SourceType::InT\n // behavior, treat it as in-tree so that any new warnings in clippy will be\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n-tool_check_step!(Miri, \"src/tools/miri\", SourceType::Submodule);\n+tool_check_step!(Miri, \"src/tools/miri\", SourceType::InTree);\n tool_check_step!(Rls, \"src/tools/rls\", SourceType::InTree);\n tool_check_step!(Rustfmt, \"src/tools/rustfmt\", SourceType::InTree);\n "}, {"sha": "05664ca21794f3026dc7e69ce9a0deb259b753ba", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 28, "deletions": 55, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -35,18 +35,6 @@ pub fn tmpdir(builder: &Builder<'_>) -> PathBuf {\n     builder.out.join(\"tmp/dist\")\n }\n \n-fn missing_tool(tool_name: &str, skip: bool) {\n-    if skip {\n-        println!(\"Unable to build {}, skipping dist\", tool_name)\n-    } else {\n-        let help = \"note: not all tools are available on all nightlies\\nhelp: see https://forge.rust-lang.org/infra/toolstate.html for more information\";\n-        panic!(\n-            \"Unable to build submodule tool {} (use `missing-tools = true` to ignore this failure)\\n{}\",\n-            tool_name, help\n-        )\n-    }\n-}\n-\n fn should_build_extended_tool(builder: &Builder<'_>, tool: &str) -> bool {\n     if !builder.config.extended {\n         return false;\n@@ -1209,18 +1197,9 @@ impl Step for Miri {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        let miri = builder\n-            .ensure(tool::Miri { compiler, target, extra_features: Vec::new() })\n-            .or_else(|| {\n-                missing_tool(\"miri\", builder.build.config.missing_tools);\n-                None\n-            })?;\n-        let cargomiri = builder\n-            .ensure(tool::CargoMiri { compiler, target, extra_features: Vec::new() })\n-            .or_else(|| {\n-                missing_tool(\"cargo miri\", builder.build.config.missing_tools);\n-                None\n-            })?;\n+        let miri = builder.ensure(tool::Miri { compiler, target, extra_features: Vec::new() })?;\n+        let cargomiri =\n+            builder.ensure(tool::CargoMiri { compiler, target, extra_features: Vec::new() })?;\n \n         let mut tarball = Tarball::new(builder, \"miri\", &target.triple);\n         tarball.set_overlay(OverlayKind::Miri);\n@@ -1451,7 +1430,7 @@ impl Step for Extended {\n \n         let xform = |p: &Path| {\n             let mut contents = t!(fs::read_to_string(p));\n-            for tool in &[\"rust-demangler\", \"rust-analyzer\", \"miri\", \"rustfmt\"] {\n+            for tool in &[\"rust-demangler\", \"rust-analyzer\", \"rustfmt\"] {\n                 if !built_tools.contains(tool) {\n                     contents = filter(&contents, tool);\n                 }\n@@ -1491,7 +1470,8 @@ impl Step for Extended {\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n             prepare(\"clippy\");\n-            for tool in &[\"rust-docs\", \"rust-demangler\", \"rust-analyzer\", \"miri\"] {\n+            prepare(\"miri\");\n+            for tool in &[\"rust-docs\", \"rust-demangler\", \"rust-analyzer\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }\n@@ -1550,7 +1530,8 @@ impl Step for Extended {\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"clippy\");\n-            for tool in &[\"rust-demangler\", \"rust-analyzer\", \"miri\"] {\n+            prepare(\"miri\");\n+            for tool in &[\"rust-demangler\", \"rust-analyzer\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }\n@@ -1689,25 +1670,23 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            if built_tools.contains(\"miri\") {\n-                builder.run(\n-                    Command::new(&heat)\n-                        .current_dir(&exe)\n-                        .arg(\"dir\")\n-                        .arg(\"miri\")\n-                        .args(&heat_flags)\n-                        .arg(\"-cg\")\n-                        .arg(\"MiriGroup\")\n-                        .arg(\"-dr\")\n-                        .arg(\"Miri\")\n-                        .arg(\"-var\")\n-                        .arg(\"var.MiriDir\")\n-                        .arg(\"-out\")\n-                        .arg(exe.join(\"MiriGroup.wxs\"))\n-                        .arg(\"-t\")\n-                        .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n-                );\n-            }\n+            builder.run(\n+                Command::new(&heat)\n+                    .current_dir(&exe)\n+                    .arg(\"dir\")\n+                    .arg(\"miri\")\n+                    .args(&heat_flags)\n+                    .arg(\"-cg\")\n+                    .arg(\"MiriGroup\")\n+                    .arg(\"-dr\")\n+                    .arg(\"Miri\")\n+                    .arg(\"-var\")\n+                    .arg(\"var.MiriDir\")\n+                    .arg(\"-out\")\n+                    .arg(exe.join(\"MiriGroup.wxs\"))\n+                    .arg(\"-t\")\n+                    .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n+            );\n             builder.run(\n                 Command::new(&heat)\n                     .current_dir(&exe)\n@@ -1755,6 +1734,7 @@ impl Step for Extended {\n                     .arg(\"-dStdDir=rust-std\")\n                     .arg(\"-dAnalysisDir=rust-analysis\")\n                     .arg(\"-dClippyDir=clippy\")\n+                    .arg(\"-dMiriDir=miri\")\n                     .arg(\"-arch\")\n                     .arg(&arch)\n                     .arg(\"-out\")\n@@ -1768,9 +1748,6 @@ impl Step for Extended {\n                 if built_tools.contains(\"rust-analyzer\") {\n                     cmd.arg(\"-dRustAnalyzerDir=rust-analyzer\");\n                 }\n-                if built_tools.contains(\"miri\") {\n-                    cmd.arg(\"-dMiriDir=miri\");\n-                }\n                 if target.ends_with(\"windows-gnu\") {\n                     cmd.arg(\"-dGccDir=rust-mingw\");\n                 }\n@@ -1784,15 +1761,13 @@ impl Step for Extended {\n             candle(\"CargoGroup.wxs\".as_ref());\n             candle(\"StdGroup.wxs\".as_ref());\n             candle(\"ClippyGroup.wxs\".as_ref());\n+            candle(\"MiriGroup.wxs\".as_ref());\n             if built_tools.contains(\"rust-demangler\") {\n                 candle(\"RustDemanglerGroup.wxs\".as_ref());\n             }\n             if built_tools.contains(\"rust-analyzer\") {\n                 candle(\"RustAnalyzerGroup.wxs\".as_ref());\n             }\n-            if built_tools.contains(\"miri\") {\n-                candle(\"MiriGroup.wxs\".as_ref());\n-            }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n \n             if target.ends_with(\"windows-gnu\") {\n@@ -1822,6 +1797,7 @@ impl Step for Extended {\n                 .arg(\"StdGroup.wixobj\")\n                 .arg(\"AnalysisGroup.wixobj\")\n                 .arg(\"ClippyGroup.wixobj\")\n+                .arg(\"MiriGroup.wixobj\")\n                 .current_dir(&exe);\n \n             if built_tools.contains(\"rust-analyzer\") {\n@@ -1830,9 +1806,6 @@ impl Step for Extended {\n             if built_tools.contains(\"rust-demangler\") {\n                 cmd.arg(\"RustDemanglerGroup.wixobj\");\n             }\n-            if built_tools.contains(\"miri\") {\n-                cmd.arg(\"MiriGroup.wixobj\");\n-            }\n \n             if target.ends_with(\"windows-gnu\") {\n                 cmd.arg(\"GccGroup.wixobj\");"}, {"sha": "5d021b8ab16a264c9db88cc908bb78676cf6a6fe", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -851,7 +851,7 @@ tool_doc!(\n     in_tree = true\n );\n tool_doc!(Clippy, \"clippy\", \"src/tools/clippy\", [\"clippy_utils\"], in_tree = true);\n-tool_doc!(Miri, \"miri\", \"src/tools/miri\", [\"miri\"], in_tree = false);\n+tool_doc!(Miri, \"miri\", \"src/tools/miri\", [\"miri\"], in_tree = true);\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {"}, {"sha": "7672b7c913594cb9ecc3f2c4f550cbe53e09278b", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -200,13 +200,10 @@ install!((self, builder, _config),\n         install_sh(builder, \"clippy\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Miri, alias = \"miri\", Self::should_build(_config), only_hosts: true, {\n-        if let Some(tarball) = builder.ensure(dist::Miri { compiler: self.compiler, target: self.target }) {\n-            install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n-        } else {\n-            builder.info(\n-                &format!(\"skipping Install miri stage{} ({})\", self.compiler.stage, self.target),\n-            );\n-        }\n+        let tarball = builder\n+            .ensure(dist::Miri { compiler: self.compiler, target: self.target })\n+            .expect(\"missing miri\");\n+        install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Rustfmt, alias = \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Rustfmt {"}, {"sha": "2b8c2a2c134b0025efaadf62d8a179d81a991405", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -540,13 +540,8 @@ impl Build {\n \n         // Make sure we update these before gathering metadata so we don't get an error about missing\n         // Cargo.toml files.\n-        let rust_submodules = [\n-            \"src/tools/rust-installer\",\n-            \"src/tools/cargo\",\n-            \"src/tools/miri\",\n-            \"library/backtrace\",\n-            \"library/stdarch\",\n-        ];\n+        let rust_submodules =\n+            [\"src/tools/rust-installer\", \"src/tools/cargo\", \"library/backtrace\", \"library/stdarch\"];\n         for s in rust_submodules {\n             build.update_submodule(Path::new(s));\n         }"}, {"sha": "1617875ec231c9d5a7a73171ffe43fdf305e5bb3", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 88, "deletions": 101, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -484,116 +484,103 @@ impl Step for Miri {\n         // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n         let compiler_std = builder.compiler(if stage < 2 { stage + 1 } else { stage }, host);\n \n-        let miri =\n-            builder.ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() });\n-        let cargo_miri = builder.ensure(tool::CargoMiri {\n-            compiler,\n-            target: self.host,\n-            extra_features: Vec::new(),\n-        });\n+        let miri = builder\n+            .ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let _cargo_miri = builder\n+            .ensure(tool::CargoMiri { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n         // The stdlib we need might be at a different stage. And just asking for the\n         // sysroot does not seem to populate it, so we do that first.\n         builder.ensure(compile::Std::new(compiler_std, host));\n         let sysroot = builder.sysroot(compiler_std);\n-        if let (Some(miri), Some(_cargo_miri)) = (miri, cargo_miri) {\n-            let mut cargo =\n-                builder.cargo(compiler, Mode::ToolRustc, SourceType::Submodule, host, \"install\");\n-            cargo.arg(\"xargo\");\n-            // Configure `cargo install` path. cargo adds a `bin/`.\n-            cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out);\n-\n-            let mut cargo = Command::from(cargo);\n-            if !try_run(builder, &mut cargo) {\n-                return;\n-            }\n-\n-            // # Run `cargo miri setup`.\n-            let mut cargo = tool::prepare_tool_cargo(\n-                builder,\n-                compiler,\n-                Mode::ToolRustc,\n-                host,\n-                \"run\",\n-                \"src/tools/miri/cargo-miri\",\n-                SourceType::Submodule,\n-                &[],\n-            );\n-            cargo.add_rustc_lib_path(builder, compiler);\n-            cargo.arg(\"--\").arg(\"miri\").arg(\"setup\");\n-\n-            // Tell `cargo miri setup` where to find the sources.\n-            cargo.env(\"XARGO_RUST_SRC\", builder.src.join(\"library\"));\n-            // Tell it where to find Miri.\n-            cargo.env(\"MIRI\", &miri);\n-            // Debug things.\n-            cargo.env(\"RUST_BACKTRACE\", \"1\");\n-            // Let cargo-miri know where xargo ended up.\n-            cargo.env(\"XARGO_CHECK\", builder.out.join(\"bin\").join(\"xargo-check\"));\n-\n-            let mut cargo = Command::from(cargo);\n-            if !try_run(builder, &mut cargo) {\n-                return;\n-            }\n+        let mut cargo =\n+            builder.cargo(compiler, Mode::ToolRustc, SourceType::Submodule, host, \"install\");\n+        cargo.arg(\"xargo\");\n+        // Configure `cargo install` path. cargo adds a `bin/`.\n+        cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out);\n \n-            // # Determine where Miri put its sysroot.\n-            // To this end, we run `cargo miri setup --print-sysroot` and capture the output.\n-            // (We do this separately from the above so that when the setup actually\n-            // happens we get some output.)\n-            // We re-use the `cargo` from above.\n-            cargo.arg(\"--print-sysroot\");\n-\n-            // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n-            let miri_sysroot = if builder.config.dry_run {\n-                String::new()\n-            } else {\n-                builder.verbose(&format!(\"running: {:?}\", cargo));\n-                let out = cargo\n-                    .output()\n-                    .expect(\"We already ran `cargo miri setup` before and that worked\");\n-                assert!(out.status.success(), \"`cargo miri setup` returned with non-0 exit code\");\n-                // Output is \"<sysroot>\\n\".\n-                let stdout = String::from_utf8(out.stdout)\n-                    .expect(\"`cargo miri setup` stdout is not valid UTF-8\");\n-                let sysroot = stdout.trim_end();\n-                builder.verbose(&format!(\"`cargo miri setup --print-sysroot` said: {:?}\", sysroot));\n-                sysroot.to_owned()\n-            };\n-\n-            // # Run `cargo test`.\n-            let mut cargo = tool::prepare_tool_cargo(\n-                builder,\n-                compiler,\n-                Mode::ToolRustc,\n-                host,\n-                \"test\",\n-                \"src/tools/miri\",\n-                SourceType::Submodule,\n-                &[],\n-            );\n-            cargo.add_rustc_lib_path(builder, compiler);\n-\n-            // miri tests need to know about the stage sysroot\n-            cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n-            cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n-            cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n-            cargo.env(\"MIRI\", miri);\n-            // propagate --bless\n-            if builder.config.cmd.bless() {\n-                cargo.env(\"MIRI_BLESS\", \"Gesundheit\");\n-            }\n+        let mut cargo = Command::from(cargo);\n+        if !try_run(builder, &mut cargo) {\n+            return;\n+        }\n \n-            cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        // # Run `cargo miri setup`.\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            host,\n+            \"run\",\n+            \"src/tools/miri/cargo-miri\",\n+            SourceType::Submodule,\n+            &[],\n+        );\n+        cargo.add_rustc_lib_path(builder, compiler);\n+        cargo.arg(\"--\").arg(\"miri\").arg(\"setup\");\n+\n+        // Tell `cargo miri setup` where to find the sources.\n+        cargo.env(\"XARGO_RUST_SRC\", builder.src.join(\"library\"));\n+        // Tell it where to find Miri.\n+        cargo.env(\"MIRI\", &miri);\n+        // Debug things.\n+        cargo.env(\"RUST_BACKTRACE\", \"1\");\n+        // Let cargo-miri know where xargo ended up.\n+        cargo.env(\"XARGO_CHECK\", builder.out.join(\"bin\").join(\"xargo-check\"));\n+\n+        let mut cargo = Command::from(cargo);\n+        builder.run(&mut cargo);\n+\n+        // # Determine where Miri put its sysroot.\n+        // To this end, we run `cargo miri setup --print-sysroot` and capture the output.\n+        // (We do this separately from the above so that when the setup actually\n+        // happens we get some output.)\n+        // We re-use the `cargo` from above.\n+        cargo.arg(\"--print-sysroot\");\n+\n+        // FIXME: Is there a way in which we can re-use the usual `run` helpers?\n+        let miri_sysroot = if builder.config.dry_run {\n+            String::new()\n+        } else {\n+            builder.verbose(&format!(\"running: {:?}\", cargo));\n+            let out =\n+                cargo.output().expect(\"We already ran `cargo miri setup` before and that worked\");\n+            assert!(out.status.success(), \"`cargo miri setup` returned with non-0 exit code\");\n+            // Output is \"<sysroot>\\n\".\n+            let stdout = String::from_utf8(out.stdout)\n+                .expect(\"`cargo miri setup` stdout is not valid UTF-8\");\n+            let sysroot = stdout.trim_end();\n+            builder.verbose(&format!(\"`cargo miri setup --print-sysroot` said: {:?}\", sysroot));\n+            sysroot.to_owned()\n+        };\n \n-            let mut cargo = Command::from(cargo);\n-            if !try_run(builder, &mut cargo) {\n-                return;\n-            }\n+        // # Run `cargo test`.\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            host,\n+            \"test\",\n+            \"src/tools/miri\",\n+            SourceType::Submodule,\n+            &[],\n+        );\n+        cargo.add_rustc_lib_path(builder, compiler);\n \n-            // # Done!\n-            builder.save_toolstate(\"miri\", ToolState::TestPass);\n-        } else {\n-            eprintln!(\"failed to test miri: could not build\");\n+        // miri tests need to know about the stage sysroot\n+        cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n+        cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n+        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n+        cargo.env(\"MIRI\", miri);\n+        // propagate --bless\n+        if builder.config.cmd.bless() {\n+            cargo.env(\"MIRI_BLESS\", \"Gesundheit\");\n         }\n+\n+        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+\n+        let mut cargo = Command::from(cargo);\n+        builder.run(&mut cargo);\n     }\n }\n "}, {"sha": "ff6f7909a5a3b5db4a1b4d6d63ee9da19f1dd72e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -868,8 +868,8 @@ tool_extended!((self, builder),\n     Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, in_tree=true, {};\n     CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, in_tree=true, {};\n     Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n-    Miri, \"src/tools/miri\", \"miri\", stable=false, {};\n-    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, {};\n+    Miri, \"src/tools/miri\", \"miri\", stable=false, in_tree=true, {};\n+    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, in_tree=true, {};\n     Rls, \"src/tools/rls\", \"rls\", stable=true, {};\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,"}, {"sha": "cf00c285b0a638b65b150a96ca1a9823d2b39aed", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -14,7 +14,6 @@ python3 \"$X_PY\" test --stage 2 --no-fail-fast \\\n     src/doc/rust-by-example \\\n     src/doc/embedded-book \\\n     src/doc/edition-guide \\\n-    src/tools/miri \\\n \n set -e\n \n@@ -23,3 +22,4 @@ cat /tmp/toolstate/toolstates.json\n python3 \"$X_PY\" test --stage 2 check-tools\n python3 \"$X_PY\" test --stage 2 src/tools/clippy\n python3 \"$X_PY\" test --stage 2 src/tools/rustfmt\n+python3 \"$X_PY\" test --stage 2 src/tools/miri"}, {"sha": "5fec2c39621ec8049a1180185b1795ba12b199eb", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -239,7 +239,6 @@ fn main() {\n \n impl Builder {\n     fn build(&mut self) {\n-        self.check_toolstate();\n         let manifest = self.build_manifest();\n \n         let channel = self.versions.channel().to_string();\n@@ -261,29 +260,6 @@ impl Builder {\n         t!(self.checksums.store_cache());\n     }\n \n-    /// If a tool does not pass its tests on *any* of Linux and Windows, don't ship\n-    /// it on *all* targets, because tools like Miri can \"cross-run\" programs for\n-    /// different targets, for example, run a program for `x86_64-pc-windows-msvc`\n-    /// on `x86_64-unknown-linux-gnu`.\n-    /// Right now, we do this only for Miri.\n-    fn check_toolstate(&mut self) {\n-        for file in &[\"toolstates-linux.json\", \"toolstates-windows.json\"] {\n-            let toolstates: Option<HashMap<String, String>> = File::open(self.input.join(file))\n-                .ok()\n-                .and_then(|f| serde_json::from_reader(&f).ok());\n-            let toolstates = toolstates.unwrap_or_else(|| {\n-                println!(\"WARNING: `{}` missing/malformed; assuming all tools failed\", file);\n-                HashMap::default() // Use empty map if anything went wrong.\n-            });\n-            // Mark some tools as missing based on toolstate.\n-            if toolstates.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n-                println!(\"Miri tests are not passing, removing component\");\n-                self.versions.disable_version(&PkgType::Miri);\n-                break;\n-            }\n-        }\n-    }\n-\n     fn build_manifest(&mut self) -> Manifest {\n         let mut manifest = Manifest {\n             manifest_version: \"2\".to_string(),"}, {"sha": "9c16ef2cbeccca1e91a4491f95341d7203dc1724", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -30,7 +30,6 @@\n # These should be collaborators of the rust-lang/rust repository (with at least\n # read privileges on it). CI will fail otherwise.\n MAINTAINERS = {\n-    'miri': {'oli-obk', 'RalfJung'},\n     'book': {'carols10cents'},\n     'nomicon': {'frewsxcv', 'Gankra', 'JohnTitor'},\n     'reference': {'Havvy', 'matthewjasper', 'ehuss'},\n@@ -41,7 +40,6 @@\n }\n \n LABELS = {\n-    'miri': ['A-miri', 'C-bug'],\n     'book': ['C-bug'],\n     'nomicon': ['C-bug'],\n     'reference': ['C-bug'],\n@@ -52,7 +50,6 @@\n }\n \n REPOS = {\n-    'miri': 'https://github.com/rust-lang/miri',\n     'book': 'https://github.com/rust-lang/book',\n     'nomicon': 'https://github.com/rust-lang/nomicon',\n     'reference': 'https://github.com/rust-lang/reference',\n@@ -239,16 +236,10 @@ def update_latest(\n                     message += '{} (cc {}).\\n' \\\n                         .format(title, maintainers)\n                     # See if we need to create an issue.\n-                    if tool == 'miri':\n-                        # Create issue if tests used to pass before. Don't open a *second*\n-                        # issue when we regress from \"test-fail\" to \"build-fail\".\n-                        if old == 'test-pass':\n-                            create_issue_for_status = new\n-                    else:\n-                        # Create issue if things no longer build.\n-                        # (No issue for mere test failures to avoid spurious issues.)\n-                        if new == 'build-fail':\n-                            create_issue_for_status = new\n+                    # Create issue if things no longer build.\n+                    # (No issue for mere test failures to avoid spurious issues.)\n+                    if new == 'build-fail':\n+                        create_issue_for_status = new\n \n             if create_issue_for_status is not None:\n                 try:"}, {"sha": "d358e59c2452549c678126b6a0e53c1b1d4ec7c9", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfa7ef2ba1a4781605697c78901c9c10353c58f/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6cfa7ef2ba1a4781605697c78901c9c10353c58f/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=6cfa7ef2ba1a4781605697c78901c9c10353c58f", "patch": "@@ -356,7 +356,7 @@ cc = [\"@ehuss\"]\n cc = [\"@rust-lang/clippy\"]\n \n [mentions.\"src/tools/miri\"]\n-message = \"The Miri submodule was changed\"\n+message = \"The Miri subtree was changed\"\n cc = [\"@rust-lang/miri\"]\n \n [mentions.\"src/tools/rustfmt\"]"}]}