{"sha": "ab481e5cb1cb54005a19044709ac9bebabd74aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNDgxZTVjYjFjYjU0MDA1YTE5MDQ0NzA5YWM5YmViYWJkNzRhYWU=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T19:37:37Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T19:37:37Z"}, "message": "Refactored the CastPass lints.", "tree": {"sha": "714dddf9c886d8c9abccb5ab5a6b37ae8cb6d527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/714dddf9c886d8c9abccb5ab5a6b37ae8cb6d527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab481e5cb1cb54005a19044709ac9bebabd74aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab481e5cb1cb54005a19044709ac9bebabd74aae", "html_url": "https://github.com/rust-lang/rust/commit/ab481e5cb1cb54005a19044709ac9bebabd74aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab481e5cb1cb54005a19044709ac9bebabd74aae/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff28dd324ec404285dc61c6a29ceadbf3985d7e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff28dd324ec404285dc61c6a29ceadbf3985d7e0", "html_url": "https://github.com/rust-lang/rust/commit/ff28dd324ec404285dc61c6a29ceadbf3985d7e0"}], "stats": {"total": 121, "additions": 35, "deletions": 86}, "files": [{"sha": "ea0416e512c887cf721135fbe57072f4ad14bda4", "filename": "src/types.rs", "status": "modified", "additions": 35, "deletions": 86, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/ab481e5cb1cb54005a19044709ac9bebabd74aae/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab481e5cb1cb54005a19044709ac9bebabd74aae/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ab481e5cb1cb54005a19044709ac9bebabd74aae", "patch": "@@ -158,33 +158,24 @@ impl LintPass for CastPass {\n             let (cast_from, cast_to) = (cx.tcx.expr_ty(&*ex), cx.tcx.expr_ty(expr));\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n-                    (true, false)  => {\n-                        match (&cast_from.sty, &cast_to.sty) {\n-                            (&ty::TyInt(i), &ty::TyFloat(f)) => {\n-                                match (i, f) {\n-                                    (ast::TyI32, ast::TyF32) |\n-                                    (ast::TyI64, ast::TyF32) |\n-                                    (ast::TyI64, ast::TyF64) => {\n-                                        span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n-                                                  &format!(\"converting from {} to {}, which causes a loss of precision\",\n-                                                           i, f));\n-                                    },\n-                                    _ => ()\n-                                }\n+                    (true, false) => {\n+                        let from_nbits = match &cast_from.sty {\n+                            &ty::TyInt(i) =>  4 << (i as usize),\n+                            &ty::TyUint(u) => 4 << (u as usize),\n+                            _ => 0\n+                        };\n+                        let to_nbits : usize = match &cast_to.sty {\n+                            &ty::TyFloat(ast::TyF32) => 32,\n+                            &ty::TyFloat(ast::TyF64) => 64,\n+                            _ => 0\n+                        };\n+                        if from_nbits != 4 {\n+                            // Handle TyIs/TyUs separately (size is arch dependant)\n+                            if from_nbits >= to_nbits {\n+                                span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n+                                          &format!(\"converting from {} to {}, which causes a loss of precision\",\n+                                                   cast_from, cast_to));\n                             }\n-                            (&ty::TyUint(u), &ty::TyFloat(f)) => {\n-                                match (u, f) {\n-                                    (ast::TyU32, ast::TyF32) |\n-                                    (ast::TyU64, ast::TyF32) |\n-                                    (ast::TyU64, ast::TyF64) => {\n-                                        span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n-                                                  &format!(\"converting from {} to {}, which causes a loss of precision\",\n-                                                           u, f));\n-                                    },\n-                                    _ => ()\n-                                }\n-                            },\n-                            _ => ()\n                         }\n                     },\n                     (false, true) => {\n@@ -196,66 +187,24 @@ impl LintPass for CastPass {\n                         }\n                     },\n                     (true, true) => {\n-                        match (&cast_from.sty, &cast_to.sty) {\n-                            (&ty::TyInt(i1), &ty::TyInt(i2)) => {\n-                                match (i1, i2) {\n-                                    (ast::TyI64, ast::TyI32) |\n-                                    (ast::TyI64, ast::TyI16) |\n-                                    (ast::TyI64, ast::TyI8)  |\n-                                    (ast::TyI32, ast::TyI16) |\n-                                    (ast::TyI32, ast::TyI8)  |\n-                                    (ast::TyI16, ast::TyI8) =>\n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n-                                                  &format!(\"the contents of a {} may overflow a {}\", i1, i2)),\n-                                    _ => ()\n-                                }\n-                            },\n-                            (&ty::TyInt(i), &ty::TyUint(u)) => {\n-                                span_lint(cx, CAST_SIGN_LOSS, expr.span,\n-                                          &format!(\"casting from {} to {} loses the sign of the value\", i, u));\n-                                match (i, u) {\n-                                    (ast::TyI64, ast::TyU32) |\n-                                    (ast::TyI64, ast::TyU16) |\n-                                    (ast::TyI64, ast::TyU8)  |\n-                                    (ast::TyI32, ast::TyU16) |\n-                                    (ast::TyI32, ast::TyU8)  |\n-                                    (ast::TyI16, ast::TyU8) =>\n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n-                                                  &format!(\"the contents of a {} may overflow a {}\", i, u)),\n-                                    _ => ()\n-                                }\n-                            },\n-                            (&ty::TyUint(u), &ty::TyInt(i)) => {\n-                                match (u, i) {\n-                                    (ast::TyU64, ast::TyI32) |\n-                                    (ast::TyU64, ast::TyI64) |\n-                                    (ast::TyU64, ast::TyI16) |\n-                                    (ast::TyU64, ast::TyI8)  |\n-                                    (ast::TyU32, ast::TyI32) |\n-                                    (ast::TyU32, ast::TyI16) |\n-                                    (ast::TyU32, ast::TyI8)  |\n-                                    (ast::TyU16, ast::TyI16) |\n-                                    (ast::TyU16, ast::TyI8)  |\n-                                    (ast::TyU8, ast::TyI8) =>\n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n-                                                  &format!(\"the contents of a {} may overflow a {}\", u, i)),\n-                                    _ => ()\n-                                }\n-                            },\n-                            (&ty::TyUint(u1), &ty::TyUint(u2)) => {\n-                                match (u1, u2) {\n-                                    (ast::TyU64, ast::TyU32) |\n-                                    (ast::TyU64, ast::TyU16) |\n-                                    (ast::TyU64, ast::TyU8)  |\n-                                    (ast::TyU32, ast::TyU16) |\n-                                    (ast::TyU32, ast::TyU8)  |\n-                                    (ast::TyU16, ast::TyU8) =>\n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n-                                                  &format!(\"the contents of a {} may overflow a {}\", u1, u2)),\n-                                    _ => ()\n-                                }\n-                            },\n-                            _ => ()\n+                        if cast_from.is_signed() && !cast_to.is_signed() {\n+                            span_lint(cx, CAST_SIGN_LOSS, expr.span,\n+                                      &format!(\"casting from {} to {} loses the sign of the value\", cast_from, cast_to));\n+                        }\n+                        let from_nbits = match &cast_from.sty {\n+                            &ty::TyInt(i) =>  4 << (i as usize),\n+                            &ty::TyUint(u) => 4 << (u as usize),\n+                            _ => 0\n+                        };\n+                        let to_nbits = match &cast_to.sty {\n+                            &ty::TyInt(i) =>  4 << (i as usize),\n+                            &ty::TyUint(u) => 4 << (u as usize),\n+                            _ => 0\n+                        };\n+                        if to_nbits < from_nbits ||\n+                           (!cast_from.is_signed() && cast_to.is_signed() && to_nbits <= from_nbits) {\n+                                span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n+                                          &format!(\"the contents of a {} may overflow a {}\", cast_from, cast_to));\n                         }\n                     }\n                     (false, false) => {"}]}