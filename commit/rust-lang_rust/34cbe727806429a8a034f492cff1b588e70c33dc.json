{"sha": "34cbe727806429a8a034f492cff1b588e70c33dc", "node_id": "C_kwDOAAsO6NoAKDM0Y2JlNzI3ODA2NDI5YThhMDM0ZjQ5MmNmZjFiNTg4ZTcwYzMzZGM", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-23T22:32:17Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-21T01:04:11Z"}, "message": "Change to Ty::is_inhabited_from", "tree": {"sha": "0d5c6dd103d328d15e85bf204afbc6b9a5f53211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d5c6dd103d328d15e85bf204afbc6b9a5f53211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34cbe727806429a8a034f492cff1b588e70c33dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34cbe727806429a8a034f492cff1b588e70c33dc", "html_url": "https://github.com/rust-lang/rust/commit/34cbe727806429a8a034f492cff1b588e70c33dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34cbe727806429a8a034f492cff1b588e70c33dc/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d96f9fd7ca154fe2840a4d0dc6d6ce315b000e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d96f9fd7ca154fe2840a4d0dc6d6ce315b000e", "html_url": "https://github.com/rust-lang/rust/commit/a6d96f9fd7ca154fe2840a4d0dc6d6ce315b000e"}], "stats": {"total": 154, "additions": 73, "deletions": 81}, "files": [{"sha": "a78b294181c72c3afb279008d73a2e0db89303d5", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n         let ty = self.tcx.erase_regions(ty);\n         let m = self.tcx.parent_module(expr.hir_id).to_def_id();\n         let param_env = self.tcx.param_env(m.expect_local());\n-        if self.tcx.is_ty_uninhabited_from(m, ty, param_env) {\n+        if !ty.is_inhabited_from(self.tcx, m, param_env) {\n             // This function will not return. We model this fact as an infinite loop.\n             self.drop_ranges.add_control_edge(self.expr_index + 1, self.expr_index + 1);\n         }"}, {"sha": "bd3589c6c43a95889baf983240f4a3154931f0dc", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -542,10 +542,10 @@ fn check_must_not_suspend_ty<'tcx>(\n     data: SuspendCheckData<'_, 'tcx>,\n ) -> bool {\n     if ty.is_unit()\n-    // FIXME: should this check `is_ty_uninhabited_from`. This query is not available in this stage\n+    // FIXME: should this check `Ty::is_inhabited_from`. This query is not available in this stage\n     // of typeck (before ReVar and RePlaceholder are removed), but may remove noise, like in\n     // `must_use`\n-    // || fcx.tcx.is_ty_uninhabited_from(fcx.tcx.parent_module(hir_id).to_def_id(), ty, fcx.param_env)\n+    // || !ty.is_inhabited_from(fcx.tcx, fcx.tcx.parent_module(hir_id).to_def_id(), fcx.param_env)\n     {\n         return false;\n     }"}, {"sha": "100a8788763c2909b6ee10b6b1b131d2f945b750", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -201,9 +201,9 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             plural_len: usize,\n         ) -> bool {\n             if ty.is_unit()\n-                || cx.tcx.is_ty_uninhabited_from(\n+                || !ty.is_inhabited_from(\n+                    cx.tcx,\n                     cx.tcx.parent_module(expr.hir_id).to_def_id(),\n-                    ty,\n                     cx.param_env,\n                 )\n             {"}, {"sha": "ce9ec5c2b69fe65b5941ff69c4206e4d7964de40", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -57,57 +57,6 @@ pub(crate) fn provide(providers: &mut ty::query::Providers) {\n         ty::query::Providers { inhabited_predicate_adt, inhabited_predicate_type, ..*providers };\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// Checks whether a type is visibly uninhabited from a particular module.\n-    ///\n-    /// # Example\n-    /// ```\n-    /// #![feature(never_type)]\n-    /// # fn main() {}\n-    /// enum Void {}\n-    /// mod a {\n-    ///     pub mod b {\n-    ///         pub struct SecretlyUninhabited {\n-    ///             _priv: !,\n-    ///         }\n-    ///     }\n-    /// }\n-    ///\n-    /// mod c {\n-    ///     use super::Void;\n-    ///     pub struct AlsoSecretlyUninhabited {\n-    ///         _priv: Void,\n-    ///     }\n-    ///     mod d {\n-    ///     }\n-    /// }\n-    ///\n-    /// struct Foo {\n-    ///     x: a::b::SecretlyUninhabited,\n-    ///     y: c::AlsoSecretlyUninhabited,\n-    /// }\n-    /// ```\n-    /// In this code, the type `Foo` will only be visibly uninhabited inside the\n-    /// modules b, c and d. This effects pattern-matching on `Foo` or types that\n-    /// contain `Foo`.\n-    ///\n-    /// # Example\n-    /// ```ignore (illustrative)\n-    /// let foo_result: Result<T, Foo> = ... ;\n-    /// let Ok(t) = foo_result;\n-    /// ```\n-    /// This code should only compile in modules where the uninhabitedness of Foo is\n-    /// visible.\n-    pub fn is_ty_uninhabited_from(\n-        self,\n-        module: DefId,\n-        ty: Ty<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    ) -> bool {\n-        !ty.inhabited_predicate(self).apply(self, param_env, module)\n-    }\n-}\n-\n /// Returns an `InhabitedPredicate` that is generic over type parameters and\n /// requires calling [`InhabitedPredicate::subst`]\n fn inhabited_predicate_adt(tcx: TyCtxt<'_>, def_id: DefId) -> InhabitedPredicate<'_> {\n@@ -171,6 +120,55 @@ impl<'tcx> Ty<'tcx> {\n             _ => InhabitedPredicate::True,\n         }\n     }\n+\n+    /// Checks whether a type is visibly uninhabited from a particular module.\n+    ///\n+    /// # Example\n+    /// ```\n+    /// #![feature(never_type)]\n+    /// # fn main() {}\n+    /// enum Void {}\n+    /// mod a {\n+    ///     pub mod b {\n+    ///         pub struct SecretlyUninhabited {\n+    ///             _priv: !,\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// mod c {\n+    ///     use super::Void;\n+    ///     pub struct AlsoSecretlyUninhabited {\n+    ///         _priv: Void,\n+    ///     }\n+    ///     mod d {\n+    ///     }\n+    /// }\n+    ///\n+    /// struct Foo {\n+    ///     x: a::b::SecretlyUninhabited,\n+    ///     y: c::AlsoSecretlyUninhabited,\n+    /// }\n+    /// ```\n+    /// In this code, the type `Foo` will only be visibly uninhabited inside the\n+    /// modules b, c and d. This effects pattern-matching on `Foo` or types that\n+    /// contain `Foo`.\n+    ///\n+    /// # Example\n+    /// ```ignore (illustrative)\n+    /// let foo_result: Result<T, Foo> = ... ;\n+    /// let Ok(t) = foo_result;\n+    /// ```\n+    /// This code should only compile in modules where the uninhabitedness of Foo is\n+    /// visible.\n+    pub fn is_inhabited_from(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        module: DefId,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> bool {\n+        self.inhabited_predicate(tcx).apply(tcx, param_env, module)\n+    }\n }\n \n /// N.B. this query should only be called through `Ty::inhabited_predicate`"}, {"sha": "efb6eba7e576f79d02f0dde68380c1f659161090", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -271,15 +271,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // MIR checks and ultimately whether code is accepted or not. We can only\n                         // omit the return edge if a return type is visibly uninhabited to a module\n                         // that makes the call.\n-                        target: if this.tcx.is_ty_uninhabited_from(\n-                            this.parent_module,\n-                            expr.ty,\n-                            this.param_env,\n-                        ) {\n-                            None\n-                        } else {\n-                            Some(success)\n-                        },\n+                        target: expr\n+                            .ty\n+                            .is_inhabited_from(this.tcx, this.parent_module, this.param_env)\n+                            .then_some(success),\n                         from_hir_call,\n                         fn_span,\n                     },"}, {"sha": "0df228a0d599aec5337b7081bb4bdc606388b5e6", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -818,7 +818,7 @@ fn non_exhaustive_match<'p, 'tcx>(\n         }\n     }\n     if let ty::Ref(_, sub_ty, _) = scrut_ty.kind() {\n-        if cx.tcx.is_ty_uninhabited_from(cx.module, *sub_ty, cx.param_env) {\n+        if !sub_ty.is_inhabited_from(cx.tcx, cx.module, cx.param_env) {\n             err.note(\"references are always considered inhabited\");\n         }\n     }"}, {"sha": "3e370a053766574d110cefebb855cfed25ff81fc", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -324,7 +324,7 @@ pub(crate) struct MatchCheckCtxt<'p, 'tcx> {\n impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     pub(super) fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n         if self.tcx.features().exhaustive_patterns {\n-            self.tcx.is_ty_uninhabited_from(self.module, ty, self.param_env)\n+            !ty.is_inhabited_from(self.tcx, self.module, self.param_env)\n         } else {\n             false\n         }"}, {"sha": "58e1fe937a68fba34ececfe019c4c76434257ed1", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -1284,20 +1284,19 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_is_ty_uninhabited(&mut self, expr: &Expr<'_>, succ: LiveNode) -> LiveNode {\n         let ty = self.typeck_results.expr_ty(expr);\n         let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n-        if self.ir.tcx.is_ty_uninhabited_from(m, ty, self.param_env) {\n-            match self.ir.lnks[succ] {\n-                LiveNodeKind::ExprNode(succ_span, succ_id) => {\n-                    self.warn_about_unreachable(expr.span, ty, succ_span, succ_id, \"expression\");\n-                }\n-                LiveNodeKind::VarDefNode(succ_span, succ_id) => {\n-                    self.warn_about_unreachable(expr.span, ty, succ_span, succ_id, \"definition\");\n-                }\n-                _ => {}\n-            };\n-            self.exit_ln\n-        } else {\n-            succ\n+        if ty.is_inhabited_from(self.ir.tcx, m, self.param_env) {\n+            return succ;\n         }\n+        match self.ir.lnks[succ] {\n+            LiveNodeKind::ExprNode(succ_span, succ_id) => {\n+                self.warn_about_unreachable(expr.span, ty, succ_span, succ_id, \"expression\");\n+            }\n+            LiveNodeKind::VarDefNode(succ_span, succ_id) => {\n+                self.warn_about_unreachable(expr.span, ty, succ_span, succ_id, \"definition\");\n+            }\n+            _ => {}\n+        };\n+        self.exit_ln\n     }\n \n     fn warn_about_unreachable("}, {"sha": "5622808d4c7d66b99114ab4e9f1bb3f85fb2557f", "filename": "src/test/ui/pattern/usefulness/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34cbe727806429a8a034f492cff1b588e70c33dc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34cbe727806429a8a034f492cff1b588e70c33dc/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funinhabited.rs?ref=34cbe727806429a8a034f492cff1b588e70c33dc", "patch": "@@ -2,7 +2,7 @@\n // aux-build:empty.rs\n //\n // This tests plays with matching and uninhabited types. This also serves as a test for the\n-// `tcx.is_ty_uninhabited_from()` function.\n+// `Ty::is_inhabited_from` function.\n #![feature(never_type)]\n #![feature(never_type_fallback)]\n #![feature(exhaustive_patterns)]"}]}