{"sha": "982f72c022b45629e6adbaef22884359d3495ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmY3MmMwMjJiNDU2MjllNmFkYmFlZjIyODg0MzU5ZDM0OTVlY2Y=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-17T15:38:33Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-17T15:38:33Z"}, "message": "Merge #844\n\n844: Refactor find_all_refs to return ReferenceSearchResult r=vipentti a=vipentti\n\nThis refactors `find_all_refs` to return a new `ReferenceSearchResult` based on feedback in #839.\r\n\r\nThere are few questions/notes regarding the refactor:\r\n\r\n1. Introducing `NavigationTarget::from_bind_pat` this simply forwards the call to `NavigationTarget::from_named`, could we just expose `from_named` directly as `pub(crate)` ?\r\n2. Added an utility method `NavigationTarget::range` since there were few places where you would use `self.focus_range.unwrap_or(self.full_range)`\r\n3. Implementing `IntoIterator` for `ReferenceSearchResult`. This turns `ReferenceSearchResult` into an iterator over `FileRanges` and allows previous code to mostly stay as it was based on the order that `find_all_refs` previously had (declaration first and then the references). I'm not sure if there is a way of doing the conversion to `IntoIter` without the allocation of a new vector\r\n4. Is it possible to have a binding without a name? I'm not sure if the `NavigationTarget::from_bind_pat` can cause some edge-cases that previously were ok\r\n\r\n\r\n\r\nThis fixes #835.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "cc1a13dcf026a72d76496fb8ee2643619560f471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc1a13dcf026a72d76496fb8ee2643619560f471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982f72c022b45629e6adbaef22884359d3495ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982f72c022b45629e6adbaef22884359d3495ecf", "html_url": "https://github.com/rust-lang/rust/commit/982f72c022b45629e6adbaef22884359d3495ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982f72c022b45629e6adbaef22884359d3495ecf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f937d11ad892036fa93b25a2c19d10dcebe4ab24", "url": "https://api.github.com/repos/rust-lang/rust/commits/f937d11ad892036fa93b25a2c19d10dcebe4ab24", "html_url": "https://github.com/rust-lang/rust/commit/f937d11ad892036fa93b25a2c19d10dcebe4ab24"}, {"sha": "fd5307e60d268423f7026db28b15bd2b31575396", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5307e60d268423f7026db28b15bd2b31575396", "html_url": "https://github.com/rust-lang/rust/commit/fd5307e60d268423f7026db28b15bd2b31575396"}], "stats": {"total": 175, "additions": 127, "deletions": 48}, "files": [{"sha": "57a490fa75ab4bc908396972e2668c71761c6366", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=982f72c022b45629e6adbaef22884359d3495ecf", "patch": "@@ -56,6 +56,7 @@ pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     runnables::{Runnable, RunnableKind},\n     navigation_target::NavigationTarget,\n+    references::ReferenceSearchResult,\n };\n pub use ra_ide_api_light::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode, LocalEdit,\n@@ -319,7 +320,10 @@ impl Analysis {\n     }\n \n     /// Finds all usages of the reference at point.\n-    pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n+    pub fn find_all_refs(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Option<ReferenceSearchResult>> {\n         self.with_db(|db| references::find_all_refs(db, position))\n     }\n "}, {"sha": "fd001179a168bd0f450daaad55412032e720301e", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=982f72c022b45629e6adbaef22884359d3495ecf", "patch": "@@ -23,6 +23,12 @@ pub struct NavigationTarget {\n }\n \n impl NavigationTarget {\n+    /// When `focus_range` is specified, returns it. otherwise\n+    /// returns `full_range`\n+    pub fn range(&self) -> TextRange {\n+        self.focus_range.unwrap_or(self.full_range)\n+    }\n+\n     pub fn name(&self) -> &SmolStr {\n         &self.name\n     }\n@@ -43,14 +49,18 @@ impl NavigationTarget {\n         self.full_range\n     }\n \n-    /// A \"most interesting\" range withing the `range_full`.\n+    /// A \"most interesting\" range withing the `full_range`.\n     ///\n-    /// Typically, `range` is the whole syntax node, including doc comments, and\n-    /// `focus_range` is the range of the identifier.\n+    /// Typically, `full_range` is the whole syntax node,\n+    /// including doc comments, and `focus_range` is the range of the identifier.\n     pub fn focus_range(&self) -> Option<TextRange> {\n         self.focus_range\n     }\n \n+    pub(crate) fn from_bind_pat(file_id: FileId, pat: &ast::BindPat) -> NavigationTarget {\n+        NavigationTarget::from_named(file_id, pat)\n+    }\n+\n     pub(crate) fn from_symbol(symbol: FileSymbol) -> NavigationTarget {\n         NavigationTarget {\n             file_id: symbol.file_id,"}, {"sha": "b7784e5772141b23ce4ec7e6db3855ea6873e7a1", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 76, "deletions": 30, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=982f72c022b45629e6adbaef22884359d3495ecf", "patch": "@@ -1,42 +1,77 @@\n use relative_path::{RelativePath, RelativePathBuf};\n use hir::{ModuleSource, source_binder};\n-use ra_db::{FileId, SourceDatabase};\n+use ra_db::{SourceDatabase};\n use ra_syntax::{\n-    AstNode, SyntaxNode, TextRange, SourceFile,\n-    ast::{self, NameOwner},\n+    AstNode, SyntaxNode, SourceFile,\n+    ast,\n     algo::find_node_at_offset,\n };\n \n use crate::{\n     db::RootDatabase,\n     FilePosition,\n+    FileRange,\n+    FileId,\n+    NavigationTarget,\n     FileSystemEdit,\n     SourceChange,\n     SourceFileEdit,\n+    TextRange,\n };\n \n-pub(crate) fn find_all_refs(db: &RootDatabase, position: FilePosition) -> Vec<(FileId, TextRange)> {\n+#[derive(Debug, Clone)]\n+pub struct ReferenceSearchResult {\n+    declaration: NavigationTarget,\n+    references: Vec<FileRange>,\n+}\n+\n+impl ReferenceSearchResult {\n+    pub fn declaration(&self) -> &NavigationTarget {\n+        &self.declaration\n+    }\n+\n+    pub fn references(&self) -> &[FileRange] {\n+        &self.references\n+    }\n+\n+    /// Total number of references\n+    /// At least 1 since all valid references should\n+    /// Have a declaration\n+    pub fn len(&self) -> usize {\n+        self.references.len() + 1\n+    }\n+}\n+\n+// allow turning ReferenceSearchResult into an iterator\n+// over FileRanges\n+impl IntoIterator for ReferenceSearchResult {\n+    type Item = FileRange;\n+    type IntoIter = std::vec::IntoIter<FileRange>;\n+\n+    fn into_iter(mut self) -> Self::IntoIter {\n+        let mut v = Vec::with_capacity(self.len());\n+        v.push(FileRange { file_id: self.declaration.file_id(), range: self.declaration.range() });\n+        v.append(&mut self.references);\n+        v.into_iter()\n+    }\n+}\n+\n+pub(crate) fn find_all_refs(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Option<ReferenceSearchResult> {\n     let file = db.parse(position.file_id);\n-    // Find the binding associated with the offset\n-    let (binding, descr) = match find_binding(db, &file, position) {\n-        None => return Vec::new(),\n-        Some(it) => it,\n-    };\n+    let (binding, descr) = find_binding(db, &file, position)?;\n+    let declaration = NavigationTarget::from_bind_pat(position.file_id, binding);\n \n-    let mut ret = binding\n-        .name()\n+    let references = descr\n+        .scopes(db)\n+        .find_all_refs(binding)\n         .into_iter()\n-        .map(|name| (position.file_id, name.syntax().range()))\n+        .map(move |ref_desc| FileRange { file_id: position.file_id, range: ref_desc.range })\n         .collect::<Vec<_>>();\n-    ret.extend(\n-        descr\n-            .scopes(db)\n-            .find_all_refs(binding)\n-            .into_iter()\n-            .map(|ref_desc| (position.file_id, ref_desc.range)),\n-    );\n \n-    return ret;\n+    return Some(ReferenceSearchResult { declaration, references });\n \n     fn find_binding<'a>(\n         db: &RootDatabase,\n@@ -88,6 +123,21 @@ fn find_name_and_module_at_offset(\n     None\n }\n \n+fn source_edit_from_fileid_range(\n+    file_id: FileId,\n+    range: TextRange,\n+    new_name: &str,\n+) -> SourceFileEdit {\n+    SourceFileEdit {\n+        file_id,\n+        edit: {\n+            let mut builder = ra_text_edit::TextEditBuilder::default();\n+            builder.replace(range, new_name.into());\n+            builder.finish()\n+        },\n+    }\n+}\n+\n fn rename_mod(\n     db: &RootDatabase,\n     ast_name: &ast::Name,\n@@ -150,17 +200,13 @@ fn rename_reference(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<SourceChange> {\n-    let edit = find_all_refs(db, position)\n-        .iter()\n-        .map(|(file_id, text_range)| SourceFileEdit {\n-            file_id: *file_id,\n-            edit: {\n-                let mut builder = ra_text_edit::TextEditBuilder::default();\n-                builder.replace(*text_range, new_name.into());\n-                builder.finish()\n-            },\n-        })\n+    let refs = find_all_refs(db, position)?;\n+\n+    let edit = refs\n+        .into_iter()\n+        .map(|range| source_edit_from_fileid_range(range.file_id, range.range, new_name))\n         .collect::<Vec<_>>();\n+\n     if edit.is_empty() {\n         return None;\n     }"}, {"sha": "a83fbe07bfc545323361562edcc2e1de9a6b3f8f", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=982f72c022b45629e6adbaef22884359d3495ecf", "patch": "@@ -1,7 +1,8 @@\n use insta::assert_debug_snapshot_matches;\n use ra_ide_api::{\n     mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n-    AnalysisChange, CrateGraph, Edition::Edition2018, FileId, Query, NavigationTarget\n+    AnalysisChange, CrateGraph, Edition::Edition2018, Query, NavigationTarget,\n+    ReferenceSearchResult,\n };\n use ra_syntax::{TextRange, SmolStr};\n \n@@ -44,9 +45,9 @@ fn test_resolve_crate_root() {\n     assert_eq!(host.analysis().crate_for(mod_file).unwrap(), vec![crate_id]);\n }\n \n-fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n+fn get_all_refs(text: &str) -> ReferenceSearchResult {\n     let (analysis, position) = single_file_with_position(text);\n-    analysis.find_all_refs(position).unwrap()\n+    analysis.find_all_refs(position).unwrap().unwrap()\n }\n \n fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {"}, {"sha": "c3192a1e5182f23e2d651523138d0a41f00b5d9a", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=982f72c022b45629e6adbaef22884359d3495ecf", "patch": "@@ -333,7 +333,7 @@ impl TryConvWith for &NavigationTarget {\n     type Output = Location;\n     fn try_conv_with(self, world: &ServerWorld) -> Result<Location> {\n         let line_index = world.analysis().file_line_index(self.file_id());\n-        let range = self.focus_range().unwrap_or(self.full_range());\n+        let range = self.range();\n         to_location(self.file_id(), range, &world, &line_index)\n     }\n }"}, {"sha": "9208ee473d47eb9e8db6f73f5c89bc1f87a11d5c", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982f72c022b45629e6adbaef22884359d3495ecf/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=982f72c022b45629e6adbaef22884359d3495ecf", "patch": "@@ -456,14 +456,16 @@ pub fn handle_prepare_rename(\n \n     // We support renaming references like handle_rename does.\n     // In the future we may want to reject the renaming of things like keywords here too.\n-    let refs = world.analysis().find_all_refs(position)?;\n-    let r = match refs.first() {\n-        Some(r) => r,\n+    let refs = match world.analysis().find_all_refs(position)? {\n         None => return Ok(None),\n+        Some(refs) => refs,\n     };\n+\n+    // Refs should always have a declaration\n+    let r = refs.declaration();\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n-    let loc = to_location(r.0, r.1, &world, &line_index)?;\n+    let loc = to_location(r.file_id(), r.range(), &world, &line_index)?;\n \n     Ok(Some(PrepareRenameResponse::Range(loc.range)))\n }\n@@ -501,11 +503,24 @@ pub fn handle_references(\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.conv_with(&line_index);\n \n-    let refs = world.analysis().find_all_refs(FilePosition { file_id, offset })?;\n+    let refs = match world.analysis().find_all_refs(FilePosition { file_id, offset })? {\n+        None => return Ok(None),\n+        Some(refs) => refs,\n+    };\n \n-    Ok(Some(\n-        refs.into_iter().filter_map(|r| to_location(r.0, r.1, &world, &line_index).ok()).collect(),\n-    ))\n+    let locations = if params.context.include_declaration {\n+        refs.into_iter()\n+            .filter_map(|r| to_location(r.file_id, r.range, &world, &line_index).ok())\n+            .collect()\n+    } else {\n+        // Only iterate over the references if include_declaration was false\n+        refs.references()\n+            .iter()\n+            .filter_map(|r| to_location(r.file_id, r.range, &world, &line_index).ok())\n+            .collect()\n+    };\n+\n+    Ok(Some(locations))\n }\n \n pub fn handle_formatting(\n@@ -712,11 +727,14 @@ pub fn handle_document_highlight(\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n \n-    let refs = world.analysis().find_all_refs(params.try_conv_with(&world)?)?;\n+    let refs = match world.analysis().find_all_refs(params.try_conv_with(&world)?)? {\n+        None => return Ok(None),\n+        Some(refs) => refs,\n+    };\n \n     Ok(Some(\n         refs.into_iter()\n-            .map(|r| DocumentHighlight { range: r.1.conv_with(&line_index), kind: None })\n+            .map(|r| DocumentHighlight { range: r.range.conv_with(&line_index), kind: None })\n             .collect(),\n     ))\n }"}]}