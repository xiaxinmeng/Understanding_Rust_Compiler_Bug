{"sha": "cdca39706121b2d1734a94938a2372da881e10c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkY2EzOTcwNjEyMWIyZDE3MzRhOTQ5MzhhMjM3MmRhODgxZTEwYzY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T20:14:13Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T20:14:13Z"}, "message": "Add a hir::TypeRef as an intermediate between ast::TypeRef and ty::Ty", "tree": {"sha": "d3f9687371eb1a7004c4694c59445af388eb1876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f9687371eb1a7004c4694c59445af388eb1876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdca39706121b2d1734a94938a2372da881e10c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdca39706121b2d1734a94938a2372da881e10c6", "html_url": "https://github.com/rust-lang/rust/commit/cdca39706121b2d1734a94938a2372da881e10c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdca39706121b2d1734a94938a2372da881e10c6/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2870effd5c69941bbf32a44c0ee6d9d42e0b038d", "html_url": "https://github.com/rust-lang/rust/commit/2870effd5c69941bbf32a44c0ee6d9d42e0b038d"}], "stats": {"total": 314, "additions": 219, "deletions": 95}, "files": [{"sha": "aaa2c7ceec10844564cb07bd1f70f78e79c88adc", "filename": "crates/ra_analysis/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -8,7 +8,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n         (Some(path), Some(module)) => (path.clone(), module),\n         _ => return Ok(()),\n     };\n-    let def_id = match module.resolve_path(ctx.db, path)?.take_types() {\n+    let def_id = match module.resolve_path(ctx.db, &path)?.take_types() {\n         Some(it) => it,\n         None => return Ok(()),\n     };"}, {"sha": "dae04d258db4efafc60777e9c8bcc767b3a3e1da", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -145,7 +145,7 @@ impl VariantData {\n                     .map(|(i, fd)| {\n                         Ok(StructField {\n                             name: SmolStr::new(i.to_string()),\n-                            ty: Ty::new_opt(db, &module, fd.type_ref())?,\n+                            ty: Ty::from_ast_opt(db, &module, fd.type_ref())?,\n                         })\n                     })\n                     .collect::<Cancelable<_>>()?;\n@@ -160,7 +160,7 @@ impl VariantData {\n                                 .name()\n                                 .map(|n| n.text())\n                                 .unwrap_or_else(|| SmolStr::new(\"[error]\")),\n-                            ty: Ty::new_opt(db, &module, fd.type_ref())?,\n+                            ty: Ty::from_ast_opt(db, &module, fd.type_ref())?,\n                         })\n                     })\n                     .collect::<Cancelable<_>>()?;"}, {"sha": "f1cc0ccd085cefe8b4157dea8873be690e96810a", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -26,6 +26,7 @@ mod krate;\n mod module;\n mod function;\n mod adt;\n+mod type_ref;\n mod ty;\n \n use std::ops::Index;"}, {"sha": "b9d36f01f0b3b1a567383ab1e7f068b94a9cf5b7", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -115,7 +115,7 @@ impl Module {\n         Ok(res)\n     }\n \n-    pub fn resolve_path(&self, db: &impl HirDatabase, path: Path) -> Cancelable<PerNs<DefId>> {\n+    pub fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> Cancelable<PerNs<DefId>> {\n         let mut curr_per_ns = PerNs::types(\n             match path.kind {\n                 PathKind::Crate => self.crate_root(),\n@@ -131,7 +131,7 @@ impl Module {\n             .def_id(db),\n         );\n \n-        let segments = path.segments;\n+        let segments = &path.segments;\n         for name in segments.iter() {\n             let curr = if let Some(r) = curr_per_ns.as_ref().take(Namespace::Types) {\n                 r"}, {"sha": "98cd225ddec5622583fdd098d4bac6738a1c6b2f", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -451,7 +451,7 @@ where\n                                 segments: import.path.segments[i + 1..].iter().cloned().collect(),\n                                 kind: PathKind::Crate,\n                             };\n-                            let def_id = module.resolve_path(self.db, path)?;\n+                            let def_id = module.resolve_path(self.db, &path)?;\n                             if !def_id.is_none() {\n                                 self.update(module_id, |items| {\n                                     let res = Resolution {"}, {"sha": "0b260072cc26ad80e6181e7518c5f1e2f948dc96", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -1,12 +1,12 @@\n use ra_syntax::{SmolStr, ast, AstNode, TextRange};\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n     pub kind: PathKind,\n     pub segments: Vec<SmolStr>,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum PathKind {\n     Plain,\n     Self_,"}, {"sha": "11b4caa23b44794c0a09677be022532e7c34766c", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 62, "deletions": 77, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -19,38 +19,9 @@ use crate::{\n     Def, DefId, FnScopes, Module, Function, Struct, Enum, Path,\n     db::HirDatabase,\n     adt::VariantData,\n+    type_ref::{TypeRef, Mutability},\n };\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum Mutability {\n-    Shared,\n-    Mut,\n-}\n-\n-impl Mutability {\n-    pub fn from_mutable(mutable: bool) -> Mutability {\n-        if mutable {\n-            Mutability::Mut\n-        } else {\n-            Mutability::Shared\n-        }\n-    }\n-\n-    pub fn as_keyword_for_ref(self) -> &'static str {\n-        match self {\n-            Mutability::Shared => \"\",\n-            Mutability::Mut => \"mut \",\n-        }\n-    }\n-\n-    pub fn as_keyword_for_ptr(self) -> &'static str {\n-        match self {\n-            Mutability::Shared => \"const \",\n-            Mutability::Mut => \"mut \",\n-        }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Ty {\n     /// The primitive boolean type. Written as `bool`.\n@@ -156,16 +127,58 @@ pub struct FnSig {\n }\n \n impl Ty {\n-    pub(crate) fn new_from_ast_path(\n+    pub(crate) fn from_hir(\n         db: &impl HirDatabase,\n         module: &Module,\n-        path: ast::Path,\n+        type_ref: &TypeRef,\n+    ) -> Cancelable<Self> {\n+        Ok(match type_ref {\n+            TypeRef::Never => Ty::Never,\n+            TypeRef::Tuple(inner) => {\n+                let inner_tys = inner\n+                    .iter()\n+                    .map(|tr| Ty::from_hir(db, module, tr))\n+                    .collect::<Cancelable<_>>()?;\n+                Ty::Tuple(inner_tys)\n+            }\n+            TypeRef::Path(path) => Ty::from_hir_path(db, module, path)?,\n+            TypeRef::RawPtr(inner, mutability) => {\n+                let inner_ty = Ty::from_hir(db, module, inner)?;\n+                Ty::RawPtr(Arc::new(inner_ty), *mutability)\n+            }\n+            TypeRef::Array(_inner) => Ty::Unknown, // TODO\n+            TypeRef::Slice(inner) => {\n+                let inner_ty = Ty::from_hir(db, module, inner)?;\n+                Ty::Slice(Arc::new(inner_ty))\n+            }\n+            TypeRef::Reference(inner, mutability) => {\n+                let inner_ty = Ty::from_hir(db, module, inner)?;\n+                Ty::Ref(Arc::new(inner_ty), *mutability)\n+            }\n+            TypeRef::Placeholder => Ty::Unknown, // TODO\n+            TypeRef::Fn(params) => {\n+                let mut inner_tys = params\n+                    .iter()\n+                    .map(|tr| Ty::from_hir(db, module, tr))\n+                    .collect::<Cancelable<Vec<_>>>()?;\n+                let return_ty = inner_tys\n+                    .pop()\n+                    .expect(\"TypeRef::Fn should always have at least return type\");\n+                let sig = FnSig {\n+                    input: inner_tys,\n+                    output: return_ty,\n+                };\n+                Ty::FnPtr(Arc::new(sig))\n+            }\n+            TypeRef::Error => Ty::Unknown,\n+        })\n+    }\n+\n+    pub(crate) fn from_hir_path(\n+        db: &impl HirDatabase,\n+        module: &Module,\n+        path: &Path,\n     ) -> Cancelable<Self> {\n-        let path = if let Some(p) = Path::from_ast(path) {\n-            p\n-        } else {\n-            return Ok(Ty::Unknown);\n-        };\n         if path.is_ident() {\n             let name = &path.segments[0];\n             if let Some(int_ty) = primitive::IntTy::from_string(&name) {\n@@ -187,50 +200,22 @@ impl Ty {\n         Ok(ty)\n     }\n \n-    pub(crate) fn new_opt(\n+    // TODO: These should not be necessary long-term, since everything will work on HIR\n+    pub(crate) fn from_ast_opt(\n         db: &impl HirDatabase,\n         module: &Module,\n         node: Option<ast::TypeRef>,\n     ) -> Cancelable<Self> {\n-        node.map(|n| Ty::new(db, module, n))\n+        node.map(|n| Ty::from_ast(db, module, n))\n             .unwrap_or(Ok(Ty::Unknown))\n     }\n \n-    pub(crate) fn new(\n+    pub(crate) fn from_ast(\n         db: &impl HirDatabase,\n         module: &Module,\n         node: ast::TypeRef,\n     ) -> Cancelable<Self> {\n-        use ra_syntax::ast::TypeRef::*;\n-        Ok(match node {\n-            ParenType(inner) => Ty::new_opt(db, module, inner.type_ref())?,\n-            TupleType(_inner) => Ty::Unknown, // TODO\n-            NeverType(..) => Ty::Never,\n-            PathType(inner) => {\n-                if let Some(path) = inner.path() {\n-                    Ty::new_from_ast_path(db, module, path)?\n-                } else {\n-                    Ty::Unknown\n-                }\n-            }\n-            PointerType(inner) => {\n-                let inner_ty = Ty::new_opt(db, module, inner.type_ref())?;\n-                let mutability = Mutability::from_mutable(inner.is_mut());\n-                Ty::RawPtr(Arc::new(inner_ty), mutability)\n-            }\n-            ArrayType(_inner) => Ty::Unknown, // TODO\n-            SliceType(_inner) => Ty::Unknown, // TODO\n-            ReferenceType(inner) => {\n-                let inner_ty = Ty::new_opt(db, module, inner.type_ref())?;\n-                let mutability = Mutability::from_mutable(inner.is_mut());\n-                Ty::Ref(Arc::new(inner_ty), mutability)\n-            }\n-            PlaceholderType(_inner) => Ty::Unknown, // TODO\n-            FnPointerType(_inner) => Ty::Unknown,   // TODO\n-            ForType(_inner) => Ty::Unknown,         // TODO\n-            ImplTraitType(_inner) => Ty::Unknown,   // TODO\n-            DynTraitType(_inner) => Ty::Unknown,    // TODO\n-        })\n+        Ty::from_hir(db, module, &TypeRef::from_ast(node))\n     }\n \n     pub fn unit() -> Self {\n@@ -280,11 +265,11 @@ pub fn type_for_fn(db: &impl HirDatabase, f: Function) -> Cancelable<Ty> {\n         .param_list()\n         .map(|pl| {\n             pl.params()\n-                .map(|p| Ty::new_opt(db, &module, p.type_ref()))\n+                .map(|p| Ty::from_ast_opt(db, &module, p.type_ref()))\n                 .collect()\n         })\n         .unwrap_or_else(|| Ok(Vec::new()))?;\n-    let output = Ty::new_opt(db, &module, node.ret_type().and_then(|rt| rt.type_ref()))?;\n+    let output = Ty::from_ast_opt(db, &module, node.ret_type().and_then(|rt| rt.type_ref()))?;\n     let sig = FnSig { input, output };\n     Ok(Ty::FnPtr(Arc::new(sig)))\n }\n@@ -390,7 +375,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         };\n \n         // resolve in module\n-        let resolved = ctry!(self.module.resolve_path(self.db, path)?.take_values());\n+        let resolved = ctry!(self.module.resolve_path(self.db, &path)?.take_values());\n         let ty = self.db.type_for_def(resolved)?;\n         // TODO we will need to add type variables for type parameters etc. here\n         Ok(Some(ty))\n@@ -405,7 +390,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         } else {\n             return Ok((Ty::Unknown, None));\n         };\n-        let def_id = if let Some(def_id) = self.module.resolve_path(self.db, path)?.take_types() {\n+        let def_id = if let Some(def_id) = self.module.resolve_path(self.db, &path)?.take_types() {\n             def_id\n         } else {\n             return Ok((Ty::Unknown, None));\n@@ -575,7 +560,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let _inner_ty = self.infer_expr_opt(e.expr())?;\n-                let cast_ty = Ty::new_opt(self.db, &self.module, e.type_ref())?;\n+                let cast_ty = Ty::from_ast_opt(self.db, &self.module, e.type_ref())?;\n                 // TODO do the coercion...\n                 cast_ty\n             }\n@@ -620,7 +605,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for stmt in node.statements() {\n             match stmt {\n                 ast::Stmt::LetStmt(stmt) => {\n-                    let decl_ty = Ty::new_opt(self.db, &self.module, stmt.type_ref())?;\n+                    let decl_ty = Ty::from_ast_opt(self.db, &self.module, stmt.type_ref())?;\n                     let ty = if let Some(expr) = stmt.initializer() {\n                         // TODO pass expectation\n                         let expr_ty = self.infer_expr(expr)?;\n@@ -665,7 +650,7 @@ pub fn infer(db: &impl HirDatabase, function: Function) -> Cancelable<InferenceR\n                 continue;\n             };\n             if let Some(type_ref) = param.type_ref() {\n-                let ty = Ty::new(db, &ctx.module, type_ref)?;\n+                let ty = Ty::from_ast(db, &ctx.module, type_ref)?;\n                 ctx.type_of.insert(LocalSyntaxPtr::new(pat.syntax()), ty);\n             } else {\n                 // TODO self param"}, {"sha": "ae163313fbe1cdc41c977ceb3c5e318550aca3a9", "filename": "crates/ra_hir/src/type_ref.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -0,0 +1,110 @@\n+//! HIR for references to types. Paths in these are not yet resolved. They can\n+//! be directly created from an ast::TypeRef, without further queries.\n+\n+use ra_syntax::ast;\n+\n+use crate::Path;\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Mutability {\n+    Shared,\n+    Mut,\n+}\n+\n+impl Mutability {\n+    pub fn from_mutable(mutable: bool) -> Mutability {\n+        if mutable {\n+            Mutability::Mut\n+        } else {\n+            Mutability::Shared\n+        }\n+    }\n+\n+    pub fn as_keyword_for_ref(self) -> &'static str {\n+        match self {\n+            Mutability::Shared => \"\",\n+            Mutability::Mut => \"mut \",\n+        }\n+    }\n+\n+    pub fn as_keyword_for_ptr(self) -> &'static str {\n+        match self {\n+            Mutability::Shared => \"const \",\n+            Mutability::Mut => \"mut \",\n+        }\n+    }\n+}\n+\n+/// Compare ty::Ty\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum TypeRef {\n+    Never,\n+    Placeholder,\n+    Tuple(Vec<TypeRef>),\n+    Path(Path),\n+    RawPtr(Box<TypeRef>, Mutability),\n+    Reference(Box<TypeRef>, Mutability),\n+    Array(Box<TypeRef> /*, Expr*/),\n+    Slice(Box<TypeRef>),\n+    /// A fn pointer. Last element of the vector is the return type.\n+    Fn(Vec<TypeRef>),\n+    // For\n+    // ImplTrait,\n+    // DynTrait,\n+    Error,\n+}\n+\n+impl TypeRef {\n+    /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n+    pub(crate) fn from_ast(node: ast::TypeRef) -> Self {\n+        use ra_syntax::ast::TypeRef::*;\n+        match node {\n+            ParenType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n+            TupleType(inner) => TypeRef::Tuple(inner.fields().map(TypeRef::from_ast).collect()),\n+            NeverType(..) => TypeRef::Never,\n+            PathType(inner) => inner\n+                .path()\n+                .and_then(Path::from_ast)\n+                .map(TypeRef::Path)\n+                .unwrap_or(TypeRef::Error),\n+            PointerType(inner) => {\n+                let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n+                let mutability = Mutability::from_mutable(inner.is_mut());\n+                TypeRef::RawPtr(Box::new(inner_ty), mutability)\n+            }\n+            ArrayType(inner) => TypeRef::Array(Box::new(TypeRef::from_ast_opt(inner.type_ref()))),\n+            SliceType(inner) => TypeRef::Slice(Box::new(TypeRef::from_ast_opt(inner.type_ref()))),\n+            ReferenceType(inner) => {\n+                let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n+                let mutability = Mutability::from_mutable(inner.is_mut());\n+                TypeRef::Reference(Box::new(inner_ty), mutability)\n+            }\n+            PlaceholderType(_inner) => TypeRef::Placeholder,\n+            FnPointerType(inner) => {\n+                let ret_ty = TypeRef::from_ast_opt(inner.ret_type().and_then(|rt| rt.type_ref()));\n+                let mut params = if let Some(pl) = inner.param_list() {\n+                    pl.params()\n+                        .map(|p| p.type_ref())\n+                        .map(TypeRef::from_ast_opt)\n+                        .collect()\n+                } else {\n+                    Vec::new()\n+                };\n+                params.push(ret_ty);\n+                TypeRef::Fn(params)\n+            }\n+            // for types are close enough for our purposes to the inner type for now...\n+            ForType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n+            ImplTraitType(_inner) => TypeRef::Error,\n+            DynTraitType(_inner) => TypeRef::Error,\n+        }\n+    }\n+\n+    fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n+        if let Some(node) = node {\n+            TypeRef::from_ast(node)\n+        } else {\n+            TypeRef::Error\n+        }\n+    }\n+}"}, {"sha": "c22e026cf9ddcf69570a051ee117a38f01ac8446", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -131,7 +131,15 @@ impl<R: TreeRoot<RaTypes>> ArrayTypeNode<R> {\n }\n \n \n-impl<'a> ArrayType<'a> {}\n+impl<'a> ArrayType<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Attr\n #[derive(Debug, Clone, Copy,)]\n@@ -1258,7 +1266,15 @@ impl<R: TreeRoot<RaTypes>> FnPointerTypeNode<R> {\n }\n \n \n-impl<'a> FnPointerType<'a> {}\n+impl<'a> FnPointerType<'a> {\n+    pub fn param_list(self) -> Option<ParamList<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn ret_type(self) -> Option<RetType<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ForExpr\n #[derive(Debug, Clone, Copy,)]\n@@ -1341,7 +1357,11 @@ impl<R: TreeRoot<RaTypes>> ForTypeNode<R> {\n }\n \n \n-impl<'a> ForType<'a> {}\n+impl<'a> ForType<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // IfExpr\n #[derive(Debug, Clone, Copy,)]\n@@ -3490,7 +3510,11 @@ impl<R: TreeRoot<RaTypes>> SliceTypeNode<R> {\n }\n \n \n-impl<'a> SliceType<'a> {}\n+impl<'a> SliceType<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // SourceFile\n #[derive(Debug, Clone, Copy,)]\n@@ -4025,7 +4049,11 @@ impl<R: TreeRoot<RaTypes>> TupleTypeNode<R> {\n }\n \n \n-impl<'a> TupleType<'a> {}\n+impl<'a> TupleType<'a> {\n+    pub fn fields(self) -> impl Iterator<Item = TypeRef<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n \n // TypeDef\n #[derive(Debug, Clone, Copy,)]"}, {"sha": "4bcff4e144bfb35f99dfb8703953f46d01bfb2c4", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/cdca39706121b2d1734a94938a2372da881e10c6/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=cdca39706121b2d1734a94938a2372da881e10c6", "patch": "@@ -304,16 +304,16 @@ Grammar(\n         \"ImplItem\": (),\n \n         \"ParenType\": (options: [\"TypeRef\"]),\n-        \"TupleType\": (),\n+        \"TupleType\": ( collections: [[\"fields\", \"TypeRef\"]] ),\n         \"NeverType\": (),\n         \"PathType\": (options: [\"Path\"]),\n         \"PointerType\": (options: [\"TypeRef\"]),\n-        \"ArrayType\": (),\n-        \"SliceType\": (),\n+        \"ArrayType\": ( options: [\"TypeRef\", \"Expr\"] ),\n+        \"SliceType\": ( options: [\"TypeRef\"] ),\n         \"ReferenceType\": (options: [\"TypeRef\"]),\n         \"PlaceholderType\": (),\n-        \"FnPointerType\": (),\n-        \"ForType\": (),\n+        \"FnPointerType\": (options: [\"ParamList\", \"RetType\"]),\n+        \"ForType\": (options: [\"TypeRef\"]),\n         \"ImplTraitType\": (),\n         \"DynTraitType\": (),\n "}]}