{"sha": "16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZmI2YjA4MmRhM2M5ZTg4MDVjODZlZjU2Y2NmYjQ0YWRiMzk3YTk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-24T14:48:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-25T11:15:05Z"}, "message": "Reduce error codes length when too much are thrown", "tree": {"sha": "3badba265d9f902a42224c78832f8fe2d12f42df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3badba265d9f902a42224c78832f8fe2d12f42df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "html_url": "https://github.com/rust-lang/rust/commit/16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5747fd6611a77d297d9559f2365a554bd3dd6610", "url": "https://api.github.com/repos/rust-lang/rust/commits/5747fd6611a77d297d9559f2365a554bd3dd6610", "html_url": "https://github.com/rust-lang/rust/commit/5747fd6611a77d297d9559f2365a554bd3dd6610"}], "stats": {"total": 143, "additions": 136, "deletions": 7}, "files": [{"sha": "86e77d404ff576b0b1770722b9e031591fa05af5", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -122,9 +122,12 @@ impl Drop for EmitterWriter {\n             let mut error_codes = self.error_codes.clone().into_iter().collect::<Vec<_>>();\n             error_codes.sort();\n             if error_codes.len() > 1 {\n+                let limit = if error_codes.len() > 9 { 9 } else { error_codes.len() };\n                 writeln!(self.dst,\n-                         \"You've got a few errors: {}\",\n-                         error_codes.join(\", \")).expect(\"failed to give tips...\");\n+                         \"You've got a few errors: {}{}\",\n+                         error_codes[..limit].join(\", \"),\n+                         if error_codes.len() > 9 { \"...\" } else { \"\" }\n+                        ).expect(\"failed to give tips...\");\n                 writeln!(self.dst,\n                          \"If you want more information on an error, try using \\\n                           \\\"rustc --explain {}\\\"\","}, {"sha": "55848c6553cca74c78dd1047e07ba1f7b65929fc", "filename": "src/test/ui-fulldeps/custom-derive/issue-36935.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fissue-36935.stderr?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -1,5 +1,3 @@\n-thread 'rustc' panicked at 'lolnope', $DIR/auxiliary/plugin.rs:27:5\n-note: Run with `RUST_BACKTRACE=1` for a backtrace.\n error: proc-macro derive panicked\n   --> $DIR/issue-36935.rs:18:15\n    |"}, {"sha": "ab2ab84315a9390a84ecd646fe430c901568b876", "filename": "src/test/ui-fulldeps/proc-macro/load-panic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -1,5 +1,3 @@\n-thread 'rustc' panicked at 'nope!', $DIR/auxiliary/derive-panic.rs:22:5\n-note: Run with `RUST_BACKTRACE=1` for a backtrace.\n error: proc-macro derive panicked\n   --> $DIR/load-panic.rs:17:10\n    |"}, {"sha": "c17e3c878b8526beefc2f3b0f929baf402e6a86b", "filename": "src/test/ui/error-festival.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Ferror-festival.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Ferror-festival.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.rs?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Question {\n+    Yes,\n+    No,\n+}\n+\n+mod foo {\n+    const FOO: u32 = 0;\n+}\n+\n+fn main() {\n+    let x = \"a\";\n+    x += 2;\n+    //~^ ERROR E0368\n+    y = 2;\n+    //~^ ERROR E0425\n+    x.z();\n+    //~^ ERROR E0599\n+\n+    !Question::Yes;\n+    //~^ ERROR E0600\n+\n+    foo::FOO;\n+    //~^ ERROR E0603\n+\n+    0u32 as char;\n+    //~^ ERROR E0604\n+\n+    let x = 0u8;\n+    x as Vec<u8>;\n+    //~^ ERROR E0605\n+\n+    let x = 5;\n+    let x_is_nonzero = x as bool;\n+    //~^ ERROR E0054\n+\n+    let x = &0u8;\n+    let y: u32 = x as u32;\n+    //~^ ERROR E0606\n+\n+    let v = 0 as *const u8;\n+    v as *const [u8];\n+    //~^ ERROR E0607\n+}"}, {"sha": "35a35430fe1c00b990ce8bf695055b1d8d2ae1da", "filename": "src/test/ui/error-festival.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -0,0 +1,76 @@\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/error-festival.rs:24:5\n+   |\n+24 |     y = 2;\n+   |     ^ did you mean `x`?\n+\n+error[E0603]: constant `FOO` is private\n+  --> $DIR/error-festival.rs:32:5\n+   |\n+32 |     foo::FOO;\n+   |     ^^^^^^^^\n+\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n+  --> $DIR/error-festival.rs:22:5\n+   |\n+22 |     x += 2;\n+   |     -^^^^^\n+   |     |\n+   |     cannot use `+=` on type `&str`\n+\n+error[E0599]: no method named `z` found for type `&str` in the current scope\n+  --> $DIR/error-festival.rs:26:7\n+   |\n+26 |     x.z();\n+   |       ^\n+\n+error[E0600]: cannot apply unary operator `!` to type `Question`\n+  --> $DIR/error-festival.rs:29:5\n+   |\n+29 |     !Question::Yes;\n+   |     ^^^^^^^^^^^^^^\n+\n+error[E0604]: only `u8` can be cast as `char`, not `u32`\n+  --> $DIR/error-festival.rs:35:5\n+   |\n+35 |     0u32 as char;\n+   |     ^^^^^^^^^^^^\n+\n+error[E0605]: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n+  --> $DIR/error-festival.rs:39:5\n+   |\n+39 |     x as Vec<u8>;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/error-festival.rs:43:24\n+   |\n+43 |     let x_is_nonzero = x as bool;\n+   |                        ^^^^^^^^^ unsupported cast\n+   |\n+   = help: compare with zero instead\n+\n+error[E0606]: casting `&u8` as `u32` is invalid\n+  --> $DIR/error-festival.rs:47:18\n+   |\n+47 |     let y: u32 = x as u32;\n+   |                  ^^^^^^^^ cannot cast `&u8` as `u32`\n+   |\n+help: did you mean `*x`?\n+  --> $DIR/error-festival.rs:47:18\n+   |\n+47 |     let y: u32 = x as u32;\n+   |                  ^\n+\n+error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n+  --> $DIR/error-festival.rs:51:5\n+   |\n+51 |     v as *const [u8];\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+You've got a few errors: E0054, E0368, E0425, E0599, E0600, E0603, E0604, E0605, E0606...\n+If you want more information on an error, try using \"rustc --explain E0054\""}, {"sha": "1ab2a8c872aba5a94c23b708f14e6cb2491db09d", "filename": "src/test/ui/mismatched_types/closure-arg-count-expected-type-issue-47244.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -12,3 +12,4 @@ help: change the closure to accept a tuple instead of individual arguments\n \n error: aborting due to previous error\n \n+If you want more information on this error, try using \"rustc --explain E0593\""}, {"sha": "567d8f33ed64dfe61cd8fbdcc20db7e2d63942a8", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16fb6b082da3c9e8805c86ef56ccfb44adb397a9/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=16fb6b082da3c9e8805c86ef56ccfb44adb397a9", "patch": "@@ -15,4 +15,4 @@ error[E0282]: type annotations needed\n \n error: aborting due to 2 previous errors\n \n-If you want more information on this error, try using \"rustc --explain E0619\"\n+If you want more information on this error, try using \"rustc --explain E0282\""}]}