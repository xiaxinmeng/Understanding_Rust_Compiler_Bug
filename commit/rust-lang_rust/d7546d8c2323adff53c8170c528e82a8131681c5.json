{"sha": "d7546d8c2323adff53c8170c528e82a8131681c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTQ2ZDhjMjMyM2FkZmY1M2M4MTcwYzUyOGU4MmE4MTMxNjgxYzU=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-04-05T14:38:37Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-04-05T14:38:37Z"}, "message": "Pass interner to TraitRef::self_type_parameter", "tree": {"sha": "511c31f0b647044294eba7c4394ee3e4ba7b13b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511c31f0b647044294eba7c4394ee3e4ba7b13b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7546d8c2323adff53c8170c528e82a8131681c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7546d8c2323adff53c8170c528e82a8131681c5", "html_url": "https://github.com/rust-lang/rust/commit/d7546d8c2323adff53c8170c528e82a8131681c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7546d8c2323adff53c8170c528e82a8131681c5/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aefcbf275804f558ab18e83bfc8869187713b4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/aefcbf275804f558ab18e83bfc8869187713b4ad", "html_url": "https://github.com/rust-lang/rust/commit/aefcbf275804f558ab18e83bfc8869187713b4ad"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "1108e5a107ba694d910e637be7ed5559e846cd2b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=d7546d8c2323adff53c8170c528e82a8131681c5", "patch": "@@ -592,20 +592,21 @@ impl HirDisplay for Ty {\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n                         let substs = generics.type_params_subst(f.db);\n-                        let bounds = f\n-                            .db\n-                            .generic_predicates(id.parent)\n-                            .into_iter()\n-                            .map(|pred| pred.clone().subst(&substs))\n-                            .filter(|wc| match &wc.skip_binders() {\n-                                WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n-                                WhereClause::AliasEq(AliasEq {\n-                                    alias: AliasTy::Projection(proj),\n-                                    ty: _,\n-                                }) => proj.self_type_parameter(&Interner) == self,\n-                                _ => false,\n-                            })\n-                            .collect::<Vec<_>>();\n+                        let bounds =\n+                            f.db.generic_predicates(id.parent)\n+                                .into_iter()\n+                                .map(|pred| pred.clone().subst(&substs))\n+                                .filter(|wc| match &wc.skip_binders() {\n+                                    WhereClause::Implemented(tr) => {\n+                                        tr.self_type_parameter(&Interner) == self\n+                                    }\n+                                    WhereClause::AliasEq(AliasEq {\n+                                        alias: AliasTy::Projection(proj),\n+                                        ty: _,\n+                                    }) => proj.self_type_parameter(&Interner) == self,\n+                                    _ => false,\n+                                })\n+                                .collect::<Vec<_>>();\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds, f)?;\n                     }\n                 }\n@@ -780,7 +781,7 @@ impl TraitRef {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n-        self.self_type_parameter().hir_fmt(f)?;\n+        self.self_type_parameter(&Interner).hir_fmt(f)?;\n         if use_as {\n             write!(f, \" as \")?;\n         } else {"}, {"sha": "adfdcaa370489a8e95659501a615856152b63631", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=d7546d8c2323adff53c8170c528e82a8131681c5", "patch": "@@ -165,8 +165,8 @@ impl<T: TypeWalk> Binders<T> {\n }\n \n impl TraitRef {\n-    pub fn self_type_parameter(&self) -> &Ty {\n-        &self.substitution.at(&Interner, 0).assert_ty_ref(&Interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n     }\n \n     pub fn hir_trait_id(&self) -> TraitId {\n@@ -473,7 +473,9 @@ impl Ty {\n                             .into_iter()\n                             .map(|pred| pred.clone().subst(&substs))\n                             .filter(|wc| match &wc.skip_binders() {\n-                                WhereClause::Implemented(tr) => tr.self_type_parameter() == self,\n+                                WhereClause::Implemented(tr) => {\n+                                    tr.self_type_parameter(&Interner) == self\n+                                }\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,"}, {"sha": "e9e4e69adfe3af3ad3989ca94c059e570f4cd3f8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=d7546d8c2323adff53c8170c528e82a8131681c5", "patch": "@@ -941,7 +941,8 @@ pub(crate) fn trait_environment_query(\n     for pred in resolver.where_predicates_in_scope() {\n         for pred in ctx.lower_where_predicate(pred, false) {\n             if let WhereClause::Implemented(tr) = &pred.skip_binders() {\n-                traits_in_scope.push((tr.self_type_parameter().clone(), tr.hir_trait_id()));\n+                traits_in_scope\n+                    .push((tr.self_type_parameter(&Interner).clone(), tr.hir_trait_id()));\n             }\n             let program_clause: chalk_ir::ProgramClause<Interner> =\n                 pred.clone().to_chalk(db).cast(&Interner);"}, {"sha": "67e88ebf43d0c6d2d333cfe702501fa467140c4d", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7546d8c2323adff53c8170c528e82a8131681c5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=d7546d8c2323adff53c8170c528e82a8131681c5", "patch": "@@ -539,7 +539,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n     let self_ty_shifted_in = self_ty.clone().shift_bound_vars(DebruijnIndex::ONE);\n     match &pred.value {\n         WhereClause::Implemented(trait_ref) => {\n-            if trait_ref.self_type_parameter() != &self_ty_shifted_in {\n+            if trait_ref.self_type_parameter(&Interner) != &self_ty_shifted_in {\n                 // we can only convert predicates back to type bounds if they\n                 // have the expected self type\n                 return None;"}]}