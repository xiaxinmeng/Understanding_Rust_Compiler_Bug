{"sha": "6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhM2I4MzRiMzllMGQ2NDE4ZTk2Y2Q3ZTNhYmQ4MDQzYWZkODlkMWM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-27T03:17:29Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-01T15:04:11Z"}, "message": "Use diagnostic items in into_iter_collections", "tree": {"sha": "19254bb007ea2d766d8aab3f6c0763455711cdc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19254bb007ea2d766d8aab3f6c0763455711cdc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "html_url": "https://github.com/rust-lang/rust/commit/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eada4d1c457f4421713cdabe7b57d70ae23a4278", "url": "https://api.github.com/repos/rust-lang/rust/commits/eada4d1c457f4421713cdabe7b57d70ae23a4278", "html_url": "https://github.com/rust-lang/rust/commit/eada4d1c457f4421713cdabe7b57d70ae23a4278"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "f87267da9f6c7dfe4df46498f9b3edb6b7e9e059", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "patch": "@@ -195,6 +195,7 @@ symbols! {\n         RangeToInclusive,\n         Rc,\n         Ready,\n+        Receiver,\n         Result,\n         Return,\n         Right,"}, {"sha": "5163074453b5fafdf5f9f03f7c97cafbec66633c", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, SymbolStr};\n+use rustc_span::symbol::{sym, Symbol, SymbolStr};\n use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n@@ -3619,7 +3619,7 @@ fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(cx: &LateContext<'_>, self_ref_ty: Ty<'_>) -> Option<(&'static str, &'static str)> {\n+fn ty_has_iter_method(cx: &LateContext<'_>, self_ref_ty: Ty<'_>) -> Option<(Symbol, &'static str)> {\n     has_iter_method(cx, self_ref_ty).map(|ty_name| {\n         let mutbl = match self_ref_ty.kind() {\n             ty::Ref(_, _, mutbl) => mutbl,"}, {"sha": "42512cadfb18dfcebb026ef7cc17559dd748a43e", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "patch": "@@ -1295,24 +1295,24 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool\n }\n \n /// Returns true if ty has `iter` or `iter_mut` methods\n-pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<&'static str> {\n+pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n     // exists and has the desired signature. Unfortunately FnCtxt is not exported\n     // so we can't use its `lookup_method` method.\n-    let into_iter_collections: [&[&str]; 13] = [\n-        &paths::VEC,\n-        &paths::OPTION,\n-        &paths::RESULT,\n-        &paths::BTREESET,\n-        &paths::BTREEMAP,\n-        &paths::VEC_DEQUE,\n-        &paths::LINKED_LIST,\n-        &paths::BINARY_HEAP,\n-        &paths::HASHSET,\n-        &paths::HASHMAP,\n-        &paths::PATH_BUF,\n-        &paths::PATH,\n-        &paths::RECEIVER,\n+    let into_iter_collections: &[Symbol] = &[\n+        sym::vec_type,\n+        sym::option_type,\n+        sym::result_type,\n+        sym::BTreeMap,\n+        sym::BTreeSet,\n+        sym::vecdeque_type,\n+        sym::LinkedList,\n+        sym::BinaryHeap,\n+        sym::hashset_type,\n+        sym::hashmap_type,\n+        sym::PathBuf,\n+        sym::Path,\n+        sym::Receiver,\n     ];\n \n     let ty_to_check = match probably_ref_ty.kind() {\n@@ -1321,15 +1321,15 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n     };\n \n     let def_id = match ty_to_check.kind() {\n-        ty::Array(..) => return Some(\"array\"),\n-        ty::Slice(..) => return Some(\"slice\"),\n+        ty::Array(..) => return Some(sym::array),\n+        ty::Slice(..) => return Some(sym::slice),\n         ty::Adt(adt, _) => adt.did,\n         _ => return None,\n     };\n \n-    for path in &into_iter_collections {\n-        if match_def_path(cx, def_id, path) {\n-            return Some(*path.last().unwrap());\n+    for &name in into_iter_collections {\n+        if cx.tcx.is_diagnostic_item(name, def_id) {\n+            return Some(cx.tcx.item_name(def_id));\n         }\n     }\n     None"}, {"sha": "c2da1f9b7c9f9360c1d15be3e237302d376e82a7", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3b834b39e0d6418e96cd7e3abd8043afd89d1c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=6a3b834b39e0d6418e96cd7e3abd8043afd89d1c", "patch": "@@ -99,7 +99,6 @@ pub(super) const PANIC_ANY: [&str; 3] = [\"std\", \"panic\", \"panic_any\"];\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 2] = [\"parking_lot\", \"MutexGuard\"];\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWriteGuard\"];\n-pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n@@ -116,7 +115,6 @@ pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n-pub const RECEIVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n pub const REFCELL_REF: [&str; 3] = [\"core\", \"cell\", \"Ref\"];\n pub const REFCELL_REFMUT: [&str; 3] = [\"core\", \"cell\", \"RefMut\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];"}]}