{"sha": "8c8ef1432e1891809f48ff691f949047d6527c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOGVmMTQzMmUxODkxODA5ZjQ4ZmY2OTFmOTQ5MDQ3ZDY1MjdjMDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T06:38:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T06:38:25Z"}, "message": "Rename MacroResolver -> Expander", "tree": {"sha": "f12b8079e783bb46275f72fe5245783ed32c986f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12b8079e783bb46275f72fe5245783ed32c986f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8ef1432e1891809f48ff691f949047d6527c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8ef1432e1891809f48ff691f949047d6527c07", "html_url": "https://github.com/rust-lang/rust/commit/8c8ef1432e1891809f48ff691f949047d6527c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8ef1432e1891809f48ff691f949047d6527c07/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3175b7077129ca4b6c52e05f0491e65617ae423", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3175b7077129ca4b6c52e05f0491e65617ae423", "html_url": "https://github.com/rust-lang/rust/commit/b3175b7077129ca4b6c52e05f0491e65617ae423"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "d19f5d14cea08e8d7f0fd1539c07fd33ab534999", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c8ef1432e1891809f48ff691f949047d6527c07/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8ef1432e1891809f48ff691f949047d6527c07/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=8c8ef1432e1891809f48ff691f949047d6527c07", "patch": "@@ -40,8 +40,8 @@ pub(crate) fn body_with_source_map_query(\n             (src.file_id, src.ast.body())\n         }\n     };\n-    let resolver = hir_def::body::MacroResolver::new(db, file_id, def.module(db).id);\n-    let (body, source_map) = Body::new(db, resolver, params, body);\n+    let expander = hir_def::body::Expander::new(db, file_id, def.module(db).id);\n+    let (body, source_map) = Body::new(db, expander, params, body);\n     (Arc::new(body), Arc::new(source_map))\n }\n "}, {"sha": "5d8c299ba5f4ffc33e840ac2328723adad9fe8cd", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c8ef1432e1891809f48ff691f949047d6527c07/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8ef1432e1891809f48ff691f949047d6527c07/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=8c8ef1432e1891809f48ff691f949047d6527c07", "patch": "@@ -16,20 +16,16 @@ use crate::{\n     ModuleId,\n };\n \n-pub struct MacroResolver {\n+pub struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n     module: ModuleId,\n }\n \n-impl MacroResolver {\n-    pub fn new(\n-        db: &impl DefDatabase2,\n-        current_file_id: HirFileId,\n-        module: ModuleId,\n-    ) -> MacroResolver {\n+impl Expander {\n+    pub fn new(db: &impl DefDatabase2, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n-        MacroResolver { crate_def_map, current_file_id, module }\n+        Expander { crate_def_map, current_file_id, module }\n     }\n \n     fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n@@ -82,11 +78,11 @@ pub struct BodySourceMap {\n impl Body {\n     pub fn new(\n         db: &impl DefDatabase2,\n-        resolver: MacroResolver,\n+        expander: Expander,\n         params: Option<ast::ParamList>,\n         body: Option<ast::Expr>,\n     ) -> (Body, BodySourceMap) {\n-        lower::lower(db, resolver, params, body)\n+        lower::lower(db, expander, params, body)\n     }\n \n     pub fn params(&self) -> &[PatId] {"}, {"sha": "cc4bbe11acc0e4d297668ca9e1318e371a0b970b", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8c8ef1432e1891809f48ff691f949047d6527c07/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8ef1432e1891809f48ff691f949047d6527c07/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=8c8ef1432e1891809f48ff691f949047d6527c07", "patch": "@@ -16,7 +16,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    body::{Body, BodySourceMap, MacroResolver, PatPtr},\n+    body::{Body, BodySourceMap, Expander, PatPtr},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase2,\n     expr::{\n@@ -30,14 +30,14 @@ use crate::{\n \n pub(super) fn lower(\n     db: &impl DefDatabase2,\n-    resolver: MacroResolver,\n+    expander: Expander,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n-    let original_file_id = resolver.current_file_id;\n+    let original_file_id = expander.current_file_id;\n \n     ExprCollector {\n-        resolver,\n+        expander,\n         db,\n         original_file_id,\n         source_map: BodySourceMap::default(),\n@@ -53,7 +53,7 @@ pub(super) fn lower(\n \n struct ExprCollector<DB> {\n     db: DB,\n-    resolver: MacroResolver,\n+    expander: Expander,\n     original_file_id: HirFileId,\n \n     body: Body,\n@@ -100,12 +100,12 @@ where\n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::A(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if self.resolver.current_file_id == self.original_file_id {\n+        if self.expander.current_file_id == self.original_file_id {\n             self.source_map.expr_map.insert(ptr, id);\n         }\n         self.source_map\n             .expr_map_back\n-            .insert(id, Source { file_id: self.resolver.current_file_id, ast: ptr });\n+            .insert(id, Source { file_id: self.expander.current_file_id, ast: ptr });\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n@@ -116,22 +116,22 @@ where\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::B(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if self.resolver.current_file_id == self.original_file_id {\n+        if self.expander.current_file_id == self.original_file_id {\n             self.source_map.expr_map.insert(ptr, id);\n         }\n         self.source_map\n             .expr_map_back\n-            .insert(id, Source { file_id: self.resolver.current_file_id, ast: ptr });\n+            .insert(id, Source { file_id: self.expander.current_file_id, ast: ptr });\n         id\n     }\n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let id = self.body.pats.alloc(pat);\n-        if self.resolver.current_file_id == self.original_file_id {\n+        if self.expander.current_file_id == self.original_file_id {\n             self.source_map.pat_map.insert(ptr, id);\n         }\n         self.source_map\n             .pat_map_back\n-            .insert(id, Source { file_id: self.resolver.current_file_id, ast: ptr });\n+            .insert(id, Source { file_id: self.expander.current_file_id, ast: ptr });\n         id\n     }\n \n@@ -446,21 +446,21 @@ where\n             ast::Expr::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::Expr::MacroCall(e) => {\n                 let ast_id = AstId::new(\n-                    self.resolver.current_file_id,\n-                    self.db.ast_id_map(self.resolver.current_file_id).ast_id(&e),\n+                    self.expander.current_file_id,\n+                    self.db.ast_id_map(self.expander.current_file_id).ast_id(&e),\n                 );\n \n                 if let Some(path) = e.path().and_then(|path| self.parse_path(path)) {\n-                    if let Some(def) = self.resolver.resolve_path_as_macro(self.db, &path) {\n+                    if let Some(def) = self.expander.resolve_path_as_macro(self.db, &path) {\n                         let call_id = self.db.intern_macro(MacroCallLoc { def, ast_id });\n                         let file_id = call_id.as_file(MacroFileKind::Expr);\n                         if let Some(node) = self.db.parse_or_expand(file_id) {\n                             if let Some(expr) = ast::Expr::cast(node) {\n                                 log::debug!(\"macro expansion {:#?}\", expr.syntax());\n                                 let old_file_id =\n-                                    std::mem::replace(&mut self.resolver.current_file_id, file_id);\n+                                    std::mem::replace(&mut self.expander.current_file_id, file_id);\n                                 let id = self.collect_expr(expr);\n-                                self.resolver.current_file_id = old_file_id;\n+                                self.expander.current_file_id = old_file_id;\n                                 return id;\n                             }\n                         }\n@@ -582,7 +582,7 @@ where\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        let hygiene = Hygiene::new(self.db, self.resolver.current_file_id);\n+        let hygiene = Hygiene::new(self.db, self.expander.current_file_id);\n         Path::from_src(path, &hygiene)\n     }\n }"}]}