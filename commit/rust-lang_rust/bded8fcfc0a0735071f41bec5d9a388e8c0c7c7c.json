{"sha": "bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "node_id": "C_kwDOAAsO6NoAKGJkZWQ4ZmNmYzBhMDczNTA3MWY0MWJlYzVkOWEzODhlOGMwYzdjN2M", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-01-27T23:34:07Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-06-20T21:58:29Z"}, "message": "Add `[f32]::sort_floats` and `[f64]::sort_floats`\n\nIt's inconvenient to sort a slice or Vec of floats, compared to sorting\nintegers. To simplify numeric code, add a convenience method to `[f32]`\nand `[f64]` to sort them using `sort_unstable_by` with `total_cmp`.", "tree": {"sha": "99e65708210ba90dc5045ab5e7e211a44be38b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99e65708210ba90dc5045ab5e7e211a44be38b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "html_url": "https://github.com/rust-lang/rust/commit/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12708f7f40463b2131f0c47d1e8a4ffb543a422", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12708f7f40463b2131f0c47d1e8a4ffb543a422", "html_url": "https://github.com/rust-lang/rust/commit/b12708f7f40463b2131f0c47d1e8a4ffb543a422"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "5e8a085508e94d8b2b7127d1bfa8ee3802fe9a49", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "patch": "@@ -4100,6 +4100,66 @@ impl<T, const N: usize> [[T; N]] {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[cfg(not(test))]\n+impl [f32] {\n+    /// Sorts the slice of floats.\n+    ///\n+    /// This sort is in-place (i.e. does not allocate), *O*(*n* \\* log(*n*)) worst-case, and uses\n+    /// the ordering defined by [`f32::total_cmp`].\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// This uses the same sorting algorithm as [`sort_unstable_by`](slice::sort_unstable_by).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(sort_floats)]\n+    /// let mut v = [2.6, -5e-8, f32::NAN, 8.29, f32::INFINITY, -1.0, 0.0, -f32::INFINITY, -0.0];\n+    ///\n+    /// v.sort_floats();\n+    /// let sorted = [-f32::INFINITY, -1.0, -5e-8, -0.0, 0.0, 2.6, 8.29, f32::INFINITY, f32::NAN];\n+    /// assert_eq!(&v[..8], &sorted[..8]);\n+    /// assert!(v[8].is_nan());\n+    /// ```\n+    #[unstable(feature = \"sort_floats\", issue = \"93396\")]\n+    #[inline]\n+    pub fn sort_floats(&mut self) {\n+        self.sort_unstable_by(f32::total_cmp);\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(test))]\n+impl [f64] {\n+    /// Sorts the slice of floats.\n+    ///\n+    /// This sort is in-place (i.e. does not allocate), *O*(*n* \\* log(*n*)) worst-case, and uses\n+    /// the ordering defined by [`f64::total_cmp`].\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// This uses the same sorting algorithm as [`sort_unstable_by`](slice::sort_unstable_by).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(sort_floats)]\n+    /// let mut v = [2.6, -5e-8, f64::NAN, 8.29, f64::INFINITY, -1.0, 0.0, -f64::INFINITY, -0.0];\n+    ///\n+    /// v.sort_floats();\n+    /// let sorted = [-f64::INFINITY, -1.0, -5e-8, -0.0, 0.0, 2.6, 8.29, f64::INFINITY, f64::NAN];\n+    /// assert_eq!(&v[..8], &sorted[..8]);\n+    /// assert!(v[8].is_nan());\n+    /// ```\n+    #[unstable(feature = \"sort_floats\", issue = \"93396\")]\n+    #[inline]\n+    pub fn sort_floats(&mut self) {\n+        self.sort_unstable_by(f64::total_cmp);\n+    }\n+}\n+\n trait CloneFromSpec<T> {\n     fn spec_clone_from(&mut self, src: &[T]);\n }"}]}