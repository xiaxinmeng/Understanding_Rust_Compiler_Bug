{"sha": "7d9f81517bcb6bb8f4fde14380e7d6f340034a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOWY4MTUxN2JjYjZiYjhmNGZkZTE0MzgwZTdkNmYzNDAwMzRhNjY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-10T10:53:48Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-11T20:24:03Z"}, "message": "add rustdoc test", "tree": {"sha": "a7b32a511b7640cac7e41fdc80add0f1e6519870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b32a511b7640cac7e41fdc80add0f1e6519870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d9f81517bcb6bb8f4fde14380e7d6f340034a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9f81517bcb6bb8f4fde14380e7d6f340034a66", "html_url": "https://github.com/rust-lang/rust/commit/7d9f81517bcb6bb8f4fde14380e7d6f340034a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d9f81517bcb6bb8f4fde14380e7d6f340034a66/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4790ec2b6392972f5ef65ad9afb70ea1937a692", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4790ec2b6392972f5ef65ad9afb70ea1937a692", "html_url": "https://github.com/rust-lang/rust/commit/f4790ec2b6392972f5ef65ad9afb70ea1937a692"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "b8bd040f7a4b2feb62e241db0858e7af4209ac61", "filename": "src/test/rustdoc/const-generics/auxiliary/extern_crate.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d9f81517bcb6bb8f4fde14380e7d6f340034a66/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9f81517bcb6bb8f4fde14380e7d6f340034a66/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs?ref=7d9f81517bcb6bb8f4fde14380e7d6f340034a66", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+#![feature(min_const_generics)]\n+\n+pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]> {\n+    [[0; N]; N].iter().copied()\n+}\n+\n+pub struct ExternTy<const N: usize> {\n+    pub inner: [u8; N],\n+}\n+\n+pub type TyAlias<const N: usize> = ExternTy<N>;\n+\n+pub trait WTrait<const N: usize, const M: usize> {\n+    fn hey<const P: usize>() -> usize {\n+        N + M + P\n+    }\n+}"}, {"sha": "8dcba36600d26da5194630481ad11e3eefdc9ead", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/7d9f81517bcb6bb8f4fde14380e7d6f340034a66/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9f81517bcb6bb8f4fde14380e7d6f340034a66/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=7d9f81517bcb6bb8f4fde14380e7d6f340034a66", "patch": "@@ -0,0 +1,130 @@\n+// edition:2018\n+// aux-build: extern_crate.rs\n+#![feature(min_const_generics)]\n+#![crate_name = \"foo\"]\n+\n+extern crate extern_crate;\n+// @has foo/fn.extern_fn.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]>'\n+pub use extern_crate::extern_fn;\n+// @has foo/struct.ExternTy.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct ExternTy<const N: usize> {'\n+pub use extern_crate::ExternTy;\n+// @has foo/type.TyAlias.html '//pre[@class=\"rust typedef\"]' \\\n+//      'type TyAlias<const N: usize> = ExternTy<N>;'\n+pub use extern_crate::TyAlias;\n+// @has foo/trait.WTrait.html '//pre[@class=\"rust trait\"]' \\\n+//      'pub trait WTrait<const N: usize, const M: usize>'\n+// @has - '//*[@class=\"rust trait\"]' 'fn hey<const P: usize>() -> usize'\n+pub use extern_crate::WTrait;\n+\n+// @has foo/trait.Trait.html '//pre[@class=\"rust trait\"]' \\\n+//      'pub trait Trait<const N: usize>'\n+// @has - '//*[@id=\"impl-Trait%3C1_usize%3E-for-u8\"]//code' 'impl Trait<1_usize> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C2_usize%3E-for-u8\"]//code' 'impl Trait<2_usize> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//code' 'impl Trait<{1 + 2}> for u8'\n+// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//code' \\\n+//      'impl<const N: usize> Trait<N> for [u8; N]'\n+pub trait Trait<const N: usize> {}\n+impl Trait<1> for u8 {}\n+impl Trait<2> for u8 {}\n+impl Trait<{1 + 2}> for u8 {}\n+impl<const N: usize> Trait<N> for [u8; N] {}\n+\n+// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Foo<const N: usize> where u8: Trait<N>'\n+pub struct Foo<const N: usize> where u8: Trait<N>;\n+// @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n+pub struct Bar<T, const N: usize>([T; N]);\n+\n+// @has foo/struct.Foo.html '//h3[@id=\"impl\"]/code' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+impl<const M: usize> Foo<M> where u8: Trait<M> {\n+    // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n+    pub const FOO_ASSOC: usize = M + 13;\n+\n+    // @has - '//*[@id=\"method.hey\"]' 'pub fn hey<const N: usize>(&self) -> Bar<u8, N>'\n+    pub fn hey<const N: usize>(&self) -> Bar<u8, N> {\n+        Bar([0; N])\n+    }\n+}\n+\n+// @has foo/struct.Bar.html '//h3[@id=\"impl\"]/code' 'impl<const M: usize> Bar<u8, M>'\n+impl<const M: usize> Bar<u8, M> {\n+    // @has - '//*[@id=\"method.hey\"]' \\\n+    //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'\n+    pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N> {\n+        Foo\n+    }\n+}\n+\n+// @has foo/fn.test.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N>'\n+pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n+    2u8\n+}\n+\n+// @has foo/fn.a_sink.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N>'\n+pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n+    v\n+}\n+\n+// @has foo/fn.b_sink.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub async fn b_sink<const N: usize>(__arg0: impl Trait<N>)'\n+// FIXME(const_generics): This should be `_` not `__arg0`.\n+pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n+\n+// @has foo/fn.concrete.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn concrete() -> [u8; 22]'\n+pub fn concrete() -> [u8; 3 + std::mem::size_of::<u64>() << 1] {\n+    Default::default()\n+}\n+\n+// @has foo/type.Faz.html '//pre[@class=\"rust typedef\"]' \\\n+//      'type Faz<const N: usize> = [u8; N];'\n+pub type Faz<const N: usize> = [u8; N];\n+// @has foo/type.Fiz.html '//pre[@class=\"rust typedef\"]' \\\n+//      'type Fiz<const N: usize> = [[u8; N]; 48];'\n+pub type Fiz<const N: usize> = [[u8; N]; 3 << 4];\n+\n+macro_rules! define_me {\n+    ($t:tt<$q:tt>) => {\n+        pub struct $t<const $q: usize>([u8; $q]);\n+    }\n+}\n+\n+// @has foo/struct.Foz.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Foz<const N: usize>(_);'\n+define_me!(Foz<N>);\n+\n+trait Q {\n+    const ASSOC: usize;\n+}\n+\n+impl<const N: usize> Q for [u8; N] {\n+    const ASSOC: usize = N;\n+}\n+\n+// @has foo/fn.q_user.html '//pre[@class=\"rust fn\"]' \\\n+//      'pub fn q_user() -> [u8; 13]'\n+pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {\n+    [0; <[u8; 13] as Q>::ASSOC]\n+}\n+\n+// @has foo/union.Union.html '//pre[@class=\"rust union\"]' \\\n+//      'pub union Union<const N: usize>'\n+pub union Union<const N: usize> {\n+    // @has - //pre \"pub arr: [u8; N]\"\n+    pub arr: [u8; N],\n+    // @has - //pre \"pub another_arr: [(); N]\"\n+    pub another_arr: [(); N],\n+}\n+\n+// @has foo/enum.Enum.html '//pre[@class=\"rust enum\"]' \\\n+//      'pub enum Enum<const N: usize>'\n+pub enum Enum<const N: usize> {\n+    // @has - //pre \"Variant([u8; N])\"\n+    Variant([u8; N]),\n+    // @has - //pre \"EmptyVariant\"\n+    EmptyVariant,\n+}"}]}