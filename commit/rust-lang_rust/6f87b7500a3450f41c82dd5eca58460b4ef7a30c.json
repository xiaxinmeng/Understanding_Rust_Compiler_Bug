{"sha": "6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "node_id": "C_kwDOAAsO6NoAKDZmODdiNzUwMGEzNDUwZjQxYzgyZGQ1ZWNhNTg0NjBiNGVmN2EzMGM", "commit": {"author": {"name": "topjohnwu", "email": "topjohnwu@google.com", "date": "2022-08-03T08:54:24Z"}, "committer": {"name": "topjohnwu", "email": "topjohnwu@google.com", "date": "2022-08-03T08:54:24Z"}, "message": "Set llvm configs when building lld", "tree": {"sha": "619395e296a17b328c2c8ae1c0575ddfd48bdc57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/619395e296a17b328c2c8ae1c0575ddfd48bdc57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "html_url": "https://github.com/rust-lang/rust/commit/6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f87b7500a3450f41c82dd5eca58460b4ef7a30c/comments", "author": {"login": "topjohnwu", "id": 7337301, "node_id": "MDQ6VXNlcjczMzczMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/7337301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topjohnwu", "html_url": "https://github.com/topjohnwu", "followers_url": "https://api.github.com/users/topjohnwu/followers", "following_url": "https://api.github.com/users/topjohnwu/following{/other_user}", "gists_url": "https://api.github.com/users/topjohnwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/topjohnwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topjohnwu/subscriptions", "organizations_url": "https://api.github.com/users/topjohnwu/orgs", "repos_url": "https://api.github.com/users/topjohnwu/repos", "events_url": "https://api.github.com/users/topjohnwu/events{/privacy}", "received_events_url": "https://api.github.com/users/topjohnwu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topjohnwu", "id": 7337301, "node_id": "MDQ6VXNlcjczMzczMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/7337301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topjohnwu", "html_url": "https://github.com/topjohnwu", "followers_url": "https://api.github.com/users/topjohnwu/followers", "following_url": "https://api.github.com/users/topjohnwu/following{/other_user}", "gists_url": "https://api.github.com/users/topjohnwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/topjohnwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topjohnwu/subscriptions", "organizations_url": "https://api.github.com/users/topjohnwu/orgs", "repos_url": "https://api.github.com/users/topjohnwu/repos", "events_url": "https://api.github.com/users/topjohnwu/events{/privacy}", "received_events_url": "https://api.github.com/users/topjohnwu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4493a0f4724c0bae1436242d76cccc9c0a287b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "html_url": "https://github.com/rust-lang/rust/commit/4493a0f4724c0bae1436242d76cccc9c0a287b80"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "4d548dbb6387530d98c3bab7a0385f1f9fbed237", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f87b7500a3450f41c82dd5eca58460b4ef7a30c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f87b7500a3450f41c82dd5eca58460b4ef7a30c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=6f87b7500a3450f41c82dd5eca58460b4ef7a30c", "patch": "@@ -345,13 +345,6 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"OFF\");\n         }\n \n-        if builder.config.llvm_thin_lto {\n-            cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\");\n-            if !target.contains(\"apple\") {\n-                cfg.define(\"LLVM_ENABLE_LLD\", \"ON\");\n-            }\n-        }\n-\n         // This setting makes the LLVM tools link to the dynamic LLVM library,\n         // which saves both memory during parallel links and overall disk space\n         // for the tools. We don't do this on every platform as it doesn't work\n@@ -463,15 +456,8 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n \n-        if let Some(ref linker) = builder.config.llvm_use_linker {\n-            cfg.define(\"LLVM_USE_LINKER\", linker);\n-        }\n-\n-        if builder.config.llvm_allow_old_toolchain {\n-            cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n-        }\n-\n         configure_cmake(builder, target, &mut cfg, true, ldflags);\n+        configure_llvm(builder, target, &mut cfg);\n \n         for (key, val) in &builder.config.llvm_build_config {\n             cfg.define(key, val);\n@@ -731,6 +717,25 @@ fn configure_cmake(\n     }\n }\n \n+fn configure_llvm(builder: &Builder<'_>, target: TargetSelection, cfg: &mut cmake::Config) {\n+    // ThinLTO is only available when building with LLVM, enabling LLD is required.\n+    // Apple's linker ld64 supports ThinLTO out of the box though, so don't use LLD on Darwin.\n+    if builder.config.llvm_thin_lto {\n+        cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\");\n+        if !target.contains(\"apple\") {\n+            cfg.define(\"LLVM_ENABLE_LLD\", \"ON\");\n+        }\n+    }\n+\n+    if let Some(ref linker) = builder.config.llvm_use_linker {\n+        cfg.define(\"LLVM_USE_LINKER\", linker);\n+    }\n+\n+    if builder.config.llvm_allow_old_toolchain {\n+        cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n+    }\n+}\n+\n // Adapted from https://github.com/alexcrichton/cc-rs/blob/fba7feded71ee4f63cfe885673ead6d7b4f2f454/src/lib.rs#L2347-L2365\n fn get_var(var_base: &str, host: &str, target: &str) -> Option<OsString> {\n     let kind = if host == target { \"HOST\" } else { \"TARGET\" };\n@@ -794,6 +799,7 @@ impl Step for Lld {\n         }\n \n         configure_cmake(builder, target, &mut cfg, true, ldflags);\n+        configure_llvm(builder, target, &mut cfg);\n \n         // This is an awful, awful hack. Discovered when we migrated to using\n         // clang-cl to compile LLVM/LLD it turns out that LLD, when built out of\n@@ -825,10 +831,6 @@ impl Step for Lld {\n             .define(\"LLVM_CONFIG_PATH\", llvm_config_shim)\n             .define(\"LLVM_INCLUDE_TESTS\", \"OFF\");\n \n-        if builder.config.llvm_allow_old_toolchain {\n-            cfg.define(\"LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN\", \"YES\");\n-        }\n-\n         // While we're using this horrible workaround to shim the execution of\n         // llvm-config, let's just pile on more. I can't seem to figure out how\n         // to build LLD as a standalone project and also cross-compile it at the"}]}