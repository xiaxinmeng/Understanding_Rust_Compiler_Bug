{"sha": "c2e3aa37daedf698072b4aadbc420f24505b2b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTNhYTM3ZGFlZGY2OTgwNzJiNGFhZGJjNDIwZjI0NTA1YjJiMmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-29T02:53:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-01T04:59:50Z"}, "message": "rustdoc: Create anchor pages for primitive types\n\nThis commit adds support in rustdoc to recognize the `#[doc(primitive = \"foo\")]`\nattribute. This attribute indicates that the current module is the \"owner\" of\nthe primitive type `foo`. For rustdoc, this means that the doc-comment for the\nmodule is the doc-comment for the primitive type, plus a signal to all\ndownstream crates that hyperlinks for primitive types will be directed at the\ncrate containing the `#[doc]` directive.\n\nAdditionally, rustdoc will favor crates closest to the one being documented\nwhich \"implements the primitive type\". For example, documentation of libcore\nlinks to libcore for primitive types, but documentation for libstd and beyond\nall links to libstd for primitive types.\n\nThis change involves no compiler modifications, it is purely a rustdoc change.\nThe landing pages for the primitive types primarily serve to show a list of\nimplemented traits for the primitive type itself.\n\nThe primitive types documented includes both strings and slices in a semi-ad-hoc\nway, but in a way that should provide at least somewhat meaningful\ndocumentation.\n\nCloses #14474", "tree": {"sha": "2821fa90613a5e130e2074de7be74740ed541bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2821fa90613a5e130e2074de7be74740ed541bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e3aa37daedf698072b4aadbc420f24505b2b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e3aa37daedf698072b4aadbc420f24505b2b2d", "html_url": "https://github.com/rust-lang/rust/commit/c2e3aa37daedf698072b4aadbc420f24505b2b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e3aa37daedf698072b4aadbc420f24505b2b2d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "html_url": "https://github.com/rust-lang/rust/commit/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86"}], "stats": {"total": 530, "additions": 443, "deletions": 87}, "files": [{"sha": "146f29dd9f1da64716a765223002069ce0dfd2e2", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -12,6 +12,8 @@\n //!\n //! A `to_bit` conversion function.\n \n+#![doc(primitive = \"bool\")]\n+\n use num::{Int, one, zero};\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "76ff56a77a48d67a4bee6b92d23b149da8601158", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -24,6 +24,7 @@\n //! and, as such, should be performed via the `from_u32` function..\n \n #![allow(non_snake_case_functions)]\n+#![doc(primitive = \"char\")]\n \n use mem::transmute;\n use option::{None, Option, Some};"}, {"sha": "cadc874891d2042109c0316e3db1a65439a1941f", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n+#![doc(primitive = \"f32\")]\n+\n use intrinsics;\n use mem;\n use num::{FPNormal, FPCategory, FPZero, FPSubnormal, FPInfinite, FPNaN};"}, {"sha": "5e19015dd02819209f3d69f1f932dc6cc932e582", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for 64-bits floats (`f64` type)\n \n+#![doc(primitive = \"f64\")]\n+\n use intrinsics;\n use mem;\n use num::{FPNormal, FPCategory, FPZero, FPSubnormal, FPInfinite, FPNaN};"}, {"sha": "b821ff60a730e13b98b1e617c79547ad10cd2330", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n+#![doc(primitive = \"i16\")]\n+\n int_module!(i16, 16)\n "}, {"sha": "a8cab1f95b0afc47d941947fbe604023ce50e240", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n+#![doc(primitive = \"i32\")]\n+\n int_module!(i32, 32)\n "}, {"sha": "6009b953bb4dbb3de25dc6676ff42a57aaf8b982", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n+#![doc(primitive = \"i64\")]\n+\n int_module!(i64, 64)\n "}, {"sha": "b3a5557b20c7fd42a0a553e83bcdaee29087011a", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n+#![doc(primitive = \"i8\")]\n+\n int_module!(i8, 8)\n "}, {"sha": "06d64e73abd49ec76b8c8b2b22c09cc48024c8f6", "filename": "src/libcore/num/int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n+#![doc(primitive = \"int\")]\n+\n #[cfg(target_word_size = \"32\")] int_module!(int, 32)\n #[cfg(target_word_size = \"64\")] int_module!(int, 64)\n "}, {"sha": "eb4bd427d51666507183b8cb2201af809d940c1d", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,4 +10,6 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n+#![doc(primitive = \"u16\")]\n+\n uint_module!(u16, i16, 16)"}, {"sha": "9522b2e86ac639db8e24c40c0fe926bb54f6d99e", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n+#![doc(primitive = \"u32\")]\n+\n uint_module!(u32, i32, 32)\n "}, {"sha": "7a654f4bffa0d76cd13161684a7bd2e0719e03df", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n+#![doc(primitive = \"u64\")]\n+\n uint_module!(u64, i64, 64)\n "}, {"sha": "6a42ce07e5d18c7ca8586c93891f9e25cf7fb628", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n+#![doc(primitive = \"u8\")]\n+\n uint_module!(u8, i8, 8)\n "}, {"sha": "2f539fff61ae6417a8d0a8e26b083f152ed5fe42", "filename": "src/libcore/num/uint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,5 +10,7 @@\n \n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n+#![doc(primitive = \"uint\")]\n+\n uint_module!(uint, int, ::int::BITS)\n "}, {"sha": "8f885dafffa46f09fa89f619976f129d723e59ae", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -12,6 +12,8 @@\n //!\n //! For more details `std::slice`.\n \n+#![doc(primitive = \"slice\")]\n+\n use mem::transmute;\n use clone::Clone;\n use container::Container;"}, {"sha": "21dbaf705973f2006a1b83f7224f8e0878e3b55e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -12,6 +12,8 @@\n //!\n //! For more details, see std::str\n \n+#![doc(primitive = \"str\")]\n+\n use mem;\n use char;\n use clone::Clone;"}, {"sha": "f9a14b1de506fe2ab2ea6f3ee0b6c25851c38e09", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -59,6 +59,8 @@\n //! assert_eq!(d, (0u32, 0.0f32));\n //! ```\n \n+#![doc(primitive = \"tuple\")]\n+\n use clone::Clone;\n #[cfg(not(test))] use cmp::*;\n #[cfg(not(test))] use default::Default;"}, {"sha": "18cf928f04ce593b829649f0f6e22421a1a93f1f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 203, "deletions": 23, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -28,6 +28,7 @@ use rustc::metadata::decoder;\n use rustc::middle::ty;\n \n use std::rc::Rc;\n+use std::u32;\n \n use core;\n use doctree;\n@@ -81,6 +82,7 @@ pub struct Crate {\n     pub name: String,\n     pub module: Option<Item>,\n     pub externs: Vec<(ast::CrateNum, ExternalCrate)>,\n+    pub primitives: Vec<Primitive>,\n }\n \n impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n@@ -92,6 +94,7 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n             externs.push((n, meta.clean()));\n         });\n \n+        // Figure out the name of this crate\n         let input = driver::FileInput(cx.src.clone());\n         let t_outputs = driver::build_output_filenames(&input,\n                                                        &None,\n@@ -100,10 +103,47 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n                                                        cx.sess());\n         let id = link::find_crate_id(self.attrs.as_slice(),\n                                      t_outputs.out_filestem.as_slice());\n+\n+        // Clean the module, translating the entire libsyntax AST to one that is\n+        // understood by rustdoc.\n+        let mut module = self.module.clean();\n+\n+        // Collect all inner modules which are tagged as implementations of\n+        // primitives.\n+        let mut primitives = Vec::new();\n+        {\n+            let m = match module.inner {\n+                ModuleItem(ref mut m) => m,\n+                _ => unreachable!(),\n+            };\n+            let mut tmp = Vec::new();\n+            for child in m.items.iter() {\n+                match child.inner {\n+                    ModuleItem(..) => {},\n+                    _ => continue,\n+                }\n+                let prim = match Primitive::find(child.attrs.as_slice()) {\n+                    Some(prim) => prim,\n+                    None => continue,\n+                };\n+                primitives.push(prim);\n+                tmp.push(Item {\n+                    source: Span::empty(),\n+                    name: Some(prim.to_url_str().to_string()),\n+                    attrs: child.attrs.clone(),\n+                    visibility: Some(ast::Public),\n+                    def_id: ast_util::local_def(prim.to_node_id()),\n+                    inner: PrimitiveItem(prim),\n+                });\n+            }\n+            m.items.extend(tmp.move_iter());\n+        }\n+\n         Crate {\n             name: id.name.to_string(),\n-            module: Some(self.module.clean()),\n+            module: Some(module),\n             externs: externs,\n+            primitives: primitives,\n         }\n     }\n }\n@@ -112,15 +152,35 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n pub struct ExternalCrate {\n     pub name: String,\n     pub attrs: Vec<Attribute>,\n+    pub primitives: Vec<Primitive>,\n }\n \n impl Clean<ExternalCrate> for cstore::crate_metadata {\n     fn clean(&self) -> ExternalCrate {\n+        let mut primitives = Vec::new();\n+        let cx = super::ctxtkey.get().unwrap();\n+        match cx.maybe_typed {\n+            core::Typed(ref tcx) => {\n+                csearch::each_top_level_item_of_crate(&tcx.sess.cstore,\n+                                                      self.cnum,\n+                                                      |def, _, _| {\n+                    let did = match def {\n+                        decoder::DlDef(ast::DefMod(did)) => did,\n+                        _ => return\n+                    };\n+                    let attrs = inline::load_attrs(tcx, did);\n+                    match Primitive::find(attrs.as_slice()) {\n+                        Some(prim) => primitives.push(prim),\n+                        None => {}\n+                    }\n+                });\n+            }\n+            core::NotTyped(..) => {}\n+        }\n         ExternalCrate {\n             name: self.name.to_string(),\n-            attrs: decoder::get_crate_attributes(self.data()).clean()\n-                                                             .move_iter()\n-                                                             .collect(),\n+            attrs: decoder::get_crate_attributes(self.data()).clean(),\n+            primitives: primitives,\n         }\n     }\n }\n@@ -227,6 +287,7 @@ pub enum ItemEnum {\n     /// `static`s from an extern block\n     ForeignStaticItem(Static),\n     MacroItem(Macro),\n+    PrimitiveItem(Primitive),\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n@@ -931,18 +992,14 @@ pub enum Type {\n     /// For references to self\n     Self(ast::DefId),\n     /// Primitives are just the fixed-size numeric types (plus int/uint/float), and char.\n-    Primitive(ast::PrimTy),\n+    Primitive(Primitive),\n     Closure(Box<ClosureDecl>, Option<Lifetime>),\n     Proc(Box<ClosureDecl>),\n     /// extern \"ABI\" fn\n     BareFunction(Box<BareFunctionDecl>),\n     Tuple(Vec<Type>),\n     Vector(Box<Type>),\n     FixedVector(Box<Type>, String),\n-    String,\n-    Bool,\n-    /// aka TyNil\n-    Unit,\n     /// aka TyBot\n     Bottom,\n     Unique(Box<Type>),\n@@ -956,6 +1013,19 @@ pub enum Type {\n     // region, raw, other boxes, mutable\n }\n \n+#[deriving(Clone, Encodable, Decodable, Eq, TotalEq, Hash)]\n+pub enum Primitive {\n+    Int, I8, I16, I32, I64,\n+    Uint, U8, U16, U32, U64,\n+    F32, F64, F128,\n+    Char,\n+    Bool,\n+    Nil,\n+    Str,\n+    Slice,\n+    PrimitiveTuple,\n+}\n+\n #[deriving(Clone, Encodable, Decodable)]\n pub enum TypeKind {\n     TypeEnum,\n@@ -967,11 +1037,97 @@ pub enum TypeKind {\n     TypeVariant,\n }\n \n+impl Primitive {\n+    fn from_str(s: &str) -> Option<Primitive> {\n+        match s.as_slice() {\n+            \"int\" => Some(Int),\n+            \"i8\" => Some(I8),\n+            \"i16\" => Some(I16),\n+            \"i32\" => Some(I32),\n+            \"i64\" => Some(I64),\n+            \"uint\" => Some(Uint),\n+            \"u8\" => Some(U8),\n+            \"u16\" => Some(U16),\n+            \"u32\" => Some(U32),\n+            \"u64\" => Some(U64),\n+            \"bool\" => Some(Bool),\n+            \"nil\" => Some(Nil),\n+            \"char\" => Some(Char),\n+            \"str\" => Some(Str),\n+            \"f32\" => Some(F32),\n+            \"f64\" => Some(F64),\n+            \"f128\" => Some(F128),\n+            \"slice\" => Some(Slice),\n+            \"tuple\" => Some(PrimitiveTuple),\n+            _ => None,\n+        }\n+    }\n+\n+    fn find(attrs: &[Attribute]) -> Option<Primitive> {\n+        for attr in attrs.iter() {\n+            let list = match *attr {\n+                List(ref k, ref l) if k.as_slice() == \"doc\" => l,\n+                _ => continue,\n+            };\n+            for sub_attr in list.iter() {\n+                let value = match *sub_attr {\n+                    NameValue(ref k, ref v)\n+                        if k.as_slice() == \"primitive\" => v.as_slice(),\n+                    _ => continue,\n+                };\n+                match Primitive::from_str(value) {\n+                    Some(p) => return Some(p),\n+                    None => {}\n+                }\n+            }\n+        }\n+        return None\n+    }\n+\n+    pub fn to_str(&self) -> &'static str {\n+        match *self {\n+            Int => \"int\",\n+            I8 => \"i8\",\n+            I16 => \"i16\",\n+            I32 => \"i32\",\n+            I64 => \"i64\",\n+            Uint => \"uint\",\n+            U8 => \"u8\",\n+            U16 => \"u16\",\n+            U32 => \"u32\",\n+            U64 => \"u64\",\n+            F32 => \"f32\",\n+            F64 => \"f64\",\n+            F128 => \"f128\",\n+            Str => \"str\",\n+            Bool => \"bool\",\n+            Char => \"char\",\n+            Nil => \"()\",\n+            Slice => \"slice\",\n+            PrimitiveTuple => \"tuple\",\n+        }\n+    }\n+\n+    pub fn to_url_str(&self) -> &'static str {\n+        match *self {\n+            Nil => \"nil\",\n+            other => other.to_str(),\n+        }\n+    }\n+\n+    /// Creates a rustdoc-specific node id for primitive types.\n+    ///\n+    /// These node ids are generally never used by the AST itself.\n+    pub fn to_node_id(&self) -> ast::NodeId {\n+        u32::MAX - 1 - (*self as u32)\n+    }\n+}\n+\n impl Clean<Type> for ast::Ty {\n     fn clean(&self) -> Type {\n         use syntax::ast::*;\n         match self.node {\n-            TyNil => Unit,\n+            TyNil => Primitive(Nil),\n             TyPtr(ref m) => RawPointer(m.mutbl.clean(), box m.ty.clean()),\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(), mutability: m.mutbl.clean(),\n@@ -999,16 +1155,26 @@ impl Clean<Type> for ast::Ty {\n impl Clean<Type> for ty::t {\n     fn clean(&self) -> Type {\n         match ty::get(*self).sty {\n-            ty::ty_nil => Unit,\n             ty::ty_bot => Bottom,\n-            ty::ty_bool => Bool,\n-            ty::ty_char => Primitive(ast::TyChar),\n-            ty::ty_int(t) => Primitive(ast::TyInt(t)),\n-            ty::ty_uint(u) => Primitive(ast::TyUint(u)),\n-            ty::ty_float(f) => Primitive(ast::TyFloat(f)),\n+            ty::ty_nil => Primitive(Nil),\n+            ty::ty_bool => Primitive(Bool),\n+            ty::ty_char => Primitive(Char),\n+            ty::ty_int(ast::TyI) => Primitive(Int),\n+            ty::ty_int(ast::TyI8) => Primitive(I8),\n+            ty::ty_int(ast::TyI16) => Primitive(I16),\n+            ty::ty_int(ast::TyI32) => Primitive(I32),\n+            ty::ty_int(ast::TyI64) => Primitive(I64),\n+            ty::ty_uint(ast::TyU) => Primitive(Uint),\n+            ty::ty_uint(ast::TyU8) => Primitive(U8),\n+            ty::ty_uint(ast::TyU16) => Primitive(U16),\n+            ty::ty_uint(ast::TyU32) => Primitive(U32),\n+            ty::ty_uint(ast::TyU64) => Primitive(U64),\n+            ty::ty_float(ast::TyF32) => Primitive(F32),\n+            ty::ty_float(ast::TyF64) => Primitive(F64),\n+            ty::ty_float(ast::TyF128) => Primitive(F128),\n+            ty::ty_str => Primitive(Str),\n             ty::ty_box(t) => Managed(box t.clean()),\n             ty::ty_uniq(t) => Unique(box t.clean()),\n-            ty::ty_str => String,\n             ty::ty_vec(mt, None) => Vector(box mt.ty.clean()),\n             ty::ty_vec(mt, Some(i)) => FixedVector(box mt.ty.clean(),\n                                                    format!(\"{}\", i)),\n@@ -1056,11 +1222,12 @@ impl Clean<Type> for ty::t {\n                     ty::ty_trait(..) => TypeTrait,\n                     _ => TypeEnum,\n                 };\n+                let path = external_path(fqn.last().unwrap().to_str().as_slice(),\n+                                         substs);\n                 cx.external_paths.borrow_mut().get_mut_ref().insert(did,\n                                                                     (fqn, kind));\n                 ResolvedPath {\n-                    path: external_path(fqn.last().unwrap().to_str().as_slice(),\n-                                        substs),\n+                    path: path,\n                     typarams: None,\n                     did: did,\n                 }\n@@ -1748,7 +1915,7 @@ fn resolve_type(path: Path, tpbs: Option<Vec<TyParamBound>>,\n     let tycx = match cx.maybe_typed {\n         core::Typed(ref tycx) => tycx,\n         // If we're extracting tests, this return value doesn't matter.\n-        core::NotTyped(_) => return Bool\n+        core::NotTyped(_) => return Primitive(Bool),\n     };\n     debug!(\"searching for {:?} in defmap\", id);\n     let def = match tycx.def_map.borrow().find(&id) {\n@@ -1759,9 +1926,22 @@ fn resolve_type(path: Path, tpbs: Option<Vec<TyParamBound>>,\n     match def {\n         ast::DefSelfTy(i) => return Self(ast_util::local_def(i)),\n         ast::DefPrimTy(p) => match p {\n-            ast::TyStr => return String,\n-            ast::TyBool => return Bool,\n-            _ => return Primitive(p)\n+            ast::TyStr => return Primitive(Str),\n+            ast::TyBool => return Primitive(Bool),\n+            ast::TyChar => return Primitive(Char),\n+            ast::TyInt(ast::TyI) => return Primitive(Int),\n+            ast::TyInt(ast::TyI8) => return Primitive(I8),\n+            ast::TyInt(ast::TyI16) => return Primitive(I16),\n+            ast::TyInt(ast::TyI32) => return Primitive(I32),\n+            ast::TyInt(ast::TyI64) => return Primitive(I64),\n+            ast::TyUint(ast::TyU) => return Primitive(Uint),\n+            ast::TyUint(ast::TyU8) => return Primitive(U8),\n+            ast::TyUint(ast::TyU16) => return Primitive(U16),\n+            ast::TyUint(ast::TyU32) => return Primitive(U32),\n+            ast::TyUint(ast::TyU64) => return Primitive(U64),\n+            ast::TyFloat(ast::TyF32) => return Primitive(F32),\n+            ast::TyFloat(ast::TyF64) => return Primitive(F64),\n+            ast::TyFloat(ast::TyF128) => return Primitive(F128),\n         },\n         ast::DefTyParam(i, _) => return Generic(i),\n         ast::DefTyParamBinder(i) => return TyParamBinder(i),"}, {"sha": "50f25a0f8f1b9ddbcbfe8eda8864fdc9820aad58", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -263,6 +263,47 @@ fn path(w: &mut fmt::Formatter, path: &clean::Path, print_all: bool,\n     Ok(())\n }\n \n+fn primitive_link(f: &mut fmt::Formatter,\n+                  prim: clean::Primitive,\n+                  name: &str) -> fmt::Result {\n+    let m = cache_key.get().unwrap();\n+    let mut needs_termination = false;\n+    match m.primitive_locations.find(&prim) {\n+        Some(&ast::LOCAL_CRATE) => {\n+            let loc = current_location_key.get().unwrap();\n+            let len = if loc.len() == 0 {0} else {loc.len() - 1};\n+            try!(write!(f, \"<a href='{}primitive.{}.html'>\",\n+                        \"../\".repeat(len),\n+                        prim.to_url_str()));\n+            needs_termination = true;\n+        }\n+        Some(&cnum) => {\n+            let loc = match *m.extern_locations.get(&cnum) {\n+                render::Remote(ref s) => Some(s.to_string()),\n+                render::Local => {\n+                    let loc = current_location_key.get().unwrap();\n+                    Some((\"../\".repeat(loc.len())).to_string())\n+                }\n+                render::Unknown => None,\n+            };\n+            match loc {\n+                Some(s) => {\n+                    try!(write!(f, \"<a href='{}/primitive.{}.html'>\",\n+                                s, prim.to_url_str()));\n+                    needs_termination = true;\n+                }\n+                None => {}\n+            }\n+        }\n+        None => {}\n+    }\n+    try!(write!(f, \"{}\", name));\n+    if needs_termination {\n+        try!(write!(f, \"</a>\"));\n+    }\n+    Ok(())\n+}\n+\n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter,\n             typarams: &Option<Vec<clean::TyParamBound> >) -> fmt::Result {\n@@ -297,27 +338,7 @@ impl fmt::Show for clean::Type {\n                 tybounds(f, typarams)\n             }\n             clean::Self(..) => f.write(\"Self\".as_bytes()),\n-            clean::Primitive(prim) => {\n-                let s = match prim {\n-                    ast::TyInt(ast::TyI) => \"int\",\n-                    ast::TyInt(ast::TyI8) => \"i8\",\n-                    ast::TyInt(ast::TyI16) => \"i16\",\n-                    ast::TyInt(ast::TyI32) => \"i32\",\n-                    ast::TyInt(ast::TyI64) => \"i64\",\n-                    ast::TyUint(ast::TyU) => \"uint\",\n-                    ast::TyUint(ast::TyU8) => \"u8\",\n-                    ast::TyUint(ast::TyU16) => \"u16\",\n-                    ast::TyUint(ast::TyU32) => \"u32\",\n-                    ast::TyUint(ast::TyU64) => \"u64\",\n-                    ast::TyFloat(ast::TyF32) => \"f32\",\n-                    ast::TyFloat(ast::TyF64) => \"f64\",\n-                    ast::TyFloat(ast::TyF128) => \"f128\",\n-                    ast::TyStr => \"str\",\n-                    ast::TyBool => \"bool\",\n-                    ast::TyChar => \"char\",\n-                };\n-                f.write(s.as_bytes())\n-            }\n+            clean::Primitive(prim) => primitive_link(f, prim, prim.to_str()),\n             clean::Closure(ref decl, ref region) => {\n                 write!(f, \"{style}{lifetimes}|{args}|{bounds}\\\n                            {arrow, select, yes{ -&gt; {ret}} other{}}\",\n@@ -329,7 +350,7 @@ impl fmt::Show for clean::Type {\n                        },\n                        args = decl.decl.inputs,\n                        arrow = match decl.decl.output {\n-                           clean::Unit => \"no\",\n+                           clean::Primitive(clean::Nil) => \"no\",\n                            _ => \"yes\",\n                        },\n                        ret = decl.decl.output,\n@@ -379,7 +400,10 @@ impl fmt::Show for clean::Type {\n                                \": {}\",\n                                m.collect::<Vec<String>>().connect(\" + \"))\n                        },\n-                       arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n+                       arrow = match decl.decl.output {\n+                           clean::Primitive(clean::Nil) => \"no\",\n+                           _ => \"yes\",\n+                       },\n                        ret = decl.decl.output)\n             }\n             clean::BareFunction(ref decl) => {\n@@ -403,13 +427,13 @@ impl fmt::Show for clean::Type {\n                 }\n                 f.write(\")\".as_bytes())\n             }\n-            clean::Vector(ref t) => write!(f, \"[{}]\", **t),\n+            clean::Vector(ref t) => {\n+                primitive_link(f, clean::Slice, format!(\"[{}]\", **t).as_slice())\n+            }\n             clean::FixedVector(ref t, ref s) => {\n-                write!(f, \"[{}, ..{}]\", **t, *s)\n+                primitive_link(f, clean::Slice,\n+                               format!(\"[{}, ..{}]\", **t, *s).as_slice())\n             }\n-            clean::String => f.write(\"str\".as_bytes()),\n-            clean::Bool => f.write(\"bool\".as_bytes()),\n-            clean::Unit => f.write(\"()\".as_bytes()),\n             clean::Bottom => f.write(\"!\".as_bytes()),\n             clean::Unique(ref t) => write!(f, \"~{}\", **t),\n             clean::Managed(ref t) => write!(f, \"@{}\", **t),\n@@ -454,7 +478,10 @@ impl fmt::Show for clean::FnDecl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n                args = self.inputs,\n-               arrow = match self.output { clean::Unit => \"no\", _ => \"yes\" },\n+               arrow = match self.output {\n+                   clean::Primitive(clean::Nil) => \"no\",\n+                   _ => \"yes\"\n+               },\n                ret = self.output)\n     }\n }\n@@ -490,7 +517,10 @@ impl<'a> fmt::Show for Method<'a> {\n         write!(f,\n                \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n                args = args,\n-               arrow = match d.output { clean::Unit => \"no\", _ => \"yes\" },\n+               arrow = match d.output {\n+                   clean::Primitive(clean::Nil) => \"no\",\n+                   _ => \"yes\"\n+               },\n                ret = d.output)\n     }\n }"}, {"sha": "f36c81f8f8d8d507923794e9db6c9a55a5131b94", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -37,6 +37,7 @@ pub enum ItemType {\n     ForeignFunction = 13,\n     ForeignStatic   = 14,\n     Macro           = 15,\n+    Primitive       = 16,\n }\n \n impl ItemType {\n@@ -58,6 +59,7 @@ impl ItemType {\n             ForeignFunction => \"ffi\",\n             ForeignStatic   => \"ffs\",\n             Macro           => \"macro\",\n+            Primitive       => \"primitive\",\n         }\n     }\n }\n@@ -92,6 +94,7 @@ pub fn shortty(item: &clean::Item) -> ItemType {\n         clean::ForeignFunctionItem(..) => ForeignFunction,\n         clean::ForeignStaticItem(..)   => ForeignStatic,\n         clean::MacroItem(..)           => Macro,\n+        clean::PrimitiveItem(..)       => Primitive,\n     }\n }\n "}, {"sha": "d82a83cbd39079e7202b698c2f218213df6e1196", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 101, "deletions": 32, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -157,6 +157,9 @@ pub struct Cache {\n     /// Cache of where external crate documentation can be found.\n     pub extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n \n+    /// Cache of where documentation for primitives can be found.\n+    pub primitive_locations: HashMap<clean::Primitive, ast::CrateNum>,\n+\n     /// Set of definitions which have been inlined from external crates.\n     pub inlined: HashSet<ast::DefId>,\n \n@@ -281,6 +284,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n         parent_stack: Vec::new(),\n         search_index: Vec::new(),\n         extern_locations: HashMap::new(),\n+        primitive_locations: HashMap::new(),\n         privmod: false,\n         public_items: public_items,\n         orphan_methods: Vec::new(),\n@@ -297,13 +301,27 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n     cache.stack.push(krate.name.clone());\n     krate = cache.fold_crate(krate);\n \n-\n+    // Cache where all our extern crates are located\n     for &(n, ref e) in krate.externs.iter() {\n         cache.extern_locations.insert(n, extern_location(e, &cx.dst));\n         let did = ast::DefId { krate: n, node: ast::CRATE_NODE_ID };\n         cache.paths.insert(did, (vec![e.name.to_string()], item_type::Module));\n     }\n \n+    // Cache where all known primitives have their documentation located.\n+    //\n+    // Favor linking to as local extern as possible, so iterate all crates in\n+    // reverse topological order.\n+    for &(n, ref e) in krate.externs.iter().rev() {\n+        for &prim in e.primitives.iter() {\n+            cache.primitive_locations.insert(prim, n);\n+        }\n+    }\n+    for &prim in krate.primitives.iter() {\n+        cache.primitive_locations.insert(prim, ast::LOCAL_CRATE);\n+    }\n+\n+    // Build our search index\n     let index = try!(build_index(&krate, &mut cache));\n \n     // Freeze the cache now that the index has been built. Put an Arc into TLS\n@@ -854,30 +872,63 @@ impl DocFolder for Cache {\n             Some(item) => {\n                 match item {\n                     clean::Item{ attrs, inner: clean::ImplItem(i), .. } => {\n-                        match i.for_ {\n-                            clean::ResolvedPath { did, .. } => {\n+                        use clean::{Primitive, Vector, ResolvedPath, BorrowedRef};\n+                        use clean::{FixedVector, Slice, Tuple, PrimitiveTuple};\n+\n+                        // extract relevant documentation for this impl\n+                        let dox = match attrs.move_iter().find(|a| {\n+                            match *a {\n+                                clean::NameValue(ref x, _)\n+                                        if \"doc\" == x.as_slice() => {\n+                                    true\n+                                }\n+                                _ => false\n+                            }\n+                        }) {\n+                            Some(clean::NameValue(_, dox)) => Some(dox),\n+                            Some(..) | None => None,\n+                        };\n+\n+                        // Figure out the id of this impl. This may map to a\n+                        // primitive rather than always to a struct/enum.\n+                        let did = match i.for_ {\n+                            ResolvedPath { did, .. } => Some(did),\n+\n+                            // References to primitives are picked up as well to\n+                            // recognize implementations for &str, this may not\n+                            // be necessary in a DST world.\n+                            Primitive(p) |\n+                                BorrowedRef { type_: box Primitive(p), ..} =>\n+                            {\n+                                Some(ast_util::local_def(p.to_node_id()))\n+                            }\n+\n+                            // In a DST world, we may only need\n+                            // Vector/FixedVector, but for now we also pick up\n+                            // borrowed references\n+                            Vector(..) | FixedVector(..) |\n+                                BorrowedRef{ type_: box Vector(..), ..  } |\n+                                BorrowedRef{ type_: box FixedVector(..), .. } =>\n+                            {\n+                                Some(ast_util::local_def(Slice.to_node_id()))\n+                            }\n+\n+                            Tuple(..) => {\n+                                let id = PrimitiveTuple.to_node_id();\n+                                Some(ast_util::local_def(id))\n+                            }\n+\n+                            _ => None,\n+                        };\n+\n+                        match did {\n+                            Some(did) => {\n                                 let v = self.impls.find_or_insert_with(did, |_| {\n                                     Vec::new()\n                                 });\n-                                // extract relevant documentation for this impl\n-                                match attrs.move_iter().find(|a| {\n-                                    match *a {\n-                                        clean::NameValue(ref x, _)\n-                                                if \"doc\" == x.as_slice() => {\n-                                            true\n-                                        }\n-                                        _ => false\n-                                    }\n-                                }) {\n-                                    Some(clean::NameValue(_, dox)) => {\n-                                        v.push((i, Some(dox)));\n-                                    }\n-                                    Some(..) | None => {\n-                                        v.push((i, None));\n-                                    }\n-                                }\n+                                v.push((i, dox));\n                             }\n-                            _ => {}\n+                            None => {}\n                         }\n                         None\n                     }\n@@ -1119,17 +1170,21 @@ impl<'a> fmt::Show for Item<'a> {\n             clean::TraitItem(..) => try!(write!(fmt, \"Trait \")),\n             clean::StructItem(..) => try!(write!(fmt, \"Struct \")),\n             clean::EnumItem(..) => try!(write!(fmt, \"Enum \")),\n+            clean::PrimitiveItem(..) => try!(write!(fmt, \"Primitive Type \")),\n             _ => {}\n         }\n-        let cur = self.cx.current.as_slice();\n-        let amt = if self.ismodule() { cur.len() - 1 } else { cur.len() };\n-        for (i, component) in cur.iter().enumerate().take(amt) {\n-            let mut trail = String::new();\n-            for _ in range(0, cur.len() - i - 1) {\n-                trail.push_str(\"../\");\n+        let is_primitive = match self.item.inner {\n+            clean::PrimitiveItem(..) => true,\n+            _ => false,\n+        };\n+        if !is_primitive {\n+            let cur = self.cx.current.as_slice();\n+            let amt = if self.ismodule() { cur.len() - 1 } else { cur.len() };\n+            for (i, component) in cur.iter().enumerate().take(amt) {\n+                try!(write!(fmt, \"<a href='{}index.html'>{}</a>::\",\n+                            \"../\".repeat(cur.len() - i - 1),\n+                            component.as_slice()));\n             }\n-            try!(write!(fmt, \"<a href='{}index.html'>{}</a>::\",\n-                        trail, component.as_slice()));\n         }\n         try!(write!(fmt, \"<a class='{}' href=''>{}</a>\",\n                     shortty(self.item), self.item.name.get_ref().as_slice()));\n@@ -1154,7 +1209,7 @@ impl<'a> fmt::Show for Item<'a> {\n         // [src] link in the downstream documentation will actually come back to\n         // this page, and this link will be auto-clicked. The `id` attribute is\n         // used to find the link to auto-click.\n-        if self.cx.include_sources {\n+        if self.cx.include_sources && !is_primitive {\n             match self.href() {\n                 Some(l) => {\n                     try!(write!(fmt,\n@@ -1178,6 +1233,7 @@ impl<'a> fmt::Show for Item<'a> {\n             clean::EnumItem(ref e) => item_enum(fmt, self.item, e),\n             clean::TypedefItem(ref t) => item_typedef(fmt, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.item, m),\n+            clean::PrimitiveItem(ref p) => item_primitive(fmt, self.item, p),\n             _ => Ok(())\n         }\n     }\n@@ -1250,6 +1306,8 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             }\n             (&clean::ViewItemItem(..), _) => Less,\n             (_, &clean::ViewItemItem(..)) => Greater,\n+            (&clean::PrimitiveItem(..), _) => Less,\n+            (_, &clean::PrimitiveItem(..)) => Greater,\n             (&clean::ModuleItem(..), _) => Less,\n             (_, &clean::ModuleItem(..)) => Greater,\n             (&clean::MacroItem(..), _) => Less,\n@@ -1305,6 +1363,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 clean::ForeignFunctionItem(..) => (\"ffi-fns\", \"Foreign Functions\"),\n                 clean::ForeignStaticItem(..)   => (\"ffi-statics\", \"Foreign Statics\"),\n                 clean::MacroItem(..)           => (\"macros\", \"Macros\"),\n+                clean::PrimitiveItem(..)       => (\"primitives\", \"Primitive Types\"),\n             };\n             try!(write!(w,\n                         \"<h2 id='{id}' class='section-header'>\\\n@@ -1877,8 +1936,11 @@ impl<'a> fmt::Show for Sidebar<'a> {\n             try!(write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty));\n             for item in items.iter() {\n                 let curty = shortty(cur).to_static_str();\n-                let class = if cur.name.get_ref() == item &&\n-                               short == curty { \"current\" } else { \"\" };\n+                let class = if cur.name.get_ref() == item && short == curty {\n+                    \"current\"\n+                } else {\n+                    \"\"\n+                };\n                 try!(write!(w, \"<a class='{ty} {class}' href='{curty, select,\n                                 mod{../}\n                                 other{}\n@@ -1949,3 +2011,10 @@ fn item_macro(w: &mut fmt::Formatter, it: &clean::Item,\n     try!(w.write(highlight::highlight(t.source.as_slice(), Some(\"macro\")).as_bytes()));\n     document(w, it)\n }\n+\n+fn item_primitive(w: &mut fmt::Formatter,\n+                  it: &clean::Item,\n+                  _p: &clean::Primitive) -> fmt::Result {\n+    try!(document(w, it));\n+    render_methods(w, it)\n+}"}, {"sha": "6c9bc793582b66cb23921dc5e7738a60625fcd47", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -527,7 +527,8 @@\n                          \"variant\",\n                          \"ffi\",\n                          \"ffs\",\n-                         \"macro\"];\n+                         \"macro\",\n+                         \"primitive\"];\n \n         function itemTypeFromName(typename) {\n             for (var i = 0; i < itemTypes.length; ++i) {"}, {"sha": "60b2a82f007ef9367cf00cd72e732c3fd0ed94ab", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -67,11 +67,22 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 match i.inner {\n                     clean::ImplItem(clean::Impl{\n-                        for_: clean::ResolvedPath{ did, .. }, ..\n+                        for_: clean::ResolvedPath{ did, .. },\n+                        ref trait_, ..\n                     }) => {\n+                        // Impls for stripped don't need to exist\n                         if self.stripped.contains(&did.node) {\n                             return None;\n                         }\n+                        // Impls of stripped traits also don't need to exist\n+                        match *trait_ {\n+                            Some(clean::ResolvedPath { did, .. }) => {\n+                                if self.stripped.contains(&did.node) {\n+                                    return None\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n                     }\n                     _ => {}\n                 }\n@@ -161,6 +172,9 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n \n             // tymethods/macros have no control over privacy\n             clean::MacroItem(..) | clean::TyMethodItem(..) => {}\n+\n+            // Primitives are never stripped\n+            clean::PrimitiveItem(..) => {}\n         }\n \n         let fastreturn = match i.inner {"}, {"sha": "bbf1458da216e0852d5c7d11b8f3d3182265ddcd", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -12,6 +12,7 @@\n \n #![allow(missing_doc)]\n #![allow(unsigned_negate)]\n+#![doc(primitive = \"f32\")]\n \n use prelude::*;\n "}, {"sha": "cfa8534160bae9fd6d2c52c1d7a5061a009d6856", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for 64-bits floats (`f64` type)\n \n #![allow(missing_doc)]\n+#![doc(primitive = \"f64\")]\n \n use prelude::*;\n "}, {"sha": "cfa0662e2256d44421f5933c715b4c2ee1b8b572", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n+#![doc(primitive = \"i16\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "3c656b20ee524c9b6082bed645656ba2e09a4a43", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n+#![doc(primitive = \"i32\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "857f78efc9cfdb648c0ceced28412ac8017b3965", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n+#![doc(primitive = \"i64\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "a939c1d6b76294dc8d8f8c17e7631d21383a0564", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n+#![doc(primitive = \"i8\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "415d11b3145b3bdbae713bbb4a0b9c706d535c76", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n+#![doc(primitive = \"int\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "3b018414be2d415ff10b0d2aa6416c43c971d77d", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n+#![doc(primitive = \"u16\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "980129431095d626ef6681e26eb12e81004f4475", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n+#![doc(primitive = \"u32\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "b3a8bfc20df15f5b762ecf7f8831fbbaf89a8fe6", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n+#![doc(primitive = \"u64\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "d72049d253302cc39dcaa14e4001196ed489cf73", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n+#![doc(primitive = \"u8\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "1f43ad8af3398d7bc7a92951156362d3d14f0584", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -10,6 +10,8 @@\n \n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n+#![doc(primitive = \"uint\")]\n+\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;"}, {"sha": "430629a1f88f1709ebbfa3c87f05772e30f8e397", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -97,6 +97,8 @@ There are a number of free functions that create or take vectors, for example:\n \n */\n \n+#![doc(primitive = \"slice\")]\n+\n use mem::transmute;\n use clone::Clone;\n use cmp::{TotalOrd, Ordering, Less, Greater};"}, {"sha": "11b9d0e85ff255ee5966fe9f2fe8812737d7fceb", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e3aa37daedf698072b4aadbc420f24505b2b2d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=c2e3aa37daedf698072b4aadbc420f24505b2b2d", "patch": "@@ -65,6 +65,8 @@ is the same as `&[u8]`.\n \n */\n \n+#![doc(primitive = \"str\")]\n+\n use char::Char;\n use char;\n use clone::Clone;"}]}