{"sha": "2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTgyYjc4YTVmOWMxZmE5MDhmZTVmNGM5ZmY0YWIyOTY2YWRiMmU=", "commit": {"author": {"name": "IceSentry", "email": "c.giguere42@gmail.com", "date": "2020-04-08T21:48:16Z"}, "committer": {"name": "IceSentry", "email": "c.giguere42@gmail.com", "date": "2020-04-08T21:48:16Z"}, "message": "Add more heuristics for hiding obvious param hints\n\nThis will now hide \"value\", \"pat\", \"rhs\" and \"other\"\nThese words were selected from the std because they are used in common functions with only a single param and are obvious by their use.\nI think it would be good to also hide \"bytes\" if the type is `[u8; n]` but I'm not sure how to get the param type signature\n\nIt will also hide the hint if the passed param starts or end with the param_name", "tree": {"sha": "dbafffe37940a2a641abc338c1a6139120717f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbafffe37940a2a641abc338c1a6139120717f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e", "html_url": "https://github.com/rust-lang/rust/commit/2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e/comments", "author": {"login": "IceSentry", "id": 8348954, "node_id": "MDQ6VXNlcjgzNDg5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8348954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IceSentry", "html_url": "https://github.com/IceSentry", "followers_url": "https://api.github.com/users/IceSentry/followers", "following_url": "https://api.github.com/users/IceSentry/following{/other_user}", "gists_url": "https://api.github.com/users/IceSentry/gists{/gist_id}", "starred_url": "https://api.github.com/users/IceSentry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IceSentry/subscriptions", "organizations_url": "https://api.github.com/users/IceSentry/orgs", "repos_url": "https://api.github.com/users/IceSentry/repos", "events_url": "https://api.github.com/users/IceSentry/events{/privacy}", "received_events_url": "https://api.github.com/users/IceSentry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IceSentry", "id": 8348954, "node_id": "MDQ6VXNlcjgzNDg5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8348954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IceSentry", "html_url": "https://github.com/IceSentry", "followers_url": "https://api.github.com/users/IceSentry/followers", "following_url": "https://api.github.com/users/IceSentry/following{/other_user}", "gists_url": "https://api.github.com/users/IceSentry/gists{/gist_id}", "starred_url": "https://api.github.com/users/IceSentry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IceSentry/subscriptions", "organizations_url": "https://api.github.com/users/IceSentry/orgs", "repos_url": "https://api.github.com/users/IceSentry/repos", "events_url": "https://api.github.com/users/IceSentry/events{/privacy}", "received_events_url": "https://api.github.com/users/IceSentry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779555c1beac90f633c01a773558c4007c99c97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/779555c1beac90f633c01a773558c4007c99c97f", "html_url": "https://github.com/rust-lang/rust/commit/779555c1beac90f633c01a773558c4007c99c97f"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "6a4fe15fd758c97cd0a5d01bead685b2534d0965", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=2a582b78a5f9c1fa908fe5f4c9ff4ab2966adb2e", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! This module defines multiple types of inlay hints and their visibility\n \n use hir::{Adt, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n@@ -236,7 +236,10 @@ fn should_show_param_hint(\n     argument: &ast::Expr,\n ) -> bool {\n     let argument_string = argument.syntax().to_string();\n-    if param_name.is_empty() || argument_string.ends_with(param_name) {\n+    if param_name.is_empty()\n+        || argument_string.ends_with(&param_name)\n+        || argument_string.starts_with(&param_name)\n+    {\n         return false;\n     }\n \n@@ -245,8 +248,15 @@ fn should_show_param_hint(\n     } else {\n         fn_signature.parameters.len()\n     };\n+\n     // avoid displaying hints for common functions like map, filter, etc.\n-    if parameters_len == 1 && (param_name.len() == 1 || param_name == \"predicate\") {\n+    // or other obvious words used in std\n+    // TODO ignore \"bytes\" if the type is [u8; n]\n+    let is_obvious_param_name = match param_name {\n+        \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\" => true,\n+        _ => false,\n+    };\n+    if parameters_len == 1 && (param_name.len() == 1 || is_obvious_param_name) {\n         return false;\n     }\n \n@@ -1059,21 +1069,37 @@ impl Test {\n         self\n     }\n \n+    fn field(self, value: i32) -> Self {\n+        self\n+    }\n+\n     fn no_hints_expected(&self, _: i32, test_var: i32) {}\n }\n \n+struct Param {}\n+\n+fn different_order(param: Param) {}\n+\n fn main() {\n     let container: TestVarContainer = TestVarContainer { test_var: 42 };\n     let test: Test = Test {};\n \n     map(22);\n     filter(33);\n \n-    let test_processed: Test = test.map(1).filter(2);\n+    let test_processed: Test = test.map(1).filter(2).field(3);\n \n     let test_var: i32 = 55;\n     test_processed.no_hints_expected(22, test_var);\n     test_processed.no_hints_expected(33, container.test_var);\n+\n+    let param_begin: Param = Param {};\n+    different_order(param_begin);\n+\n+    let a: f64 = 7.0;\n+    let b: f64 = 4.0;\n+    let _: f64 = a.div_euclid(b);\n+    let _: f64 = a.abs_sub(b);\n }\"#,\n         );\n "}]}