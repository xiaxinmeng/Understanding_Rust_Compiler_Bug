{"sha": "8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDhhYjVmNGJmNWQwMDQyMzg1MWQxOGQ1YWU4MDJjNjY2MGIxOTI=", "commit": {"author": {"name": "Lucian", "email": "lucian.buzzo@gmail.com", "date": "2018-12-06T15:31:43Z"}, "committer": {"name": "Lucian", "email": "lucian.buzzo@gmail.com", "date": "2018-12-06T15:31:43Z"}, "message": "Fix minor typos and grammar\n\nSigned-off-by: Lucian <lucian.buzzo@gmail.com>", "tree": {"sha": "d62b5480f1c341b0d9d951b686b3d262b2b41460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62b5480f1c341b0d9d951b686b3d262b2b41460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "html_url": "https://github.com/rust-lang/rust/commit/8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/comments", "author": {"login": "LucianBuzzo", "id": 15064535, "node_id": "MDQ6VXNlcjE1MDY0NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/15064535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucianBuzzo", "html_url": "https://github.com/LucianBuzzo", "followers_url": "https://api.github.com/users/LucianBuzzo/followers", "following_url": "https://api.github.com/users/LucianBuzzo/following{/other_user}", "gists_url": "https://api.github.com/users/LucianBuzzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucianBuzzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucianBuzzo/subscriptions", "organizations_url": "https://api.github.com/users/LucianBuzzo/orgs", "repos_url": "https://api.github.com/users/LucianBuzzo/repos", "events_url": "https://api.github.com/users/LucianBuzzo/events{/privacy}", "received_events_url": "https://api.github.com/users/LucianBuzzo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LucianBuzzo", "id": 15064535, "node_id": "MDQ6VXNlcjE1MDY0NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/15064535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucianBuzzo", "html_url": "https://github.com/LucianBuzzo", "followers_url": "https://api.github.com/users/LucianBuzzo/followers", "following_url": "https://api.github.com/users/LucianBuzzo/following{/other_user}", "gists_url": "https://api.github.com/users/LucianBuzzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucianBuzzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucianBuzzo/subscriptions", "organizations_url": "https://api.github.com/users/LucianBuzzo/orgs", "repos_url": "https://api.github.com/users/LucianBuzzo/repos", "events_url": "https://api.github.com/users/LucianBuzzo/events{/privacy}", "received_events_url": "https://api.github.com/users/LucianBuzzo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43206f41625b8ad670d65bcad37686b40a1c7c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/43206f41625b8ad670d65bcad37686b40a1c7c48", "html_url": "https://github.com/rust-lang/rust/commit/43206f41625b8ad670d65bcad37686b40a1c7c48"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "577d62d29ad59ed08a9f70283b71273c2c1753b7", "filename": "Configurations.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "patch": "@@ -1520,7 +1520,7 @@ mod dolor;\n mod sit;\n ```\n \n-**Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantic\n+**Note** `mod` with `#[macro_export]` will not be reordered since that could change the semantics\n of the original source code.\n \n ## `reorder_impl_items`"}, {"sha": "3daaa3dd11e2f15a158c0c823cd6cee6ab983eac", "filename": "Contributing.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "patch": "@@ -1,7 +1,7 @@\n # Contributing\n \n There are many ways to contribute to Rustfmt. This document lays out what they\n-are and has information for how to get started. If you have any questions about\n+are and has information on how to get started. If you have any questions about\n contributing or need help with anything, please ask in the WG-Rustfmt channel\n on [Discord](https://discordapp.com/invite/rust-lang). Feel free to also ask questions\n on issues, or file new issues specifically to get help.\n@@ -129,14 +129,14 @@ can.\n \n Our primary tool here is to look between spans for text we've missed. For\n example, in a function call `foo(a, b)`, we have spans for `a` and `b`, in this\n-case there is only a comma and a single space between the end of `a` and the\n+case, there is only a comma and a single space between the end of `a` and the\n start of `b`, so there is nothing much to do. But if we look at\n `foo(a /* a comment */, b)`, then between `a` and `b` we find the comment.\n \n At a higher level, Rustfmt has machinery so that we account for text between\n 'top level' items. Then we can reproduce that text pretty much verbatim. We only\n count spans we actually reformat, so if we can't format a span it is not missed\n-completely, but is reproduced in the output without being formatted. This is\n+completely but is reproduced in the output without being formatted. This is\n mostly handled in [src/missed_spans.rs](src/missed_spans.rs). See also `FmtVisitor::last_pos` in\n [src/visitor.rs](src/visitor.rs).\n \n@@ -152,7 +152,7 @@ then walk their own children.\n The `Rewrite` trait is defined in [src/rewrite.rs](src/rewrite.rs). It is implemented for many\n things that can be rewritten, mostly AST nodes. It has a single function,\n `rewrite`, which is called to rewrite `self` into an `Option<String>`. The\n-arguments are `width` which is the horizontal space we write into, and `offset`\n+arguments are `width` which is the horizontal space we write into and `offset`\n which is how much we are currently indented from the lhs of the page. We also\n take a context which contains information used for parsing, the current block\n indent, and a configuration (see below).\n@@ -199,11 +199,11 @@ space we have. Something like `available_space = budget - overhead`. Since\n widths are unsized integers, this would cause underflow. Therefore we use\n checked subtraction: `available_space = budget.checked_sub(overhead)?`.\n `checked_sub` returns an `Option`, and if we would underflow `?` returns\n-`None`, otherwise we proceed with the computed space.\n+`None`, otherwise, we proceed with the computed space.\n \n ##### Rewrite of list-like expressions\n \n-Much syntax in Rust is lists: lists of arguments, lists of fields, lists of\n+Much of the syntax in Rust is lists: lists of arguments, lists of fields, lists of\n array elements, etc. We have some generic code to handle lists, including how to\n space them in horizontal and vertical space, indentation, comments between\n items, trailing separators, etc. However, since there are so many options, the"}, {"sha": "00a7652aee0dcb10286f7ea9de0cfedfc6335e6c", "filename": "Design.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/Design.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/Design.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Design.md?ref=8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "patch": "@@ -63,15 +63,15 @@ Some details of the philosophy behind the implementation.\n ### Operate on the AST\n \n A reformatting tool can be based on either the AST or a token stream (in Rust\n-this is actually a stream of token trees, but its not a fundamental difference).\n+this is actually a stream of token trees, but it's not a fundamental difference).\n There are pros and cons to the two approaches. I have chosen to use the AST\n approach. The primary reasons are that it allows us to do more sophisticated\n manipulations, rather than just change whitespace, and it gives us more context\n when making those changes.\n \n-The advantage of the tokens approach are that you can operate on non-parsable\n+The advantage of the tokens approach is that you can operate on non-parsable\n code. I don't care too much about that, it would be nice, but I think being able\n-to perform sophisticated transformations is more important. In the future I hope to\n+to perform sophisticated transformations is more important. In the future, I hope to\n (optionally) be able to use type information for informing reformatting too. One\n specific case of unparsable code is macros. Using tokens is certainly easier\n here, but I believe it is perfectly solvable with the AST approach. At the limit,\n@@ -80,7 +80,7 @@ we can operate on just tokens in the macro case.\n I believe that there is not in fact that much difference between the two\n approaches. Due to imperfect span information, under the AST approach, we\n sometimes are reduced to examining tokens or do some re-lexing of our own. Under\n-the tokens approach you need to implement your own (much simpler) parser. I\n+the tokens approach, you need to implement your own (much simpler) parser. I\n believe that as the tool gets more sophisticated, you end up doing more at the\n token-level, or having an increasingly sophisticated parser, until at the limit\n you have the same tool.\n@@ -99,7 +99,7 @@ to good old fashioned abstraction and code sharing. This will give a bigger code\n base, but hopefully a better result.\n \n It also means that there will be some cases we can't format and we have to give\n-up. I think that is OK. Hopefully they are rare enough that manually fixing them\n+up. I think that is OK. Hopefully, they are rare enough that manually fixing them\n is not painful. Better to have a tool that gives great code in 99% of cases and\n fails in 1% than a tool which gives 50% great code and 50% ugly code, but never\n fails.\n@@ -150,9 +150,9 @@ for its configuration.\n \n Our visitor keeps track of the desired current indent due to blocks (\n `block_indent`). Each `visit_*` method reformats code according to this indent,\n-`config.comment_width()` and `config.max_width()`. Most reformatting done in the\n-`visit_*` methods is a bit hacky and is meant to be temporary until it can be\n-done properly.\n+`config.comment_width()` and `config.max_width()`. Most reformatting that is done \n+in the `visit_*` methods is a bit hacky and is meant to be temporary until it can \n+be done properly.\n \n There are a bunch of methods called `rewrite_*`. They do the bulk of the\n reformatting. These take the AST node to be reformatted (this may not literally\n@@ -163,7 +163,7 @@ code in the box given by the indent and width budget. If the method fails, it\n returns `None` and the calling method then has to fallback in some way to give\n the callee more space.\n \n-So, in summary to format a node, we calculate the width budget and then walk down\n+So, in summary, to format a node, we calculate the width budget and then walk down\n the tree from the node. At a leaf, we generate an actual string and then unwind,\n combining these strings as we go back up the tree.\n "}, {"sha": "23111e12dbb417aa97a7f79112f8284ef175b9ef", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "patch": "@@ -92,7 +92,7 @@ just need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also\n read data from stdin. Alternatively, you can use `cargo fmt` to format all\n binary and library targets of your crate.\n \n-You can run `rustfmt --help` for information about argument.\n+You can run `rustfmt --help` for information about available arguments.\n \n When running with `--check`, Rustfmt will exit with `0` if Rustfmt would not\n make any formatting changes to the input, and `1` if Rustfmt would make changes."}, {"sha": "f77ac1490721df68bd15cff8892517b24ae8aa85", "filename": "atom.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/atom.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cd8ab5f4bf5d00423851d18d5ae802c6660b192/atom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/atom.md?ref=8cd8ab5f4bf5d00423851d18d5ae802c6660b192", "patch": "@@ -13,7 +13,7 @@ Once installed a file is formatted with `ctrl-shift-c` or `cmd-shift-c`, also av\n Another way is to install [Beautify](https://atom.io/packages/atom-beautify), you\n can do this by running `apm install atom-beautify`.\n \n-There are 2 setting that need to be configured in the atom beautifier configuration.\n+There are 2 settings that need to be configured in the atom beautifier configuration.\n \n -  Install rustfmt as per the [readme](README.md).\n -  Open the atom beautifier settings"}]}