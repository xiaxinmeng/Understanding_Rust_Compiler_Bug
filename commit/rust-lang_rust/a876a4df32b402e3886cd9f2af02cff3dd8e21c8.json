{"sha": "a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "node_id": "C_kwDOAAsO6NoAKGE4NzZhNGRmMzJiNDAyZTM4ODZjZDlmMmFmMDJjZmYzZGQ4ZTIxYzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-02T04:27:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-02T04:27:48Z"}, "message": "Auto merge of #103857 - Manishearth:rollup-709fui6, r=Manishearth\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #103072 (compiletest: set the dylib path when gathering target cfg)\n - #103084 (Derive `Eq` and `Hash` for `ControlFlow`)\n - #103575 (Change #[suggestion_*] attributes to use style=\"...\")\n - #103637 (Use stdio in UWP apps)\n - #103638 (Add `multivalue` target feature to WASM target)\n - #103781 (Detect unused files in `src/test/mir-opt` and error on them in tidy.)\n - #103837 (Migrate sidebar-links-color GUI test to functions)\n - #103839 (Print valid `--print` requests if request is invalid)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c41889bbbcbce1d27875da5943665f2ad35006cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41889bbbcbce1d27875da5943665f2ad35006cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "html_url": "https://github.com/rust-lang/rust/commit/a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "html_url": "https://github.com/rust-lang/rust/commit/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f"}, {"sha": "c2affd504993072bdb7e04ade9816a5c88ce90e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2affd504993072bdb7e04ade9816a5c88ce90e5", "html_url": "https://github.com/rust-lang/rust/commit/c2affd504993072bdb7e04ade9816a5c88ce90e5"}], "stats": {"total": 1881, "additions": 848, "deletions": 1033}, "files": [{"sha": "301167e02cc5dbd70358c4d69bf1af50367183e3", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -816,6 +816,7 @@ dependencies = [\n  \"lazycell\",\n  \"libc\",\n  \"miow\",\n+ \"miropt-test-tools\",\n  \"regex\",\n  \"rustfix\",\n  \"serde\",\n@@ -2268,6 +2269,13 @@ dependencies = [\n  \"ui_test\",\n ]\n \n+[[package]]\n+name = \"miropt-test-tools\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"regex\",\n+]\n+\n [[package]]\n name = \"new_debug_unreachable\"\n version = \"1.0.4\"\n@@ -4920,6 +4928,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.14.0\",\n  \"lazy_static\",\n+ \"miropt-test-tools\",\n  \"regex\",\n  \"walkdir\",\n ]"}, {"sha": "13a98eedde86704608ea81167f78ea3e3f5cae69", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -11,6 +11,7 @@ members = [\n   \"src/tools/error_index_generator\",\n   \"src/tools/linkchecker\",\n   \"src/tools/lint-docs\",\n+  \"src/tools/miropt-test-tools\",\n   \"src/tools/rustbook\",\n   \"src/tools/unstable-book-gen\",\n   \"src/tools/tidy\","}, {"sha": "21c6a2d26f4c2e54f95ba1e0b99c6c8ac0dac71e", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -277,8 +277,9 @@ pub struct RegisterConflict<'a> {\n pub struct SubTupleBinding<'a> {\n     #[primary_span]\n     #[label]\n-    #[suggestion_verbose(\n+    #[suggestion(\n         ast_lowering_sub_tuple_binding_suggestion,\n+        style = \"verbose\",\n         code = \"..\",\n         applicability = \"maybe-incorrect\"\n     )]"}, {"sha": "fe24f85fae10a53545d1f0183f0326bb1381b632", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -49,7 +49,7 @@ pub(crate) struct GenericDoesNotLiveLongEnough {\n #[derive(LintDiagnostic)]\n #[diag(borrowck_var_does_not_need_mut)]\n pub(crate) struct VarNeedNotMut {\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"\")]\n     pub span: Span,\n }\n #[derive(Diagnostic)]"}, {"sha": "a4368303de5762eb549ab50bd5bac8989333ce58", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -267,6 +267,7 @@ const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // tidy-alphabetical-start\n     (\"atomics\", Some(sym::wasm_target_feature)),\n     (\"bulk-memory\", Some(sym::wasm_target_feature)),\n+    (\"multivalue\", Some(sym::wasm_target_feature)),\n     (\"mutable-globals\", Some(sym::wasm_target_feature)),\n     (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"reference-types\", Some(sym::wasm_target_feature)),"}, {"sha": "afbb27155a2f59f7deb2c49acf44acc590e7c376", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -120,7 +120,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(code = \"{ty}\")]\n+    #[suggestion(style = \"verbose\", code = \"{ty}\")]\n     pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n@@ -239,7 +239,11 @@ pub struct UnusedExternCrate {\n #[derive(LintDiagnostic)]\n #[diag(hir_analysis_extern_crate_not_idiomatic)]\n pub struct ExternCrateNotIdiomatic {\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"{suggestion_code}\")]\n+    #[suggestion(\n+        style = \"short\",\n+        applicability = \"machine-applicable\",\n+        code = \"{suggestion_code}\"\n+    )]\n     pub span: Span,\n     pub msg_code: String,\n     pub suggestion_code: String,"}, {"sha": "cfb408396da05e4d0e55b42ce4b7a3981559e82d", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -113,8 +113,9 @@ pub struct MissingParentheseInRange {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion_verbose(\n+#[multipart_suggestion(\n     hir_analysis_add_missing_parentheses_in_range,\n+    style = \"verbose\",\n     applicability = \"maybe-incorrect\"\n )]\n pub struct AddMissingParenthesesInRange {"}, {"sha": "bb04e1c49baea08c6492b1f1467424c09142029b", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -109,8 +109,9 @@ pub struct InferenceBadError<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum SourceKindSubdiag<'a> {\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_source_kind_subdiag_let,\n+        style = \"verbose\",\n         code = \": {type_name}\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -135,8 +136,9 @@ pub enum SourceKindSubdiag<'a> {\n         parent_prefix: String,\n         parent_name: String,\n     },\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_source_kind_subdiag_generic_suggestion,\n+        style = \"verbose\",\n         code = \"::<{args}>\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -150,8 +152,9 @@ pub enum SourceKindSubdiag<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum SourceKindMultiSuggestion<'a> {\n-    #[multipart_suggestion_verbose(\n+    #[multipart_suggestion(\n         infer_source_kind_fully_qualified,\n+        style = \"verbose\",\n         applicability = \"has-placeholders\"\n     )]\n     FullyQualified {\n@@ -163,8 +166,9 @@ pub enum SourceKindMultiSuggestion<'a> {\n         adjustment: &'a str,\n         successor_pos: &'a str,\n     },\n-    #[multipart_suggestion_verbose(\n+    #[multipart_suggestion(\n         infer_source_kind_closure_return,\n+        style = \"verbose\",\n         applicability = \"has-placeholders\"\n     )]\n     ClosureReturn {\n@@ -478,8 +482,9 @@ pub enum ImplicitStaticLifetimeSubdiag {\n         #[primary_span]\n         span: Span,\n     },\n-    #[suggestion_verbose(\n+    #[suggestion(\n         infer_implicit_static_lifetime_suggestion,\n+        style = \"verbose\",\n         code = \" + '_\",\n         applicability = \"maybe-incorrect\"\n     )]"}, {"sha": "1a769893f5520aa8771274b624907953b2004c5c", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -83,7 +83,7 @@ pub struct UnknownToolInScopedLint {\n pub struct BuiltinEllpisisInclusiveRangePatterns {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_short(code = \"{replace}\", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"short\", code = \"{replace}\", applicability = \"machine-applicable\")]\n     pub suggestion: Span,\n     pub replace: String,\n }"}, {"sha": "7443d131c64dc315c8f278059fe488e498b54a0e", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -150,8 +150,9 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_verbose(\n+#[suggestion(\n     lint_opaque_hidden_inferred_bound_sugg,\n+    style = \"verbose\",\n     applicability = \"machine-applicable\",\n     code = \" + {trait_ref}\"\n )]"}, {"sha": "78df0cd1d341ae7d05df7e783833a0e6efa5ce82", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -129,7 +129,7 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// }\n ///\n /// #[derive(Subdiagnostic)]\n-/// #[suggestion_verbose(parser::raw_identifier)]\n+/// #[suggestion(style = \"verbose\",parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n ///     span: Span,"}, {"sha": "ba06f61299f37d22a18d86fd291b21757bc60e3a", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 103, "deletions": 19, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -12,7 +12,7 @@ use syn::{spanned::Spanned, Attribute, Field, Meta, Type, TypeTuple};\n use syn::{MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, VariantInfo};\n \n-use super::error::invalid_nested_attr;\n+use super::error::{invalid_attr, invalid_nested_attr};\n \n thread_local! {\n     pub static CODE_IDENT_COUNT: RefCell<u32> = RefCell::new(0);\n@@ -472,32 +472,42 @@ pub(super) fn build_suggestion_code(\n }\n \n /// Possible styles for suggestion subdiagnostics.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n pub(super) enum SuggestionKind {\n-    /// `#[suggestion]`\n     Normal,\n-    /// `#[suggestion_short]`\n     Short,\n-    /// `#[suggestion_hidden]`\n     Hidden,\n-    /// `#[suggestion_verbose]`\n     Verbose,\n+    ToolOnly,\n }\n \n impl FromStr for SuggestionKind {\n     type Err = ();\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"\" => Ok(SuggestionKind::Normal),\n-            \"_short\" => Ok(SuggestionKind::Short),\n-            \"_hidden\" => Ok(SuggestionKind::Hidden),\n-            \"_verbose\" => Ok(SuggestionKind::Verbose),\n+            \"normal\" => Ok(SuggestionKind::Normal),\n+            \"short\" => Ok(SuggestionKind::Short),\n+            \"hidden\" => Ok(SuggestionKind::Hidden),\n+            \"verbose\" => Ok(SuggestionKind::Verbose),\n+            \"tool-only\" => Ok(SuggestionKind::ToolOnly),\n             _ => Err(()),\n         }\n     }\n }\n \n+impl fmt::Display for SuggestionKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            SuggestionKind::Normal => write!(f, \"normal\"),\n+            SuggestionKind::Short => write!(f, \"short\"),\n+            SuggestionKind::Hidden => write!(f, \"hidden\"),\n+            SuggestionKind::Verbose => write!(f, \"verbose\"),\n+            SuggestionKind::ToolOnly => write!(f, \"tool-only\"),\n+        }\n+    }\n+}\n+\n impl SuggestionKind {\n     pub fn to_suggestion_style(&self) -> TokenStream {\n         match self {\n@@ -513,6 +523,19 @@ impl SuggestionKind {\n             SuggestionKind::Verbose => {\n                 quote! { rustc_errors::SuggestionStyle::ShowAlways }\n             }\n+            SuggestionKind::ToolOnly => {\n+                quote! { rustc_errors::SuggestionStyle::CompletelyHidden }\n+            }\n+        }\n+    }\n+\n+    fn from_suffix(s: &str) -> Option<Self> {\n+        match s {\n+            \"\" => Some(SuggestionKind::Normal),\n+            \"_short\" => Some(SuggestionKind::Short),\n+            \"_hidden\" => Some(SuggestionKind::Hidden),\n+            \"_verbose\" => Some(SuggestionKind::Verbose),\n+            _ => None,\n         }\n     }\n }\n@@ -565,25 +588,49 @@ impl SubdiagnosticKind {\n         let name = name.as_str();\n \n         let meta = attr.parse_meta()?;\n+\n         let mut kind = match name {\n             \"label\" => SubdiagnosticKind::Label,\n             \"note\" => SubdiagnosticKind::Note,\n             \"help\" => SubdiagnosticKind::Help,\n             \"warning\" => SubdiagnosticKind::Warn,\n             _ => {\n+                // Recover old `#[(multipart_)suggestion_*]` syntaxes\n+                // FIXME(#100717): remove\n                 if let Some(suggestion_kind) =\n-                    name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                    name.strip_prefix(\"suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n+                    if suggestion_kind != SuggestionKind::Normal {\n+                        invalid_attr(attr, &meta)\n+                            .help(format!(\n+                                r#\"Use `#[suggestion(..., style = \"{}\")]` instead\"#,\n+                                suggestion_kind\n+                            ))\n+                            .emit();\n+                    }\n+\n                     SubdiagnosticKind::Suggestion {\n-                        suggestion_kind,\n+                        suggestion_kind: SuggestionKind::Normal,\n                         applicability: None,\n                         code_field: new_code_ident(),\n                         code_init: TokenStream::new(),\n                     }\n                 } else if let Some(suggestion_kind) =\n-                    name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n+                    name.strip_prefix(\"multipart_suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n-                    SubdiagnosticKind::MultipartSuggestion { suggestion_kind, applicability: None }\n+                    if suggestion_kind != SuggestionKind::Normal {\n+                        invalid_attr(attr, &meta)\n+                            .help(format!(\n+                                r#\"Use `#[multipart_suggestion(..., style = \"{}\")]` instead\"#,\n+                                suggestion_kind\n+                            ))\n+                            .emit();\n+                    }\n+\n+                    SubdiagnosticKind::MultipartSuggestion {\n+                        suggestion_kind: SuggestionKind::Normal,\n+                        applicability: None,\n+                    }\n                 } else {\n                     throw_invalid_attr!(attr, &meta);\n                 }\n@@ -621,6 +668,7 @@ impl SubdiagnosticKind {\n         };\n \n         let mut code = None;\n+        let mut suggestion_kind = None;\n \n         let mut nested_iter = nested.into_iter().peekable();\n \n@@ -682,16 +730,37 @@ impl SubdiagnosticKind {\n                     });\n                     applicability.set_once(value, span);\n                 }\n+                (\n+                    \"style\",\n+                    SubdiagnosticKind::Suggestion { .. }\n+                    | SubdiagnosticKind::MultipartSuggestion { .. },\n+                ) => {\n+                    let Some(value) = string_value else {\n+                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        continue;\n+                    };\n+\n+                    let value = value.value().parse().unwrap_or_else(|()| {\n+                        span_err(value.span().unwrap(), \"invalid suggestion style\")\n+                            .help(\"valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\")\n+                            .emit();\n+                        SuggestionKind::Normal\n+                    });\n+\n+                    suggestion_kind.set_once(value, span);\n+                }\n \n                 // Invalid nested attribute\n                 (_, SubdiagnosticKind::Suggestion { .. }) => {\n                     invalid_nested_attr(attr, &nested_attr)\n-                        .help(\"only `code` and `applicability` are valid nested attributes\")\n+                        .help(\n+                            \"only `style`, `code` and `applicability` are valid nested attributes\",\n+                        )\n                         .emit();\n                 }\n                 (_, SubdiagnosticKind::MultipartSuggestion { .. }) => {\n                     invalid_nested_attr(attr, &nested_attr)\n-                        .help(\"only `applicability` is a valid nested attributes\")\n+                        .help(\"only `style` and `applicability` are valid nested attributes\")\n                         .emit()\n                 }\n                 _ => {\n@@ -701,19 +770,34 @@ impl SubdiagnosticKind {\n         }\n \n         match kind {\n-            SubdiagnosticKind::Suggestion { ref code_field, ref mut code_init, .. } => {\n+            SubdiagnosticKind::Suggestion {\n+                ref code_field,\n+                ref mut code_init,\n+                suggestion_kind: ref mut kind_field,\n+                ..\n+            } => {\n+                if let Some(kind) = suggestion_kind.value() {\n+                    *kind_field = kind;\n+                }\n+\n                 *code_init = if let Some(init) = code.value() {\n                     init\n                 } else {\n                     span_err(span, \"suggestion without `code = \\\"...\\\"`\").emit();\n                     quote! { let #code_field = std::iter::empty(); }\n                 };\n             }\n+            SubdiagnosticKind::MultipartSuggestion {\n+                suggestion_kind: ref mut kind_field, ..\n+            } => {\n+                if let Some(kind) = suggestion_kind.value() {\n+                    *kind_field = kind;\n+                }\n+            }\n             SubdiagnosticKind::Label\n             | SubdiagnosticKind::Note\n             | SubdiagnosticKind::Help\n-            | SubdiagnosticKind::Warn\n-            | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n+            | SubdiagnosticKind::Warn => {}\n         }\n \n         Ok(Some((kind, slug)))"}, {"sha": "dc2049028429367100d42c6873efa35e610e0522", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -64,7 +64,7 @@ pub(crate) struct BadQPathStage2 {\n #[diag(parser_incorrect_semicolon)]\n pub(crate) struct IncorrectSemicolon<'a> {\n     #[primary_span]\n-    #[suggestion_short(code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"short\", code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n     #[help]\n     pub opt_help: Option<()>,\n@@ -136,7 +136,12 @@ pub(crate) struct InvalidComparisonOperator {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidComparisonOperatorSub {\n-    #[suggestion_short(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n+    #[suggestion(\n+        use_instead,\n+        style = \"short\",\n+        applicability = \"machine-applicable\",\n+        code = \"{correct}\"\n+    )]\n     Correctable {\n         #[primary_span]\n         span: Span,\n@@ -160,14 +165,16 @@ pub(crate) struct InvalidLogicalOperator {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidLogicalOperatorSub {\n-    #[suggestion_short(\n+    #[suggestion(\n         use_amp_amp_for_conjunction,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"&&\"\n     )]\n     Conjunction(#[primary_span] Span),\n-    #[suggestion_short(\n+    #[suggestion(\n         use_pipe_pipe_for_disjunction,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"||\"\n     )]\n@@ -178,7 +185,7 @@ pub(crate) enum InvalidLogicalOperatorSub {\n #[diag(parser_tilde_is_not_unary_operator)]\n pub(crate) struct TildeAsUnaryOperator(\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"!\")]\n     pub Span,\n );\n \n@@ -194,22 +201,25 @@ pub(crate) struct NotAsNegationOperator {\n \n #[derive(Subdiagnostic)]\n pub enum NotAsNegationOperatorSub {\n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_default,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n     SuggestNotDefault(#[primary_span] Span),\n \n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_bitwise,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n     SuggestNotBitwise(#[primary_span] Span),\n \n-    #[suggestion_short(\n+    #[suggestion(\n         parser_unexpected_token_after_not_logical,\n+        style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"!\"\n     )]\n@@ -249,7 +259,7 @@ pub(crate) struct UnexpectedTokenAfterLabel {\n     #[primary_span]\n     #[label(parser_unexpected_token_after_label)]\n     pub span: Span,\n-    #[suggestion_verbose(suggestion_remove_label, code = \"\")]\n+    #[suggestion(suggestion_remove_label, style = \"verbose\", code = \"\")]\n     pub remove_label: Option<Span>,\n     #[subdiagnostic]\n     pub enclose_in_block: Option<UnexpectedTokenAfterLabelSugg>,\n@@ -272,7 +282,7 @@ pub(crate) struct RequireColonAfterLabeledExpression {\n     pub span: Span,\n     #[label]\n     pub label: Span,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \": \")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \": \")]\n     pub label_end: Span,\n }\n \n@@ -354,7 +364,7 @@ pub(crate) struct IntLiteralTooLarge {\n pub(crate) struct MissingSemicolonBeforeArray {\n     #[primary_span]\n     pub open_delim: Span,\n-    #[suggestion_verbose(applicability = \"maybe-incorrect\", code = \";\")]\n+    #[suggestion(style = \"verbose\", applicability = \"maybe-incorrect\", code = \";\")]\n     pub semicolon: Span,\n }\n \n@@ -442,9 +452,9 @@ pub(crate) struct MissingInInForLoop {\n #[derive(Subdiagnostic)]\n pub(crate) enum MissingInInForLoopSub {\n     // Has been misleading, at least in the past (closed Issue #48492), thus maybe-incorrect\n-    #[suggestion_short(use_in_not_of, applicability = \"maybe-incorrect\", code = \"in\")]\n+    #[suggestion(use_in_not_of, style = \"short\", applicability = \"maybe-incorrect\", code = \"in\")]\n     InNotOf(#[primary_span] Span),\n-    #[suggestion_short(add_in, applicability = \"maybe-incorrect\", code = \" in \")]\n+    #[suggestion(add_in, style = \"short\", applicability = \"maybe-incorrect\", code = \" in \")]\n     AddIn(#[primary_span] Span),\n }\n \n@@ -470,7 +480,7 @@ pub(crate) struct CatchAfterTry {\n pub(crate) struct CommaAfterBaseStruct {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"\")]\n     pub comma: Span,\n }\n \n@@ -512,15 +522,15 @@ pub(crate) struct RemoveLet {\n #[diag(parser_use_eq_instead)]\n pub(crate) struct UseEqInstead {\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"=\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"=\")]\n     pub span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(parser_use_empty_block_not_semi)]\n pub(crate) struct UseEmptyBlockNotSemi {\n     #[primary_span]\n-    #[suggestion_hidden(applicability = \"machine-applicable\", code = \"{{}}\")]\n+    #[suggestion(style = \"hidden\", applicability = \"machine-applicable\", code = \"{{}}\")]\n     pub span: Span,\n }\n \n@@ -576,7 +586,12 @@ pub(crate) struct LeadingPlusNotSupported {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(suggestion_remove_plus, code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        suggestion_remove_plus,\n+        style = \"verbose\",\n+        code = \"\",\n+        applicability = \"machine-applicable\"\n+    )]\n     pub remove_plus: Option<Span>,\n     #[subdiagnostic]\n     pub add_parentheses: Option<ExprParenthesesNeeded>,\n@@ -843,7 +858,7 @@ pub(crate) struct InvalidCurlyInLetElse {\n #[help]\n pub(crate) struct CompoundAssignmentExpressionInLet {\n     #[primary_span]\n-    #[suggestion_short(code = \"=\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"short\", code = \"=\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n \n@@ -864,8 +879,9 @@ pub(crate) struct InvalidMetaItem {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_verbose(\n+#[suggestion(\n     parser_sugg_escape_to_use_as_identifier,\n+    style = \"verbose\",\n     applicability = \"maybe-incorrect\",\n     code = \"r#\"\n )]\n@@ -1005,7 +1021,12 @@ pub(crate) enum ExpectedSemiSugg {\n         applicability = \"machine-applicable\"\n     )]\n     ChangeToSemi(#[primary_span] Span),\n-    #[suggestion_short(parser_sugg_add_semi, code = \";\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        parser_sugg_add_semi,\n+        style = \"short\",\n+        code = \";\",\n+        applicability = \"machine-applicable\"\n+    )]\n     AddSemi(#[primary_span] Span),\n }\n \n@@ -1059,8 +1080,9 @@ pub(crate) struct GenericParamsWithoutAngleBracketsSugg {\n pub(crate) struct ComparisonOperatorsCannotBeChained {\n     #[primary_span]\n     pub span: Vec<Span>,\n-    #[suggestion_verbose(\n+    #[suggestion(\n         parser_sugg_turbofish_syntax,\n+        style = \"verbose\",\n         code = \"::\",\n         applicability = \"maybe-incorrect\"\n     )]\n@@ -1074,8 +1096,9 @@ pub(crate) struct ComparisonOperatorsCannotBeChained {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum ComparisonOperatorsCannotBeChainedSugg {\n-    #[suggestion_verbose(\n+    #[suggestion(\n         sugg_split_comparison,\n+        style = \"verbose\",\n         code = \" && {middle_term}\",\n         applicability = \"maybe-incorrect\"\n     )]\n@@ -1217,15 +1240,15 @@ pub(crate) enum UnexpectedConstParamDeclarationSugg {\n pub(crate) struct UnexpectedConstInGenericParam {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion_verbose(code = \"\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"verbose\", code = \"\", applicability = \"maybe-incorrect\")]\n     pub to_remove: Option<Span>,\n }\n \n #[derive(Diagnostic)]\n #[diag(parser_async_move_order_incorrect)]\n pub(crate) struct AsyncMoveOrderIncorrect {\n     #[primary_span]\n-    #[suggestion_verbose(code = \"async move\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(style = \"verbose\", code = \"async move\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n "}, {"sha": "fb883ae2ed0a76fc6896768d42f040a1b0a52bfb", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -291,7 +291,7 @@ pub struct DocTestUnknownAny {\n #[note(no_op_note)]\n pub struct DocTestUnknownSpotlight {\n     pub path: String,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"notable_trait\")]\n+    #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"notable_trait\")]\n     pub span: Span,\n }\n "}, {"sha": "bd1f85a9d0693f6a640647ba331f6ffb84063e97", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -1789,34 +1789,49 @@ fn collect_print_requests(\n         cg.target_feature = String::new();\n     }\n \n-    prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n-        \"crate-name\" => PrintRequest::CrateName,\n-        \"file-names\" => PrintRequest::FileNames,\n-        \"sysroot\" => PrintRequest::Sysroot,\n-        \"target-libdir\" => PrintRequest::TargetLibdir,\n-        \"cfg\" => PrintRequest::Cfg,\n-        \"calling-conventions\" => PrintRequest::CallingConventions,\n-        \"target-list\" => PrintRequest::TargetList,\n-        \"target-cpus\" => PrintRequest::TargetCPUs,\n-        \"target-features\" => PrintRequest::TargetFeatures,\n-        \"relocation-models\" => PrintRequest::RelocationModels,\n-        \"code-models\" => PrintRequest::CodeModels,\n-        \"tls-models\" => PrintRequest::TlsModels,\n-        \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n-        \"stack-protector-strategies\" => PrintRequest::StackProtectorStrategies,\n-        \"target-spec-json\" => {\n-            if unstable_opts.unstable_options {\n-                PrintRequest::TargetSpec\n-            } else {\n+    const PRINT_REQUESTS: &[(&str, PrintRequest)] = &[\n+        (\"crate-name\", PrintRequest::CrateName),\n+        (\"file-names\", PrintRequest::FileNames),\n+        (\"sysroot\", PrintRequest::Sysroot),\n+        (\"target-libdir\", PrintRequest::TargetLibdir),\n+        (\"cfg\", PrintRequest::Cfg),\n+        (\"calling-conventions\", PrintRequest::CallingConventions),\n+        (\"target-list\", PrintRequest::TargetList),\n+        (\"target-cpus\", PrintRequest::TargetCPUs),\n+        (\"target-features\", PrintRequest::TargetFeatures),\n+        (\"relocation-models\", PrintRequest::RelocationModels),\n+        (\"code-models\", PrintRequest::CodeModels),\n+        (\"tls-models\", PrintRequest::TlsModels),\n+        (\"native-static-libs\", PrintRequest::NativeStaticLibs),\n+        (\"stack-protector-strategies\", PrintRequest::StackProtectorStrategies),\n+        (\"target-spec-json\", PrintRequest::TargetSpec),\n+        (\"link-args\", PrintRequest::LinkArgs),\n+    ];\n+\n+    prints.extend(matches.opt_strs(\"print\").into_iter().map(|req| {\n+        match PRINT_REQUESTS.iter().find(|&&(name, _)| name == req) {\n+            Some((_, PrintRequest::TargetSpec)) => {\n+                if unstable_opts.unstable_options {\n+                    PrintRequest::TargetSpec\n+                } else {\n+                    early_error(\n+                        error_format,\n+                        \"the `-Z unstable-options` flag must also be passed to \\\n+                     enable the target-spec-json print option\",\n+                    );\n+                }\n+            }\n+            Some(&(_, print_request)) => print_request,\n+            None => {\n+                let prints =\n+                    PRINT_REQUESTS.iter().map(|(name, _)| format!(\"`{name}`\")).collect::<Vec<_>>();\n+                let prints = prints.join(\", \");\n                 early_error(\n                     error_format,\n-                    \"the `-Z unstable-options` flag must also be passed to \\\n-                     enable the target-spec-json print option\",\n+                    &format!(\"unknown print request `{req}`. Valid print requests are: {prints}\"),\n                 );\n             }\n         }\n-        \"link-args\" => PrintRequest::LinkArgs,\n-        req => early_error(error_format, &format!(\"unknown print request `{req}`\")),\n     }));\n \n     prints"}, {"sha": "cd183540cd5e9d3c5d20d2e4d12156a7502571c5", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -79,7 +79,9 @@ use crate::{convert, ops};\n /// [`Break`]: ControlFlow::Break\n /// [`Continue`]: ControlFlow::Continue\n #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n-#[derive(Debug, Clone, Copy, PartialEq)]\n+// ControlFlow should not implement PartialOrd or Ord, per RFC 3058:\n+// https://rust-lang.github.io/rfcs/3058-try-trait-v2.html#traits-for-controlflow\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ControlFlow<B, C = ()> {\n     /// Move on to the next phase of the operation as normal.\n     #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]"}, {"sha": "fc2dc42833d0788d37d71b7821efd9f9b6b58b49", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -56,6 +56,7 @@ pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n pub type LPSECURITY_ATTRIBUTES = *mut SECURITY_ATTRIBUTES;\n pub type LPSTARTUPINFO = *mut STARTUPINFO;\n pub type LPVOID = *mut c_void;\n+pub type LPCVOID = *const c_void;\n pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n@@ -773,6 +774,16 @@ pub struct timeval {\n     pub tv_usec: c_long,\n }\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct CONSOLE_READCONSOLE_CONTROL {\n+    pub nLength: ULONG,\n+    pub nInitialChars: ULONG,\n+    pub dwCtrlWakeupMask: ULONG,\n+    pub dwControlKeyState: ULONG,\n+}\n+pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n+\n // Desktop specific functions & types\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n@@ -801,17 +812,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n     pub type PVECTORED_EXCEPTION_HANDLER =\n         extern \"system\" fn(ExceptionInfo: *mut EXCEPTION_POINTERS) -> LONG;\n \n-    #[repr(C)]\n-    #[derive(Copy, Clone)]\n-    pub struct CONSOLE_READCONSOLE_CONTROL {\n-        pub nLength: ULONG,\n-        pub nInitialChars: ULONG,\n-        pub dwCtrlWakeupMask: ULONG,\n-        pub dwControlKeyState: ULONG,\n-    }\n-\n-    pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n-\n     #[repr(C)]\n     pub struct BY_HANDLE_FILE_INFORMATION {\n         pub dwFileAttributes: DWORD,\n@@ -827,7 +827,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n     }\n \n     pub type LPBY_HANDLE_FILE_INFORMATION = *mut BY_HANDLE_FILE_INFORMATION;\n-    pub type LPCVOID = *const c_void;\n \n     pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n \n@@ -855,24 +854,6 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n \n     #[link(name = \"kernel32\")]\n     extern \"system\" {\n-        // Functions forbidden when targeting UWP\n-        pub fn ReadConsoleW(\n-            hConsoleInput: HANDLE,\n-            lpBuffer: LPVOID,\n-            nNumberOfCharsToRead: DWORD,\n-            lpNumberOfCharsRead: LPDWORD,\n-            pInputControl: PCONSOLE_READCONSOLE_CONTROL,\n-        ) -> BOOL;\n-\n-        pub fn WriteConsoleW(\n-            hConsoleOutput: HANDLE,\n-            lpBuffer: LPCVOID,\n-            nNumberOfCharsToWrite: DWORD,\n-            lpNumberOfCharsWritten: LPDWORD,\n-            lpReserved: LPVOID,\n-        ) -> BOOL;\n-\n-        pub fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n         // Allowed but unused by UWP\n         pub fn GetFileInformationByHandle(\n             hFile: HANDLE,\n@@ -914,6 +895,22 @@ if #[cfg(target_vendor = \"uwp\")] {\n extern \"system\" {\n     pub fn GetCurrentProcessId() -> DWORD;\n \n+    pub fn ReadConsoleW(\n+        hConsoleInput: HANDLE,\n+        lpBuffer: LPVOID,\n+        nNumberOfCharsToRead: DWORD,\n+        lpNumberOfCharsRead: LPDWORD,\n+        pInputControl: PCONSOLE_READCONSOLE_CONTROL,\n+    ) -> BOOL;\n+    pub fn WriteConsoleW(\n+        hConsoleOutput: HANDLE,\n+        lpBuffer: LPCVOID,\n+        nNumberOfCharsToWrite: DWORD,\n+        lpNumberOfCharsWritten: LPDWORD,\n+        lpReserved: LPVOID,\n+    ) -> BOOL;\n+    pub fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n+\n     pub fn GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;\n     pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) -> BOOL;"}, {"sha": "e67411e16860e679cbb83cb2c6a7080f9542a0e5", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -29,19 +29,17 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n+pub mod stdio;\n pub mod thread;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod thread_parker;\n pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(not(target_vendor = \"uwp\"))] {\n-        pub mod stdio;\n         pub mod stack_overflow;\n     } else {\n-        pub mod stdio_uwp;\n         pub mod stack_overflow_uwp;\n-        pub use self::stdio_uwp as stdio;\n         pub use self::stack_overflow_uwp as stack_overflow;\n     }\n }"}, {"sha": "32550f796ec64d8ba818caf51d00c18100e3041a", "filename": "library/std/src/sys/windows/stdio_uwp.rs", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1,87 +0,0 @@\n-#![unstable(issue = \"none\", feature = \"windows_stdio\")]\n-\n-use crate::io;\n-use crate::mem::ManuallyDrop;\n-use crate::os::windows::io::FromRawHandle;\n-use crate::sys::c;\n-use crate::sys::handle::Handle;\n-\n-pub struct Stdin {}\n-pub struct Stdout;\n-pub struct Stderr;\n-\n-const MAX_BUFFER_SIZE: usize = 8192;\n-pub const STDIN_BUF_SIZE: usize = MAX_BUFFER_SIZE / 2 * 3;\n-\n-pub fn get_handle(handle_id: c::DWORD) -> io::Result<c::HANDLE> {\n-    let handle = unsafe { c::GetStdHandle(handle_id) };\n-    if handle == c::INVALID_HANDLE_VALUE {\n-        Err(io::Error::last_os_error())\n-    } else if handle.is_null() {\n-        Err(io::Error::from_raw_os_error(c::ERROR_INVALID_HANDLE as i32))\n-    } else {\n-        Ok(handle)\n-    }\n-}\n-\n-fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n-    let handle = get_handle(handle_id)?;\n-    // SAFETY: The handle returned from `get_handle` must be valid and non-null.\n-    let handle = unsafe { Handle::from_raw_handle(handle) };\n-    ManuallyDrop::new(handle).write(data)\n-}\n-\n-impl Stdin {\n-    pub const fn new() -> Stdin {\n-        Stdin {}\n-    }\n-}\n-\n-impl io::Read for Stdin {\n-    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let handle = get_handle(c::STD_INPUT_HANDLE)?;\n-        // SAFETY: The handle returned from `get_handle` must be valid and non-null.\n-        let handle = unsafe { Handle::from_raw_handle(handle) };\n-        ManuallyDrop::new(handle).read(buf)\n-    }\n-}\n-\n-impl Stdout {\n-    pub const fn new() -> Stdout {\n-        Stdout\n-    }\n-}\n-\n-impl io::Write for Stdout {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        write(c::STD_OUTPUT_HANDLE, buf)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl Stderr {\n-    pub const fn new() -> Stderr {\n-        Stderr\n-    }\n-}\n-\n-impl io::Write for Stderr {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        write(c::STD_ERROR_HANDLE, buf)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(c::ERROR_INVALID_HANDLE as i32)\n-}\n-\n-pub fn panic_output() -> Option<impl io::Write> {\n-    Some(Stderr::new())\n-}"}, {"sha": "6de3746363337e992ca038f2c4a58901c25c7184", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -622,6 +622,7 @@ impl<'a> Builder<'a> {\n                 check::Clippy,\n                 check::Miri,\n                 check::CargoMiri,\n+                check::MiroptTestTools,\n                 check::Rls,\n                 check::RustAnalyzer,\n                 check::Rustfmt,"}, {"sha": "2e1bd8d6d1f6db817547866633ae240c7dd9d685", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -460,6 +460,7 @@ tool_check_step!(Miri, \"src/tools/miri\", SourceType::InTree);\n tool_check_step!(CargoMiri, \"src/tools/miri/cargo-miri\", SourceType::InTree);\n tool_check_step!(Rls, \"src/tools/rls\", SourceType::InTree);\n tool_check_step!(Rustfmt, \"src/tools/rustfmt\", SourceType::InTree);\n+tool_check_step!(MiroptTestTools, \"src/tools/miropt-test-tools\", SourceType::InTree);\n \n tool_check_step!(Bootstrap, \"src/bootstrap\", SourceType::InTree, false);\n "}, {"sha": "c3e503bf2c686bf784accdb4776e0d3047ca25ad", "filename": "src/test/mir-opt/rustc.try_identity.DestinationPropagation.diff", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Frustc.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Frustc.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Frustc.try_identity.DestinationPropagation.diff?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1,72 +0,0 @@\n-- // MIR for `try_identity` before DestinationPropagation\n-+ // MIR for `try_identity` after DestinationPropagation\n-  \n-  fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n-      scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n-      }\n-      scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n-          scope 3 {\n-              scope 7 {\n-                  debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-              }\n-              scope 8 {\n-                  debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n-              }\n-          }\n-      }\n-      scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n-          scope 5 {\n-          }\n-      }\n-      scope 6 {\n--         debug self => _4;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         debug self => _0;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n--         _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-+         nop;                             // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      }\n-  \n-      bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n-      }\n-  \n-      bb2: {\n-          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n-      }\n-  }\n-  "}, {"sha": "83b91309be308f006ca20b652329d53c99b792b4", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1,106 +0,0 @@\n-- // MIR for `try_identity` before DestinationPropagation\n-+ // MIR for `try_identity` after DestinationPropagation\n-  \n-  fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:+2:19: +2:51\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:+5:8: +5:9\n-      scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          }\n-          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-          }\n-      }\n-      scope 3 {\n--         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-+         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-      }\n-      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n--         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-+         debug r => _3;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-      }\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n--         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-+         _3 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-+         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-      }\n-  \n-      bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n--         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-+         ((_0 as Ok).0: u32) = ((_3 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-+         nop;                             // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      }\n-  \n-      bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          nop;                             // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          nop;                             // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-          nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "e025ae7c55111e4b3b7a841a1e277ed502b4b7c4", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1,85 +0,0 @@\n-- // MIR for `try_identity` before SimplifyArmIdentity\n-+ // MIR for `try_identity` after SimplifyArmIdentity\n-  \n-  fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:+2:19: +2:51\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:+5:8: +5:9\n-      scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          }\n-          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-          }\n-      }\n-      scope 3 {\n-          debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-      }\n-      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-      }\n-  \n-      bb1: {\n-          StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-          _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-          _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n-          StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-          StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-          _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      }\n-  \n-      bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "eb5af2227ec9be4f801e3d3ea609191fd53830a0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1,83 +0,0 @@\n-// MIR for `try_identity` after SimplifyBranchSame\n-\n-fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:+2:19: +2:51\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:+5:8: +5:9\n-    scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-    }\n-    scope 2 {\n-        debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        }\n-        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-        }\n-    }\n-    scope 3 {\n-        debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-    }\n-    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-    }\n-\n-    bb1: {\n-        StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-        _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n-        StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-        StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-        _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    }\n-\n-    bb3: {\n-        StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-        _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-        StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-        StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-        _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-        _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-        ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-        StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "1efa8a67e5cd1a080a23910182410d1dff937480", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/11ebe6512b4c77633c59f8dcdd421df3b79d1a9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=11ebe6512b4c77633c59f8dcdd421df3b79d1a9f", "patch": "@@ -1,58 +0,0 @@\n-// MIR for `try_identity` after SimplifyLocals\n-\n-fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-    let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-    let _4: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-    let mut _6: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-    scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-    }\n-    scope 2 {\n-        debug e => _4;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => _6;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        }\n-        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-        }\n-    }\n-    scope 3 {\n-        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-    }\n-    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-    }\n-\n-    bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _3 = discriminant(_2);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-    }\n-\n-    bb1: {\n-        ((_0 as Ok).0: u32) = ((_2 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    }\n-\n-    bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-        StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-        StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-        StorageDead(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        StorageDead(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "c325e536e7c5ddae75a10df485cf4e151fe73868", "filename": "src/test/run-make/valid-print-requests/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frun-make%2Fvalid-print-requests%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frun-make%2Fvalid-print-requests%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvalid-print-requests%2FMakefile?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -0,0 +1,4 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --print uwu 2>&1 | diff - valid-print-requests.stderr"}, {"sha": "85782866d125a2e25bc21952e2f107225075dd75", "filename": "src/test/run-make/valid-print-requests/valid-print-requests.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -0,0 +1,2 @@\n+error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `link-args`\n+"}, {"sha": "7ef7ec90cd26910fb3a591bb7708f311c01c31a4", "filename": "src/test/rustdoc-gui/sidebar-links-color.goml", "status": "modified", "additions": 162, "deletions": 224, "changes": 386, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-links-color.goml?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -4,230 +4,168 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n // This is needed so that the text color is computed.\n show-text: true\n \n-// Ayu theme\n-local-storage: {\n-    \"rustdoc-theme\": \"ayu\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-// Struct\n-assert-css: (\n-    \".sidebar .block.struct a:not(.current)\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.struct a:not(.current)\"\n-assert-css: (\n-    \".sidebar .block.struct a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// Enum\n-assert-css: (\n-    \".sidebar .block.enum a\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.enum a\"\n-assert-css: (\n-    \".sidebar .block.enum a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// Union\n-assert-css: (\n-    \".sidebar .block.union a\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.union a\"\n-assert-css: (\n-    \".sidebar .block.union a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// Trait\n-assert-css: (\n-    \".sidebar .block.trait a\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.trait a\"\n-assert-css: (\n-    \".sidebar .block.trait a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// Function\n-assert-css: (\n-    \".sidebar .block.fn a\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.fn a\"\n-assert-css: (\n-    \".sidebar .block.fn a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// Type definition\n-assert-css: (\n-    \".sidebar .block.type a\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.type a\"\n-assert-css: (\n-    \".sidebar .block.type a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// Keyword\n-assert-css: (\n-    \".sidebar .block.keyword a\",\n-    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.keyword a\"\n-assert-css: (\n-    \".sidebar .block.keyword a:hover\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-\n-// Dark theme\n-local-storage: {\"rustdoc-theme\": \"dark\"}\n-reload:\n-\n-// Struct\n-assert-css: (\n-    \".sidebar .block.struct a:not(.current)\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.struct a:not(.current)\"\n-assert-css: (\n-    \".sidebar .block.struct a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-// Enum\n-assert-css: (\n-    \".sidebar .block.enum a\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.enum a\"\n-assert-css: (\n-    \".sidebar .block.enum a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-// Union\n-assert-css: (\n-    \".sidebar .block.union a\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.union a\"\n-assert-css: (\n-    \".sidebar .block.union a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n+define-function: (\n+    \"check-colors\",\n+    (\n+        theme, struct, struct_hover, struct_hover_background, enum, enum_hover,\n+        enum_hover_background, union, union_hover, union_hover_background, trait, trait_hover,\n+        trait_hover_background, fn, fn_hover, fn_hover_background, type, type_hover,\n+        type_hover_background, keyword, keyword_hover, keyword_hover_background,\n+    ),\n+    [\n+        (\"local-storage\", { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\" }),\n+        (\"reload\"),\n+        // Struct\n+        (\"assert-css\", (\n+            \".sidebar .block.struct a:not(.current)\",\n+            {\"color\": |struct|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.struct a:not(.current)\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.struct a:hover\",\n+            {\"color\": |struct_hover|, \"background-color\": |struct_hover_background|},\n+        )),\n+        // Enum\n+        (\"assert-css\", (\n+            \".sidebar .block.enum a\",\n+            {\"color\": |enum|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.enum a\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.enum a:hover\",\n+            {\"color\": |enum_hover|, \"background-color\": |enum_hover_background|},\n+        )),\n+        // Union\n+        (\"assert-css\", (\n+            \".sidebar .block.union a\",\n+            {\"color\": |union|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.union a\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.union a:hover\",\n+            {\"color\": |union_hover|, \"background-color\": |union_hover_background|},\n+        )),\n+        // Trait\n+        (\"assert-css\", (\n+            \".sidebar .block.trait a\",\n+            {\"color\": |trait|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.trait a\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.trait a:hover\",\n+            {\"color\": |trait_hover|, \"background-color\": |trait_hover_background|},\n+        )),\n+        // Function\n+        (\"assert-css\", (\n+            \".sidebar .block.fn a\",\n+            {\"color\": |fn|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.fn a\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.fn a:hover\",\n+            {\"color\": |fn_hover|, \"background-color\": |fn_hover_background|},\n+        )),\n+        // Type definition\n+        (\"assert-css\", (\n+            \".sidebar .block.type a\",\n+            {\"color\": |type|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.type a\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.type a:hover\",\n+            {\"color\": |type_hover|, \"background-color\": |type_hover_background|},\n+        )),\n+        // Keyword\n+        (\"assert-css\", (\n+            \".sidebar .block.keyword a\",\n+            {\"color\": |keyword|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+        )),\n+        (\"move-cursor-to\", \".sidebar .block.keyword a\"),\n+        (\"assert-css\", (\n+            \".sidebar .block.keyword a:hover\",\n+            {\"color\": |keyword_hover|, \"background-color\": |keyword_hover_background|},\n+        )),\n+    ]\n )\n-// Trait\n-assert-css: (\n-    \".sidebar .block.trait a\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.trait a\"\n-assert-css: (\n-    \".sidebar .block.trait a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-// Function\n-assert-css: (\n-    \".sidebar .block.fn a\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.fn a\"\n-assert-css: (\n-    \".sidebar .block.fn a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-// Type definition\n-assert-css: (\n-    \".sidebar .block.type a\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.type a\"\n-assert-css: (\n-    \".sidebar .block.type a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-// Keyword\n-assert-css: (\n-    \".sidebar .block.keyword a\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.keyword a\"\n-assert-css: (\n-    \".sidebar .block.keyword a:hover\",\n-    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-\n-// Light theme\n-local-storage: {\"rustdoc-theme\": \"light\"}\n-reload:\n \n-// Struct\n-assert-css: (\n-    \".sidebar .block.struct a:not(.current)\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.struct a:not(.current)\"\n-assert-css: (\n-    \".sidebar .block.struct a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Enum\n-assert-css: (\n-    \".sidebar .block.enum a\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.enum a\"\n-assert-css: (\n-    \".sidebar .block.enum a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Union\n-assert-css: (\n-    \".sidebar .block.union a\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.union a\"\n-assert-css: (\n-    \".sidebar .block.union a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Trait\n-assert-css: (\n-    \".sidebar .block.trait a\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.trait a\"\n-assert-css: (\n-    \".sidebar .block.trait a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Function\n-assert-css: (\n-    \".sidebar .block.fn a\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.fn a\"\n-assert-css: (\n-    \".sidebar .block.fn a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Type definition\n-assert-css: (\n-    \".sidebar .block.type a\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.type a\"\n-assert-css: (\n-    \".sidebar .block.type a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Keyword\n-assert-css: (\n-    \".sidebar .block.keyword a\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".sidebar .block.keyword a\"\n-assert-css: (\n-    \".sidebar .block.keyword a:hover\",\n-    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\"},\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"struct\": \"rgb(83, 177, 219)\",\n+        \"struct_hover\": \"rgb(255, 180, 76)\",\n+        \"struct_hover_background\": \"rgba(0, 0, 0, 0)\",\n+        \"enum\": \"rgb(83, 177, 219)\",\n+        \"enum_hover\": \"rgb(255, 180, 76)\",\n+        \"enum_hover_background\": \"rgba(0, 0, 0, 0)\",\n+        \"union\": \"rgb(83, 177, 219)\",\n+        \"union_hover\": \"rgb(255, 180, 76)\",\n+        \"union_hover_background\": \"rgba(0, 0, 0, 0)\",\n+        \"trait\": \"rgb(83, 177, 219)\",\n+        \"trait_hover\": \"rgb(255, 180, 76)\",\n+        \"trait_hover_background\": \"rgba(0, 0, 0, 0)\",\n+        \"fn\": \"rgb(83, 177, 219)\",\n+        \"fn_hover\": \"rgb(255, 180, 76)\",\n+        \"fn_hover_background\": \"rgba(0, 0, 0, 0)\",\n+        \"type\": \"rgb(83, 177, 219)\",\n+        \"type_hover\": \"rgb(255, 180, 76)\",\n+        \"type_hover_background\": \"rgba(0, 0, 0, 0)\",\n+        \"keyword\": \"rgb(83, 177, 219)\",\n+        \"keyword_hover\": \"rgb(255, 180, 76)\",\n+        \"keyword_hover_background\": \"rgba(0, 0, 0, 0)\",\n+    }\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"struct\": \"rgb(253, 191, 53)\",\n+        \"struct_hover\": \"rgb(253, 191, 53)\",\n+        \"struct_hover_background\": \"rgb(68, 68, 68)\",\n+        \"enum\": \"rgb(253, 191, 53)\",\n+        \"enum_hover\": \"rgb(253, 191, 53)\",\n+        \"enum_hover_background\": \"rgb(68, 68, 68)\",\n+        \"union\": \"rgb(253, 191, 53)\",\n+        \"union_hover\": \"rgb(253, 191, 53)\",\n+        \"union_hover_background\": \"rgb(68, 68, 68)\",\n+        \"trait\": \"rgb(253, 191, 53)\",\n+        \"trait_hover\": \"rgb(253, 191, 53)\",\n+        \"trait_hover_background\": \"rgb(68, 68, 68)\",\n+        \"fn\": \"rgb(253, 191, 53)\",\n+        \"fn_hover\": \"rgb(253, 191, 53)\",\n+        \"fn_hover_background\": \"rgb(68, 68, 68)\",\n+        \"type\": \"rgb(253, 191, 53)\",\n+        \"type_hover\": \"rgb(253, 191, 53)\",\n+        \"type_hover_background\": \"rgb(68, 68, 68)\",\n+        \"keyword\": \"rgb(253, 191, 53)\",\n+        \"keyword_hover\": \"rgb(253, 191, 53)\",\n+        \"keyword_hover_background\": \"rgb(68, 68, 68)\",\n+    }\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"struct\": \"rgb(53, 109, 164)\",\n+        \"struct_hover\": \"rgb(53, 109, 164)\",\n+        \"struct_hover_background\": \"rgb(255, 255, 255)\",\n+        \"enum\": \"rgb(53, 109, 164)\",\n+        \"enum_hover\": \"rgb(53, 109, 164)\",\n+        \"enum_hover_background\": \"rgb(255, 255, 255)\",\n+        \"union\": \"rgb(53, 109, 164)\",\n+        \"union_hover\": \"rgb(53, 109, 164)\",\n+        \"union_hover_background\": \"rgb(255, 255, 255)\",\n+        \"trait\": \"rgb(53, 109, 164)\",\n+        \"trait_hover\": \"rgb(53, 109, 164)\",\n+        \"trait_hover_background\": \"rgb(255, 255, 255)\",\n+        \"fn\": \"rgb(53, 109, 164)\",\n+        \"fn_hover\": \"rgb(53, 109, 164)\",\n+        \"fn_hover_background\": \"rgb(255, 255, 255)\",\n+        \"type\": \"rgb(53, 109, 164)\",\n+        \"type_hover\": \"rgb(53, 109, 164)\",\n+        \"type_hover_background\": \"rgb(255, 255, 255)\",\n+        \"keyword\": \"rgb(53, 109, 164)\",\n+        \"keyword_hover\": \"rgb(53, 109, 164)\",\n+        \"keyword_hover_background\": \"rgb(255, 255, 255)\",\n+    }\n )"}, {"sha": "10508e86a36e17a4c3d755a85d33ffe842bf639b", "filename": "src/test/rustdoc-gui/theme-in-history.goml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-in-history.goml?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -3,7 +3,6 @@ goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n // Set the theme to dark.\n local-storage: {\n     \"rustdoc-theme\": \"dark\",\n-    \"rustdoc-preferred-dark-theme\": \"dark\",\n     \"rustdoc-use-system-theme\": \"false\",\n }\n // We reload the page so the local storage settings are being used."}, {"sha": "411eb3fba483aa507b01f0298aec79c1972d43b2", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -40,9 +40,9 @@ struct HelloWarn {}\n //~^ ERROR unsupported type attribute for diagnostic derive enum\n enum DiagnosticOnEnum {\n     Foo,\n-//~^ ERROR diagnostic slug not specified\n+    //~^ ERROR diagnostic slug not specified\n     Bar,\n-//~^ ERROR diagnostic slug not specified\n+    //~^ ERROR diagnostic slug not specified\n }\n \n #[derive(Diagnostic)]\n@@ -211,9 +211,10 @@ struct LabelOnNonSpan {\n #[diag(compiletest_example, code = \"E0123\")]\n struct Suggest {\n     #[suggestion(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_short(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_hidden(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_verbose(suggestion, code = \"This is the suggested code\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"normal\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"short\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"hidden\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"verbose\")]\n     suggestion: (Span, Applicability),\n }\n \n@@ -536,8 +537,7 @@ struct LabelWithTrailingList {\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n-struct LintsGood {\n-}\n+struct LintsGood {}\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n@@ -683,39 +683,39 @@ struct RawIdentDiagnosticArg {\n #[diag(compiletest_example)]\n struct SubdiagnosticBad {\n     #[subdiagnostic(bad)]\n-//~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadStr {\n     #[subdiagnostic = \"bad\"]\n-//~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadTwice {\n     #[subdiagnostic(bad, bad)]\n-//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticBadLitStr {\n     #[subdiagnostic(\"bad\")]\n-//~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(compiletest_example)]\n struct SubdiagnosticEagerLint {\n     #[subdiagnostic(eager)]\n-//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n@@ -731,11 +731,7 @@ struct SubdiagnosticEagerCorrect {\n // after the `span_suggestion` call - which breaks eager translation.\n \n #[derive(Subdiagnostic)]\n-#[suggestion_short(\n-    use_instead,\n-    applicability = \"machine-applicable\",\n-    code = \"{correct}\"\n-)]\n+#[suggestion(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n pub(crate) struct SubdiagnosticWithSuggestion {\n     #[primary_span]\n     span: Span,\n@@ -796,3 +792,10 @@ struct SuggestionsInvalidLiteral {\n     //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n     sub: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionStyleGood {\n+    #[suggestion(code = \"\", style = \"hidden\")]\n+    sub: Span,\n+}"}, {"sha": "b4c211db47cd9e090bdc8e6f5fc3e8be399628d9", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -261,41 +261,41 @@ LL |     #[label(label)]\n    |     ^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:223:5\n+  --> $DIR/diagnostic-derive.rs:224:5\n    |\n LL |     #[suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:231:18\n+  --> $DIR/diagnostic-derive.rs:232:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = help: only `code` and `applicability` are valid nested attributes\n+   = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:231:5\n+  --> $DIR/diagnostic-derive.rs:232:5\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:240:18\n+  --> $DIR/diagnostic-derive.rs:241:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n-   = help: only `code` and `applicability` are valid nested attributes\n+   = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:240:5\n+  --> $DIR/diagnostic-derive.rs:241:5\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:263:5\n+  --> $DIR/diagnostic-derive.rs:264:5\n    |\n LL | /     #[suggestion(suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -305,69 +305,69 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:279:24\n+  --> $DIR/diagnostic-derive.rs:280:24\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                        ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:279:18\n+  --> $DIR/diagnostic-derive.rs:280:18\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                  ^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:287:33\n+  --> $DIR/diagnostic-derive.rs:288:33\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                                 ^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:287:18\n+  --> $DIR/diagnostic-derive.rs:288:18\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:294:5\n+  --> $DIR/diagnostic-derive.rs:295:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:445:44\n+  --> $DIR/diagnostic-derive.rs:446:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:447:24\n+  --> $DIR/diagnostic-derive.rs:448:24\n    |\n LL |     suggestion: (Span, Applicability),\n    |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:453:44\n+  --> $DIR/diagnostic-derive.rs:454:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:516:20\n+  --> $DIR/diagnostic-derive.rs:517:20\n    |\n LL |     #[label(label, foo)]\n    |                    ^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:524:20\n+  --> $DIR/diagnostic-derive.rs:525:20\n    |\n LL |     #[label(label, foo = \"...\")]\n    |                    ^^^^^^^^^^^\n \n error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:532:20\n+  --> $DIR/diagnostic-derive.rs:533:20\n    |\n LL |     #[label(label, foo(\"...\"))]\n    |                    ^^^^^^^^^^\n@@ -574,19 +574,19 @@ LL |     #[subdiagnostic(eager)]\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:779:18\n+  --> $DIR/diagnostic-derive.rs:775:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:787:23\n+  --> $DIR/diagnostic-derive.rs:783:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:795:18\n+  --> $DIR/diagnostic-derive.rs:791:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n@@ -652,7 +652,7 @@ LL | #[diag(nonsense, code = \"E0123\")]\n    |        ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:338:10\n+  --> $DIR/diagnostic-derive.rs:339:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`"}, {"sha": "078ec3baac9fc71f359b45062f80c40bebae95bc", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 118, "deletions": 26, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -11,13 +11,13 @@\n #![crate_type = \"lib\"]\n \n extern crate rustc_errors;\n+extern crate rustc_macros;\n extern crate rustc_session;\n extern crate rustc_span;\n-extern crate rustc_macros;\n \n use rustc_errors::Applicability;\n-use rustc_span::Span;\n use rustc_macros::Subdiagnostic;\n+use rustc_span::Span;\n \n #[derive(Subdiagnostic)]\n #[label(parser_add_paren)]\n@@ -40,7 +40,7 @@ enum B {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -165,7 +165,7 @@ enum P {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -177,7 +177,7 @@ enum Q {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -189,7 +189,7 @@ enum R {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -201,7 +201,7 @@ enum S {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -213,7 +213,7 @@ enum T {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -225,7 +225,7 @@ enum U {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -240,7 +240,7 @@ enum V {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -301,14 +301,14 @@ struct AB {\n     #[primary_span]\n     span: Span,\n     #[skip_arg]\n-    z: Z\n+    z: Z,\n }\n \n #[derive(Subdiagnostic)]\n union AC {\n-//~^ ERROR unexpected unsupported untagged union\n+    //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n-    b: u64\n+    b: u64,\n }\n \n #[derive(Subdiagnostic)]\n@@ -372,7 +372,7 @@ enum AI {\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -427,7 +427,7 @@ struct AN {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n+#[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n@@ -437,7 +437,7 @@ struct AO {\n #[derive(Subdiagnostic)]\n #[help(parser_add_paren)]\n struct AP {\n-    var: String\n+    var: String,\n }\n \n #[derive(Subdiagnostic)]\n@@ -452,7 +452,7 @@ struct AR {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"...\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n@@ -467,19 +467,19 @@ enum AT {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n@@ -488,22 +488,22 @@ struct AV {\n \n #[derive(Subdiagnostic)]\n enum AW {\n-    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n enum AX {\n-    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-//~^ ERROR `var` doesn't refer to a field on this type\n+    #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]\n         span: Span,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -659,7 +659,7 @@ enum BL {\n         /// ..and the field\n         #[primary_span]\n         span: Span,\n-    }\n+    },\n }\n \n #[derive(Subdiagnostic)]\n@@ -706,3 +706,95 @@ struct BQ {\n     span: Span,\n     r#type: String,\n }\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\")]\n+struct SuggestionStyleDefault {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"short\")]\n+struct SuggestionStyleShort {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"hidden\")]\n+struct SuggestionStyleHidden {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"verbose\")]\n+struct SuggestionStyleVerbose {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"tool-only\")]\n+struct SuggestionStyleToolOnly {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+//~^ ERROR specified multiple times\n+//~| NOTE previously specified here\n+struct SuggestionStyleTwice {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_hidden(parser_add_paren, code = \"\")]\n+//~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n+struct SuggestionStyleOldSyntax {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+//~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n+struct SuggestionStyleOldAndNewSyntax {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+//~^ ERROR invalid suggestion style\n+struct SuggestionStyleInvalid1 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style = 42)]\n+//~^ ERROR `#[suggestion(style = ...)]` is not a valid attribute\n+struct SuggestionStyleInvalid2 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style)]\n+//~^ ERROR `#[suggestion(style)]` is not a valid attribute\n+struct SuggestionStyleInvalid3 {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+//~^ ERROR `#[suggestion(style(...))]` is not a valid attribute\n+struct SuggestionStyleInvalid4 {\n+    #[primary_span]\n+    sub: Span,\n+}"}, {"sha": "8e06c43e6d0ad79ee48988234182c5b4a1470ce9", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -186,7 +186,7 @@ error: unexpected unsupported untagged union\n LL | / union AC {\n LL | |\n LL | |     span: u32,\n-LL | |     b: u64\n+LL | |     b: u64,\n LL | | }\n    | |_^\n \n@@ -253,10 +253,10 @@ LL | #[suggestion(parser_add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:430:45\n+  --> $DIR/subdiagnostic-derive.rs:430:46\n    |\n-LL | #[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:448:1\n@@ -275,16 +275,16 @@ LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:482:38\n+  --> $DIR/subdiagnostic-derive.rs:482:39\n    |\n-LL | #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                      ^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:501:42\n+  --> $DIR/subdiagnostic-derive.rs:501:43\n    |\n-LL |     #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                          ^^^^^^^\n+LL |     #[suggestion(parser_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:524:5\n@@ -320,7 +320,7 @@ error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n LL | #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                          ^^^^^^^^^^^^\n    |\n-   = help: only `applicability` is a valid nested attributes\n+   = help: only `style` and `applicability` are valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:536:1\n@@ -445,6 +445,62 @@ error: `code = \"...\"`/`code(...)` must contain only string literals\n LL |     #[suggestion_part(code = 3)]\n    |                       ^^^^^^^^\n \n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:746:61\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:746:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                           ^^^^^^^^^^^^^^^^\n+\n+error: `#[suggestion_hidden(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:755:1\n+   |\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n+\n+error: `#[suggestion_hidden(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:763:1\n+   |\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n+\n+error: invalid suggestion style\n+  --> $DIR/subdiagnostic-derive.rs:771:51\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n+   |                                                   ^^^^^\n+   |\n+   = help: valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\n+\n+error: `#[suggestion(style = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:779:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style = 42)]\n+   |                                           ^^^^^^^^^^\n+\n+error: `#[suggestion(style)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:787:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style)]\n+   |                                           ^^^^^\n+   |\n+   = help: a diagnostic slug must be the first argument to the attribute\n+\n+error: `#[suggestion(style(...))]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:795:43\n+   |\n+LL | #[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n+   |                                           ^^^^^^^^^^^^\n+\n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n    |\n@@ -505,6 +561,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 72 previous errors\n+error: aborting due to 79 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "1911f0f9c941c8ff9d855ef58d1ad713e4b7d1bd", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -8,6 +8,7 @@ colored = \"2\"\n diff = \"0.1.10\"\n unified-diff = \"0.2.1\"\n getopts = \"0.2\"\n+miropt-test-tools = { path = \"../miropt-test-tools\" }\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n regex = \"1.0\""}, {"sha": "9a432f11f82ffe4b228b4cdcaf2b434fbc434f44", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -2,11 +2,12 @@ pub use self::Mode::*;\n \n use std::ffi::OsString;\n use std::fmt;\n+use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n \n-use crate::util::PathBufExt;\n+use crate::util::{add_dylib_path, PathBufExt};\n use lazycell::LazyCell;\n use test::ColorConfig;\n \n@@ -385,8 +386,7 @@ impl Config {\n     }\n \n     fn target_cfg(&self) -> &TargetCfg {\n-        self.target_cfg\n-            .borrow_with(|| TargetCfg::new(&self.rustc_path, &self.target, &self.target_rustcflags))\n+        self.target_cfg.borrow_with(|| TargetCfg::new(self))\n     }\n \n     pub fn matches_arch(&self, arch: &str) -> bool {\n@@ -457,21 +457,23 @@ pub enum Endian {\n }\n \n impl TargetCfg {\n-    fn new(rustc_path: &Path, target: &str, target_rustcflags: &Vec<String>) -> TargetCfg {\n-        let output = match Command::new(rustc_path)\n+    fn new(config: &Config) -> TargetCfg {\n+        let mut command = Command::new(&config.rustc_path);\n+        add_dylib_path(&mut command, iter::once(&config.compile_lib_path));\n+        let output = match command\n             .arg(\"--print=cfg\")\n             .arg(\"--target\")\n-            .arg(target)\n-            .args(target_rustcflags)\n+            .arg(&config.target)\n+            .args(&config.target_rustcflags)\n             .output()\n         {\n             Ok(output) => output,\n-            Err(e) => panic!(\"error: failed to get cfg info from {:?}: {e}\", rustc_path),\n+            Err(e) => panic!(\"error: failed to get cfg info from {:?}: {e}\", config.rustc_path),\n         };\n         if !output.status.success() {\n             panic!(\n                 \"error: failed to get cfg info from {:?}\\n--- stdout\\n{}\\n--- stderr\\n{}\",\n-                rustc_path,\n+                config.rustc_path,\n                 String::from_utf8(output.stdout).unwrap(),\n                 String::from_utf8(output.stderr).unwrap(),\n             );"}, {"sha": "dee144052874f93760703272781e16b7f5b6ac7e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 41, "deletions": 116, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -13,7 +13,7 @@ use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n use crate::json;\n use crate::read2::read2_abbreviated;\n-use crate::util::{logv, PathBufExt};\n+use crate::util::{add_dylib_path, dylib_env_var, logv, PathBufExt};\n use crate::ColorConfig;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n@@ -26,6 +26,7 @@ use std::fs::{self, create_dir_all, File, OpenOptions};\n use std::hash::{Hash, Hasher};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n+use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n@@ -72,19 +73,6 @@ fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     f()\n }\n \n-/// The name of the environment variable that holds dynamic library locations.\n-pub fn dylib_env_var() -> &'static str {\n-    if cfg!(windows) {\n-        \"PATH\"\n-    } else if cfg!(target_os = \"macos\") {\n-        \"DYLD_LIBRARY_PATH\"\n-    } else if cfg!(target_os = \"haiku\") {\n-        \"LIBRARY_PATH\"\n-    } else {\n-        \"LD_LIBRARY_PATH\"\n-    }\n-}\n-\n /// The platform-specific library name\n pub fn get_lib_name(lib: &str, dylib: bool) -> String {\n     // In some casess (e.g. MUSL), we build a static\n@@ -1811,16 +1799,7 @@ impl<'test> TestCx<'test> {\n \n         // Need to be sure to put both the lib_path and the aux path in the dylib\n         // search path for the child.\n-        let mut path =\n-            env::split_paths(&env::var_os(dylib_env_var()).unwrap_or_default()).collect::<Vec<_>>();\n-        if let Some(p) = aux_path {\n-            path.insert(0, PathBuf::from(p))\n-        }\n-        path.insert(0, PathBuf::from(lib_path));\n-\n-        // Add the new dylib search path var\n-        let newpath = env::join_paths(&path).unwrap();\n-        command.env(dylib_env_var(), newpath);\n+        add_dylib_path(&mut command, iter::once(lib_path).chain(aux_path));\n \n         let mut child = disable_error_reporting(|| command.spawn())\n             .unwrap_or_else(|_| panic!(\"failed to exec `{:?}`\", &command));\n@@ -3399,103 +3378,49 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        for l in test_file_contents.lines() {\n-            if l.starts_with(\"// EMIT_MIR \") {\n-                let test_name = l.trim_start_matches(\"// EMIT_MIR \").trim();\n-                let mut test_names = test_name.split(' ');\n-                // sometimes we specify two files so that we get a diff between the two files\n-                let test_name = test_names.next().unwrap();\n-                let mut expected_file;\n-                let from_file;\n-                let to_file;\n-\n-                if test_name.ends_with(\".diff\") {\n-                    let trimmed = test_name.trim_end_matches(\".diff\");\n-                    let test_against = format!(\"{}.after.mir\", trimmed);\n-                    from_file = format!(\"{}.before.mir\", trimmed);\n-                    expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n-                    assert!(\n-                        test_names.next().is_none(),\n-                        \"two mir pass names specified for MIR diff\"\n-                    );\n-                    to_file = Some(test_against);\n-                } else if let Some(first_pass) = test_names.next() {\n-                    let second_pass = test_names.next().unwrap();\n-                    assert!(\n-                        test_names.next().is_none(),\n-                        \"three mir pass names specified for MIR diff\"\n-                    );\n-                    expected_file =\n-                        format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n-                    let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n-                    from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n-                    to_file = Some(second_file);\n-                } else {\n-                    let ext_re = Regex::new(r#\"(\\.(mir|dot|html))$\"#).unwrap();\n-                    let cap = ext_re\n-                        .captures_iter(test_name)\n-                        .next()\n-                        .expect(\"test_name has an invalid extension\");\n-                    let extension = cap.get(1).unwrap().as_str();\n-                    expected_file = format!(\n-                        \"{}{}{}\",\n-                        test_name.trim_end_matches(extension),\n-                        bit_width,\n-                        extension,\n-                    );\n-                    from_file = test_name.to_string();\n-                    assert!(\n-                        test_names.next().is_none(),\n-                        \"two mir pass names specified for MIR dump\"\n+        let files = miropt_test_tools::files_for_miropt_test(\n+            &self.testpaths.file,\n+            self.config.get_pointer_width(),\n+        );\n+\n+        for miropt_test_tools::MiroptTestFiles { from_file, to_file, expected_file } in files {\n+            let dumped_string = if let Some(after) = to_file {\n+                self.diff_mir_files(from_file.into(), after.into())\n+            } else {\n+                let mut output_file = PathBuf::new();\n+                output_file.push(self.get_mir_dump_dir());\n+                output_file.push(&from_file);\n+                debug!(\n+                    \"comparing the contents of: {} with {}\",\n+                    output_file.display(),\n+                    expected_file.display()\n+                );\n+                if !output_file.exists() {\n+                    panic!(\n+                        \"Output file `{}` from test does not exist, available files are in `{}`\",\n+                        output_file.display(),\n+                        output_file.parent().unwrap().display()\n                     );\n-                    to_file = None;\n-                };\n-                if !expected_file.starts_with(&test_crate) {\n-                    expected_file = format!(\"{}.{}\", test_crate, expected_file);\n                 }\n-                let expected_file = test_dir.join(expected_file);\n+                self.check_mir_test_timestamp(&from_file, &output_file);\n+                let dumped_string = fs::read_to_string(&output_file).unwrap();\n+                self.normalize_output(&dumped_string, &[])\n+            };\n \n-                let dumped_string = if let Some(after) = to_file {\n-                    self.diff_mir_files(from_file.into(), after.into())\n-                } else {\n-                    let mut output_file = PathBuf::new();\n-                    output_file.push(self.get_mir_dump_dir());\n-                    output_file.push(&from_file);\n-                    debug!(\n-                        \"comparing the contents of: {} with {}\",\n-                        output_file.display(),\n+            if self.config.bless {\n+                let _ = std::fs::remove_file(&expected_file);\n+                std::fs::write(expected_file, dumped_string.as_bytes()).unwrap();\n+            } else {\n+                if !expected_file.exists() {\n+                    panic!(\"Output file `{}` from test does not exist\", expected_file.display());\n+                }\n+                let expected_string = fs::read_to_string(&expected_file).unwrap();\n+                if dumped_string != expected_string {\n+                    print!(\"{}\", write_diff(&expected_string, &dumped_string, 3));\n+                    panic!(\n+                        \"Actual MIR output differs from expected MIR output {}\",\n                         expected_file.display()\n                     );\n-                    if !output_file.exists() {\n-                        panic!(\n-                            \"Output file `{}` from test does not exist, available files are in `{}`\",\n-                            output_file.display(),\n-                            output_file.parent().unwrap().display()\n-                        );\n-                    }\n-                    self.check_mir_test_timestamp(&from_file, &output_file);\n-                    let dumped_string = fs::read_to_string(&output_file).unwrap();\n-                    self.normalize_output(&dumped_string, &[])\n-                };\n-\n-                if self.config.bless {\n-                    let _ = std::fs::remove_file(&expected_file);\n-                    std::fs::write(expected_file, dumped_string.as_bytes()).unwrap();\n-                } else {\n-                    if !expected_file.exists() {\n-                        panic!(\n-                            \"Output file `{}` from test does not exist\",\n-                            expected_file.display()\n-                        );\n-                    }\n-                    let expected_string = fs::read_to_string(&expected_file).unwrap();\n-                    if dumped_string != expected_string {\n-                        print!(\"{}\", write_diff(&expected_string, &dumped_string, 3));\n-                        panic!(\n-                            \"Actual MIR output differs from expected MIR output {}\",\n-                            expected_file.display()\n-                        );\n-                    }\n                 }\n             }\n         }"}, {"sha": "ec36f1e4fb72efd5beada293b800ad2aa4733404", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -2,6 +2,7 @@ use crate::common::Config;\n use std::env;\n use std::ffi::OsStr;\n use std::path::PathBuf;\n+use std::process::Command;\n \n use tracing::*;\n \n@@ -111,3 +112,25 @@ impl PathBufExt for PathBuf {\n         }\n     }\n }\n+\n+/// The name of the environment variable that holds dynamic library locations.\n+pub fn dylib_env_var() -> &'static str {\n+    if cfg!(windows) {\n+        \"PATH\"\n+    } else if cfg!(target_os = \"macos\") {\n+        \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n+    } else {\n+        \"LD_LIBRARY_PATH\"\n+    }\n+}\n+\n+/// Adds a list of lookup paths to `cmd`'s dynamic library lookup path.\n+/// If the dylib_path_var is already set for this cmd, the old value will be overwritten!\n+pub fn add_dylib_path(cmd: &mut Command, paths: impl Iterator<Item = impl Into<PathBuf>>) {\n+    let path_env = env::var_os(dylib_env_var());\n+    let old_paths = path_env.as_ref().map(env::split_paths);\n+    let new_paths = paths.map(Into::into).chain(old_paths.into_iter().flatten());\n+    cmd.env(dylib_env_var(), env::join_paths(new_paths).unwrap());\n+}"}, {"sha": "8589a44cf1bab513f93dcd2b97d01f086bf0b8c7", "filename": "src/tools/miropt-test-tools/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fmiropt-test-tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fmiropt-test-tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2FCargo.toml?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"miropt-test-tools\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+regex = \"1.0\""}, {"sha": "96819d3547b29987b0ce6aae8e5330e8887fedd0", "filename": "src/tools/miropt-test-tools/src/lib.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -0,0 +1,70 @@\n+use std::fs;\n+\n+pub struct MiroptTestFiles {\n+    pub expected_file: std::path::PathBuf,\n+    pub from_file: String,\n+    pub to_file: Option<String>,\n+}\n+\n+pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<MiroptTestFiles> {\n+    let mut out = Vec::new();\n+    let test_file_contents = fs::read_to_string(&testfile).unwrap();\n+\n+    let test_dir = testfile.parent().unwrap();\n+    let test_crate = testfile.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+\n+    let bit_width = if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n+        format!(\".{}bit\", bit_width)\n+    } else {\n+        String::new()\n+    };\n+\n+    for l in test_file_contents.lines() {\n+        if l.starts_with(\"// EMIT_MIR \") {\n+            let test_name = l.trim_start_matches(\"// EMIT_MIR \").trim();\n+            let mut test_names = test_name.split(' ');\n+            // sometimes we specify two files so that we get a diff between the two files\n+            let test_name = test_names.next().unwrap();\n+            let mut expected_file;\n+            let from_file;\n+            let to_file;\n+\n+            if test_name.ends_with(\".diff\") {\n+                let trimmed = test_name.trim_end_matches(\".diff\");\n+                let test_against = format!(\"{}.after.mir\", trimmed);\n+                from_file = format!(\"{}.before.mir\", trimmed);\n+                expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n+                assert!(test_names.next().is_none(), \"two mir pass names specified for MIR diff\");\n+                to_file = Some(test_against);\n+            } else if let Some(first_pass) = test_names.next() {\n+                let second_pass = test_names.next().unwrap();\n+                assert!(test_names.next().is_none(), \"three mir pass names specified for MIR diff\");\n+                expected_file =\n+                    format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n+                let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n+                from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n+                to_file = Some(second_file);\n+            } else {\n+                let ext_re = regex::Regex::new(r#\"(\\.(mir|dot|html))$\"#).unwrap();\n+                let cap = ext_re\n+                    .captures_iter(test_name)\n+                    .next()\n+                    .expect(\"test_name has an invalid extension\");\n+                let extension = cap.get(1).unwrap().as_str();\n+                expected_file =\n+                    format!(\"{}{}{}\", test_name.trim_end_matches(extension), bit_width, extension,);\n+                from_file = test_name.to_string();\n+                assert!(test_names.next().is_none(), \"two mir pass names specified for MIR dump\");\n+                to_file = None;\n+            };\n+            if !expected_file.starts_with(&test_crate) {\n+                expected_file = format!(\"{}.{}\", test_crate, expected_file);\n+            }\n+            let expected_file = test_dir.join(expected_file);\n+\n+            out.push(MiroptTestFiles { expected_file, from_file, to_file });\n+        }\n+    }\n+\n+    out\n+}"}, {"sha": "774c97b7777d2c7467b2bf9aac4b9295346aecd9", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -7,6 +7,7 @@ autobins = false\n [dependencies]\n cargo_metadata = \"0.14\"\n regex = \"1\"\n+miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n "}, {"sha": "698e4850bea9bdf1e8d94875c2ffde8f8e358696", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -47,6 +47,7 @@ pub mod error_codes_check;\n pub mod errors;\n pub mod extdeps;\n pub mod features;\n+pub mod mir_opt_tests;\n pub mod pal;\n pub mod primitive_docs;\n pub mod style;"}, {"sha": "ee883777c31d91d4c59ab33bfd37f9708957bd2e", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -64,6 +64,7 @@ fn main() {\n         // Checks over tests.\n         check!(debug_artifacts, &src_path);\n         check!(ui_tests, &src_path);\n+        check!(mir_opt_tests, &src_path);\n \n         // Checks that only make sense for the compiler.\n         check!(errors, &compiler_path);"}, {"sha": "f9e8b55497b589ad6b44f4f286f299022c1fc387", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a4df32b402e3886cd9f2af02cff3dd8e21c8/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=a876a4df32b402e3886cd9f2af02cff3dd8e21c8", "patch": "@@ -0,0 +1,37 @@\n+//! Tidy check to ensure that mir opt directories do not have stale files.\n+\n+use std::collections::HashSet;\n+use std::path::{Path, PathBuf};\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    let mut rs_files = Vec::<PathBuf>::new();\n+    let mut output_files = HashSet::<PathBuf>::new();\n+    let files = walkdir::WalkDir::new(&path.join(\"test/mir-opt\")).into_iter();\n+\n+    for file in files.filter_map(Result::ok).filter(|e| e.file_type().is_file()) {\n+        let filepath = file.path();\n+        if filepath.extension() == Some(\"rs\".as_ref()) {\n+            rs_files.push(filepath.to_owned());\n+        } else {\n+            output_files.insert(filepath.to_owned());\n+        }\n+    }\n+\n+    for file in rs_files {\n+        for bw in [32, 64] {\n+            for output_file in miropt_test_tools::files_for_miropt_test(&file, bw) {\n+                output_files.remove(&output_file.expected_file);\n+            }\n+        }\n+    }\n+\n+    for extra in output_files {\n+        if extra.file_name() != Some(\"README.md\".as_ref()) {\n+            tidy_error!(\n+                bad,\n+                \"the following output file is not associated with any mir-opt test, you can remove it: {}\",\n+                extra.display()\n+            );\n+        }\n+    }\n+}"}]}