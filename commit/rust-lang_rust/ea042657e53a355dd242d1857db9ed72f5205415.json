{"sha": "ea042657e53a355dd242d1857db9ed72f5205415", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMDQyNjU3ZTUzYTM1NWRkMjQyZDE4NTdkYjllZDcyZjUyMDU0MTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-24T12:04:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-24T12:04:06Z"}, "message": "Enable more patterns in the author lint", "tree": {"sha": "a7493a414d855154bdb4d63066218e96ea55a718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7493a414d855154bdb4d63066218e96ea55a718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea042657e53a355dd242d1857db9ed72f5205415", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlpodjYACgkQpp+NIls6\n19k1dw//StPhLK8iDZP4Dcpd+97p0YyxYvkXvqeRnnH4q/6iBF8pS/hKsoVB6Vx1\nwu3nNh6cOYokjNfJKBIu4MIlsWdSrxNXkph+v4ovp2D0Qm10q4wVDejlf7ttUF8C\nmB7bWZfj2HpgzfZbce6PsJXaBzFboCuJ6z661wG9D+5KyIjPtNgt9YDzlz9NZDeo\nVWroWVobWhNgJA4yF2iqTDCcf2eTq+Fnv64QOrOYT1ERNW5kcdP8+p4Ha8XDQSNq\n0vnUHEli1mP1C01CxMO5352ozkfVXYpBvQrMYx9UklrJizFg4J5onYNuq67G/Cbv\nKrqLSy0aDmncl6b2O5qH7N8z4fHrRQ8c5J4BWB0l6zE2ECVWXSodyPMbJdkMoMfz\n83M7wxH6AyfrpK6xlGCNS1MxZa5xEFCqlZNjLhB5InD8OqSiutfwRiGg99ZtoPHq\n3J4CJgECvK7/XfzTfRiZUst6wH3RoD4awjgLgG8dTiqppu2z4K50BlLUt47kc/3R\nYnkAeF0RR2fNoWiTujDxModt0Ado0nLdnu+hNqdyfScrpNsMPQEtG11ClKbMn5nc\nu4Sv37+RXsMz3LosJoQMPlgtWJwEqWko6Tbc7OJ+woo8BufGjXcOUVSZ5bcHzjn9\nauYS9AsDbbspzYgojUwEuZZry7qWQZ0p/Odpce89pw/c6vgJvks=\n=HaLW\n-----END PGP SIGNATURE-----", "payload": "tree a7493a414d855154bdb4d63066218e96ea55a718\nparent 9995c4c1efa11425ead2ffaad4db727b9f4b0d30\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516795446 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516795446 +0100\n\nEnable more patterns in the author lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea042657e53a355dd242d1857db9ed72f5205415", "html_url": "https://github.com/rust-lang/rust/commit/ea042657e53a355dd242d1857db9ed72f5205415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea042657e53a355dd242d1857db9ed72f5205415/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9995c4c1efa11425ead2ffaad4db727b9f4b0d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/9995c4c1efa11425ead2ffaad4db727b9f4b0d30", "html_url": "https://github.com/rust-lang/rust/commit/9995c4c1efa11425ead2ffaad4db727b9f4b0d30"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "c824c8906a72bc0dcdcb5a00a61c361f94526e86", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ea042657e53a355dd242d1857db9ed72f5205415/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea042657e53a355dd242d1857db9ed72f5205415/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=ea042657e53a355dd242d1857db9ed72f5205415", "patch": "@@ -288,16 +288,27 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = then_pat;\n                 self.visit_expr(then);\n             },\n-            Expr_::ExprWhile(ref _cond, ref _body, ref _opt_label) => {\n-                println!(\"While(ref cond, ref body, ref opt_label) = {};\", current);\n-                println!(\"    // unimplemented: `ExprWhile` is not further destructured at the moment\");\n-            },\n-            Expr_::ExprLoop(ref _body, ref _opt_label, ref _desuraging) => {\n-                println!(\"Loop(ref body, ref opt_label, ref desugaring) = {};\", current);\n-                println!(\"    // unimplemented: `ExprLoop` is not further destructured at the moment\");\n-            },\n-            Expr_::ExprMatch(ref _expr, ref _arms, ref _desugaring) => {\n-                println!(\"Match(ref expr, ref arms, ref desugaring) = {};\", current);\n+            Expr_::ExprWhile(ref cond, ref body, _) => {\n+                let cond_pat = self.next(\"cond\");\n+                let body_pat = self.next(\"body\");\n+                let label_pat = self.next(\"label\");\n+                println!(\"While(ref {}, ref {}, ref {}) = {};\", cond_pat, body_pat, label_pat, current);\n+                self.current = cond_pat;\n+                self.visit_expr(cond);\n+                self.current = body_pat;\n+                self.visit_block(body);\n+            },\n+            Expr_::ExprLoop(ref body, _, desugaring) => {\n+                let body_pat = self.next(\"body\");\n+                let des = loop_desugaring_name(desugaring);\n+                let label_pat = self.next(\"label\");\n+                println!(\"Loop(ref {}, ref {}, {}) = {};\", body_pat, label_pat, des, current);\n+                self.current = body_pat;\n+                self.visit_block(body);\n+            },\n+            Expr_::ExprMatch(ref _expr, ref _arms, desugaring) => {\n+                let des = desugaring_name(desugaring);\n+                println!(\"Match(ref expr, ref arms, {}) = {};\", des, current);\n                 println!(\"    // unimplemented: `ExprMatch` is not further destructured at the moment\");\n             },\n             Expr_::ExprClosure(ref _capture_clause, ref _func, _, _, _) => {\n@@ -456,6 +467,24 @@ fn has_attr(attrs: &[Attribute]) -> bool {\n     })\n }\n \n+fn desugaring_name(des: hir::MatchSource) -> String {\n+    match des {\n+        hir::MatchSource::ForLoopDesugar => \"MatchSource::ForLoopDesugar\".to_string(),\n+        hir::MatchSource::TryDesugar => \"MatchSource::TryDesugar\".to_string(),\n+        hir::MatchSource::WhileLetDesugar => \"MatchSource::WhileLetDesugar\".to_string(),\n+        hir::MatchSource::Normal => \"MatchSource::Normal\".to_string(),\n+        hir::MatchSource::IfLetDesugar { contains_else_clause } => format!(\"MatchSource::IfLetDesugar {{ contains_else_clause: {} }}\", contains_else_clause),\n+    }\n+}\n+\n+fn loop_desugaring_name(des: hir::LoopSource) -> &'static str {\n+    match des {\n+        hir::LoopSource::ForLoop => \"LoopSource::ForLoop\",\n+        hir::LoopSource::Loop => \"LoopSource::Loop\",\n+        hir::LoopSource::WhileLet => \"LoopSource::WhileLet\",\n+    }\n+}\n+\n fn print_path(path: &QPath, first: &mut bool) {\n     match *path {\n         QPath::Resolved(_, ref path) => for segment in &path.segments {"}, {"sha": "d606e7a15fc391dd39d6df79cfa7274623d9ab10", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea042657e53a355dd242d1857db9ed72f5205415/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea042657e53a355dd242d1857db9ed72f5205415/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=ea042657e53a355dd242d1857db9ed72f5205415", "patch": "@@ -1,4 +1,4 @@\n-#![feature(plugin, inclusive_range_syntax)]\n+#![feature(plugin, inclusive_range_syntax, custom_attribute)]\n \n \n use std::collections::*;\n@@ -14,7 +14,7 @@ fn for_loop_over_option_and_result() {\n     let v = vec![0, 1, 2];\n \n     // check FOR_LOOP_OVER_OPTION lint\n-    for x in option {\n+    #[clippy(author)]for x in option {\n         println!(\"{}\", x);\n     }\n "}, {"sha": "e588bfa08495f6e74db28a441810f49b29cc1cb0", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea042657e53a355dd242d1857db9ed72f5205415/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea042657e53a355dd242d1857db9ed72f5205415/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=ea042657e53a355dd242d1857db9ed72f5205415", "patch": "@@ -1,8 +1,8 @@\n error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:17:14\n+  --> $DIR/for_loop.rs:17:31\n    |\n-17 |     for x in option {\n-   |              ^^^^^^\n+17 |     #[clippy(author)]for x in option {\n+   |                               ^^^^^^\n    |\n    = note: `-D for-loop-over-option` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`"}, {"sha": "ce4186fa6a1a952359634f3a43dcb3463fac6f2d", "filename": "tests/ui/for_loop.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea042657e53a355dd242d1857db9ed72f5205415/tests%2Fui%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ea042657e53a355dd242d1857db9ed72f5205415/tests%2Fui%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stdout?ref=ea042657e53a355dd242d1857db9ed72f5205415", "patch": "@@ -0,0 +1,20 @@\n+if_chain! {\n+    if let Expr_::ExprBlock(ref block) = stmt.node;\n+    if let Expr_::ExprMatch(ref expr, ref arms, MatchSource::ForLoopDesugar) = block.node;\n+    // unimplemented: `ExprMatch` is not further destructured at the moment\n+    if let Expr_::ExprPath(ref path) = block.node;\n+    if match_qpath(path, &[\"_result\"]);\n+    then {\n+        // report your lint here\n+    }\n+}\n+if_chain! {\n+    if let Expr_::ExprBlock(ref block) = expr.node;\n+    if let Expr_::ExprMatch(ref expr, ref arms, MatchSource::ForLoopDesugar) = block.node;\n+    // unimplemented: `ExprMatch` is not further destructured at the moment\n+    if let Expr_::ExprPath(ref path) = block.node;\n+    if match_qpath(path, &[\"_result\"]);\n+    then {\n+        // report your lint here\n+    }\n+}"}]}