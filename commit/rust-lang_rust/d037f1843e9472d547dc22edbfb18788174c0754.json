{"sha": "d037f1843e9472d547dc22edbfb18788174c0754", "node_id": "C_kwDOAAsO6NoAKGQwMzdmMTg0M2U5NDcyZDU0N2RjMjJlZGJmYjE4Nzg4MTc0YzA3NTQ", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-07-29T07:08:50Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-08-22T10:09:59Z"}, "message": "add `with_bounds` to `OutlivesEnvironment` and `implied_bounds_tys` to `outlives_bounds::InferCtxtExt`", "tree": {"sha": "0887ef89452019c44ae82053b856009281106dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0887ef89452019c44ae82053b856009281106dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d037f1843e9472d547dc22edbfb18788174c0754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d037f1843e9472d547dc22edbfb18788174c0754", "html_url": "https://github.com/rust-lang/rust/commit/d037f1843e9472d547dc22edbfb18788174c0754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d037f1843e9472d547dc22edbfb18788174c0754/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9e4d07fcbd526435b28f2fccb7d9888a2377b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9e4d07fcbd526435b28f2fccb7d9888a2377b6", "html_url": "https://github.com/rust-lang/rust/commit/5d9e4d07fcbd526435b28f2fccb7d9888a2377b6"}], "stats": {"total": 152, "additions": 70, "deletions": 82}, "files": [{"sha": "7afb44517a37b464bb3602fe07bdef043dcadaad", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=d037f1843e9472d547dc22edbfb18788174c0754", "patch": "@@ -52,12 +52,10 @@ pub struct OutlivesEnvironment<'tcx> {\n     region_bound_pairs: RegionBoundPairs<'tcx>,\n }\n \n-/// Builder of OutlivesEnvironment. Use this structure if you need to add more outlives\n-/// bounds than `explicit_outlives_bounds(param_env)`.\n-pub struct OutlivesEnvironmentBuilder<'tcx> {\n-    pub param_env: ty::ParamEnv<'tcx>,\n+/// Builder of OutlivesEnvironment.\n+struct OutlivesEnvironmentBuilder<'tcx> {\n+    param_env: ty::ParamEnv<'tcx>,\n     region_relation: TransitiveRelationBuilder<Region<'tcx>>,\n-\n     region_bound_pairs: RegionBoundPairs<'tcx>,\n }\n \n@@ -69,7 +67,7 @@ pub type RegionBoundPairs<'tcx> =\n \n impl<'tcx> OutlivesEnvironment<'tcx> {\n     /// Create a builder using `ParamEnv` and add explicit outlives bounds into it.\n-    pub fn builder(param_env: ty::ParamEnv<'tcx>) -> OutlivesEnvironmentBuilder<'tcx> {\n+    fn builder(param_env: ty::ParamEnv<'tcx>) -> OutlivesEnvironmentBuilder<'tcx> {\n         let mut builder = OutlivesEnvironmentBuilder {\n             param_env,\n             region_relation: Default::default(),\n@@ -87,6 +85,17 @@ impl<'tcx> OutlivesEnvironment<'tcx> {\n         Self::builder(param_env).build()\n     }\n \n+    /// Create a new `OutlivesEnvironment` with extra outlives bounds.\n+    pub fn with_bounds<'a>(\n+        param_env: ty::ParamEnv<'tcx>,\n+        infcx: Option<&InferCtxt<'a, 'tcx>>,\n+        extra_bounds: impl IntoIterator<Item = OutlivesBound<'tcx>>,\n+    ) -> Self {\n+        let mut builder = Self::builder(param_env);\n+        builder.add_outlives_bounds(infcx, extra_bounds);\n+        builder.build()\n+    }\n+\n     /// Borrows current value of the `free_region_map`.\n     pub fn free_region_map(&self) -> &FreeRegionMap<'tcx> {\n         &self.free_region_map\n@@ -108,26 +117,14 @@ impl<'a, 'tcx> OutlivesEnvironmentBuilder<'tcx> {\n         }\n     }\n \n-    // Record that `'sup:'sub`. Or, put another way, `'sub <= 'sup`.\n-    // (with the exception that `'static: 'x` is not notable)\n-    fn relate_regions(&mut self, sub: Region<'tcx>, sup: Region<'tcx>) {\n-        debug!(\"relate_regions(sub={:?}, sup={:?})\", sub, sup);\n-        if sub.is_free_or_static() && sup.is_free() {\n-            self.region_relation.add(sub, sup)\n-        }\n-    }\n-\n     /// Processes outlives bounds that are known to hold, whether from implied or other sources.\n     ///\n     /// The `infcx` parameter is optional; if the implied bounds may\n     /// contain inference variables, it must be supplied, in which\n     /// case we will register \"givens\" on the inference context. (See\n     /// `RegionConstraintData`.)\n-    pub fn add_outlives_bounds<I>(\n-        &mut self,\n-        infcx: Option<&InferCtxt<'a, 'tcx>>,\n-        outlives_bounds: I,\n-    ) where\n+    fn add_outlives_bounds<I>(&mut self, infcx: Option<&InferCtxt<'a, 'tcx>>, outlives_bounds: I)\n+    where\n         I: IntoIterator<Item = OutlivesBound<'tcx>>,\n     {\n         // Record relationships such as `T:'x` that don't go into the\n@@ -159,7 +156,9 @@ impl<'a, 'tcx> OutlivesEnvironmentBuilder<'tcx> {\n                         // system to be more general and to make use\n                         // of *every* relationship that arises here,\n                         // but presently we do not.)\n-                        self.relate_regions(r_a, r_b);\n+                        if r_a.is_free_or_static() && r_b.is_free() {\n+                            self.region_relation.add(r_a, r_b)\n+                        }\n                     }\n                 }\n             }"}, {"sha": "5fde6f396e59d30c796abf0d35d9e55eb0eaff5f", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d037f1843e9472d547dc22edbfb18788174c0754", "patch": "@@ -1,6 +1,6 @@\n use super::potentially_plural_count;\n-use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n+use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -401,9 +401,11 @@ fn compare_predicate_entailment<'tcx>(\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        let mut outlives_environment = OutlivesEnvironment::builder(param_env);\n-        outlives_environment.add_implied_bounds(infcx, wf_tys, impl_m_hir_id);\n-        let outlives_environment = outlives_environment.build();\n+        let outlives_environment = OutlivesEnvironment::with_bounds(\n+            param_env,\n+            Some(infcx),\n+            infcx.implied_bounds_tys(param_env, impl_m_hir_id, wf_tys),\n+        );\n         infcx.check_region_obligations_and_report_errors(\n             impl_m.def_id.expect_local(),\n             &outlives_environment,\n@@ -1517,6 +1519,7 @@ pub fn check_type_bounds<'tcx>(\n         let mut outlives_environment = OutlivesEnvironment::builder(param_env);\n         outlives_environment.add_implied_bounds(&infcx, assumed_wf_types, impl_ty_hir_id);\n         let outlives_environment = outlives_environment.build();\n+\n         infcx.check_region_obligations_and_report_errors(\n             impl_ty.def_id.expect_local(),\n             &outlives_environment,"}, {"sha": "fb675212e3ffb4607215ddc7ff0f9003f2e63e87", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=d037f1843e9472d547dc22edbfb18788174c0754", "patch": "@@ -87,7 +87,6 @@ mod op;\n mod pat;\n mod place_op;\n mod region;\n-pub mod regionck;\n pub mod rvalue_scopes;\n mod upvar;\n pub mod wfcheck;"}, {"sha": "bcc1ea38c9d0f2a3519e1cab0ab7afd4ad3ee78d", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5d9e4d07fcbd526435b28f2fccb7d9888a2377b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9e4d07fcbd526435b28f2fccb7d9888a2377b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=5d9e4d07fcbd526435b28f2fccb7d9888a2377b6", "patch": "@@ -1,47 +0,0 @@\n-use crate::outlives::outlives_bounds::InferCtxtExt as _;\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir as hir;\n-use rustc_infer::infer::outlives::env::OutlivesEnvironmentBuilder;\n-use rustc_infer::infer::InferCtxt;\n-use rustc_middle::ty::Ty;\n-\n-pub(crate) trait OutlivesEnvironmentExt<'tcx> {\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-    );\n-}\n-\n-impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironmentBuilder<'tcx> {\n-    /// This method adds \"implied bounds\" into the outlives environment.\n-    /// Implied bounds are outlives relationships that we can deduce\n-    /// on the basis that certain types must be well-formed -- these are\n-    /// either the types that appear in the function signature or else\n-    /// the input types to an impl. For example, if you have a function\n-    /// like\n-    ///\n-    /// ```\n-    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n-    /// ```\n-    ///\n-    /// we can assume in the caller's body that `'b: 'a` and that `T:\n-    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n-    /// add those assumptions into the outlives-environment.\n-    ///\n-    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n-    #[instrument(level = \"debug\", skip(self, infcx))]\n-    fn add_implied_bounds<'a>(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-    ) {\n-        for ty in fn_sig_tys {\n-            let ty = infcx.resolve_vars_if_possible(ty);\n-            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty);\n-            self.add_outlives_bounds(Some(infcx), implied_bounds)\n-        }\n-    }\n-}"}, {"sha": "8396cb1ae0aab1fef56c2c0213077fb18b0678f5", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d037f1843e9472d547dc22edbfb18788174c0754", "patch": "@@ -1,5 +1,5 @@\n-use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n+use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -107,6 +107,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n         let mut outlives_environment = OutlivesEnvironment::builder(param_env);\n         outlives_environment.add_implied_bounds(infcx, assumed_wf_types, body_id);\n         let outlives_environment = outlives_environment.build();\n+\n         infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n     })\n }\n@@ -695,9 +696,11 @@ fn resolve_regions_with_wf_tys<'tcx>(\n     // region constraints get added and solved there and we need to test each\n     // call individually.\n     tcx.infer_ctxt().enter(|infcx| {\n-        let mut outlives_environment = OutlivesEnvironment::builder(param_env);\n-        outlives_environment.add_implied_bounds(&infcx, wf_tys.clone(), id);\n-        let outlives_environment = outlives_environment.build();\n+        let outlives_environment = OutlivesEnvironment::with_bounds(\n+            param_env,\n+            Some(&infcx),\n+            infcx.implied_bounds_tys(param_env, id, wf_tys.iter().map(|ty| *ty)),\n+        );\n         let region_bound_pairs = outlives_environment.region_bound_pairs();\n \n         add_constraints(&infcx, region_bound_pairs);"}, {"sha": "72af5d79e0915a5d063e710b62fbbc347832aab5", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=d037f1843e9472d547dc22edbfb18788174c0754", "patch": "@@ -65,9 +65,9 @@\n //! cause use after frees with purely safe code in the same way as specializing\n //! on traits with methods can.\n \n-use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::constrained_generic_params as cgp;\n use crate::errors::SubstsOnOverriddenImpl;\n+use crate::outlives::outlives_bounds::InferCtxtExt;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -147,10 +147,17 @@ fn get_impl_substs<'tcx>(\n         let assumed_wf_types =\n             ocx.assumed_wf_types(param_env, tcx.def_span(impl1_def_id), impl1_def_id);\n \n-        let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n+      let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n         let impl2_substs =\n             translate_substs(infcx, param_env, impl1_def_id.to_def_id(), impl1_substs, impl2_node);\n \n+\n+\n+\n+\n+\n+\n+\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n             ocx.infcx.report_fulfillment_errors(&errors, None, false);"}, {"sha": "769a3e7e11a830c3b213d1bc93865f93651c5cef", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d037f1843e9472d547dc22edbfb18788174c0754/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=d037f1843e9472d547dc22edbfb18788174c0754", "patch": "@@ -1,22 +1,30 @@\n use rustc_hir as hir;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_hir::HirId;\n+use rustc_middle::ty::{self, ParamEnv, Ty};\n use rustc_trait_selection::infer::InferCtxt;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::NoSolution;\n use rustc_trait_selection::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n \n-pub trait InferCtxtExt<'tcx> {\n+pub trait InferCtxtExt<'a, 'tcx> {\n     fn implied_outlives_bounds(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n         ty: Ty<'tcx>,\n     ) -> Vec<OutlivesBound<'tcx>>;\n+\n+    fn implied_bounds_tys(\n+        &'a self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        body_id: hir::HirId,\n+        tys: impl IntoIterator<Item = Ty<'tcx>> + 'a,\n+    ) -> Box<dyn Iterator<Item = OutlivesBound<'tcx>> + 'a>;\n }\n \n-impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n+impl<'a, 'cx, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'cx, 'tcx> {\n     /// Implied bounds are region relationships that we deduce\n     /// automatically. The idea is that (e.g.) a caller must check that a\n     /// function's argument types are well-formed immediately before\n@@ -87,4 +95,20 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n \n         output\n     }\n+\n+    fn implied_bounds_tys(\n+        &'a self,\n+        param_env: ParamEnv<'tcx>,\n+        body_id: HirId,\n+        tys: impl IntoIterator<Item = Ty<'tcx>> + 'a,\n+    ) -> Box<dyn Iterator<Item = OutlivesBound<'tcx>> + 'a> {\n+        Box::new(\n+            tys.into_iter()\n+                .map(move |ty| {\n+                    let ty = self.resolve_vars_if_possible(ty);\n+                    self.implied_outlives_bounds(param_env, body_id, ty)\n+                })\n+                .flatten(),\n+        )\n+    }\n }"}]}