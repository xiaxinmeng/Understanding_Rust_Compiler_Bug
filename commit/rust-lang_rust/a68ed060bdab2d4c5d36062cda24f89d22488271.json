{"sha": "a68ed060bdab2d4c5d36062cda24f89d22488271", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OGVkMDYwYmRhYjJkNGM1ZDM2MDYyY2RhMjRmODlkMjI0ODgyNzE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:09:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:12:31Z"}, "message": "Split `ct_err` out into `CommonConsts`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "6dd0812a2e3d566fa7a149e3a76939efff4360d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd0812a2e3d566fa7a149e3a76939efff4360d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a68ed060bdab2d4c5d36062cda24f89d22488271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a68ed060bdab2d4c5d36062cda24f89d22488271", "html_url": "https://github.com/rust-lang/rust/commit/a68ed060bdab2d4c5d36062cda24f89d22488271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a68ed060bdab2d4c5d36062cda24f89d22488271/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541de81f8e44053ab76ff5f03e3d36bde4b2457c", "url": "https://api.github.com/repos/rust-lang/rust/commits/541de81f8e44053ab76ff5f03e3d36bde4b2457c", "html_url": "https://github.com/rust-lang/rust/commit/541de81f8e44053ab76ff5f03e3d36bde4b2457c"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "079385368f883885981e8f5478d074007a9ca133", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a68ed060bdab2d4c5d36062cda24f89d22488271/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68ed060bdab2d4c5d36062cda24f89d22488271/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=a68ed060bdab2d4c5d36062cda24f89d22488271", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n             match c.val {\n                 ConstValue::Infer(InferConst::Var(vid)) => {\n                     self.err = Some(FixupError::UnresolvedConst(vid));\n-                    return self.tcx().types.ct_err;\n+                    return self.tcx().consts.err;\n                 }\n                 ConstValue::Infer(InferConst::Fresh(_)) => {\n                     bug!(\"Unexpected const in full const resolver: {:?}\", c);"}, {"sha": "c07175d9451e647e15cecb2f3cfe1d5d570c4724", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a68ed060bdab2d4c5d36062cda24f89d22488271/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68ed060bdab2d4c5d36062cda24f89d22488271/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a68ed060bdab2d4c5d36062cda24f89d22488271", "patch": "@@ -231,8 +231,10 @@ pub struct CommonLifetimes<'tcx> {\n     pub re_empty: Region<'tcx>,\n     pub re_static: Region<'tcx>,\n     pub re_erased: Region<'tcx>,\n+}\n \n-    pub ct_err: &'tcx Const<'tcx>,\n+pub struct CommonConsts<'tcx> {\n+    pub err: &'tcx Const<'tcx>,\n }\n \n pub struct LocalTableInContext<'a, V: 'a> {\n@@ -945,7 +947,7 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: mk(Bool),\n             char: mk(Char),\n             never: mk(Never),\n-            err,\n+            err: mk(Error),\n             isize: mk(Int(ast::IntTy::Isize)),\n             i8: mk(Int(ast::IntTy::I8)),\n             i16: mk(Int(ast::IntTy::I16)),\n@@ -982,6 +984,20 @@ impl<'tcx> CommonLifetimes<'tcx> {\n     }\n }\n \n+impl<'tcx> CommonConsts<'tcx> {\n+    fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {\n+        let mk_const = |c| {\n+            interners.const_.borrow_mut().intern(c, |c| {\n+                Interned(interners.arena.alloc(c))\n+            }).0\n+        };\n+\n+        CommonConsts {\n+            err: mk_const(ty::Const::zero_sized(types.err)),\n+        }\n+    }\n+}\n+\n // This struct contains information regarding the `ReFree(FreeRegion)` corresponding to a lifetime\n // conflict.\n #[derive(Debug)]\n@@ -1032,6 +1048,9 @@ pub struct GlobalCtxt<'tcx> {\n     /// Common lifetimes, pre-interned for your convenience.\n     pub lifetimes: CommonLifetimes<'tcx>,\n \n+    /// Common consts, pre-interned for your convenience.\n+    pub consts: CommonConsts<'tcx>,\n+\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     trait_map: FxHashMap<DefIndex,\n@@ -1231,6 +1250,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let interners = CtxtInterners::new(&arenas.interner);\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n+        let common_consts = CommonConsts::new(&interners, &common_types);\n         let dep_graph = hir.dep_graph.clone();\n         let max_cnum = cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n@@ -1286,6 +1306,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             dep_graph,\n             types: common_types,\n             lifetimes: common_lifetimes,\n+            consts: common_consts,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n                 let exports: Vec<_> = v.into_iter().map(|e| {"}, {"sha": "f9d83146e30c32071a05e3c64018bb6eb09c699d", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a68ed060bdab2d4c5d36062cda24f89d22488271/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a68ed060bdab2d4c5d36062cda24f89d22488271/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=a68ed060bdab2d4c5d36062cda24f89d22488271", "patch": "@@ -594,7 +594,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                                     ),\n                                 )\n                                 .emit();\n-                            return self.tcx().types.ct_err;\n+                            return self.tcx().consts.err;\n                         }\n                         ct\n                     }\n@@ -864,7 +864,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Resolver<'cx, 'gcx, 'tcx> {\n                 );\n                 // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n                 // accept a &'tcx ty::Const.\n-                self.tcx().types.ct_err\n+                self.tcx().consts.err\n             }\n         }\n     }"}]}