{"sha": "caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZWIzZDUyNWQyOTdhZjUxZjdjN2I1MDlmYWZiYWEzMmRiOWVkM2U=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-07T14:27:46Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T21:40:38Z"}, "message": "Move MIR body loading to a machine function", "tree": {"sha": "fbe4ee4238626870afdb2fff927682067e739e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe4ee4238626870afdb2fff927682067e739e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "html_url": "https://github.com/rust-lang/rust/commit/caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d54aa0c165da52560e5c032b4c65bb11833e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d54aa0c165da52560e5c032b4c65bb11833e0e", "html_url": "https://github.com/rust-lang/rust/commit/f6d54aa0c165da52560e5c032b4c65bb11833e0e"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "c28dad5d23968546a8e6b9626ff9202120b537b2", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "patch": "@@ -200,6 +200,22 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     type MemoryExtra = MemoryExtra;\n \n+    fn load_mir(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        instance: ty::InstanceDef<'tcx>,\n+    ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n+        match instance {\n+            ty::InstanceDef::Item(def) => {\n+                if ecx.tcx.is_ctfe_mir_available(def.did) {\n+                    Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n+                } else {\n+                    throw_unsup!(NoMirFor(def.did))\n+                }\n+            }\n+            _ => Ok(ecx.tcx.instance_mir(instance)),\n+        }\n+    }\n+\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,"}, {"sha": "6d7781671d8cc46503a0ed70322541d46bc64f7d", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "patch": "@@ -477,16 +477,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Some(promoted) = promoted {\n             return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n         }\n-        match instance {\n-            ty::InstanceDef::Item(def) => {\n-                if self.tcx.is_ctfe_mir_available(def.did) {\n-                    Ok(self.tcx.mir_for_ctfe_opt_const_arg(def))\n-                } else {\n-                    throw_unsup!(NoMirFor(def.did))\n-                }\n-            }\n-            _ => Ok(self.tcx.instance_mir(instance)),\n-        }\n+        M::load_mir(self, instance)\n     }\n \n     /// Call this on things you got out of the MIR (so it is as generic as the current"}, {"sha": "32d60ef2ab192c09f59dd861ea4cfc39672eed29", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "patch": "@@ -131,6 +131,16 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n+    /// Entry point for obtaining the MIR of anything that should get evaluated.\n+    /// So not just functions and shims, but also const/static initializers, anonymous\n+    /// constants, ...\n+    fn load_mir(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        instance: ty::InstanceDef<'tcx>,\n+    ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n+        Ok(ecx.tcx.instance_mir(instance))\n+    }\n+\n     /// Entry point to all function calls.\n     ///\n     /// Returns either the mir to use for the call, or `None` if execution should"}, {"sha": "c8025503656971f18ffa3bde3bc4b3204823b502", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3d525d297af51f7c7b509fafbaa32db9ed3e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=caeb3d525d297af51f7c7b509fafbaa32db9ed3e", "patch": "@@ -184,6 +184,13 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n \n     type MemoryExtra = ();\n \n+    fn load_mir(\n+        _ecx: &InterpCx<'mir, 'tcx, Self>,\n+        _instance: ty::InstanceDef<'tcx>,\n+    ) -> InterpResult<'tcx, &'tcx Body<'tcx>> {\n+        throw_machine_stop_str!(\"calling functions isn't supported in ConstProp\")\n+    }\n+\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,"}]}