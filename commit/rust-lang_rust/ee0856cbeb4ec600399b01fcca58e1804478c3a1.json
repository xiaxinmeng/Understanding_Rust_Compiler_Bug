{"sha": "ee0856cbeb4ec600399b01fcca58e1804478c3a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDg1NmNiZWI0ZWM2MDAzOTliMDFmY2NhNThlMTgwNDQ3OGMzYTE=", "commit": {"author": {"name": "Peter F\u00fcrstenau", "email": "fuerstenau@mathematik.tu-darmstadt.de", "date": "2018-12-18T12:55:04Z"}, "committer": {"name": "Peter F\u00fcrstenau", "email": "fuerstenau@mathematik.tu-darmstadt.de", "date": "2018-12-18T12:57:38Z"}, "message": "Recomend `.as_ref()?` in certain situations", "tree": {"sha": "f1c8ba9a9f815bcba8c230d828a59e4b03439b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c8ba9a9f815bcba8c230d828a59e4b03439b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0856cbeb4ec600399b01fcca58e1804478c3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0856cbeb4ec600399b01fcca58e1804478c3a1", "html_url": "https://github.com/rust-lang/rust/commit/ee0856cbeb4ec600399b01fcca58e1804478c3a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0856cbeb4ec600399b01fcca58e1804478c3a1/comments", "author": {"login": "fuerstenau", "id": 44474815, "node_id": "MDQ6VXNlcjQ0NDc0ODE1", "avatar_url": "https://avatars.githubusercontent.com/u/44474815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuerstenau", "html_url": "https://github.com/fuerstenau", "followers_url": "https://api.github.com/users/fuerstenau/followers", "following_url": "https://api.github.com/users/fuerstenau/following{/other_user}", "gists_url": "https://api.github.com/users/fuerstenau/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuerstenau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuerstenau/subscriptions", "organizations_url": "https://api.github.com/users/fuerstenau/orgs", "repos_url": "https://api.github.com/users/fuerstenau/repos", "events_url": "https://api.github.com/users/fuerstenau/events{/privacy}", "received_events_url": "https://api.github.com/users/fuerstenau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fuerstenau", "id": 44474815, "node_id": "MDQ6VXNlcjQ0NDc0ODE1", "avatar_url": "https://avatars.githubusercontent.com/u/44474815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuerstenau", "html_url": "https://github.com/fuerstenau", "followers_url": "https://api.github.com/users/fuerstenau/followers", "following_url": "https://api.github.com/users/fuerstenau/following{/other_user}", "gists_url": "https://api.github.com/users/fuerstenau/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuerstenau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuerstenau/subscriptions", "organizations_url": "https://api.github.com/users/fuerstenau/orgs", "repos_url": "https://api.github.com/users/fuerstenau/repos", "events_url": "https://api.github.com/users/fuerstenau/events{/privacy}", "received_events_url": "https://api.github.com/users/fuerstenau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0ea2288590b7e0cf7f276467ed1851208902fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0ea2288590b7e0cf7f276467ed1851208902fe", "html_url": "https://github.com/rust-lang/rust/commit/8b0ea2288590b7e0cf7f276467ed1851208902fe"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "c7501ccf2d770fc51ba412878db64641b9608943", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee0856cbeb4ec600399b01fcca58e1804478c3a1/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0856cbeb4ec600399b01fcca58e1804478c3a1/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=ee0856cbeb4ec600399b01fcca58e1804478c3a1", "patch": "@@ -84,6 +84,8 @@ impl Pass {\n                             replacement_str = format!(\"Some({}?)\", receiver_str);\n                         }\n                     }\n+                } else if Self::moves_by_default(cx, subject) {\n+                        replacement_str = format!(\"{}.as_ref()?;\", receiver_str);\n                 } else {\n                         replacement_str = format!(\"{}?;\", receiver_str);\n                 }\n@@ -105,6 +107,12 @@ impl Pass {\n         }\n     }\n \n+    fn moves_by_default(cx: &LateContext<'_, '_>, expression: &Expr) -> bool {\n+        let expr_ty = cx.tables.expr_ty(expression);\n+\n+        expr_ty.moves_by_default(cx.tcx, cx.param_env, expression.span)\n+    }\n+\n     fn is_option(cx: &LateContext<'_, '_>, expression: &Expr) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n "}, {"sha": "c6726ee567c3953a6a1761b6bc69b6e06d098501", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ee0856cbeb4ec600399b01fcca58e1804478c3a1/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0856cbeb4ec600399b01fcca58e1804478c3a1/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=ee0856cbeb4ec600399b01fcca58e1804478c3a1", "patch": "@@ -37,11 +37,11 @@ fn returns_something_similar_to_option(a: SeemsOption<u32>) -> SeemsOption<u32>\n     a\n }\n \n-pub struct SomeStruct {\n+pub struct CopyStruct {\n     pub opt: Option<u32>,\n }\n \n-impl SomeStruct {\n+impl CopyStruct {\n     #[rustfmt::skip]\n     pub fn func(&self) -> Option<u32> {\n         if (self.opt).is_none() {\n@@ -62,12 +62,49 @@ impl SomeStruct {\n     }\n }\n \n+#[derive(Clone)]\n+pub struct MoveStruct {\n+    pub opt: Option<Vec<u32>>,\n+}\n+\n+impl MoveStruct {\n+    pub fn ref_func(&self) -> Option<Vec<u32>> {\n+        if self.opt.is_none() {\n+            return None;\n+        }\n+\n+        self.opt.clone()\n+    }\n+\n+    pub fn mov_func_reuse(self) -> Option<Vec<u32>> {\n+        if self.opt.is_none() {\n+            return None;\n+        }\n+\n+        self.opt\n+    }\n+\n+    pub fn mov_func_no_use(self) -> Option<Vec<u32>> {\n+        if self.opt.is_none() {\n+            return None;\n+        }\n+        Some(Vec::new())\n+    }\n+}\n+\n fn main() {\n     some_func(Some(42));\n     some_func(None);\n \n-    let some_struct = SomeStruct { opt: Some(54) };\n-    some_struct.func();\n+    let copy_struct = CopyStruct { opt: Some(54) };\n+    copy_struct.func();\n+\n+    let move_struct = MoveStruct {\n+        opt: Some(vec![42, 1337]),\n+    };\n+    move_struct.ref_func();\n+    move_struct.clone().mov_func_reuse();\n+    move_struct.clone().mov_func_no_use();\n \n     let so = SeemsOption::Some(45);\n     returns_something_similar_to_option(so);"}, {"sha": "4f3b2c65de519936e3f2612868d3db405d22a6d6", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee0856cbeb4ec600399b01fcca58e1804478c3a1/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0856cbeb4ec600399b01fcca58e1804478c3a1/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=ee0856cbeb4ec600399b01fcca58e1804478c3a1", "patch": "@@ -35,5 +35,29 @@ error: this block may be rewritten with the `?` operator\n 59 | |         };\n    | |_________^ help: replace_it_with: `Some(self.opt?)`\n \n-error: aborting due to 4 previous errors\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:72:9\n+   |\n+72 | /         if self.opt.is_none() {\n+73 | |             return None;\n+74 | |         }\n+   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:80:9\n+   |\n+80 | /         if self.opt.is_none() {\n+81 | |             return None;\n+82 | |         }\n+   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:88:9\n+   |\n+88 | /         if self.opt.is_none() {\n+89 | |             return None;\n+90 | |         }\n+   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+\n+error: aborting due to 7 previous errors\n "}]}