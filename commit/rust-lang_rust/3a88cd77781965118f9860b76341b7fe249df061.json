{"sha": "3a88cd77781965118f9860b76341b7fe249df061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhODhjZDc3NzgxOTY1MTE4Zjk4NjBiNzYzNDFiN2ZlMjQ5ZGYwNjE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-22T16:19:12Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-28T21:29:02Z"}, "message": "Implement `#[non_exhaustive]` on variants.\n\nThis commit removes the check that disallows the `#[non_exhaustive]`\nattribute from being placed on enum variants and removes the associated\ntests.\n\nFurther, this commit lowers the visibility of enum variant constructors\nwhen the variant is marked as non-exhaustive.", "tree": {"sha": "b57c8bc923ef6244abbb4e7b0aa8911c276081b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57c8bc923ef6244abbb4e7b0aa8911c276081b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a88cd77781965118f9860b76341b7fe249df061", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlydPJ4ACgkQAXYLT59T\n8VR05BAAgs+gmK8EP3H/p4+g/fGPVYWO1pVd65C7x9uwjRJw/dMOV3CgUno+LkTr\nmzi0MTYM97nor5saycHmYDrC2FM2W7czpjuWD74b/aKwYrNzOCJsIMMO8u42t0Yk\ngWTgcPu332mYUMYsJhdiWLDLhzUU+o5eRCy8xVEXoHKCbjA5ioYaQt+XTRLydF4P\nrz0RWI8oIk0RuRkA5ZKMdJnsOu3BMyLdFEwy5dcYMIeZTr33x+V9z/HPduB3lyBf\nQG6zGBCkFXz5V7hP3hj8BAMLfj82Z9YBJkES+GYtbKnhOgqqUXwEniAQNQVerg7B\n2I50VJgbixp1dGSS5eS1Yz2HivpmOlG9vAMi65TWeHs7KM+tjbqfVlyu6DgjX2f8\nRt0Zt/3jWFWJCJaYEVkgeUkDtmCQjUGDbN4W7WmKjyGygO5CN7uIcurYM+5h+5SY\n5xl5cSM+b7mMzXzERRP+eaOFakMGS0nFmjkq6YbMJ7oQRQYYmujOcH5oVLp5h3W6\nUiHRDCP3V6gwZp61Oin8xhwx2CnKG1pjMYH5CEDLAek9C/rUPcbClyAGJEme6W8L\nAK+trG+uto5BTPlfHzPT1v03zPIhOOQm+ZnsTsUnUBj8swF7MDczZXJ0HH8MCMQJ\nOyBtt+rKgeecF25IIKe501/u6WTwrYE43FYDIllVK9qOJO69AB8=\n=wAXg\n-----END PGP SIGNATURE-----", "payload": "tree b57c8bc923ef6244abbb4e7b0aa8911c276081b7\nparent 4187560bdf513e959e3dc3d720128c0a87ab9c61\nauthor David Wood <david@davidtw.co> 1553271552 +0100\ncommitter David Wood <david@davidtw.co> 1553808542 +0100\n\nImplement `#[non_exhaustive]` on variants.\n\nThis commit removes the check that disallows the `#[non_exhaustive]`\nattribute from being placed on enum variants and removes the associated\ntests.\n\nFurther, this commit lowers the visibility of enum variant constructors\nwhen the variant is marked as non-exhaustive.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a88cd77781965118f9860b76341b7fe249df061", "html_url": "https://github.com/rust-lang/rust/commit/3a88cd77781965118f9860b76341b7fe249df061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a88cd77781965118f9860b76341b7fe249df061/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4187560bdf513e959e3dc3d720128c0a87ab9c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/4187560bdf513e959e3dc3d720128c0a87ab9c61", "html_url": "https://github.com/rust-lang/rust/commit/4187560bdf513e959e3dc3d720128c0a87ab9c61"}], "stats": {"total": 383, "additions": 179, "deletions": 204}, "files": [{"sha": "102057c1380ac6529bd1165d8836b38544b31301", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -1869,6 +1869,11 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n         if adt_kind == AdtKind::Struct && tcx.has_attr(parent_did, \"non_exhaustive\") {\n             debug!(\"found non-exhaustive field list for {:?}\", parent_did);\n             flags = flags | VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n+        } else if let Some(variant_did) = variant_did {\n+            if tcx.has_attr(variant_did, \"non_exhaustive\") {\n+                debug!(\"found non-exhaustive field list for {:?}\", variant_did);\n+                flags = flags | VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n+            }\n         }\n \n         VariantDef {\n@@ -2935,8 +2940,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // Returns `ty::VariantDef` if `def` refers to a struct,\n-    // or variant or their constructors, panics otherwise.\n+    /// Returns `ty::VariantDef` if `def` refers to a struct,\n+    /// or variant or their constructors, panics otherwise.\n     pub fn expect_variant_def(self, def: Def) -> &'tcx VariantDef {\n         match def {\n             Def::Variant(did) => {"}, {"sha": "84237cc1e71332ebcc7ac9cb3af9a92a9c9255de", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -642,13 +642,18 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n         };\n \n-        // Variant constructors have the same visibility as the parent enums.\n+        // Variant constructors have the same visibility as the parent enums, unless marked as\n+        // non-exhaustive, in which case they are lowered to `pub(crate)`.\n         let enum_id = tcx.hir().as_local_hir_id(enum_did).unwrap();\n         let enum_vis = &tcx.hir().expect_item_by_hir_id(enum_id).vis;\n+        let mut ctor_vis = ty::Visibility::from_hir(enum_vis, enum_id, tcx);\n+        if variant.is_field_list_non_exhaustive() && ctor_vis == ty::Visibility::Public {\n+            ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+        }\n \n         Entry {\n             kind: EntryKind::Variant(self.lazy(&data)),\n-            visibility: self.lazy(&ty::Visibility::from_hir(enum_vis, enum_id, tcx)),\n+            visibility: self.lazy(&ctor_vis),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),"}, {"sha": "741264d1dbe184ee303b5d0cef9c27e97a3ce9e6", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -192,14 +192,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn invalid_non_exhaustive_attribute(&self, variant: &Variant) {\n-        let has_non_exhaustive = attr::contains_name(&variant.node.attrs, \"non_exhaustive\");\n-        if has_non_exhaustive {\n-            self.err_handler().span_err(variant.span,\n-                                        \"#[non_exhaustive] is not yet supported on variants\");\n-        }\n-    }\n-\n     fn invalid_visibility(&self, vis: &Visibility, note: Option<&str>) {\n         if let VisibilityKind::Inherited = vis.node {\n             return\n@@ -608,7 +600,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Enum(ref def, _) => {\n                 for variant in &def.variants {\n-                    self.invalid_non_exhaustive_attribute(variant);\n                     for field in variant.node.data.fields() {\n                         self.invalid_visibility(&field.vis, None);\n                     }"}, {"sha": "8c3d80b323ffd1adc87e5bd3404660a85d54be34", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -244,7 +244,26 @@ fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                     match tcx.hir().get_by_hir_id(parent_hir_id) {\n                         Node::Variant(..) => {\n                             let parent_did = tcx.hir().local_def_id_from_hir_id(parent_hir_id);\n-                            return def_id_visibility(tcx, parent_did);\n+                            let (mut ctor_vis, mut span, mut descr) = def_id_visibility(\n+                                tcx, parent_did,\n+                            );\n+\n+                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id));\n+                            let ctor_did = tcx.hir().local_def_id_from_hir_id(\n+                                vdata.ctor_hir_id().unwrap());\n+                            let variant = adt_def.variant_with_ctor_id(ctor_did);\n+\n+                            if variant.is_field_list_non_exhaustive() &&\n+                                ctor_vis == ty::Visibility::Public\n+                            {\n+                                ctor_vis = ty::Visibility::Restricted(\n+                                    DefId::local(CRATE_DEF_INDEX));\n+                                let attrs = tcx.get_attrs(variant.def_id);\n+                                span = attr::find_by_name(&attrs, \"non_exhaustive\").unwrap().span;\n+                                descr = \"crate-visible\";\n+                            }\n+\n+                            return (ctor_vis, span, descr);\n                         }\n                         Node::Item(..) => {\n                             let item = match tcx.hir().get_by_hir_id(parent_hir_id) {"}, {"sha": "7ce264db755db267c2e1d17e8eb013c7e7a8174c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -588,6 +588,14 @@ impl<'a> Resolver<'a> {\n         let def = Def::Variant(def_id);\n         self.define(parent, ident, TypeNS, (def, vis, variant.span, expansion));\n \n+        // If the variant is marked as non_exhaustive then lower the visibility to within the\n+        // crate.\n+        let mut ctor_vis = vis;\n+        let has_non_exhaustive = attr::contains_name(&variant.node.attrs, \"non_exhaustive\");\n+        if has_non_exhaustive && vis == ty::Visibility::Public {\n+            ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+        }\n+\n         // Define a constructor name in the value namespace.\n         // Braced variants, unlike structs, generate unusable names in\n         // value namespace, they are reserved for possible future use.\n@@ -597,7 +605,7 @@ impl<'a> Resolver<'a> {\n         let ctor_def_id = self.definitions.local_def_id(ctor_node_id);\n         let ctor_kind = CtorKind::from_ast(&variant.node.data);\n         let ctor_def = Def::Ctor(ctor_def_id, CtorOf::Variant, ctor_kind);\n-        self.define(parent, ident, ValueNS, (ctor_def, vis, variant.span, expansion));\n+        self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, variant.span, expansion));\n     }\n \n     /// Constructs the reduced graph for one foreign item."}, {"sha": "b3e2fa2c6208e9b6ed04b3f76c70ea61d2f99a76", "filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/auxiliary/enums.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-#![crate_type = \"rlib\"]\n-#![feature(non_exhaustive)]\n-\n-#[non_exhaustive]\n-pub enum NonExhaustiveEnum {\n-    Unit,\n-    Tuple(u32),\n-    Struct { field: u32 }\n-}"}, {"sha": "08b14d0df940850ead6d6c78bdd7d9b93c9bddca", "filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/auxiliary/structs.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-#![feature(non_exhaustive)]\n-\n-#[non_exhaustive]\n-pub struct NormalStruct {\n-    pub first_field: u16,\n-    pub second_field: u16,\n-}\n-\n-#[non_exhaustive]\n-pub struct UnitStruct;\n-\n-#[non_exhaustive]\n-pub struct TupleStruct (pub u16, pub u16);"}, {"sha": "56a73d8ab608896b1e4a98d475a975071354c9a4", "filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/auxiliary/variants.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,9 +0,0 @@\n-// run-pass\n-#![crate_type = \"rlib\"]\n-#![feature(non_exhaustive)]\n-\n-pub enum NonExhaustiveVariants {\n-    #[non_exhaustive] Unit,\n-    #[non_exhaustive] Tuple(u32),\n-    #[non_exhaustive] Struct { field: u32 }\n-}"}, {"sha": "f7e9c5384961205e26619eca7ff5c643ea82cc73", "filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/enums.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fenums.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,53 +0,0 @@\n-// run-pass\n-// aux-build:enums.rs\n-extern crate enums;\n-\n-// ignore-pretty issue #37199\n-\n-use enums::NonExhaustiveEnum;\n-\n-fn main() {\n-    let enum_unit = NonExhaustiveEnum::Unit;\n-\n-    match enum_unit {\n-        NonExhaustiveEnum::Unit => 1,\n-        NonExhaustiveEnum::Tuple(_) => 2,\n-        // This particular arm tests that a enum marked as non-exhaustive\n-        // will not error if its variants are matched exhaustively.\n-        NonExhaustiveEnum::Struct { field } => field,\n-        _ => 0 // no error with wildcard\n-    };\n-\n-    match enum_unit {\n-        _ => \"no error with only wildcard\"\n-    };\n-\n-\n-    // issue #53549 - check that variant constructors can still be called normally.\n-\n-    match NonExhaustiveEnum::Unit {\n-        NonExhaustiveEnum::Unit => {},\n-        _ => {}\n-    };\n-\n-    match NonExhaustiveEnum::Tuple(2) {\n-        NonExhaustiveEnum::Tuple(2) => {},\n-        _ => {}\n-    };\n-\n-    match (NonExhaustiveEnum::Unit {}) {\n-        NonExhaustiveEnum::Unit {} => {},\n-        _ => {}\n-    };\n-\n-    match (NonExhaustiveEnum::Tuple { 0: 2 }) {\n-        NonExhaustiveEnum::Tuple { 0: 2 } => {},\n-        _ => {}\n-    };\n-\n-    match (NonExhaustiveEnum::Struct { field: 2 }) {\n-        NonExhaustiveEnum::Struct { field: 2 } => {},\n-        _ => {}\n-    };\n-\n-}"}, {"sha": "3cd7234269e1d7c181f89f2622f856d238d675ee", "filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/structs.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fstructs.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,20 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-// aux-build:structs.rs\n-extern crate structs;\n-\n-use structs::{NormalStruct, UnitStruct, TupleStruct};\n-\n-// We only test matching here as we cannot create non-exhaustive\n-// structs from another crate. ie. they'll never pass in run-pass tests.\n-\n-fn match_structs(ns: NormalStruct, ts: TupleStruct, us: UnitStruct) {\n-    let NormalStruct { first_field, second_field, .. } = ns;\n-\n-    let TupleStruct { 0: first, 1: second, .. } = ts;\n-\n-    let UnitStruct { .. } = us;\n-}\n-\n-fn main() { }"}, {"sha": "90b8219e2a3c0ebc1721405e07952874b5db47cc", "filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/variants.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2008-non-exhaustive%2Fvariants.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-// aux-build:variants.rs\n-extern crate variants;\n-\n-use variants::NonExhaustiveVariants;\n-\n-/*\n- * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n- * variants. See issue #44109 and PR 45394.\n- */\n-// ignore-test\n-\n-fn main() {\n-    let variant_tuple = NonExhaustiveVariants::Tuple { 0: 340 };\n-    let variant_struct = NonExhaustiveVariants::Struct { field: 340 };\n-\n-    match variant_struct {\n-        NonExhaustiveVariants::Unit => \"\",\n-        NonExhaustiveVariants::Struct { field, .. } => \"\",\n-        NonExhaustiveVariants::Tuple(fe_tpl, ..) => \"\"\n-    };\n-}"}, {"sha": "7423a970e2e3bd43ddf3efa6331ccf580283c819", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -12,4 +12,48 @@ fn main() {\n         NonExhaustiveEnum::Tuple(_) => \"second\",\n         NonExhaustiveEnum::Struct { .. } => \"third\"\n     };\n+\n+    // Everything below this is expected to compile successfully.\n+\n+    let enum_unit = NonExhaustiveEnum::Unit;\n+\n+    match enum_unit {\n+        NonExhaustiveEnum::Unit => 1,\n+        NonExhaustiveEnum::Tuple(_) => 2,\n+        // This particular arm tests that a enum marked as non-exhaustive\n+        // will not error if its variants are matched exhaustively.\n+        NonExhaustiveEnum::Struct { field } => field,\n+        _ => 0 // no error with wildcard\n+    };\n+\n+    match enum_unit {\n+        _ => \"no error with only wildcard\"\n+    };\n+\n+    // #53549: Check that variant constructors can still be called normally.\n+    match NonExhaustiveEnum::Unit {\n+        NonExhaustiveEnum::Unit => {},\n+        _ => {}\n+    };\n+\n+    match NonExhaustiveEnum::Tuple(2) {\n+        NonExhaustiveEnum::Tuple(2) => {},\n+        _ => {}\n+    };\n+\n+    match (NonExhaustiveEnum::Unit {}) {\n+        NonExhaustiveEnum::Unit {} => {},\n+        _ => {}\n+    };\n+\n+    match (NonExhaustiveEnum::Tuple { 0: 2 }) {\n+        NonExhaustiveEnum::Tuple { 0: 2 } => {},\n+        _ => {}\n+    };\n+\n+    match (NonExhaustiveEnum::Struct { field: 2 }) {\n+        NonExhaustiveEnum::Struct { field: 2 } => {},\n+        _ => {}\n+    };\n+\n }"}, {"sha": "a3626bf60b2609642497c6dc6f30898b4692e19d", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+\n #![feature(non_exhaustive)]\n \n #[non_exhaustive]", "previous_filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/enums_same_crate.rs"}, {"sha": "94ac588d24083d92a8ee1a0370f7e6d469d9bbbe", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.rs", "status": "renamed", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -35,3 +35,15 @@ fn main() {\n     let UnitStruct { } = us;\n     //~^ ERROR `..` required with struct marked as non-exhaustive\n }\n+\n+// Everything below this is expected to compile successfully.\n+\n+// We only test matching here as we cannot create non-exhaustive\n+// structs from another crate. ie. they'll never pass in run-pass tests.\n+fn match_structs(ns: NormalStruct, ts: TupleStruct, us: UnitStruct) {\n+    let NormalStruct { first_field, second_field, .. } = ns;\n+\n+    let TupleStruct { 0: first, 1: second, .. } = ts;\n+\n+    let UnitStruct { .. } = us;\n+}", "previous_filename": "src/test/ui/rfc-2008-non-exhaustive/structs.rs"}, {"sha": "ecfad88a825520c4923d4685d603baf45cc1b456", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -1,29 +1,29 @@\n error[E0423]: expected function, found struct `TupleStruct`\n-  --> $DIR/structs.rs:20:14\n+  --> $DIR/struct.rs:20:14\n    |\n LL |     let ts = TupleStruct(640, 480);\n    |              ^^^^^^^^^^^ constructor is not visible here due to private fields\n \n error[E0423]: expected value, found struct `UnitStruct`\n-  --> $DIR/structs.rs:29:14\n+  --> $DIR/struct.rs:29:14\n    |\n LL |     let us = UnitStruct;\n    |              ^^^^^^^^^^ constructor is not visible here due to private fields\n \n error[E0603]: tuple struct `TupleStruct` is private\n-  --> $DIR/structs.rs:23:32\n+  --> $DIR/struct.rs:23:32\n    |\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n    |                                ^^^^^^^^^^^\n \n error[E0603]: unit struct `UnitStruct` is private\n-  --> $DIR/structs.rs:32:32\n+  --> $DIR/struct.rs:32:32\n    |\n LL |     let us_explicit = structs::UnitStruct;\n    |                                ^^^^^^^^^^\n \n error[E0639]: cannot create non-exhaustive struct using struct expression\n-  --> $DIR/structs.rs:7:14\n+  --> $DIR/struct.rs:7:14\n    |\n LL |       let fr = FunctionalRecord {\n    |  ______________^\n@@ -35,25 +35,25 @@ LL | |     };\n    | |_____^\n \n error[E0639]: cannot create non-exhaustive struct using struct expression\n-  --> $DIR/structs.rs:14:14\n+  --> $DIR/struct.rs:14:14\n    |\n LL |     let ns = NormalStruct { first_field: 640, second_field: 480 };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0638]: `..` required with struct marked as non-exhaustive\n-  --> $DIR/structs.rs:17:9\n+  --> $DIR/struct.rs:17:9\n    |\n LL |     let NormalStruct { first_field, second_field } = ns;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0638]: `..` required with struct marked as non-exhaustive\n-  --> $DIR/structs.rs:26:9\n+  --> $DIR/struct.rs:26:9\n    |\n LL |     let TupleStruct { 0: first_field, 1: second_field } = ts;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0638]: `..` required with struct marked as non-exhaustive\n-  --> $DIR/structs.rs:35:9\n+  --> $DIR/struct.rs:35:9\n    |\n LL |     let UnitStruct { } = us;\n    |         ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2008-non-exhaustive/structs.stderr"}, {"sha": "2b1d7d9ac503015ba7d7f5ccf6a7103ed6931c75", "filename": "src/test/ui/rfc-2008-non-exhaustive/structs_same_crate.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+\n #![allow(unused_variables)]\n #![feature(non_exhaustive)]\n ", "previous_filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/structs_same_crate.rs"}, {"sha": "bc346aea51cfc33748d6cc1d80731ad3ab4754e8", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.rs", "status": "renamed", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -1,26 +1,33 @@\n // aux-build:variants.rs\n+\n extern crate variants;\n \n use variants::NonExhaustiveVariants;\n \n-/*\n- * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n- * variants. See issue #44109 and PR 45394.\n- */\n-// ignore-test\n-\n fn main() {\n     let variant_struct = NonExhaustiveVariants::Struct { field: 640 };\n     //~^ ERROR cannot create non-exhaustive variant\n \n-    let variant_tuple = NonExhaustiveVariants::Tuple { 0: 640 };\n-    //~^ ERROR cannot create non-exhaustive variant\n+    let variant_tuple = NonExhaustiveVariants::Tuple(640);\n+    //~^ ERROR tuple variant `Tuple` is private [E0603]\n+\n+    let variant_unit = NonExhaustiveVariants::Unit;\n+    //~^ ERROR unit variant `Unit` is private [E0603]\n \n     match variant_struct {\n         NonExhaustiveVariants::Unit => \"\",\n+        //~^ ERROR unit variant `Unit` is private [E0603]\n         NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n-        //~^ ERROR `..` required with variant marked as non-exhaustive\n+        //~^ ERROR tuple variant `Tuple` is private [E0603]\n         NonExhaustiveVariants::Struct { field } => \"\"\n         //~^ ERROR `..` required with variant marked as non-exhaustive\n     };\n+\n+    if let NonExhaustiveVariants::Tuple(fe_tpl) = variant_struct {\n+        //~^ ERROR tuple variant `Tuple` is private [E0603]\n+    }\n+\n+    if let NonExhaustiveVariants::Struct { field } = variant_struct {\n+        //~^ ERROR `..` required with variant marked as non-exhaustive\n+    }\n }", "previous_filename": "src/test/ui/rfc-2008-non-exhaustive/variants.rs"}, {"sha": "edfca78915017858585c7ec7c59a49ae61e2fe60", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -0,0 +1,52 @@\n+error[E0603]: tuple variant `Tuple` is private\n+  --> $DIR/variant.rs:11:48\n+   |\n+LL |     let variant_tuple = NonExhaustiveVariants::Tuple(640);\n+   |                                                ^^^^^\n+\n+error[E0603]: unit variant `Unit` is private\n+  --> $DIR/variant.rs:14:47\n+   |\n+LL |     let variant_unit = NonExhaustiveVariants::Unit;\n+   |                                               ^^^^\n+\n+error[E0603]: unit variant `Unit` is private\n+  --> $DIR/variant.rs:18:32\n+   |\n+LL |         NonExhaustiveVariants::Unit => \"\",\n+   |                                ^^^^\n+\n+error[E0603]: tuple variant `Tuple` is private\n+  --> $DIR/variant.rs:20:32\n+   |\n+LL |         NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n+   |                                ^^^^^\n+\n+error[E0603]: tuple variant `Tuple` is private\n+  --> $DIR/variant.rs:26:35\n+   |\n+LL |     if let NonExhaustiveVariants::Tuple(fe_tpl) = variant_struct {\n+   |                                   ^^^^^\n+\n+error[E0639]: cannot create non-exhaustive variant using struct expression\n+  --> $DIR/variant.rs:8:26\n+   |\n+LL |     let variant_struct = NonExhaustiveVariants::Struct { field: 640 };\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0638]: `..` required with variant marked as non-exhaustive\n+  --> $DIR/variant.rs:22:9\n+   |\n+LL |         NonExhaustiveVariants::Struct { field } => \"\"\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0638]: `..` required with variant marked as non-exhaustive\n+  --> $DIR/variant.rs:30:12\n+   |\n+LL |     if let NonExhaustiveVariants::Struct { field } = variant_struct {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors occurred: E0603, E0638, E0639.\n+For more information about an error, try `rustc --explain E0603`."}, {"sha": "9ed244144dff93fe1ba8e2654a716847cc1039fc", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_create.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_create.rs?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,17 +0,0 @@\n-#![feature(non_exhaustive)]\n-\n-/*\n- * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n- * variants. See issue #44109 and PR 45394.\n- */\n-\n-pub enum NonExhaustiveVariants {\n-    #[non_exhaustive] Unit,\n-    //~^ ERROR #[non_exhaustive] is not yet supported on variants\n-    #[non_exhaustive] Tuple(u32),\n-    //~^ ERROR #[non_exhaustive] is not yet supported on variants\n-    #[non_exhaustive] Struct { field: u32 }\n-    //~^ ERROR #[non_exhaustive] is not yet supported on variants\n-}\n-\n-fn main() { }"}, {"sha": "5b099d58ec467ef4b313ac3629127317d09e7163", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_create.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_create.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4187560bdf513e959e3dc3d720128c0a87ab9c61/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_create.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_create.stderr?ref=4187560bdf513e959e3dc3d720128c0a87ab9c61", "patch": "@@ -1,20 +0,0 @@\n-error: #[non_exhaustive] is not yet supported on variants\n-  --> $DIR/variants_create.rs:9:23\n-   |\n-LL |     #[non_exhaustive] Unit,\n-   |                       ^^^^\n-\n-error: #[non_exhaustive] is not yet supported on variants\n-  --> $DIR/variants_create.rs:11:23\n-   |\n-LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^^^^^^\n-\n-error: #[non_exhaustive] is not yet supported on variants\n-  --> $DIR/variants_create.rs:13:23\n-   |\n-LL |     #[non_exhaustive] Struct { field: u32 }\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "470a5ea9833adafb95b7e566e94468277e25c623", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_same_crate.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a88cd77781965118f9860b76341b7fe249df061/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs?ref=3a88cd77781965118f9860b76341b7fe249df061", "patch": "@@ -1,11 +1,6 @@\n // run-pass\n-#![feature(non_exhaustive)]\n \n-/*\n- * The initial implementation of #[non_exhaustive] (RFC 2008) does not include support for\n- * variants. See issue #44109 and PR 45394.\n- */\n-// ignore-test\n+#![feature(non_exhaustive)]\n \n pub enum NonExhaustiveVariants {\n     #[non_exhaustive] Unit,", "previous_filename": "src/test/run-pass/rfcs/rfc-2008-non-exhaustive/variants_same_crate.rs"}]}