{"sha": "3566812b041280af5a29056d36cdc516c3c14b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NjY4MTJiMDQxMjgwYWY1YTI5MDU2ZDM2Y2RjNTE2YzNjMTRiOTQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-15T13:47:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-15T13:47:40Z"}, "message": "Rollup merge of #56841 - phansch:add_various_compiletest_unittests, r=oli-obk\n\nAdd some unit tests to compiletest\n\nBased on #56792, otherwise the tests won't be executed on CI.\n\nJust a small start, I would like to add more testing to compiletest in the future but that will require some refactoring first.\n\ncc #47606", "tree": {"sha": "5eb6a523c684e01d99f08046d6613904e007b3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb6a523c684e01d99f08046d6613904e007b3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3566812b041280af5a29056d36cdc516c3c14b94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFQX9CRBK7hj4Ov3rIwAAdHIIADf/DI2kJEsqnuwKUOcMxXNu\nQq2TeAajKf09CT40Y/TBkBN/k/LvpOG9T3yiHw8qTI6ktJBqiJzypPSzn+EnXEXv\njiQw3Nh4EOdKHn/PwXGojTvQlofBSngY383+Z6ejRrM9ll8A29rDhkHP7PP6G5KT\ntlRJTMlxx8z3GR6JmWiFIHntZos+s9kj84XZ/fnuNRpcdWdLJ7nxiZ8RjY3tbOMz\nwje4LKOHIjx6kz1zPCTmHX4FRr55TRs9VLXt1sWGjcntUroVcd94PURBO6sLycH0\nmU5TxgZKShIWbN++tMmaOYk+0LOWs6EgImezbxrSYrQgK89S+R87Z1rXiWaqjE0=\n=F2fu\n-----END PGP SIGNATURE-----\n", "payload": "tree 5eb6a523c684e01d99f08046d6613904e007b3d6\nparent eed969361658be1651e76be6880b5688d1a5455d\nparent 9637c27fb531dc4a030bc978ebff4335baebc28d\nauthor Pietro Albini <pietro@pietroalbini.org> 1544881660 +0100\ncommitter GitHub <noreply@github.com> 1544881660 +0100\n\nRollup merge of #56841 - phansch:add_various_compiletest_unittests, r=oli-obk\n\nAdd some unit tests to compiletest\n\nBased on #56792, otherwise the tests won't be executed on CI.\n\nJust a small start, I would like to add more testing to compiletest in the future but that will require some refactoring first.\n\ncc #47606\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3566812b041280af5a29056d36cdc516c3c14b94", "html_url": "https://github.com/rust-lang/rust/commit/3566812b041280af5a29056d36cdc516c3c14b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3566812b041280af5a29056d36cdc516c3c14b94/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed969361658be1651e76be6880b5688d1a5455d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed969361658be1651e76be6880b5688d1a5455d", "html_url": "https://github.com/rust-lang/rust/commit/eed969361658be1651e76be6880b5688d1a5455d"}, {"sha": "9637c27fb531dc4a030bc978ebff4335baebc28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9637c27fb531dc4a030bc978ebff4335baebc28d", "html_url": "https://github.com/rust-lang/rust/commit/9637c27fb531dc4a030bc978ebff4335baebc28d"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "8b3023e63dfb49c732a5f2668629a416c2684e09", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3566812b041280af5a29056d36cdc516c3c14b94/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3566812b041280af5a29056d36cdc516c3c14b94/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=3566812b041280af5a29056d36cdc516c3c14b94", "patch": "@@ -873,3 +873,29 @@ fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     *line = &line[end + 1..];\n     Some(result)\n }\n+\n+#[test]\n+fn test_parse_normalization_string() {\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits)\\\".\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+    assert_eq!(s, \" -> \\\"something ($WORD bits)\\\".\");\n+\n+    // Nothing to normalize (No quotes)\n+    let mut s = \"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, r#\"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\"#);\n+\n+    // Nothing to normalize (Only a single quote)\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\");\n+\n+    // Nothing to normalize (Three quotes)\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+    assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n+}"}, {"sha": "381d808e8028f9f5760b976d4042e94865d7e445", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3566812b041280af5a29056d36cdc516c3c14b94/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3566812b041280af5a29056d36cdc516c3c14b94/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=3566812b041280af5a29056d36cdc516c3c14b94", "patch": "@@ -86,6 +86,8 @@ pub fn matches_os(triple: &str, name: &str) -> bool {\n     }\n     panic!(\"Cannot determine OS from triple\");\n }\n+\n+/// Determine the architecture from `triple`\n pub fn get_arch(triple: &str) -> &'static str {\n     let triple: Vec<_> = triple.split('-').collect();\n     for &(triple_arch, arch) in ARCH_TABLE {\n@@ -151,3 +153,29 @@ impl PathBufExt for PathBuf {\n         }\n     }\n }\n+\n+#[test]\n+#[should_panic(expected = \"Cannot determine Architecture from triple\")]\n+fn test_get_arch_failure() {\n+    get_arch(\"abc\");\n+}\n+\n+#[test]\n+fn test_get_arch() {\n+    assert_eq!(\"x86_64\", get_arch(\"x86_64-unknown-linux-gnu\"));\n+    assert_eq!(\"x86_64\", get_arch(\"amd64\"));\n+}\n+\n+#[test]\n+#[should_panic(expected = \"Cannot determine OS from triple\")]\n+fn test_matches_os_failure() {\n+    matches_os(\"abc\", \"abc\");\n+}\n+\n+#[test]\n+fn test_matches_os() {\n+    assert!(matches_os(\"x86_64-unknown-linux-gnu\", \"linux\"));\n+    assert!(matches_os(\"wasm32-unknown-unknown\", \"emscripten\"));\n+    assert!(matches_os(\"wasm32-unknown-unknown\", \"wasm32-bare\"));\n+    assert!(!matches_os(\"wasm32-unknown-unknown\", \"windows\"));\n+}"}]}