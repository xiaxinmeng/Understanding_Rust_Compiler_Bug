{"sha": "7e84b221de541e9e1f3c97646c22ae57bcbc51bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODRiMjIxZGU1NDFlOWUxZjNjOTc2NDZjMjJhZTU3YmNiYzUxYmM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T04:35:56Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T23:58:17Z"}, "message": "vec: factor out some deallocation code", "tree": {"sha": "215d942a83427af7f1ecdea84a2a320de07e4fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215d942a83427af7f1ecdea84a2a320de07e4fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e84b221de541e9e1f3c97646c22ae57bcbc51bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e84b221de541e9e1f3c97646c22ae57bcbc51bc", "html_url": "https://github.com/rust-lang/rust/commit/7e84b221de541e9e1f3c97646c22ae57bcbc51bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e84b221de541e9e1f3c97646c22ae57bcbc51bc/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "url": "https://api.github.com/repos/rust-lang/rust/commits/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "html_url": "https://github.com/rust-lang/rust/commit/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "aa10be1d1be47a26f03894c8c72c89ae5578479d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e84b221de541e9e1f3c97646c22ae57bcbc51bc/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e84b221de541e9e1f3c97646c22ae57bcbc51bc/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7e84b221de541e9e1f3c97646c22ae57bcbc51bc", "patch": "@@ -411,6 +411,13 @@ unsafe fn alloc_or_realloc<T>(ptr: *mut T, size: uint, old_size: uint) -> *mut T\n     }\n }\n \n+#[inline]\n+unsafe fn dealloc<T>(ptr: *mut T, len: uint) {\n+    if size_of::<T>() != 0 {\n+        deallocate(ptr as *mut u8, len * size_of::<T>(), min_align_of::<T>())\n+    }\n+}\n+\n impl<T> Vec<T> {\n     /// Returns the number of elements the vector can hold without\n     /// reallocating.\n@@ -510,7 +517,7 @@ impl<T> Vec<T> {\n         if self.len == 0 {\n             if self.cap != 0 {\n                 unsafe {\n-                    deallocate(self.ptr as *mut u8, self.cap * size_of::<T>(), min_align_of::<T>())\n+                    dealloc(self.ptr, self.cap)\n                 }\n                 self.cap = 0;\n             }\n@@ -658,7 +665,7 @@ impl<T> Vec<T> {\n     pub fn move_iter(self) -> MoveItems<T> {\n         unsafe {\n             let iter = transmute(self.as_slice().iter());\n-            let ptr = self.ptr as *mut u8;\n+            let ptr = self.ptr;\n             let cap = self.cap;\n             forget(self);\n             MoveItems { allocation: ptr, cap: cap, iter: iter }\n@@ -1412,9 +1419,7 @@ impl<T> Drop for Vec<T> {\n                 for x in self.as_mut_slice().iter() {\n                     ptr::read(x);\n                 }\n-                if size_of::<T>() != 0 {\n-                    deallocate(self.ptr as *mut u8, self.cap * size_of::<T>(), min_align_of::<T>())\n-                }\n+                dealloc(self.ptr, self.cap)\n             }\n         }\n     }\n@@ -1434,7 +1439,7 @@ impl<T:fmt::Show> fmt::Show for Vec<T> {\n \n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n-    allocation: *mut u8, // the block of memory allocated for the vector\n+    allocation: *mut T, // the block of memory allocated for the vector\n     cap: uint, // the capacity of the vector\n     iter: Items<'static, T>\n }\n@@ -1469,9 +1474,7 @@ impl<T> Drop for MoveItems<T> {\n         if self.cap != 0 {\n             for _x in *self {}\n             unsafe {\n-                if size_of::<T>() != 0 {\n-                    deallocate(self.allocation, self.cap * size_of::<T>(), min_align_of::<T>())\n-                }\n+                dealloc(self.allocation, self.cap);\n             }\n         }\n     }"}]}