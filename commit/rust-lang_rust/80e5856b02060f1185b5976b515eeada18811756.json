{"sha": "80e5856b02060f1185b5976b515eeada18811756", "node_id": "C_kwDOAAsO6NoAKDgwZTU4NTZiMDIwNjBmMTE4NWI1OTc2YjUxNWVlYWRhMTg4MTE3NTY", "commit": {"author": {"name": "Elliot Bobrow", "email": "elliotgreybobrow@gmail.com", "date": "2022-10-16T18:37:26Z"}, "committer": {"name": "Elliot Bobrow", "email": "elliotgreybobrow@gmail.com", "date": "2022-11-08T02:00:35Z"}, "message": "`result_large_err` show largest variants in err msg", "tree": {"sha": "bd02ef9b36baa72b6e4729bc0491d996bdac48a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd02ef9b36baa72b6e4729bc0491d996bdac48a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e5856b02060f1185b5976b515eeada18811756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e5856b02060f1185b5976b515eeada18811756", "html_url": "https://github.com/rust-lang/rust/commit/80e5856b02060f1185b5976b515eeada18811756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e5856b02060f1185b5976b515eeada18811756/comments", "author": {"login": "ebobrow", "id": 77182873, "node_id": "MDQ6VXNlcjc3MTgyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/77182873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebobrow", "html_url": "https://github.com/ebobrow", "followers_url": "https://api.github.com/users/ebobrow/followers", "following_url": "https://api.github.com/users/ebobrow/following{/other_user}", "gists_url": "https://api.github.com/users/ebobrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebobrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebobrow/subscriptions", "organizations_url": "https://api.github.com/users/ebobrow/orgs", "repos_url": "https://api.github.com/users/ebobrow/repos", "events_url": "https://api.github.com/users/ebobrow/events{/privacy}", "received_events_url": "https://api.github.com/users/ebobrow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebobrow", "id": 77182873, "node_id": "MDQ6VXNlcjc3MTgyODcz", "avatar_url": "https://avatars.githubusercontent.com/u/77182873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebobrow", "html_url": "https://github.com/ebobrow", "followers_url": "https://api.github.com/users/ebobrow/followers", "following_url": "https://api.github.com/users/ebobrow/following{/other_user}", "gists_url": "https://api.github.com/users/ebobrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebobrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebobrow/subscriptions", "organizations_url": "https://api.github.com/users/ebobrow/orgs", "repos_url": "https://api.github.com/users/ebobrow/repos", "events_url": "https://api.github.com/users/ebobrow/events{/privacy}", "received_events_url": "https://api.github.com/users/ebobrow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5857a0174249bd5a9c0daeb4a9fde4a3601d7303", "url": "https://api.github.com/repos/rust-lang/rust/commits/5857a0174249bd5a9c0daeb4a9fde4a3601d7303", "html_url": "https://github.com/rust-lang/rust/commit/5857a0174249bd5a9c0daeb4a9fde4a3601d7303"}], "stats": {"total": 212, "additions": 138, "deletions": 74}, "files": [{"sha": "3e288467ba1680caac8ef4e63cecd7efdcca4547", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/80e5856b02060f1185b5976b515eeada18811756/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e5856b02060f1185b5976b515eeada18811756/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=80e5856b02060f1185b5976b515eeada18811756", "patch": "@@ -2,12 +2,12 @@ use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Adt, Ty};\n use rustc_span::{sym, Span};\n \n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n use clippy_utils::trait_ref_of_method;\n-use clippy_utils::ty::{approx_ty_size, is_type_diagnostic_item};\n+use clippy_utils::ty::{approx_ty_size, is_type_diagnostic_item, AdtVariantInfo};\n \n use super::{RESULT_LARGE_ERR, RESULT_UNIT_ERR};\n \n@@ -84,17 +84,57 @@ fn check_result_unit_err(cx: &LateContext<'_>, err_ty: Ty<'_>, fn_header_span: S\n }\n \n fn check_result_large_err<'tcx>(cx: &LateContext<'tcx>, err_ty: Ty<'tcx>, hir_ty_span: Span, large_err_threshold: u64) {\n-    let ty_size = approx_ty_size(cx, err_ty);\n-    if ty_size >= large_err_threshold {\n-        span_lint_and_then(\n-            cx,\n-            RESULT_LARGE_ERR,\n-            hir_ty_span,\n-            \"the `Err`-variant returned from this function is very large\",\n-            |diag: &mut Diagnostic| {\n-                diag.span_label(hir_ty_span, format!(\"the `Err`-variant is at least {ty_size} bytes\"));\n-                diag.help(format!(\"try reducing the size of `{err_ty}`, for example by boxing large elements or replacing it with `Box<{err_ty}>`\"));\n-            },\n-        );\n+    if_chain! {\n+        if let Adt(adt, subst) = err_ty.kind();\n+        if let Some(local_def_id) = err_ty.ty_adt_def().expect(\"already checked this is adt\").did().as_local();\n+        if let Some(hir::Node::Item(item)) = cx\n+            .tcx\n+            .hir()\n+            .find_by_def_id(local_def_id);\n+        if let hir::ItemKind::Enum(ref def, _) = item.kind;\n+        then {\n+            let variants_size = AdtVariantInfo::new(cx, *adt, subst);\n+            if variants_size[0].size >= large_err_threshold {\n+                span_lint_and_then(\n+                    cx,\n+                    RESULT_LARGE_ERR,\n+                    hir_ty_span,\n+                    \"the `Err`-variant returned from this function is very large\",\n+                    |diag| {\n+                        diag.span_label(\n+                            def.variants[variants_size[0].ind].span,\n+                            format!(\"the largest variant contains at least {} bytes\", variants_size[0].size),\n+                        );\n+\n+                        for variant in &variants_size[1..] {\n+                            if variant.size >= large_err_threshold {\n+                                let variant_def = &def.variants[variant.ind];\n+                                diag.span_label(\n+                                    variant_def.span,\n+                                    format!(\"the variant `{}` contains at least {} bytes\", variant_def.ident, variant.size),\n+                                );\n+                            }\n+                        }\n+\n+                        diag.help(format!(\"try reducing the size of `{err_ty}`, for example by boxing large elements or replacing it with `Box<{err_ty}>`\"));\n+                    }\n+                );\n+            }\n+        }\n+        else {\n+            let ty_size = approx_ty_size(cx, err_ty);\n+            if ty_size >= large_err_threshold {\n+                span_lint_and_then(\n+                    cx,\n+                    RESULT_LARGE_ERR,\n+                    hir_ty_span,\n+                    \"the `Err`-variant returned from this function is very large\",\n+                    |diag: &mut Diagnostic| {\n+                        diag.span_label(hir_ty_span, format!(\"the `Err`-variant is at least {ty_size} bytes\"));\n+                        diag.help(format!(\"try reducing the size of `{err_ty}`, for example by boxing large elements or replacing it with `Box<{err_ty}>`\"));\n+                    },\n+                );\n+            }\n+        }\n     }\n }"}, {"sha": "fd82d9f80f9737e748b347cbc0f6fffe5a2dee91", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/80e5856b02060f1185b5976b515eeada18811756/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e5856b02060f1185b5976b515eeada18811756/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=80e5856b02060f1185b5976b515eeada18811756", "patch": "@@ -1,12 +1,15 @@\n //! lint when there is a large size difference between variants on an enum\n \n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{diagnostics::span_lint_and_then, ty::approx_ty_size, ty::is_copy};\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then,\n+    ty::{approx_ty_size, is_copy, AdtVariantInfo},\n+};\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{Adt, AdtDef, GenericArg, List, Ty};\n+use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n@@ -72,49 +75,6 @@ impl LargeEnumVariant {\n     }\n }\n \n-struct FieldInfo {\n-    ind: usize,\n-    size: u64,\n-}\n-\n-struct VariantInfo {\n-    ind: usize,\n-    size: u64,\n-    fields_size: Vec<FieldInfo>,\n-}\n-\n-fn variants_size<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    adt: AdtDef<'tcx>,\n-    subst: &'tcx List<GenericArg<'tcx>>,\n-) -> Vec<VariantInfo> {\n-    let mut variants_size = adt\n-        .variants()\n-        .iter()\n-        .enumerate()\n-        .map(|(i, variant)| {\n-            let mut fields_size = variant\n-                .fields\n-                .iter()\n-                .enumerate()\n-                .map(|(i, f)| FieldInfo {\n-                    ind: i,\n-                    size: approx_ty_size(cx, f.ty(cx.tcx, subst)),\n-                })\n-                .collect::<Vec<_>>();\n-            fields_size.sort_by(|a, b| (a.size.cmp(&b.size)));\n-\n-            VariantInfo {\n-                ind: i,\n-                size: fields_size.iter().map(|info| info.size).sum(),\n-                fields_size,\n-            }\n-        })\n-        .collect::<Vec<_>>();\n-    variants_size.sort_by(|a, b| (b.size.cmp(&a.size)));\n-    variants_size\n-}\n-\n impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n@@ -130,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n             if adt.variants().len() <= 1 {\n                 return;\n             }\n-            let variants_size = variants_size(cx, *adt, subst);\n+            let variants_size = AdtVariantInfo::new(cx, *adt, subst);\n \n             let mut difference = variants_size[0].size - variants_size[1].size;\n             if difference > self.maximum_size_difference_allowed {\n@@ -173,16 +133,16 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                                 .fields_size\n                                 .iter()\n                                 .rev()\n-                                .map_while(|val| {\n+                                .map_while(|&(ind, size)| {\n                                     if difference > self.maximum_size_difference_allowed {\n-                                        difference = difference.saturating_sub(val.size);\n+                                        difference = difference.saturating_sub(size);\n                                         Some((\n-                                            fields[val.ind].ty.span,\n+                                            fields[ind].ty.span,\n                                             format!(\n                                                 \"Box<{}>\",\n                                                 snippet_with_applicability(\n                                                     cx,\n-                                                    fields[val.ind].ty.span,\n+                                                    fields[ind].ty.span,\n                                                     \"..\",\n                                                     &mut applicability\n                                                 )"}, {"sha": "3e9c605e3f95351056826af7d6cc149fd253cebb", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/80e5856b02060f1185b5976b515eeada18811756/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e5856b02060f1185b5976b515eeada18811756/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=80e5856b02060f1185b5976b515eeada18811756", "patch": "@@ -13,9 +13,9 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, GenericParamDefKind, IntTy, ParamEnv, Predicate,\n-    PredicateKind, ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n-    TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, GenericParamDefKind, IntTy, List, ParamEnv,\n+    Predicate, PredicateKind, ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable,\n+    TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -845,6 +845,42 @@ pub fn for_each_top_level_late_bound_region<B>(\n     ty.visit_with(&mut V { index: 0, f })\n }\n \n+pub struct AdtVariantInfo {\n+    pub ind: usize,\n+    pub size: u64,\n+\n+    /// (ind, size)\n+    pub fields_size: Vec<(usize, u64)>,\n+}\n+\n+impl AdtVariantInfo {\n+    /// Returns ADT variants ordered by size\n+    pub fn new<'tcx>(cx: &LateContext<'tcx>, adt: AdtDef<'tcx>, subst: &'tcx List<GenericArg<'tcx>>) -> Vec<Self> {\n+        let mut variants_size = adt\n+            .variants()\n+            .iter()\n+            .enumerate()\n+            .map(|(i, variant)| {\n+                let mut fields_size = variant\n+                    .fields\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, f)| (i, approx_ty_size(cx, f.ty(cx.tcx, subst))))\n+                    .collect::<Vec<_>>();\n+                fields_size.sort_by(|(_, a_size), (_, b_size)| (a_size.cmp(b_size)));\n+\n+                Self {\n+                    ind: i,\n+                    size: fields_size.iter().map(|(_, size)| size).sum(),\n+                    fields_size,\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+        variants_size.sort_by(|a, b| (b.size.cmp(&a.size)));\n+        variants_size\n+    }\n+}\n+\n /// Gets the struct or enum variant from the given `Res`\n pub fn variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<&'tcx VariantDef> {\n     match res {"}, {"sha": "9dd27d6dc01aaf8ae40245fc024c49b0e35cea14", "filename": "tests/ui/result_large_err.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80e5856b02060f1185b5976b515eeada18811756/tests%2Fui%2Fresult_large_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e5856b02060f1185b5976b515eeada18811756/tests%2Fui%2Fresult_large_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_large_err.rs?ref=80e5856b02060f1185b5976b515eeada18811756", "patch": "@@ -50,6 +50,18 @@ impl LargeErrorVariants<()> {\n     }\n }\n \n+enum MultipleLargeVariants {\n+    _Biggest([u8; 1024]),\n+    _AlsoBig([u8; 512]),\n+    _Ok(usize),\n+}\n+\n+impl MultipleLargeVariants {\n+    fn large_enum_error() -> Result<(), Self> {\n+        Ok(())\n+    }\n+}\n+\n trait TraitForcesLargeError {\n     fn large_error() -> Result<(), [u8; 512]> {\n         Ok(())"}, {"sha": "c386edfd21571ed56b329118d9f714432811386e", "filename": "tests/ui/result_large_err.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/80e5856b02060f1185b5976b515eeada18811756/tests%2Fui%2Fresult_large_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e5856b02060f1185b5976b515eeada18811756/tests%2Fui%2Fresult_large_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_large_err.stderr?ref=80e5856b02060f1185b5976b515eeada18811756", "patch": "@@ -42,50 +42,66 @@ LL | pub fn param_large_error<R>() -> Result<(), (u128, R, FullyDefinedLargeErro\n error: the `Err`-variant returned from this function is very large\n   --> $DIR/result_large_err.rs:48:34\n    |\n+LL |     _Omg([u8; 512]),\n+   |     --------------- the largest variant contains at least 512 bytes\n+...\n LL |     pub fn large_enum_error() -> Result<(), Self> {\n-   |                                  ^^^^^^^^^^^^^^^^ the `Err`-variant is at least 513 bytes\n+   |                                  ^^^^^^^^^^^^^^^^\n    |\n    = help: try reducing the size of `LargeErrorVariants<()>`, for example by boxing large elements or replacing it with `Box<LargeErrorVariants<()>>`\n \n error: the `Err`-variant returned from this function is very large\n-  --> $DIR/result_large_err.rs:54:25\n+  --> $DIR/result_large_err.rs:60:30\n+   |\n+LL |     _Biggest([u8; 1024]),\n+   |     -------------------- the largest variant contains at least 1024 bytes\n+LL |     _AlsoBig([u8; 512]),\n+   |     ------------------- the variant `_AlsoBig` contains at least 512 bytes\n+...\n+LL |     fn large_enum_error() -> Result<(), Self> {\n+   |                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try reducing the size of `MultipleLargeVariants`, for example by boxing large elements or replacing it with `Box<MultipleLargeVariants>`\n+\n+error: the `Err`-variant returned from this function is very large\n+  --> $DIR/result_large_err.rs:66:25\n    |\n LL |     fn large_error() -> Result<(), [u8; 512]> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n    |\n    = help: try reducing the size of `[u8; 512]`, for example by boxing large elements or replacing it with `Box<[u8; 512]>`\n \n error: the `Err`-variant returned from this function is very large\n-  --> $DIR/result_large_err.rs:73:29\n+  --> $DIR/result_large_err.rs:85:29\n    |\n LL | pub fn large_union_err() -> Result<(), FullyDefinedUnionError> {\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n    |\n    = help: try reducing the size of `FullyDefinedUnionError`, for example by boxing large elements or replacing it with `Box<FullyDefinedUnionError>`\n \n error: the `Err`-variant returned from this function is very large\n-  --> $DIR/result_large_err.rs:82:40\n+  --> $DIR/result_large_err.rs:94:40\n    |\n LL | pub fn param_large_union<T: Copy>() -> Result<(), UnionError<T>> {\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 512 bytes\n    |\n    = help: try reducing the size of `UnionError<T>`, for example by boxing large elements or replacing it with `Box<UnionError<T>>`\n \n error: the `Err`-variant returned from this function is very large\n-  --> $DIR/result_large_err.rs:91:34\n+  --> $DIR/result_large_err.rs:103:34\n    |\n LL | pub fn array_error_subst<U>() -> Result<(), ArrayError<i32, U>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 128 bytes\n    |\n    = help: try reducing the size of `ArrayError<i32, U>`, for example by boxing large elements or replacing it with `Box<ArrayError<i32, U>>`\n \n error: the `Err`-variant returned from this function is very large\n-  --> $DIR/result_large_err.rs:95:31\n+  --> $DIR/result_large_err.rs:107:31\n    |\n LL | pub fn array_error<T, U>() -> Result<(), ArrayError<(i32, T), U>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `Err`-variant is at least 128 bytes\n    |\n    = help: try reducing the size of `ArrayError<(i32, T), U>`, for example by boxing large elements or replacing it with `Box<ArrayError<(i32, T), U>>`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}]}