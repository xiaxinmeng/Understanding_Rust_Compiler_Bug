{"sha": "808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGU0MzE1ZThiYzc3ODZiNDNmZTRjYjJmN2IxZGQ2YzIzNzNlYTM=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-05-13T01:01:23Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-05-23T06:35:38Z"}, "message": "Propagate obligations through projection", "tree": {"sha": "d3c7b40b0d47c37183cbf20538a0435c52be5d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c7b40b0d47c37183cbf20538a0435c52be5d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3", "html_url": "https://github.com/rust-lang/rust/commit/808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24d621fcacf59fa8ecc1c1af1c4adeded4bddee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24d621fcacf59fa8ecc1c1af1c4adeded4bddee", "html_url": "https://github.com/rust-lang/rust/commit/e24d621fcacf59fa8ecc1c1af1c4adeded4bddee"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "44ec42de8cbd68101b7f6af5f3d24b4c374dd949", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=808e4315e8bc7786b43fe4cb2f7b1dd6c2373ea3", "patch": "@@ -207,7 +207,7 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n     debug!(\"project_and_unify_type(obligation={:?})\",\n            obligation);\n \n-    let Normalized { value: normalized_ty, obligations } =\n+    let Normalized { value: normalized_ty, mut obligations } =\n         match opt_normalize_projection_type(selcx,\n                                             obligation.predicate.projection_ty.clone(),\n                                             obligation.cause.clone(),\n@@ -224,8 +224,9 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n     let origin = TypeOrigin::RelateOutputImplTypes(obligation.cause.span);\n     match infcx.eq_types(true, origin, normalized_ty, obligation.predicate.ty) {\n         Ok(InferOk { obligations: inferred_obligations, .. }) => {\n-            // FIXME(#32730) propagate obligations\n+            // FIXME(#32730) once obligations are generated in inference, drop this assertion\n             assert!(inferred_obligations.is_empty());\n+            obligations.extend(inferred_obligations);\n             Ok(Some(obligations))\n         },\n         Err(err) => Err(MismatchedProjectionTypes { err: err }),\n@@ -710,7 +711,8 @@ fn assemble_candidates_from_predicates<'cx, 'gcx, 'tcx, I>(\n                                               origin,\n                                               data_poly_trait_ref,\n                                               obligation_poly_trait_ref)\n-                        // FIXME(#32730) propagate obligations\n+                        // FIXME(#32730) once obligations are propagated from unification in\n+                        // inference, drop this assertion\n                         .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n                         .is_ok()\n                 });\n@@ -1047,8 +1049,8 @@ fn confirm_fn_pointer_candidate<'cx, 'gcx, 'tcx>(\n     fn_pointer_vtable: VtableFnPointerData<'tcx, PredicateObligation<'tcx>>)\n     -> (Ty<'tcx>, Vec<PredicateObligation<'tcx>>)\n {\n-    // FIXME(#32730) propagate obligations (fn pointer vtable nested obligations ONLY come from\n-    // unification in inference)\n+    // FIXME(#32730) drop this assertion once obligations are propagated from inference (fn pointer\n+    // vtable nested obligations ONLY come from unification in inference)\n     assert!(fn_pointer_vtable.nested.is_empty());\n     let fn_type = selcx.infcx().shallow_resolve(fn_pointer_vtable.fn_ty);\n     let sig = fn_type.fn_sig();\n@@ -1130,13 +1132,14 @@ fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(\n                obligation.predicate.item_name);\n \n     let origin = TypeOrigin::RelateOutputImplTypes(obligation.cause.span);\n-    match infcx.eq_trait_refs(false,\n-                              origin,\n-                              obligation.predicate.trait_ref.clone(),\n-                              projection.projection_ty.trait_ref.clone()) {\n+    let obligations = match infcx.eq_trait_refs(false,\n+                                                origin,\n+                                                obligation.predicate.trait_ref.clone(),\n+                                                projection.projection_ty.trait_ref.clone()) {\n         Ok(InferOk { obligations, .. }) => {\n-            // FIXME(#32730) propagate obligations\n+            // FIXME(#32730) once obligations are generated in inference, remove this assertion\n             assert!(obligations.is_empty());\n+            obligations\n         }\n         Err(e) => {\n             span_bug!(\n@@ -1146,9 +1149,9 @@ fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(\n                 projection,\n                 e);\n         }\n-    }\n+    };\n \n-    (projection.ty, vec!())\n+    (projection.ty, obligations)\n }\n \n fn confirm_impl_candidate<'cx, 'gcx, 'tcx>("}]}