{"sha": "9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZGNiYWMzMGRkMjI5NDkwYjBlYjNmNzk0ZmEwY2Q4OWU1ZjQ1N2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-17T18:24:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-17T18:24:05Z"}, "message": "Prevent a rare linkage issue with an xcrate static\n\nIf a static is flagged as address_insignificant, then for LLVM to actually\nperform the relevant optimization it must have an internal linkage type. What\nthis means, though, is that the static will not be available to other crates.\nHence, if you have a generic function with an inner static, it will fail to link\nwhen built as a library because other crates will attempt to use the inner\nstatic externally.\n\nThis gets around the issue by inlining the static into the metadata. The same\nrelevant optimization is then applied separately in the external crate. What\nthis ends up meaning is that all statics tagged with #[address_insignificant]\nwill appear at most once per crate (by value), but they could appear in multiple\ncrates.\n\nThis should be the last blocker for using format! ...", "tree": {"sha": "2dcab6cbdf5899d95ffff844f7096cfd575e568b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dcab6cbdf5899d95ffff844f7096cfd575e568b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "html_url": "https://github.com/rust-lang/rust/commit/9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e7c62ec4ecddadeccb928ac488a8715d80aef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e7c62ec4ecddadeccb928ac488a8715d80aef7", "html_url": "https://github.com/rust-lang/rust/commit/72e7c62ec4ecddadeccb928ac488a8715d80aef7"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "6f70d2e601d553c4b18ecb7461cc9e375a2710b8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "patch": "@@ -2559,10 +2559,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             // LLVM type is not fully determined by the Rust type.\n                             let (v, inlineable) = consts::const_expr(ccx, expr);\n                             ccx.const_values.insert(id, v);\n-                            if !inlineable {\n-                                debug!(\"%s not inlined\", sym);\n-                                ccx.non_inlineable_statics.insert(id);\n-                            }\n+                            let mut inlineable = inlineable;\n                             exprt = true;\n \n                             unsafe {\n@@ -2578,8 +2575,30 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                                     lib::llvm::SetUnnamedAddr(g, true);\n                                     lib::llvm::SetLinkage(g,\n                                         lib::llvm::InternalLinkage);\n+\n+                                    // This is a curious case where we must make\n+                                    // all of these statics inlineable. If a\n+                                    // global is tagged as\n+                                    // address_insignificant, then LLVM won't\n+                                    // coalesce globals unless they have an\n+                                    // internal linkage type. This means that\n+                                    // external crates cannot use this global.\n+                                    // This is a problem for things like inner\n+                                    // statics in generic functions, because the\n+                                    // function will be inlined into another\n+                                    // crate and then attempt to link to the\n+                                    // static in the original crate, only to\n+                                    // find that it's not there. On the other\n+                                    // side of inlininig, the crates knows to\n+                                    // not declare this static as\n+                                    // available_externally (because it isn't)\n+                                    inlineable = true;\n                                 }\n \n+                                if !inlineable {\n+                                    debug!(\"%s not inlined\", sym);\n+                                    ccx.non_inlineable_statics.insert(id);\n+                                }\n                                 ccx.item_symbols.insert(i.id, sym);\n                                 g\n                             }"}, {"sha": "8900b50b49df2e9aa92c74a3cb4100a29349e112", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "patch": "@@ -21,6 +21,7 @@ use std::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n+use syntax::attr;\n \n pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n     -> ast::DefId {\n@@ -68,7 +69,12 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n             match item.node {\n                 ast::item_static(*) => {\n                     let g = get_item_val(ccx, item.id);\n-                    SetLinkage(g, AvailableExternallyLinkage);\n+                    // see the comment in get_item_val() as to why this check is\n+                    // performed here.\n+                    if !attr::contains_name(item.attrs,\n+                                            \"address_insignificant\") {\n+                        SetLinkage(g, AvailableExternallyLinkage);\n+                    }\n                 }\n                 _ => {}\n             }"}, {"sha": "08e3eff0c8c5f7f6a967d070ea6a108d0e9e6a49", "filename": "src/test/auxiliary/xcrate_address_insignificant.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Ftest%2Fauxiliary%2Fxcrate_address_insignificant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Ftest%2Fauxiliary%2Fxcrate_address_insignificant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_address_insignificant.rs?ref=9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo<T>() -> int {\n+    #[address_insignificant]\n+    static a: int = 3;\n+    a\n+}\n+\n+pub fn bar() -> int {\n+    foo::<int>()\n+}"}, {"sha": "1bf3763834a551c533b75515585071f4d7cbe951", "filename": "src/test/run-pass/xcrate-address-insignificant.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Ftest%2Frun-pass%2Fxcrate-address-insignificant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adcbac30dd229490b0eb3f794fa0cd89e5f457b/src%2Ftest%2Frun-pass%2Fxcrate-address-insignificant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-address-insignificant.rs?ref=9adcbac30dd229490b0eb3f794fa0cd89e5f457b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast windows doesn't like aux-build\n+// aux-build:xcrate_address_insignificant.rs\n+\n+extern mod foo(name = \"xcrate_address_insignificant\");\n+\n+fn main() {\n+    assert_eq!(foo::foo::<float>(), foo::bar());\n+}"}]}