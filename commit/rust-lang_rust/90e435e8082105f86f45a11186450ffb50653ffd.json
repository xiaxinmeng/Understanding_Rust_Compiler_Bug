{"sha": "90e435e8082105f86f45a11186450ffb50653ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTQzNWU4MDgyMTA1Zjg2ZjQ1YTExMTg2NDUwZmZiNTA2NTNmZmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-12T16:36:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-13T17:20:50Z"}, "message": "change region syntax to &r/T in place of &r.T", "tree": {"sha": "b9d9dfd85632310a4a2954bbf851d8662f161b49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d9dfd85632310a4a2954bbf851d8662f161b49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e435e8082105f86f45a11186450ffb50653ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e435e8082105f86f45a11186450ffb50653ffd", "html_url": "https://github.com/rust-lang/rust/commit/90e435e8082105f86f45a11186450ffb50653ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e435e8082105f86f45a11186450ffb50653ffd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe0d8d7d70c78ea69647f765dd1bb780b5e6d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe0d8d7d70c78ea69647f765dd1bb780b5e6d86", "html_url": "https://github.com/rust-lang/rust/commit/1fe0d8d7d70c78ea69647f765dd1bb780b5e6d86"}], "stats": {"total": 169, "additions": 87, "deletions": 82}, "files": [{"sha": "e1f3eb3217c9ae6aee054ac972dd04bf904bf237", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -420,15 +420,20 @@ class parser {\n         }\n     }\n \n-    // Parses something like \"&x.\" (note the trailing dot)\n-    fn parse_region_dot() -> @region {\n+    // Parses something like \"&x/\" (note the trailing slash)\n+    fn parse_region_with_sep() -> @region {\n         let name =\n             alt copy self.token {\n-              token::IDENT(sid, _) if self.look_ahead(1u) == token::DOT {\n-                self.bump(); self.bump();\n-                some(self.get_str(sid))\n+              token::IDENT(sid, _) => {\n+                if self.look_ahead(1u) == token::DOT || // backwards compat\n+                    self.look_ahead(1u) == token::BINOP(token::SLASH) {\n+                    self.bump(); self.bump();\n+                    some(self.get_str(sid))\n+                } else {\n+                    none\n+                }\n               }\n-              _ { none }\n+              _ => { none }\n             };\n         self.region_from_name(name)\n     }\n@@ -495,7 +500,7 @@ class parser {\n             t\n         } else if self.token == token::BINOP(token::AND) {\n             self.bump();\n-            let region = self.parse_region_dot();\n+            let region = self.parse_region_with_sep();\n             let mt = self.parse_mt();\n             ty_rptr(region, mt)\n         } else if self.eat_keyword(\"pure\") {"}, {"sha": "91edf4bb0d708c24f061dcf0a6fb877e42b2a007", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -183,10 +183,10 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_ptr(tm) { \"*\" + mt_to_str(cx, tm) }\n       ty_rptr(r, tm) {\n         let rs = region_to_str(cx, r);\n-        if str::len(rs) == 1u {\n+        if rs == \"&\" {\n             rs + mt_to_str(cx, tm)\n         } else {\n-            rs + \".\" + mt_to_str(cx, tm)\n+            rs + \"/\" + mt_to_str(cx, tm)\n         }\n       }\n       ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }"}, {"sha": "6ef6e219e136cf51e00c6e5fc9c12e4b6118f3e6", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,9 +1,9 @@\n fn foo(a: int) {\n-    let _p: &static.int = &a; //~ ERROR mismatched types\n+    let _p: &static/int = &a; //~ ERROR mismatched types\n }\n \n fn bar(a: int) {\n-    let _q: &blk.int = &a;\n+    let _q: &blk/int = &a;\n }\n \n fn main() {"}, {"sha": "969361db63e87a31ccf4dbf728027cfd92d0d362", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -6,12 +6,12 @@ class dog {\n     }\n \n     fn chase_cat() {\n-        let p: &static.mut uint = &mut self.cats_chased; //~ ERROR mismatched types\n+        let p: &static/mut uint = &mut self.cats_chased; //~ ERROR mismatched types\n         *p += 1u;\n     }\n \n     fn chase_cat_2() {\n-        let p: &blk.mut uint = &mut self.cats_chased;\n+        let p: &blk/mut uint = &mut self.cats_chased;\n         *p += 1u;\n     }\n }"}, {"sha": "e61d5eb3d050f5354d1317bfe5aea7d0c00c2c37", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -7,7 +7,7 @@ class dog {\n \n     fn chase_cat() {\n         for uint::range(0u, 10u) |i| {\n-            let p: &static.mut uint = &mut self.food; //~ ERROR mismatched types\n+            let p: &static/mut uint = &mut self.food; //~ ERROR mismatched types\n             *p = 3u;\n         }\n     }"}, {"sha": "7a69b456d0d916cda0bfdbb154aeed73e487644d", "filename": "src/test/compile-fail/regions-blk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-blk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-blk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-blk.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,12 +1,12 @@\n fn foo(cond: bool) {\n     let x = 5;\n-    let mut y: &blk.int = &x;\n+    let mut y: &blk/int = &x;\n \n-    let mut z: &blk.int;\n+    let mut z: &blk/int;\n     if cond {\n         z = &x;\n     } else {\n-        let w: &blk.int = &x;\n+        let w: &blk/int = &x;\n         z = w; //~ ERROR mismatched types\n     }\n }"}, {"sha": "59e8af556de543c6aa140602e214e003c086d648", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -3,8 +3,8 @@\n // checked.\n \n enum an_enum = &int;\n-iface an_iface { fn foo() -> &self.int; }\n-class a_class { let x:&self.int; new(x:&self.int) { self.x = x; } }\n+iface an_iface { fn foo() -> &self/int; }\n+class a_class { let x:&self/int; new(x:&self/int) { self.x = x; } }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     ret e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`"}, {"sha": "740a23f8a7538e661e6a30c9914bc4ef4fe3fe9c", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,9 +1,9 @@\n-enum ast/& {\n+enum ast {\n     num(uint),\n     add(&ast, &ast)\n }\n \n-fn mk_add_bad1(x: &a.ast, y: &b.ast) -> ast/&a {\n+fn mk_add_bad1(x: &a/ast, y: &b/ast) -> ast/&a {\n     add(x, y) //~ ERROR mismatched types: expected `&a.ast/&a` but found `&b.ast/&b`\n }\n "}, {"sha": "f43548c88f6882b2c930c4b396c6b2dbce1fea73", "filename": "src/test/compile-fail/regions-creating-enums4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums4.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,9 +1,9 @@\n-enum ast/& {\n+enum ast {\n     num(uint),\n     add(&ast, &ast)\n }\n \n-fn mk_add_bad2(x: &a.ast, y: &a.ast, z: &ast) -> ast {\n+fn mk_add_bad2(x: &a/ast, y: &a/ast, z: &ast) -> ast {\n     add(x, y) //~ ERROR mismatched types: expected `ast/&` but found `ast/&a`\n }\n "}, {"sha": "09456b1ecaa1ead102e5a9cfefcaeb83a2061eed", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,7 +1,7 @@\n // Here, `f` is a function that takes a pointer `x` and a function\n // `g`, where `g` requires its argument `y` to be in the same region\n // that `x` is in.\n-fn has_same_region(f: fn(x: &a.int, g: fn(y: &a.int))) {\n+fn has_same_region(f: fn(x: &a/int, g: fn(y: &a/int))) {\n     // Somewhat counterintuitively, this fails because, in\n     // `wants_two_regions`, the `g` argument needs to be able to\n     // accept any region.  That is, the type that `has_same_region`"}, {"sha": "9427d4875a076f72843deb00875a1a692793ce91", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,16 +1,16 @@\n // Should fail region checking, because g can only accept a pointer\n // with lifetime r, and a is a pointer with unspecified lifetime.\n fn not_ok_1(a: &uint) {\n-    let mut g: fn@(x: &uint) = fn@(x: &r.uint) {};\n+    let mut g: fn@(x: &uint) = fn@(x: &r/uint) {};\n     //~^ ERROR mismatched types\n     g(a);\n }\n \n // Should fail region checking, because g can only accept a pointer\n // with lifetime r, and a is a pointer with lifetime s.\n-fn not_ok_2(s: &s.uint)\n+fn not_ok_2(s: &s/uint)\n {\n-    let mut g: fn@(x: &uint) = fn@(x: &r.uint) {};\n+    let mut g: fn@(x: &uint) = fn@(x: &r/uint) {};\n     //~^ ERROR mismatched types\n     g(s);\n }"}, {"sha": "230bf150a1c468d80659ac3e7fde042787216377", "filename": "src/test/compile-fail/regions-iface-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-1.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -11,7 +11,7 @@ impl of get_ctxt for has_ctxt {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:\n-    fn get_ctxt() -> &self.ctxt { //~ ERROR method `get_ctxt` has an incompatible type\n+    fn get_ctxt() -> &self/ctxt { //~ ERROR method `get_ctxt` has an incompatible type\n         self.c\n     }\n "}, {"sha": "7ea17cea45a99b744290e3751a84abe73e413c55", "filename": "src/test/compile-fail/regions-iface-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-2.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,13 +1,13 @@\n type ctxt = { v: uint };\n \n iface get_ctxt {\n-    fn get_ctxt() -> &self.ctxt;\n+    fn get_ctxt() -> &self/ctxt;\n }\n \n type has_ctxt = { c: &ctxt };\n \n impl of get_ctxt for has_ctxt {\n-    fn get_ctxt() -> &self.ctxt { self.c }\n+    fn get_ctxt() -> &self/ctxt { self.c }\n }\n \n fn make_gc() -> get_ctxt  {"}, {"sha": "ff6d7b42a538a6dbefa134948ea592ccb1b313d6", "filename": "src/test/compile-fail/regions-iface-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-iface-3.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,5 +1,5 @@\n iface get_ctxt {\n-    fn get_ctxt() -> &self.uint;\n+    fn get_ctxt() -> &self/uint;\n }\n \n fn make_gc1(gc: get_ctxt/&a) -> get_ctxt/&b  {"}, {"sha": "1816ed48063eac68772aa0c6e66786f93673998e", "filename": "src/test/compile-fail/regions-in-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,7 +1,7 @@\n // xfail-test\n \n-const c_x: &blk.int = 22; //~ ERROR only the static region is allowed here\n-const c_y: &static.int = &22; //~ ERROR only the static region is allowed here\n+const c_x: &blk/int = 22; //~ ERROR only the static region is allowed here\n+const c_y: &static/int = &22; //~ ERROR only the static region is allowed here\n \n fn main() {\n }\n\\ No newline at end of file"}, {"sha": "61178979fc3eb9b0bbe327f5b9f85a75a444a114", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -3,11 +3,11 @@ enum yes0 {\n }\n \n enum yes1 {\n-    x4(&self.uint)\n+    x4(&self/uint)\n }\n \n enum yes2 {\n-    x5(&foo.uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x5(&foo/uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "61ed8d3b6f3f0fc999ec7ffb7f81a40c85d5b8b9", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -5,14 +5,14 @@ class yes0 {\n }\n \n class yes1 {\n-  let x: &self.uint;\n-  new(x: &self.uint) { self.x = x; }\n+  let x: &self/uint;\n+  new(x: &self/uint) { self.x = x; }\n   drop {}\n }\n \n class yes2 {\n-  let x: &foo.uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n-  new(x: &foo.uint) { self.x = x; } //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+  let x: &foo/uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+  new(x: &foo/uint) { self.x = x; } //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   drop {}\n }\n "}, {"sha": "8faf50fadbe8fe172eb099ea83e3b307a2375bec", "filename": "src/test/compile-fail/regions-in-type-items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -3,11 +3,11 @@ type item_ty_yes0 = {\n };\n \n type item_ty_yes1 = {\n-    x: &self.uint\n+    x: &self/uint\n };\n \n type item_ty_yes2 = {\n-    x: &foo.uint //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x: &foo/uint //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n };\n \n fn main() {}\n\\ No newline at end of file"}, {"sha": "b00ae17ddf71d5599e7750e7af64b541be536d94", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -11,7 +11,7 @@ impl methods for c {\n     }\n \n     fn set_f_bad(b: @b) {\n-        self.f = b; //~ ERROR mismatched types: expected `@@&self.int` but found `@@&int`\n+        self.f = b; //~ ERROR mismatched types: expected `@@&self/int` but found `@@&int`\n     }\n }\n "}, {"sha": "125abb5e0f73d1aff62610f51b3a745ee2ceb7d2", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -2,7 +2,7 @@\n // refers to self.\n \n iface foo {\n-    fn self_int() -> &self.int;\n+    fn self_int() -> &self/int;\n \n     fn any_int() -> &int;\n }"}, {"sha": "2d0fc08f597e01350063f77046958dba05c55699", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,16 +1,16 @@\n fn ignore<T>(t: T) {}\n \n-fn nested(x: &x.int) {\n+fn nested(x: &x/int) {\n     let y = 3;\n     let mut ay = &y;\n \n-    ignore(fn&(z: &z.int) {\n+    ignore(fn&(z: &z/int) {\n         ay = x;\n         ay = &y;\n         ay = z; //~ ERROR references with lifetime\n     });\n \n-    ignore(fn&(z: &z.int) -> &z.int {\n+    ignore(fn&(z: &z/int) -> &z/int {\n         if false { ret x; }  //~ ERROR references with lifetime\n         if false { ret &y; } //~ ERROR references with lifetime\n         if false { ret ay; } //~ ERROR references with lifetime"}, {"sha": "becfa8e76713608fad368ff08051fa97b47b9dc0", "filename": "src/test/compile-fail/regions-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: mismatched types\n \n-fn f(x : &a.int) -> &a.int {\n+fn f(x : &a/int) -> &a/int {\n     ret &3;\n }\n "}, {"sha": "ac9bef8ca5d37801ab02ff674c90e82376b6f19e", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,42 +1,42 @@\n fn with<T>(t: T, f: fn(T)) { f(t) }\n \n-fn nested(x: &x.int) {  // (1)\n+fn nested(x: &x/int) {  // (1)\n     do with(\n-        fn&(x: &x.int, // Refers to the region `x` at (1)\n-            y: &y.int, // A fresh region `y` (2)\n-            z: fn(x: &x.int, // Refers to `x` at (1)\n-                  y: &y.int, // Refers to `y` at (2)\n-                  z: &z.int) -> &z.int) // A fresh region `z` (3)\n-            -> &x.int {\n+        fn&(x: &x/int, // Refers to the region `x` at (1)\n+            y: &y/int, // A fresh region `y` (2)\n+            z: fn(x: &x/int, // Refers to `x` at (1)\n+                  y: &y/int, // Refers to `y` at (2)\n+                  z: &z/int) -> &z/int) // A fresh region `z` (3)\n+            -> &x/int {\n \n-            if false { ret z(x, x, x); } //~ ERROR mismatched types: expected `&y.int` but found `&x.int`\n-            if false { ret z(x, x, y); } //~ ERROR mismatched types: expected `&y.int` but found `&x.int`\n-                                        //~^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(x, x, x); } //~ ERROR mismatched types: expected `&y/int` but found `&x/int`\n+            if false { ret z(x, x, y); } //~ ERROR mismatched types: expected `&y/int` but found `&x/int`\n+                                        //~^ ERROR mismatched types: expected `&x/int` but found `&y/int`\n             if false { ret z(x, y, x); }\n-            if false { ret z(x, y, y); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-            if false { ret z(y, x, x); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-                                        //~^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n-            if false { ret z(y, x, y); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-                                        //~^ ERROR mismatched types: expected `&y.int` but found `&x.int`\n-                                       //~^^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-            if false { ret z(y, y, x); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-            if false { ret z(y, y, y); } //~ ERROR mismatched types: expected `&x.int` but found `&y.int`\n-                                        //~^ ERROR mismatched types: expected `&x.int` but found `&y.int`\n+            if false { ret z(x, y, y); } //~ ERROR mismatched types: expected `&x/int` but found `&y/int`\n+            if false { ret z(y, x, x); } //~ ERROR mismatched types: expected `&x/int` but found `&y/int`\n+                                        //~^ ERROR mismatched types: expected `&y/int` but found `&x/int`\n+            if false { ret z(y, x, y); } //~ ERROR mismatched types: expected `&x/int` but found `&y/int`\n+                                        //~^ ERROR mismatched types: expected `&y/int` but found `&x/int`\n+                                       //~^^ ERROR mismatched types: expected `&x/int` but found `&y/int`\n+            if false { ret z(y, y, x); } //~ ERROR mismatched types: expected `&x/int` but found `&y/int`\n+            if false { ret z(y, y, y); } //~ ERROR mismatched types: expected `&x/int` but found `&y/int`\n+                                        //~^ ERROR mismatched types: expected `&x/int` but found `&y/int`\n             fail;\n         }\n     ) |foo| {\n \n-        let a: &x.int = foo(x, x, |_x, _y, z| z );\n-        let b: &x.int = foo(x, a, |_x, _y, z| z );\n-        let c: &x.int = foo(a, a, |_x, _y, z| z );\n+        let a: &x/int = foo(x, x, |_x, _y, z| z );\n+        let b: &x/int = foo(x, a, |_x, _y, z| z );\n+        let c: &x/int = foo(a, a, |_x, _y, z| z );\n \n         let z = 3i;\n-        let d: &x.int = foo(x, x, |_x, _y, z| z );\n-        let e: &x.int = foo(x, &z, |_x, _y, z| z );\n-        let f: &x.int = foo(&z, &z, |_x, _y, z| z ); //~ ERROR mismatched types: expected `&x.int` but found\n+        let d: &x/int = foo(x, x, |_x, _y, z| z );\n+        let e: &x/int = foo(x, &z, |_x, _y, z| z );\n+        let f: &x/int = foo(&z, &z, |_x, _y, z| z ); //~ ERROR mismatched types: expected `&x/int` but found\n \n-        foo(x, &z, |x, _y, _z| x ); //~ ERROR mismatched types: expected `&z.int` but found `&x.int`\n-        foo(x, &z, |_x, y, _z| y ); //~ ERROR mismatched types: expected `&z.int` but found `&<block at\n+        foo(x, &z, |x, _y, _z| x ); //~ ERROR mismatched types: expected `&z/int` but found `&x/int`\n+        foo(x, &z, |_x, y, _z| y ); //~ ERROR mismatched types: expected `&z/int` but found `&<block at\n     }\n }\n "}, {"sha": "557bfd1383de3188891ebb0b42734f27a94971ae", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,11 +1,11 @@\n class font {\n-    let fontbuf: &self.~[u8];\n+    let fontbuf: &self/~[u8];\n \n-    new(fontbuf: &self.~[u8]) {\n+    new(fontbuf: &self/~[u8]) {\n         self.fontbuf = fontbuf;\n     }\n \n-    fn buf() -> &self.~[u8] {\n+    fn buf() -> &self/~[u8] {\n         self.fontbuf\n     }\n }"}, {"sha": "2d8dd45b0431f48b89e6fc6c8d6b40b2fae41bf0", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,7 +1,7 @@\n class CMap {\n     let buf: &[u8];\n \n-    new(buf: &self.[u8]) {\n+    new(buf: &self/[u8]) {\n         self.buf = buf;\n     }\n }"}, {"sha": "7931f83965c9a741072594e062da1707765a9fe8", "filename": "src/test/run-pass/regions-creating-enums5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fregions-creating-enums5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fregions-creating-enums5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-creating-enums5.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -3,7 +3,7 @@ enum ast {\n     add(&ast, &ast)\n }\n \n-fn mk_add_ok(x: &a.ast, y: &a.ast, z: &ast) -> ast/&a {\n+fn mk_add_ok(x: &a/ast, y: &a/ast, z: &ast) -> ast/&a {\n     add(x, y)\n }\n "}, {"sha": "ec4a0a2dcfe3603211ad0f536220869caea893a8", "filename": "src/test/run-pass/regions-iface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fregions-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fregions-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-iface.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,13 +1,13 @@\n type ctxt = { v: uint };\n \n iface get_ctxt {\n-    fn get_ctxt() -> &self.ctxt;\n+    fn get_ctxt() -> &self/ctxt;\n }\n \n type has_ctxt = { c: &ctxt };\n \n impl of get_ctxt for has_ctxt {\n-    fn get_ctxt() -> &self.ctxt {\n+    fn get_ctxt() -> &self/ctxt {\n         self.c\n     }\n }"}, {"sha": "d8d33273b8ff8599a87a2e069a11c37196b021fd", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e435e8082105f86f45a11186450ffb50653ffd/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=90e435e8082105f86f45a11186450ffb50653ffd", "patch": "@@ -1,7 +1,7 @@\n type clam = { chowder: &int };\n \n impl clam for clam {\n-    fn get_chowder() -> &self.int { ret self.chowder; }\n+    fn get_chowder() -> &self/int { ret self.chowder; }\n }\n \n fn main() {"}]}