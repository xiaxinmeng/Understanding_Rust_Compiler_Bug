{"sha": "d0456c6f8fe8a88a080b6d4973c8e279de4afe0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDU2YzZmOGZlOGE4OGEwODBiNmQ0OTczYzhlMjc5ZGU0YWZlMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-28T01:28:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-28T01:28:14Z"}, "message": "Auto merge of #50892 - davidtwco:issue-50004, r=alexcrichton\n\nAdded rustdoc documentation to compiler docs.\n\nFixes #50004.\n\nr? @alexcrichton\n(since you reviewed the last PR about compiler docs)", "tree": {"sha": "df1584fb6d20dc5b5ae8b8e6fe835751ba9830c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1584fb6d20dc5b5ae8b8e6fe835751ba9830c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f", "html_url": "https://github.com/rust-lang/rust/commit/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f308ee4194f22cebc4a481494f4fcf07b143934", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f308ee4194f22cebc4a481494f4fcf07b143934", "html_url": "https://github.com/rust-lang/rust/commit/5f308ee4194f22cebc4a481494f4fcf07b143934"}, {"sha": "52b83d7e26e2ef3691f2e2d80588558c8f59af19", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b83d7e26e2ef3691f2e2d80588558c8f59af19", "html_url": "https://github.com/rust-lang/rust/commit/52b83d7e26e2ef3691f2e2d80588558c8f59af19"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "f84ddf8a17d1387afea39fa32b4add17f7f3c386", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d0456c6f8fe8a88a080b6d4973c8e279de4afe0f", "patch": "@@ -352,8 +352,8 @@ impl<'a> Builder<'a> {\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,\n-                doc::ErrorIndex, doc::Nomicon, doc::Reference, doc::Rustdoc, doc::RustByExample,\n-                doc::RustcBook, doc::CargoBook),\n+                doc::Rustdoc, doc::ErrorIndex, doc::Nomicon, doc::Reference, doc::RustdocBook,\n+                doc::RustByExample, doc::RustcBook, doc::CargoBook),\n             Kind::Dist => describe!(dist::Docs, dist::RustcDocs, dist::Mingw, dist::Rustc,\n                 dist::DebuggerScripts, dist::Std, dist::Analysis, dist::Src,\n                 dist::PlainSourceTarball, dist::Cargo, dist::Rls, dist::Rustfmt, dist::Extended,"}, {"sha": "cb22993852159179478f3d45c94b3e92390f60ac", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 82, "deletions": 6, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0456c6f8fe8a88a080b6d4973c8e279de4afe0f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=d0456c6f8fe8a88a080b6d4973c8e279de4afe0f", "patch": "@@ -28,7 +28,7 @@ use build_helper::up_to_date;\n \n use util::symlink_dir;\n use builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n-use tool::Tool;\n+use tool::{self, prepare_tool_cargo, Tool};\n use compile;\n use cache::{INTERNER, Interned};\n use config::Config;\n@@ -70,7 +70,7 @@ macro_rules! book {\n book!(\n     Nomicon, \"src/doc/nomicon\", \"nomicon\";\n     Reference, \"src/doc/reference\", \"reference\";\n-    Rustdoc, \"src/doc/rustdoc\", \"rustdoc\";\n+    RustdocBook, \"src/doc/rustdoc\", \"rustdoc\";\n     RustcBook, \"src/doc/rustc\", \"rustc\";\n     RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\";\n );\n@@ -671,8 +671,12 @@ impl Step for Rustc {\n         let stage = self.stage;\n         let target = self.target;\n         builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n+\n+        // This is the intended out directory for compiler documentation.\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n+\n+        // Get the correct compiler for this stage.\n         let compiler = builder.compiler(stage, builder.config.build);\n         let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n@@ -682,21 +686,23 @@ impl Step for Rustc {\n         };\n \n         if !builder.config.compiler_docs {\n-            builder.info(&format!(\"\\tskipping - compiler docs disabled\"));\n+            builder.info(&format!(\"\\tskipping - compiler/librustdoc docs disabled\"));\n             return;\n         }\n \n-        // Build libstd docs so that we generate relative links\n+        // Build libstd docs so that we generate relative links.\n         builder.ensure(Std { stage, target });\n \n+        // Build rustc.\n         builder.ensure(compile::Rustc { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Librustc)\n-                           .join(target).join(\"doc\");\n+\n         // We do not symlink to the same shared folder that already contains std library\n         // documentation from previous steps as we do not want to include that.\n+        let out_dir = builder.stage_out(compiler, Mode::Librustc).join(target).join(\"doc\");\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n+        // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         compile::rustc_cargo(builder, &mut cargo);\n@@ -735,6 +741,76 @@ fn find_compiler_crates(\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Rustdoc {\n+    stage: u32,\n+    target: Interned<String>,\n+}\n+\n+impl Step for Rustdoc {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.krate(\"rustdoc-tool\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustdoc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+        });\n+    }\n+\n+    /// Generate compiler documentation.\n+    ///\n+    /// This will generate all documentation for compiler and dependencies.\n+    /// Compiler documentation is distributed separately, so we make sure\n+    /// we do not merge it with the other documentation from std, test and\n+    /// proc_macros. This is largely just a wrapper around `cargo doc`.\n+    fn run(self, builder: &Builder) {\n+        let stage = self.stage;\n+        let target = self.target;\n+        builder.info(&format!(\"Documenting stage{} rustdoc ({})\", stage, target));\n+\n+        // This is the intended out directory for compiler documentation.\n+        let out = builder.compiler_doc_out(target);\n+        t!(fs::create_dir_all(&out));\n+\n+        // Get the correct compiler for this stage.\n+        let compiler = builder.compiler(stage, builder.config.build);\n+        let rustdoc = builder.rustdoc(compiler.host);\n+        let compiler = if builder.force_use_stage1(compiler, target) {\n+            builder.compiler(1, compiler.host)\n+        } else {\n+            compiler\n+        };\n+\n+        if !builder.config.compiler_docs {\n+            builder.info(&format!(\"\\tskipping - compiler/librustdoc docs disabled\"));\n+            return;\n+        }\n+\n+        // Build libstd docs so that we generate relative links.\n+        builder.ensure(Std { stage, target });\n+\n+        // Build rustdoc.\n+        builder.ensure(tool::Rustdoc { host: compiler.host });\n+\n+        // Symlink compiler docs to the output directory of rustdoc documentation.\n+        let out_dir = builder.stage_out(compiler, Mode::Tool).join(target).join(\"doc\");\n+        t!(fs::create_dir_all(&out_dir));\n+        builder.clear_if_dirty(&out, &rustdoc);\n+        t!(symlink_dir_force(&builder.config, &out, &out_dir));\n+\n+        // Build cargo command.\n+        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"doc\", \"src/tools/rustdoc\");\n+        cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n+        builder.run(&mut cargo);\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n     target: Interned<String>,"}]}