{"sha": "f71807d507a83182e010623cd401ea275c43e950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTgwN2Q1MDdhODMxODJlMDEwNjIzY2Q0MDFlYTI3NWM0M2U5NTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-21T08:45:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-22T20:54:51Z"}, "message": "make `parent_id` not optional\n\nIt'd be pretty buggy if `None` were supplied anyway; we'd skip over\nin-band lifetimes completely!", "tree": {"sha": "e2c5a52701475f5c6fb0fe82b3da3b80afc2a776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c5a52701475f5c6fb0fe82b3da3b80afc2a776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71807d507a83182e010623cd401ea275c43e950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71807d507a83182e010623cd401ea275c43e950", "html_url": "https://github.com/rust-lang/rust/commit/f71807d507a83182e010623cd401ea275c43e950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71807d507a83182e010623cd401ea275c43e950/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4", "html_url": "https://github.com/rust-lang/rust/commit/a5743b3b5701e1c2f33a447350ff7b8f929f2ed4"}], "stats": {"total": 142, "additions": 62, "deletions": 80}, "files": [{"sha": "18fc559e5cb02a5a8f88e48fc5eea2f3166ce77f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 62, "deletions": 80, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/f71807d507a83182e010623cd401ea275c43e950/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71807d507a83182e010623cd401ea275c43e950/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f71807d507a83182e010623cd401ea275c43e950", "patch": "@@ -547,11 +547,7 @@ impl<'a> LoweringContext<'a> {\n     // Creates a new hir::GenericParam for every new lifetime and type parameter\n     // encountered while evaluating `f`. Definitions are created with the parent\n     // provided. If no `parent_id` is provided, no definitions will be returned.\n-    fn collect_in_band_defs<T, F>(\n-        &mut self,\n-        parent_id: Option<DefId>,\n-        f: F,\n-    ) -> (Vec<hir::GenericParam>, T)\n+    fn collect_in_band_defs<T, F>(&mut self, parent_id: DefId, f: F) -> (Vec<hir::GenericParam>, T)\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n@@ -568,42 +564,38 @@ impl<'a> LoweringContext<'a> {\n         let in_band_ty_params = self.in_band_ty_params.split_off(0);\n         let lifetimes_to_define = self.lifetimes_to_define.split_off(0);\n \n-        let mut params = match parent_id {\n-            Some(parent_id) => lifetimes_to_define\n-                .into_iter()\n-                .map(|(span, name)| {\n-                    let def_node_id = self.next_id().node_id;\n+        let params = lifetimes_to_define\n+            .into_iter()\n+            .map(|(span, name)| {\n+                let def_node_id = self.next_id().node_id;\n+\n+                // Add a definition for the in-band lifetime def\n+                self.resolver.definitions().create_def_with_parent(\n+                    parent_id.index,\n+                    def_node_id,\n+                    DefPathData::LifetimeDef(name.as_str()),\n+                    DefIndexAddressSpace::High,\n+                    Mark::root(),\n+                    span,\n+                );\n \n-                    // Add a definition for the in-band lifetime def\n-                    self.resolver.definitions().create_def_with_parent(\n-                        parent_id.index,\n-                        def_node_id,\n-                        DefPathData::LifetimeDef(name.as_str()),\n-                        DefIndexAddressSpace::High,\n-                        Mark::root(),\n+                hir::GenericParam::Lifetime(hir::LifetimeDef {\n+                    lifetime: hir::Lifetime {\n+                        id: def_node_id,\n                         span,\n-                    );\n-\n-                    hir::GenericParam::Lifetime(hir::LifetimeDef {\n-                        lifetime: hir::Lifetime {\n-                            id: def_node_id,\n-                            span,\n-                            name: hir::LifetimeName::Name(name),\n-                        },\n-                        bounds: Vec::new().into(),\n-                        pure_wrt_drop: false,\n-                        in_band: true,\n-                    })\n+                        name: hir::LifetimeName::Name(name),\n+                    },\n+                    bounds: Vec::new().into(),\n+                    pure_wrt_drop: false,\n+                    in_band: true,\n                 })\n-                .collect(),\n-            None => Vec::new(),\n-        };\n-\n-        params.extend(\n-            in_band_ty_params\n-                .into_iter()\n-                .map(|tp| hir::GenericParam::Type(tp)),\n-        );\n+            })\n+            .chain(\n+                in_band_ty_params\n+                    .into_iter()\n+                    .map(|tp| hir::GenericParam::Type(tp)),\n+            )\n+            .collect();\n \n         (params, res)\n     }\n@@ -654,20 +646,17 @@ impl<'a> LoweringContext<'a> {\n     fn add_in_band_defs<F, T>(\n         &mut self,\n         generics: &Generics,\n-        parent_id: Option<DefId>,\n+        parent_id: DefId,\n         f: F,\n     ) -> (hir::Generics, T)\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n-            generics\n-                .params\n-                .iter()\n-                .filter_map(|p| match p {\n-                    GenericParam::Lifetime(ld) => Some(ld),\n-                    _ => None,\n-                }),\n+            generics.params.iter().filter_map(|p| match p {\n+                GenericParam::Lifetime(ld) => Some(ld),\n+                _ => None,\n+            }),\n             |this| {\n                 this.collect_in_band_defs(parent_id, |this| {\n                     (this.lower_generics(generics), f(this))\n@@ -926,12 +915,10 @@ impl<'a> LoweringContext<'a> {\n                 hir::TyRptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(\n-                f.generic_params\n-                    .iter()\n-                    .filter_map(|p| match p {\n-                        GenericParam::Lifetime(ld) => Some(ld),\n-                        _ => None,\n-                    }),\n+                f.generic_params.iter().filter_map(|p| match p {\n+                    GenericParam::Lifetime(ld) => Some(ld),\n+                    _ => None,\n+                }),\n                 |this| {\n                     hir::TyBareFn(P(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(&f.generic_params, &NodeMap()),\n@@ -1876,12 +1863,10 @@ impl<'a> LoweringContext<'a> {\n                 span,\n             }) => {\n                 self.with_in_scope_lifetime_defs(\n-                    bound_generic_params\n-                        .iter()\n-                        .filter_map(|p| match p {\n-                            GenericParam::Lifetime(ld) => Some(ld),\n-                            _ => None,\n-                        }),\n+                    bound_generic_params.iter().filter_map(|p| match p {\n+                        GenericParam::Lifetime(ld) => Some(ld),\n+                        _ => None,\n+                    }),\n                     |this| {\n                         hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                             bound_generic_params: this.lower_generic_params(\n@@ -2097,14 +2082,14 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemConst(self.lower_ty(t, ImplTraitContext::Disallowed), value)\n             }\n             ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n-                let fn_def_id = self.resolver.definitions().opt_local_def_id(id);\n+                let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     let body_id = this.lower_body(Some(decl), |this| {\n                         let body = this.lower_block(body, false);\n                         this.expr_block(body, ThinVec::new())\n                     });\n                     let (generics, fn_decl) = this.add_in_band_defs(generics, fn_def_id, |this| {\n-                        this.lower_fn_decl(decl, fn_def_id, true)\n+                        this.lower_fn_decl(decl, Some(fn_def_id), true)\n                     });\n \n                     hir::ItemFn(\n@@ -2151,7 +2136,7 @@ impl<'a> LoweringContext<'a> {\n                 ref ty,\n                 ref impl_items,\n             ) => {\n-                let def_id = self.resolver.definitions().opt_local_def_id(id);\n+                let def_id = self.resolver.definitions().local_def_id(id);\n                 let (generics, (ifce, lowered_ty)) =\n                     self.add_in_band_defs(ast_generics, def_id, |this| {\n                         let ifce = ifce.as_ref().map(|trait_ref| {\n@@ -2170,13 +2155,10 @@ impl<'a> LoweringContext<'a> {\n                     });\n \n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n-                    ast_generics\n-                        .params\n-                        .iter()\n-                        .filter_map(|p| match p {\n-                            GenericParam::Lifetime(ld) => Some(ld),\n-                            _ => None,\n-                        }),\n+                    ast_generics.params.iter().filter_map(|p| match p {\n+                        GenericParam::Lifetime(ld) => Some(ld),\n+                        _ => None,\n+                    }),\n                     |this| {\n                         impl_items\n                             .iter()\n@@ -2341,7 +2323,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {\n         self.with_parent_def(i.id, |this| {\n             let LoweredNodeId { node_id, hir_id } = this.lower_node_id(i.id);\n-            let fn_def_id = this.resolver.definitions().opt_local_def_id(node_id);\n+            let trait_item_def_id = this.resolver.definitions().local_def_id(node_id);\n \n             let (generics, node) = match i.node {\n                 TraitItemKind::Const(ref ty, ref default) => (\n@@ -2355,9 +2337,9 @@ impl<'a> LoweringContext<'a> {\n                 ),\n                 TraitItemKind::Method(ref sig, None) => {\n                     let names = this.lower_fn_args_to_names(&sig.decl);\n-                    this.add_in_band_defs(&i.generics, fn_def_id, |this| {\n+                    this.add_in_band_defs(&i.generics, trait_item_def_id, |this| {\n                         hir::TraitItemKind::Method(\n-                            this.lower_method_sig(sig, fn_def_id, false),\n+                            this.lower_method_sig(sig, trait_item_def_id, false),\n                             hir::TraitMethod::Required(names),\n                         )\n                     })\n@@ -2368,9 +2350,9 @@ impl<'a> LoweringContext<'a> {\n                         this.expr_block(body, ThinVec::new())\n                     });\n \n-                    this.add_in_band_defs(&i.generics, fn_def_id, |this| {\n+                    this.add_in_band_defs(&i.generics, trait_item_def_id, |this| {\n                         hir::TraitItemKind::Method(\n-                            this.lower_method_sig(sig, fn_def_id, false),\n+                            this.lower_method_sig(sig, trait_item_def_id, false),\n                             hir::TraitMethod::Provided(body_id),\n                         )\n                     })\n@@ -2427,7 +2409,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n         self.with_parent_def(i.id, |this| {\n             let LoweredNodeId { node_id, hir_id } = this.lower_node_id(i.id);\n-            let fn_def_id = this.resolver.definitions().opt_local_def_id(node_id);\n+            let impl_item_def_id = this.resolver.definitions().local_def_id(node_id);\n \n             let (generics, node) = match i.node {\n                 ImplItemKind::Const(ref ty, ref expr) => {\n@@ -2447,9 +2429,9 @@ impl<'a> LoweringContext<'a> {\n                     });\n                     let impl_trait_return_allow = !this.is_in_trait_impl;\n \n-                    this.add_in_band_defs(&i.generics, fn_def_id, |this| {\n+                    this.add_in_band_defs(&i.generics, impl_item_def_id, |this| {\n                         hir::ImplItemKind::Method(\n-                            this.lower_method_sig(sig, fn_def_id, impl_trait_return_allow),\n+                            this.lower_method_sig(sig, impl_item_def_id, impl_trait_return_allow),\n                             body_id,\n                         )\n                     })\n@@ -2575,10 +2557,10 @@ impl<'a> LoweringContext<'a> {\n                 attrs: this.lower_attrs(&i.attrs),\n                 node: match i.node {\n                     ForeignItemKind::Fn(ref fdec, ref generics) => {\n-                        // Disallow impl Trait in foreign items\n                         let (generics, (fn_dec, fn_args)) =\n-                            this.add_in_band_defs(generics, Some(def_id), |this| {\n+                            this.add_in_band_defs(generics, def_id, |this| {\n                                 (\n+                                    // Disallow impl Trait in foreign items\n                                     this.lower_fn_decl(fdec, None, false),\n                                     this.lower_fn_args_to_names(fdec),\n                                 )\n@@ -2600,14 +2582,14 @@ impl<'a> LoweringContext<'a> {\n     fn lower_method_sig(\n         &mut self,\n         sig: &MethodSig,\n-        fn_def_id: Option<DefId>,\n+        fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n     ) -> hir::MethodSig {\n         hir::MethodSig {\n             abi: sig.abi,\n             unsafety: self.lower_unsafety(sig.unsafety),\n             constness: self.lower_constness(sig.constness),\n-            decl: self.lower_fn_decl(&sig.decl, fn_def_id, impl_trait_return_allow),\n+            decl: self.lower_fn_decl(&sig.decl, Some(fn_def_id), impl_trait_return_allow),\n         }\n     }\n "}]}