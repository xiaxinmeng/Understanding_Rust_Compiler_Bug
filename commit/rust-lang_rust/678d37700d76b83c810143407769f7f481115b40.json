{"sha": "678d37700d76b83c810143407769f7f481115b40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OGQzNzcwMGQ3NmI4M2M4MTAxNDM0MDc3NjlmN2Y0ODExMTViNDA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-13T12:43:56Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-13T15:45:40Z"}, "message": "Address some nits in trans-collector and partitioner.", "tree": {"sha": "ff6405935a3924da7d6f88e302b15afa1af9c655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6405935a3924da7d6f88e302b15afa1af9c655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/678d37700d76b83c810143407769f7f481115b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/678d37700d76b83c810143407769f7f481115b40", "html_url": "https://github.com/rust-lang/rust/commit/678d37700d76b83c810143407769f7f481115b40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/678d37700d76b83c810143407769f7f481115b40/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93e62b2c573d2e82d05ce1f88c7344f6e253794", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93e62b2c573d2e82d05ce1f88c7344f6e253794", "html_url": "https://github.com/rust-lang/rust/commit/c93e62b2c573d2e82d05ce1f88c7344f6e253794"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "7b836399f9cb5ec4528b756b218c5e73b51fff0c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/678d37700d76b83c810143407769f7f481115b40/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/678d37700d76b83c810143407769f7f481115b40/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=678d37700d76b83c810143407769f7f481115b40", "patch": "@@ -1301,7 +1301,9 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n \n     let (items, inlining_map) =\n         time(time_passes, \"translation item collection\", || {\n-            collector::collect_crate_translation_items(&scx, collection_mode)\n+            collector::collect_crate_translation_items(&scx,\n+                                                       exported_symbols,\n+                                                       collection_mode)\n     });\n \n     assert_symbols_are_distinct(scx.tcx(), items.iter());"}, {"sha": "6a573b76eecdc1cfcebc43a0fabca0751bafcec7", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/678d37700d76b83c810143407769f7f481115b40/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/678d37700d76b83c810143407769f7f481115b40/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=678d37700d76b83c810143407769f7f481115b40", "patch": "@@ -209,6 +209,7 @@ use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use trans_item::{TransItem, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n+use back::symbol_export::ExportedSymbols;\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum TransItemCollectionMode {\n@@ -293,13 +294,14 @@ impl<'tcx> InliningMap<'tcx> {\n }\n \n pub fn collect_crate_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n+                                                 exported_symbols: &ExportedSymbols,\n                                                  mode: TransItemCollectionMode)\n                                                  -> (FxHashSet<TransItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n     // We are not tracking dependencies of this pass as it has to be re-executed\n     // every time no matter what.\n     scx.tcx().dep_graph.with_ignore(|| {\n-        let roots = collect_roots(scx, mode);\n+        let roots = collect_roots(scx, exported_symbols, mode);\n \n         debug!(\"Building translation item graph, beginning at roots\");\n         let mut visited = FxHashSet();\n@@ -321,6 +323,7 @@ pub fn collect_crate_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 't\n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n+                           exported_symbols: &ExportedSymbols,\n                            mode: TransItemCollectionMode)\n                            -> Vec<TransItem<'tcx>> {\n     debug!(\"Collecting roots\");\n@@ -330,6 +333,7 @@ fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         let mut visitor = RootCollector {\n             scx: scx,\n             mode: mode,\n+            exported_symbols,\n             output: &mut roots,\n         };\n \n@@ -853,6 +857,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n \n struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     scx: &'b SharedCrateContext<'a, 'tcx>,\n+    exported_symbols: &'b ExportedSymbols,\n     mode: TransItemCollectionMode,\n     output: &'b mut Vec<TransItem<'tcx>>,\n }\n@@ -908,20 +913,19 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 // const items only generate translation items if they are\n                 // actually used somewhere. Just declaring them is insufficient.\n             }\n-            hir::ItemFn(_, _, constness, _, ref generics, _) => {\n-                let is_const = match constness {\n-                    hir::Constness::Const => true,\n-                    hir::Constness::NotConst => false,\n-                };\n+            hir::ItemFn(..) => {\n+                let tcx = self.scx.tcx();\n+                let def_id = tcx.hir.local_def_id(item.id);\n \n-                if !generics.is_type_parameterized() &&\n-                   (!is_const || self.mode == TransItemCollectionMode::Eager) {\n-                    let def_id = self.scx.tcx().hir.local_def_id(item.id);\n+                if (self.mode == TransItemCollectionMode::Eager ||\n+                    !tcx.is_const_fn(def_id) ||\n+                    self.exported_symbols.local_exports().contains(&item.id)) &&\n+                   !item_has_type_parameters(tcx, def_id) {\n \n                     debug!(\"RootCollector: ItemFn({})\",\n-                           def_id_to_string(self.scx.tcx(), def_id));\n+                           def_id_to_string(tcx, def_id));\n \n-                    let instance = Instance::mono(self.scx.tcx(), def_id);\n+                    let instance = Instance::mono(tcx, def_id);\n                     self.output.push(TransItem::Fn(instance));\n                 }\n             }\n@@ -935,39 +939,18 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.node {\n-            hir::ImplItemKind::Method(hir::MethodSig {\n-                constness,\n-                ref generics,\n-                ..\n-            }, _) => {\n-                let hir_map = &self.scx.tcx().hir;\n-                let parent_node_id = hir_map.get_parent_node(ii.id);\n-                let is_impl_generic = || match hir_map.expect_item(parent_node_id) {\n-                    &hir::Item {\n-                        node: hir::ItemImpl(_, _, _, ref generics, ..),\n-                        ..\n-                    } => {\n-                        generics.is_type_parameterized()\n-                    }\n-                    _ => {\n-                        bug!()\n-                    }\n-                };\n-\n-                let is_const = match constness {\n-                    hir::Constness::Const => true,\n-                    hir::Constness::NotConst => false,\n-                };\n-\n-                if (!is_const || self.mode == TransItemCollectionMode::Eager) &&\n-                   !generics.is_type_parameterized() &&\n-                   !is_impl_generic() {\n-                    let def_id = self.scx.tcx().hir.local_def_id(ii.id);\n+            hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n+                let tcx = self.scx.tcx();\n+                let def_id = tcx.hir.local_def_id(ii.id);\n \n+                if (self.mode == TransItemCollectionMode::Eager ||\n+                    !tcx.is_const_fn(def_id) ||\n+                    self.exported_symbols.local_exports().contains(&ii.id)) &&\n+                   !item_has_type_parameters(tcx, def_id) {\n                     debug!(\"RootCollector: MethodImplItem({})\",\n-                           def_id_to_string(self.scx.tcx(), def_id));\n+                           def_id_to_string(tcx, def_id));\n \n-                    let instance = Instance::mono(self.scx.tcx(), def_id);\n+                    let instance = Instance::mono(tcx, def_id);\n                     self.output.push(TransItem::Fn(instance));\n                 }\n             }\n@@ -976,6 +959,11 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n     }\n }\n \n+fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    let generics = tcx.generics_of(def_id);\n+    generics.parent_types as usize + generics.types.len() > 0\n+}\n+\n fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                                   item: &'tcx hir::Item,\n                                                   output: &mut Vec<TransItem<'tcx>>) {"}, {"sha": "1ff21bfdd94e38262aebc48ff6df4ba2341f06f8", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/678d37700d76b83c810143407769f7f481115b40/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/678d37700d76b83c810143407769f7f481115b40/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=678d37700d76b83c810143407769f7f481115b40", "patch": "@@ -576,7 +576,6 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             cgu_name: cgu.name.clone()\n         };\n \n-        'item:\n         for (accessee, &mut (ref mut linkage, _)) in &mut cgu.items {\n             if !partitioning.internalization_candidates.contains(accessee) {\n                 // This item is no candidate for internalizing, so skip it.\n@@ -594,7 +593,7 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             .any(|placement| *placement != home_cgu) {\n                     // Found an accessor from another CGU, so skip to the next\n                     // item without marking this one as internal.\n-                    continue 'item;\n+                    continue\n                 }\n             }\n "}]}