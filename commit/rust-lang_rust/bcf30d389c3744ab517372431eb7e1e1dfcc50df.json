{"sha": "bcf30d389c3744ab517372431eb7e1e1dfcc50df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjMwZDM4OWMzNzQ0YWI1MTczNzI0MzFlYjdlMWUxZGZjYzUwZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-12T21:31:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-12T21:31:04Z"}, "message": "generalize impl_froms to nested enums", "tree": {"sha": "8b34525b463ba62d9b1acc90a790a438ba8f9ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b34525b463ba62d9b1acc90a790a438ba8f9ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf30d389c3744ab517372431eb7e1e1dfcc50df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf30d389c3744ab517372431eb7e1e1dfcc50df", "html_url": "https://github.com/rust-lang/rust/commit/bcf30d389c3744ab517372431eb7e1e1dfcc50df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf30d389c3744ab517372431eb7e1e1dfcc50df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45117c63884366ee82102a782a62a09fefff746b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45117c63884366ee82102a782a62a09fefff746b", "html_url": "https://github.com/rust-lang/rust/commit/45117c63884366ee82102a782a62a09fefff746b"}], "stats": {"total": 84, "additions": 26, "deletions": 58}, "files": [{"sha": "a10e795ce3153485353c79b8c899be4e33c83fda", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bcf30d389c3744ab517372431eb7e1e1dfcc50df", "patch": "@@ -139,7 +139,7 @@ pub enum ModuleDef {\n impl_froms!(\n     ModuleDef: Module,\n     Function,\n-    AdtDef,\n+    AdtDef(Struct, Enum, Union),\n     EnumVariant,\n     Const,\n     Static,\n@@ -148,24 +148,6 @@ impl_froms!(\n     BuiltinType\n );\n \n-impl From<Struct> for ModuleDef {\n-    fn from(it: Struct) -> ModuleDef {\n-        ModuleDef::AdtDef(AdtDef::Struct(it))\n-    }\n-}\n-\n-impl From<Enum> for ModuleDef {\n-    fn from(it: Enum) -> ModuleDef {\n-        ModuleDef::AdtDef(AdtDef::Enum(it))\n-    }\n-}\n-\n-impl From<Union> for ModuleDef {\n-    fn from(it: Union) -> ModuleDef {\n-        ModuleDef::AdtDef(AdtDef::Union(it))\n-    }\n-}\n-\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),\n     Module(ast::Module),"}, {"sha": "74435c20a9884a4293040cbe16c8e8b621fdb2bb", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=bcf30d389c3744ab517372431eb7e1e1dfcc50df", "patch": "@@ -55,25 +55,14 @@ pub enum GenericDef {\n     // can, and this makes some code easier to write\n     EnumVariant(EnumVariant),\n }\n-impl_froms!(GenericDef: Function, AdtDef, Trait, TypeAlias, ImplBlock, EnumVariant);\n-\n-impl From<Struct> for GenericDef {\n-    fn from(it: Struct) -> GenericDef {\n-        GenericDef::AdtDef(AdtDef::Struct(it))\n-    }\n-}\n-\n-impl From<Enum> for GenericDef {\n-    fn from(it: Enum) -> GenericDef {\n-        GenericDef::AdtDef(AdtDef::Enum(it))\n-    }\n-}\n-\n-impl From<Union> for GenericDef {\n-    fn from(it: Union) -> GenericDef {\n-        GenericDef::AdtDef(AdtDef::Union(it))\n-    }\n-}\n+impl_froms!(\n+    GenericDef: Function,\n+    AdtDef(Struct, Enum, Union),\n+    Trait,\n+    TypeAlias,\n+    ImplBlock,\n+    EnumVariant\n+);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query("}, {"sha": "639e97c3d1a5c33ee01238ef93f3400c96c8a324", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=bcf30d389c3744ab517372431eb7e1e1dfcc50df", "patch": "@@ -8,13 +8,20 @@\n //! applied. So, the relation between syntax and HIR is many-to-one.\n \n macro_rules! impl_froms {\n-    ($e:ident: $($v:ident),*) => {\n+    ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {\n         $(\n             impl From<$v> for $e {\n                 fn from(it: $v) -> $e {\n                     $e::$v(it)\n                 }\n             }\n+            $($(\n+                impl From<$sv> for $e {\n+                    fn from(it: $sv) -> $e {\n+                        $e::$v($v::$sv(it))\n+                    }\n+                }\n+            )*)?\n         )*\n     }\n }"}, {"sha": "105c893f078b812deb918a88b55c84060d0f0777", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf30d389c3744ab517372431eb7e1e1dfcc50df/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=bcf30d389c3744ab517372431eb7e1e1dfcc50df", "patch": "@@ -611,25 +611,15 @@ pub enum TypableDef {\n     Static(Static),\n     BuiltinType(BuiltinType),\n }\n-impl_froms!(TypableDef: Function, AdtDef, EnumVariant, TypeAlias, Const, Static, BuiltinType);\n-\n-impl From<Struct> for TypableDef {\n-    fn from(it: Struct) -> TypableDef {\n-        TypableDef::AdtDef(AdtDef::Struct(it))\n-    }\n-}\n-\n-impl From<Enum> for TypableDef {\n-    fn from(it: Enum) -> TypableDef {\n-        TypableDef::AdtDef(AdtDef::Enum(it))\n-    }\n-}\n-\n-impl From<Union> for TypableDef {\n-    fn from(it: Union) -> TypableDef {\n-        TypableDef::AdtDef(AdtDef::Union(it))\n-    }\n-}\n+impl_froms!(\n+    TypableDef: Function,\n+    AdtDef(Struct, Enum, Union),\n+    EnumVariant,\n+    TypeAlias,\n+    Const,\n+    Static,\n+    BuiltinType\n+);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {"}]}