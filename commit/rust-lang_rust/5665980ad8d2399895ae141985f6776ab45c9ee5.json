{"sha": "5665980ad8d2399895ae141985f6776ab45c9ee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NjU5ODBhZDhkMjM5OTg5NWFlMTQxOTg1ZjY3NzZhYjQ1YzllZTU=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-04-25T17:28:04Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-16T11:56:24Z"}, "message": "Make the compiler support the label-break-value feature\n\nNo error checking or feature gating yet", "tree": {"sha": "476805a843bb5ec13db391f0d1f9005643c6295b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/476805a843bb5ec13db391f0d1f9005643c6295b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5665980ad8d2399895ae141985f6776ab45c9ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5665980ad8d2399895ae141985f6776ab45c9ee5", "html_url": "https://github.com/rust-lang/rust/commit/5665980ad8d2399895ae141985f6776ab45c9ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5665980ad8d2399895ae141985f6776ab45c9ee5/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebca9c6ab9332e0befea6ca57bd4789e606cd305", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebca9c6ab9332e0befea6ca57bd4789e606cd305", "html_url": "https://github.com/rust-lang/rust/commit/ebca9c6ab9332e0befea6ca57bd4789e606cd305"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "0f4871954d669bbe231ba9cdf6344381d8701f62", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -3101,7 +3101,9 @@ impl<'a> LoweringContext<'a> {\n                 })\n             }\n             ExprKind::Block(ref blk, opt_label) => {\n-                hir::ExprBlock(self.lower_block(blk, false), self.lower_label(opt_label))\n+                hir::ExprBlock(self.lower_block(blk,\n+                                                opt_label.is_some()),\n+                                                self.lower_label(opt_label))\n             }\n             ExprKind::Assign(ref el, ref er) => {\n                 hir::ExprAssign(P(self.lower_expr(el)), P(self.lower_expr(er)))"}, {"sha": "79c0f2de7962e10f62975454cb5f0d7b7307e178", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -778,9 +778,8 @@ pub struct Block {\n     pub rules: BlockCheckMode,\n     pub span: Span,\n     /// If true, then there may exist `break 'a` values that aim to\n-    /// break out of this block early. As of this writing, this is not\n-    /// currently permitted in Rust itself, but it is generated as\n-    /// part of `catch` statements.\n+    /// break out of this block early.\n+    /// Used by `'label {}` blocks and by `catch` statements.\n     pub targeted_by_break: bool,\n     /// If true, don't emit return value type errors as the parser had\n     /// to recover from a parse error so this block will not have an"}, {"sha": "c9f86d43998c8a7c18623e75d5058bd0963f7ea7", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         self.in_opt_scope(opt_destruction_scope.map(|de|(de, source_info)), block, move |this| {\n             this.in_scope((region_scope, source_info), LintLevel::Inherited, block, move |this| {\n                 if targeted_by_break {\n-                    // This is a `break`-able block (currently only `catch { ... }`)\n+                    // This is a `break`-able block\n                     let exit_block = this.cfg.start_new_block();\n                     let block_exit = this.in_breakable_scope(\n                         None, exit_block, destination.clone(), |this| {"}, {"sha": "34a3f5e54b8a23708ad83904af513c89062b7e76", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -21,6 +21,7 @@ use syntax_pos::Span;\n enum LoopKind {\n     Loop(hir::LoopSource),\n     WhileLoop,\n+    Block,\n }\n \n impl LoopKind {\n@@ -30,6 +31,7 @@ impl LoopKind {\n             LoopKind::Loop(hir::LoopSource::WhileLet) => \"while let\",\n             LoopKind::Loop(hir::LoopSource::ForLoop) => \"for\",\n             LoopKind::WhileLoop => \"while\",\n+            LoopKind::Block => \"block\",\n         }\n     }\n }\n@@ -39,6 +41,7 @@ enum Context {\n     Normal,\n     Loop(LoopKind),\n     Closure,\n+    LabeledBlock,\n }\n \n #[derive(Copy, Clone)]\n@@ -84,6 +87,9 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprClosure(.., b, _, _) => {\n                 self.with_context(Closure, |v| v.visit_nested_body(b));\n             }\n+            hir::ExprBlock(ref b, Some(_label)) => {\n+                self.with_context(LabeledBlock, |v| v.visit_block(&b));\n+            }\n             hir::ExprBreak(label, ref opt_expr) => {\n                 let loop_id = match label.target_id.into() {\n                     Ok(loop_id) => loop_id,\n@@ -94,32 +100,41 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     },\n                     Err(hir::LoopIdError::UnresolvedLabel) => ast::DUMMY_NODE_ID,\n                 };\n+\n                 if loop_id != ast::DUMMY_NODE_ID {\n                     match self.hir_map.find(loop_id).unwrap() {\n                         hir::map::NodeBlock(_) => return,\n                         _=> (),\n                     }\n                 }\n \n+                if self.cx == LabeledBlock {\n+                    return;\n+                }\n+\n                 if opt_expr.is_some() {\n                     let loop_kind = if loop_id == ast::DUMMY_NODE_ID {\n                         None\n                     } else {\n                         Some(match self.hir_map.expect_expr(loop_id).node {\n                             hir::ExprWhile(..) => LoopKind::WhileLoop,\n                             hir::ExprLoop(_, _, source) => LoopKind::Loop(source),\n+                            hir::ExprBlock(..) => LoopKind::Block,\n                             ref r => span_bug!(e.span,\n                                                \"break label resolved to a non-loop: {:?}\", r),\n                         })\n                     };\n                     match loop_kind {\n-                        None | Some(LoopKind::Loop(hir::LoopSource::Loop)) => (),\n+                        None |\n+                        Some(LoopKind::Loop(hir::LoopSource::Loop)) |\n+                        Some(LoopKind::Block) => (),\n                         Some(kind) => {\n                             struct_span_err!(self.sess, e.span, E0571,\n                                              \"`break` with value from a `{}` loop\",\n                                              kind.name())\n                                 .span_label(e.span,\n-                                            \"can only break with a value inside `loop`\")\n+                                            \"can only break with a value inside \\\n+                                            `loop` or breakable block\")\n                                 .span_suggestion(e.span,\n                                                  &format!(\"instead, use `break` on its own \\\n                                                            without a value inside this `{}` loop\",\n@@ -130,13 +145,13 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     }\n                 }\n \n-                self.require_loop(\"break\", e.span);\n+                self.require_break_cx(\"break\", e.span);\n             }\n             hir::ExprAgain(label) => {\n                 if let Err(hir::LoopIdError::UnlabeledCfInWhileCondition) = label.target_id {\n                     self.emit_unlabled_cf_in_while_condition(e.span, \"continue\");\n                 }\n-                self.require_loop(\"continue\", e.span)\n+                self.require_break_cx(\"continue\", e.span)\n             },\n             _ => intravisit::walk_expr(self, e),\n         }\n@@ -153,8 +168,9 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n         self.cx = old_cx;\n     }\n \n-    fn require_loop(&self, name: &str, span: Span) {\n+    fn require_break_cx(&self, name: &str, span: Span) {\n         match self.cx {\n+            LabeledBlock |\n             Loop(_) => {}\n             Closure => {\n                 struct_span_err!(self.sess, span, E0267, \"`{}` inside of a closure\", name)"}, {"sha": "d2934bc9ee8acc10ebddc9e19c62a33bef8225c5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -3753,6 +3753,8 @@ impl<'a> Resolver<'a> {\n                 self.ribs[ValueNS].pop();\n             }\n \n+            ExprKind::Block(ref block, label) => self.resolve_labeled_block(label, block.id, block),\n+\n             // Equivalent to `visit::walk_expr` + passing some context to children.\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));"}, {"sha": "e1798e2617177264b77ab7cac569ae02f3cac8f3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -4326,8 +4326,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // In some cases, blocks have just one exit, but other blocks\n-        // can be targeted by multiple breaks. This cannot happen in\n-        // normal Rust syntax today, but it can happen when we desugar\n+        // can be targeted by multiple breaks. This can happen both\n+        // with labeled blocks as well as when we desugar\n         // a `do catch { ... }` expression.\n         //\n         // Example 1:"}, {"sha": "68a2bab1674e83633b41306bbb81244e9afc3808", "filename": "src/test/ui/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5665980ad8d2399895ae141985f6776ab45c9ee5/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr?ref=5665980ad8d2399895ae141985f6776ab45c9ee5", "patch": "@@ -2,7 +2,7 @@ error[E0571]: `break` with value from a `for` loop\n   --> $DIR/loop-break-value-no-repeat.rs:22:9\n    |\n LL |         break 22 //~ ERROR `break` with value from a `for` loop\n-   |         ^^^^^^^^ can only break with a value inside `loop`\n+   |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n help: instead, use `break` on its own without a value inside this `for` loop\n    |\n LL |         break //~ ERROR `break` with value from a `for` loop"}]}