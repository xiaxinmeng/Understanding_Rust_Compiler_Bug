{"sha": "84df1edad3f7fd7e410869616c68f4b5f8f882fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZGYxZWRhZDNmN2ZkN2U0MTA4Njk2MTZjNjhmNGI1ZjhmODgyZmI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-31T14:20:49Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-31T14:20:49Z"}, "message": "Delete long-running large rlibs test\n\nThis is kept to a separate commit so that the test itself is preserved in the\ncommit history.", "tree": {"sha": "270ee077ee0ae27e4774a570fcf7f5c67c57f28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/270ee077ee0ae27e4774a570fcf7f5c67c57f28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84df1edad3f7fd7e410869616c68f4b5f8f882fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84df1edad3f7fd7e410869616c68f4b5f8f882fb", "html_url": "https://github.com/rust-lang/rust/commit/84df1edad3f7fd7e410869616c68f4b5f8f882fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84df1edad3f7fd7e410869616c68f4b5f8f882fb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c7c97a2087fc66e6a6d105b01877b5407a8a7cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd", "html_url": "https://github.com/rust-lang/rust/commit/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd"}], "stats": {"total": 76, "additions": 0, "deletions": 76}, "files": [{"sha": "98938e5ebc473a0f3f16dbf4e93b89079079ad41", "filename": "src/test/run-make/issue-88351-large-rlib/Makefile", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2FMakefile?ref=4c7c97a2087fc66e6a6d105b01877b5407a8a7cd", "patch": "@@ -1,7 +0,0 @@\n--include ../../run-make-fulldeps/tools.mk\n-\n-all:\n-\t$(RUSTC) main.rs\n-\t$(TMPDIR)/main $(TMPDIR)\n-\t$(RUSTC) $(TMPDIR)/foo.rs --crate-type=rlib -l static=foo -L$(TMPDIR)\n-\tRUSTC_LOG=rustc_metadata=debug $(RUSTC) bar.rs --extern foo=$(TMPDIR)/libfoo.rlib --edition=2018"}, {"sha": "1b6000364904ea33697b6399476a10ee1121e403", "filename": "src/test/run-make/issue-88351-large-rlib/bar.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2Fbar.rs?ref=4c7c97a2087fc66e6a6d105b01877b5407a8a7cd", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    unsafe {\n-        println!(\"{}\", foo::FOO_11_49[0]);\n-    }\n-}"}, {"sha": "f97830f3d86feffa10569cb9aeb2693c83a8a6a7", "filename": "src/test/run-make/issue-88351-large-rlib/main.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7c97a2087fc66e6a6d105b01877b5407a8a7cd/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88351-large-rlib%2Fmain.rs?ref=4c7c97a2087fc66e6a6d105b01877b5407a8a7cd", "patch": "@@ -1,64 +0,0 @@\n-//! Large archive example.\n-//!\n-//! This creates several C files with a bunch of global arrays. The goal is to\n-//! create an rlib that is over 4GB in size so that the LLVM archiver creates\n-//! a /SYM64/ entry instead of /.\n-//!\n-//! It compiles the C files to .o files, and then uses `ar` to collect them\n-//! into a static library. It creates `foo.rs` with references to all the C\n-//! arrays, and then uses `rustc` to build an rlib with that static\n-//! information. It then creates `bar.rs` which links the giant libfoo.rlib,\n-//! which should fail since it can't read the large libfoo.rlib file.\n-\n-use std::env;\n-use std::fs::File;\n-use std::io::{BufWriter, Write};\n-use std::process::Command;\n-\n-// Number of object files to create.\n-const NOBJ: u32 = 12;\n-// Make the filename longer than 16 characters to force names to be placed in //\n-const PREFIX: &str = \"abcdefghijklmnopqrstuvwxyz\";\n-\n-fn main() {\n-    let tmpdir = std::path::PathBuf::from(env::args_os().nth(1).unwrap());\n-    let mut foo_rs = File::create(tmpdir.join(\"foo.rs\")).unwrap();\n-    write!(foo_rs, \"extern \\\"C\\\" {{\\n\").unwrap();\n-    for obj in 0..NOBJ {\n-        let filename = tmpdir.join(&format!(\"{}{}.c\", PREFIX, obj));\n-        let f = File::create(&filename).unwrap();\n-        let mut buf = BufWriter::new(f);\n-        write!(buf, \"#include<stdint.h>\\n\").unwrap();\n-        for n in 0..50 {\n-            write!(buf, \"int64_t FOO_{}_{}[] = {{\\n\", obj, n).unwrap();\n-            for x in 0..1024 {\n-                for y in 0..1024 {\n-                    write!(buf, \"{},\", (obj + n + x + y) % 10).unwrap();\n-                }\n-                write!(buf, \"\\n\").unwrap();\n-            }\n-            write!(buf, \"}};\\n\").unwrap();\n-            write!(foo_rs, \"    pub static FOO_{}_{}: [i64; 1024*1024];\\n\", obj, n).unwrap();\n-        }\n-        drop(buf);\n-        println!(\"compile {:?}\", filename);\n-        let status =\n-            Command::new(\"cc\").current_dir(&tmpdir).arg(\"-c\").arg(&filename).status().unwrap();\n-        if !status.success() {\n-            panic!(\"failed: {:?}\", status);\n-        }\n-    }\n-    write!(foo_rs, \"}}\\n\").unwrap();\n-    drop(foo_rs);\n-    let mut cmd = Command::new(\"ar\");\n-    cmd.arg(\"-crs\");\n-    cmd.arg(tmpdir.join(\"libfoo.a\"));\n-    for obj in 0..NOBJ {\n-        cmd.arg(tmpdir.join(&format!(\"{}{}.o\", PREFIX, obj)));\n-    }\n-    println!(\"archiving: {:?}\", cmd);\n-    let status = cmd.status().unwrap();\n-    if !status.success() {\n-        panic!(\"failed: {:?}\", status);\n-    }\n-}"}]}