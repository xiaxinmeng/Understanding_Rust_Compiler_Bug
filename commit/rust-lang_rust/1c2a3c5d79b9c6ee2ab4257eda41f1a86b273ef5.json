{"sha": "1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMmEzYzVkNzliOWM2ZWUyYWI0MjU3ZWRhNDFmMWE4NmIyNzNlZjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-09T15:54:18Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: support impl's in PrintCx::parameterized.", "tree": {"sha": "bf4a57b5ae800b500690af89bf27d424c47581dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4a57b5ae800b500690af89bf27d424c47581dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "html_url": "https://github.com/rust-lang/rust/commit/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbbc7e915d362d6e0705197c884fce23246acd1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbbc7e915d362d6e0705197c884fce23246acd1d", "html_url": "https://github.com/rust-lang/rust/commit/fbbc7e915d362d6e0705197c884fce23246acd1d"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "6667d37873310e23ca87aed04ea9f8a543eab416", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -352,6 +352,22 @@ impl PrintCx<'a, 'gcx, 'tcx> {\n \n             write!(f, \"::{}\", key.disambiguated_data.data.as_interned_str())?;\n         } else {\n+            // Try to print `impl`s more like how you'd refer to their associated items.\n+            if let DefPathData::Impl = key.disambiguated_data.data {\n+                if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {\n+                    // HACK(eddyb) this is in lieu of more specific disambiguation.\n+                    print!(f, self, write(\"{}\", self.tcx.item_path_str(def_id)))?;\n+\n+                    let trait_ref = trait_ref.subst(self.tcx, substs);\n+                    print!(f, self, print_debug(trait_ref))?;\n+                } else {\n+                    let self_ty = self.tcx.type_of(def_id).subst(self.tcx, substs);\n+                    // FIXME(eddyb) omit the <> where possible.\n+                    print!(f, self, write(\"<\"), print(self_ty), write(\">\"))?;\n+                }\n+                return Ok(());\n+            }\n+\n             print!(f, self, write(\"{}\", self.tcx.item_path_str(def_id)))?;\n         }\n "}, {"sha": "d628573d51707386f0291e5b36363ff2f3a888fe", "filename": "src/test/ui/hygiene/impl_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.rs?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -9,7 +9,7 @@ mod foo {\n     }\n \n     pub macro m() {\n-        let _: () = S.f(); //~ ERROR type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n+        let _: () = S.f(); //~ ERROR type `for<'r> fn(&'r foo::S) {<foo::S>::f}` is private\n     }\n }\n "}, {"sha": "0a273bc98ff619dba33b33388cac8fa5341948b2", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -1,4 +1,4 @@\n-error: type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n+error: type `for<'r> fn(&'r foo::S) {<foo::S>::f}` is private\n   --> $DIR/impl_items.rs:12:23\n    |\n LL |         let _: () = S.f();"}, {"sha": "ff58c7aaced03186b1bf5809147ed72fe30a3098", "filename": "src/test/ui/issues/issue-22638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -50,7 +50,7 @@ struct D (Box<A>);\n \n impl D {\n     pub fn matches<F: Fn()>(&self, f: &F) {\n-        //~^ ERROR reached the type-length limit while instantiating `D::matches::<[closure\n+        //~^ ERROR reached the type-length limit while instantiating `<D>::matches::<[closure\n         let &D(ref a) = self;\n         a.matches(f)\n     }"}, {"sha": "65483abe5c7f9a31efcd4bfc20de4ac33b5c0b5d", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -1,4 +1,4 @@\n-error: reached the type-length limit while instantiating `D::matches::$CLOSURE`\n+error: reached the type-length limit while instantiating `<D>::matches::$CLOSURE`\n   --> $DIR/issue-22638.rs:52:5\n    |\n LL | /     pub fn matches<F: Fn()>(&self, f: &F) {"}, {"sha": "b284c8cf1172c9c4d6ebe452642cc39641070684", "filename": "src/test/ui/issues/issue-24322.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -5,7 +5,7 @@ LL |     let x: &fn(&B) -> u32 = &B::func;\n    |                             ^^^^^^^^ expected fn pointer, found fn item\n    |\n    = note: expected type `&for<'r> fn(&'r B) -> u32`\n-              found type `&for<'r> fn(&'r B) -> u32 {B::func}`\n+              found type `&for<'r> fn(&'r B) -> u32 {<B>::func}`\n \n error: aborting due to previous error\n "}, {"sha": "8062045a6c058cbb87018a24b82db4f1a133d6cd", "filename": "src/test/ui/issues/issue-29124.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -13,7 +13,7 @@ fn func() -> Ret {\n \n fn main() {\n     Obj::func.x();\n-    //~^ ERROR no method named `x` found for type `fn() -> Ret {Obj::func}` in the current scope\n+    //~^ ERROR no method named `x` found for type `fn() -> Ret {<Obj>::func}` in the current scope\n     func.x();\n     //~^ ERROR no method named `x` found for type `fn() -> Ret {func}` in the current scope\n }"}, {"sha": "67f188e0588e2e81b459d765c4bc92cb3ffeeccd", "filename": "src/test/ui/issues/issue-29124.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `x` found for type `fn() -> Ret {Obj::func}` in the current scope\n+error[E0599]: no method named `x` found for type `fn() -> Ret {<Obj>::func}` in the current scope\n   --> $DIR/issue-29124.rs:15:15\n    |\n LL |     Obj::func.x();"}, {"sha": "ca2f2a5ba284569a57f89592b83e33c23378ceff", "filename": "src/test/ui/issues/issue-39559-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -8,7 +8,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-39559-2.rs:14:24\n    |\n LL |     let array: [usize; Dim3::dim()]\n-   |                        ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim>::dim`\n+   |                        ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim><Dim3 as Dim>::dim`\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-39559-2.rs:17:15\n@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-39559-2.rs:17:15\n    |\n LL |         = [0; Dim3::dim()];\n-   |               ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim>::dim`\n+   |               ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim><Dim3 as Dim>::dim`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b6fd22fa669e0d6d34f1688074fc7c52a2245580", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.rs?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -11,11 +11,11 @@ mod priv_nominal {\n \n     pub macro mac() {\n         let value = Pub::method;\n-        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {<priv_nominal::Pub>::method}` is private\n         value;\n-        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {<priv_nominal::Pub>::method}` is private\n         Pub.method();\n-        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+        //~^ ERROR type `for<'r> fn(&'r priv_nominal::Pub) {<priv_nominal::Pub>::method}` is private\n         Pub::CONST;\n         //~^ ERROR associated constant `CONST` is private\n         // let _: Pub::AssocTy;"}, {"sha": "69be9d2cea6df1a0909cad64a0a0e29c78ae7aee", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -1,4 +1,4 @@\n-error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+error: type `for<'r> fn(&'r priv_nominal::Pub) {<priv_nominal::Pub>::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:13:21\n    |\n LL |         let value = Pub::method;\n@@ -7,7 +7,7 @@ LL |         let value = Pub::method;\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n \n-error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+error: type `for<'r> fn(&'r priv_nominal::Pub) {<priv_nominal::Pub>::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:15:9\n    |\n LL |         value;\n@@ -16,7 +16,7 @@ LL |         value;\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n \n-error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n+error: type `for<'r> fn(&'r priv_nominal::Pub) {<priv_nominal::Pub>::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:17:13\n    |\n LL |         Pub.method();"}, {"sha": "6315ec2e5126b6df7bb188e459f2725c26311606", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=1c2a3c5d79b9c6ee2ab4257eda41f1a86b273ef5", "patch": "@@ -11,7 +11,7 @@ LL |         0 ..= <S as Tr>::A::f::<u8> => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: {integer}\n-   = note: end type: fn() {S::f::<u8>}\n+   = note: end type: fn() {<S>::f::<u8>}\n \n error: aborting due to 2 previous errors\n "}]}