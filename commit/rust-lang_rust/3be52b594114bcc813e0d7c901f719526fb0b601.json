{"sha": "3be52b594114bcc813e0d7c901f719526fb0b601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZTUyYjU5NDExNGJjYzgxM2UwZDdjOTAxZjcxOTUyNmZiMGI2MDE=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2020-05-01T20:28:15Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2020-05-02T08:41:04Z"}, "message": "fix rustdoc warnings", "tree": {"sha": "7435d97182e5ef702db103c9570c00d905cb05a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7435d97182e5ef702db103c9570c00d905cb05a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3be52b594114bcc813e0d7c901f719526fb0b601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3be52b594114bcc813e0d7c901f719526fb0b601", "html_url": "https://github.com/rust-lang/rust/commit/3be52b594114bcc813e0d7c901f719526fb0b601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3be52b594114bcc813e0d7c901f719526fb0b601/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ae74d0d0e864bfc5c809e47af3a903d3fc2cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ae74d0d0e864bfc5c809e47af3a903d3fc2cf1", "html_url": "https://github.com/rust-lang/rust/commit/19ae74d0d0e864bfc5c809e47af3a903d3fc2cf1"}], "stats": {"total": 101, "additions": 56, "deletions": 45}, "files": [{"sha": "23980a2db8d42febcd21a78d7212cdf3becb077b", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -98,7 +98,7 @@ pub enum Ty<'a> {\n     Self_,\n     /// &/Box/ Ty\n     Ptr(Box<Ty<'a>>, PtrTy),\n-    /// mod::mod::Type<[lifetime], [Params...]>, including a plain type\n+    /// `mod::mod::Type<[lifetime], [Params...]>`, including a plain type\n     /// parameter, and things like `i32`\n     Literal(Path<'a>),\n     /// includes unit"}, {"sha": "fa5993471c44a5ae17a30fcd95610b981190af6c", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -233,6 +233,7 @@ fn generate_test_harness(\n ///\n /// By default this expands to\n ///\n+/// ```\n /// #[main]\n /// pub fn main() {\n ///     extern crate test;\n@@ -242,6 +243,7 @@ fn generate_test_harness(\n ///         &test_const3,\n ///     ]);\n /// }\n+/// ```\n ///\n /// Most of the Ident have the usual def-site hygiene for the AST pass. The\n /// exception is the `test_const`s. These have a syntax context that has two"}, {"sha": "36f1ece40d6b54298c7394fa6bd3cba0d853fef7", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -49,12 +49,13 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n-    /// Key is a Value holding a *T,\n-    /// Val is a Value holding a *[T].\n+    ///\n+    /// Key is a Value holding a `*T`,\n+    /// Val is a Value holding a `*[T]`.\n     ///\n     /// Needed because LLVM loses pointer->pointee association\n     /// when we ptrcast, and we have to ptrcast during codegen\n-    /// of a [T] const because we form a slice, a (*T,usize) pair, not\n+    /// of a `[T]` const because we form a slice, a `(*T,usize)` pair, not\n     /// a pointer to an LLVM array type. Similar for trait objects.\n     pub const_unsized: RefCell<FxHashMap<&'ll Value, &'ll Value>>,\n "}, {"sha": "690aacd20566b627d8ed5ec7eb1f24b0f4802e31", "filename": "src/librustc_codegen_ssa/traits/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -31,7 +31,7 @@ pub trait DeclareMethods<'tcx>: BackendTypes {\n     /// Use this function when you intend to define a global. This function will\n     /// return `None` if the name already has a definition associated with it. In that\n     /// case an error should be reported to the user, because it usually happens due\n-    /// to user\u2019s fault (e.g., misuse of #[no_mangle] or #[export_name] attributes).\n+    /// to user\u2019s fault (e.g., misuse of `#[no_mangle]` or `#[export_name]` attributes).\n     fn define_global(&self, name: &str, ty: Self::Type) -> Option<Self::Value>;\n \n     /// Declare a private global"}, {"sha": "197169b7036e020eeff83ead4d06b27904a7ff03", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -173,7 +173,7 @@ struct Node<O> {\n     /// must all be in a non-pending state.\n     dependents: Vec<usize>,\n \n-    /// If true, dependents[0] points to a \"parent\" node, which requires\n+    /// If true, `dependents[0]` points to a \"parent\" node, which requires\n     /// special treatment upon error but is otherwise treated the same.\n     /// (It would be more idiomatic to store the parent node in a separate\n     /// `Option<usize>` field, but that slows down the common case of"}, {"sha": "de503fe8228aaa87d004b5bf4cfed82e49a63108", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -289,7 +289,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     ///\n     /// - A != B\n     /// - A R B is true\n-    /// - for each i, j: B[i] R B[j] does not hold\n+    /// - for each i, j: `B[i]` R `B[j]` does not hold\n     ///\n     /// The intuition is that this moves \"one step up\" through a lattice\n     /// (where the relation is encoding the `<=` relation for the lattice)."}, {"sha": "a0b19f61906ed93235a797791890e146ef25cdcc", "filename": "src/librustc_hir/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -5,8 +5,8 @@\n /// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is\n /// faster and more memory efficient if there is lots of allocations.\n ///\n-/// Specifying the `decode` modifier will add decode impls for &T and &[T] where T is the type\n-/// listed. These impls will appear in the implement_ty_decoder! macro.\n+/// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]`,\n+/// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => ("}, {"sha": "50e97c8fb7a0236c538a33ce51ea62aee23ed754", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -843,7 +843,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ///\n     /// For the following code:\n     ///\n-    /// ```norun\n+    /// ```no_run\n     /// let x: Foo<Bar<Qux>> = foo::<Bar<Qux>>();\n     /// ```\n     ///"}, {"sha": "54f80e8f3881208c96190f1332d2185772e683a9", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -1482,7 +1482,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)\n     }\n \n-    /// See the [`region_constraints::verify_generic_bound`] method.\n+    /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.\n     pub fn verify_generic_bound(\n         &self,\n         origin: SubregionOrigin<'tcx>,"}, {"sha": "2be6ec4481c6be8c0e39120f78cb8041a9b415ef", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -810,7 +810,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         )\n     }\n \n-    /// See [`RegionInference::region_constraints_added_in_snapshot`].\n+    /// See `InferCtxt::region_constraints_added_in_snapshot`.\n     pub fn region_constraints_added_in_snapshot(&self, mark: &RegionSnapshot) -> Option<bool> {\n         self.undo_log[mark.length..]\n             .iter()"}, {"sha": "12f4cd33689e650d882c054ba87d79ea09eeb7df", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -103,8 +103,8 @@ impl<'s> LintLevelsBuilder<'s> {\n     /// * It'll validate all lint-related attributes in `attrs`\n     /// * It'll mark all lint-related attributes as used\n     /// * Lint levels will be updated based on the attributes provided\n-    /// * Lint attributes are validated, e.g., a #[forbid] can't be switched to\n-    ///   #[allow]\n+    /// * Lint attributes are validated, e.g., a `#[forbid]` can't be switched to\n+    ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n     pub fn push(&mut self, attrs: &[ast::Attribute], store: &LintStore) -> BuilderPush {"}, {"sha": "96ef4b3741200984fdad9f6050dc640909aff26d", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -5,7 +5,7 @@\n /// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is\n /// faster and more memory efficient if there is lots of allocations.\n ///\n-/// Specifying the `decode` modifier will add decode impls for &T and &[T] where T is the type\n+/// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {"}, {"sha": "8d416536155acc6d4c0368f74365a9f14e41aae7", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -158,10 +158,10 @@ pub struct Body<'tcx> {\n     /// We hold in this field all the constants we are not able to evaluate yet.\n     pub required_consts: Vec<Constant<'tcx>>,\n \n-    /// The user may be writing e.g. &[(SOME_CELL, 42)][i].1 and this would get promoted, because\n+    /// The user may be writing e.g. `&[(SOME_CELL, 42)][i].1` and this would get promoted, because\n     /// we'd statically know that no thing with interior mutability will ever be available to the\n     /// user without some serious unsafe code.  Now this means that our promoted is actually\n-    /// &[(SOME_CELL, 42)] and the MIR using it will do the &promoted[i].1 projection because the\n+    /// `&[(SOME_CELL, 42)]` and the MIR using it will do the `&promoted[i].1` projection because the\n     /// index may be a runtime value. Such a promoted value is illegal because it has reachable\n     /// interior mutability. This flag just makes this situation very obvious where the previous\n     /// implementation without the flag hid this situation silently.\n@@ -2124,7 +2124,7 @@ pub enum Rvalue<'tcx> {\n     /// or when casting a reference to a raw pointer.\n     AddressOf(Mutability, Place<'tcx>),\n \n-    /// length of a [X] or [X;n] value\n+    /// length of a `[X]` or `[X;n]` value\n     Len(Place<'tcx>),\n \n     Cast(CastKind, Operand<'tcx>, Ty<'tcx>),"}, {"sha": "63b8d8c8da782812bff15993e4d4dfc5e30ccb9e", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -167,7 +167,7 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n ///\n-/// See also [rustc_mir::borrow_check::nll::constraints].\n+/// See also `rustc_mir::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub enum ConstraintCategory {"}, {"sha": "4cdcd5320e7612c1875432343924a3a96cf64ac8", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -70,8 +70,8 @@ impl IntegerExt for Integer {\n     }\n \n     /// Finds the appropriate Integer type and signedness for the given\n-    /// signed discriminant range and #[repr] attribute.\n-    /// N.B.: u128 values above i128::MAX will be treated as signed, but\n+    /// signed discriminant range and `#[repr]` attribute.\n+    /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n     fn repr_discr<'tcx>(\n         tcx: TyCtxt<'tcx>,"}, {"sha": "7064b24240ef6df47c62dead219b19156d30255a", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -2696,7 +2696,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Returns `true` if the impls are the same polarity and the trait either\n-    /// has no items or is annotated #[marker] and prevents item overrides.\n+    /// has no items or is annotated `#[marker]` and prevents item overrides.\n     pub fn impls_are_allowed_to_overlap(\n         self,\n         def_id1: DefId,"}, {"sha": "5bc9f6df889c7276ea75c91834680213473d7c27", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -582,8 +582,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ///\n     /// This is used when creating error messages like below:\n     ///\n-    /// >  cannot borrow `a.u` (via `a.u.z.c`) as immutable because it is also borrowed as\n-    /// >  mutable (via `a.u.s.b`) [E0502]\n+    /// ```text\n+    /// cannot borrow `a.u` (via `a.u.z.c`) as immutable because it is also borrowed as\n+    /// mutable (via `a.u.s.b`) [E0502]\n+    /// ```\n     pub(in crate::borrow_check) fn describe_place_for_conflicting_borrow(\n         &self,\n         first_borrowed_place: Place<'tcx>,"}, {"sha": "e80da4f756c64abb5750a694f87509226d3ecd4c", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -7,13 +7,15 @@\n //!\n //! The `CleanFakeReadsAndBorrows` \"pass\" is actually implemented as two\n //! traversals (aka visits) of the input MIR. The first traversal,\n-//! [`DeleteAndRecordFakeReads`], deletes the fake reads and finds the\n-//! temporaries read by [`ForMatchGuard`] reads, and [`DeleteFakeBorrows`]\n+//! `DeleteAndRecordFakeReads`, deletes the fake reads and finds the\n+//! temporaries read by [`ForMatchGuard`] reads, and `DeleteFakeBorrows`\n //! deletes the initialization of those temporaries.\n //!\n //! [`AscribeUserType`]: rustc_middle::mir::StatementKind::AscribeUserType\n //! [`Shallow`]: rustc_middle::mir::BorrowKind::Shallow\n //! [`FakeRead`]: rustc_middle::mir::StatementKind::FakeRead\n+//! [`Assign`]: rustc_middle::mir::StatementKind::Assign\n+//! [`ForMatchGuard`]: rustc_middle::mir::FakeReadCause::ForMatchGuard\n //! [`Nop`]: rustc_middle::mir::StatementKind::Nop\n \n use crate::transform::{MirPass, MirSource};"}, {"sha": "de3ae2e961f427b4b242670d5891df04e8929104", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -513,6 +513,8 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n }\n \n /// Pretty-printer for matrices of patterns, example:\n+///\n+/// ```text\n /// +++++++++++++++++++++++++++++\n /// + _     + []                +\n /// +++++++++++++++++++++++++++++"}, {"sha": "450293b991bde075f4025db9e1e4a89fa9e3667a", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -1051,7 +1051,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggests a missing `crate::` if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foo::Bar;\n     ///    |     ^^^ did you mean `crate::foo`?\n@@ -1147,7 +1147,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// Suggests importing a macro from the root of the crate rather than a module within\n     /// the crate.\n     ///\n-    /// ```\n+    /// ```text\n     /// help: a macro with this name exists at the root of the crate\n     ///    |\n     /// LL | use issue_59764::makro;"}, {"sha": "d33eaf5a827db6d41cb896a7a522bfb21751ae90", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -2669,7 +2669,7 @@ impl<'a> Resolver<'a> {\n     /// This function adds a suggestion to change the binding name of a new import that conflicts\n     /// with an existing import.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text,ignore (diagnostic)\n     /// help: you can use `as` to change the binding name of the import\n     ///    |\n     /// LL | use foo::bar as other_bar;"}, {"sha": "23c3dccb130f6ddd5339293b3a06b0a256b4bf89", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -661,7 +661,7 @@ pub struct ExpnData {\n     /// The span of the macro definition (possibly dummy).\n     /// This span serves only informational purpose and is not used for resolution.\n     pub def_site: Span,\n-    /// List of #[unstable]/feature-gated features that the macro is allowed to use\n+    /// List of `#[unstable]`/feature-gated features that the macro is allowed to use\n     /// internally without forcing the whole crate to opt-in\n     /// to them.\n     pub allow_internal_unstable: Option<Lrc<[Symbol]>>,"}, {"sha": "f9ff772900bbd53f9ea3ced1530fde3780beeef8", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -327,12 +327,12 @@ pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanChe\n ///    try to implement this trait-ref. To check for this, we use InCrate::Remote\n ///    mode. That is sound because we already know all the impls from known crates.\n ///\n-/// 3. For non-#[fundamental] traits, they guarantee that parent crates can\n+/// 3. For non-`#[fundamental]` traits, they guarantee that parent crates can\n ///    add \"non-blanket\" impls without breaking negative reasoning in dependent\n ///    crates. This is the \"rebalancing coherence\" (RFC 1023) restriction.\n ///\n ///    For that, we only a allow crate to perform negative reasoning on\n-///    non-local-non-#[fundamental] only if there's a local key parameter as per (2).\n+///    non-local-non-`#[fundamental]` only if there's a local key parameter as per (2).\n ///\n ///    Because we never perform negative reasoning generically (coherence does\n ///    not involve type parameters), this can be interpreted as doing the full"}, {"sha": "c5ead053a7f8950c6abb6f394d29fcdb94f520d2", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -307,7 +307,7 @@ fn instance_def_size_estimate<'tcx>(\n \n /// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n ///\n-/// See [`ImplOverlapKind::Issue33140`] for more details.\n+/// See [`ty::ImplOverlapKind::Issue33140`] for more details.\n fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n     debug!(\"issue33140_self_ty({:?})\", def_id);\n "}, {"sha": "049f4767247c5429d171030d83fdd9ec73677d02", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -1105,19 +1105,21 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     /// itself the referent of a borrowed pointer. Let me give an\n     /// example fragment of code to make clear(er) the situation:\n     ///\n-    ///    let r: &'a mut T = ...;  // the original reference \"r\" has lifetime 'a\n-    ///    ...\n-    ///    &'z *r                   // the reborrow has lifetime 'z\n+    /// ```ignore (incomplete Rust code)\n+    /// let r: &'a mut T = ...;  // the original reference \"r\" has lifetime 'a\n+    /// ...\n+    /// &'z *r                   // the reborrow has lifetime 'z\n+    /// ```\n     ///\n     /// Now, in this case, our primary job is to add the inference\n     /// constraint that `'z <= 'a`. Given this setup, let's clarify the\n     /// parameters in (roughly) terms of the example:\n     ///\n     /// ```plain,ignore (pseudo-Rust)\n-    ///     A borrow of: `& 'z bk * r` where `r` has type `& 'a bk T`\n-    ///     borrow_region   ^~                 ref_region    ^~\n-    ///     borrow_kind        ^~               ref_kind        ^~\n-    ///     ref_cmt                 ^\n+    /// A borrow of: `& 'z bk * r` where `r` has type `& 'a bk T`\n+    /// borrow_region   ^~                 ref_region    ^~\n+    /// borrow_kind        ^~               ref_kind        ^~\n+    /// ref_cmt                 ^\n     /// ```\n     ///\n     /// Here `bk` stands for some borrow-kind (e.g., `mut`, `uniq`, etc).\n@@ -1193,7 +1195,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     ///   a `FnMut` or `Fn` closure.\n     ///\n     /// This function links the lifetimes of those references to the lifetime\n-    /// of the borrow that's provided. See [link_reborrowed_region] for some\n+    /// of the borrow that's provided. See [RegionCtxt::link_reborrowed_region] for some\n     /// more explanation of this in the general case.\n     ///\n     /// We also supply a *cause*, and in this case we set the cause to"}, {"sha": "ffe9f1c7d7a71c38d018ef256d8eb3d45669bb02", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -30,7 +30,7 @@\n //! - `ty`: the type of data found at the address `A`.\n //!\n //! The resulting categorization tree differs somewhat from the expressions\n-//! themselves. For example, auto-derefs are explicit. Also, an index a[b] is\n+//! themselves. For example, auto-derefs are explicit. Also, an index `a[b]` is\n //! decomposed into two operations: a dereference to reach the array data and\n //! then an index to jump forward to the relevant item.\n //!"}, {"sha": "721988e29a67867bc750b59bb3ffa9846bb634bb", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be52b594114bcc813e0d7c901f719526fb0b601/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=3be52b594114bcc813e0d7c901f719526fb0b601", "patch": "@@ -5,7 +5,7 @@\n pub struct Toc {\n     /// The levels are strictly decreasing, i.e.\n     ///\n-    /// entries[0].level >= entries[1].level >= ...\n+    /// `entries[0].level >= entries[1].level >= ...`\n     ///\n     /// Normally they are equal, but can differ in cases like A and B,\n     /// both of which end up in the same `Toc` as they have the same\n@@ -39,8 +39,8 @@ pub struct TocEntry {\n pub struct TocBuilder {\n     top_level: Toc,\n     /// The current hierarchy of parent headings, the levels are\n-    /// strictly increasing (i.e., chain[0].level < chain[1].level <\n-    /// ...) with each entry being the most recent occurrence of a\n+    /// strictly increasing (i.e., `chain[0].level < chain[1].level <\n+    /// ...`) with each entry being the most recent occurrence of a\n     /// heading with that level (it doesn't include the most recent\n     /// occurrences of every level, just, if it *is* in `chain` then\n     /// it is the most recent one)."}]}