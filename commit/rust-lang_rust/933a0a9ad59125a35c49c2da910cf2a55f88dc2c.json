{"sha": "933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzM2EwYTlhZDU5MTI1YTM1YzQ5YzJkYTkxMGNmMmE1NWY4OGRjMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T10:25:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T10:25:54Z"}, "message": "Auto merge of #5156 - flip1995:dev_add_internal, r=phansch\n\nLet update_lints also generate the internal lints\n\nr? @phansch\n\nchangelog: none", "tree": {"sha": "2289b3f30287074f9c0a38c3044aa3ac1f7b7010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2289b3f30287074f9c0a38c3044aa3ac1f7b7010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "html_url": "https://github.com/rust-lang/rust/commit/933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd4046f01ead4a1581f5cb1c3c634db6567772d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd4046f01ead4a1581f5cb1c3c634db6567772d", "html_url": "https://github.com/rust-lang/rust/commit/bdd4046f01ead4a1581f5cb1c3c634db6567772d"}, {"sha": "50a2f971fcfb1156dd6bad37f88ba7e651390714", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a2f971fcfb1156dd6bad37f88ba7e651390714", "html_url": "https://github.com/rust-lang/rust/commit/50a2f971fcfb1156dd6bad37f88ba7e651390714"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "6fe7bb155ac5a1868b2560819430dc45e8e8bf3b", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "patch": "@@ -61,13 +61,15 @@ impl Lint {\n         lints.filter(|l| l.deprecation.is_none() && !l.is_internal())\n     }\n \n+    /// Returns all internal lints (not `internal_warn` lints)\n+    pub fn internal_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n+        lints.filter(|l| l.group == \"internal\")\n+    }\n+\n     /// Returns the lints in a `HashMap`, grouped by the different lint groups\n     #[must_use]\n-    pub fn by_lint_group(lints: &[Self]) -> HashMap<String, Vec<Self>> {\n-        lints\n-            .iter()\n-            .map(|lint| (lint.group.to_string(), lint.clone()))\n-            .into_group_map()\n+    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n+        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n     }\n \n     #[must_use]\n@@ -82,7 +84,7 @@ pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n     lints\n         .into_iter()\n         .filter_map(|l| {\n-            if l.is_internal() || l.deprecation.is_some() {\n+            if l.deprecation.is_some() {\n                 None\n             } else {\n                 Some(format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n@@ -173,29 +175,34 @@ pub fn gather_all() -> impl Iterator<Item = Lint> {\n \n fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n     let content = fs::read_to_string(dir_entry.path()).unwrap();\n-    let mut filename = dir_entry.path().file_stem().unwrap().to_str().unwrap();\n+    let path = dir_entry.path();\n+    let filename = path.file_stem().unwrap();\n+    let path_buf = path.with_file_name(filename);\n+    let mut rel_path = path_buf\n+        .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n+        .expect(\"only files in `clippy_lints/src` should be looked at\");\n     // If the lints are stored in mod.rs, we get the module name from\n     // the containing directory:\n     if filename == \"mod\" {\n-        filename = dir_entry\n-            .path()\n-            .parent()\n-            .unwrap()\n-            .file_stem()\n-            .unwrap()\n-            .to_str()\n-            .unwrap()\n+        rel_path = rel_path.parent().unwrap();\n     }\n-    parse_contents(&content, filename)\n+\n+    let module = rel_path\n+        .components()\n+        .map(|c| c.as_os_str().to_str().unwrap())\n+        .collect::<Vec<_>>()\n+        .join(\"::\");\n+\n+    parse_contents(&content, &module)\n }\n \n-fn parse_contents(content: &str, filename: &str) -> impl Iterator<Item = Lint> {\n+fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n     let lints = DEC_CLIPPY_LINT_RE\n         .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, filename));\n+        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, module));\n     let deprecated = DEC_DEPRECATED_LINT_RE\n         .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), filename));\n+        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), module));\n     // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n     lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n }\n@@ -449,7 +456,7 @@ fn test_by_lint_group() {\n         \"group2\".to_string(),\n         vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n     );\n-    assert_eq!(expected, Lint::by_lint_group(&lints));\n+    assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n }\n \n #[test]\n@@ -522,10 +529,11 @@ fn test_gen_lint_group_list() {\n         Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         \"        LintId::of(&module_name::ABC),\".to_string(),\n+        \"        LintId::of(&module_name::INTERNAL),\".to_string(),\n         \"        LintId::of(&module_name::SHOULD_ASSERT_EQ),\".to_string(),\n     ];\n     assert_eq!(expected, gen_lint_group_list(lints));"}, {"sha": "ec0c33109ba94cb5ee9360f2cf4bccf28c48da6c", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "patch": "@@ -135,8 +135,8 @@ fn main() {\n fn print_lints() {\n     let lint_list = gather_all();\n     let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n-    let lint_count = usable_lints.len();\n-    let grouped_by_lint_group = Lint::by_lint_group(&usable_lints);\n+    let usable_lint_count = usable_lints.len();\n+    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n \n     for (lint_group, mut lints) in grouped_by_lint_group {\n         if lint_group == \"Deprecated\" {\n@@ -157,15 +157,17 @@ fn print_lints() {\n         }\n     }\n \n-    println!(\"there are {} lints\", lint_count);\n+    println!(\"there are {} lints\", usable_lint_count);\n }\n \n #[allow(clippy::too_many_lines)]\n fn update_lints(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n \n+    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n+\n     let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let lint_count = usable_lints.len();\n+    let usable_lint_count = usable_lints.len();\n \n     let mut sorted_usable_lints = usable_lints.clone();\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n@@ -198,7 +200,7 @@ fn update_lints(update_mode: UpdateMode) {\n         || {\n             vec![format!(\n                 \"[There are {} lints included in this crate!]({})\",\n-                lint_count, DOCS_LINK\n+                usable_lint_count, DOCS_LINK\n             )]\n         },\n     )\n@@ -267,7 +269,7 @@ fn update_lints(update_mode: UpdateMode) {\n     .changed;\n \n     // Generate the list of lints for all other lint groups\n-    for (lint_group, lints) in Lint::by_lint_group(&usable_lints) {\n+    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n         file_change |= replace_region_in_file(\n             Path::new(\"clippy_lints/src/lib.rs\"),\n             &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),"}, {"sha": "a641ff777871553c21190a8981b04ac1d3be8686", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "patch": "@@ -1105,10 +1105,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n         LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n+        LintId::of(&utils::internal_lints::DEFAULT_LINT),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n         LintId::of(&utils::internal_lints::PRODUCE_ICE),\n-        LintId::of(&utils::internal_lints::DEFAULT_LINT),\n     ]);\n \n     store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "7e1263ebf22fc6d91e4dbcbfef94a34cbf10c8c2", "filename": "doc/adding_lints.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/933a0a9ad59125a35c49c2da910cf2a55f88dc2c/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=933a0a9ad59125a35c49c2da910cf2a55f88dc2c", "patch": "@@ -191,15 +191,15 @@ declare_lint_pass!(FooFunctions => [FOO_FUNCTIONS]);\n impl EarlyLintPass for FooFunctions {}\n ```\n \n-Don't worry about the `name` method here. As long as it includes the name of the\n-lint pass it should be fine.\n-\n-The new lint automation runs `update_lints`, which automates some things, but it\n-doesn't automate everything. We will have to register our lint pass manually in\n-the `register_plugins` function in `clippy_lints/src/lib.rs`:\n+Normally after declaring the lint, we have to run `cargo dev update_lints`,\n+which updates some files, so Clippy knows about the new lint. Since we used\n+`cargo dev new_lint ...` to generate the lint declaration, this was done\n+automatically. While `update_lints` automates most of the things, it doesn't\n+automate everything. We will have to register our lint pass manually in the\n+`register_plugins` function in `clippy_lints/src/lib.rs`:\n \n ```rust\n-reg.register_early_lint_pass(box foo_functions::FooFunctions);\n+store.register_early_pass(box foo_functions::FooFunctions);\n ```\n \n This should fix the `unknown clippy lint: clippy::foo_functions` error that we"}]}