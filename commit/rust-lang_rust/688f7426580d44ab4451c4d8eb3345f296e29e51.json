{"sha": "688f7426580d44ab4451c4d8eb3345f296e29e51", "node_id": "C_kwDOAAsO6NoAKDY4OGY3NDI2NTgwZDQ0YWI0NDUxYzRkOGViMzM0NWYyOTZlMjllNTE", "commit": {"author": {"name": "Andy Sadler", "email": "andrewsadler122@gmail.com", "date": "2022-09-16T21:49:56Z"}, "committer": {"name": "Andy Sadler", "email": "andrewsadler122@gmail.com", "date": "2022-09-28T02:58:55Z"}, "message": "simd: implement float math intrinsics\n\nImplements the intrinsics required to pass float-math-pass and\nlibm_std_can_float ui tests.\n\nSigned-off-by: Andy Sadler <andrewsadler122@gmail.com>", "tree": {"sha": "99acede8b21b16d48de0551bc86f887ac8596dc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99acede8b21b16d48de0551bc86f887ac8596dc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688f7426580d44ab4451c4d8eb3345f296e29e51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEE/gSIuZZ6oleJBl8UelM1fNWBc90FAmMzuG8aHGFuZHJld3Nh\nZGxlcjEyMkBnbWFpbC5jb20ACgkQelM1fNWBc917WhAAlpL3wpkksntXqu5b94tH\nsxqALrMJLl3thLi8kf+siC8vmVo0HLyw0Dlwu5SBFJbJwyQke57HPXetrK7T+EiX\n8Mr35yTX5nDjyujQ7DdlFxkO0WUlPKm/ehomDA/yXqXKNrAqhS1eKUAF//UIyrhy\nWUcpnU/o/1PsPbDH65GPIspmhwnvr/1+TQDYPr4LzSN6EskZHA8Up8kCFAiDmuzr\niPwvJII19cDtqgqQFGpwBze7LZr+Y8yquvMKQ4r7BIuXh/9Bwq09XAwAG1X3mprF\nySIKQ7x4TgkzrkqCGtSSc0ATouWw4f4k/EbV27NfiW0imbLyqsxtCcFZr/5zUPaq\nzQ5VXE1M/p8f200A7pPsCcqANdUTULGPGieXei8RVy1DNYt18fU0zgKXqOV/Co8f\nFibDTq8cwJKGHMluLOhqx7gWsxWlrF5QKo/bKyKQ+WyG0kUOaX+qfMI1jXoIWWGR\nLK7uftiAdmc1tuFcbZ5DTlO0RXP7CdJrFtPB0BvxZbY0hM/Hxvf9nk/KjlYYgvpY\n3XpFlx7HKamibYhTgL7Dah+1rfSMJmUjN5b3M50T7gQnTo2iOOEF4cha450rwk6L\n9fmZgxr0vHvUgms3DvhqwHYVmikGS6e70DAeYZPppSA4yRyoWe7M0gFwOD4sdVbT\nY8X7svvCWGYXJz6uysbhl5w=\n=a+2q\n-----END PGP SIGNATURE-----", "payload": "tree 99acede8b21b16d48de0551bc86f887ac8596dc8\nparent d9edc8e8691d3b65665a9fb12d4dcd1a3fe4cab6\nauthor Andy Sadler <andrewsadler122@gmail.com> 1663364996 -0500\ncommitter Andy Sadler <andrewsadler122@gmail.com> 1664333935 -0500\n\nsimd: implement float math intrinsics\n\nImplements the intrinsics required to pass float-math-pass and\nlibm_std_can_float ui tests.\n\nSigned-off-by: Andy Sadler <andrewsadler122@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688f7426580d44ab4451c4d8eb3345f296e29e51", "html_url": "https://github.com/rust-lang/rust/commit/688f7426580d44ab4451c4d8eb3345f296e29e51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688f7426580d44ab4451c4d8eb3345f296e29e51/comments", "author": {"login": "sadlerap", "id": 20480359, "node_id": "MDQ6VXNlcjIwNDgwMzU5", "avatar_url": "https://avatars.githubusercontent.com/u/20480359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sadlerap", "html_url": "https://github.com/sadlerap", "followers_url": "https://api.github.com/users/sadlerap/followers", "following_url": "https://api.github.com/users/sadlerap/following{/other_user}", "gists_url": "https://api.github.com/users/sadlerap/gists{/gist_id}", "starred_url": "https://api.github.com/users/sadlerap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sadlerap/subscriptions", "organizations_url": "https://api.github.com/users/sadlerap/orgs", "repos_url": "https://api.github.com/users/sadlerap/repos", "events_url": "https://api.github.com/users/sadlerap/events{/privacy}", "received_events_url": "https://api.github.com/users/sadlerap/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sadlerap", "id": 20480359, "node_id": "MDQ6VXNlcjIwNDgwMzU5", "avatar_url": "https://avatars.githubusercontent.com/u/20480359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sadlerap", "html_url": "https://github.com/sadlerap", "followers_url": "https://api.github.com/users/sadlerap/followers", "following_url": "https://api.github.com/users/sadlerap/following{/other_user}", "gists_url": "https://api.github.com/users/sadlerap/gists{/gist_id}", "starred_url": "https://api.github.com/users/sadlerap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sadlerap/subscriptions", "organizations_url": "https://api.github.com/users/sadlerap/orgs", "repos_url": "https://api.github.com/users/sadlerap/repos", "events_url": "https://api.github.com/users/sadlerap/events{/privacy}", "received_events_url": "https://api.github.com/users/sadlerap/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9edc8e8691d3b65665a9fb12d4dcd1a3fe4cab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9edc8e8691d3b65665a9fb12d4dcd1a3fe4cab6", "html_url": "https://github.com/rust-lang/rust/commit/d9edc8e8691d3b65665a9fb12d4dcd1a3fe4cab6"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "8b740cff4f58bc1e5d0f0583ad8bf1533d4e7e9c", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/688f7426580d44ab4451c4d8eb3345f296e29e51/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/688f7426580d44ab4451c4d8eb3345f296e29e51/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=688f7426580d44ab4451c4d8eb3345f296e29e51", "patch": "@@ -30,7 +30,6 @@ src/test/ui/sepcomp/sepcomp-extern.rs\n src/test/ui/sepcomp/sepcomp-fns-backwards.rs\n src/test/ui/sepcomp/sepcomp-fns.rs\n src/test/ui/sepcomp/sepcomp-statics.rs\n-src/test/ui/simd/intrinsic/float-math-pass.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs\n src/test/ui/simd/intrinsic/generic-as.rs\n src/test/ui/simd/intrinsic/generic-bitmask-pass.rs\n@@ -40,7 +39,6 @@ src/test/ui/simd/issue-17170.rs\n src/test/ui/simd/issue-39720.rs\n src/test/ui/simd/issue-85915-simd-ptrs.rs\n src/test/ui/simd/issue-89193.rs\n-src/test/ui/simd/libm_std_can_float.rs\n src/test/ui/simd/simd-bitmask.rs\n src/test/ui/simd/type-generic-monomorphisation-extern-nonnull-ptr.rs\n src/test/ui/sse2.rs"}, {"sha": "6d60099728328cc51c0fbf1451c28cf41d8e156d", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/688f7426580d44ab4451c4d8eb3345f296e29e51/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688f7426580d44ab4451c4d8eb3345f296e29e51/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=688f7426580d44ab4451c4d8eb3345f296e29e51", "patch": "@@ -14,7 +14,6 @@ use rustc_span::{Span, Symbol, sym};\n use rustc_target::abi::Align;\n \n use crate::builder::Builder;\n-use crate::intrinsic;\n \n pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>, name: Symbol, callee_ty: Ty<'tcx>, args: &[OperandRef<'tcx, RValue<'gcc>>], ret_ty: Ty<'tcx>, llret_ty: Type<'gcc>, span: Span) -> Result<RValue<'gcc>, ()> {\n     // macros for error handling:\n@@ -415,8 +414,8 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n             if let ty::Float(f) = in_elem.kind() {\n                 let elem_ty = bx.cx.type_float_from_ty(*f);\n                 match f.bit_width() {\n-                    32 => (\"f32\", elem_ty),\n-                    64 => (\"f64\", elem_ty),\n+                    32 => (\"f\", elem_ty),\n+                    64 => (\"\", elem_ty),\n                     _ => {\n                         return_error!(\n                             \"unsupported element type `{}` of floating-point vector `{}`\",\n@@ -432,30 +431,49 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n \n         let vec_ty = bx.cx.type_vector(elem_ty, in_len);\n \n-        let (intr_name, fn_ty) =\n+        let intr_name =\n             match name {\n-                sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)), // TODO(antoyo): pand with 170141183420855150465331762880109871103\n-                sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n-                sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n-                sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n-                sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n+                sym::simd_ceil => \"ceil\",\n+                sym::simd_fabs => \"fabs\", // TODO(antoyo): pand with 170141183420855150465331762880109871103\n+                sym::simd_fcos => \"cos\",\n+                sym::simd_fexp2 => \"exp2\",\n+                sym::simd_fexp => \"exp\",\n+                sym::simd_flog10 => \"log10\",\n+                sym::simd_flog2 => \"log2\",\n+                sym::simd_flog => \"log\",\n+                sym::simd_floor => \"floor\",\n+                sym::simd_fma => \"fma\",\n+                sym::simd_fpowi => \"__builtin_powi\",\n+                sym::simd_fpow => \"pow\",\n+                sym::simd_fsin => \"sin\",\n+                sym::simd_fsqrt => \"sqrt\",\n+                sym::simd_round => \"round\",\n+                sym::simd_trunc => \"trunc\",\n                 _ => return_error!(\"unrecognized intrinsic `{}`\", name),\n             };\n-        let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n-        let function = intrinsic::llvm::intrinsic(llvm_name, &bx.cx);\n-        let function: RValue<'gcc> = unsafe { std::mem::transmute(function) };\n-        let c = bx.call(fn_ty, function, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n+        let builtin_name = format!(\"{}{}\", intr_name, elem_ty_str);\n+        let funcs = bx.cx.functions.borrow();\n+        let function = funcs.get(&builtin_name).unwrap_or_else(|| panic!(\"unable to find builtin function {}\", builtin_name));\n+\n+        // TODO(antoyo): add platform-specific behavior here for architectures that have these\n+        // intrinsics as instructions (for instance, gpus)\n+        let mut vector_elements = vec![];\n+        for i in 0..in_len {\n+            let index = bx.context.new_rvalue_from_long(bx.ulong_type, i as i64);\n+            // we have to treat fpowi specially, since fpowi's second argument is always an i32\n+            let arguments = if name == sym::simd_fpowi {\n+                vec![\n+                    bx.extract_element(args[0].immediate(), index).to_rvalue(),\n+                    args[1].immediate(),\n+                ]\n+            } else {\n+                args.iter()\n+                    .map(|arg| bx.extract_element(arg.immediate(), index).to_rvalue())\n+                    .collect()\n+            };\n+            vector_elements.push(bx.context.new_call(None, *function, &arguments));\n+        }\n+        let c = bx.context.new_rvalue_from_vector(None, vec_ty, &vector_elements);\n         Ok(c)\n     }\n "}]}