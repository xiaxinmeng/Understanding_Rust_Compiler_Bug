{"sha": "a9ec8841ef02ceb3278e6bedd98821bec332fd11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZWM4ODQxZWYwMmNlYjMyNzhlNmJlZGQ5ODgyMWJlYzMzMmZkMTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-18T10:59:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T13:43:47Z"}, "message": "make `borrowck_fn` and friends create `bccx`", "tree": {"sha": "30505da6eb6da21e87c4f4c0a1a65a928284c2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30505da6eb6da21e87c4f4c0a1a65a928284c2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ec8841ef02ceb3278e6bedd98821bec332fd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec8841ef02ceb3278e6bedd98821bec332fd11", "html_url": "https://github.com/rust-lang/rust/commit/a9ec8841ef02ceb3278e6bedd98821bec332fd11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec8841ef02ceb3278e6bedd98821bec332fd11/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530b92cfdd415d553050f2f64c5d8ad66f8c4b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/530b92cfdd415d553050f2f64c5d8ad66f8c4b54", "html_url": "https://github.com/rust-lang/rust/commit/530b92cfdd415d553050f2f64c5d8ad66f8c4b54"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "b31b54a25415a2261fc547db509c435bad4bbdca", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ec8841ef02ceb3278e6bedd98821bec332fd11/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ec8841ef02ceb3278e6bedd98821bec332fd11/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=a9ec8841ef02ceb3278e6bedd98821bec332fd11", "patch": "@@ -547,9 +547,15 @@ impl<'a, 'tcx> Visitor<'tcx> for StaticInitializerCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn gather_loans_in_static_initializer(bccx: &mut BorrowckCtxt, body: hir::BodyId) {\n+pub fn gather_loans_in_static_initializer<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                    body: hir::BodyId) {\n     debug!(\"gather_loans_in_static_initializer(expr={:?})\", body);\n \n+    let bccx = &BorrowckCtxt {\n+        tcx: tcx,\n+        tables: None\n+    };\n+\n     let mut sicx = StaticInitializerCtxt {\n         bccx: bccx,\n         body_id: body"}, {"sha": "9c29cd375ff5152bfcade9bb671809e4530a6330", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a9ec8841ef02ceb3278e6bedd98821bec332fd11/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ec8841ef02ceb3278e6bedd98821bec332fd11/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=a9ec8841ef02ceb3278e6bedd98821bec332fd11", "patch": "@@ -70,31 +70,43 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n         match fk {\n             FnKind::ItemFn(..) |\n             FnKind::Method(..) => {\n-                borrowck_fn(self, b);\n+                borrowck_fn(self.tcx, b);\n                 intravisit::walk_fn(self, fk, fd, b, s, id);\n             }\n \n             FnKind::Closure(..) => {\n-                borrowck_fn(self, b);\n+                borrowck_fn(self.tcx, b);\n                 intravisit::walk_fn(self, fk, fd, b, s, id);\n             }\n         }\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        borrowck_item(self, item);\n+        // Gather loans for items. Note that we don't need\n+        // to check loans for single expressions. The check\n+        // loan step is intended for things that have a data\n+        // flow dependent conditions.\n+        match item.node {\n+            hir::ItemStatic(.., ex) |\n+            hir::ItemConst(_, ex) => {\n+                gather_loans::gather_loans_in_static_initializer(self.tcx, ex);\n+            }\n+            _ => { }\n+        }\n+\n+        intravisit::walk_item(self, item);\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n         if let hir::TraitItemKind::Const(_, Some(expr)) = ti.node {\n-            gather_loans::gather_loans_in_static_initializer(self, expr);\n+            gather_loans::gather_loans_in_static_initializer(self.tcx, expr);\n         }\n         intravisit::walk_trait_item(self, ti);\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n         if let hir::ImplItemKind::Const(_, expr) = ii.node {\n-            gather_loans::gather_loans_in_static_initializer(self, expr);\n+            gather_loans::gather_loans_in_static_initializer(self.tcx, expr);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }\n@@ -109,61 +121,46 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.visit_all_item_likes_in_krate(DepNode::BorrowCheck, &mut bccx.as_deep_visitor());\n }\n \n-fn borrowck_item<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>, item: &'tcx hir::Item) {\n-    // Gather loans for items. Note that we don't need\n-    // to check loans for single expressions. The check\n-    // loan step is intended for things that have a data\n-    // flow dependent conditions.\n-    match item.node {\n-        hir::ItemStatic(.., ex) |\n-        hir::ItemConst(_, ex) => {\n-            gather_loans::gather_loans_in_static_initializer(this, ex);\n-        }\n-        _ => { }\n-    }\n-\n-    intravisit::walk_item(this, item);\n-}\n-\n /// Collection of conclusions determined via borrow checker analyses.\n pub struct AnalysisData<'a, 'tcx: 'a> {\n     pub all_loans: Vec<Loan<'tcx>>,\n     pub loans: DataFlowContext<'a, 'tcx, LoanDataFlowOperator>,\n     pub move_data: move_data::FlowedMoveData<'a, 'tcx>,\n }\n \n-fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>, body_id: hir::BodyId) {\n+fn borrowck_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, body_id: hir::BodyId) {\n     debug!(\"borrowck_fn(body_id={:?})\", body_id);\n \n-    assert!(this.tables.is_none());\n-    let owner_id = this.tcx.hir.body_owner(body_id);\n-    let owner_def_id = this.tcx.hir.local_def_id(owner_id);\n-    let attributes = this.tcx.get_attrs(owner_def_id);\n-    let tables = this.tcx.item_tables(owner_def_id);\n-    this.tables = Some(tables);\n+    let owner_id = tcx.hir.body_owner(body_id);\n+    let owner_def_id = tcx.hir.local_def_id(owner_id);\n+    let attributes = tcx.get_attrs(owner_def_id);\n+    let tables = tcx.item_tables(owner_def_id);\n+\n+    let mut bccx = &mut BorrowckCtxt {\n+        tcx: tcx,\n+        tables: Some(tables),\n+    };\n \n-    let body = this.tcx.hir.body(body_id);\n+    let body = bccx.tcx.hir.body(body_id);\n \n-    if this.tcx.has_attr(owner_def_id, \"rustc_mir_borrowck\") {\n-        mir::borrowck_mir(this, owner_id, &attributes);\n+    if bccx.tcx.has_attr(owner_def_id, \"rustc_mir_borrowck\") {\n+        mir::borrowck_mir(bccx, owner_id, &attributes);\n     }\n \n-    let cfg = cfg::CFG::new(this.tcx, &body.value);\n+    let cfg = cfg::CFG::new(bccx.tcx, &body.value);\n     let AnalysisData { all_loans,\n                        loans: loan_dfcx,\n                        move_data: flowed_moves } =\n-        build_borrowck_dataflow_data(this, &cfg, body_id);\n+        build_borrowck_dataflow_data(bccx, &cfg, body_id);\n \n     move_data::fragments::instrument_move_fragments(&flowed_moves.move_data,\n-                                                    this.tcx,\n+                                                    bccx.tcx,\n                                                     owner_id);\n-    move_data::fragments::build_unfragmented_map(this,\n+    move_data::fragments::build_unfragmented_map(bccx,\n                                                  &flowed_moves.move_data,\n                                                  owner_id);\n \n-    check_loans::check_loans(this, &loan_dfcx, &flowed_moves, &all_loans[..], body);\n-\n-    this.tables = None;\n+    check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans[..], body);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,"}]}