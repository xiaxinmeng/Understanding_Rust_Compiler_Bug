{"sha": "c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOGU3YTY4ZmJmYzI4ZjdlNGJiZDBmYmI3MTVlMjE2ZTE3MjczZGM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T13:13:31Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T13:13:31Z"}, "message": "Split Repr creation out of eval_lvalue.", "tree": {"sha": "c302d7d78cd53a00ab0aa6745053778b6c70a214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c302d7d78cd53a00ab0aa6745053778b6c70a214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc", "html_url": "https://github.com/rust-lang/rust/commit/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f84d3abc690ab905501a87a3d693b0f5094fb4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f84d3abc690ab905501a87a3d693b0f5094fb4b", "html_url": "https://github.com/rust-lang/rust/commit/8f84d3abc690ab905501a87a3d693b0f5094fb4b"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "e725f15df83b925d10bb15672f363d17c9e282f1", "filename": "src/interpreter.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc", "patch": "@@ -185,7 +185,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n-                let (discr_ptr, discr_repr) = try!(self.eval_lvalue(discr));\n+                let discr_ptr = try!(self.eval_lvalue(discr));\n+                let discr_repr = self.lvalue_repr(discr);\n                 let discr_val = try!(self.memory.read_primval(discr_ptr, &discr_repr));\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n@@ -204,7 +205,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             Switch { ref discr, ref targets, .. } => {\n-                let (adt_ptr, adt_repr) = try!(self.eval_lvalue(discr));\n+                let adt_ptr = try!(self.eval_lvalue(discr));\n+                let adt_repr = self.lvalue_repr(discr);\n                 let discr_repr = match adt_repr {\n                     Repr::Sum { ref discr, .. } => discr,\n                     _ => panic!(\"attmpted to switch on non-sum type\"),\n@@ -217,7 +219,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 let mut return_ptr = None;\n                 if let Some((ref lv, target)) = *destination {\n                     self.current_frame_mut().next_block = target;\n-                    return_ptr = Some(try!(self.eval_lvalue(lv)).0)\n+                    return_ptr = Some(try!(self.eval_lvalue(lv)));\n                 }\n \n                 let func_ty = self.current_frame().mir.operand_ty(self.tcx, func);\n@@ -229,8 +231,9 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                             Abi::RustIntrinsic => match &self.tcx.item_name(def_id).as_str()[..] {\n                                 \"size_of\" => {\n                                     let ty = *substs.types.get(subst::FnSpace, 0);\n-                                    let (dest, dest_repr) =\n-                                        try!(self.eval_lvalue(&mir::Lvalue::ReturnPointer));\n+                                    let ret_ptr = &mir::Lvalue::ReturnPointer;\n+                                    let dest = try!(self.eval_lvalue(ret_ptr));\n+                                    let dest_repr = self.lvalue_repr(ret_ptr);\n                                     let size = PrimVal::from_usize(self.ty_to_repr(ty).size(),\n                                                                    &dest_repr);\n                                     try!(self.memory.write_primval(dest, size));\n@@ -289,7 +292,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n     fn eval_assignment(&mut self, lvalue: &mir::Lvalue<'tcx>, rvalue: &mir::Rvalue<'tcx>)\n         -> EvalResult<()>\n     {\n-        let (dest, dest_repr) = try!(self.eval_lvalue(lvalue));\n+        let dest = try!(self.eval_lvalue(lvalue));\n+        let dest_repr = self.lvalue_repr(lvalue);\n \n         use rustc::mir::repr::Rvalue::*;\n         match *rvalue {\n@@ -355,7 +359,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             Ref(_, _, ref lvalue) => {\n-                let (ptr, _) = try!(self.eval_lvalue(lvalue));\n+                let ptr = try!(self.eval_lvalue(lvalue));\n                 self.memory.write_ptr(dest, ptr)\n             }\n \n@@ -372,7 +376,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n     fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<(Pointer, Repr)> {\n         use rustc::mir::repr::Operand::*;\n         match *op {\n-            Consume(ref lvalue) => self.eval_lvalue(lvalue),\n+            Consume(ref lvalue) => Ok((try!(self.eval_lvalue(lvalue)), self.lvalue_repr(lvalue))),\n \n             Constant(mir::Constant { ref literal, ty, .. }) => {\n                 use rustc::mir::repr::Literal::*;\n@@ -387,7 +391,16 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         }\n     }\n \n-    fn eval_lvalue(&self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<(Pointer, Repr)> {\n+    fn lvalue_repr(&self, lvalue: &mir::Lvalue<'tcx>) -> Repr {\n+        use rustc::mir::tcx::LvalueTy;\n+        match self.current_frame().mir.lvalue_ty(self.tcx, lvalue) {\n+            LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n+            LvalueTy::Downcast { ref adt_def, substs, variant_index } =>\n+                self.make_variant_repr(&adt_def.variants[variant_index], substs),\n+        }\n+    }\n+\n+    fn eval_lvalue(&self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<Pointer> {\n         let frame = self.current_frame();\n \n         use rustc::mir::repr::Lvalue::*;\n@@ -399,7 +412,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             Temp(i) => frame.locals[frame.temp_offset + i as usize],\n \n             Projection(ref proj) => {\n-                let (base_ptr, base_repr) = try!(self.eval_lvalue(&proj.base));\n+                let base_ptr = try!(self.eval_lvalue(&proj.base));\n+                let base_repr = self.lvalue_repr(&proj.base);\n                 use rustc::mir::repr::ProjectionElem::*;\n                 match proj.elem {\n                     Field(field, _) => match base_repr {\n@@ -422,14 +436,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             ref l => panic!(\"can't handle lvalue: {:?}\", l),\n         };\n \n-        use rustc::mir::tcx::LvalueTy;\n-        let repr = match self.current_frame().mir.lvalue_ty(self.tcx, lvalue) {\n-            LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n-            LvalueTy::Downcast { ref adt_def, substs, variant_index } =>\n-                self.make_variant_repr(&adt_def.variants[variant_index], substs),\n-        };\n-\n-        Ok((ptr, repr))\n+        Ok(ptr)\n     }\n \n     fn const_to_ptr(&mut self, const_val: &const_eval::ConstVal) -> EvalResult<Pointer> {"}, {"sha": "5ab3fa79ad7f6c08f5f1fe47b9e72a5850a701db", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=c18e7a68fbfc28f7e4bbd0fbb715e216e17273dc", "patch": "@@ -7,6 +7,7 @@ use std::ptr;\n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n \n+// TODO(tsion): How should this get set? Host or target pointer size?\n const POINTER_SIZE: usize = 8;\n \n pub struct Memory {"}]}