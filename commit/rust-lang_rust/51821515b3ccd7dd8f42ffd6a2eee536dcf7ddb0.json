{"sha": "51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0", "node_id": "C_kwDOAAsO6NoAKDUxODIxNTE1YjNjY2Q3ZGQ4ZjQyZmZkNmEyZWVlNTM2ZGNmN2RkYjA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-11T10:45:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-13T06:47:09Z"}, "message": "Remove `PartitioningCx::target_cgu_count`.\n\nBecause that value can be easily obtained from `Partitioning::tcx`.", "tree": {"sha": "02ecdd28b46f67ae3924ce966129b07afa9a6b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ecdd28b46f67ae3924ce966129b07afa9a6b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0", "html_url": "https://github.com/rust-lang/rust/commit/51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "url": "https://api.github.com/repos/rust-lang/rust/commits/df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "html_url": "https://github.com/rust-lang/rust/commit/df77afbcaf3365a32066a8ca4a00ae6fc9a69647"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "fe869038393a2b0a4ebe5e39b75b8b07461e19e9", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=51821515b3ccd7dd8f42ffd6a2eee536dcf7ddb0", "patch": "@@ -121,7 +121,6 @@ use crate::errors::{CouldntDumpMonoStats, SymbolAlreadyDefined, UnknownCguCollec\n \n struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    target_cgu_count: usize,\n     usage_map: &'a UsageMap<'tcx>,\n }\n \n@@ -136,15 +135,14 @@ struct PlacedRootMonoItems<'tcx> {\n fn partition<'tcx, I>(\n     tcx: TyCtxt<'tcx>,\n     mono_items: I,\n-    max_cgu_count: usize,\n     usage_map: &UsageMap<'tcx>,\n ) -> Vec<CodegenUnit<'tcx>>\n where\n     I: Iterator<Item = MonoItem<'tcx>>,\n {\n     let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning\");\n \n-    let cx = &PartitioningCx { tcx, target_cgu_count: max_cgu_count, usage_map };\n+    let cx = &PartitioningCx { tcx, usage_map };\n \n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n@@ -309,7 +307,7 @@ fn merge_codegen_units<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut Vec<CodegenUnit<'tcx>>,\n ) {\n-    assert!(cx.target_cgu_count >= 1);\n+    assert!(cx.tcx.sess.codegen_units() >= 1);\n \n     // A sorted order here ensures merging is deterministic.\n     assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n@@ -320,7 +318,7 @@ fn merge_codegen_units<'tcx>(\n \n     // Merge the two smallest codegen units until the target size is\n     // reached.\n-    while codegen_units.len() > cx.target_cgu_count {\n+    while codegen_units.len() > cx.tcx.sess.codegen_units() {\n         // Sort small cgus to the back\n         codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         let mut smallest = codegen_units.pop().unwrap();\n@@ -922,8 +920,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n     let (codegen_units, _) = tcx.sess.time(\"partition_and_assert_distinct_symbols\", || {\n         sync::join(\n             || {\n-                let mut codegen_units =\n-                    partition(tcx, items.iter().copied(), tcx.sess.codegen_units(), &usage_map);\n+                let mut codegen_units = partition(tcx, items.iter().copied(), &usage_map);\n                 codegen_units[0].make_primary();\n                 &*tcx.arena.alloc_from_iter(codegen_units)\n             },"}]}