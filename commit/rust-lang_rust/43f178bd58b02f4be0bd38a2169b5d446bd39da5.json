{"sha": "43f178bd58b02f4be0bd38a2169b5d446bd39da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjE3OGJkNThiMDJmNGJlMGJkMzhhMjE2OWI1ZDQ0NmJkMzlkYTU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-24T09:41:49Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-24T09:45:15Z"}, "message": "Remove `Summary`", "tree": {"sha": "00bc1b60275a82709cf55f0d8cd379089e942e26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00bc1b60275a82709cf55f0d8cd379089e942e26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f178bd58b02f4be0bd38a2169b5d446bd39da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f178bd58b02f4be0bd38a2169b5d446bd39da5", "html_url": "https://github.com/rust-lang/rust/commit/43f178bd58b02f4be0bd38a2169b5d446bd39da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f178bd58b02f4be0bd38a2169b5d446bd39da5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24df1397ec136a91df54f09baa4957bde9597a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24df1397ec136a91df54f09baa4957bde9597a9", "html_url": "https://github.com/rust-lang/rust/commit/a24df1397ec136a91df54f09baa4957bde9597a9"}], "stats": {"total": 271, "additions": 124, "deletions": 147}, "files": [{"sha": "049749f8f52f087706bd497e5f40fb969738e536", "filename": "src/bin/main.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=43f178bd58b02f4be0bd38a2169b5d446bd39da5", "patch": "@@ -225,12 +225,11 @@ fn format_string(input: String, options: GetOptsOptions) -> Result<i32, failure:\n     let mut session = Session::new(config, Some(out));\n     format_and_emit_report(&mut session, Input::Text(input));\n \n-    let exit_code =\n-        if session.summary.has_operational_errors() || session.summary.has_parsing_errors() {\n-            1\n-        } else {\n-            0\n-        };\n+    let exit_code = if session.has_operational_errors() || session.has_parsing_errors() {\n+        1\n+    } else {\n+        0\n+    };\n     Ok(exit_code)\n }\n \n@@ -254,10 +253,10 @@ fn format(\n     for file in files {\n         if !file.exists() {\n             eprintln!(\"Error: file `{}` does not exist\", file.to_str().unwrap());\n-            session.summary.add_operational_error();\n+            session.add_operational_error();\n         } else if file.is_dir() {\n             eprintln!(\"Error: `{}` is a directory\", file.to_str().unwrap());\n-            session.summary.add_operational_error();\n+            session.add_operational_error();\n         } else {\n             // Check the file directory if the config-path could not be read or not provided\n             if config_path.is_none() {\n@@ -290,9 +289,9 @@ fn format(\n         file.write_all(toml.as_bytes())?;\n     }\n \n-    let exit_code = if session.summary.has_operational_errors()\n-        || session.summary.has_parsing_errors()\n-        || ((session.summary.has_diff || session.summary.has_check_errors()) && options.check)\n+    let exit_code = if session.has_operational_errors()\n+        || session.has_parsing_errors()\n+        || ((session.has_diff() || session.has_check_errors()) && options.check)\n     {\n         1\n     } else {\n@@ -322,7 +321,7 @@ fn format_and_emit_report<T: Write>(session: &mut Session<T>, input: Input) {\n         }\n         Err(msg) => {\n             eprintln!(\"Error writing files: {}\", msg);\n-            session.summary.add_operational_error();\n+            session.add_operational_error();\n         }\n     }\n }"}, {"sha": "ceada0d4040c27c12a50de9dc6a63e56ac135e3f", "filename": "src/formatting.rs", "status": "modified", "additions": 51, "deletions": 121, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=43f178bd58b02f4be0bd38a2169b5d446bd39da5", "patch": "@@ -46,8 +46,12 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             let config = &self.config.clone();\n             let format_result = format_project(input, config, self);\n \n-            format_result.map(|(report, summary)| {\n-                self.summary.add(summary);\n+            format_result.map(|report| {\n+                {\n+                    let new_errors = &report.internal.borrow().1;\n+\n+                    self.errors.add(new_errors);\n+                }\n                 report\n             })\n         })\n@@ -59,8 +63,7 @@ fn format_project<T: FormatHandler>(\n     input: Input,\n     config: &Config,\n     handler: &mut T,\n-) -> Result<(FormatReport, Summary), ErrorKind> {\n-    let mut summary = Summary::default();\n+) -> Result<FormatReport, ErrorKind> {\n     let mut timer = Timer::Initialized(Instant::now());\n \n     let main_file = input.file_name();\n@@ -69,21 +72,15 @@ fn format_project<T: FormatHandler>(\n     // Parse the crate.\n     let codemap = Rc::new(CodeMap::new(FilePathMapping::empty()));\n     let mut parse_session = make_parse_sess(codemap.clone(), config);\n-    let krate = parse_crate(input, &parse_session, config, &mut summary)?;\n+    let mut report = FormatReport::new();\n+    let krate = parse_crate(input, &parse_session, config, &mut report)?;\n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n     let silent_emitter = silent_emitter(codemap);\n     parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n \n-    let mut context = FormatContext::new(\n-        &krate,\n-        FormatReport::new(),\n-        summary,\n-        parse_session,\n-        config,\n-        handler,\n-    );\n+    let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n \n     let files = modules::list_files(&krate, context.parse_session.codemap())?;\n     for (path, module) in files {\n@@ -104,36 +101,20 @@ fn format_project<T: FormatHandler>(\n         )\n     });\n \n-    context.summarise_errors();\n-    Ok((context.report, context.summary))\n+    Ok(context.report)\n }\n \n // Used for formatting files.\n #[derive(new)]\n struct FormatContext<'a, T: FormatHandler + 'a> {\n     krate: &'a ast::Crate,\n     report: FormatReport,\n-    summary: Summary,\n     parse_session: ParseSess,\n     config: &'a Config,\n     handler: &'a mut T,\n }\n \n impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n-    // Moves errors from the report to the summary.\n-    fn summarise_errors(&mut self) {\n-        if self.report.has_warnings() {\n-            self.summary.add_formatting_error();\n-        }\n-        let report_errs = &self.report.internal.borrow().1;\n-        if report_errs.has_check_errors {\n-            self.summary.add_check_error();\n-        }\n-        if report_errs.has_operational_errors {\n-            self.summary.add_operational_error();\n-        }\n-    }\n-\n     // Formats a single file/module.\n     fn format_file(\n         &mut self,\n@@ -188,16 +169,22 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n         replace_with_system_newlines(&mut visitor.buffer, &self.config);\n \n         if visitor.macro_rewrite_failure {\n-            self.summary.add_macro_format_failure();\n+            self.report.add_macro_format_failure();\n         }\n \n-        self.handler.handle_formatted_file(path, visitor.buffer)\n+        self.handler\n+            .handle_formatted_file(path, visitor.buffer, &mut self.report)\n     }\n }\n \n // Handle the results of formatting.\n trait FormatHandler {\n-    fn handle_formatted_file(&mut self, path: FileName, result: String) -> Result<(), ErrorKind>;\n+    fn handle_formatted_file(\n+        &mut self,\n+        path: FileName,\n+        result: String,\n+        report: &mut FormatReport,\n+    ) -> Result<(), ErrorKind>;\n }\n \n impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n@@ -206,10 +193,11 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n         &mut self,\n         path: FileName,\n         mut result: String,\n+        report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n             match filemap::write_file(&mut result, &path, out, &self.config) {\n-                Ok(b) if b => self.summary.add_diff(),\n+                Ok(b) if b => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed\n                     let err_msg = format!(\"{}: {}\", path, e);\n@@ -298,114 +286,56 @@ pub(crate) type FormatErrorMap = HashMap<FileName, Vec<FormattingError>>;\n \n #[derive(Default, Debug)]\n pub(crate) struct ReportedErrors {\n-    pub(crate) has_operational_errors: bool,\n-    pub(crate) has_check_errors: bool,\n-}\n-\n-/// A single span of changed lines, with 0 or more removed lines\n-/// and a vector of 0 or more inserted lines.\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ModifiedChunk {\n-    /// The first to be removed from the original text\n-    pub line_number_orig: u32,\n-    /// The number of lines which have been replaced\n-    pub lines_removed: u32,\n-    /// The new lines\n-    pub lines: Vec<String>,\n-}\n-\n-/// Set of changed sections of a file.\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ModifiedLines {\n-    /// The set of changed chunks.\n-    pub chunks: Vec<ModifiedChunk>,\n-}\n-\n-/// A summary of a Rustfmt run.\n-#[derive(Debug, Default, Clone, Copy)]\n-pub struct Summary {\n     // Encountered e.g. an IO error.\n-    has_operational_errors: bool,\n+    pub(crate) has_operational_errors: bool,\n \n     // Failed to reformat code because of parsing errors.\n-    has_parsing_errors: bool,\n+    pub(crate) has_parsing_errors: bool,\n \n     // Code is valid, but it is impossible to format it properly.\n-    has_formatting_errors: bool,\n+    pub(crate) has_formatting_errors: bool,\n \n     // Code contains macro call that was unable to format.\n     pub(crate) has_macro_format_failure: bool,\n \n     // Failed a check, such as the license check or other opt-in checking.\n-    has_check_errors: bool,\n+    pub(crate) has_check_errors: bool,\n \n     /// Formatted code differs from existing code (--check only).\n-    pub has_diff: bool,\n+    pub(crate) has_diff: bool,\n }\n \n-impl Summary {\n-    pub fn has_operational_errors(&self) -> bool {\n-        self.has_operational_errors\n-    }\n-\n-    pub fn has_parsing_errors(&self) -> bool {\n-        self.has_parsing_errors\n-    }\n-\n-    pub fn has_formatting_errors(&self) -> bool {\n-        self.has_formatting_errors\n-    }\n-\n-    pub fn has_check_errors(&self) -> bool {\n-        self.has_check_errors\n-    }\n-\n-    pub(crate) fn has_macro_formatting_failure(&self) -> bool {\n-        self.has_macro_format_failure\n-    }\n-\n-    pub fn add_operational_error(&mut self) {\n-        self.has_operational_errors = true;\n-    }\n-\n-    pub(crate) fn add_parsing_error(&mut self) {\n-        self.has_parsing_errors = true;\n-    }\n-\n-    pub(crate) fn add_formatting_error(&mut self) {\n-        self.has_formatting_errors = true;\n-    }\n-\n-    pub(crate) fn add_check_error(&mut self) {\n-        self.has_check_errors = true;\n-    }\n-\n-    pub(crate) fn add_diff(&mut self) {\n-        self.has_diff = true;\n-    }\n-\n-    pub(crate) fn add_macro_format_failure(&mut self) {\n-        self.has_macro_format_failure = true;\n-    }\n-\n-    pub fn has_no_errors(&self) -> bool {\n-        !(self.has_operational_errors\n-            || self.has_parsing_errors\n-            || self.has_formatting_errors\n-            || self.has_diff)\n-    }\n-\n+impl ReportedErrors {\n     /// Combine two summaries together.\n-    pub fn add(&mut self, other: Summary) {\n+    pub fn add(&mut self, other: &ReportedErrors) {\n         self.has_operational_errors |= other.has_operational_errors;\n+        self.has_parsing_errors |= other.has_parsing_errors;\n         self.has_formatting_errors |= other.has_formatting_errors;\n         self.has_macro_format_failure |= other.has_macro_format_failure;\n-        self.has_parsing_errors |= other.has_parsing_errors;\n         self.has_check_errors |= other.has_check_errors;\n         self.has_diff |= other.has_diff;\n     }\n }\n \n+/// A single span of changed lines, with 0 or more removed lines\n+/// and a vector of 0 or more inserted lines.\n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct ModifiedChunk {\n+    /// The first to be removed from the original text\n+    pub line_number_orig: u32,\n+    /// The number of lines which have been replaced\n+    pub lines_removed: u32,\n+    /// The new lines\n+    pub lines: Vec<String>,\n+}\n+\n+/// Set of changed sections of a file.\n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct ModifiedLines {\n+    /// The set of changed chunks.\n+    pub chunks: Vec<ModifiedChunk>,\n+}\n+\n #[derive(Clone, Copy, Debug)]\n enum Timer {\n     Initialized(Instant),\n@@ -647,7 +577,7 @@ fn parse_crate(\n     input: Input,\n     parse_session: &ParseSess,\n     config: &Config,\n-    summary: &mut Summary,\n+    report: &mut FormatReport,\n ) -> Result<ast::Crate, ErrorKind> {\n     let input_is_stdin = input.is_text();\n \n@@ -685,7 +615,7 @@ fn parse_crate(\n         }\n     }\n \n-    summary.add_parsing_error();\n+    report.add_parsing_error();\n     Err(ErrorKind::ParseError)\n }\n "}, {"sha": "0042ff353a7ceb698363edc81429294319c9cc8b", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=43f178bd58b02f4be0bd38a2169b5d446bd39da5", "patch": "@@ -79,7 +79,7 @@ fn fmt_files(files: &[&str]) -> i32 {\n         if report.has_warnings() {\n             eprintln!(\"{}\", report);\n         }\n-        if !session.summary.has_no_errors() {\n+        if !session.has_no_errors() {\n             exit_code = 1;\n         }\n     }"}, {"sha": "0ee913690b08398c17b12a76213b9a28984901e5", "filename": "src/lib.rs", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=43f178bd58b02f4be0bd38a2169b5d446bd39da5", "patch": "@@ -49,7 +49,7 @@ use syntax::ast;\n \n use comment::LineClasses;\n use failure::Fail;\n-use formatting::{FileMap, FormatErrorMap, FormattingError, ReportedErrors, Summary};\n+use formatting::{FileMap, FormatErrorMap, FormattingError, ReportedErrors};\n use issues::Issue;\n use shape::Indent;\n \n@@ -179,6 +179,9 @@ impl FormatReport {\n \n     fn track_errors(&self, new_errors: &[FormattingError]) {\n         let errs = &mut self.internal.borrow_mut().1;\n+        if !new_errors.is_empty() {\n+            errs.has_formatting_errors = true;\n+        }\n         if errs.has_operational_errors && errs.has_check_errors {\n             return;\n         }\n@@ -199,6 +202,18 @@ impl FormatReport {\n         }\n     }\n \n+    fn add_diff(&mut self) {\n+        self.internal.borrow_mut().1.has_diff = true;\n+    }\n+\n+    fn add_macro_format_failure(&mut self) {\n+        self.internal.borrow_mut().1.has_macro_format_failure = true;\n+    }\n+\n+    fn add_parsing_error(&mut self) {\n+        self.internal.borrow_mut().1.has_parsing_errors = true;\n+    }\n+\n     fn warning_count(&self) -> usize {\n         self.internal\n             .borrow()\n@@ -210,7 +225,7 @@ impl FormatReport {\n \n     /// Whether any warnings or errors are present in the report.\n     pub fn has_warnings(&self) -> bool {\n-        self.warning_count() > 0\n+        self.internal.borrow().1.has_formatting_errors\n     }\n \n     /// Print the report to a terminal using colours and potentially other\n@@ -351,7 +366,7 @@ fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     {\n         let mut session = Session::new(config, Some(&mut out));\n         let result = session.format(input);\n-        let formatting_error = session.summary.has_macro_formatting_failure()\n+        let formatting_error = session.errors.has_macro_format_failure\n             || session.out.as_ref().unwrap().is_empty() && !snippet.is_empty();\n         if formatting_error || result.is_err() {\n             return None;\n@@ -443,7 +458,7 @@ fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n pub struct Session<'b, T: Write + 'b> {\n     pub config: Config,\n     pub out: Option<&'b mut T>,\n-    pub summary: Summary,\n+    pub(crate) errors: ReportedErrors,\n     filemap: FileMap,\n }\n \n@@ -456,7 +471,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n         Session {\n             config,\n             out,\n-            summary: Summary::default(),\n+            errors: ReportedErrors::default(),\n             filemap: FileMap::new(),\n         }\n     }\n@@ -476,6 +491,39 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n         mem::swap(&mut config, &mut self.config);\n         result\n     }\n+\n+    pub fn add_operational_error(&mut self) {\n+        self.errors.has_operational_errors = true;\n+    }\n+\n+    pub fn has_operational_errors(&self) -> bool {\n+        self.errors.has_operational_errors\n+    }\n+\n+    pub fn has_parsing_errors(&self) -> bool {\n+        self.errors.has_parsing_errors\n+    }\n+\n+    pub fn has_formatting_errors(&self) -> bool {\n+        self.errors.has_formatting_errors\n+    }\n+\n+    pub fn has_check_errors(&self) -> bool {\n+        self.errors.has_check_errors\n+    }\n+\n+    pub fn has_diff(&self) -> bool {\n+        self.errors.has_diff\n+    }\n+\n+    pub fn has_no_errors(&self) -> bool {\n+        !(self.has_operational_errors()\n+            || self.has_parsing_errors()\n+            || self.has_formatting_errors()\n+            || self.has_check_errors()\n+            || self.has_diff())\n+            || self.errors.has_macro_format_failure\n+    }\n }\n \n impl<'b, T: Write + 'b> Drop for Session<'b, T> {"}, {"sha": "beba26281129fa3d458082f3d03f600d65df72b4", "filename": "src/test/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f178bd58b02f4be0bd38a2169b5d446bd39da5/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=43f178bd58b02f4be0bd38a2169b5d446bd39da5", "patch": "@@ -21,7 +21,7 @@ use std::str::Chars;\n \n use config::{Color, Config, EmitMode, FileName, ReportTactic};\n use filemap;\n-use formatting::{FileMap, ModifiedChunk, Summary};\n+use formatting::{FileMap, ModifiedChunk};\n use rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, OutputWriter};\n use {FormatReport, Input, Session};\n \n@@ -278,7 +278,7 @@ fn stdin_formatting_smoke_test() {\n     {\n         let mut session = Session::new(config, Some(&mut buf));\n         session.format(input).unwrap();\n-        assert!(session.summary.has_no_errors());\n+        assert!(session.has_no_errors());\n     }\n     //eprintln!(\"{:?}\", );\n     #[cfg(not(windows))]\n@@ -318,7 +318,7 @@ fn format_lines_errors_are_reported() {\n     config.set().error_on_line_overflow(true);\n     let mut session = Session::<io::Stdout>::new(config, None);\n     session.format(input).unwrap();\n-    assert!(session.summary.has_formatting_errors());\n+    assert!(session.has_formatting_errors());\n }\n \n #[test]\n@@ -330,7 +330,7 @@ fn format_lines_errors_are_reported_with_tabs() {\n     config.set().hard_tabs(true);\n     let mut session = Session::<io::Stdout>::new(config, None);\n     session.format(input).unwrap();\n-    assert!(session.summary.has_formatting_errors());\n+    assert!(session.has_formatting_errors());\n }\n \n // For each file, run rustfmt and collect the output.\n@@ -419,7 +419,7 @@ fn format_file<P: Into<PathBuf>>(filepath: P, config: Config) -> (bool, FileMap,\n     let input = Input::File(filepath);\n     let mut session = Session::<io::Stdout>::new(config, None);\n     let result = session.format(input).unwrap();\n-    let parsing_errors = session.summary.has_parsing_errors();\n+    let parsing_errors = session.has_parsing_errors();\n     let mut filemap = FileMap::new();\n     mem::swap(&mut session.filemap, &mut filemap);\n     (parsing_errors, filemap, result)\n@@ -767,8 +767,8 @@ impl ConfigCodeBlock {\n         true\n     }\n \n-    fn has_parsing_errors(&self, error_summary: Summary) -> bool {\n-        if error_summary.has_parsing_errors() {\n+    fn has_parsing_errors<T: Write>(&self, session: &Session<T>) -> bool {\n+        if session.has_parsing_errors() {\n             write_message(&format!(\n                 \"\\u{261d}\\u{1f3fd} Cannot format {}:{}\",\n                 CONFIGURATIONS_FILE_NAME,\n@@ -819,7 +819,7 @@ impl ConfigCodeBlock {\n         {\n             let mut session = Session::new(config, Some(&mut buf));\n             session.format(input).unwrap();\n-            if self.has_parsing_errors(session.summary) {\n+            if self.has_parsing_errors(&session) {\n                 return false;\n             }\n         }"}]}