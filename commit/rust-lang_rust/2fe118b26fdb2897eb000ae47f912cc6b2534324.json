{"sha": "2fe118b26fdb2897eb000ae47f912cc6b2534324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTExOGIyNmZkYjI4OTdlYjAwMGFlNDdmOTEyY2M2YjI1MzQzMjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-22T00:42:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-22T00:42:45Z"}, "message": "rt: Don't make memory_region depend on rust_env\n\nI am going to use memory_region and boxed_region as the local heap\nin the new scheduler, for now at least, and I don't have a rust_env\navailable.", "tree": {"sha": "5ee47e55805f16a70698aedadc78889441895c7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee47e55805f16a70698aedadc78889441895c7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe118b26fdb2897eb000ae47f912cc6b2534324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe118b26fdb2897eb000ae47f912cc6b2534324", "html_url": "https://github.com/rust-lang/rust/commit/2fe118b26fdb2897eb000ae47f912cc6b2534324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe118b26fdb2897eb000ae47f912cc6b2534324/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "html_url": "https://github.com/rust-lang/rust/commit/f9069baa70ea78117f2087fe6e359fb2ea0ae16a"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "e8ddb53148c1a543de4a3ded2ce4acb693ca4dae", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=2fe118b26fdb2897eb000ae47f912cc6b2534324", "patch": "@@ -82,7 +82,7 @@ void boxed_region::free(rust_opaque_box *box) {\n     if (box->next) box->next->prev = box->prev;\n     if (live_allocs == box) live_allocs = box->next;\n \n-    if (env->poison_on_free) {\n+    if (poison_on_free) {\n         memset(box_body(box), 0xab, box->td->size);\n     }\n "}, {"sha": "178772007e51842adabc67d9a307baeecb435ecc", "filename": "src/rt/boxed_region.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fboxed_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fboxed_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.h?ref=2fe118b26fdb2897eb000ae47f912cc6b2534324", "patch": "@@ -24,7 +24,7 @@ struct rust_env;\n  * a type descr which describes the payload (what follows the header). */\n class boxed_region {\n private:\n-    rust_env *env;\n+    bool poison_on_free;\n     memory_region *backing_region;\n     rust_opaque_box *live_allocs;\n \n@@ -41,8 +41,8 @@ class boxed_region {\n     boxed_region& operator=(const boxed_region& rhs);\n \n public:\n-    boxed_region(rust_env *e, memory_region *br)\n-        : env(e)\n+    boxed_region(memory_region *br, bool poison_on_free)\n+        : poison_on_free(poison_on_free)\n         , backing_region(br)\n         , live_allocs(NULL)\n     {}"}, {"sha": "f3406712cb01251682fc8331f4122a54f10d4328", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=2fe118b26fdb2897eb000ae47f912cc6b2534324", "patch": "@@ -11,7 +11,6 @@\n \n #include \"sync/sync.h\"\n #include \"memory_region.h\"\n-#include \"rust_env.h\"\n \n #if RUSTRT_TRACK_ALLOCATIONS >= 3\n #include <execinfo.h>\n@@ -35,15 +34,19 @@ void *memory_region::get_data(alloc_header *ptr) {\n     return (void*)((char *)ptr + HEADER_SIZE);\n }\n \n-memory_region::memory_region(rust_env *env, bool synchronized) :\n-    _env(env), _parent(NULL), _live_allocations(0),\n-    _detailed_leaks(env->detailed_leaks),\n+memory_region::memory_region(bool synchronized,\n+                             bool detailed_leaks,\n+                             bool poison_on_free) :\n+    _parent(NULL), _live_allocations(0),\n+    _detailed_leaks(detailed_leaks),\n+    _poison_on_free(poison_on_free),\n     _synchronized(synchronized) {\n }\n \n memory_region::memory_region(memory_region *parent) :\n-    _env(parent->_env), _parent(parent), _live_allocations(0),\n+    _parent(parent), _live_allocations(0),\n     _detailed_leaks(parent->_detailed_leaks),\n+    _poison_on_free(parent->_poison_on_free),\n     _synchronized(parent->_synchronized) {\n }\n \n@@ -241,7 +244,7 @@ memory_region::claim_alloc(void *mem) {\n void\n memory_region::maybe_poison(void *mem) {\n \n-    if (!_env->poison_on_free)\n+    if (!_poison_on_free)\n         return;\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 1"}, {"sha": "4ad57c11809ccc67ece729980b2d23bc46258ad0", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=2fe118b26fdb2897eb000ae47f912cc6b2534324", "patch": "@@ -54,11 +54,11 @@ class memory_region {\n     inline alloc_header *get_header(void *mem);\n     inline void *get_data(alloc_header *);\n \n-    rust_env *_env;\n     memory_region *_parent;\n     int _live_allocations;\n     array_list<alloc_header *> _allocation_list;\n     const bool _detailed_leaks;\n+    const bool _poison_on_free;\n     const bool _synchronized;\n     lock_and_signal _lock;\n \n@@ -75,7 +75,8 @@ class memory_region {\n     memory_region& operator=(const memory_region& rhs);\n \n public:\n-    memory_region(rust_env *env, bool synchronized);\n+    memory_region(bool synchronized,\n+                  bool detailed_leaks, bool poison_on_free);\n     memory_region(memory_region *parent);\n     void *malloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);"}, {"sha": "e7ce4b08ee46ab6aac64c3a6f2418ebb569db6e8", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=2fe118b26fdb2897eb000ae47f912cc6b2534324", "patch": "@@ -36,7 +36,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched, int id, bool killed) :\n     sched(sched),\n     log_lvl(log_debug),\n     min_stack_size(kernel->env->min_stack_size),\n-    local_region(kernel->env, false),\n+    local_region(false, kernel->env->detailed_leaks, kernel->env->poison_on_free),\n     // FIXME #2891: calculate a per-scheduler name.\n     name(\"main\")\n {"}, {"sha": "4680f32c19a844285c6c3c77ea135a22742b786f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2fe118b26fdb2897eb000ae47f912cc6b2534324/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=2fe118b26fdb2897eb000ae47f912cc6b2534324", "patch": "@@ -36,7 +36,7 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     kernel(sched_loop->kernel),\n     name(name),\n     list_index(-1),\n-    boxed(sched_loop->kernel->env, &local_region),\n+    boxed(&local_region, sched_loop->kernel->env->poison_on_free),\n     local_region(&sched_loop->local_region),\n     unwinding(false),\n     total_stack_sz(0),"}]}