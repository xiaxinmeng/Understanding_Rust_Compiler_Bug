{"sha": "067dc660ae3eef47549fe2531054ba942ac3fc91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2N2RjNjYwYWUzZWVmNDc1NDlmZTI1MzEwNTRiYTk0MmFjM2ZjOTE=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T16:23:51Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T16:23:51Z"}, "message": "implement feedback from review", "tree": {"sha": "92279f4c45ccdb2ffa05e4adb31ffdb4398fa443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92279f4c45ccdb2ffa05e4adb31ffdb4398fa443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/067dc660ae3eef47549fe2531054ba942ac3fc91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/067dc660ae3eef47549fe2531054ba942ac3fc91", "html_url": "https://github.com/rust-lang/rust/commit/067dc660ae3eef47549fe2531054ba942ac3fc91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/067dc660ae3eef47549fe2531054ba942ac3fc91/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9374d526da82a74c5d5f7d7b8cef97feb3104274", "url": "https://api.github.com/repos/rust-lang/rust/commits/9374d526da82a74c5d5f7d7b8cef97feb3104274", "html_url": "https://github.com/rust-lang/rust/commit/9374d526da82a74c5d5f7d7b8cef97feb3104274"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "b9c7da71b5c01754d787fa1fbbacf9b6a08ca33d", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/067dc660ae3eef47549fe2531054ba942ac3fc91/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067dc660ae3eef47549fe2531054ba942ac3fc91/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=067dc660ae3eef47549fe2531054ba942ac3fc91", "patch": "@@ -154,29 +154,27 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n                 match variant.field_list() {\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n-                        let mut pats = vec![];\n-\n                         // => f.debug_struct(name)\n                         let target = make::expr_path(make::ext::ident_path(\"f\"));\n                         let method = make::name_ref(\"debug_struct\");\n                         let struct_name = format!(\"\\\"{}\\\"\", name);\n                         let args = make::arg_list(Some(make::expr_literal(&struct_name).into()));\n                         let mut expr = make::expr_method_call(target, method, args);\n \n+                        let mut pats = vec![];\n                         for field in list.fields() {\n-                            let name = field.name()?;\n+                            let field_name = field.name()?;\n \n                             // create a field pattern for use in `MyStruct { fields.. }`\n-                            let field_name = field.name()?;\n                             let pat = make::ident_pat(false, false, field_name.clone());\n                             pats.push(pat.into());\n \n                             // => <expr>.field(\"field_name\", field)\n                             let method_name = make::name_ref(\"field\");\n-                            let field_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n-                            let field_path = &format!(\"{}\", name);\n-                            let field_path = make::expr_path(make::ext::ident_path(field_path));\n-                            let args = make::arg_list(vec![field_name, field_path]);\n+                            let name = make::expr_literal(&(format!(\"\\\"{}\\\"\", field_name))).into();\n+                            let path = &format!(\"{}\", field_name);\n+                            let path = make::expr_path(make::ext::ident_path(path));\n+                            let args = make::arg_list(vec![name, path]);\n                             expr = make::expr_method_call(expr, method_name, args);\n                         }\n \n@@ -189,15 +187,14 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         arms.push(make::match_arm(Some(pat.into()), None, expr));\n                     }\n                     Some(ast::FieldList::TupleFieldList(list)) => {\n-                        let mut pats = vec![];\n-\n                         // => f.debug_tuple(name)\n                         let target = make::expr_path(make::ext::ident_path(\"f\"));\n                         let method = make::name_ref(\"debug_tuple\");\n                         let struct_name = format!(\"\\\"{}\\\"\", name);\n                         let args = make::arg_list(Some(make::expr_literal(&struct_name).into()));\n                         let mut expr = make::expr_method_call(target, method, args);\n \n+                        let mut pats = vec![];\n                         for (i, _) in list.fields().enumerate() {\n                             let name = format!(\"arg{}\", i);\n \n@@ -224,7 +221,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     }\n                     None => {\n                         let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n-                        let args = make::arg_list(vec![target, fmt_string]);\n+                        let args = make::arg_list([target, fmt_string]);\n                         let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n                         let macro_call = make::expr_macro_call(macro_name, args);\n \n@@ -267,7 +264,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n                         let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n-                        let args = make::arg_list(vec![f_name, f_path]);\n+                        let args = make::arg_list([f_name, f_path]);\n                         expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n                     }\n                     expr"}]}