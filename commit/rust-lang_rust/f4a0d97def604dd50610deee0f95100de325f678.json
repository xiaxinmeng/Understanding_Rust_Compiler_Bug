{"sha": "f4a0d97def604dd50610deee0f95100de325f678", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTBkOTdkZWY2MDRkZDUwNjEwZGVlZTBmOTUxMDBkZTMyNWY2Nzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-18T12:08:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-18T12:08:57Z"}, "message": "Rollup merge of #85415 - LeSeulArtichaut:no-packed-borrow-unsafeck, r=RalfJung\n\nClean up remnants of BorrowOfPackedField\n\ncc #82525 which removed `BorrowOfPackedField` from unsafety-checking\nr? `@RalfJung`", "tree": {"sha": "b648cd4558188830d6a2dfe517d50cb8d5e118c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b648cd4558188830d6a2dfe517d50cb8d5e118c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a0d97def604dd50610deee0f95100de325f678", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgo65aCRBK7hj4Ov3rIwAAQfUIAE1ebF5QEa5S7sDjPcwra/PZ\ntRQFLg82X9RGenZxJXE4TpU3kPw8HqPhwQEzs0pH7QbPF+/UH7VcV2DjIaaRPyBj\n9xv3P8vw/E9LFVeTjABlegCSozCPuAFqXkwzYACc480kgFUcbFeNJVh+4g7oO5W/\ntfGjb2jhUQvn8PYQTc7yPr9+EntbOFVi2zfiQdaqywWOh+I7M3i26gEu9L5eLVDv\nXe0nQpGG91UtFjwBH4oMQHwJKBQBsDHmrqnFFDb3OUrr1oW3zvSmTsBcfrkS0zNA\neXkwjfFqt9aVIoRHGihcx2jkHb2mE3BEUIZky5f9T8GyIAJx8xgbqajee2xLCDw=\n=LsMI\n-----END PGP SIGNATURE-----\n", "payload": "tree b648cd4558188830d6a2dfe517d50cb8d5e118c4\nparent 5f544bcf70c867f46f6e4766bf7c38cd7f5736f8\nparent 62044b2fab83d6a99a2f0f74b2a88ef4722be597\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621339737 +0200\ncommitter GitHub <noreply@github.com> 1621339737 +0200\n\nRollup merge of #85415 - LeSeulArtichaut:no-packed-borrow-unsafeck, r=RalfJung\n\nClean up remnants of BorrowOfPackedField\n\ncc #82525 which removed `BorrowOfPackedField` from unsafety-checking\nr? `@RalfJung`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a0d97def604dd50610deee0f95100de325f678", "html_url": "https://github.com/rust-lang/rust/commit/f4a0d97def604dd50610deee0f95100de325f678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a0d97def604dd50610deee0f95100de325f678/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f544bcf70c867f46f6e4766bf7c38cd7f5736f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f544bcf70c867f46f6e4766bf7c38cd7f5736f8", "html_url": "https://github.com/rust-lang/rust/commit/5f544bcf70c867f46f6e4766bf7c38cd7f5736f8"}, {"sha": "62044b2fab83d6a99a2f0f74b2a88ef4722be597", "url": "https://api.github.com/repos/rust-lang/rust/commits/62044b2fab83d6a99a2f0f74b2a88ef4722be597", "html_url": "https://github.com/rust-lang/rust/commit/62044b2fab83d6a99a2f0f74b2a88ef4722be597"}], "stats": {"total": 65, "additions": 22, "deletions": 43}, "files": [{"sha": "0edb79fdbc8e86d105cb1f9bd0e26ca8740198f3", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a0d97def604dd50610deee0f95100de325f678/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a0d97def604dd50610deee0f95100de325f678/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=f4a0d97def604dd50610deee0f95100de325f678", "patch": "@@ -32,7 +32,6 @@ pub enum UnsafetyViolationDetails {\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n     CastOfPointerToInt,\n-    BorrowOfPackedField,\n     UseOfMutableStatic,\n     UseOfExternStatic,\n     DerefOfRawPointer,\n@@ -64,11 +63,6 @@ impl UnsafetyViolationDetails {\n             CastOfPointerToInt => {\n                 (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n             }\n-            BorrowOfPackedField => (\n-                \"borrow of packed field\",\n-                \"fields of packed structs might be misaligned: dereferencing a misaligned pointer \\\n-                 or even just creating a misaligned reference is undefined behavior\",\n-            ),\n             UseOfMutableStatic => (\n                 \"use of mutable static\",\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\"}, {"sha": "32799cbf4c7dd5ca605d5756829be63b1b9794be", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f4a0d97def604dd50610deee0f95100de325f678/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a0d97def604dd50610deee0f95100de325f678/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=f4a0d97def604dd50610deee0f95100de325f678", "patch": "@@ -64,38 +64,30 @@ impl<'tcx> UnsafetyVisitor<'tcx> {\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {\n                 // unsafe_op_in_unsafe_fn is disallowed\n-                if kind == BorrowOfPackedField {\n-                    // FIXME handle borrows of packed fields\n-                } else {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        span,\n-                        E0133,\n-                        \"{} is unsafe and requires unsafe block\",\n-                        description,\n-                    )\n-                    .span_label(span, description)\n-                    .note(note)\n-                    .emit();\n-                }\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0133,\n+                    \"{} is unsafe and requires unsafe block\",\n+                    description,\n+                )\n+                .span_label(span, description)\n+                .note(note)\n+                .emit();\n             }\n             SafetyContext::Safe => {\n-                if kind == BorrowOfPackedField {\n-                    // FIXME handle borrows of packed fields\n-                } else {\n-                    let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        span,\n-                        E0133,\n-                        \"{} is unsafe and requires unsafe{} block\",\n-                        description,\n-                        fn_sugg,\n-                    )\n-                    .span_label(span, description)\n-                    .note(note)\n-                    .emit();\n-                }\n+                let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0133,\n+                    \"{} is unsafe and requires unsafe{} block\",\n+                    description,\n+                    fn_sugg,\n+                )\n+                .span_label(span, description)\n+                .note(note)\n+                .emit();\n             }\n         }\n     }\n@@ -203,8 +195,6 @@ enum UnsafeOpKind {\n     #[allow(dead_code)] // FIXME\n     CastOfPointerToInt,\n     #[allow(dead_code)] // FIXME\n-    BorrowOfPackedField,\n-    #[allow(dead_code)] // FIXME\n     UseOfMutableStatic,\n     #[allow(dead_code)] // FIXME\n     UseOfExternStatic,\n@@ -244,11 +234,6 @@ impl UnsafeOpKind {\n             CastOfPointerToInt => {\n                 (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n             }\n-            BorrowOfPackedField => (\n-                \"borrow of packed field\",\n-                \"fields of packed structs might be misaligned: dereferencing a misaligned pointer \\\n-                 or even just creating a misaligned reference is undefined behavior\",\n-            ),\n             UseOfMutableStatic => (\n                 \"use of mutable static\",\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\"}]}