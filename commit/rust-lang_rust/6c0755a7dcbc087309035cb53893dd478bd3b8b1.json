{"sha": "6c0755a7dcbc087309035cb53893dd478bd3b8b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDc1NWE3ZGNiYzA4NzMwOTAzNWNiNTM4OTNkZDQ3OGJkM2I4YjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-10T04:14:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-10T19:04:10Z"}, "message": "Point at item definition in foreign crates", "tree": {"sha": "dc26311d916b8a9f47dcb4a211614642ebe2813e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc26311d916b8a9f47dcb4a211614642ebe2813e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0755a7dcbc087309035cb53893dd478bd3b8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0755a7dcbc087309035cb53893dd478bd3b8b1", "html_url": "https://github.com/rust-lang/rust/commit/6c0755a7dcbc087309035cb53893dd478bd3b8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0755a7dcbc087309035cb53893dd478bd3b8b1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089810a1cb28cfb0262b62f1d36c75ea790b0739", "url": "https://api.github.com/repos/rust-lang/rust/commits/089810a1cb28cfb0262b62f1d36c75ea790b0739", "html_url": "https://github.com/rust-lang/rust/commit/089810a1cb28cfb0262b62f1d36c75ea790b0739"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "38bbbb1db1b0821cff146543622d102401520c5f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -12,7 +12,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder}\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n@@ -88,6 +88,18 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n }\n \n impl<'a> LateResolutionVisitor<'a, '_, '_> {\n+    fn def_span(&self, def_id: DefId) -> Option<Span> {\n+        match def_id.krate {\n+            LOCAL_CRATE => self.r.opt_span(def_id),\n+            _ => Some(\n+                self.r\n+                    .session\n+                    .source_map()\n+                    .guess_head_span(self.r.cstore().get_span_untracked(def_id, self.r.session)),\n+            ),\n+        }\n+    }\n+\n     /// Handles error reporting for `smart_resolve_path_fragment` function.\n     /// Creates base error and amends it with one short label and possibly some longer helps/notes.\n     pub(crate) fn smart_resolve_report_errors(\n@@ -552,7 +564,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         }\n                         _ => span,\n                     };\n-                    if let Some(span) = self.r.opt_span(def_id) {\n+                    if let Some(span) = self.def_span(def_id) {\n                         err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                     }\n                     let (tail, descr, applicability) = match source {\n@@ -604,7 +616,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 if nightly_options::is_nightly_build() {\n                     let msg = \"you might have meant to use `#![feature(trait_alias)]` instead of a \\\n                                `type` alias\";\n-                    if let Some(span) = self.r.opt_span(def_id) {\n+                    if let Some(span) = self.def_span(def_id) {\n                         err.span_help(span, msg);\n                     } else {\n                         err.help(msg);\n@@ -682,7 +694,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 bad_struct_syntax_suggestion(def_id);\n             }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n-                if let Some(span) = self.r.opt_span(def_id) {\n+                if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                 }\n                 err.span_label(span, format!(\"did you mean `{}( /* fields */ )`?\", path_str));"}, {"sha": "6292ed446978deed996fcd7e7ff972f51659b14e", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -68,8 +68,10 @@ error[E0423]: expected value, found struct `XEmpty1`\n LL |     let xe1 = XEmpty1;\n    |               ^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n    |\n@@ -88,8 +90,10 @@ error[E0423]: expected function, tuple struct or tuple variant, found struct `XE\n LL |     let xe1 = XEmpty1();\n    |               ^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n    |"}, {"sha": "3570012fc37523583ff27b0b8670805f3d2f3d2c", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -13,8 +13,10 @@ error[E0532]: expected unit struct, unit variant or constant, found struct varia\n LL |         XE::XEmpty3 => ()\n    |         ^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:7:5\n+  ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n+LL |     XEmpty3 {},\n+   |     ------- `XE::XEmpty3` defined here\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n    |"}, {"sha": "3bd3f6a9644a12f02c3252564df7beb5a5fe67a2", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -27,8 +27,11 @@ error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n LL |         XEmpty1() => ()\n    |         ^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n+LL | pub struct XEmpty2;\n LL | pub struct XEmpty6();\n    | --------------------- similarly named tuple struct `XEmpty6` defined here\n    |\n@@ -70,8 +73,11 @@ error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n LL |         XEmpty1(..) => ()\n    |         ^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n+LL | pub struct XEmpty2;\n LL | pub struct XEmpty6();\n    | --------------------- similarly named tuple struct `XEmpty6` defined here\n    |"}, {"sha": "aac872ba0eccafe48bcd27fd123d479373b7ce10", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -13,8 +13,11 @@ error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::\n LL |         XE::XEmpty3() => ()\n    |         ^^^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n+  ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n+LL |     XEmpty3 {},\n+   |     ------- `XE::XEmpty3` defined here\n+LL |     XEmpty4,\n LL |     XEmpty5(),\n    |     --------- similarly named tuple variant `XEmpty5` defined here\n    |\n@@ -42,8 +45,11 @@ error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::\n LL |         XE::XEmpty3(..) => ()\n    |         ^^^^^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n+  ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n+LL |     XEmpty3 {},\n+   |     ------- `XE::XEmpty3` defined here\n+LL |     XEmpty4,\n LL |     XEmpty5(),\n    |     --------- similarly named tuple variant `XEmpty5` defined here\n    |"}, {"sha": "7b21d31635cf1239014fa4e7c0582db920306dbd", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -38,6 +38,8 @@ LL |         XE::XEmpty5 => (),\n    |\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n+LL |     XEmpty5(),\n+   |     --------- `XE::XEmpty5` defined here\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ded3173f45b2e1c380e44a751cb9a5ab47f54833", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -74,8 +74,10 @@ error[E0423]: expected value, found struct variant `xm7::V`\n LL |     check(xm7::V);\n    |           ^^^^^^\n    | \n-  ::: $DIR/auxiliary/namespace-mix.rs:7:9\n+  ::: $DIR/auxiliary/namespace-mix.rs:6:9\n    |\n+LL |         V {},\n+   |         - `xm7::V` defined here\n LL |         TV(),\n    |         ---- similarly named tuple variant `TV` defined here\n    |"}, {"sha": "6c519d73480252dda6b224ffa7e111beb5c87219", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -12,6 +12,11 @@ error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Mad\n    |\n LL |     let homura = issue_19452_aux::Homura::Madoka;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `issue_19452_aux::Homura::Madoka { /* fields */ }`\n+   | \n+  ::: $DIR/auxiliary/issue-19452-aux.rs:2:5\n+   |\n+LL |     Madoka { age: u32 }\n+   |     ------ `issue_19452_aux::Homura::Madoka` defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3dc8b90795c4d5522738c88fa891bd4a2af273a1", "filename": "src/test/ui/xcrate/xcrate-unit-struct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c0755a7dcbc087309035cb53893dd478bd3b8b1/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr?ref=6c0755a7dcbc087309035cb53893dd478bd3b8b1", "patch": "@@ -3,6 +3,11 @@ error[E0423]: expected value, found struct `xcrate_unit_struct::StructWithFields\n    |\n LL |     let _ = xcrate_unit_struct::StructWithFields;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `xcrate_unit_struct::StructWithFields { foo: val }`\n+   | \n+  ::: $DIR/auxiliary/xcrate_unit_struct.rs:20:1\n+   |\n+LL | pub struct StructWithFields {\n+   | --------------------------- `xcrate_unit_struct::StructWithFields` defined here\n \n error: aborting due to previous error\n "}]}