{"sha": "fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "node_id": "C_kwDOAAsO6NoAKGZkMjc2NmU3ZmRlNDQzZDQ2ZWIwNTFiYjVlZjI3YmJiMjllZTEwMWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-11T06:58:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-11T06:58:11Z"}, "message": "Check that the types in RPITITs are WF", "tree": {"sha": "11c89faf2afce3ba1484620f91561abb891d9d1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c89faf2afce3ba1484620f91561abb891d9d1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "html_url": "https://github.com/rust-lang/rust/commit/fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f3001eecbe4cbd091c10ffab45b4c164bb507b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f3001eecbe4cbd091c10ffab45b4c164bb507b", "html_url": "https://github.com/rust-lang/rust/commit/98f3001eecbe4cbd091c10ffab45b4c164bb507b"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "ba8e4470feca279f85b22d553993e7ec65603590", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "patch": "@@ -1,4 +1,5 @@\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n+use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -1530,6 +1531,49 @@ fn check_fn_or_method<'tcx>(\n     );\n \n     check_where_clauses(wfcx, span, def_id);\n+\n+    check_return_position_impl_trait_in_trait_bounds(\n+        tcx,\n+        wfcx,\n+        def_id,\n+        sig.output(),\n+        hir_decl.output.span(),\n+    );\n+}\n+\n+/// Basically `check_associated_type_bounds`, but separated for now and should be\n+/// deduplicated when RPITITs get lowered into real associated items.\n+fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    wfcx: &WfCheckingCtxt<'_, 'tcx>,\n+    fn_def_id: LocalDefId,\n+    fn_output: Ty<'tcx>,\n+    span: Span,\n+) {\n+    if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n+        && assoc_item.container == ty::AssocItemContainer::TraitContainer\n+    {\n+        for arg in fn_output.walk() {\n+            if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                && let ty::Projection(proj) = ty.kind()\n+                && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+                && tcx.impl_trait_in_trait_parent(proj.item_def_id) == fn_def_id.to_def_id()\n+            {\n+                let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n+                let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+                    let normalized_bound = wfcx.normalize(span, None, bound);\n+                    traits::wf::predicate_obligations(\n+                        wfcx.infcx,\n+                        wfcx.param_env,\n+                        wfcx.body_id,\n+                        normalized_bound,\n+                        bound_span,\n+                    )\n+                });\n+                wfcx.register_obligations(wf_obligations);\n+            }\n+        }\n+    }\n }\n \n const HELP_FOR_SELF_TYPE: &str = \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\"}, {"sha": "2c71583b3123685e2077f9bb583dc8546ea60c18", "filename": "src/test/ui/impl-trait/in-trait/wf-bounds.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs?ref=fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "patch": "@@ -0,0 +1,16 @@\n+// issue #101663\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Wf<T> {}\n+\n+trait Uwu {\n+    fn nya() -> impl Wf<Vec<[u8]>>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+\n+    fn nya2() -> impl Wf<[u8]>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+fn main() {}"}, {"sha": "92e36841b70c208c4387bc1365b7a2d09368a3ec", "filename": "src/test/ui/impl-trait/in-trait/wf-bounds.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd2766e7fde443d46eb051bb5ef27bbb29ee101d/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.stderr?ref=fd2766e7fde443d46eb051bb5ef27bbb29ee101d", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:9:22\n+   |\n+LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n+   |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |                ^ required by this bound in `Vec`\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:12:23\n+   |\n+LL |     fn nya2() -> impl Wf<[u8]>;\n+   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Wf`\n+  --> $DIR/wf-bounds.rs:6:10\n+   |\n+LL | trait Wf<T> {}\n+   |          ^ required by this bound in `Wf`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Wf<T: ?Sized> {}\n+   |           ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}