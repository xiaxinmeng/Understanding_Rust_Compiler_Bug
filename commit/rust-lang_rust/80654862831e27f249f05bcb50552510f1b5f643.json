{"sha": "80654862831e27f249f05bcb50552510f1b5f643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNjU0ODYyODMxZTI3ZjI0OWYwNWJjYjUwNTUyNTEwZjFiNWY2NDM=", "commit": {"author": {"name": "Piotr Jawniak", "email": "sawyer47@gmail.com", "date": "2017-03-04T20:29:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-15T14:50:44Z"}, "message": "Change how the 0 flag works in format! for floats\n\nNow it always implies right-alignment, so that padding zeroes are placed after the sign (if any) and before the digits. In other words, it always takes precedence over explicitly specified `[[fill]align]`.\n\n               :06      :<06     :>06     :^06\n    before   |-001.2| |-1.200| |-001.2| |-01.20|\n    after    |-001.2| |-001.2| |-001.2| |-001.2|", "tree": {"sha": "abeb7612df8326f2050a594c3d12e13a2afd74cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abeb7612df8326f2050a594c3d12e13a2afd74cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80654862831e27f249f05bcb50552510f1b5f643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80654862831e27f249f05bcb50552510f1b5f643", "html_url": "https://github.com/rust-lang/rust/commit/80654862831e27f249f05bcb50552510f1b5f643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80654862831e27f249f05bcb50552510f1b5f643/comments", "author": {"login": "Sawyer47", "id": 1534302, "node_id": "MDQ6VXNlcjE1MzQzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1534302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sawyer47", "html_url": "https://github.com/Sawyer47", "followers_url": "https://api.github.com/users/Sawyer47/followers", "following_url": "https://api.github.com/users/Sawyer47/following{/other_user}", "gists_url": "https://api.github.com/users/Sawyer47/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sawyer47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sawyer47/subscriptions", "organizations_url": "https://api.github.com/users/Sawyer47/orgs", "repos_url": "https://api.github.com/users/Sawyer47/repos", "events_url": "https://api.github.com/users/Sawyer47/events{/privacy}", "received_events_url": "https://api.github.com/users/Sawyer47/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff63866edb511a73eed657a8a4f5c81f1ee5a9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff63866edb511a73eed657a8a4f5c81f1ee5a9bb", "html_url": "https://github.com/rust-lang/rust/commit/ff63866edb511a73eed657a8a4f5c81f1ee5a9bb"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "0bfab92fa5d5180270491af1fb3e8320b9587da0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80654862831e27f249f05bcb50552510f1b5f643/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80654862831e27f249f05bcb50552510f1b5f643/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=80654862831e27f249f05bcb50552510f1b5f643", "patch": "@@ -1154,8 +1154,9 @@ impl<'a> Formatter<'a> {\n             // for the sign-aware zero padding, we render the sign first and\n             // behave as if we had no sign from the beginning.\n             let mut formatted = formatted.clone();\n-            let mut align = self.align;\n             let old_fill = self.fill;\n+            let old_align = self.align;\n+            let mut align = old_align;\n             if self.sign_aware_zero_pad() {\n                 // a sign always goes first\n                 let sign = unsafe { str::from_utf8_unchecked(formatted.sign) };\n@@ -1166,6 +1167,7 @@ impl<'a> Formatter<'a> {\n                 width = if width < sign.len() { 0 } else { width - sign.len() };\n                 align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n+                self.align = rt::v1::Alignment::Right;\n             }\n \n             // remaining parts go through the ordinary padding process.\n@@ -1178,6 +1180,7 @@ impl<'a> Formatter<'a> {\n                 })\n             };\n             self.fill = old_fill;\n+            self.align = old_align;\n             ret\n         } else {\n             // this is the common case and we take a shortcut"}, {"sha": "cef2f879f9cd74bc69c1209713fdda0ab1a4f48a", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80654862831e27f249f05bcb50552510f1b5f643/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80654862831e27f249f05bcb50552510f1b5f643/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=80654862831e27f249f05bcb50552510f1b5f643", "patch": "@@ -176,6 +176,18 @@ pub fn main() {\n     t!(format!(\"{:<#05x}\", 1), \"0x001\");\n     t!(format!(\"{:>#05x}\", 1), \"0x001\");\n     t!(format!(\"{:^#05x}\", 1), \"0x001\");\n+    t!(format!(\"{:05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:<05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:>05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:^05}\", 1.2), \"001.2\");\n+    t!(format!(\"{:05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:<05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:>05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:^05}\", -1.2), \"-01.2\");\n+    t!(format!(\"{:+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:<+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:>+05}\", 1.2), \"+01.2\");\n+    t!(format!(\"{:^+05}\", 1.2), \"+01.2\");\n \n     // Ergonomic format_args!\n     t!(format!(\"{0:x} {0:X}\", 15), \"f F\");"}]}