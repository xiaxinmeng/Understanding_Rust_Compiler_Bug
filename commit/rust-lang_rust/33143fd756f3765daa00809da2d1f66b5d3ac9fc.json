{"sha": "33143fd756f3765daa00809da2d1f66b5d3ac9fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMTQzZmQ3NTZmMzc2NWRhYTAwODA5ZGEyZDFmNjZiNWQzYWM5ZmM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-25T22:28:31Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-22T00:28:49Z"}, "message": "Be explicit about whether `GenericArgCountMismatch` arose from a fatal error", "tree": {"sha": "41bae057f318f7cf6bd8255dcc7769487f045be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bae057f318f7cf6bd8255dcc7769487f045be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33143fd756f3765daa00809da2d1f66b5d3ac9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33143fd756f3765daa00809da2d1f66b5d3ac9fc", "html_url": "https://github.com/rust-lang/rust/commit/33143fd756f3765daa00809da2d1f66b5d3ac9fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33143fd756f3765daa00809da2d1f66b5d3ac9fc/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104131c9d487c943d962f4d88490aa7bcf2fa2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/104131c9d487c943d962f4d88490aa7bcf2fa2de", "html_url": "https://github.com/rust-lang/rust/commit/104131c9d487c943d962f4d88490aa7bcf2fa2de"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "42613532655ef5897c52f4b29b439e870a205676", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33143fd756f3765daa00809da2d1f66b5d3ac9fc/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33143fd756f3765daa00809da2d1f66b5d3ac9fc/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=33143fd756f3765daa00809da2d1f66b5d3ac9fc", "patch": "@@ -134,7 +134,8 @@ enum GenericArgPosition {\n \n /// A marker denoting that the generic arguments that were\n /// provided did not match the respective generic parameters.\n-pub struct GenericArgCountMismatch;\n+/// The field indicates whether a fatal error was reported (`Some`), or just a lint (`None`).\n+pub struct GenericArgCountMismatch(pub Option<ErrorReported>);\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub fn ast_region_to_region(\n@@ -320,18 +321,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut explicit_lifetimes = Ok(());\n         if !infer_lifetimes {\n             if let Some(span_late) = def.has_late_bound_regions {\n-                explicit_lifetimes = Err(GenericArgCountMismatch);\n                 let msg = \"cannot specify lifetime arguments explicitly \\\n                            if late bound lifetime parameters are present\";\n                 let note = \"the late bound lifetime parameter is introduced here\";\n                 let span = args.args[0].span();\n                 if position == GenericArgPosition::Value\n                     && arg_counts.lifetimes != param_counts.lifetimes\n                 {\n+                    explicit_lifetimes = Err(GenericArgCountMismatch(Some(ErrorReported)));\n                     let mut err = tcx.sess.struct_span_err(span, msg);\n                     err.span_note(span_late, note);\n                     err.emit();\n                 } else {\n+                    explicit_lifetimes = Err(GenericArgCountMismatch(None));\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n                     tcx.struct_span_lint_hir(\n@@ -405,7 +407,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 err.emit();\n \n-                Err(GenericArgCountMismatch)\n+                Err(GenericArgCountMismatch(Some(ErrorReported)))\n             };\n \n         let mut arg_count_correct = explicit_lifetimes;"}, {"sha": "daedeafbcc325dd768fa830ae2331840d5bc65db", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33143fd756f3765daa00809da2d1f66b5d3ac9fc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33143fd756f3765daa00809da2d1f66b5d3ac9fc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=33143fd756f3765daa00809da2d1f66b5d3ac9fc", "patch": "@@ -5452,11 +5452,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // parameter internally, but we don't allow users to specify the\n             // parameter's value explicitly, so we have to do some error-\n             // checking here.\n-            let suppress_errors = AstConv::check_generic_arg_count_for_call(\n-                tcx, span, &generics, &seg, false, // `is_method_call`\n-            )\n-            .is_err();\n-            if suppress_errors {\n+            if let Err(GenericArgCountMismatch(Some(ErrorReported))) =\n+                AstConv::check_generic_arg_count_for_call(\n+                    tcx, span, &generics, &seg, false, // `is_method_call`\n+                )\n+            {\n                 infer_args_for_err.insert(index);\n                 self.set_tainted_by_errors(); // See issue #53251.\n             }\n@@ -5521,7 +5521,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &[][..],\n                 has_self,\n                 self_ty,\n-                if infer_args_for_err.is_empty() { Ok(()) } else { Err(GenericArgCountMismatch) },\n+                if infer_args_for_err.is_empty() {\n+                    Ok(())\n+                } else {\n+                    Err(GenericArgCountMismatch(Some(ErrorReported)))\n+                },\n                 // Provide the generic args, and whether types should be inferred.\n                 |def_id| {\n                     if let Some(&PathSeg(_, index)) ="}]}