{"sha": "8cd171cd949f6c82a9ce50645f6ca68b1249c4c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDE3MWNkOTQ5ZjZjODJhOWNlNTA2NDVmNmNhNjhiMTI0OWM0Yzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-21T21:26:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-21T21:26:00Z"}, "message": "Merge #9978\n\n9978: fix: Expand attributes recursively in expand_macro r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b6352db7556a0e838bb917a82ff784a581ad680d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6352db7556a0e838bb917a82ff784a581ad680d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhIW9oCRBK7hj4Ov3rIwAAueYIAIAKmtJN8ERQ2Cj5gHZd7mvJ\neMvnrjeXIFY5RKg9vD9ZpQI5hftdQVr7ErbmNkpkKDujJaQfk2rgjJOp+UwlDKXr\nNgDXL/hOfyTt3Fz7AKJ2ZfYaPsHL8LJyH8tgdiqU431XTmm77c4HQNkEYKUTnEki\nc3ZWNEUyivSrEIFx0qDfEt2ZAwEi65aE9aAfR576B0VlZ2rzsseesx8ecIowebxu\nvGZNpNVOJyiY9e1uopnmwmkV9Ju5DJPnJ2U5oWyek7qYSvDrIM2yh5TtwIe2/hSn\nm3rG7++ODRAjtGiiQmTCCdLzLWWSsP8zZQwQqSNMn2R/J2MFDa1BjXZ+szPISaM=\n=BvZt\n-----END PGP SIGNATURE-----\n", "payload": "tree b6352db7556a0e838bb917a82ff784a581ad680d\nparent 62837d7b1be615a7a58f679f4b8ed1c5039c6961\nparent 2f179adc419c0a3ad4137c43c97546a21bd72f4d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629581160 +0000\ncommitter GitHub <noreply@github.com> 1629581160 +0000\n\nMerge #9978\n\n9978: fix: Expand attributes recursively in expand_macro r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8", "html_url": "https://github.com/rust-lang/rust/commit/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62837d7b1be615a7a58f679f4b8ed1c5039c6961", "url": "https://api.github.com/repos/rust-lang/rust/commits/62837d7b1be615a7a58f679f4b8ed1c5039c6961", "html_url": "https://github.com/rust-lang/rust/commit/62837d7b1be615a7a58f679f4b8ed1c5039c6961"}, {"sha": "2f179adc419c0a3ad4137c43c97546a21bd72f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f179adc419c0a3ad4137c43c97546a21bd72f4d", "html_url": "https://github.com/rust-lang/rust/commit/2f179adc419c0a3ad4137c43c97546a21bd72f4d"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "e790217993582aa3299a3cba92077e184e9bf25c", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=8cd171cd949f6c82a9ce50645f6ca68b1249c4c8", "patch": "@@ -278,6 +278,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_macro_call(macro_call)\n     }\n \n+    pub fn resolve_attr_macro_call(&self, item: &ast::Item) -> Option<MacroDef> {\n+        self.imp.resolve_attr_macro_call(item)\n+    }\n+\n     pub fn resolve_path(&self, path: &ast::Path) -> Option<PathResolution> {\n         self.imp.resolve_path(path)\n     }\n@@ -634,6 +638,12 @@ impl<'db> SemanticsImpl<'db> {\n         sa.resolve_macro_call(self.db, macro_call)\n     }\n \n+    fn resolve_attr_macro_call(&self, item: &ast::Item) -> Option<MacroDef> {\n+        let item_in_file = self.find_file(item.syntax().clone()).with_value(item.clone());\n+        let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(item_in_file))?;\n+        Some(MacroDef { id: self.db.lookup_intern_macro(macro_call_id).def })\n+    }\n+\n     fn resolve_path(&self, path: &ast::Path) -> Option<PathResolution> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }"}, {"sha": "814d28e7b6cad1f3dd25a055afa343631494859a", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd171cd949f6c82a9ce50645f6ca68b1249c4c8/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=8cd171cd949f6c82a9ce50645f6ca68b1249c4c8", "patch": "@@ -34,11 +34,9 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     let mut name = None;\n     for node in tok.ancestors() {\n         if let Some(item) = ast::Item::cast(node.clone()) {\n-            expanded = sema.expand_attr_macro(&item);\n-            if expanded.is_some() {\n-                // FIXME: add the macro name\n-                // FIXME: make this recursive too\n-                name = Some(\"?\".to_string());\n+            if let Some(def) = sema.resolve_attr_macro_call(&item) {\n+                name = def.name(db).map(|name| name.to_string());\n+                expanded = expand_attr_macro_recur(&sema, &item);\n                 break;\n             }\n         }\n@@ -54,20 +52,33 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     // macro expansion may lose all white space information\n     // But we hope someday we can use ra_fmt for that\n     let expansion = insert_whitespaces(expanded?);\n-    Some(ExpandedMacro { name: name?, expansion })\n+    Some(ExpandedMacro { name: name.unwrap_or_else(|| \"???\".to_owned()), expansion })\n }\n \n fn expand_macro_recur(\n     sema: &Semantics<RootDatabase>,\n     macro_call: &ast::MacroCall,\n ) -> Option<SyntaxNode> {\n     let expanded = sema.expand(macro_call)?.clone_for_update();\n+    expand(sema, expanded, ast::MacroCall::cast, expand_macro_recur)\n+}\n+\n+fn expand_attr_macro_recur(sema: &Semantics<RootDatabase>, item: &ast::Item) -> Option<SyntaxNode> {\n+    let expanded = sema.expand_attr_macro(item)?.clone_for_update();\n+    expand(sema, expanded, ast::Item::cast, expand_attr_macro_recur)\n+}\n \n-    let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n+fn expand<T: AstNode>(\n+    sema: &Semantics<RootDatabase>,\n+    expanded: SyntaxNode,\n+    f: impl FnMut(SyntaxNode) -> Option<T>,\n+    exp: impl Fn(&Semantics<RootDatabase>, &T) -> Option<SyntaxNode>,\n+) -> Option<SyntaxNode> {\n+    let children = expanded.descendants().filter_map(f);\n     let mut replacements = Vec::new();\n \n     for child in children {\n-        if let Some(new_node) = expand_macro_recur(sema, &child) {\n+        if let Some(new_node) = exp(sema, &child) {\n             // check if the whole original syntax is replaced\n             if expanded == *child.syntax() {\n                 return Some(new_node);"}]}