{"sha": "760c13f48da6d674dac5a7bb2792b699b52b619c", "node_id": "C_kwDOAAsO6NoAKDc2MGMxM2Y0OGRhNmQ2NzRkYWM1YTdiYjI3OTJiNjk5YjUyYjYxOWM", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-10-22T13:13:01Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-01-01T23:57:35Z"}, "message": "Rewrite instrument-coverage documentation to use LLVM tools directly\n\nllvm-tools-preview is still experimental, so document it as such, and\ndon't use it in the examples.", "tree": {"sha": "fc0fde0242bd9f8b0f5b2529cee06dc2e8f76dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc0fde0242bd9f8b0f5b2529cee06dc2e8f76dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760c13f48da6d674dac5a7bb2792b699b52b619c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760c13f48da6d674dac5a7bb2792b699b52b619c", "html_url": "https://github.com/rust-lang/rust/commit/760c13f48da6d674dac5a7bb2792b699b52b619c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760c13f48da6d674dac5a7bb2792b699b52b619c/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34106f89353575bd341e27b95e4e759866cd7939", "url": "https://api.github.com/repos/rust-lang/rust/commits/34106f89353575bd341e27b95e4e759866cd7939", "html_url": "https://github.com/rust-lang/rust/commit/34106f89353575bd341e27b95e4e759866cd7939"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "53ab6e1db3e1fa7b1707627634857b092d59340f", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/760c13f48da6d674dac5a7bb2792b699b52b619c/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/760c13f48da6d674dac5a7bb2792b699b52b619c/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=760c13f48da6d674dac5a7bb2792b699b52b619c", "patch": "@@ -119,29 +119,21 @@ If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing\n \n LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher. (`llvm-cov --version` typically shows the tool's LLVM version number.):\n \n--   The LLVM tools may be installed (or installable) directly to your OS (such as via `apt-get`, for Linux).\n+-   You can install the LLVM tools from your operating system distribution, or from your distribution of LLVM.\n -   If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`.\n--   You can install compatible versions of these tools via `rustup`.\n+-   You can install compatible versions of these tools via the `rustup` component `llvm-tools-preview`, though this is still considered experimental. In this case, you may also find `cargo-binutils` useful as a wrapper around these tools.\n \n-The `rustup` option is guaranteed to install a compatible version of the LLVM tools, but they can be hard to find. We recommend [`cargo-binutils`], which installs Rust-specific wrappers around these and other LLVM tools, so you can invoke them via `cargo` commands!\n-\n-```shell\n-$ rustup component add llvm-tools-preview\n-$ cargo install cargo-binutils\n-$ cargo profdata -- --help  # note the additional \"--\" preceding the tool-specific arguments\n-```\n-\n-[`cargo-binutils`]: https://crates.io/crates/cargo-binutils\n+The examples in this document show how to use the llvm tools directly.\n \n ## Creating coverage reports\n \n-Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (or `cargo profdata -- merge`), which can combine multiple raw profiles and index them at the same time:\n+Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`], which can combine multiple raw profiles and index them at the same time:\n \n ```shell\n $ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata\n ```\n \n-Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`] (or `cargo cov -- report`), for a coverage summaries; and [`llvm-cov show`] (or `cargo cov -- show`), to see detailed coverage of lines and regions (character ranges) overlaid on the original source code.\n+Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`], for a coverage summaries; and [`llvm-cov show`], to see detailed coverage of lines and regions (character ranges) overlaid on the original source code.\n \n These commands have several display and filtering options. For example:\n \n@@ -218,19 +210,18 @@ test result: ok. 31 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n You should have one or more `.profraw` files now, one for each test binary. Run the `profdata` tool to merge them:\n \n ```shell\n-$ cargo profdata -- merge \\\n-    -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n Then run the `cov` tool, with the `profdata` file and all test binaries:\n \n ```shell\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n     --object target/debug/deps/lib-30768f9c53506dc5 \\\n     --object target/debug/deps/json5format-fececd4653271682\n-$ cargo cov -- show \\\n+$ llvm-cov show \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n     --object target/debug/deps/lib-30768f9c53506dc5 \\\n@@ -246,7 +237,7 @@ $ cargo cov -- show \\\n For `bash` users, one suggested way to automatically complete the `cov` command with the list of binaries is with a command like:\n \n ```bash\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     $( \\\n       for file in \\\n         $( \\\n@@ -275,22 +266,21 @@ The previous examples run `cargo test` with `--tests`, which excludes doc tests.\n \n To include doc tests in the coverage results, drop the `--tests` flag, and apply the\n `-C instrument-coverage` flag, and some doc-test-specific options in the\n-`RUSTDOCFLAGS` environment variable. (The `cargo profdata` command does not change.)\n+`RUSTDOCFLAGS` environment variable. (The `llvm-profdata` command does not change.)\n \n ```bash\n $ RUSTFLAGS=\"-C instrument-coverage\" \\\n   RUSTDOCFLAGS=\"-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n   LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test\n-$ cargo profdata -- merge \\\n-    -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n The `-Z unstable-options --persist-doctests` flag is required, to save the test binaries\n (with their coverage maps) for `llvm-cov`.\n \n ```bash\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     $( \\\n       for file in \\\n         $( \\\n@@ -308,8 +298,8 @@ $ cargo cov -- report \\\n   --instr-profile=json5format.profdata --summary-only # and/or other options\n ```\n \n-> **Note**: The differences in this `cargo cov` command, compared with the version without\n-> doc tests, include:\n+> **Note**: The differences in this `llvm-cov` invocation, compared with the\n+> version without doc tests, include:\n \n -   The `cargo test ... --no-run` command is updated with the same environment variables\n     and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`"}]}