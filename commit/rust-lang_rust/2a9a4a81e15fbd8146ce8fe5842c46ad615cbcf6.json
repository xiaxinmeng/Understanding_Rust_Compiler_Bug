{"sha": "2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOWE0YTgxZTE1ZmJkODE0NmNlOGZlNTg0MmM0NmFkNjE1Y2JjZjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-12T21:48:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-12T21:48:01Z"}, "message": "Don't create subprocesses for the `rust` command\n\nInstead link against the built libraries and directly invoke those.", "tree": {"sha": "51ce75d9fba579db70eafced3b0aa8e4a33a4ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ce75d9fba579db70eafced3b0aa8e4a33a4ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "html_url": "https://github.com/rust-lang/rust/commit/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc94b87686ffd78a71442304158eb91d43885b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc94b87686ffd78a71442304158eb91d43885b0", "html_url": "https://github.com/rust-lang/rust/commit/7dc94b87686ffd78a71442304158eb91d43885b0"}], "stats": {"total": 105, "additions": 47, "deletions": 58}, "files": [{"sha": "70dc9e895c01e5e246825d3c7bb24dece640217a", "filename": "src/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[no_core];\n-extern mod core(vers = \"0.7-pre\");\n-\n #[cfg(rustpkg)]\n extern mod this(name = \"rustpkg\", vers = \"0.7-pre\");\n "}, {"sha": "92510be56c3a8b04213c7f198bc17af02d756714", "filename": "src/librust/rust.rc", "status": "modified", "additions": 45, "deletions": 54, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "patch": "@@ -20,6 +20,11 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+extern mod rustpkg(vers = \"0.7-pre\");\n+extern mod rustdoc(vers = \"0.7-pre\");\n+extern mod rusti(vers = \"0.7-pre\");\n+extern mod rustc(vers = \"0.7-pre\");\n+\n use core::run;\n \n enum ValidUsage {\n@@ -36,13 +41,13 @@ impl ValidUsage {\n }\n \n enum Action<'self> {\n-    Exec(&'self str),\n-    Call(&'self fn(args: &[~str]) -> ValidUsage)\n+    Call(&'self fn(args: &[~str]) -> ValidUsage),\n+    CallMain(&'static str, &'self fn()),\n }\n \n enum UsageSource<'self> {\n-    UsgExec(&'self str),\n-    UsgStr(&'self str)\n+    UsgStr(&'self str),\n+    UsgCall(&'self fn()),\n }\n \n struct Command<'self> {\n@@ -55,9 +60,9 @@ struct Command<'self> {\n static commands: &'static [Command<'static>] = &[\n     Command{\n         cmd: \"build\",\n-        action: Exec(\"rustc\"),\n+        action: CallMain(\"rustc\", rustc::main),\n         usage_line: \"compile rust source files\",\n-        usage_full: UsgExec(\"rustc --help\")\n+        usage_full: UsgCall(rustc_help),\n     },\n     Command{\n         cmd: \"run\",\n@@ -81,21 +86,21 @@ static commands: &'static [Command<'static>] = &[\n     },\n     Command{\n         cmd: \"doc\",\n-        action: Exec(\"rustdoc\"),\n+        action: CallMain(\"rustdoc\", rustdoc::main),\n         usage_line: \"generate documentation from doc comments\",\n-        usage_full: UsgExec(\"rustdoc --help\")\n+        usage_full: UsgCall(rustdoc::config::usage),\n     },\n     Command{\n         cmd: \"pkg\",\n-        action: Exec(\"rustpkg\"),\n+        action: CallMain(\"rustpkg\", rustpkg::main),\n         usage_line: \"download, build, install rust packages\",\n-        usage_full: UsgExec(\"rustpkg --help\")\n+        usage_full: UsgCall(rustpkg::usage::general),\n     },\n     Command{\n         cmd: \"sketch\",\n-        action: Exec(\"rusti\"),\n+        action: CallMain(\"rusti\", rusti::main),\n         usage_line: \"run a rust interpreter\",\n-        usage_full: UsgStr(\"\\nUsage:\\trusti\")\n+        usage_full: UsgStr(\"\\nUsage:\\trusti\"),\n     },\n     Command{\n         cmd: \"help\",\n@@ -109,6 +114,10 @@ static commands: &'static [Command<'static>] = &[\n     }\n ];\n \n+fn rustc_help() {\n+    rustc::usage(copy os::args()[0])\n+}\n+\n fn find_cmd(command_string: &str) -> Option<Command> {\n     do commands.find |command| {\n         command.cmd == command_string\n@@ -120,20 +129,14 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n         match find_cmd(command_string) {\n             Some(command) => {\n                 match command.action {\n-                    Exec(s) => io::println(fmt!(\n+                    CallMain(prog, _) => io::println(fmt!(\n                         \"The %s command is an alias for the %s program.\",\n-                        command.cmd, s)),\n+                        command.cmd, prog)),\n                     _       => ()\n                 }\n                 match command.usage_full {\n-                    UsgStr(msg)          => io::println(fmt!(\"%s\\n\", msg)),\n-                    UsgExec(commandline) => {\n-                        let mut words = ~[];\n-                        for str::each_word(commandline) |word| { words.push(word.to_owned()) }\n-                        let words = words;\n-                        let (prog, args) = (words.head(), words.tail());\n-                        run::run_program(*prog, args);\n-                    }\n+                    UsgStr(msg) => io::println(fmt!(\"%s\\n\", msg)),\n+                    UsgCall(f)  => f(),\n                 }\n                 Valid\n             },\n@@ -151,50 +154,40 @@ fn cmd_test(args: &[~str]) -> ValidUsage {\n     match args {\n         [filename] => {\n             let test_exec = Path(filename).filestem().unwrap() + \"test~\";\n-            if run::run_program(\"rustc\", [\n-                ~\"--test\",\n-                filename.to_owned(),\n-                ~\"-o\",\n-                test_exec.to_owned()\n-            ]) == 0 {\n-                run::run_program(~\"./\" + test_exec, []);\n-            }\n+            invoke(\"rustc\", &[~\"--test\", filename.to_owned(),\n+                              ~\"-o\", test_exec.to_owned()], rustc::main);\n+            run::run_program(~\"./\" + test_exec, []);\n             Valid\n         }\n-        _          => Invalid\n+        _ => Invalid\n     }\n }\n \n fn cmd_run(args: &[~str]) -> ValidUsage {\n     match args {\n         [filename, ..prog_args] => {\n             let exec = Path(filename).filestem().unwrap() + \"~\";\n-            if run::run_program(\"rustc\", [\n-                filename.to_owned(),\n-                ~\"-o\",\n-                exec.to_owned()\n-            ]) == 0 {\n-                run::run_program(~\"./\"+exec, prog_args);\n-            }\n+            invoke(\"rustc\", &[filename.to_owned(), ~\"-o\", exec.to_owned()],\n+                   rustc::main);\n+            run::run_program(~\"./\"+exec, prog_args);\n             Valid\n         }\n-        _          => Invalid\n+        _ => Invalid\n     }\n }\n \n+fn invoke(prog: &str, args: &[~str], f: &fn()) {\n+    let mut osargs = ~[prog.to_owned()];\n+    osargs.push_all_move(args.to_owned());\n+    os::set_args(osargs);\n+    f();\n+}\n+\n fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n     match command.action {\n         Call(f) => f(args),\n-        Exec(commandline) => {\n-            let mut words = ~[];\n-            for str::each_word(commandline) |word| { words.push(word.to_owned()) }\n-            let words = words;\n-            let (prog, prog_args) = (words.head(), words.tail());\n-            let exitstatus = run::run_program(\n-                *prog,\n-                vec::append(vec::to_owned(prog_args), args)\n-            );\n-            os::set_exit_status(exitstatus);\n+        CallMain(prog, f) => {\n+            invoke(prog, args, f);\n             Valid\n         }\n     }\n@@ -232,11 +225,9 @@ pub fn main() {\n     let args = os_args.tail();\n \n     if !args.is_empty() {\n-        for commands.each |command| {\n-            if command.cmd == *args.head() {\n-                let result = do_command(command, args.tail());\n-                if result.is_valid() { return; }\n-            }\n+        for find_cmd(*args.head()).each |command| {\n+            let result = do_command(command, args.tail());\n+            if result.is_valid() { return; }\n         }\n     }\n "}, {"sha": "502f34a4d9e4701b0838fa13c98df4c67bc4acc1", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=2a9a4a81e15fbd8146ce8fe5842c46ad615cbcf6", "patch": "@@ -42,12 +42,13 @@ use context::Ctx;\n \n mod conditions;\n mod context;\n-mod usage;\n mod path_util;\n mod tests;\n mod util;\n mod workspace;\n \n+pub mod usage;\n+\n /// A PkgScript represents user-supplied custom logic for\n /// special build hooks. This only exists for packages with\n /// an explicit package script."}]}