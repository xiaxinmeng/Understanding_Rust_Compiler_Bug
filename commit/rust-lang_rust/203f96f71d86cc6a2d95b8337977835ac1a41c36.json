{"sha": "203f96f71d86cc6a2d95b8337977835ac1a41c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwM2Y5NmY3MWQ4NmNjNmEyZDk1YjgzMzc5Nzc4MzVhYzFhNDFjMzY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-12T08:16:54Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-25T17:47:03Z"}, "message": "debuginfo: Implemented support for destructured locals.\n\nConflicts:\n\tsrc/librustc/middle/trans/debuginfo.rs\n\tsrc/test/debug-info/destructured-local.rs", "tree": {"sha": "fc4d053407bd7e69433ca6b6967c50b94bc304f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc4d053407bd7e69433ca6b6967c50b94bc304f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203f96f71d86cc6a2d95b8337977835ac1a41c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203f96f71d86cc6a2d95b8337977835ac1a41c36", "html_url": "https://github.com/rust-lang/rust/commit/203f96f71d86cc6a2d95b8337977835ac1a41c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203f96f71d86cc6a2d95b8337977835ac1a41c36/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf30729f054c8435de08588b67444e46a526baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf30729f054c8435de08588b67444e46a526baa", "html_url": "https://github.com/rust-lang/rust/commit/4cf30729f054c8435de08588b67444e46a526baa"}], "stats": {"total": 297, "additions": 236, "deletions": 61}, "files": [{"sha": "574f7aad119cbc3923795dd6ff3294a60c81d59f", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 54, "deletions": 56, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/203f96f71d86cc6a2d95b8337977835ac1a41c36/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203f96f71d86cc6a2d95b8337977835ac1a41c36/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=203f96f71d86cc6a2d95b8337977835ac1a41c36", "patch": "@@ -60,6 +60,7 @@ use middle::trans::type_::Type;\n use middle::trans::adt;\n use middle::trans;\n use middle::ty;\n+use middle::pat_util;\n use util::ppaux::ty_to_str;\n \n use std::hashmap::HashMap;\n@@ -71,15 +72,15 @@ use syntax::{ast, codemap, ast_util, ast_map};\n \n static DW_LANG_RUST: int = 0x9000;\n \n-static DW_TAG_auto_variable: int = 0x100;\n-static DW_TAG_arg_variable: int = 0x101;\n+static DW_TAG_auto_variable: c_uint = 0x100;\n+static DW_TAG_arg_variable: c_uint = 0x101;\n \n-static DW_ATE_boolean: int = 0x02;\n-static DW_ATE_float: int = 0x04;\n-static DW_ATE_signed: int = 0x05;\n-static DW_ATE_signed_char: int = 0x06;\n-static DW_ATE_unsigned: int = 0x07;\n-static DW_ATE_unsigned_char: int = 0x08;\n+static DW_ATE_boolean: c_uint = 0x02;\n+static DW_ATE_float: c_uint = 0x04;\n+static DW_ATE_signed: c_uint = 0x05;\n+static DW_ATE_signed_char: c_uint = 0x06;\n+static DW_ATE_unsigned: c_uint = 0x07;\n+static DW_ATE_unsigned_char: c_uint = 0x08;\n \n \n \n@@ -132,65 +133,62 @@ pub fn finalize(cx: @mut CrateContext) {\n /// Creates debug information for the given local variable.\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n-/// The return value should be ignored if called from outside of the debuginfo module.\n-pub fn create_local_var_metadata(bcx: @mut Block, local: @ast::Local) -> DIVariable {\n+pub fn create_local_var_metadata(bcx: @mut Block, local: &ast::Local) {\n     let cx = bcx.ccx();\n-\n-    let ident = match local.pat.node {\n-      ast::pat_ident(_, ref pth, _) => ast_util::path_to_ident(pth),\n-      // FIXME this should be handled (#2533)\n-      _ => {\n-        bcx.sess().span_note(local.span, \"debuginfo for pattern bindings NYI\");\n-        return ptr::null();\n-      }\n-    };\n-\n-    let name: &str = cx.sess.str_of(ident);\n-    debug!(\"create_local_var_metadata: %s\", name);\n-\n-    let loc = span_start(cx, local.span);\n-    let ty = node_id_type(bcx, local.id);\n-    let type_metadata = type_metadata(cx, ty, local.ty.span);\n-    let file_metadata = file_metadata(cx, loc.file.name);\n+    let def_map = cx.tcx.def_map;\n+    let pattern = local.node.pat;\n \n     let context = match bcx.parent {\n         None => create_function_metadata(bcx.fcx),\n         Some(_) => lexical_block_metadata(bcx)\n     };\n \n-    let var_metadata = do name.as_c_str |name| {\n+    do pat_util::pat_bindings(def_map, pattern) |_, node_id, span, path_ref| {\n+\n+        let ident = ast_util::path_to_ident(path_ref);\n+        let name: &str = cx.sess.str_of(ident);\n+        debug!(\"create_local_var_metadata: %s\", name);\n+        let loc = span_start(cx, span);\n+        let ty = node_id_type(bcx, node_id);\n+        let type_metadata = type_metadata(cx, ty, span);\n+        let file_metadata = file_metadata(cx, loc.file.name);\n+\n+        let var_metadata = do as_c_str(name) |name| {\n+            unsafe {\n+                llvm::LLVMDIBuilderCreateLocalVariable(\n+                    DIB(cx),\n+                    DW_TAG_auto_variable,\n+                    context,\n+                    name,\n+                    file_metadata,\n+                    loc.line as c_uint,\n+                    type_metadata,\n+                    false,\n+                    0,\n+                    0)\n+            }\n+        };\n+\n+        let llptr = match bcx.fcx.lllocals.find_copy(&node_id) {\n+            Some(v) => v,\n+            None => {\n+                bcx.tcx().sess.span_bug(\n+                    local.span,\n+                    fmt!(\"No entry in lllocals table for %?\", local.node.id));\n+            }\n+        };\n+\n+        set_debug_location(cx, lexical_block_metadata(bcx), loc.line, loc.col.to_uint());\n         unsafe {\n-            llvm::LLVMDIBuilderCreateLocalVariable(\n+            let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n                 DIB(cx),\n-                DW_TAG_auto_variable as u32,\n-                context,\n-                name,\n-                file_metadata,\n-                loc.line as c_uint,\n-                type_metadata,\n-                false,\n-                0,\n-                0)\n-        }\n-    };\n+                llptr,\n+                var_metadata,\n+                bcx.llbb);\n \n-    // FIXME(#6814) Should use `pat_util::pat_bindings` for pats like (a, b) etc\n-    let llptr = match bcx.fcx.lllocals.find_copy(&local.pat.id) {\n-        Some(v) => v,\n-        None => {\n-            bcx.tcx().sess.span_bug(\n-                local.span,\n-                fmt!(\"No entry in lllocals table for %?\", local.id));\n+            llvm::LLVMSetInstDebugLocation(trans::build::B(bcx), instr);\n         }\n-    };\n-\n-    set_debug_location(cx, lexical_block_metadata(bcx), loc.line, loc.col.to_uint());\n-    unsafe {\n-        let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(DIB(cx), llptr, var_metadata, bcx.llbb);\n-        llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n     }\n-\n-    return var_metadata;\n }\n \n /// Creates debug information for the given function argument.\n@@ -527,7 +525,7 @@ fn basic_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n                 name,\n                 bytes_to_bits(size),\n                 bytes_to_bits(align),\n-                encoding as c_uint)\n+                encoding)\n         }\n     };\n "}, {"sha": "6d85b99a79d6c37f526c273b18ea8f64dcf90c24", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 182, "deletions": 5, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/203f96f71d86cc6a2d95b8337977835ac1a41c36/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203f96f71d86cc6a2d95b8337977835ac1a41c36/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=203f96f71d86cc6a2d95b8337977835ac1a41c36", "patch": "@@ -8,21 +8,198 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run\n // debugger:finish\n \n // debugger:print a\n-// check:$1 = 9898\n-\n+// check:$1 = 1\n // debugger:print b\n // check:$2 = false\n \n+// debugger:print c\n+// check:$3 = 2\n+// debugger:print d\n+// check:$4 = 3\n+// debugger:print e\n+// check:$5 = 4\n+\n+// debugger:print f\n+// check:$6 = 5\n+// debugger:print g\n+// check:$7 = {6, 7}\n+\n+// debugger:print h\n+// check:$8 = 8\n+// debugger:print i\n+// check:$9 = {a = 9, b = 10}\n+// debugger:print j\n+// check:$10 = 11\n+\n+// debugger:print k\n+// check:$11 = 12\n+// debugger:print l\n+// check:$12 = 13\n+\n+// debugger:print m\n+// check:$13 = 14\n+// debugger:print n\n+// check:$14 = 16\n+\n+// debugger:print o\n+// check:$15 = 18\n+\n+// debugger:print p\n+// check:$16 = 19\n+// debugger:print q\n+// check:$17 = 20\n+// debugger:print r\n+// check:$18 = {a = 21, b = 22}\n+\n+// debugger:print s\n+// check:$19 = 24\n+// debugger:print t\n+// check:$20 = 23\n+\n+// debugger:print u\n+// check:$21 = 25\n+// debugger:print v\n+// check:$22 = 26\n+// debugger:print w\n+// check:$23 = 27\n+// debugger:print x\n+// check:$24 = 28\n+// debugger:print y\n+// check:$25 = 29\n+// debugger:print z\n+// check:$26 = 30\n+// debugger:print ae\n+// check:$27 = 31\n+// debugger:print oe\n+// check:$28 = 32\n+// debugger:print ue\n+// check:$29 = 33\n+\n+// debugger:print aa\n+// check:$30 = {34, 35}\n+\n+// debugger:print bb\n+// check:$31 = {36, 37}\n+\n+// debugger:print cc\n+// check:$32 = 38\n+\n+// debugger:print dd\n+// check:$33 = {40, 41, 42}\n+\n+// debugger:print *ee\n+// check:$34 = {43, 44, 45}\n+\n+// debugger:print *ff\n+// check:$35 = 46\n+\n+// debugger:print gg\n+// check:$36 = {47, 48}\n+\n+// debugger:print *hh\n+// check:$37 = 50\n+\n+// debugger:print ii\n+// check:$38 = 51\n+\n+// debugger:print *jj\n+// check:$39 = 52\n+\n+// debugger:print kk\n+// check:$40 = 53\n+\n+// debugger:print ll\n+// check:$41 = 54\n+\n+// debugger:print mm\n+// check:$42 = 55\n+\n+// debugger:print *nn\n+// check:$43 = 56\n+\n+\n+struct Struct {\n+\ta: i64,\n+\tb: i32\n+}\n+\n+enum Univariant {\n+    Unit(i32)\n+}\n+\n+struct TupleStruct (float, int);\n+\n+\n fn main() {\n-    let (a, b): (int, bool) = (9898, false);\n+\t// simple tuple\n+    let (a, b) : (int, bool) = (1, false);\n+\n+    // nested tuple\n+    let (c, (d, e)) : (int, (u16, u16)) = (2, (3, 4));\n+\n+    // bind tuple-typed value to one name (destructure only first level)\n+    let (f, g) : (int, (u32, u32)) = (5, (6, 7));\n+\n+    // struct as tuple element\n+    let (h, i, j) : (i16, Struct, i16) = (8, Struct { a: 9, b: 10 }, 11);\n+\n+    // struct pattern\n+    let Struct { a: k, b: l } = Struct { a: 12, b: 13 };\n+\n+    // ignored tuple element\n+    let (m, _, n) = (14, 15, 16);\n+\n+    // ignored struct field\n+    let Struct { b: o, _ } = Struct { a: 17, b: 18 };\n+\n+    // one struct destructured, one not\n+    let (Struct { a: p, b: q }, r) = (Struct { a: 19, b: 20 }, Struct { a: 21, b: 22 });\n+\n+    // different order of struct fields\n+\tlet Struct { b: s, a: t } = Struct { a: 23, b: 24 };\n+\n+\t// complex nesting\n+\tlet ((u, v), ((w, (x, Struct { a: y, b: z})), Struct { a: ae, b: oe }), ue) =\n+\t\t((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33);\n+\n+\t// managed box\n+\tlet @aa = @(34, 35);\n+\n+    // borrowed pointer\n+    let &bb = &(36, 37);\n+\n+    // contained borrowed pointer\n+    let (&cc, _) = (&38, 39);\n+\n+    // unique pointer\n+    let ~dd = ~(40, 41, 42);\n+\n+    // ref binding\n+    let ref ee = (43, 44, 45);\n+\n+    // ref binding in tuple\n+    let (ref ff, gg) = (46, (47, 48));\n+\n+    // ref binding in struct\n+    let Struct { b: ref hh, _ } = Struct { a: 49, b: 50 };\n+\n+    // univariant enum\n+    let Unit(ii) = Unit(51);\n+\n+    // univariant enum with ref binding\n+    let Unit(ref jj) = Unit(52);\n+\n+    // tuple struct\n+    let TupleStruct(kk, ll) = TupleStruct(53.0, 54);\n+\n+    // tuple struct with ref binding\n+    let TupleStruct(mm, ref nn) = TupleStruct(55.0, 56);\n \n     zzz();\n }"}]}