{"sha": "85ab08084d3de9aa96c62091588311c6d3e7e270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YWIwODA4NGQzZGU5YWE5NmM2MjA5MTU4ODMxMWM2ZDNlN2UyNzA=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-17T01:48:25Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:28Z"}, "message": "Remove global builder", "tree": {"sha": "f3937890aaa90e1422dc9c422b9498c91ea0922f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3937890aaa90e1422dc9c422b9498c91ea0922f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ab08084d3de9aa96c62091588311c6d3e7e270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ab08084d3de9aa96c62091588311c6d3e7e270", "html_url": "https://github.com/rust-lang/rust/commit/85ab08084d3de9aa96c62091588311c6d3e7e270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ab08084d3de9aa96c62091588311c6d3e7e270/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "755850f31863d19b22083eaa2bbdc2c495f0b072", "url": "https://api.github.com/repos/rust-lang/rust/commits/755850f31863d19b22083eaa2bbdc2c495f0b072", "html_url": "https://github.com/rust-lang/rust/commit/755850f31863d19b22083eaa2bbdc2c495f0b072"}], "stats": {"total": 167, "additions": 43, "deletions": 124}, "files": [{"sha": "7e03b196cfe3786668f0a7df160ea9bbd6172563", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 19, "deletions": 42, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=85ab08084d3de9aa96c62091588311c6d3e7e270", "patch": "@@ -49,7 +49,7 @@ use session::{self, DataTypeKind, Session};\n use abi::{self, Abi, FnType};\n use adt;\n use attributes;\n-use builder::{Builder, noname};\n+use builder::Builder;\n use callee::{Callee};\n use common::{BlockAndBuilder, C_bool, C_bytes_in_context, C_i32, C_uint};\n use collector::{self, TransItemCollectionMode};\n@@ -80,7 +80,6 @@ use util::nodemap::{NodeSet, FxHashMap, FxHashSet};\n use libc::c_uint;\n use std::ffi::{CStr, CString};\n use std::cell::RefCell;\n-use std::ptr;\n use std::rc::Rc;\n use std::str;\n use std::i32;\n@@ -870,9 +869,7 @@ pub fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n \n     let et = ccx.sess().entry_type.get().unwrap();\n     match et {\n-        config::EntryMain => {\n-            create_entry_fn(ccx, span, main_llfn, true);\n-        }\n+        config::EntryMain => create_entry_fn(ccx, span, main_llfn, true),\n         config::EntryStart => create_entry_fn(ccx, span, main_llfn, false),\n         config::EntryNone => {}    // Do nothing.\n     }\n@@ -897,47 +894,27 @@ pub fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n         attributes::set_frame_pointer_elimination(ccx, llfn);\n \n         let llbb = unsafe {\n-            llvm::LLVMAppendBasicBlockInContext(ccx.llcx(), llfn, \"top\\0\".as_ptr() as *const _)\n+            let name = CString::new(\"top\").unwrap();\n+            llvm::LLVMAppendBasicBlockInContext(ccx.llcx(), llfn, name.as_ptr())\n         };\n-        let bld = ccx.raw_builder();\n-        unsafe {\n-            llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n-\n-            debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(ccx);\n+        let bld = Builder::with_ccx(ccx);\n+        bld.position_at_end(llbb);\n \n-            let (start_fn, args) = if use_start_lang_item {\n-                let start_def_id = match ccx.tcx().lang_items.require(StartFnLangItem) {\n-                    Ok(id) => id,\n-                    Err(s) => ccx.sess().fatal(&s)\n-                };\n-                let empty_substs = ccx.tcx().intern_substs(&[]);\n-                let start_fn = Callee::def(ccx, start_def_id, empty_substs).reify(ccx);\n-                let args = {\n-                    let opaque_rust_main =\n-                        llvm::LLVMBuildPointerCast(bld,\n-                                                   rust_main,\n-                                                   Type::i8p(ccx).to_ref(),\n-                                                   \"rust_main\\0\".as_ptr() as *const _);\n-\n-                    vec![opaque_rust_main, get_param(llfn, 0), get_param(llfn, 1)]\n-                };\n-                (start_fn, args)\n-            } else {\n-                debug!(\"using user-defined start fn\");\n-                let args = vec![get_param(llfn, 0 as c_uint), get_param(llfn, 1 as c_uint)];\n+        debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(ccx, &bld);\n \n-                (rust_main, args)\n-            };\n-\n-            let result = llvm::LLVMRustBuildCall(bld,\n-                                                 start_fn,\n-                                                 args.as_ptr(),\n-                                                 args.len() as c_uint,\n-                                                 ptr::null_mut(),\n-                                                 noname());\n+        let (start_fn, args) = if use_start_lang_item {\n+            let start_def_id = ccx.tcx().require_lang_item(StartFnLangItem);\n+            let empty_substs = ccx.tcx().intern_substs(&[]);\n+            let start_fn = Callee::def(ccx, start_def_id, empty_substs).reify(ccx);\n+            (start_fn, vec![bld.pointercast(rust_main, Type::i8p(ccx).ptr_to()), get_param(llfn, 0),\n+                get_param(llfn, 1)])\n+        } else {\n+            debug!(\"using user-defined start fn\");\n+            (rust_main, vec![get_param(llfn, 0 as c_uint), get_param(llfn, 1 as c_uint)])\n+        };\n \n-            llvm::LLVMBuildRet(bld, result);\n-        }\n+        let result = bld.call(start_fn, &args, None);\n+        bld.ret(result);\n     }\n }\n "}, {"sha": "0a79c8d43f6fe8d7027edbde8f6d45d8eaa89e7b", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=85ab08084d3de9aa96c62091588311c6d3e7e270", "patch": "@@ -14,7 +14,7 @@\n \n use session::Session;\n use llvm;\n-use llvm::{ValueRef, BasicBlockRef, BuilderRef, ContextRef, TypeKind};\n+use llvm::{ValueRef, BasicBlockRef, ContextRef, TypeKind};\n use llvm::{True, False, Bool, OperandBundleDef, get_param};\n use llvm::debuginfo::DIScope;\n use monomorphize::Instance;\n@@ -235,24 +235,6 @@ impl<'a, 'tcx> VariantInfo<'tcx> {\n     }\n }\n \n-pub struct BuilderRef_res {\n-    pub b: BuilderRef,\n-}\n-\n-impl Drop for BuilderRef_res {\n-    fn drop(&mut self) {\n-        unsafe {\n-            llvm::LLVMDisposeBuilder(self.b);\n-        }\n-    }\n-}\n-\n-pub fn BuilderRef_res(b: BuilderRef) -> BuilderRef_res {\n-    BuilderRef_res {\n-        b: b\n-    }\n-}\n-\n pub fn validate_substs(substs: &Substs) {\n     assert!(!substs.needs_infer());\n }"}, {"sha": "ead23b333ff249a40c9ceb54bfe1016787875c4d", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=85ab08084d3de9aa96c62091588311c6d3e7e270", "patch": "@@ -9,15 +9,13 @@\n // except according to those terms.\n \n use llvm;\n-use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n-use rustc::dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig,\n-                       WorkProduct};\n+use llvm::{ContextRef, ModuleRef, ValueRef};\n+use rustc::dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig, WorkProduct};\n use middle::cstore::LinkMeta;\n use rustc::hir::def::ExportMap;\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n use base;\n-use common::BuilderRef_res;\n use debuginfo;\n use declare;\n use glue::DropGlueKind;\n@@ -139,7 +137,6 @@ pub struct LocalCrateContext<'tcx> {\n     int_type: Type,\n     opaque_vec_type: Type,\n     str_slice_type: Type,\n-    builder: BuilderRef_res,\n \n     /// Holds the LLVM values for closure IDs.\n     closure_vals: RefCell<FxHashMap<Instance<'tcx>, ValueRef>>,\n@@ -605,7 +602,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 int_type: Type::from_ref(ptr::null_mut()),\n                 opaque_vec_type: Type::from_ref(ptr::null_mut()),\n                 str_slice_type: Type::from_ref(ptr::null_mut()),\n-                builder: BuilderRef_res(llvm::LLVMCreateBuilderInContext(llcx)),\n                 closure_vals: RefCell::new(FxHashMap()),\n                 dbg_cx: dbg_cx,\n                 eh_personality: Cell::new(None),\n@@ -682,10 +678,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.shared.tcx.sess\n     }\n \n-    pub fn raw_builder<'a>(&'a self) -> BuilderRef {\n-        self.local().builder.b\n-    }\n-\n     pub fn get_intrinsic(&self, key: &str) -> ValueRef {\n         if let Some(v) = self.intrinsics().borrow().get(key).cloned() {\n             return v;"}, {"sha": "e8728a39993081bc3bcc45966b43537922ea2b37", "filename": "src/librustc_trans/debuginfo/gdb.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs?ref=85ab08084d3de9aa96c62091588311c6d3e7e270", "patch": "@@ -13,37 +13,26 @@\n use llvm;\n \n use common::{C_bytes, CrateContext, C_i32};\n+use builder::Builder;\n use declare;\n use type_::Type;\n use session::config::NoDebugInfo;\n \n-use std::ffi::CString;\n use std::ptr;\n use syntax::attr;\n \n \n /// Inserts a side-effect free instruction sequence that makes sure that the\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n-pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) {\n+pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext, builder: &Builder) {\n     if needs_gdb_debug_scripts_section(ccx) {\n-        let empty = CString::new(\"\").unwrap();\n-        let gdb_debug_scripts_section_global =\n-            get_or_insert_gdb_debug_scripts_section_global(ccx);\n+        let gdb_debug_scripts_section_global = get_or_insert_gdb_debug_scripts_section_global(ccx);\n+        // Load just the first byte as that's all that's necessary to force\n+        // LLVM to keep around the reference to the global.\n+        let indices = [C_i32(ccx, 0), C_i32(ccx, 0)];\n+        let element = builder.inbounds_gep(gdb_debug_scripts_section_global, &indices);\n+        let volative_load_instruction = builder.volatile_load(element);\n         unsafe {\n-            // Load just the first byte as that's all that's necessary to force\n-            // LLVM to keep around the reference to the global.\n-            let indices = [C_i32(ccx, 0), C_i32(ccx, 0)];\n-            let element =\n-                llvm::LLVMBuildInBoundsGEP(ccx.raw_builder(),\n-                                           gdb_debug_scripts_section_global,\n-                                           indices.as_ptr(),\n-                                           indices.len() as ::libc::c_uint,\n-                                           empty.as_ptr());\n-            let volative_load_instruction =\n-                llvm::LLVMBuildLoad(ccx.raw_builder(),\n-                                    element,\n-                                    empty.as_ptr());\n-            llvm::LLVMSetVolatile(volative_load_instruction, llvm::True);\n             llvm::LLVMSetAlignment(volative_load_instruction, 1);\n         }\n     }"}, {"sha": "9cc2c72648f0216583e04e0b857352a5b430ea9e", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=85ab08084d3de9aa96c62091588311c6d3e7e270", "patch": "@@ -66,7 +66,6 @@ const DW_TAG_arg_variable: c_uint = 0x101;\n pub struct CrateDebugContext<'tcx> {\n     llcontext: ContextRef,\n     builder: DIBuilderRef,\n-    current_debug_location: Cell<InternalDebugLocation>,\n     created_files: RefCell<FxHashMap<String, DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Integer), DIType>>,\n \n@@ -84,16 +83,15 @@ impl<'tcx> CrateDebugContext<'tcx> {\n         let builder = unsafe { llvm::LLVMRustDIBuilderCreate(llmod) };\n         // DIBuilder inherits context from the module, so we'd better use the same one\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n-        return CrateDebugContext {\n+        CrateDebugContext {\n             llcontext: llcontext,\n             builder: builder,\n-            current_debug_location: Cell::new(InternalDebugLocation::UnknownLocation),\n             created_files: RefCell::new(FxHashMap()),\n             created_enum_disr_types: RefCell::new(FxHashMap()),\n             type_map: RefCell::new(TypeMap::new()),\n             namespace_map: RefCell::new(DefIdMap()),\n             composite_types_completed: RefCell::new(FxHashSet()),\n-        };\n+        }\n     }\n }\n \n@@ -198,15 +196,12 @@ pub fn finalize(cx: &CrateContext) {\n }\n \n /// Creates a function-specific debug context for a function w/o debuginfo.\n-pub fn empty_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>)\n-                                              -> FunctionDebugContext {\n+pub fn empty_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>) -> FunctionDebugContext {\n     if cx.sess().opts.debuginfo == NoDebugInfo {\n-        return FunctionDebugContext::DebugInfoDisabled;\n+        FunctionDebugContext::DebugInfoDisabled\n+    } else {\n+        FunctionDebugContext::FunctionWithoutDebugInfo\n     }\n-\n-    // Clear the debug location so we don't assign them in the function prelude.\n-    source_loc::set_debug_location(cx, None, UnknownLocation);\n-    FunctionDebugContext::FunctionWithoutDebugInfo\n }\n \n /// Creates the function-specific debug context.\n@@ -225,10 +220,6 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         return FunctionDebugContext::DebugInfoDisabled;\n     }\n \n-    // Clear the debug location so we don't assign them in the function prelude.\n-    // Do this here already, in case we do an early exit from this function.\n-    source_loc::set_debug_location(cx, None, UnknownLocation);\n-\n     let containing_scope = get_containing_scope(cx, instance);\n     let span = mir.span;\n \n@@ -482,10 +473,10 @@ pub fn declare_local<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n                     align as u64,\n                 )\n             };\n-            source_loc::set_debug_location(cx, None,\n+            source_loc::set_debug_location(cx, bcx,\n                 InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()));\n             unsafe {\n-                let debug_loc = llvm::LLVMGetCurrentDebugLocation(cx.raw_builder());\n+                let debug_loc = llvm::LLVMGetCurrentDebugLocation(bcx.llbuilder);\n                 let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n                     DIB(cx),\n                     alloca,\n@@ -503,7 +494,7 @@ pub fn declare_local<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     match variable_kind {\n         ArgumentVariable(_) | CapturedVariable => {\n             assert!(!bcx.fcx().debug_context.get_ref(span).source_locations_enabled.get());\n-            source_loc::set_debug_location(cx, None, UnknownLocation);\n+            source_loc::set_debug_location(cx, bcx, UnknownLocation);\n         }\n         _ => { /* nothing to do */ }\n     }"}, {"sha": "2a168e342d05ebd879f97d408bc232b370091cc8", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab08084d3de9aa96c62091588311c6d3e7e270/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=85ab08084d3de9aa96c62091588311c6d3e7e270", "patch": "@@ -27,11 +27,10 @@ use syntax_pos::{Span, Pos};\n ///\n /// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...).\n pub fn set_source_location(fcx: &FunctionContext, builder: &Builder, scope: DIScope, span: Span) {\n-    let builder = builder.llbuilder;\n     let function_debug_context = match fcx.debug_context {\n         FunctionDebugContext::DebugInfoDisabled => return,\n         FunctionDebugContext::FunctionWithoutDebugInfo => {\n-            set_debug_location(fcx.ccx, Some(builder), UnknownLocation);\n+            set_debug_location(fcx.ccx, builder, UnknownLocation);\n             return;\n         }\n         FunctionDebugContext::RegularContext(ref data) => data\n@@ -44,7 +43,7 @@ pub fn set_source_location(fcx: &FunctionContext, builder: &Builder, scope: DISc\n     } else {\n         UnknownLocation\n     };\n-    set_debug_location(fcx.ccx, Some(builder), dbg_loc);\n+    set_debug_location(fcx.ccx, builder, dbg_loc);\n }\n \n /// Enables emitting source locations for the given functions.\n@@ -80,14 +79,8 @@ impl InternalDebugLocation {\n }\n \n pub fn set_debug_location(cx: &CrateContext,\n-                          builder: Option<llvm::BuilderRef>,\n+                          builder: &Builder,\n                           debug_location: InternalDebugLocation) {\n-    if builder.is_none() {\n-        if debug_location == debug_context(cx).current_debug_location.get() {\n-            return;\n-        }\n-    }\n-\n     let metadata_node = match debug_location {\n         KnownLocation { scope, line, .. } => {\n             // Always set the column to zero like Clang and GCC\n@@ -109,12 +102,7 @@ pub fn set_debug_location(cx: &CrateContext,\n         }\n     };\n \n-    if builder.is_none() {\n-        debug_context(cx).current_debug_location.set(debug_location);\n-    }\n-\n-    let builder = builder.unwrap_or_else(|| cx.raw_builder());\n     unsafe {\n-        llvm::LLVMSetCurrentDebugLocation(builder, metadata_node);\n+        llvm::LLVMSetCurrentDebugLocation(builder.llbuilder, metadata_node);\n     }\n }"}]}