{"sha": "32ddd0206c9bd1956f7629c8c76191369f19023f", "node_id": "C_kwDOAAsO6NoAKDMyZGRkMDIwNmM5YmQxOTU2Zjc2MjljOGM3NjE5MTM2OWYxOTAyM2Y", "commit": {"author": {"name": "kit", "email": "kit@hastur.io", "date": "2021-11-08T23:36:47Z"}, "committer": {"name": "kit", "email": "kit@hastur.io", "date": "2021-11-14T07:49:17Z"}, "message": "Refactor linker argument generation\n\nThis commit refactors linker argument generation to leverage a helper\nfunction that abstracts away details governing how these arguments are\ntransformed and provided to the linker.\n\nThis fixes the misuse of the `-exported_symbols_list` when an ld-like\nlinker is used rather than a compiler. A compiler would expect\n`-Wl,-exported_symbols_list,path` but ld would expect\n`-exported_symbols_list` and `path` as two seperate arguments. Prior\nto this change, an ld-like linker was given\n`-exported_symbols_list,path`.", "tree": {"sha": "fd07c4f0d8e8bf3f4097dd414404b43ff3b376d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd07c4f0d8e8bf3f4097dd414404b43ff3b376d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ddd0206c9bd1956f7629c8c76191369f19023f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ddd0206c9bd1956f7629c8c76191369f19023f", "html_url": "https://github.com/rust-lang/rust/commit/32ddd0206c9bd1956f7629c8c76191369f19023f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ddd0206c9bd1956f7629c8c76191369f19023f/comments", "author": {"login": "kit-981", "id": 86507480, "node_id": "MDQ6VXNlcjg2NTA3NDgw", "avatar_url": "https://avatars.githubusercontent.com/u/86507480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kit-981", "html_url": "https://github.com/kit-981", "followers_url": "https://api.github.com/users/kit-981/followers", "following_url": "https://api.github.com/users/kit-981/following{/other_user}", "gists_url": "https://api.github.com/users/kit-981/gists{/gist_id}", "starred_url": "https://api.github.com/users/kit-981/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kit-981/subscriptions", "organizations_url": "https://api.github.com/users/kit-981/orgs", "repos_url": "https://api.github.com/users/kit-981/repos", "events_url": "https://api.github.com/users/kit-981/events{/privacy}", "received_events_url": "https://api.github.com/users/kit-981/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kit-981", "id": 86507480, "node_id": "MDQ6VXNlcjg2NTA3NDgw", "avatar_url": "https://avatars.githubusercontent.com/u/86507480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kit-981", "html_url": "https://github.com/kit-981", "followers_url": "https://api.github.com/users/kit-981/followers", "following_url": "https://api.github.com/users/kit-981/following{/other_user}", "gists_url": "https://api.github.com/users/kit-981/gists{/gist_id}", "starred_url": "https://api.github.com/users/kit-981/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kit-981/subscriptions", "organizations_url": "https://api.github.com/users/kit-981/orgs", "repos_url": "https://api.github.com/users/kit-981/repos", "events_url": "https://api.github.com/users/kit-981/events{/privacy}", "received_events_url": "https://api.github.com/users/kit-981/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbc9cb597a37385f423c49e0bbf8ddafb128bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc9cb597a37385f423c49e0bbf8ddafb128bbf", "html_url": "https://github.com/rust-lang/rust/commit/9bbc9cb597a37385f423c49e0bbf8ddafb128bbf"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "f8f88bf607aac1c5986b3779f640b58dbd14589e", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/32ddd0206c9bd1956f7629c8c76191369f19023f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ddd0206c9bd1956f7629c8c76191369f19023f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=32ddd0206c9bd1956f7629c8c76191369f19023f", "patch": "@@ -306,8 +306,10 @@ impl<'a> GccLinker<'a> {\n         if let Some(path) = &self.sess.opts.debugging_opts.profile_sample_use {\n             self.linker_arg(&format!(\"-plugin-opt=sample-profile={}\", path.display()));\n         };\n-        self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n-        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.target_cpu));\n+        self.linker_args(&[\n+            &format!(\"-plugin-opt={}\", opt_level),\n+            &format!(\"-plugin-opt=mcpu={}\", self.target_cpu),\n+        ]);\n     }\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n@@ -321,10 +323,9 @@ impl<'a> GccLinker<'a> {\n             // principled solution at some point to force the compiler to pass\n             // the right `-Wl,-install_name` with an `@rpath` in it.\n             if self.sess.opts.cg.rpath || self.sess.opts.debugging_opts.osx_rpath_install_name {\n-                self.linker_arg(\"-install_name\");\n-                let mut v = OsString::from(\"@rpath/\");\n-                v.push(out_filename.file_name().unwrap());\n-                self.linker_arg(&v);\n+                let mut rpath = OsString::from(\"@rpath/\");\n+                rpath.push(out_filename.file_name().unwrap());\n+                self.linker_args(&[OsString::from(\"-install_name\"), rpath]);\n             }\n         } else {\n             self.cmd.arg(\"-shared\");\n@@ -398,8 +399,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 self.build_dylib(out_filename);\n             }\n             LinkOutputKind::WasiReactorExe => {\n-                self.linker_arg(\"--entry\");\n-                self.linker_arg(\"_initialize\");\n+                self.linker_args(&[\"--entry\", \"_initialize\"]);\n             }\n         }\n         // VxWorks compiler driver introduced `--static-crt` flag specifically for rustc,\n@@ -471,8 +471,7 @@ impl<'a> Linker for GccLinker<'a> {\n         self.cmd.arg(path);\n     }\n     fn full_relro(&mut self) {\n-        self.linker_arg(\"-zrelro\");\n-        self.linker_arg(\"-znow\");\n+        self.linker_args(&[\"-zrelro\", \"-znow\"]);\n     }\n     fn partial_relro(&mut self) {\n         self.linker_arg(\"-zrelro\");\n@@ -656,7 +655,6 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n \n         let is_windows = self.sess.target.is_like_windows;\n-        let mut arg = OsString::new();\n         let path = tmpdir.join(if is_windows { \"list.def\" } else { \"list\" });\n \n         debug!(\"EXPORTED SYMBOLS:\");\n@@ -708,27 +706,18 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n \n         if self.sess.target.is_like_osx {\n-            if !self.is_ld {\n-                arg.push(\"-Wl,\")\n-            }\n-            arg.push(\"-exported_symbols_list,\");\n+            self.linker_args(&[OsString::from(\"-exported_symbols_list\"), path.into()]);\n         } else if self.sess.target.is_like_solaris {\n-            if !self.is_ld {\n-                arg.push(\"-Wl,\")\n-            }\n-            arg.push(\"-M,\");\n+            self.linker_args(&[OsString::from(\"-M\"), path.into()]);\n         } else {\n-            if !self.is_ld {\n-                arg.push(\"-Wl,\")\n-            }\n-            // Both LD and LLD accept export list in *.def file form, there are no flags required\n-            if !is_windows {\n-                arg.push(\"--version-script=\")\n+            if is_windows {\n+                self.linker_arg(path);\n+            } else {\n+                let mut arg = OsString::from(\"--version-script=\");\n+                arg.push(path);\n+                self.linker_arg(arg);\n             }\n         }\n-\n-        arg.push(&path);\n-        self.cmd.arg(arg);\n     }\n \n     fn subsystem(&mut self, subsystem: &str) {\n@@ -786,8 +775,7 @@ impl<'a> Linker for GccLinker<'a> {\n             self.linker_arg(\"--as-needed\");\n         } else if self.sess.target.is_like_solaris {\n             // -z ignore is the Solaris equivalent to the GNU ld --as-needed option\n-            self.linker_arg(\"-z\");\n-            self.linker_arg(\"ignore\");\n+            self.linker_args(&[\"-z\", \"ignore\"]);\n         }\n     }\n }"}]}