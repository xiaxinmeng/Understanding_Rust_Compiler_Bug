{"sha": "45860d520786a86007f2f86635b4d2f9c3b0c74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODYwZDUyMDc4NmE4NjAwN2YyZjg2NjM1YjRkMmY5YzNiMGM3NGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-24T19:57:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-24T19:58:03Z"}, "message": "Remove InsertPos::Before variant in Syntax Rewriter", "tree": {"sha": "8855a5375f85aa119450032c18d28066eaa1fef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8855a5375f85aa119450032c18d28066eaa1fef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45860d520786a86007f2f86635b4d2f9c3b0c74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45860d520786a86007f2f86635b4d2f9c3b0c74e", "html_url": "https://github.com/rust-lang/rust/commit/45860d520786a86007f2f86635b4d2f9c3b0c74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45860d520786a86007f2f86635b4d2f9c3b0c74e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca2735d1e1589dd474858f4cef9ef638d741e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca2735d1e1589dd474858f4cef9ef638d741e5b", "html_url": "https://github.com/rust-lang/rust/commit/aca2735d1e1589dd474858f4cef9ef638d741e5b"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "065035fe61d6eb21026c17c2b25630899d5bcd0c", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/45860d520786a86007f2f86635b4d2f9c3b0c74e/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45860d520786a86007f2f86635b4d2f9c3b0c74e/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=45860d520786a86007f2f86635b4d2f9c3b0c74e", "patch": "@@ -292,7 +292,7 @@ fn _replace_children(\n #[derive(Debug, PartialEq, Eq, Hash)]\n enum InsertPos {\n     FirstChildOf(SyntaxNode),\n-    Before(SyntaxElement),\n+    // Before(SyntaxElement),\n     After(SyntaxElement),\n }\n \n@@ -328,10 +328,15 @@ impl<'a> SyntaxRewriter<'a> {\n         before: &T,\n         what: &U,\n     ) {\n-        self.insertions\n-            .entry(InsertPos::Before(before.clone().into()))\n-            .or_insert_with(Vec::new)\n-            .push(what.clone().into());\n+        let before = before.clone().into();\n+        let pos = match before.prev_sibling_or_token() {\n+            Some(sibling) => InsertPos::After(sibling),\n+            None => match before.parent() {\n+                Some(parent) => InsertPos::FirstChildOf(parent),\n+                None => return,\n+            },\n+        };\n+        self.insertions.entry(pos).or_insert_with(Vec::new).push(what.clone().into());\n     }\n     pub fn insert_after<T: Clone + Into<SyntaxElement>, U: Clone + Into<SyntaxElement>>(\n         &mut self,\n@@ -361,10 +366,15 @@ impl<'a> SyntaxRewriter<'a> {\n         before: &T,\n         what: U,\n     ) {\n-        self.insertions\n-            .entry(InsertPos::Before(before.clone().into()))\n-            .or_insert_with(Vec::new)\n-            .extend(what);\n+        let before = before.clone().into();\n+        let pos = match before.prev_sibling_or_token() {\n+            Some(sibling) => InsertPos::After(sibling),\n+            None => match before.parent() {\n+                Some(parent) => InsertPos::FirstChildOf(parent),\n+                None => return,\n+            },\n+        };\n+        self.insertions.entry(pos).or_insert_with(Vec::new).extend(what);\n     }\n     pub fn insert_many_after<\n         T: Clone + Into<SyntaxElement>,\n@@ -440,7 +450,7 @@ impl<'a> SyntaxRewriter<'a> {\n             .map(element_to_node_or_parent)\n             .chain(self.insertions.keys().map(|pos| match pos {\n                 InsertPos::FirstChildOf(it) => it.clone(),\n-                InsertPos::Before(it) | InsertPos::After(it) => element_to_node_or_parent(it),\n+                InsertPos::After(it) => element_to_node_or_parent(it),\n             }))\n             // If we only have one replacement/insertion, we must return its parent node, since `rewrite` does\n             // not replace the node passed to it.\n@@ -477,9 +487,6 @@ impl<'a> SyntaxRewriter<'a> {\n         acc: &mut Vec<NodeOrToken<rowan::GreenNode, rowan::GreenToken>>,\n         element: &SyntaxElement,\n     ) {\n-        if let Some(elements) = self.insertions(&InsertPos::Before(element.clone())) {\n-            acc.extend(elements.map(element_to_green));\n-        }\n         if let Some(replacement) = self.replacement(&element) {\n             match replacement {\n                 Replacement::Single(element) => acc.push(element_to_green(element)),"}]}