{"sha": "04867e004ebc0f2edf66d0a457e785848451f13a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODY3ZTAwNGViYzBmMmVkZjY2ZDBhNDU3ZTc4NTg0ODQ1MWYxM2E=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-11T10:10:42Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-11T13:15:26Z"}, "message": "mutex-atomic: make lint adhere to lint message convention", "tree": {"sha": "bfc6c476f04170e95ab8508b14af0262cbf26d70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc6c476f04170e95ab8508b14af0262cbf26d70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04867e004ebc0f2edf66d0a457e785848451f13a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04867e004ebc0f2edf66d0a457e785848451f13a", "html_url": "https://github.com/rust-lang/rust/commit/04867e004ebc0f2edf66d0a457e785848451f13a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04867e004ebc0f2edf66d0a457e785848451f13a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac194cafc124276d4614bf023ca7ea6e9be9c6ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac194cafc124276d4614bf023ca7ea6e9be9c6ed", "html_url": "https://github.com/rust-lang/rust/commit/ac194cafc124276d4614bf023ca7ea6e9be9c6ed"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "21efee71269862484f60ca618249bb067dd363e5", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04867e004ebc0f2edf66d0a457e785848451f13a/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04867e004ebc0f2edf66d0a457e785848451f13a/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=04867e004ebc0f2edf66d0a457e785848451f13a", "patch": "@@ -72,8 +72,8 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\n-                        \"Consider using an `{}` instead of a `Mutex` here. If you just want the locking \\\n-                         behavior and not the internal type, consider using `Mutex<()>`.\",\n+                        \"consider using an `{}` instead of a `Mutex` here; if you just want the locking \\\n+                         behavior and not the internal type, consider using `Mutex<()>`\",\n                         atomic_name\n                     );\n                     match mutex_param.kind {"}, {"sha": "a3511ba708a885f808e6f4afd7d257149951c891", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04867e004ebc0f2edf66d0a457e785848451f13a/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04867e004ebc0f2edf66d0a457e785848451f13a/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=04867e004ebc0f2edf66d0a457e785848451f13a", "patch": "@@ -1,44 +1,44 @@\n-error: Consider using an `AtomicBool` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicBool` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:6:5\n    |\n LL |     Mutex::new(true);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-atomic` implied by `-D warnings`\n \n-error: Consider using an `AtomicUsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicUsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:7:5\n    |\n LL |     Mutex::new(5usize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicIsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicIsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:8:5\n    |\n LL |     Mutex::new(9isize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicPtr` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicPtr` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:10:5\n    |\n LL |     Mutex::new(&x as *const u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicPtr` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicPtr` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:11:5\n    |\n LL |     Mutex::new(&mut x as *mut u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an `AtomicUsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicUsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:12:5\n    |\n LL |     Mutex::new(0u32);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-integer` implied by `-D warnings`\n \n-error: Consider using an `AtomicIsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n+error: consider using an `AtomicIsize` instead of a `Mutex` here; if you just want the locking behavior and not the internal type, consider using `Mutex<()>`\n   --> $DIR/mutex_atomic.rs:13:5\n    |\n LL |     Mutex::new(0i32);"}]}