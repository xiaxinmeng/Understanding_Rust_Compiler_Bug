{"sha": "991bd049c93995ec3a3cff44dca92aaaec116c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MWJkMDQ5YzkzOTk1ZWMzYTNjZmY0NGRjYTkyYWFhZWMxMTZjNzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:34:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:26Z"}, "message": "rollup merge of #19856: iKevinY/faq-fixes\n\n- Change long inline code to code block\n- Replace double-hyphens with en dash\n- Miscellaneous rephrasings for clarity\n\n**Edit**: Trivial `commit --amend` to change the commit message slightly.", "tree": {"sha": "da058b209abc754a100c569c1c4b21ede8b37a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da058b209abc754a100c569c1c4b21ede8b37a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991bd049c93995ec3a3cff44dca92aaaec116c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991bd049c93995ec3a3cff44dca92aaaec116c79", "html_url": "https://github.com/rust-lang/rust/commit/991bd049c93995ec3a3cff44dca92aaaec116c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991bd049c93995ec3a3cff44dca92aaaec116c79/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137a3dbffd5454874bf001e213f695644b78523a", "url": "https://api.github.com/repos/rust-lang/rust/commits/137a3dbffd5454874bf001e213f695644b78523a", "html_url": "https://github.com/rust-lang/rust/commit/137a3dbffd5454874bf001e213f695644b78523a"}, {"sha": "2ba2843b49ad237d669e0e2e4993b12b1be8a240", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba2843b49ad237d669e0e2e4993b12b1be8a240", "html_url": "https://github.com/rust-lang/rust/commit/2ba2843b49ad237d669e0e2e4993b12b1be8a240"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "9e73863239fbc06b05e807f243b7bb65d99d7cf5", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/991bd049c93995ec3a3cff44dca92aaaec116c79/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/991bd049c93995ec3a3cff44dca92aaaec116c79/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=991bd049c93995ec3a3cff44dca92aaaec116c79", "patch": "@@ -24,7 +24,7 @@ Some examples that demonstrate different aspects of the language:\n [HashMap]: https://github.com/rust-lang/rust/blob/master/src/libcollections/hashmap.rs\n [json]: https://github.com/rust-lang/rust/blob/master/src/libserialize/json.rs\n \n-You may also be interested in browsing [GitHub's Rust][github-rust] page.\n+You may also be interested in browsing [trending Rust repositories][github-rust] on GitHub.\n \n [github-rust]: https://github.com/trending?l=rust\n \n@@ -42,7 +42,7 @@ Let the fact that this is an easily countable number be a warning.\n \n ## Does it run on Windows?\n \n-Yes. All development happens in lock-step on all 3 target platforms. Using MinGW, not Cygwin. Note that the windows implementation currently has some limitations: in particular 64-bit build is [not fully supported yet][win64], and all executables created by rustc [depend on libgcc DLL at runtime][libgcc].\n+Yes. All development happens in lockstep on all 3 target platforms (using MinGW, not Cygwin). Note that the Windows implementation currently has some limitations; in particular, the 64-bit build is [not fully supported yet][win64], and all executables created by rustc [depend on libgcc DLL at runtime][libgcc].\n \n [win64]: https://github.com/rust-lang/rust/issues/1237\n [libgcc]: https://github.com/rust-lang/rust/issues/11782\n@@ -104,7 +104,7 @@ Similar to the reasoning about default-sync: it wires fewer assumptions into the\n \n ## Why are strings UTF-8 by default? Why not UCS2 or UCS4?\n \n-The `str` type is UTF-8 because we observe more text in the wild in this encoding -- particularly in network transmissions, which are endian-agnostic -- and we think it's best that the default treatment of I/O not involve having to recode codepoints in each direction.\n+The `str` type is UTF-8 because we observe more text in the wild in this encoding \u2013 particularly in network transmissions, which are endian-agnostic \u2013 and we think it's best that the default treatment of I/O not involve having to recode codepoints in each direction.\n \n This does mean that indexed access to a Unicode codepoint inside a `str` value is an O(n) operation. On the one hand, this is clearly undesirable; on the other hand, this problem is full of trade-offs and we'd like to point a few important qualifications:\n \n@@ -145,23 +145,27 @@ For simplicity, we do not plan to do so. Implementing automatic semicolon insert\n \n ## How do I get my program to display the output of logging macros?\n \n-**Short answer** set the RUST_LOG environment variable to the name of your source file, sans extension.\n+**Short Answer**: Set the `RUST_LOG` environment variable to the name of your source file, sans extension.\n \n ```sh\n rustc hello.rs\n export RUST_LOG=hello\n ./hello\n ```\n \n-**Long answer** RUST_LOG takes a 'logging spec' that consists of a\n+**Long Answer**: `RUST_LOG` takes a 'logging spec' that consists of a\n comma-separated list of paths, where a path consists of the crate name and\n-sequence of module names, each separated by double-colons. For standalone .rs\n-files the crate is implicitly named after the source file, so in the above\n-example we were setting RUST_LOG to the name of the hello crate. Multiple paths\n+sequence of module names, each separated by double-colons. For standalone `.rs`\n+files, the crate is implicitly named after the source file, so in the above\n+example we were setting `RUST_LOG` to the name of the hello crate. Multiple paths\n can be combined to control the exact logging you want to see. For example, when\n-debugging linking in the compiler you might set\n-`RUST_LOG=rustc::metadata::creader,rustc::util::filesearch,rustc::back::rpath`\n-For a full description see [the logging crate][1].\n+debugging linking in the compiler, you might set the following:\n+\n+```sh\n+RUST_LOG=rustc::metadata::creader,rustc::util::filesearch,rustc::back::rpath\n+```\n+\n+For a full description, see [the logging crate][1].\n \n ## How fast is Rust?\n \n@@ -172,6 +176,6 @@ performance.\n That said, it is an explicit goal of Rust to be as fast as C++ for most things.\n Language decisions are made with performance in mind, and we want Rust to be as\n fast as possible. Given that Rust is built on top of LLVM, any performance\n-improvements in it also help us be faster.\n+improvements in it also help Rust become faster.\n \n [1]:log/index.html"}]}