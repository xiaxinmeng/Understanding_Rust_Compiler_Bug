{"sha": "86ca1764b66e65fcb986b7188b6a77e8b53f9758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Y2ExNzY0YjY2ZTY1ZmNiOTg2YjcxODhiNmE3N2U4YjUzZjk3NTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-24T19:59:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-24T19:59:51Z"}, "message": "Merge #8975\n\n8975: Use todo!() as placeholder body for generated match arms r=matklad a=jDomantas\n\n`todo!()` seems to be a better fit for this than `{}`. Seeing that this assist predates stabilization of `todo` my guess is that simply no one bothered to change it yet.\r\n\r\nAlso fixed the issue where if the last arm was not block-like, rust-analyzer would not add a comma after it and would generate invalid code.\n\nCo-authored-by: Domantas Jadenkus <djadenkus@gmail.com>", "tree": {"sha": "9f30e5c52c33482b37bdcdff595aa38bf3a0a263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f30e5c52c33482b37bdcdff595aa38bf3a0a263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86ca1764b66e65fcb986b7188b6a77e8b53f9758", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrAW3CRBK7hj4Ov3rIwAAyOsIAEmpHP2gJrgFBEjB1g4vDgaz\nznZ9tLDz7VnqxIbVAcRyJE9o+YPH+8NmqkAJkVFke0MGDxzR4GPMaA9Gb7YWZfIh\n7ZTG8yb3ugagoEua08BcH4aHVf9MWd1KzQa9gQajHJ2aJRMhZb/MCdNVJ9NwLZFO\niF4U5VQhdz+hatwIHSF1D9iKqakO7/rTSfASAuMMiYQZx2dhUaQwRsh3Brh+1G6R\nvwuoVnsbPAGACNPsrRmQtJjIjbNbWtGQfNKbAuCAVjOYuPRquaC6FrcfWNAQgY/+\ngmNGWJ1CV/JYNisGPhMgK8fYyr6I+JBlPTTyODD6oRWMOP02MBi2e203174GGV4=\n=tvcT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f30e5c52c33482b37bdcdff595aa38bf3a0a263\nparent f5f24a9a2c2e9d5d5ff155e700b2bf647f926d47\nparent 3641abc0c3e3ffaa1f6b5bf9b280b4217ea93e67\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621886391 +0000\ncommitter GitHub <noreply@github.com> 1621886391 +0000\n\nMerge #8975\n\n8975: Use todo!() as placeholder body for generated match arms r=matklad a=jDomantas\n\n`todo!()` seems to be a better fit for this than `{}`. Seeing that this assist predates stabilization of `todo` my guess is that simply no one bothered to change it yet.\r\n\r\nAlso fixed the issue where if the last arm was not block-like, rust-analyzer would not add a comma after it and would generate invalid code.\n\nCo-authored-by: Domantas Jadenkus <djadenkus@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86ca1764b66e65fcb986b7188b6a77e8b53f9758", "html_url": "https://github.com/rust-lang/rust/commit/86ca1764b66e65fcb986b7188b6a77e8b53f9758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86ca1764b66e65fcb986b7188b6a77e8b53f9758/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f24a9a2c2e9d5d5ff155e700b2bf647f926d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f24a9a2c2e9d5d5ff155e700b2bf647f926d47", "html_url": "https://github.com/rust-lang/rust/commit/f5f24a9a2c2e9d5d5ff155e700b2bf647f926d47"}, {"sha": "3641abc0c3e3ffaa1f6b5bf9b280b4217ea93e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/3641abc0c3e3ffaa1f6b5bf9b280b4217ea93e67", "html_url": "https://github.com/rust-lang/rust/commit/3641abc0c3e3ffaa1f6b5bf9b280b4217ea93e67"}], "stats": {"total": 174, "additions": 112, "deletions": 62}, "files": [{"sha": "3d2cd739aeaf0b1b197b0dda0903fc048351cfce", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 94, "deletions": 54, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/86ca1764b66e65fcb986b7188b6a77e8b53f9758/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ca1764b66e65fcb986b7188b6a77e8b53f9758/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=86ca1764b66e65fcb986b7188b6a77e8b53f9758", "patch": "@@ -31,8 +31,8 @@ use crate::{\n //\n // fn handle(action: Action) {\n //     match action {\n-//         $0Action::Move { distance } => {}\n-//         Action::Stop => {}\n+//         $0Action::Move { distance } => todo!(),\n+//         Action::Stop => todo!(),\n //     }\n // }\n // ```\n@@ -129,7 +129,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         |builder| {\n             let new_match_arm_list = match_arm_list.clone_for_update();\n             let missing_arms = missing_pats\n-                .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n+                .map(|pat| make::match_arm(iter::once(pat), make::ext::expr_todo()))\n                 .map(|it| it.clone_for_update());\n \n             let catch_all_arm = new_match_arm_list\n@@ -350,8 +350,8 @@ fn foo(a: bool) {\n             r#\"\n fn foo(a: bool) {\n     match a {\n-        $0true => {}\n-        false => {}\n+        $0true => todo!(),\n+        false => todo!(),\n     }\n }\n \"#,\n@@ -373,7 +373,7 @@ fn foo(a: bool) {\n fn foo(a: bool) {\n     match a {\n         true => {}\n-        $0false => {}\n+        $0false => todo!(),\n     }\n }\n \"#,\n@@ -410,10 +410,10 @@ fn foo(a: bool) {\n             r#\"\n fn foo(a: bool) {\n     match (a, a) {\n-        $0(true, true) => {}\n-        (true, false) => {}\n-        (false, true) => {}\n-        (false, false) => {}\n+        $0(true, true) => todo!(),\n+        (true, false) => todo!(),\n+        (false, true) => todo!(),\n+        (false, false) => todo!(),\n     }\n }\n \"#,\n@@ -435,9 +435,9 @@ fn foo(a: bool) {\n fn foo(a: bool) {\n     match (a, a) {\n         (false, true) => {}\n-        $0(true, true) => {}\n-        (true, false) => {}\n-        (false, false) => {}\n+        $0(true, true) => todo!(),\n+        (true, false) => todo!(),\n+        (false, false) => todo!(),\n     }\n }\n \"#,\n@@ -471,7 +471,7 @@ fn main() {\n     match A::As {\n         A::Bs { x, y: Some(_) } => {}\n         A::Cs(_, Some(_)) => {}\n-        $0A::As => {}\n+        $0A::As => todo!(),\n     }\n }\n \"#,\n@@ -499,7 +499,7 @@ use Option::*;\n fn main() {\n     match None {\n         None => {}\n-        Some(${0:_}) => {}\n+        Some(${0:_}) => todo!(),\n     }\n }\n             \"#,\n@@ -523,7 +523,7 @@ enum A { As, Bs, Cs(Option<i32>) }\n fn main() {\n     match A::As {\n         A::Cs(_) | A::Bs => {}\n-        $0A::As => {}\n+        $0A::As => todo!(),\n     }\n }\n \"#,\n@@ -553,8 +553,8 @@ fn main() {\n         A::Bs if 0 < 1 => {}\n         A::Ds(_value) => { let x = 1; }\n         A::Es(B::Xs) => (),\n-        $0A::As => {}\n-        A::Cs => {}\n+        $0A::As => todo!(),\n+        A::Cs => todo!(),\n     }\n }\n \"#,\n@@ -580,7 +580,7 @@ fn main() {\n     match A::As {\n         A::As(_) => {}\n         a @ A::Bs(_) => {}\n-        A::Cs(${0:_}) => {}\n+        A::Cs(${0:_}) => todo!(),\n     }\n }\n \"#,\n@@ -605,11 +605,11 @@ enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n fn main() {\n     let a = A::As;\n     match a {\n-        $0A::As => {}\n-        A::Bs => {}\n-        A::Cs(_) => {}\n-        A::Ds(_, _) => {}\n-        A::Es { x, y } => {}\n+        $0A::As => todo!(),\n+        A::Bs => todo!(),\n+        A::Cs(_) => todo!(),\n+        A::Ds(_, _) => todo!(),\n+        A::Es { x, y } => todo!(),\n     }\n }\n \"#,\n@@ -638,10 +638,10 @@ fn main() {\n     let a = A::One;\n     let b = B::One;\n     match (a, b) {\n-        $0(A::One, B::One) => {}\n-        (A::One, B::Two) => {}\n-        (A::Two, B::One) => {}\n-        (A::Two, B::Two) => {}\n+        $0(A::One, B::One) => todo!(),\n+        (A::One, B::Two) => todo!(),\n+        (A::Two, B::One) => todo!(),\n+        (A::Two, B::Two) => todo!(),\n     }\n }\n \"#,\n@@ -670,10 +670,10 @@ fn main() {\n     let a = A::One;\n     let b = B::One;\n     match (&a, &b) {\n-        $0(A::One, B::One) => {}\n-        (A::One, B::Two) => {}\n-        (A::Two, B::One) => {}\n-        (A::Two, B::Two) => {}\n+        $0(A::One, B::One) => todo!(),\n+        (A::One, B::Two) => todo!(),\n+        (A::Two, B::One) => todo!(),\n+        (A::Two, B::Two) => todo!(),\n     }\n }\n \"#,\n@@ -705,9 +705,9 @@ fn main() {\n     let b = B::One;\n     match (a, b) {\n         (A::Two, B::One) => {}\n-        $0(A::One, B::One) => {}\n-        (A::One, B::Two) => {}\n-        (A::Two, B::Two) => {}\n+        $0(A::One, B::One) => todo!(),\n+        (A::One, B::Two) => todo!(),\n+        (A::Two, B::Two) => todo!(),\n     }\n }\n \"#,\n@@ -736,7 +736,7 @@ fn main() {\n     match (a, b) {\n         (Some(_), _) => {}\n         (None, Some(_)) => {}\n-        $0(None, None) => {}\n+        $0(None, None) => todo!(),\n     }\n }\n \"#,\n@@ -801,8 +801,8 @@ enum A { One, Two }\n fn main() {\n     let a = A::One;\n     match (a, ) {\n-        $0(A::One,) => {}\n-        (A::Two,) => {}\n+        $0(A::One,) => todo!(),\n+        (A::Two,) => todo!(),\n     }\n }\n \"#,\n@@ -826,7 +826,7 @@ enum A { As }\n \n fn foo(a: &A) {\n     match a {\n-        $0A::As => {}\n+        $0A::As => todo!(),\n     }\n }\n \"#,\n@@ -851,7 +851,7 @@ enum A {\n \n fn foo(a: &mut A) {\n     match a {\n-        $0A::Es { x, y } => {}\n+        $0A::Es { x, y } => todo!(),\n     }\n }\n \"#,\n@@ -891,8 +891,8 @@ enum E { X, Y }\n \n fn main() {\n     match E::X {\n-        $0E::X => {}\n-        E::Y => {}\n+        $0E::X => todo!(),\n+        E::Y => todo!(),\n     }\n }\n \"#,\n@@ -919,8 +919,8 @@ use foo::E::X;\n \n fn main() {\n     match X {\n-        $0X => {}\n-        foo::E::Y => {}\n+        $0X => todo!(),\n+        foo::E::Y => todo!(),\n     }\n }\n \"#,\n@@ -947,7 +947,7 @@ fn foo(a: A) {\n     match a {\n         // foo bar baz\n         A::One => {}\n-        $0A::Two => {}\n+        $0A::Two => todo!(),\n         // This is where the rest should be\n     }\n }\n@@ -971,8 +971,8 @@ fn foo(a: A) {\n enum A { One, Two }\n fn foo(a: A) {\n     match a {\n-        $0A::One => {}\n-        A::Two => {}\n+        $0A::One => todo!(),\n+        A::Two => todo!(),\n         // foo bar baz\n     }\n }\n@@ -996,8 +996,8 @@ fn foo(a: A) {\n enum A { One, Two, }\n fn foo(a: A) {\n     match a {\n-        $0A::One => {}\n-        A::Two => {}\n+        $0A::One => todo!(),\n+        A::Two => todo!(),\n     }\n }\n \"#,\n@@ -1021,8 +1021,8 @@ fn foo(opt: Option<i32>) {\n             r#\"\n fn foo(opt: Option<i32>) {\n     match opt {\n-        Some(${0:_}) => {}\n-        None => {}\n+        Some(${0:_}) => todo!(),\n+        None => todo!(),\n     }\n }\n \"#,\n@@ -1054,9 +1054,9 @@ enum Test {\n \n fn foo(t: Test) {\n     m!(match t {\n-    $0Test::A => {}\n-    Test::B => {}\n-    Test::C => {}\n+    $0Test::A => todo!(),\n+    Test::B => todo!(),\n+    Test::C => todo!(),\n });\n }\"#,\n         );\n@@ -1076,4 +1076,44 @@ fn foo(tuple: (A, A)) {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn adds_comma_before_new_arms() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+fn foo(t: bool) {\n+    match $0t {\n+        true => 1 + 2\n+    }\n+}\"#,\n+            r#\"\n+fn foo(t: bool) {\n+    match t {\n+        true => 1 + 2,\n+        $0false => todo!(),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_add_extra_comma() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+fn foo(t: bool) {\n+    match $0t {\n+        true => 1 + 2,\n+    }\n+}\"#,\n+            r#\"\n+fn foo(t: bool) {\n+    match t {\n+        true => 1 + 2,\n+        $0false => todo!(),\n+    }\n+}\"#,\n+        );\n+    }\n }"}, {"sha": "de5d9e55a10f524c61f5eba3dc5f77880f2c2260", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86ca1764b66e65fcb986b7188b6a77e8b53f9758/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ca1764b66e65fcb986b7188b6a77e8b53f9758/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=86ca1764b66e65fcb986b7188b6a77e8b53f9758", "patch": "@@ -455,8 +455,8 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        $0Action::Move { distance } => {}\n-        Action::Stop => {}\n+        $0Action::Move { distance } => todo!(),\n+        Action::Stop => todo!(),\n     }\n }\n \"#####,"}, {"sha": "f7ee29d14cc06f9769fd582ca411e2e7d56a2188", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/86ca1764b66e65fcb986b7188b6a77e8b53f9758/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ca1764b66e65fcb986b7188b6a77e8b53f9758/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=86ca1764b66e65fcb986b7188b6a77e8b53f9758", "patch": "@@ -356,25 +356,34 @@ impl ast::MatchArm {\n impl ast::MatchArmList {\n     pub fn add_arm(&self, arm: ast::MatchArm) {\n         normalize_ws_between_braces(self.syntax());\n+        let mut elements = Vec::new();\n         let position = match self.arms().last() {\n             Some(last_arm) => {\n-                let curly = last_arm\n+                let comma = last_arm\n                     .syntax()\n                     .siblings_with_tokens(Direction::Next)\n                     .find(|it| it.kind() == T![,]);\n-                Position::after(curly.unwrap_or_else(|| last_arm.syntax().clone().into()))\n+                if needs_comma(&last_arm) && comma.is_none() {\n+                    elements.push(make::token(SyntaxKind::COMMA).into());\n+                }\n+                Position::after(comma.unwrap_or_else(|| last_arm.syntax().clone().into()))\n             }\n             None => match self.l_curly_token() {\n                 Some(it) => Position::after(it),\n                 None => Position::last_child_of(self.syntax()),\n             },\n         };\n         let indent = IndentLevel::from_node(self.syntax()) + 1;\n-        let elements = vec![\n-            make::tokens::whitespace(&format!(\"\\n{}\", indent)).into(),\n-            arm.syntax().clone().into(),\n-        ];\n+        elements.push(make::tokens::whitespace(&format!(\"\\n{}\", indent)).into());\n+        elements.push(arm.syntax().clone().into());\n+        if needs_comma(&arm) {\n+            elements.push(make::token(SyntaxKind::COMMA).into());\n+        }\n         ted::insert_all(position, elements);\n+\n+        fn needs_comma(arm: &ast::MatchArm) -> bool {\n+            arm.expr().map_or(false, |e| !e.is_block_like())\n+        }\n     }\n }\n "}, {"sha": "6f687a7883effcb36d1d8e106de6f8885b961f5b", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86ca1764b66e65fcb986b7188b6a77e8b53f9758/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ca1764b66e65fcb986b7188b6a77e8b53f9758/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=86ca1764b66e65fcb986b7188b6a77e8b53f9758", "patch": "@@ -275,6 +275,7 @@ fn check_todo(path: &Path, text: &str) {\n         // Some of our assists generate `todo!()`.\n         \"handlers/add_turbo_fish.rs\",\n         \"handlers/generate_function.rs\",\n+        \"handlers/fill_match_arms.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in\n         // `ast::make`.\n         \"ast/make.rs\","}]}