{"sha": "666e7148d167de551a7c3692caf9966f49773f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NmU3MTQ4ZDE2N2RlNTUxYTdjMzY5MmNhZjk5NjZmNDk3NzNmNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-08T19:47:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-08T19:47:31Z"}, "message": "Auto merge of #41148 - arielb1:dead-unwind, r=nagisa\n\nborrowck::mir::dataflow: ignore unwind edges of empty drops\n\nThis avoids creating drop flags in many unnecessary situations.\n\nFixes #41110.\n\nr? @nagisa\n\nbeta-nominating because regression. However, that is merely a small perf regression and codegen changes are always risky, so we might let this slide for 1.17.", "tree": {"sha": "2df5250357bfa4400c6713ca6e106a93b431ac6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df5250357bfa4400c6713ca6e106a93b431ac6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666e7148d167de551a7c3692caf9966f49773f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666e7148d167de551a7c3692caf9966f49773f4c", "html_url": "https://github.com/rust-lang/rust/commit/666e7148d167de551a7c3692caf9966f49773f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666e7148d167de551a7c3692caf9966f49773f4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61011761deeab9e308e6d103b1dc7aaf334f6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61011761deeab9e308e6d103b1dc7aaf334f6e3", "html_url": "https://github.com/rust-lang/rust/commit/a61011761deeab9e308e6d103b1dc7aaf334f6e3"}, {"sha": "69797986879f12db067f5cd8fb89c193548b04f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/69797986879f12db067f5cd8fb89c193548b04f5", "html_url": "https://github.com/rust-lang/rust/commit/69797986879f12db067f5cd8fb89c193548b04f5"}], "stats": {"total": 212, "additions": 174, "deletions": 38}, "files": [{"sha": "f0f082a2561cca6f3814dd1acaf46b2ec4828805", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/666e7148d167de551a7c3692caf9966f49773f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666e7148d167de551a7c3692caf9966f49773f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=666e7148d167de551a7c3692caf9966f49773f4c", "patch": "@@ -181,6 +181,7 @@ pub struct DataflowAnalysis<'a, 'tcx: 'a, O>\n     where O: BitDenotation\n {\n     flow_state: DataflowState<O>,\n+    dead_unwinds: &'a IdxSet<mir::BasicBlock>,\n     mir: &'a Mir<'tcx>,\n }\n \n@@ -377,6 +378,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n {\n     pub fn new(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                mir: &'a Mir<'tcx>,\n+               dead_unwinds: &'a IdxSet<mir::BasicBlock>,\n                denotation: D) -> Self {\n         let bits_per_block = denotation.bits_per_block();\n         let usize_bits = mem::size_of::<usize>() * 8;\n@@ -397,6 +399,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n \n         DataflowAnalysis {\n             mir: mir,\n+            dead_unwinds: dead_unwinds,\n             flow_state: DataflowState {\n                 sets: AllSets {\n                     bits_per_block: bits_per_block,\n@@ -452,7 +455,9 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n                 ref target, value: _, location: _, unwind: Some(ref unwind)\n             } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n-                self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n+                if !self.dead_unwinds.contains(&bb) {\n+                    self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n+                }\n             }\n             mir::TerminatorKind::SwitchInt { ref targets, .. } => {\n                 for target in targets {\n@@ -461,7 +466,9 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n             }\n             mir::TerminatorKind::Call { ref cleanup, ref destination, func: _, args: _ } => {\n                 if let Some(ref unwind) = *cleanup {\n-                    self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n+                    if !self.dead_unwinds.contains(&bb) {\n+                        self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n+                    }\n                 }\n                 if let Some((ref dest_lval, ref dest_bb)) = *destination {\n                     // N.B.: This must be done *last*, after all other"}, {"sha": "713e656666271a97c32cae318612ddb3af349bdf", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 81, "deletions": 32, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/666e7148d167de551a7c3692caf9966f49773f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666e7148d167de551a7c3692caf9966f49773f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=666e7148d167de551a7c3692caf9966f49773f4c", "patch": "@@ -11,8 +11,8 @@\n use super::gather_moves::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n use super::dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n use super::dataflow::{DataflowResults};\n-use super::{drop_flag_effects_for_location, on_all_children_bits};\n-use super::on_lookup_result_bits;\n+use super::{on_all_children_bits, on_all_drop_children_bits};\n+use super::{drop_flag_effects_for_location, on_lookup_result_bits};\n use super::MoveDataParamEnv;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n@@ -24,6 +24,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_mir::util::patch::MirPatch;\n use rustc_mir::util::elaborate_drops::{DropFlagState, elaborate_drop};\n use rustc_mir::util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n+use syntax::ast;\n use syntax_pos::Span;\n \n use std::fmt;\n@@ -49,12 +50,13 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n                 move_data: move_data,\n                 param_env: param_env\n             };\n+            let dead_unwinds = find_dead_unwinds(tcx, mir, id, &env);\n             let flow_inits =\n-                super::do_dataflow(tcx, mir, id, &[],\n+                super::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n                                    MaybeInitializedLvals::new(tcx, mir, &env),\n                                    |bd, p| &bd.move_data().move_paths[p]);\n             let flow_uninits =\n-                super::do_dataflow(tcx, mir, id, &[],\n+                super::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n                                    MaybeUninitializedLvals::new(tcx, mir, &env),\n                                    |bd, p| &bd.move_data().move_paths[p]);\n \n@@ -74,6 +76,67 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n \n impl Pass for ElaborateDrops {}\n \n+/// Return the set of basic blocks whose unwind edges are known\n+/// to not be reachable, because they are `drop` terminators\n+/// that can't drop anything.\n+fn find_dead_unwinds<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    id: ast::NodeId,\n+    env: &MoveDataParamEnv<'tcx>)\n+    -> IdxSetBuf<BasicBlock>\n+{\n+    debug!(\"find_dead_unwinds({:?})\", mir.span);\n+    // We only need to do this pass once, because unwind edges can only\n+    // reach cleanup blocks, which can't have unwind edges themselves.\n+    let mut dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n+    let flow_inits =\n+        super::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                           MaybeInitializedLvals::new(tcx, mir, &env),\n+                           |bd, p| &bd.move_data().move_paths[p]);\n+    for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n+        match bb_data.terminator().kind {\n+            TerminatorKind::Drop { ref location, unwind: Some(_), .. } |\n+            TerminatorKind::DropAndReplace { ref location, unwind: Some(_), .. } => {\n+                let mut init_data = InitializationData {\n+                    live: flow_inits.sets().on_entry_set_for(bb.index()).to_owned(),\n+                    dead: IdxSetBuf::new_empty(env.move_data.move_paths.len()),\n+                };\n+                debug!(\"find_dead_unwinds @ {:?}: {:?}; init_data={:?}\",\n+                       bb, bb_data, init_data.live);\n+                for stmt in 0..bb_data.statements.len() {\n+                    let loc = Location { block: bb, statement_index: stmt };\n+                    init_data.apply_location(tcx, mir, env, loc);\n+                }\n+\n+                let path = match env.move_data.rev_lookup.find(location) {\n+                    LookupResult::Exact(e) => e,\n+                    LookupResult::Parent(..) => {\n+                        debug!(\"find_dead_unwinds: has parent; skipping\");\n+                        continue\n+                    }\n+                };\n+\n+                debug!(\"find_dead_unwinds @ {:?}: path({:?})={:?}\", bb, location, path);\n+\n+                let mut maybe_live = false;\n+                on_all_drop_children_bits(tcx, mir, &env, path, |child| {\n+                    let (child_maybe_live, _) = init_data.state(child);\n+                    maybe_live |= child_maybe_live;\n+                });\n+\n+                debug!(\"find_dead_unwinds @ {:?}: maybe_live={}\", bb, maybe_live);\n+                if !maybe_live {\n+                    dead_unwinds.add(&bb);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    dead_unwinds\n+}\n+\n struct InitializationData {\n     live: IdxSetBuf<MovePathIndex>,\n     dead: IdxSetBuf<MovePathIndex>\n@@ -144,17 +207,14 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n                 let mut some_live = false;\n                 let mut some_dead = false;\n                 let mut children_count = 0;\n-                on_all_children_bits(\n-                    self.tcx(), self.mir(), self.ctxt.move_data(),\n-                    path, |child| {\n-                        if self.ctxt.path_needs_drop(child) {\n-                            let (live, dead) = self.init_data.state(child);\n-                            debug!(\"elaborate_drop: state({:?}) = {:?}\",\n-                                   child, (live, dead));\n-                            some_live |= live;\n-                            some_dead |= dead;\n-                            children_count += 1;\n-                        }\n+                on_all_drop_children_bits(\n+                    self.tcx(), self.mir(), self.ctxt.env, path, |child| {\n+                        let (live, dead) = self.init_data.state(child);\n+                        debug!(\"elaborate_drop: state({:?}) = {:?}\",\n+                               child, (live, dead));\n+                        some_live |= live;\n+                        some_dead |= dead;\n+                        children_count += 1;\n                     });\n                 ((some_live, some_dead), children_count != 1)\n             }\n@@ -276,15 +336,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         self.patch\n     }\n \n-    fn path_needs_drop(&self, path: MovePathIndex) -> bool\n-    {\n-        let lvalue = &self.move_data().move_paths[path].lvalue;\n-        let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n-        debug!(\"path_needs_drop({:?}, {:?} : {:?})\", path, lvalue, ty);\n-\n-        self.tcx.type_needs_drop_given_env(ty, self.param_env())\n-    }\n-\n     fn collect_drop_flags(&mut self)\n     {\n         for (bb, data) in self.mir.basic_blocks().iter_enumerated() {\n@@ -318,14 +369,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 }\n             };\n \n-            on_all_children_bits(self.tcx, self.mir, self.move_data(), path, |child| {\n-                if self.path_needs_drop(child) {\n-                    let (maybe_live, maybe_dead) = init_data.state(child);\n-                    debug!(\"collect_drop_flags: collecting {:?} from {:?}@{:?} - {:?}\",\n-                           child, location, path, (maybe_live, maybe_dead));\n-                    if maybe_live && maybe_dead {\n-                        self.create_drop_flag(child)\n-                    }\n+            on_all_drop_children_bits(self.tcx, self.mir, self.env, path, |child| {\n+                let (maybe_live, maybe_dead) = init_data.state(child);\n+                debug!(\"collect_drop_flags: collecting {:?} from {:?}@{:?} - {:?}\",\n+                       child, location, path, (maybe_live, maybe_dead));\n+                if maybe_live && maybe_dead {\n+                    self.create_drop_flag(child)\n                 }\n             });\n         }"}, {"sha": "dc01cbe5e7605eb3a4fd4a9e19e269d25fe531a8", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/666e7148d167de551a7c3692caf9966f49773f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666e7148d167de551a7c3692caf9966f49773f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=666e7148d167de551a7c3692caf9966f49773f4c", "patch": "@@ -17,6 +17,7 @@ use rustc::mir::{self, BasicBlock, BasicBlockData, Mir, Statement, Terminator, L\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc_mir::util::elaborate_drops::DropFlagState;\n+use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n \n mod abs_domain;\n pub mod elaborate_drops;\n@@ -64,14 +65,18 @@ pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n     let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n     let move_data = MoveData::gather_moves(mir, tcx, &param_env);\n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n+    let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let flow_inits =\n-        do_dataflow(tcx, mir, id, attributes, MaybeInitializedLvals::new(tcx, mir, &mdpe),\n+        do_dataflow(tcx, mir, id, attributes, &dead_unwinds,\n+                    MaybeInitializedLvals::new(tcx, mir, &mdpe),\n                     |bd, i| &bd.move_data().move_paths[i]);\n     let flow_uninits =\n-        do_dataflow(tcx, mir, id, attributes, MaybeUninitializedLvals::new(tcx, mir, &mdpe),\n+        do_dataflow(tcx, mir, id, attributes, &dead_unwinds,\n+                    MaybeUninitializedLvals::new(tcx, mir, &mdpe),\n                     |bd, i| &bd.move_data().move_paths[i]);\n     let flow_def_inits =\n-        do_dataflow(tcx, mir, id, attributes, DefinitelyInitializedLvals::new(tcx, mir, &mdpe),\n+        do_dataflow(tcx, mir, id, attributes, &dead_unwinds,\n+                    DefinitelyInitializedLvals::new(tcx, mir, &mdpe),\n                     |bd, i| &bd.move_data().move_paths[i]);\n \n     if has_rustc_mir_with(attributes, \"rustc_peek_maybe_init\").is_some() {\n@@ -108,6 +113,7 @@ fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 mir: &Mir<'tcx>,\n                                 node_id: ast::NodeId,\n                                 attributes: &[ast::Attribute],\n+                                dead_unwinds: &IdxSet<BasicBlock>,\n                                 bd: BD,\n                                 p: P)\n                                 -> DataflowResults<BD>\n@@ -137,7 +143,7 @@ fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         node_id: node_id,\n         print_preflow_to: print_preflow_to,\n         print_postflow_to: print_postflow_to,\n-        flow_state: DataflowAnalysis::new(tcx, mir, bd),\n+        flow_state: DataflowAnalysis::new(tcx, mir, dead_unwinds, bd),\n     };\n \n     mbcx.dataflow(p);\n@@ -303,6 +309,27 @@ fn on_all_children_bits<'a, 'tcx, F>(\n     on_all_children_bits(tcx, mir, move_data, move_path_index, &mut each_child);\n }\n \n+fn on_all_drop_children_bits<'a, 'tcx, F>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    ctxt: &MoveDataParamEnv<'tcx>,\n+    path: MovePathIndex,\n+    mut each_child: F)\n+    where F: FnMut(MovePathIndex)\n+{\n+    on_all_children_bits(tcx, mir, &ctxt.move_data, path, |child| {\n+        let lvalue = &ctxt.move_data.move_paths[path].lvalue;\n+        let ty = lvalue.ty(mir, tcx).to_ty(tcx);\n+        debug!(\"on_all_drop_children_bits({:?}, {:?} : {:?})\", path, lvalue, ty);\n+\n+        if tcx.type_needs_drop_given_env(ty, &ctxt.param_env) {\n+            each_child(child);\n+        } else {\n+            debug!(\"on_all_drop_children_bits - skipping\")\n+        }\n+    })\n+}\n+\n fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,"}, {"sha": "fec635b3abf60287a00c1b9504dfaee9caf64477", "filename": "src/test/mir-opt/issue-41110.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/666e7148d167de551a7c3692caf9966f49773f4c/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666e7148d167de551a7c3692caf9966f49773f4c/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=666e7148d167de551a7c3692caf9966f49773f4c", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that we don't emit multiple drop flags when they are not needed.\n+\n+fn main() {\n+    let x = S.other(S.id());\n+}\n+\n+pub fn test() {\n+    let u = S;\n+    let mut v = S;\n+    drop(v);\n+    v = u;\n+}\n+\n+struct S;\n+impl Drop for S {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+impl S {\n+    fn id(self) -> Self { self }\n+    fn other(self, s: Self) {}\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.ElaborateDrops.after.mir\n+//    let mut _2: S;\n+//    let mut _3: ();\n+//    let mut _4: S;\n+//    let mut _5: S;\n+//    let mut _6: bool;\n+//\n+//    bb0: {\n+// END rustc.node4.ElaborateDrops.after.mir\n+// START rustc.node13.ElaborateDrops.after.mir\n+//    let mut _2: ();\n+//    let mut _4: ();\n+//    let mut _5: S;\n+//    let mut _6: S;\n+//    let mut _7: bool;\n+//\n+//    bb0: {\n+// END rustc.node13.ElaborateDrops.after.mir"}]}