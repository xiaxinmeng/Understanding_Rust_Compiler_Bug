{"sha": "3e9d189187f0ff504ed5370eacc096b9426e4d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWQxODkxODdmMGZmNTA0ZWQ1MzcwZWFjYzA5NmI5NDI2ZTRkNjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T14:26:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T14:26:19Z"}, "message": "Rollup merge of #64738 - gnzlbg:miri_norm_abi, r=oli-obk\n\nAdd const-eval support for SIMD types, insert, and extract\n\nThis adds initial support for constant-evaluation of Abi::Vector types.\n\nr? @oli-obk", "tree": {"sha": "37d9f48f1efeb96005c1d8a30df9aaf60b1e6de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d9f48f1efeb96005c1d8a30df9aaf60b1e6de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9d189187f0ff504ed5370eacc096b9426e4d66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi3kMCRBK7hj4Ov3rIwAAdHIIAH/uctgBiLhodyovYn5FI6lU\nVAW7CFEVT2bZnlRJIPtMJbSPzhSCceE8/qB7kcebl7I12RIYrHy3KP/KSd7nHCs8\nDHoJOGhHY1//pGMnHK4YPp6fm+3cGuQMM3dVZ/+MVm6UBHoLSahk6k7liy2537Fj\nzjKiQ624Ev7jdb8I5AwtoIwP/Q2de8P9I7tB3BQ3zrRKaLL03FrQ9nBUl+Yr1vAe\nFD7Pb2JGVup0EtqUtQAh/n/UlCvm378W/SjBnyFZZ4iIavVytqMrGpFBcsbL8zKg\nWRW7qjD62oxz4y4jSgnQVAgQLhHJ4wacIhjVN+N8wwvTdnm94tXJ1LgRvihtB38=\n=XYgR\n-----END PGP SIGNATURE-----\n", "payload": "tree 37d9f48f1efeb96005c1d8a30df9aaf60b1e6de5\nparent da7812785a7c1eb2654e8d09a0ba31fab0858712\nparent 5ecb7eb161e75ab33ca015e7f717424f32af3d59\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569421579 +0200\ncommitter GitHub <noreply@github.com> 1569421579 +0200\n\nRollup merge of #64738 - gnzlbg:miri_norm_abi, r=oli-obk\n\nAdd const-eval support for SIMD types, insert, and extract\n\nThis adds initial support for constant-evaluation of Abi::Vector types.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d189187f0ff504ed5370eacc096b9426e4d66", "html_url": "https://github.com/rust-lang/rust/commit/3e9d189187f0ff504ed5370eacc096b9426e4d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d189187f0ff504ed5370eacc096b9426e4d66/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7812785a7c1eb2654e8d09a0ba31fab0858712", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7812785a7c1eb2654e8d09a0ba31fab0858712", "html_url": "https://github.com/rust-lang/rust/commit/da7812785a7c1eb2654e8d09a0ba31fab0858712"}, {"sha": "5ecb7eb161e75ab33ca015e7f717424f32af3d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ecb7eb161e75ab33ca015e7f717424f32af3d59", "html_url": "https://github.com/rust-lang/rust/commit/5ecb7eb161e75ab33ca015e7f717424f32af3d59"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "5fc23b4a69ec576d958f7836536d4e6d040c2548", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=3e9d189187f0ff504ed5370eacc096b9426e4d66", "patch": "@@ -239,7 +239,52 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"transmute\" => {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n+            \"simd_insert\" => {\n+                let index = self.read_scalar(args[1])?.to_u32()? as u64;\n+                let scalar = args[2];\n+                let input = args[0];\n+                let (len, e_ty) = self.read_vector_ty(input);\n+                assert!(\n+                    index < len,\n+                    \"Index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n+                    index, e_ty, len\n+                );\n+                assert_eq!(\n+                    input.layout, dest.layout,\n+                    \"Return type `{}` must match vector type `{}`\",\n+                    dest.layout.ty, input.layout.ty\n+                );\n+                assert_eq!(\n+                    scalar.layout.ty, e_ty,\n+                    \"Scalar type `{}` must match vector element type `{}`\",\n+                    scalar.layout.ty, e_ty\n+                );\n \n+                for i in 0..len {\n+                    let place = self.place_field(dest, i)?;\n+                    let value = if i == index {\n+                        scalar\n+                    } else {\n+                        self.operand_field(input, i)?\n+                    };\n+                    self.copy_op(value, place)?;\n+                }\n+            }\n+            \"simd_extract\" => {\n+                let index = self.read_scalar(args[1])?.to_u32()? as _;\n+                let (len, e_ty) = self.read_vector_ty(args[0]);\n+                assert!(\n+                    index < len,\n+                    \"index `{}` is out-of-bounds of vector type `{}` with length `{}`\",\n+                    index, e_ty, len\n+                );\n+                assert_eq!(\n+                    e_ty, dest.layout.ty,\n+                    \"Return type `{}` must match vector element type `{}`\",\n+                    dest.layout.ty, e_ty\n+                );\n+                self.copy_op(self.operand_field(args[0], index)?, dest)?;\n+            }\n             _ => return Ok(false),\n         }\n "}, {"sha": "afaf9d7ed9d67072c1ebf7902e8e2ac263b58f70", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=3e9d189187f0ff504ed5370eacc096b9426e4d66", "patch": "@@ -335,6 +335,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Read vector length and element type\n+    pub fn read_vector_ty(\n+        &self, op: OpTy<'tcx, M::PointerTag>\n+    ) -> (u64, &rustc::ty::TyS<'tcx>) {\n+        if let layout::Abi::Vector { .. } = op.layout.abi {\n+            (op.layout.ty.simd_size(*self.tcx) as _, op.layout.ty.simd_type(*self.tcx))\n+        } else {\n+            bug!(\"Type `{}` is not a SIMD vector type\", op.layout.ty)\n+        }\n+    }\n+\n     /// Read a scalar from a place\n     pub fn read_scalar(\n         &self,"}, {"sha": "8666c937ce4c2e45cf19c246b4c72ff0cc5409c8", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=3e9d189187f0ff504ed5370eacc096b9426e4d66", "patch": "@@ -249,9 +249,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n-                if caller_abi != Abi::RustIntrinsic {\n-                    throw_unsup!(FunctionAbiMismatch(caller_abi, Abi::RustIntrinsic))\n-                }\n                 // The intrinsic itself cannot diverge, so if we got here without a return\n                 // place... (can happen e.g., for transmute returning `!`)\n                 let dest = match dest {"}, {"sha": "8a6dcd1d2b476f2cce48af9e796c864701ad0f0b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3e9d189187f0ff504ed5370eacc096b9426e4d66", "patch": "@@ -557,6 +557,8 @@ impl Qualif for IsNotPromotable {\n                             | \"saturating_add\"\n                             | \"saturating_sub\"\n                             | \"transmute\"\n+                            | \"simd_insert\"\n+                            | \"simd_extract\"\n                             => return true,\n \n                             _ => {}"}, {"sha": "d3462d802ea4e9c6fd666edabea7d54baac0b13b", "filename": "src/test/ui/consts/const-eval/simd/insert_extract.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9d189187f0ff504ed5370eacc096b9426e4d66/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs?ref=3e9d189187f0ff504ed5370eacc096b9426e4d66", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+#![feature(const_fn)]\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)] struct i8x1(i8);\n+#[repr(simd)] struct u16x2(u16, u16);\n+#[repr(simd)] struct f32x3(f32, f32, f32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n+}\n+\n+fn main() {\n+    {\n+        const U: i8x1 = i8x1(13);\n+        const V: i8x1 = unsafe { simd_insert(U, 0_u32, 42_i8) };\n+        const X0: i8 = V.0;\n+        const Y0: i8 = unsafe { simd_extract(V, 0) };\n+        assert_eq!(X0, 42);\n+        assert_eq!(Y0, 42);\n+    }\n+    {\n+        const U: u16x2 = u16x2(13, 14);\n+        const V: u16x2 = unsafe { simd_insert(U, 1_u32, 42_u16) };\n+        const X0: u16 = V.0;\n+        const X1: u16 = V.1;\n+        const Y0: u16 = unsafe { simd_extract(V, 0) };\n+        const Y1: u16 = unsafe { simd_extract(V, 1) };\n+        assert_eq!(X0, 13);\n+        assert_eq!(X1, 42);\n+        assert_eq!(Y0, 13);\n+        assert_eq!(Y1, 42);\n+    }\n+    {\n+        const U: f32x3 = f32x3(13., 14., 15.);\n+        const V: f32x3 = unsafe { simd_insert(U, 1_u32, 42_f32) };\n+        const X0: f32 = V.0;\n+        const X1: f32 = V.1;\n+        const X2: f32 = V.2;\n+        const Y0: f32 = unsafe { simd_extract(V, 0) };\n+        const Y1: f32 = unsafe { simd_extract(V, 1) };\n+        const Y2: f32 = unsafe { simd_extract(V, 2) };\n+        assert_eq!(X0, 13.);\n+        assert_eq!(X1, 42.);\n+        assert_eq!(X2, 15.);\n+        assert_eq!(Y0, 13.);\n+        assert_eq!(Y1, 42.);\n+        assert_eq!(Y2, 15.);\n+    }\n+}"}]}