{"sha": "fe2b1615de352b65827fc73ce409a160901617e7", "node_id": "C_kwDOAAsO6NoAKGZlMmIxNjE1ZGUzNTJiNjU4MjdmYzczY2U0MDlhMTYwOTAxNjE3ZTc", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-09-25T16:57:57Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-09-27T13:20:40Z"}, "message": "Remove GenericParams::new", "tree": {"sha": "2b4db195da514b727965cfcf25c2b65cdab478ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4db195da514b727965cfcf25c2b65cdab478ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe2b1615de352b65827fc73ce409a160901617e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2b1615de352b65827fc73ce409a160901617e7", "html_url": "https://github.com/rust-lang/rust/commit/fe2b1615de352b65827fc73ce409a160901617e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe2b1615de352b65827fc73ce409a160901617e7/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0", "html_url": "https://github.com/rust-lang/rust/commit/6e4bf227247acbb62e1c9c000cf8ce8d8cbfdfc0"}], "stats": {"total": 81, "additions": 1, "deletions": 80}, "files": [{"sha": "fb0db5a57689c19278a7be2567af71036c1fc4c0", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 80, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/fe2b1615de352b65827fc73ce409a160901617e7/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe2b1615de352b65827fc73ce409a160901617e7/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=fe2b1615de352b65827fc73ce409a160901617e7", "patch": "@@ -6,7 +6,7 @@\n use base_db::FileId;\n use either::Either;\n use hir_expand::{\n-    name::{name, AsName, Name},\n+    name::{AsName, Name},\n     HirFileId, InFile,\n };\n use la_arena::{Arena, ArenaMap};\n@@ -153,85 +153,6 @@ impl GenericParams {\n         }\n     }\n \n-    fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {\n-        let mut generics = GenericParams::default();\n-        let mut sm = SourceMap::default();\n-\n-        // FIXME: add `: Sized` bound for everything except for `Self` in traits\n-        let file_id = match def {\n-            GenericDefId::FunctionId(it) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                // lower `impl Trait` in arguments\n-                let data = db.function_data(it);\n-                for param in &data.params {\n-                    generics.fill_implicit_impl_trait_args(param);\n-                }\n-                src.file_id\n-            }\n-            GenericDefId::AdtId(AdtId::StructId(it)) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                src.file_id\n-            }\n-            GenericDefId::AdtId(AdtId::UnionId(it)) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                src.file_id\n-            }\n-            GenericDefId::AdtId(AdtId::EnumId(it)) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                src.file_id\n-            }\n-            GenericDefId::TraitId(it) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-\n-                // traits get the Self type as an implicit first type parameter\n-                let self_param_id = generics.types.alloc(TypeParamData {\n-                    name: Some(name![Self]),\n-                    default: None,\n-                    provenance: TypeParamProvenance::TraitSelf,\n-                });\n-                sm.type_params.insert(self_param_id, Either::Right(src.value.clone()));\n-                // add super traits as bounds on Self\n-                // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n-                let self_param = TypeRef::Path(name![Self].into());\n-                generics.fill_bounds(&lower_ctx, &src.value, Either::Left(self_param));\n-\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                src.file_id\n-            }\n-            GenericDefId::TypeAliasId(it) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                src.file_id\n-            }\n-            // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n-            // type-parameter, but rather is a type-alias for impl's target\n-            // type, so this is handled by the resolver.\n-            GenericDefId::ImplId(it) => {\n-                let src = it.lookup(db).source(db);\n-                let lower_ctx = LowerCtx::new(db, src.file_id);\n-\n-                generics.fill(&lower_ctx, &mut sm, &src.value);\n-                src.file_id\n-            }\n-            // We won't be using this ID anyway\n-            GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => FileId(!0).into(),\n-        };\n-\n-        generics.shrink_to_fit();\n-        (generics, InFile::new(file_id, sm))\n-    }\n-\n     pub(crate) fn fill(\n         &mut self,\n         lower_ctx: &LowerCtx,"}]}