{"sha": "06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZWRlMzUwYzJmODM2OWNjOWY2OWQwZDhlMDNmOWJjNDk3OTQ0YTQ=", "commit": {"author": {"name": "Without Boats", "email": "woboats@gmail.com", "date": "2020-01-31T13:26:24Z"}, "committer": {"name": "Without Boats", "email": "woboats@gmail.com", "date": "2020-03-23T14:44:58Z"}, "message": "Add Wake trait for safe construction of Wakers.\n\nCurrently, constructing a waker requires calling the unsafe\n`Waker::from_raw` API. This API requires the user to manually construct\na vtable for the waker themself - which is both cumbersome and very\nerror prone. This API would provide an ergonomic, straightforward and\nguaranteed memory-safe way of constructing a waker.\n\nIt has been our longstanding intention that the `Waker` type essentially\nfunction as an `Arc<dyn Wake>`, with a `Wake` trait as defined here. Two\nconsiderations prevented the original API from being shipped as simply\nan `Arc<dyn Wake>`:\n\n- We want to support futures on embedded systems, which may not have an\n  allocator, and in optimized executors for which this API may not be\n  best-suited. Therefore, we have always explicitly supported the\n  maximally-flexible (but also memory-unsafe) `RawWaker` API, and\n  `Waker` has always lived in libcore.\n- Because `Waker` lives in libcore and `Arc` lives in liballoc, it has\n  not been feasible to provide a constructor for `Waker` from `Arc<dyn\n  Wake>`.\n\nTherefore, the Wake trait was left out of the initial version of the\ntask waker API.\n\nHowever, as Rust 1.41, it is possible under the more flexible orphan\nrules to implement `From<Arc<W>> for Waker where W: Wake` in liballoc.\nTherefore, we can now define this constructor even though `Waker` lives\nin libcore.\n\nThis PR adds these APIs:\n\n- A `Wake` trait, which contains two methods\n    - A required method `wake`, which is called by `Waker::wake`\n    - A provided method `wake_by_ref`, which is called by\n      `Waker::wake_by_ref` and which implementors can override if they\n      can optimize this use case.\n- An implementation of `From<Arc<W>> for Waker where W: Wake + Send +\n  Sync + 'static`\n- A similar implementation of `From<Arc<W>> for RawWaker`.", "tree": {"sha": "55907eb5af530f629d22d5e367801a70e1d7662c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55907eb5af530f629d22d5e367801a70e1d7662c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "html_url": "https://github.com/rust-lang/rust/commit/06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/comments", "author": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "committer": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "html_url": "https://github.com/rust-lang/rust/commit/5aa8f199c398644d9fc2bb9ac8cffd14f985686d"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "4d9e8cd34608c38b4ec4848ac98cc50847b59a59", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "patch": "@@ -161,6 +161,7 @@ pub mod str;\n pub mod string;\n #[cfg(target_has_atomic = \"ptr\")]\n pub mod sync;\n+pub mod task;\n #[cfg(test)]\n mod tests;\n pub mod vec;"}, {"sha": "8e0466d9a2ff57cdfa76940b433e798eb97475cc", "filename": "src/liballoc/task.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "patch": "@@ -0,0 +1,91 @@\n+#![unstable(feature = \"wake_trait\", issue = \"0\")]\n+//! Types and Traits for working with asynchronous tasks.\n+use core::mem;\n+use core::task::{Waker, RawWaker, RawWakerVTable};\n+\n+use crate::sync::Arc;\n+\n+/// The implementation of waking a task on an executor.\n+/// \n+/// This trait can be used to create a [`Waker`]. An executor can define an\n+/// implementation of this trait, and use that to construct a Waker to pass\n+/// to the tasks that are executed on that executor.\n+///\n+/// This trait is a memory-safe and ergonomic alternative to constructing a\n+/// [`RawWaker`]. It supports the common executor design in which the data\n+/// used to wake up a task is stored in an [`Arc`]. Some executors (especially\n+/// those for embedded systems) cannot use this API, which is way [`RawWaker`]\n+/// exists as an alternative for those systems.\n+#[unstable(feature = \"wake_trait\", issue = \"0\")]\n+pub trait Wake {\n+    /// Wake this task.\n+    #[unstable(feature = \"wake_trait\", issue = \"0\")]\n+    fn wake(self: Arc<Self>);\n+\n+    /// Wake this task without consuming the waker.\n+    ///\n+    /// If an executor supports a cheaper way to wake without consuming the\n+    /// waker, it should override this method. By default, it clones the\n+    /// [`Arc`] and calls `wake` on the clone.\n+    #[unstable(feature = \"wake_trait\", issue = \"0\")]\n+    fn wake_by_ref(self: &Arc<Self>) {\n+        self.clone().wake();\n+    }\n+}\n+\n+#[unstable(feature = \"wake_trait\", issue = \"0\")]\n+impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n+    fn from(waker: Arc<W>) -> Waker {\n+        unsafe {\n+            Waker::from_raw(raw_waker(waker))\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"wake_trait\", issue = \"0\")]\n+impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n+    fn from(waker: Arc<W>) -> RawWaker {\n+        raw_waker(waker)\n+    }\n+}\n+\n+// NB: This private function for constructing a RawWaker is used, rather than\n+// inlining this into the `From<Arc<W>> for RawWaker` impl, to ensure that\n+// the safety of `From<Arc<W>> for Waker` does not depend on the correct\n+// trait dispatch - instead both impls call this function directly and\n+// explicitly.\n+#[inline(always)]\n+fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n+\n+    // Increment the reference count of the arc to clone it.\n+    unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        mem::forget(waker.clone());\n+        raw_waker(waker)\n+    }\n+\n+    // Wake by value, moving the Arc into the Wake::wake function\n+    unsafe fn wake<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        Wake::wake(waker);\n+    }\n+\n+    // Wake by reference, forgetting the Arc to avoid decrementing the reference count\n+    unsafe fn wake_by_ref<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        Wake::wake_by_ref(&waker);\n+        mem::forget(waker);\n+    }\n+\n+    // Decrement the reference count of the Arc on drop\n+    unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        mem::drop(Arc::from_raw(waker as *const W));\n+    }\n+\n+    RawWaker::new(Arc::into_raw(waker) as *const (), &RawWakerVTable::new(\n+        clone_waker::<W>,\n+        wake::<W>,\n+        wake_by_ref::<W>,\n+        drop_waker::<W>,\n+    ))\n+}"}, {"sha": "ac6701e6119db7d5424a9d5a13c5d682b75596f2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ede350c2f8369cc9f69d0d8e03f9bc497944a4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=06ede350c2f8369cc9f69d0d8e03f9bc497944a4", "patch": "@@ -463,9 +463,14 @@ pub mod time;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub mod task {\n     //! Types and Traits for working with asynchronous tasks.\n+\n     #[doc(inline)]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub use core::task::*;\n+\n+    #[doc(inline)]\n+    #[unstable(feature = \"wake_trait\", issue = \"0\")]\n+    pub use alloc::task::*;\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}]}