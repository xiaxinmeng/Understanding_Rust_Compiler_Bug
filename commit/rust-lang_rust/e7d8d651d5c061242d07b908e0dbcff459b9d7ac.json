{"sha": "e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDhkNjUxZDVjMDYxMjQyZDA3YjkwOGUwZGJjZmY0NTliOWQ3YWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-04T07:26:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-04T07:26:20Z"}, "message": "add a comment explaining the idea", "tree": {"sha": "15d81b950977dc470ae42590424b0b785aa964f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d81b950977dc470ae42590424b0b785aa964f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "html_url": "https://github.com/rust-lang/rust/commit/e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d8d651d5c061242d07b908e0dbcff459b9d7ac/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75504eeffa58868e025853b5690714c8c149270e", "url": "https://api.github.com/repos/rust-lang/rust/commits/75504eeffa58868e025853b5690714c8c149270e", "html_url": "https://github.com/rust-lang/rust/commit/75504eeffa58868e025853b5690714c8c149270e"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "56ee35714f2002cc09c4eae9a0d5937382a6becc", "filename": "src/librustc_mir/borrow_check/nll/escaping_locals.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e7d8d651d5c061242d07b908e0dbcff459b9d7ac/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d8d651d5c061242d07b908e0dbcff459b9d7ac/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fescaping_locals.rs?ref=e7d8d651d5c061242d07b908e0dbcff459b9d7ac", "patch": "@@ -8,8 +8,39 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A MIR walk gathering a union-crfind of assigned locals, for the purpose of locating the ones\n-//! escaping into the output.\n+//! Identify those variables whose entire value will eventually be\n+//! returned from the fn via the RETURN_PLACE. As an optimization, we\n+//! can skip computing liveness results for those variables. The idea\n+//! is that the return type of the fn only ever contains free\n+//! regions. Therefore, the types of those variables are going to\n+//! ultimately be contrained to outlive those free regions -- since\n+//! free regions are always live for the entire body, this implies\n+//! that the liveness results are not important for those regions.\n+//! This is most important in the \"fns\" that we create to represent static\n+//! values, since those are often really quite large, and all regions in them\n+//! will ultimately be constrained to be `'static`. Two examples:\n+//!\n+//! ```\n+//! fn foo() -> &'static [u32] { &[] }\n+//! static FOO: &[u32] = &[];\n+//! ```\n+//!\n+//! In both these cases, the return value will only have static lifetime.\n+//!\n+//! NB: The simple logic here relies on the fact that outlives\n+//! relations in our analysis don't have locations. Otherwise, we\n+//! would have to restrict ourselves to values that are\n+//! *unconditionally* returned (which would still cover the \"big\n+//! static value\" case).\n+//!\n+//! The way that this code works is to use union-find -- we iterate\n+//! over the MIR and union together two variables X and Y if all\n+//! regions in the value of Y are going to be stored into X -- that\n+//! is, if `typeof(X): 'a` requires that `typeof(Y): 'a`. This means\n+//! that e.g. we can union together `x` and `y` if we have something\n+//! like `x = (y, 22)`, but not something like `x = y.f` (since there\n+//! may be regions in the type of `y` that do not appear in the field\n+//! `f`).\n \n use rustc::mir::visit::Visitor;\n use rustc::mir::*;"}]}