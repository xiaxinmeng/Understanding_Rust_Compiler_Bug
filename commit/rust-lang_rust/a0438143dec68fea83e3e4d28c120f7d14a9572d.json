{"sha": "a0438143dec68fea83e3e4d28c120f7d14a9572d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNDM4MTQzZGVjNjhmZWE4M2UzZTRkMjhjMTIwZjdkMTRhOTU3MmQ=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-01T20:48:06Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-01T20:51:49Z"}, "message": "collections: Implement FromIterator/Extendable for BitvSet", "tree": {"sha": "23620d1ff007b7e928a872a94a97af554b210683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23620d1ff007b7e928a872a94a97af554b210683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0438143dec68fea83e3e4d28c120f7d14a9572d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0438143dec68fea83e3e4d28c120f7d14a9572d", "html_url": "https://github.com/rust-lang/rust/commit/a0438143dec68fea83e3e4d28c120f7d14a9572d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0438143dec68fea83e3e4d28c120f7d14a9572d/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "html_url": "https://github.com/rust-lang/rust/commit/3737c537c3bb1aa96ddfd934fd4c48839249f5eb"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "02714c728ec7b5379cf699b65ed7e7b0d71fa6ff", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a0438143dec68fea83e3e4d28c120f7d14a9572d/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0438143dec68fea83e3e4d28c120f7d14a9572d/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=a0438143dec68fea83e3e4d28c120f7d14a9572d", "patch": "@@ -978,6 +978,21 @@ impl Default for BitvSet {\n     fn default() -> BitvSet { BitvSet::new() }\n }\n \n+impl FromIterator<bool> for BitvSet {\n+    fn from_iter<I:Iterator<bool>>(iterator: I) -> BitvSet {\n+        let mut ret = BitvSet::new();\n+        ret.extend(iterator);\n+        ret\n+    }\n+}\n+\n+impl Extendable<bool> for BitvSet {\n+    #[inline]\n+    fn extend<I: Iterator<bool>>(&mut self, iterator: I) {\n+        self.get_mut_ref().extend(iterator);\n+    }\n+}\n+\n impl BitvSet {\n     /// Create a new bit vector set with initially no contents.\n     ///\n@@ -1958,6 +1973,17 @@ mod tests {\n         assert_eq!(bitv.to_string().as_slice(), \"1011\");\n     }\n \n+    #[test]\n+    fn test_bitv_set_from_bools() {\n+        let bools = vec![true, false, true, true];\n+        let a: BitvSet = bools.iter().map(|n| *n).collect();\n+        let mut b = BitvSet::new();\n+        b.insert(0);\n+        b.insert(2);\n+        b.insert(3);\n+        assert_eq!(a, b);\n+    }\n+\n     #[test]\n     fn test_to_bools() {\n         let bools = vec!(false, false, true, false, false, true, true, false);\n@@ -1977,7 +2003,7 @@ mod tests {\n     #[test]\n     fn test_bitv_set_iterator() {\n         let bools = [true, false, true, true];\n-        let bitv = BitvSet::from_bitv(bools.iter().map(|n| *n).collect());\n+        let bitv: BitvSet = bools.iter().map(|n| *n).collect();\n \n         let idxs: Vec<uint> = bitv.iter().collect();\n         assert_eq!(idxs, vec!(0, 2, 3));"}]}