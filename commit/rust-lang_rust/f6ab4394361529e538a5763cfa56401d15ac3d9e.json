{"sha": "f6ab4394361529e538a5763cfa56401d15ac3d9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YWI0Mzk0MzYxNTI5ZTUzOGE1NzYzY2ZhNTY0MDFkMTVhYzNkOWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T02:00:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:50:56Z"}, "message": "extract parse_deref_expr", "tree": {"sha": "a3bce98a3dbf7ec8d2fe25214e856baecfb08d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3bce98a3dbf7ec8d2fe25214e856baecfb08d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6ab4394361529e538a5763cfa56401d15ac3d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ab4394361529e538a5763cfa56401d15ac3d9e", "html_url": "https://github.com/rust-lang/rust/commit/f6ab4394361529e538a5763cfa56401d15ac3d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6ab4394361529e538a5763cfa56401d15ac3d9e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada388b2b8c970978d1dc6139ed00f8661234f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada388b2b8c970978d1dc6139ed00f8661234f8c", "html_url": "https://github.com/rust-lang/rust/commit/ada388b2b8c970978d1dc6139ed00f8661234f8c"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "45d638849425c7d306895a956156653d300c90cd", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6ab4394361529e538a5763cfa56401d15ac3d9e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ab4394361529e538a5763cfa56401d15ac3d9e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f6ab4394361529e538a5763cfa56401d15ac3d9e", "patch": "@@ -475,12 +475,7 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 (lo.to(span), self.mk_unary(UnOp::Neg, e))\n             }\n-            token::BinOp(token::Star) => {\n-                self.bump();\n-                let e = self.parse_prefix_expr(None);\n-                let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (lo.to(span), self.mk_unary(UnOp::Deref, e))\n-            }\n+            token::BinOp(token::Star) => self.parse_deref_expr(lo)?,\n             token::BinOp(token::And) | token::AndAnd => self.parse_borrow_expr(lo)?,\n             token::Ident(..) if self.token.is_keyword(kw::Box) => self.parse_box_expr(lo)?,\n             token::Ident(..) if self.is_mistaken_not_ident_negation() => {\n@@ -491,14 +486,22 @@ impl<'a> Parser<'a> {\n         return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n     }\n \n+    /// Parse `*expr`.\n+    fn parse_deref_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n+        self.bump(); // `*`\n+        let expr = self.parse_prefix_expr(None);\n+        let (span, expr) = self.interpolated_or_expr_span(expr)?;\n+        Ok((lo.to(span), self.mk_unary(UnOp::Deref, expr)))\n+    }\n+\n     /// Parse `box expr`.\n     fn parse_box_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n-        self.bump();\n-        let e = self.parse_prefix_expr(None);\n-        let (span, e) = self.interpolated_or_expr_span(e)?;\n+        self.bump(); // `box`\n+        let expr = self.parse_prefix_expr(None);\n+        let (span, expr) = self.interpolated_or_expr_span(expr)?;\n         let span = lo.to(span);\n         self.sess.gated_spans.gate(sym::box_syntax, span);\n-        Ok((span, ExprKind::Box(e)))\n+        Ok((span, ExprKind::Box(expr)))\n     }\n \n     fn is_mistaken_not_ident_negation(&self) -> bool {"}]}