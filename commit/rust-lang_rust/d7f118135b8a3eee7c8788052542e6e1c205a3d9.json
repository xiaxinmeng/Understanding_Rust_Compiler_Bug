{"sha": "d7f118135b8a3eee7c8788052542e6e1c205a3d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjExODEzNWI4YTNlZWU3Yzg3ODgwNTI1NDJlNmUxYzIwNWEzZDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-07T22:11:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-07T22:11:43Z"}, "message": "Iterate type unification to drive the types a bit further down into the leaves of results with residual vars. Cheap but kinda works.", "tree": {"sha": "89e0f6a5e43d270fa91b6e4cf88933ff725de3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e0f6a5e43d270fa91b6e4cf88933ff725de3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f118135b8a3eee7c8788052542e6e1c205a3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f118135b8a3eee7c8788052542e6e1c205a3d9", "html_url": "https://github.com/rust-lang/rust/commit/d7f118135b8a3eee7c8788052542e6e1c205a3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f118135b8a3eee7c8788052542e6e1c205a3d9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e613c1648141ac757d1f0608ad845686ebbe97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e613c1648141ac757d1f0608ad845686ebbe97e", "html_url": "https://github.com/rust-lang/rust/commit/3e613c1648141ac757d1f0608ad845686ebbe97e"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "92fa13997a38175545bbf68a62004a42aade952f", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d7f118135b8a3eee7c8788052542e6e1c205a3d9/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f118135b8a3eee7c8788052542e6e1c205a3d9/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=d7f118135b8a3eee7c8788052542e6e1c205a3d9", "patch": "@@ -551,6 +551,24 @@ fn count_ty_params(@t ty) -> uint {\n     ret _vec.len[ast.def_id](*param_ids);\n }\n \n+fn type_contains_ty_vars(@t ty) -> bool {\n+    state obj checker(@mutable bool has_vars) {\n+        fn fold_simple_ty(@t ty) -> @t {\n+            alt (ty.struct) {\n+                case (ty_var(_)) {\n+                    *has_vars = true;\n+                }\n+                case (_) {}\n+            }\n+            ret ty;\n+        }\n+    }\n+\n+    let @mutable bool b = @mutable false;\n+    fold_ty(checker(b), ty);\n+    ret *b;\n+}\n+\n // Type accessors for substructures of types\n \n fn ty_fn_args(@t fty) -> vec[arg] {\n@@ -1197,7 +1215,21 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n     auto eqer = eq_int;\n     auto bindings = map.mk_hashmap[int,@ty.t](hasher, eqer);\n \n-    ret unify_step(bindings, expected, actual, handler);\n+    auto ures = unify_step(bindings, expected, actual, handler);\n+    while (true) {\n+        alt (ures) {\n+            case (ures_ok(?t)) {\n+                if (!type_contains_ty_vars(t)) {\n+                    ret ures;\n+                }\n+                ures = unify_step(bindings, t, actual, handler);\n+            }\n+            case (_) {\n+                ret ures;\n+            }\n+        }\n+    }\n+    fail;\n }\n \n fn type_err_to_str(&ty.type_err err) -> str {"}]}