{"sha": "e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YjY4MzA0ZWZjNDQ3YTdiY2QzNWIwNjUxMWY2ZGZkZmU5ZGExNmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-01T21:09:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-18T01:41:29Z"}, "message": "ty::layout: replicate `layout_of` setup for `fn_abi_of_{fn_ptr,instance}`.", "tree": {"sha": "43609e5fc3b6b2d7abbbe3e49e6dce498e9a3b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43609e5fc3b6b2d7abbbe3e49e6dce498e9a3b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "html_url": "https://github.com/rust-lang/rust/commit/e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319dec89e7cee269a4a9b029a2da846bb76ea813", "url": "https://api.github.com/repos/rust-lang/rust/commits/319dec89e7cee269a4a9b029a2da846bb76ea813", "html_url": "https://github.com/rust-lang/rust/commit/319dec89e7cee269a4a9b029a2da846bb76ea813"}], "stats": {"total": 434, "additions": 277, "deletions": 157}, "files": [{"sha": "6317e1d5d1abadae487ff4db4987e530e4b8dc75", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -5,7 +5,7 @@ mod pass_mode;\n mod returning;\n \n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n \n@@ -53,7 +53,7 @@ pub(crate) fn get_function_sig<'tcx>(\n     inst: Instance<'tcx>,\n ) -> Signature {\n     assert!(!inst.substs.needs_infer());\n-    clif_sig_from_fn_abi(tcx, triple, &FnAbi::of_instance(&RevealAllLayoutCx(tcx), inst, &[]))\n+    clif_sig_from_fn_abi(tcx, triple, &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, &[]))\n }\n \n /// Instance must be monomorphized\n@@ -355,9 +355,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         .map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx)))\n         .collect::<Vec<_>>();\n     let fn_abi = if let Some(instance) = instance {\n-        FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), instance, &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, &extra_args)\n     } else {\n-        FnAbi::of_fn_ptr(&RevealAllLayoutCx(fx.tcx), fn_ty.fn_sig(fx.tcx), &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), &extra_args)\n     };\n \n     let is_cold = instance\n@@ -525,7 +525,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                     def: ty::InstanceDef::Virtual(drop_instance.def_id(), 0),\n                     substs: drop_instance.substs,\n                 };\n-                let fn_abi = FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), virtual_drop, &[]);\n+                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, &[]);\n \n                 let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n                 let sig = fx.bcx.import_signature(sig);\n@@ -534,7 +534,7 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 assert!(!matches!(drop_instance.def, InstanceDef::Virtual(_, _)));\n \n-                let fn_abi = FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), drop_instance, &[]);\n+                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, &[]);\n \n                 let arg_value = drop_place.place_ref(\n                     fx,"}, {"sha": "872c7edc791ff6a49b6b9291fda6cc085a3e91d7", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -3,8 +3,7 @@\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::FnAbiExt;\n-use rustc_target::abi::call::FnAbi;\n+use rustc_middle::ty::layout::FnAbiOf;\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n@@ -62,7 +61,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         instance,\n         symbol_name,\n         mir,\n-        fn_abi: Some(FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n+        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n \n         bcx,\n         block_map,"}, {"sha": "4a8be89460fcf221a2ed5ddce1a178fef810711d", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -1,5 +1,7 @@\n use rustc_index::vec::IndexVec;\n-use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers};\n+use rustc_middle::ty::layout::{\n+    FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n+};\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -266,6 +268,20 @@ impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_fn_abi_err(err, span, fn_abi_request)\n+    }\n+}\n+\n impl<'tcx> layout::HasTyCtxt<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n@@ -378,6 +394,43 @@ impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n     }\n }\n \n+impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> ! {\n+        if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            match fn_abi_request {\n+                FnAbiRequest::OfFnPtr { sig, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_fn_ptr({}, {:?})` failed: {}\",\n+                        sig,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+                FnAbiRequest::OfInstance { instance, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_instance({}, {:?})` failed: {}\",\n+                        instance,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> layout::HasTyCtxt<'tcx> for RevealAllLayoutCx<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.0"}, {"sha": "5c4991f1fb667382809dc2bfc00896653a75072e", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -129,9 +129,7 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(uv)\n-            if fx.tcx.is_static(uv.def.did) =>\n-        {\n+        ConstKind::Unevaluated(uv) if fx.tcx.is_static(uv.def.did) => {\n             assert!(uv.substs(fx.tcx).is_empty());\n             assert!(uv.promoted.is_none());\n "}, {"sha": "0b80ef1c04e7636d28c56a4f4822ac7394fd9402", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -61,9 +61,8 @@ use cranelift_codegen::{\n     write::{FuncWriter, PlainWriter},\n };\n \n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_session::config::OutputType;\n-use rustc_target::abi::call::FnAbi;\n \n use crate::prelude::*;\n \n@@ -81,7 +80,7 @@ impl CommentWriter {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n-                format!(\"abi {:?}\", FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n+                format!(\"abi {:?}\", RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n                 String::new(),\n             ]\n         } else {"}, {"sha": "8e3aaf56382b1b067632edbb24e47c29ff2e384d", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -15,10 +15,12 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n+use rustc_middle::ty::layout::{\n+    FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers, TyAndLayout,\n+};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n-use rustc_target::abi::{self, Align, Size, WrappingRange};\n+use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;\n@@ -97,6 +99,20 @@ impl LayoutOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n     }\n }\n \n+impl FnAbiOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> ! {\n+        self.cx.handle_fn_abi_err(err, span, fn_abi_request)\n+    }\n+}\n+\n impl Deref for Builder<'_, 'll, 'tcx> {\n     type Target = CodegenCx<'ll, 'tcx>;\n "}, {"sha": "1a2aea015b1af2b8660c5f428816305caa5d14e5", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -4,15 +4,15 @@\n //! and methods are represented as just a fn ptr and not a full\n //! closure.\n \n-use crate::abi::{FnAbi, FnAbiLlvmExt};\n+use crate::abi::FnAbiLlvmExt;\n use crate::attributes;\n use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n use tracing::debug;\n \n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n+use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n@@ -42,7 +42,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         sym\n     );\n \n-    let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n+    let fn_abi = cx.fn_abi_of_instance(instance, &[]);\n \n     let llfn = if let Some(llfn) = cx.get_declared_value(&sym) {\n         // Create a fn pointer with the new signature."}, {"sha": "f1a2968ce59b1814444fa7d4ee8b05173b9f3bde", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -15,14 +15,19 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::mir::mono::CodegenUnit;\n-use rustc_middle::ty::layout::{HasParamEnv, LayoutError, LayoutOfHelpers, TyAndLayout};\n+use rustc_middle::ty::layout::{\n+    FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, LayoutError, LayoutOfHelpers,\n+    TyAndLayout,\n+};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CFGuard, CrateType, DebugInfo};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n-use rustc_target::abi::{HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n+use rustc_target::abi::{\n+    call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx,\n+};\n use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n use smallvec::SmallVec;\n \n@@ -853,3 +858,40 @@ impl LayoutOfHelpers<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n }\n+\n+impl FnAbiOfHelpers<'tcx> for CodegenCx<'ll, 'tcx> {\n+    type FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>;\n+\n+    #[inline]\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> ! {\n+        if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n+            self.sess().span_fatal(span, &err.to_string())\n+        } else {\n+            match fn_abi_request {\n+                FnAbiRequest::OfFnPtr { sig, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_fn_ptr({}, {:?})` failed: {}\",\n+                        sig,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+                FnAbiRequest::OfInstance { instance, extra_args } => {\n+                    span_bug!(\n+                        span,\n+                        \"`fn_abi_of_instance({}, {:?})` failed: {}\",\n+                        instance,\n+                        extra_args,\n+                        err\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "cc1376278aaa4ba7e96752772009609936435740", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -1,6 +1,6 @@\n use crate::llvm;\n \n-use crate::abi::{Abi, FnAbi};\n+use crate::abi::Abi;\n use crate::builder::Builder;\n use crate::common::CodegenCx;\n \n@@ -20,7 +20,7 @@ use rustc_middle::mir::coverage::{\n     CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionId, Op,\n };\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::Instance;\n \n@@ -200,8 +200,7 @@ fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx\n \n     let llfn = cx.declare_fn(\n         &tcx.symbol_name(instance).name,\n-        &FnAbi::of_fn_ptr(\n-            cx,\n+        &cx.fn_abi_of_fn_ptr(\n             ty::Binder::dummy(tcx.mk_fn_sig(\n                 iter::once(tcx.mk_unit()),\n                 tcx.mk_unit(),"}, {"sha": "e5fd5bae01b742f64ae763d24bec2aa0601a9a51", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -3,12 +3,11 @@ use super::utils::DIB;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext};\n use rustc_codegen_ssa::traits::*;\n \n-use crate::abi::FnAbi;\n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::{DILocation, DIScope};\n use rustc_middle::mir::{Body, SourceScope};\n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::{self, Instance};\n use rustc_session::config::DebugInfo;\n \n@@ -94,7 +93,7 @@ fn make_mir_scope(\n                 ty::ParamEnv::reveal_all(),\n                 callee,\n             );\n-            let callee_fn_abi = FnAbi::of_instance(cx, callee, &[]);\n+            let callee_fn_abi = cx.fn_abi_of_instance(callee, &[]);\n             cx.dbg_scope_fn(callee, &callee_fn_abi, None)\n         }\n         None => unsafe {"}, {"sha": "a046c518e1aa79362a58e50187b4740ecd19f00a", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -15,7 +15,7 @@ use rustc_codegen_ssa::mir::operand::OperandRef;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir as hir;\n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::{sym, symbol::kw, Span, Symbol};\n@@ -737,7 +737,7 @@ fn gen_fn<'ll, 'tcx>(\n     rust_fn_sig: ty::PolyFnSig<'tcx>,\n     codegen: &mut dyn FnMut(Builder<'_, 'll, 'tcx>),\n ) -> (&'ll Type, &'ll Value) {\n-    let fn_abi = FnAbi::of_fn_ptr(cx, rust_fn_sig, &[]);\n+    let fn_abi = cx.fn_abi_of_fn_ptr(rust_fn_sig, &[]);\n     let llty = fn_abi.llvm_type(cx);\n     let llfn = cx.declare_fn(name, &fn_abi);\n     cx.set_frame_pointer_type(llfn);"}, {"sha": "b0301fa75aadf22061f4a5268fece7b1c8ea75dc", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -1,4 +1,3 @@\n-use crate::abi::FnAbi;\n use crate::attributes;\n use crate::base;\n use crate::context::CodegenCx;\n@@ -8,7 +7,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::layout::{FnAbiExt, LayoutOf};\n+use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n use rustc_session::config::CrateType;\n use rustc_target::spec::RelocModel;\n@@ -53,7 +52,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     ) {\n         assert!(!instance.substs.needs_infer());\n \n-        let fn_abi = FnAbi::of_instance(self, instance, &[]);\n+        let fn_abi = self.fn_abi_of_instance(instance, &[]);\n         let lldecl = self.declare_fn(symbol_name, &fn_abi);\n         unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n         let attrs = self.tcx.codegen_fn_attrs(instance.def_id());"}, {"sha": "94ad84aadd84c95bfd3188cef0488e513179da18", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -1,10 +1,9 @@\n-use crate::abi::FnAbi;\n use crate::common::*;\n use crate::context::TypeLowering;\n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n-use rustc_middle::ty::layout::{FnAbiExt, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n@@ -231,7 +230,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n                 ty::Adt(def, _) if def.is_box() => {\n                     cx.type_ptr_to(cx.layout_of(self.ty.boxed_ty()).llvm_type(cx))\n                 }\n-                ty::FnPtr(sig) => cx.fn_ptr_backend_type(&FnAbi::of_fn_ptr(cx, sig, &[])),\n+                ty::FnPtr(sig) => cx.fn_ptr_backend_type(&cx.fn_abi_of_fn_ptr(sig, &[])),\n                 _ => self.scalar_llvm_type_at(cx, scalar, Size::ZERO),\n             };\n             cx.scalar_lltypes.borrow_mut().insert(self.ty, llty);"}, {"sha": "fac72c39b5e68f90e55cedd45be8c4b143f92881", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::{self, SwitchTargets};\n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_span::source_map::Span;\n@@ -337,7 +337,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     def: ty::InstanceDef::Virtual(drop_fn.def_id(), 0),\n                     substs: drop_fn.substs,\n                 };\n-                let fn_abi = FnAbi::of_instance(&bx, virtual_drop, &[]);\n+                let fn_abi = bx.fn_abi_of_instance(virtual_drop, &[]);\n                 let vtable = args[1];\n                 args = &args[..1];\n                 (\n@@ -346,7 +346,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     fn_abi,\n                 )\n             }\n-            _ => (bx.get_fn_addr(drop_fn), FnAbi::of_instance(&bx, drop_fn, &[])),\n+            _ => (bx.get_fn_addr(drop_fn), bx.fn_abi_of_instance(drop_fn, &[])),\n         };\n         helper.do_call(\n             self,\n@@ -433,7 +433,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Obtain the panic entry point.\n         let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n         let instance = ty::Instance::mono(bx.tcx(), def_id);\n-        let fn_abi = FnAbi::of_instance(&bx, instance, &[]);\n+        let fn_abi = bx.fn_abi_of_instance(instance, &[]);\n         let llfn = bx.get_fn_addr(instance);\n \n         // Codegen the actual panic invoke/call.\n@@ -494,7 +494,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let def_id =\n                     common::langcall(bx.tcx(), Some(source_info.span), \"\", LangItem::Panic);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let fn_abi = FnAbi::of_instance(bx, instance, &[]);\n+                let fn_abi = bx.fn_abi_of_instance(instance, &[]);\n                 let llfn = bx.get_fn_addr(instance);\n \n                 // Codegen the actual panic invoke/call.\n@@ -579,8 +579,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             .collect::<Vec<_>>();\n \n         let fn_abi = match instance {\n-            Some(instance) => FnAbi::of_instance(&bx, instance, &extra_args),\n-            None => FnAbi::of_fn_ptr(&bx, sig, &extra_args),\n+            Some(instance) => bx.fn_abi_of_instance(instance, &extra_args),\n+            None => bx.fn_abi_of_fn_ptr(sig, &extra_args),\n         };\n \n         if intrinsic == Some(sym::transmute) {"}, {"sha": "3fd9dc08c2be20f86a6cf3924ba09ae44bf86219", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -2,7 +2,7 @@ use crate::traits::*;\n use rustc_errors::ErrorReported;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_target::abi::call::{FnAbi, PassMode};\n \n@@ -139,7 +139,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let mir = cx.tcx().instance_mir(instance.def);\n \n-    let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n+    let fn_abi = cx.fn_abi_of_instance(instance, &[]);\n     debug!(\"fn_abi: {:?}\", fn_abi);\n \n     let debug_context = cx.create_function_debug_context(instance, &fn_abi, llfn, &mir);"}, {"sha": "82b79fd0b2ac3e1d525d2ec622a8b8332a081639", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -8,14 +8,15 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_session::{\n     config::{self, OutputFilenames, PrintRequest},\n     Session,\n };\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::call::FnAbi;\n use rustc_target::spec::Target;\n \n pub use rustc_data_structures::sync::MetadataRef;\n@@ -38,12 +39,19 @@ pub trait BackendTypes {\n }\n \n pub trait Backend<'tcx>:\n-    Sized + BackendTypes + HasTyCtxt<'tcx> + LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>>\n+    Sized\n+    + BackendTypes\n+    + HasTyCtxt<'tcx>\n+    + LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>>\n+    + FnAbiOf<'tcx, FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>>\n {\n }\n \n impl<'tcx, T> Backend<'tcx> for T where\n-    Self: BackendTypes + HasTyCtxt<'tcx> + LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>>\n+    Self: BackendTypes\n+        + HasTyCtxt<'tcx>\n+        + LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>>\n+        + FnAbiOf<'tcx, FnAbiOfResult = &'tcx FnAbi<'tcx, Ty<'tcx>>>\n {\n }\n "}, {"sha": "04d8eaf7c9f801077f8dbe8e55889c3e74cf68a4", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 115, "deletions": 106, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b68304efc447a7bcd35b06511f6dfdfe9da16d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "patch": "@@ -2035,6 +2035,12 @@ impl<'tcx> HasDataLayout for ty::query::TyCtxtAt<'tcx> {\n     }\n }\n \n+impl<'tcx> HasTargetSpec for ty::query::TyCtxtAt<'tcx> {\n+    fn target_spec(&self) -> &Target {\n+        &self.sess.target\n+    }\n+}\n+\n impl<'tcx> HasTyCtxt<'tcx> for ty::query::TyCtxtAt<'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n@@ -2142,10 +2148,10 @@ pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {\n     #[inline]\n     fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {\n         let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };\n+        let tcx = self.tcx().at(span);\n+\n         MaybeResult::from(\n-            self.tcx()\n-                .at(span)\n-                .layout_of(self.param_env().and(ty))\n+            tcx.layout_of(self.param_env().and(ty))\n                 .map_err(|err| self.handle_layout_err(err, span, ty)),\n         )\n     }\n@@ -2545,10 +2551,10 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for LayoutError<'tcx> {\n \n impl<'tcx> ty::Instance<'tcx> {\n     // NOTE(eddyb) this is private to avoid using it from outside of\n-    // `FnAbi::of_instance` - any other uses are either too high-level\n+    // `fn_abi_of_instance` - any other uses are either too high-level\n     // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),\n     // or should go through `FnAbi` instead, to avoid losing any\n-    // adjustments `FnAbi::of_instance` might be performing.\n+    // adjustments `fn_abi_of_instance` might be performing.\n     fn fn_sig_for_fn_abi(&self, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n         // FIXME(davidtwco,eddyb): A `ParamEnv` should be passed through to this function.\n         let ty = self.ty(tcx, ty::ParamEnv::reveal_all());\n@@ -2801,7 +2807,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n }\n \n /// Error produced by attempting to compute or adjust a `FnAbi`.\n-enum FnAbiError<'tcx> {\n+pub enum FnAbiError<'tcx> {\n     /// Error produced by a `layout_of` call, while computing `FnAbi` initially.\n     Layout(LayoutError<'tcx>),\n \n@@ -2830,125 +2836,124 @@ impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n     }\n }\n \n-pub trait FnAbiExt<'tcx, C>\n-where\n-    C: HasTyCtxt<'tcx> + HasParamEnv<'tcx>,\n-{\n+// FIXME(eddyb) maybe use something like this for an unified `fn_abi_of`, not\n+// just for error handling.\n+#[derive(Debug)]\n+pub enum FnAbiRequest<'a, 'tcx> {\n+    OfFnPtr { sig: ty::PolyFnSig<'tcx>, extra_args: &'a [Ty<'tcx>] },\n+    OfInstance { instance: ty::Instance<'tcx>, extra_args: &'a [Ty<'tcx>] },\n+}\n+\n+/// Trait for contexts that want to be able to compute `FnAbi`s.\n+/// This automatically gives access to `FnAbiOf`, through a blanket `impl`.\n+pub trait FnAbiOfHelpers<'tcx>: LayoutOfHelpers<'tcx> {\n+    /// The `&FnAbi`-wrapping type (or `&FnAbi` itself), which will be\n+    /// returned from `fn_abi_of_*` (see also `handle_fn_abi_err`).\n+    type FnAbiOfResult: MaybeResult<&'tcx FnAbi<'tcx, Ty<'tcx>>>;\n+\n+    /// Helper used for `fn_abi_of_*`, to adapt `tcx.fn_abi_of_*(...)` into a\n+    /// `Self::FnAbiOfResult` (which does not need to be a `Result<...>`).\n+    ///\n+    /// Most `impl`s, which propagate `FnAbiError`s, should simply return `err`,\n+    /// but this hook allows e.g. codegen to return only `&FnABi` from its\n+    /// `cx.fn_abi_of_*(...)`, without any `Result<...>` around it to deal with\n+    /// (and any `FnAbiError`s are turned into fatal errors or ICEs).\n+    fn handle_fn_abi_err(\n+        &self,\n+        err: FnAbiError<'tcx>,\n+        span: Span,\n+        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+    ) -> <Self::FnAbiOfResult as MaybeResult<&'tcx FnAbi<'tcx, Ty<'tcx>>>>::Error;\n+}\n+\n+/// Blanket extension trait for contexts that can compute `FnAbi`s.\n+pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n     ///\n-    /// NB: this doesn't handle virtual calls - those should use `FnAbi::of_instance`\n+    /// NB: this doesn't handle virtual calls - those should use `fn_abi_of_instance`\n     /// instead, where the instance is an `InstanceDef::Virtual`.\n-    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self;\n+    #[inline]\n+    fn fn_abi_of_fn_ptr(\n+        &self,\n+        sig: ty::PolyFnSig<'tcx>,\n+        extra_args: &[Ty<'tcx>],\n+    ) -> Self::FnAbiOfResult {\n+        // FIXME(eddyb) get a better `span` here.\n+        let span = self.layout_tcx_at_span();\n+        let cx = LayoutCx { tcx: self.tcx().at(span), param_env: self.param_env() };\n+\n+        MaybeResult::from(\n+            cx.fn_abi_new_internal(sig, extra_args, None, CodegenFnAttrFlags::empty(), false)\n+                .map_err(|err| {\n+                    self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args })\n+                }),\n+        )\n+    }\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n     /// direct calls to an `fn`.\n     ///\n     /// NB: that includes virtual calls, which are represented by \"direct calls\"\n     /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n-    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self;\n-}\n-\n-impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n-where\n-    C: HasTyCtxt<'tcx> + HasParamEnv<'tcx>,\n-{\n-    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self {\n-        call::FnAbi::new_internal(\n-            &LayoutCx { tcx: cx.tcx(), param_env: cx.param_env() },\n-            sig,\n-            extra_args,\n-            None,\n-            CodegenFnAttrFlags::empty(),\n-            false,\n-        )\n-        .unwrap_or_else(|err| {\n-            // FIXME(eddyb) get a better `span` here.\n-            let span = DUMMY_SP;\n-            if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-                cx.tcx().sess.span_fatal(span, &err.to_string())\n-            } else {\n-                span_bug!(span, \"`FnAbi::of_fn_ptr({}, {:?})` failed: {}\", sig, extra_args, err);\n-            }\n-        })\n-    }\n+    #[inline]\n+    fn fn_abi_of_instance(\n+        &self,\n+        instance: ty::Instance<'tcx>,\n+        extra_args: &[Ty<'tcx>],\n+    ) -> Self::FnAbiOfResult {\n+        // FIXME(eddyb) get a better `span` here.\n+        let span = self.layout_tcx_at_span();\n+        let cx = LayoutCx { tcx: self.tcx().at(span), param_env: self.param_env() };\n \n-    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> &'tcx Self {\n         let sig = instance.fn_sig_for_fn_abi(cx.tcx());\n \n         let caller_location = if instance.def.requires_caller_location(cx.tcx()) {\n-            Some(cx.tcx().caller_location_ty())\n+            Some(cx.tcx.caller_location_ty())\n         } else {\n             None\n         };\n \n-        let attrs = cx.tcx().codegen_fn_attrs(instance.def_id()).flags;\n+        let attrs = cx.tcx.codegen_fn_attrs(instance.def_id()).flags;\n \n-        call::FnAbi::new_internal(\n-            &LayoutCx { tcx: cx.tcx(), param_env: cx.param_env() },\n-            sig,\n-            extra_args,\n-            caller_location,\n-            attrs,\n-            matches!(instance.def, ty::InstanceDef::Virtual(..)),\n+        MaybeResult::from(\n+            cx.fn_abi_new_internal(\n+                sig,\n+                extra_args,\n+                caller_location,\n+                attrs,\n+                matches!(instance.def, ty::InstanceDef::Virtual(..)),\n+            )\n+            .map_err(|err| {\n+                // HACK(eddyb) at least for definitions of/calls to `Instance`s,\n+                // we can get some kind of span even if one wasn't provided.\n+                // However, we don't do this early in order to avoid calling\n+                // `def_span` unconditionally (which may have a perf penalty).\n+                let span = if !span.is_dummy() { span } else { cx.tcx.def_span(instance.def_id()) };\n+                self.handle_fn_abi_err(err, span, FnAbiRequest::OfInstance { instance, extra_args })\n+            }),\n         )\n-        .unwrap_or_else(|err| {\n-            // FIXME(eddyb) get a better `span` here.\n-            let span = cx.tcx().def_span(instance.def_id());\n-            if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-                cx.tcx().sess.span_fatal(span, &err.to_string())\n-            } else {\n-                span_bug!(\n-                    span,\n-                    \"`FnAbi::of_instance({}, {:?})` failed: {}\",\n-                    instance,\n-                    extra_args,\n-                    err\n-                );\n-            }\n-        })\n     }\n }\n \n-/// Implementation detail of computing `FnAbi`s, shouldn't be exported.\n-// FIXME(eddyb) move this off of being generic on `C: LayoutOf`, and\n-// explicitly take `LayoutCx` *or* `TyCtxt` and `ParamEnvAnd<...>`.\n-trait FnAbiInternalExt<'tcx, C>\n-where\n-    C: LayoutOf<'tcx, LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>>\n-        + HasTargetSpec,\n-{\n+impl<C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n+\n+impl<'tcx> LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)\n     // arguments of this method, into a separate `struct`.\n-    fn new_internal(\n-        cx: &C,\n+    fn fn_abi_new_internal(\n+        &self,\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         caller_location: Option<Ty<'tcx>>,\n         codegen_fn_attr_flags: CodegenFnAttrFlags,\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n-        make_self_ptr_thin: bool,\n-    ) -> Result<&'tcx Self, FnAbiError<'tcx>>;\n-    fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi) -> Result<(), FnAbiError<'tcx>>;\n-}\n-\n-impl<'tcx, C> FnAbiInternalExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n-where\n-    C: LayoutOf<'tcx, LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>>\n-        + HasTargetSpec,\n-{\n-    fn new_internal(\n-        cx: &C,\n-        sig: ty::PolyFnSig<'tcx>,\n-        extra_args: &[Ty<'tcx>],\n-        caller_location: Option<Ty<'tcx>>,\n-        codegen_fn_attr_flags: CodegenFnAttrFlags,\n         force_thin_self_ptr: bool,\n-    ) -> Result<&'tcx Self, FnAbiError<'tcx>> {\n+    ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n \n-        let sig = cx.tcx().normalize_erasing_late_bound_regions(cx.param_env(), sig);\n+        let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);\n \n-        let conv = conv_from_spec_abi(cx.tcx(), sig.abi);\n+        let conv = conv_from_spec_abi(self.tcx(), sig.abi);\n \n         let mut inputs = sig.inputs();\n         let extra_args = if sig.abi == RustCall {\n@@ -2975,7 +2980,7 @@ where\n             extra_args.to_vec()\n         };\n \n-        let target = &cx.tcx().sess.target;\n+        let target = &self.tcx.sess.target;\n         let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\");\n         let win_x64_gnu = target.os == \"windows\" && target.arch == \"x86_64\" && target.env == \"gnu\";\n         let linux_s390x_gnu_like =\n@@ -3008,7 +3013,7 @@ where\n                 attrs.set(ArgAttribute::NonNull);\n             }\n \n-            if let Some(pointee) = layout.pointee_info_at(cx, offset) {\n+            if let Some(pointee) = layout.pointee_info_at(self, offset) {\n                 if let Some(kind) = pointee.safe {\n                     attrs.pointee_align = Some(pointee.align);\n \n@@ -3055,17 +3060,17 @@ where\n         let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {\n             let is_return = arg_idx.is_none();\n \n-            let layout = cx.layout_of(ty)?;\n+            let layout = self.layout_of(ty)?;\n             let layout = if force_thin_self_ptr && arg_idx == Some(0) {\n                 // Don't pass the vtable, it's not an argument of the virtual fn.\n                 // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`\n                 // or `&/&mut dyn Trait` because this is special-cased elsewhere in codegen\n-                make_thin_self_ptr(cx, layout)\n+                make_thin_self_ptr(self, layout)\n             } else {\n                 layout\n             };\n \n-            let mut arg = ArgAbi::new(cx, layout, |layout, scalar, offset| {\n+            let mut arg = ArgAbi::new(self, layout, |layout, scalar, offset| {\n                 let mut attrs = ArgAttributes::new();\n                 adjust_for_rust_scalar(&mut attrs, scalar, *layout, offset, is_return);\n                 attrs\n@@ -3102,14 +3107,18 @@ where\n             c_variadic: sig.c_variadic,\n             fixed_count: inputs.len(),\n             conv,\n-            can_unwind: fn_can_unwind(cx.tcx(), codegen_fn_attr_flags, sig.abi),\n+            can_unwind: fn_can_unwind(self.tcx(), codegen_fn_attr_flags, sig.abi),\n         };\n-        fn_abi.adjust_for_abi(cx, sig.abi)?;\n+        self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;\n         debug!(\"FnAbi::new_internal = {:?}\", fn_abi);\n-        Ok(cx.tcx().intern_fn_abi(fn_abi))\n+        Ok(self.tcx.intern_fn_abi(fn_abi))\n     }\n \n-    fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi) -> Result<(), FnAbiError<'tcx>> {\n+    fn fn_abi_adjust_for_abi(\n+        &self,\n+        fn_abi: &mut FnAbi<'tcx, Ty<'tcx>>,\n+        abi: SpecAbi,\n+    ) -> Result<(), FnAbiError<'tcx>> {\n         if abi == SpecAbi::Unadjusted {\n             return Ok(());\n         }\n@@ -3148,7 +3157,7 @@ where\n                     // anyway, we control all calls to it in libstd.\n                     Abi::Vector { .. }\n                         if abi != SpecAbi::PlatformIntrinsic\n-                            && cx.tcx().sess.target.simd_types_indirect =>\n+                            && self.tcx.sess.target.simd_types_indirect =>\n                     {\n                         arg.make_indirect();\n                         return;\n@@ -3159,7 +3168,7 @@ where\n \n                 // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.\n                 // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.\n-                let max_by_val_size = Pointer.size(cx) * 2;\n+                let max_by_val_size = Pointer.size(self) * 2;\n                 let size = arg.layout.size;\n \n                 if arg.layout.is_unsized() || size > max_by_val_size {\n@@ -3171,12 +3180,12 @@ where\n                     arg.cast_to(Reg { kind: RegKind::Integer, size });\n                 }\n             };\n-            fixup(&mut self.ret);\n-            for arg in &mut self.args {\n+            fixup(&mut fn_abi.ret);\n+            for arg in &mut fn_abi.args {\n                 fixup(arg);\n             }\n         } else {\n-            self.adjust_for_foreign_abi(cx, abi)?;\n+            fn_abi.adjust_for_foreign_abi(self, abi)?;\n         }\n \n         Ok(())"}]}