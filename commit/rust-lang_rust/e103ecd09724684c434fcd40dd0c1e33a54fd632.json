{"sha": "e103ecd09724684c434fcd40dd0c1e33a54fd632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDNlY2QwOTcyNDY4NGM0MzRmY2Q0MGRkMGMxZTMzYTU0ZmQ2MzI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-09-23T04:29:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-23T04:29:17Z"}, "message": "Rollup merge of #44746 - topecongiro:span-for-unary, r=petrochenkov\n\nInclude unary operator to span for ExprKind::Unary", "tree": {"sha": "40fef1e6c29e06f6923f3dab909ef603cb8bcf13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fef1e6c29e06f6923f3dab909ef603cb8bcf13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e103ecd09724684c434fcd40dd0c1e33a54fd632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e103ecd09724684c434fcd40dd0c1e33a54fd632", "html_url": "https://github.com/rust-lang/rust/commit/e103ecd09724684c434fcd40dd0c1e33a54fd632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e103ecd09724684c434fcd40dd0c1e33a54fd632/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1637b7570e0c6f40f738f98e1643d5fed30775e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1637b7570e0c6f40f738f98e1643d5fed30775e", "html_url": "https://github.com/rust-lang/rust/commit/a1637b7570e0c6f40f738f98e1643d5fed30775e"}, {"sha": "ded73a85e2dd258e81db19d9320f87e5389ae87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded73a85e2dd258e81db19d9320f87e5389ae87a", "html_url": "https://github.com/rust-lang/rust/commit/ded73a85e2dd258e81db19d9320f87e5389ae87a"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3829be40a1e3facd424fcc8bc90208e3b5e938b2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e103ecd09724684c434fcd40dd0c1e33a54fd632/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e103ecd09724684c434fcd40dd0c1e33a54fd632/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e103ecd09724684c434fcd40dd0c1e33a54fd632", "patch": "@@ -2632,7 +2632,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (span, self.mk_unary(UnOp::Not, e))\n+                (lo.to(span), self.mk_unary(UnOp::Not, e))\n             }\n             // Suggest `!` for bitwise negation when encountering a `~`\n             token::Tilde => {\n@@ -2645,26 +2645,26 @@ impl<'a> Parser<'a> {\n                 err.span_label(span_of_tilde, \"did you mean `!`?\");\n                 err.help(\"use `!` instead of `~` if you meant to perform bitwise negation\");\n                 err.emit();\n-                (span, self.mk_unary(UnOp::Not, e))\n+                (lo.to(span), self.mk_unary(UnOp::Not, e))\n             }\n             token::BinOp(token::Minus) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (span, self.mk_unary(UnOp::Neg, e))\n+                (lo.to(span), self.mk_unary(UnOp::Neg, e))\n             }\n             token::BinOp(token::Star) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (span, self.mk_unary(UnOp::Deref, e))\n+                (lo.to(span), self.mk_unary(UnOp::Deref, e))\n             }\n             token::BinOp(token::And) | token::AndAnd => {\n                 self.expect_and()?;\n                 let m = self.parse_mutability();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (span, ExprKind::AddrOf(m, e))\n+                (lo.to(span), ExprKind::AddrOf(m, e))\n             }\n             token::Ident(..) if self.token.is_keyword(keywords::In) => {\n                 self.bump();\n@@ -2675,13 +2675,13 @@ impl<'a> Parser<'a> {\n                 let blk = self.parse_block()?;\n                 let span = blk.span;\n                 let blk_expr = self.mk_expr(span, ExprKind::Block(blk), ThinVec::new());\n-                (span, ExprKind::InPlace(place, blk_expr))\n+                (lo.to(span), ExprKind::InPlace(place, blk_expr))\n             }\n             token::Ident(..) if self.token.is_keyword(keywords::Box) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (span, ExprKind::Box(e))\n+                (lo.to(span), ExprKind::Box(e))\n             }\n             _ => return self.parse_dot_or_call_expr(Some(attrs))\n         };"}]}