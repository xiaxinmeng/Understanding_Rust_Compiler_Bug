{"sha": "237ad1269844f483eb708de015b950253d906886", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzN2FkMTI2OTg0NGY0ODNlYjcwOGRlMDE1Yjk1MDI1M2Q5MDY4ODY=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-25T23:48:26Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-12-10T03:34:15Z"}, "message": "Use closure_min_captures in borrow checker\n\n- Use closure_min_captures to generate the Upvar structure that\n  stores information for diagnostics and information about\n  mutability of captures.", "tree": {"sha": "5201c94680949a193cef62ebf1ced9918f1de934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5201c94680949a193cef62ebf1ced9918f1de934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/237ad1269844f483eb708de015b950253d906886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/237ad1269844f483eb708de015b950253d906886", "html_url": "https://github.com/rust-lang/rust/commit/237ad1269844f483eb708de015b950253d906886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/237ad1269844f483eb708de015b950253d906886/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2efdd156bf6915d6831821ff8a263e43e493e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2efdd156bf6915d6831821ff8a263e43e493e32", "html_url": "https://github.com/rust-lang/rust/commit/e2efdd156bf6915d6831821ff8a263e43e493e32"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "80eabdd9af83001642b269b551533aee1d387034", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/237ad1269844f483eb708de015b950253d906886/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237ad1269844f483eb708de015b950253d906886/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=237ad1269844f483eb708de015b950253d906886", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::{HirId, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::mir::{\n     traversal, Body, ClearCrossCrate, Local, Location, Mutability, Operand, Place, PlaceElem,\n     PlaceRef,\n@@ -75,6 +76,7 @@ crate use region_infer::RegionInferenceContext;\n crate struct Upvar {\n     name: Symbol,\n \n+    // FIXME(project-rfc-2229#8): This should use Place or something similar\n     var_hir_id: HirId,\n \n     /// If true, the capture is behind a reference.\n@@ -155,13 +157,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n         infcx.set_tainted_by_errors();\n     }\n     let upvars: Vec<_> = tables\n-        .closure_captures\n-        .get(&def.did.to_def_id())\n-        .into_iter()\n-        .flat_map(|v| v.values())\n-        .map(|upvar_id| {\n-            let var_hir_id = upvar_id.var_path.hir_id;\n-            let capture = tables.upvar_capture(*upvar_id);\n+        .closure_min_captures_flattened(def.did.to_def_id())\n+        .map(|captured_place| {\n+            let var_hir_id = match captured_place.place.base {\n+                HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n+                _ => bug!(\"Expected upvar\"),\n+            };\n+            let capture = captured_place.info.capture_kind;\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue(_) => false,\n                 ty::UpvarCapture::ByRef(..) => true,"}, {"sha": "543b7e7ebaa799f4ee4b9f7e453ccfd4f0128a5f", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/237ad1269844f483eb708de015b950253d906886/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237ad1269844f483eb708de015b950253d906886/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=237ad1269844f483eb708de015b950253d906886", "patch": "@@ -749,7 +749,11 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     (&adt_def.variants[VariantIdx::new(0)], substs)\n                 }\n                 ty::Closure(_, substs) => {\n-                    return match substs.as_closure().upvar_tys().nth(field.index()) {\n+                    return match substs\n+                        .as_closure()\n+                        .tupled_upvars_ty()\n+                        .tuple_element_ty(field.index())\n+                    {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n                             field_count: substs.as_closure().upvar_tys().count(),"}]}