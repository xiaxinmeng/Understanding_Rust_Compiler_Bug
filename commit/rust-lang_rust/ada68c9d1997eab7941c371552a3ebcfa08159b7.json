{"sha": "ada68c9d1997eab7941c371552a3ebcfa08159b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYTY4YzlkMTk5N2VhYjc5NDFjMzcxNTUyYTNlYmNmYTA4MTU5Yjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-30T01:28:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-30T01:28:38Z"}, "message": "Rollup merge of #60276 - matthewjasper:cleanup-mir-visitor, r=estebank\n\nCleanup the MIR visitor\n\n* Remove useless `BasicBlock` parameters on methods with `Location`s.\n* Prefer `visit_terminator_kind` to `visit_terminator`.\n* Remove `Region` from PlaceContexts. `visit_rvalue` should be used when the region is important.\n* Remove unused visitor methods.", "tree": {"sha": "f73120a2672a0e9ea15a645599afd51f88d6d9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f73120a2672a0e9ea15a645599afd51f88d6d9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada68c9d1997eab7941c371552a3ebcfa08159b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcx6TGCRBK7hj4Ov3rIwAAdHIIAETycdvnxRUQbugen7a/sFxO\nAuMxm93ctIV3peVcOk4ZkmQNnJT2LMvg0xcYQNoFnO6NvVmBbQHKgIBItxW1wH2O\ndPEmZ4wczD2ZV73GDkXPwsuFjSG0HfWiESmtbFZZmTDQUr1iFhq9ICefGF8o3MSq\ng7g3E3gMzAxJO/sX+s16iY1/xKrlVbAFK6nne9NigyRim4MpgcEnbu/p/eg2noC2\ny5aRz0ZsjColOhitzJNqBduTZQlzfDTyIgc3OIC8sm/haUIpECZop4KMnK69AzN1\n7l/fWGAbNKJyMsEdK3qUW9jOLbqjrWwFgb60zrQ2O+5PzOHRaKh2sRIqIWqlpvo=\n=9YHV\n-----END PGP SIGNATURE-----\n", "payload": "tree f73120a2672a0e9ea15a645599afd51f88d6d9c3\nparent 1ec56d855056d7358c493b4e532873d541ba779f\nparent 4e69d377aa24cefbd40a9d0ad12137ad4cceec29\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556587718 +0200\ncommitter GitHub <noreply@github.com> 1556587718 +0200\n\nRollup merge of #60276 - matthewjasper:cleanup-mir-visitor, r=estebank\n\nCleanup the MIR visitor\n\n* Remove useless `BasicBlock` parameters on methods with `Location`s.\n* Prefer `visit_terminator_kind` to `visit_terminator`.\n* Remove `Region` from PlaceContexts. `visit_rvalue` should be used when the region is important.\n* Remove unused visitor methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada68c9d1997eab7941c371552a3ebcfa08159b7", "html_url": "https://github.com/rust-lang/rust/commit/ada68c9d1997eab7941c371552a3ebcfa08159b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada68c9d1997eab7941c371552a3ebcfa08159b7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec56d855056d7358c493b4e532873d541ba779f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec56d855056d7358c493b4e532873d541ba779f", "html_url": "https://github.com/rust-lang/rust/commit/1ec56d855056d7358c493b4e532873d541ba779f"}, {"sha": "4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e69d377aa24cefbd40a9d0ad12137ad4cceec29", "html_url": "https://github.com/rust-lang/rust/commit/4e69d377aa24cefbd40a9d0ad12137ad4cceec29"}], "stats": {"total": 464, "additions": 179, "deletions": 285}, "files": [{"sha": "f71a0d102e6259c20f33cd1f0ea62ef2ef973894", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 59, "deletions": 120, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -1,6 +1,5 @@\n-use crate::hir::def_id::DefId;\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n+use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Ty};\n use crate::mir::*;\n use syntax_pos::Span;\n \n@@ -88,32 +87,28 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_statement(&mut self,\n-                               block: BasicBlock,\n                                statement: & $($mutability)? Statement<'tcx>,\n                                location: Location) {\n-                self.super_statement(block, statement, location);\n+                self.super_statement(statement, location);\n             }\n \n             fn visit_assign(&mut self,\n-                            block: BasicBlock,\n                             place: & $($mutability)? Place<'tcx>,\n                             rvalue: & $($mutability)? Rvalue<'tcx>,\n                             location: Location) {\n-                self.super_assign(block, place, rvalue, location);\n+                self.super_assign(place, rvalue, location);\n             }\n \n             fn visit_terminator(&mut self,\n-                                block: BasicBlock,\n                                 terminator: & $($mutability)? Terminator<'tcx>,\n                                 location: Location) {\n-                self.super_terminator(block, terminator, location);\n+                self.super_terminator(terminator, location);\n             }\n \n             fn visit_terminator_kind(&mut self,\n-                                     block: BasicBlock,\n                                      kind: & $($mutability)? TerminatorKind<'tcx>,\n                                      location: Location) {\n-                self.super_terminator_kind(block, kind, location);\n+                self.super_terminator_kind(kind, location);\n             }\n \n             fn visit_assert_message(&mut self,\n@@ -151,14 +146,14 @@ macro_rules! make_mir_visitor {\n \n             fn visit_place(&mut self,\n                             place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext<'tcx>,\n+                            context: PlaceContext,\n                             location: Location) {\n                 self.super_place(place, context, location);\n             }\n \n             fn visit_projection(&mut self,\n                                 place: & $($mutability)? PlaceProjection<'tcx>,\n-                                context: PlaceContext<'tcx>,\n+                                context: PlaceContext,\n                                 location: Location) {\n                 self.super_projection(place, context, location);\n             }\n@@ -169,24 +164,12 @@ macro_rules! make_mir_visitor {\n                 self.super_projection_elem(place, location);\n             }\n \n-            fn visit_branch(&mut self,\n-                            source: BasicBlock,\n-                            target: BasicBlock) {\n-                self.super_branch(source, target);\n-            }\n-\n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n                 self.super_constant(constant, location);\n             }\n \n-            fn visit_def_id(&mut self,\n-                            def_id: & $($mutability)? DefId,\n-                            _: Location) {\n-                self.super_def_id(def_id);\n-            }\n-\n             fn visit_span(&mut self,\n                           span: & $($mutability)? Span) {\n                 self.super_span(span);\n@@ -256,7 +239,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_local(&mut self,\n                             _local: & $($mutability)? Local,\n-                            _context: PlaceContext<'tcx>,\n+                            _context: PlaceContext,\n                             _location: Location) {\n             }\n \n@@ -327,13 +310,13 @@ macro_rules! make_mir_visitor {\n                 let mut index = 0;\n                 for statement in statements {\n                     let location = Location { block: block, statement_index: index };\n-                    self.visit_statement(block, statement, location);\n+                    self.visit_statement(statement, location);\n                     index += 1;\n                 }\n \n                 if let Some(terminator) = terminator {\n                     let location = Location { block: block, statement_index: index };\n-                    self.visit_terminator(block, terminator, location);\n+                    self.visit_terminator(terminator, location);\n                 }\n             }\n \n@@ -350,7 +333,6 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_statement(&mut self,\n-                               block: BasicBlock,\n                                statement: & $($mutability)? Statement<'tcx>,\n                                location: Location) {\n                 let Statement {\n@@ -361,7 +343,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_info(source_info);\n                 match kind {\n                     StatementKind::Assign(place, rvalue) => {\n-                        self.visit_assign(block, place, rvalue, location);\n+                        self.visit_assign(place, rvalue, location);\n                     }\n                     StatementKind::FakeRead(_, place) => {\n                         self.visit_place(\n@@ -415,7 +397,6 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_assign(&mut self,\n-                            _block: BasicBlock,\n                             place: &$($mutability)? Place<'tcx>,\n                             rvalue: &$($mutability)? Rvalue<'tcx>,\n                             location: Location) {\n@@ -428,132 +409,103 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_terminator(&mut self,\n-                                block: BasicBlock,\n                                 terminator: &$($mutability)? Terminator<'tcx>,\n                                 location: Location) {\n                 let Terminator { source_info, kind } = terminator;\n \n                 self.visit_source_info(source_info);\n-                self.visit_terminator_kind(block, kind, location);\n+                self.visit_terminator_kind(kind, location);\n             }\n \n             fn super_terminator_kind(&mut self,\n-                                     block: BasicBlock,\n                                      kind: & $($mutability)? TerminatorKind<'tcx>,\n                                      source_location: Location) {\n                 match kind {\n-                    TerminatorKind::Goto { target } => {\n-                        self.visit_branch(block, *target);\n+                    TerminatorKind::Goto { .. } |\n+                    TerminatorKind::Resume |\n+                    TerminatorKind::Abort |\n+                    TerminatorKind::Return |\n+                    TerminatorKind::GeneratorDrop |\n+                    TerminatorKind::Unreachable |\n+                    TerminatorKind::FalseEdges { .. } |\n+                    TerminatorKind::FalseUnwind { .. } => {\n                     }\n \n                     TerminatorKind::SwitchInt {\n                         discr,\n                         switch_ty,\n                         values: _,\n-                        targets\n+                        targets: _\n                     } => {\n                         self.visit_operand(discr, source_location);\n                         self.visit_ty(switch_ty, TyContext::Location(source_location));\n-                        for target in targets {\n-                            self.visit_branch(block, *target);\n-                        }\n-                    }\n-\n-                    TerminatorKind::Resume |\n-                    TerminatorKind::Abort |\n-                    TerminatorKind::Return |\n-                    TerminatorKind::GeneratorDrop |\n-                    TerminatorKind::Unreachable => {\n                     }\n \n                     TerminatorKind::Drop {\n                         location,\n-                        target,\n-                        unwind,\n+                        target: _,\n+                        unwind: _,\n                     } => {\n                         self.visit_place(\n                             location,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n                             source_location\n                         );\n-                        self.visit_branch(block, *target);\n-                        unwind.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::DropAndReplace {\n                         location,\n                         value,\n-                        target,\n-                        unwind,\n+                        target: _,\n+                        unwind: _,\n                     } => {\n                         self.visit_place(\n                             location,\n                             PlaceContext::MutatingUse(MutatingUseContext::Drop),\n                             source_location\n                         );\n                         self.visit_operand(value, source_location);\n-                        self.visit_branch(block, *target);\n-                        unwind.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::Call {\n                         func,\n                         args,\n                         destination,\n-                        cleanup,\n+                        cleanup: _,\n                         from_hir_call: _,\n                     } => {\n                         self.visit_operand(func, source_location);\n                         for arg in args {\n                             self.visit_operand(arg, source_location);\n                         }\n-                        if let Some((destination, target)) = destination {\n+                        if let Some((destination, _)) = destination {\n                             self.visit_place(\n                                 destination,\n                                 PlaceContext::MutatingUse(MutatingUseContext::Call),\n                                 source_location\n                             );\n-                            self.visit_branch(block, *target);\n                         }\n-                        cleanup.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::Assert {\n                         cond,\n                         expected: _,\n                         msg,\n-                        target,\n-                        cleanup,\n+                        target: _,\n+                        cleanup: _,\n                     } => {\n                         self.visit_operand(cond, source_location);\n                         self.visit_assert_message(msg, source_location);\n-                        self.visit_branch(block, *target);\n-                        cleanup.map(|t| self.visit_branch(block, t));\n                     }\n \n                     TerminatorKind::Yield {\n                         value,\n-                        resume,\n-                        drop,\n+                        resume: _,\n+                        drop: _,\n                     } => {\n                         self.visit_operand(value, source_location);\n-                        self.visit_branch(block, *resume);\n-                        drop.map(|t| self.visit_branch(block, t));\n                     }\n \n-                    TerminatorKind::FalseEdges { real_target, imaginary_targets } => {\n-                        self.visit_branch(block, *real_target);\n-                        for target in imaginary_targets {\n-                            self.visit_branch(block, *target);\n-                        }\n-                    }\n-\n-                    TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                        self.visit_branch(block, *real_target);\n-                        if let Some(unwind) = unwind {\n-                            self.visit_branch(block, *unwind);\n-                        }\n-                    }\n                 }\n             }\n \n@@ -583,16 +535,16 @@ macro_rules! make_mir_visitor {\n                         self.visit_region(r, location);\n                         let ctx = match bk {\n                             BorrowKind::Shared => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::SharedBorrow(*r)\n+                                NonMutatingUseContext::SharedBorrow\n                             ),\n                             BorrowKind::Shallow => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::ShallowBorrow(*r)\n+                                NonMutatingUseContext::ShallowBorrow\n                             ),\n                             BorrowKind::Unique => PlaceContext::NonMutatingUse(\n-                                NonMutatingUseContext::UniqueBorrow(*r)\n+                                NonMutatingUseContext::UniqueBorrow\n                             ),\n                             BorrowKind::Mut { .. } =>\n-                                PlaceContext::MutatingUse(MutatingUseContext::Borrow(*r)),\n+                                PlaceContext::MutatingUse(MutatingUseContext::Borrow),\n                         };\n                         self.visit_place(path, ctx, location);\n                     }\n@@ -650,18 +602,16 @@ macro_rules! make_mir_visitor {\n                                 self.visit_substs(substs, location);\n                             }\n                             AggregateKind::Closure(\n-                                def_id,\n+                                _,\n                                 closure_substs\n                             ) => {\n-                                self.visit_def_id(def_id, location);\n                                 self.visit_closure_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(\n-                                def_id,\n+                                _,\n                                 generator_substs,\n                                 _movability,\n                             ) => {\n-                                self.visit_def_id(def_id, location);\n                                 self.visit_generator_substs(generator_substs, location);\n                             }\n                         }\n@@ -723,16 +673,13 @@ macro_rules! make_mir_visitor {\n \n             fn super_place(&mut self,\n                             place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext<'tcx>,\n+                            context: PlaceContext,\n                             location: Location) {\n                 match place {\n                     Place::Base(PlaceBase::Local(local)) => {\n                         self.visit_local(local, context, location);\n                     }\n-                    Place::Base(PlaceBase::Static(box Static { kind, ty })) => {\n-                        if let StaticKind::Static(def_id) = kind {\n-                            self.visit_def_id(& $($mutability)? *def_id, location)\n-                        }\n+                    Place::Base(PlaceBase::Static(box Static { kind: _, ty })) => {\n                         self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n                     }\n                     Place::Projection(proj) => {\n@@ -743,7 +690,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_projection(&mut self,\n                                 proj: & $($mutability)? PlaceProjection<'tcx>,\n-                                context: PlaceContext<'tcx>,\n+                                context: PlaceContext,\n                                 location: Location) {\n                 let Projection { base, elem } = proj;\n                 let context = if context.is_mutating_use() {\n@@ -812,11 +759,6 @@ macro_rules! make_mir_visitor {\n                                       _scope: & $($mutability)? SourceScope) {\n             }\n \n-            fn super_branch(&mut self,\n-                            _source: BasicBlock,\n-                            _target: BasicBlock) {\n-            }\n-\n             fn super_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n@@ -833,9 +775,6 @@ macro_rules! make_mir_visitor {\n                 self.visit_const(literal, location);\n             }\n \n-            fn super_def_id(&mut self, _def_id: & $($mutability)? DefId) {\n-            }\n-\n             fn super_span(&mut self, _span: & $($mutability)? Span) {\n             }\n \n@@ -890,12 +829,12 @@ macro_rules! make_mir_visitor {\n                 let basic_block = & $($mutability)? mir[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {\n-                        self.visit_terminator(location.block, terminator, location)\n+                        self.visit_terminator(terminator, location)\n                     }\n                 } else {\n                     let statement = & $($mutability)?\n                         basic_block.statements[location.statement_index];\n-                    self.visit_statement(location.block, statement, location)\n+                    self.visit_statement(statement, location)\n                 }\n             }\n         }\n@@ -912,21 +851,21 @@ pub trait MirVisitable<'tcx> {\n impl<'tcx> MirVisitable<'tcx> for Statement<'tcx> {\n     fn apply(&self, location: Location, visitor: &mut dyn Visitor<'tcx>)\n     {\n-        visitor.visit_statement(location.block, self, location)\n+        visitor.visit_statement(self, location)\n     }\n }\n \n impl<'tcx> MirVisitable<'tcx> for Terminator<'tcx> {\n     fn apply(&self, location: Location, visitor: &mut dyn Visitor<'tcx>)\n     {\n-        visitor.visit_terminator(location.block, self, location)\n+        visitor.visit_terminator(self, location)\n     }\n }\n \n impl<'tcx> MirVisitable<'tcx> for Option<Terminator<'tcx>> {\n     fn apply(&self, location: Location, visitor: &mut dyn Visitor<'tcx>)\n     {\n-        visitor.visit_terminator(location.block, self.as_ref().unwrap(), location)\n+        visitor.visit_terminator(self.as_ref().unwrap(), location)\n     }\n }\n \n@@ -955,19 +894,19 @@ pub enum TyContext {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum NonMutatingUseContext<'tcx> {\n+pub enum NonMutatingUseContext {\n     /// Being inspected in some way, like loading a len.\n     Inspect,\n     /// Consumed as part of an operand.\n     Copy,\n     /// Consumed as part of an operand.\n     Move,\n     /// Shared borrow.\n-    SharedBorrow(Region<'tcx>),\n+    SharedBorrow,\n     /// Shallow borrow.\n-    ShallowBorrow(Region<'tcx>),\n+    ShallowBorrow,\n     /// Unique borrow.\n-    UniqueBorrow(Region<'tcx>),\n+    UniqueBorrow,\n     /// Used as base for another place, e.g., `x` in `x.y`. Will not mutate the place.\n     /// For example, the projection `x.y` is not marked as a mutation in these cases:\n     ///\n@@ -978,7 +917,7 @@ pub enum NonMutatingUseContext<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum MutatingUseContext<'tcx> {\n+pub enum MutatingUseContext {\n     /// Appears as LHS of an assignment.\n     Store,\n     /// Can often be treated as a `Store`, but needs to be separate because\n@@ -990,7 +929,7 @@ pub enum MutatingUseContext<'tcx> {\n     /// Being dropped.\n     Drop,\n     /// Mutable borrow.\n-    Borrow(Region<'tcx>),\n+    Borrow,\n     /// Used as base for another place, e.g., `x` in `x.y`. Could potentially mutate the place.\n     /// For example, the projection `x.y` is marked as a mutation in these cases:\n     ///\n@@ -1013,13 +952,13 @@ pub enum NonUseContext {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum PlaceContext<'tcx> {\n-    NonMutatingUse(NonMutatingUseContext<'tcx>),\n-    MutatingUse(MutatingUseContext<'tcx>),\n+pub enum PlaceContext {\n+    NonMutatingUse(NonMutatingUseContext),\n+    MutatingUse(MutatingUseContext),\n     NonUse(NonUseContext),\n }\n \n-impl<'tcx> PlaceContext<'tcx> {\n+impl<'tcx> PlaceContext {\n     /// Returns `true` if this place context represents a drop.\n     pub fn is_drop(&self) -> bool {\n         match *self {\n@@ -1031,10 +970,10 @@ impl<'tcx> PlaceContext<'tcx> {\n     /// Returns `true` if this place context represents a borrow.\n     pub fn is_borrow(&self) -> bool {\n         match *self {\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow(..)) |\n-            PlaceContext::MutatingUse(MutatingUseContext::Borrow(..)) => true,\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n+            PlaceContext::MutatingUse(MutatingUseContext::Borrow) => true,\n             _ => false,\n         }\n     }"}, {"sha": "8021d4b11d0cf7a638d204b1695cec152d64af74", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -97,11 +97,10 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n     for LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     fn visit_assign(&mut self,\n-                    block: mir::BasicBlock,\n                     place: &mir::Place<'tcx>,\n                     rvalue: &mir::Rvalue<'tcx>,\n                     location: Location) {\n-        debug!(\"visit_assign(block={:?}, place={:?}, rvalue={:?})\", block, place, rvalue);\n+        debug!(\"visit_assign(place={:?}, rvalue={:?})\", place, rvalue);\n \n         if let mir::Place::Base(mir::PlaceBase::Local(index)) = *place {\n             self.assign(index, location);\n@@ -120,7 +119,6 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n     }\n \n     fn visit_terminator_kind(&mut self,\n-                             block: mir::BasicBlock,\n                              kind: &mir::TerminatorKind<'tcx>,\n                              location: Location) {\n         let check = match *kind {\n@@ -148,12 +146,12 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             }\n         }\n \n-        self.super_terminator_kind(block, kind, location);\n+        self.super_terminator_kind(kind, location);\n     }\n \n     fn visit_place(&mut self,\n                    place: &mir::Place<'tcx>,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n         let cx = self.fx.cx;\n@@ -205,7 +203,7 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n     fn visit_local(&mut self,\n                    &local: &mir::Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         match context {\n             PlaceContext::MutatingUse(MutatingUseContext::Call) => {\n@@ -235,11 +233,11 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect) |\n             PlaceContext::MutatingUse(MutatingUseContext::Store) |\n             PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) |\n-            PlaceContext::MutatingUse(MutatingUseContext::Borrow(..)) |\n+            PlaceContext::MutatingUse(MutatingUseContext::Borrow) |\n             PlaceContext::MutatingUse(MutatingUseContext::Projection) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow(..)) |\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n             PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => {\n                 self.not_ssa(local);\n             }"}, {"sha": "56dacf20edcb8dd6047e63caf141b1c456a1aaba", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -96,7 +96,7 @@ impl LocalsStateAtExit {\n         struct HasStorageDead(BitSet<Local>);\n \n         impl<'tcx> Visitor<'tcx> for HasStorageDead {\n-            fn visit_local(&mut self, local: &Local, ctx: PlaceContext<'tcx>, _: Location) {\n+            fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n                 if ctx == PlaceContext::NonUse(NonUseContext::StorageDead) {\n                     self.0.insert(*local);\n                 }\n@@ -185,7 +185,6 @@ struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n     fn visit_assign(\n         &mut self,\n-        block: mir::BasicBlock,\n         assigned_place: &mir::Place<'tcx>,\n         rvalue: &mir::Rvalue<'tcx>,\n         location: mir::Location,\n@@ -216,13 +215,13 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.super_assign(block, assigned_place, rvalue, location)\n+        self.super_assign(assigned_place, rvalue, location)\n     }\n \n     fn visit_local(\n         &mut self,\n         temp: &Local,\n-        context: PlaceContext<'tcx>,\n+        context: PlaceContext,\n         location: Location,\n     ) {\n         if !context.is_use() {\n@@ -288,15 +287,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n \n         return self.super_rvalue(rvalue, location);\n     }\n-\n-    fn visit_statement(\n-        &mut self,\n-        block: mir::BasicBlock,\n-        statement: &mir::Statement<'tcx>,\n-        location: Location,\n-    ) {\n-        return self.super_statement(block, statement, location);\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {"}, {"sha": "b0e395cbbdfb5772ff815d399b230629b7886d5d", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -100,7 +100,6 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n     fn visit_statement(\n         &mut self,\n-        block: BasicBlock,\n         statement: &Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -117,12 +116,11 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n             ));\n         }\n \n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_assign(\n         &mut self,\n-        block: BasicBlock,\n         place: &Place<'tcx>,\n         rvalue: &Rvalue<'tcx>,\n         location: Location,\n@@ -141,12 +139,11 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n             }\n         }\n \n-        self.super_assign(block, place, rvalue, location);\n+        self.super_assign(place, rvalue, location);\n     }\n \n     fn visit_terminator(\n         &mut self,\n-        block: BasicBlock,\n         terminator: &Terminator<'tcx>,\n         location: Location,\n     ) {\n@@ -167,7 +164,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n             }\n         }\n \n-        self.super_terminator(block, terminator, location);\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_ascribe_user_ty("}, {"sha": "9a2090d05084d98ec6e73413227e82a40a8a429f", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -113,7 +113,7 @@ enum DefUseResult {\n }\n \n impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for DefUseVisitor<'cx, 'gcx, 'tcx> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         let local_ty = self.mir.local_decls[local].ty;\n \n         let mut found_it = false;"}, {"sha": "fd17d4a81256609a63dee51491597de3e5ca7e93", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, Location, Mir, Place, PlaceBase, Rvalue};\n use rustc::mir::{Statement, StatementKind};\n-use rustc::mir::{Terminator, TerminatorKind};\n+use rustc::mir::TerminatorKind;\n use rustc::mir::{Operand, BorrowKind};\n use rustc_data_structures::graph::dominators::Dominators;\n \n@@ -58,7 +58,6 @@ struct InvalidationGenerator<'cx, 'tcx: 'cx, 'gcx: 'tcx> {\n impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n     fn visit_statement(\n         &mut self,\n-        block: BasicBlock,\n         statement: &Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -134,18 +133,17 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n             }\n         }\n \n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n-    fn visit_terminator(\n+    fn visit_terminator_kind(\n         &mut self,\n-        block: BasicBlock,\n-        terminator: &Terminator<'tcx>,\n+        kind: &TerminatorKind<'tcx>,\n         location: Location\n     ) {\n         self.check_activations(location);\n \n-        match terminator.kind {\n+        match kind {\n             TerminatorKind::SwitchInt {\n                 ref discr,\n                 switch_ty: _,\n@@ -258,7 +256,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n             }\n         }\n \n-        self.super_terminator(block, terminator, location);\n+        self.super_terminator_kind(kind, location);\n     }\n }\n "}, {"sha": "6ba41806a313f3e43a047d18f01dc64c161a43ed", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -160,7 +160,7 @@ impl LocalUseMapBuild<'_> {\n }\n \n impl Visitor<'tcx> for LocalUseMapBuild<'_> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, location: Location) {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         if self.locals_with_use_data[local] {\n             match categorize(context) {\n                 Some(DefUse::Def) => self.insert_def(local, location),"}, {"sha": "f1bbb1c8809987abc118cd96b72f88671acef72f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext<'_>, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n         self.sanitize_place(place, location, context);\n     }\n \n@@ -447,7 +447,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         &mut self,\n         place: &Place<'tcx>,\n         location: Location,\n-        context: PlaceContext<'_>,\n+        context: PlaceContext,\n     ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_place: {:?}\", place);\n         let place_ty = match place {"}, {"sha": "f4866fad9a5fd8c720714ceb1941913f25c34023", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -1,6 +1,6 @@\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{\n-    BasicBlock, Local, Location, Place, PlaceBase, Statement, StatementKind, TerminatorKind\n+    Local, Location, Place, PlaceBase, Statement, StatementKind, TerminatorKind\n };\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -55,7 +55,6 @@ struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'gcx: 'tcx, 'tcx: 'cx> {\n impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n     fn visit_terminator_kind(\n         &mut self,\n-        _block: BasicBlock,\n         kind: &TerminatorKind<'tcx>,\n         _location: Location,\n     ) {\n@@ -77,7 +76,6 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n \n     fn visit_statement(\n         &mut self,\n-        _block: BasicBlock,\n         statement: &Statement<'tcx>,\n         _location: Location,\n     ) {\n@@ -104,7 +102,7 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n     fn visit_local(\n         &mut self,\n         local: &Local,\n-        place_context: PlaceContext<'tcx>,\n+        place_context: PlaceContext,\n         location: Location,\n     ) {\n         if place_context.is_place_assignment() && self.temporary_used_locals.contains(local) {"}, {"sha": "42c2387b7052da02d6949cb95e37f0bd34f5d892", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n \n         BorrowedLocalsVisitor {\n             sets,\n-        }.visit_statement(loc.block, stmt, loc);\n+        }.visit_statement(stmt, loc);\n \n         // StorageDead invalidates all borrows and raw pointers to a local\n         match stmt.kind {\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for HaveBeenBorrowedLocals<'a, 'tcx> {\n                          loc: Location) {\n         BorrowedLocalsVisitor {\n             sets,\n-        }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n+        }.visit_terminator(self.mir[loc.block].terminator(), loc);\n     }\n \n     fn propagate_call_return("}, {"sha": "ab930fd83d063b76453c55b853efd58fb74b2bad", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -615,7 +615,6 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     }\n \n     fn visit_terminator_kind(&mut self,\n-                             block: mir::BasicBlock,\n                              kind: &mir::TerminatorKind<'tcx>,\n                              location: Location) {\n         debug!(\"visiting terminator {:?} @ {:?}\", kind, location);\n@@ -654,12 +653,12 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n \n-        self.super_terminator_kind(block, kind, location);\n+        self.super_terminator_kind(kind, location);\n     }\n \n     fn visit_place(&mut self,\n                     place: &mir::Place<'tcx>,\n-                    context: mir::visit::PlaceContext<'tcx>,\n+                    context: mir::visit::PlaceContext,\n                     location: Location) {\n         match place {\n             Place::Base("}, {"sha": "078b347fb3f6be0fc8949734cc5f4d25670bb8ed", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -65,7 +65,6 @@ impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self,\n-                        block: BasicBlock,\n                         terminator: &Terminator<'tcx>,\n                         location: Location)\n     {\n@@ -97,11 +96,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n             }\n         }\n-        self.super_terminator(block, terminator, location);\n+        self.super_terminator(terminator, location);\n     }\n \n     fn visit_statement(&mut self,\n-                       block: BasicBlock,\n                        statement: &Statement<'tcx>,\n                        location: Location)\n     {\n@@ -124,7 +122,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     UnsafetyViolationKind::General)\n             },\n         }\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_rvalue(&mut self,\n@@ -201,7 +199,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n     fn visit_place(&mut self,\n                     place: &Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         match place {\n             &Place::Projection(box Projection {"}, {"sha": "64fd0b1365690a1864546f8224983806bf246fe9", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -16,7 +16,7 @@\n //! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n //! [`Nop`]: rustc::mir::StatementKind::Nop\n \n-use rustc::mir::{BasicBlock, BorrowKind, Rvalue, Location, Mir};\n+use rustc::mir::{BorrowKind, Rvalue, Location, Mir};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -38,7 +38,6 @@ impl MirPass for CleanupNonCodegenStatements {\n \n impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n     fn visit_statement(&mut self,\n-                       block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n         match statement.kind {\n@@ -47,6 +46,6 @@ impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n             | StatementKind::FakeRead(..) => statement.make_nop(),\n             _ => (),\n         }\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n }"}, {"sha": "5ae052e46c54762e2dce42572dabaed807c4123c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -4,7 +4,7 @@\n \n use rustc::hir::def::Def;\n use rustc::mir::{Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local};\n-use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind, Static, StaticKind};\n+use rustc::mir::{NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n@@ -510,7 +510,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     fn visit_local(\n         &mut self,\n         &local: &Local,\n-        context: PlaceContext<'tcx>,\n+        context: PlaceContext,\n         _: Location,\n     ) {\n         use rustc::mir::visit::PlaceContext::*;\n@@ -549,7 +549,6 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_statement(\n         &mut self,\n-        block: BasicBlock,\n         statement: &Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -571,16 +570,15 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                 }\n             }\n         }\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n \n     fn visit_terminator_kind(\n         &mut self,\n-        block: BasicBlock,\n         kind: &TerminatorKind<'tcx>,\n         location: Location,\n     ) {\n-        self.super_terminator_kind(block, kind, location);\n+        self.super_terminator_kind(kind, location);\n         let source_info = *self.mir.source_info(location);\n         if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n             if let Some(value) = self.eval_operand(cond, source_info) {\n@@ -601,7 +599,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         },\n                         Operand::Constant(_) => {}\n                     }\n-                    let span = self.mir[block]\n+                    let span = self.mir[location.block]\n                         .terminator\n                         .as_ref()\n                         .unwrap()"}, {"sha": "dfe2e991ba97bf9e118ef5029c856d3bcea7e62a", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -134,9 +134,9 @@ impl MirPass for CopyPropagation {\n     }\n }\n \n-fn eliminate_self_assignments<'tcx>(\n-    mir: &mut Mir<'tcx>,\n-    def_use_analysis: &DefUseAnalysis<'tcx>,\n+fn eliminate_self_assignments(\n+    mir: &mut Mir<'_>,\n+    def_use_analysis: &DefUseAnalysis,\n ) -> bool {\n     let mut changed = false;\n \n@@ -177,7 +177,7 @@ enum Action<'tcx> {\n }\n \n impl<'tcx> Action<'tcx> {\n-    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis<'_>, src_place: &Place<'tcx>)\n+    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis, src_place: &Place<'tcx>)\n                   -> Option<Action<'tcx>> {\n         // The source must be a local.\n         let src_local = if let Place::Base(PlaceBase::Local(local)) = *src_place {\n@@ -233,7 +233,7 @@ impl<'tcx> Action<'tcx> {\n \n     fn perform(self,\n                mir: &mut Mir<'tcx>,\n-               def_use_analysis: &DefUseAnalysis<'tcx>,\n+               def_use_analysis: &DefUseAnalysis,\n                dest_local: Local,\n                location: Location)\n                -> bool {"}, {"sha": "924428deaee997dea829732e235eb947f1be61fe", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -41,10 +41,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_statement(&mut self,\n-                       block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n-        self.super_statement(block, statement, location);\n+        self.super_statement(statement, location);\n     }\n }\n "}, {"sha": "68f33d9438d9b47d61be0e5cb4ffb3367ab47b70", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -80,7 +80,7 @@ struct RenameLocalVisitor {\n impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         if *local == self.from {\n             *local = self.to;\n@@ -93,14 +93,14 @@ struct DerefArgVisitor;\n impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         assert_ne!(*local, self_arg());\n     }\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if *place == Place::Base(PlaceBase::Local(self_arg())) {\n             *place = Place::Projection(Box::new(Projection {\n@@ -120,14 +120,14 @@ struct PinArgVisitor<'tcx> {\n impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         assert_ne!(*local, self_arg());\n     }\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if *place == Place::Base(PlaceBase::Local(self_arg())) {\n             *place = Place::Projection(Box::new(Projection {\n@@ -221,14 +221,14 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         assert_eq!(self.remap.get(local), None);\n     }\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if let Place::Base(PlaceBase::Local(l)) = *place {\n             // Replace an Local in the remap with a generator struct access\n@@ -369,7 +369,6 @@ struct StorageIgnored(liveness::LiveVarSet);\n \n impl<'tcx> Visitor<'tcx> for StorageIgnored {\n     fn visit_statement(&mut self,\n-                       _block: BasicBlock,\n                        statement: &Statement<'tcx>,\n                        _location: Location) {\n         match statement.kind {"}, {"sha": "2ae4743689a9857017d1f057706ae1bdcd32ff6f", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _ctxt: PlaceContext<'tcx>,\n+                   _ctxt: PlaceContext,\n                    _location: Location) {\n         if *local == RETURN_PLACE {\n             match self.destination {\n@@ -686,7 +686,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n \n     fn visit_place(&mut self,\n                     place: &mut Place<'tcx>,\n-                    _ctxt: PlaceContext<'tcx>,\n+                    _ctxt: PlaceContext,\n                     _location: Location) {\n \n         match place {\n@@ -726,9 +726,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_terminator_kind(&mut self, block: BasicBlock,\n+    fn visit_terminator_kind(&mut self,\n                              kind: &mut TerminatorKind<'tcx>, loc: Location) {\n-        self.super_terminator_kind(block, kind, loc);\n+        self.super_terminator_kind(kind, loc);\n \n         match *kind {\n             TerminatorKind::GeneratorDrop |"}, {"sha": "648f4e65b0d076b9a6b8fa1c1609e10c872a2496", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -24,13 +24,12 @@ pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx\n }\n \n impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n-    fn visit_terminator(&mut self,\n-                        bb: BasicBlock,\n-                        terminator: &mut Terminator<'tcx>,\n+    fn visit_terminator_kind(&mut self,\n+                        kind: &mut TerminatorKind<'tcx>,\n                         location: Location) {\n-        if let Some(unwind) = terminator.kind.unwind_mut() {\n+        if let Some(unwind) = kind.unwind_mut() {\n             unwind.take();\n         }\n-        self.super_terminator(bb, terminator, location);\n+        self.super_terminator_kind(kind, location);\n     }\n }"}, {"sha": "0bf96c689176bedf8ee41449e9ff582d2508ced4", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -77,7 +77,7 @@ struct TempCollector<'tcx> {\n impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n     fn visit_local(&mut self,\n                    &index: &Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries and the return place\n@@ -361,7 +361,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n+                   _: PlaceContext,\n                    _: Location) {\n         if self.source.local_kind(*local) == LocalKind::Temp {\n             *local = self.promote_temp(*local);"}, {"sha": "9a39e071721147ac0c3e80f897f64d446d929c65", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -926,7 +926,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n     fn visit_place(&mut self,\n                     place: &Place<'tcx>,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         debug!(\"visit_place: place={:?} context={:?} location={:?}\", place, context, location);\n         self.super_place(place, context, location);\n@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         debug!(\"visit_rvalue: rvalue={:?} location={:?}\", rvalue, location);\n \n         // Check nested operands and places.\n-        if let Rvalue::Ref(region, kind, ref place) = *rvalue {\n+        if let Rvalue::Ref(_, kind, ref place) = *rvalue {\n             // Special-case reborrows.\n             let mut is_reborrow = false;\n             if let Place::Projection(ref proj) = *place {\n@@ -1078,16 +1078,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             if is_reborrow {\n                 let ctx = match kind {\n                     BorrowKind::Shared => PlaceContext::NonMutatingUse(\n-                        NonMutatingUseContext::SharedBorrow(region),\n+                        NonMutatingUseContext::SharedBorrow,\n                     ),\n                     BorrowKind::Shallow => PlaceContext::NonMutatingUse(\n-                        NonMutatingUseContext::ShallowBorrow(region),\n+                        NonMutatingUseContext::ShallowBorrow,\n                     ),\n                     BorrowKind::Unique => PlaceContext::NonMutatingUse(\n-                        NonMutatingUseContext::UniqueBorrow(region),\n+                        NonMutatingUseContext::UniqueBorrow,\n                     ),\n                     BorrowKind::Mut { .. } => PlaceContext::MutatingUse(\n-                        MutatingUseContext::Borrow(region),\n+                        MutatingUseContext::Borrow,\n                     ),\n                 };\n                 self.super_place(place, ctx, location);\n@@ -1179,10 +1179,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n     }\n \n     fn visit_terminator_kind(&mut self,\n-                             bb: BasicBlock,\n                              kind: &TerminatorKind<'tcx>,\n                              location: Location) {\n-        debug!(\"visit_terminator_kind: bb={:?} kind={:?} location={:?}\", bb, kind, location);\n+        debug!(\"visit_terminator_kind: kind={:?} location={:?}\", kind, location);\n         if let TerminatorKind::Call { ref func, ref args, ref destination, .. } = *kind {\n             if let Some((ref dest, _)) = *destination {\n                 self.assign(dest, ValueSource::Call {\n@@ -1310,7 +1309,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    let candidate = Candidate::Argument { bb, index: i };\n+                    let candidate = Candidate::Argument { bb: location.block, index: i };\n                     // Since the argument is required to be constant,\n                     // we care about constness, not promotability.\n                     // If we checked for promotability, we'd miss out on\n@@ -1343,7 +1342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                 self.visit_operand(arg, location);\n             }\n         } else if let TerminatorKind::Drop { location: ref place, .. } = *kind {\n-            self.super_terminator_kind(bb, kind, location);\n+            self.super_terminator_kind(kind, location);\n \n             // Deny *any* live drops anywhere other than functions.\n             if self.mode != Mode::Fn {\n@@ -1374,12 +1373,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             }\n         } else {\n             // Qualify any operands inside other terminators.\n-            self.super_terminator_kind(bb, kind, location);\n+            self.super_terminator_kind(kind, location);\n         }\n     }\n \n     fn visit_assign(&mut self,\n-                    _: BasicBlock,\n                     dest: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n@@ -1394,11 +1392,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         self.span = source_info.span;\n     }\n \n-    fn visit_statement(&mut self, bb: BasicBlock, statement: &Statement<'tcx>, location: Location) {\n-        debug!(\"visit_statement: bb={:?} statement={:?} location={:?}\", bb, statement, location);\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        debug!(\"visit_statement: statement={:?} location={:?}\", statement, location);\n         match statement.kind {\n             StatementKind::Assign(..) => {\n-                self.super_statement(bb, statement, location);\n+                self.super_statement(statement, location);\n             }\n             // FIXME(eddyb) should these really do nothing?\n             StatementKind::FakeRead(..) |\n@@ -1411,14 +1409,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             StatementKind::Nop => {}\n         }\n     }\n-\n-    fn visit_terminator(&mut self,\n-                        bb: BasicBlock,\n-                        terminator: &Terminator<'tcx>,\n-                        location: Location) {\n-        debug!(\"visit_terminator: bb={:?} terminator={:?} location={:?}\", bb, terminator, location);\n-        self.super_terminator(bb, terminator, location);\n-    }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "ee16ec7b41cf5e0af70309a5fcf25a76b64e66e3", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -345,7 +345,7 @@ struct DeclMarker {\n }\n \n impl<'tcx> Visitor<'tcx> for DeclMarker {\n-    fn visit_local(&mut self, local: &Local, ctx: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n         // Ignore storage markers altogether, they get removed along with their otherwise unused\n         // decls.\n         // FIXME: Extend this to all non-uses.\n@@ -372,7 +372,7 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n         });\n         self.super_basic_block_data(block, data);\n     }\n-    fn visit_local(&mut self, l: &mut Local, _: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n         *l = self.map[*l].unwrap();\n     }\n }"}, {"sha": "4eee0640d78cd03171ecee0cdc0e4ff3b51985b1", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -58,7 +58,6 @@ struct UniformArrayMoveOutVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n     fn visit_assign(&mut self,\n-                    block: BasicBlock,\n                     dst_place: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n@@ -82,7 +81,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-        self.super_assign(block, dst_place, rvalue, location)\n+        self.super_assign(dst_place, rvalue, location)\n     }\n }\n \n@@ -294,19 +293,18 @@ struct RestoreDataCollector {\n \n impl<'tcx> Visitor<'tcx> for RestoreDataCollector {\n     fn visit_assign(&mut self,\n-                    block: BasicBlock,\n                     place: &Place<'tcx>,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n         if let Rvalue::Aggregate(box AggregateKind::Array(_), _) = *rvalue {\n             self.candidates.push(location);\n         }\n-        self.super_assign(block, place, rvalue, location)\n+        self.super_assign(place, rvalue, location)\n     }\n \n     fn visit_local(&mut self,\n                    local: &Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         let local_use = &mut self.locals_use[*local];\n         match context {"}, {"sha": "7bd61c3a59c94ec09bcfe1788635349c754f4109", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -27,7 +27,7 @@ struct FindLocalAssignmentVisitor {\n impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n     fn visit_local(&mut self,\n                    local: &Local,\n-                   place_context: PlaceContext<'tcx>,\n+                   place_context: PlaceContext,\n                    location: Location) {\n         if self.needle != *local {\n             return;"}, {"sha": "2925005b6674dc1d05c6c9593a4eff749b5d6fd3", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -3,34 +3,31 @@\n use rustc::mir::{Local, Location, Mir};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use std::marker::PhantomData;\n use std::mem;\n-use std::slice;\n-use std::iter;\n \n-pub struct DefUseAnalysis<'tcx> {\n-    info: IndexVec<Local, Info<'tcx>>,\n+pub struct DefUseAnalysis {\n+    info: IndexVec<Local, Info>,\n }\n \n #[derive(Clone)]\n-pub struct Info<'tcx> {\n-    pub defs_and_uses: Vec<Use<'tcx>>,\n+pub struct Info {\n+    pub defs_and_uses: Vec<Use>,\n }\n \n #[derive(Clone)]\n-pub struct Use<'tcx> {\n-    pub context: PlaceContext<'tcx>,\n+pub struct Use {\n+    pub context: PlaceContext,\n     pub location: Location,\n }\n \n-impl<'tcx> DefUseAnalysis<'tcx> {\n-    pub fn new(mir: &Mir<'tcx>) -> DefUseAnalysis<'tcx> {\n+impl DefUseAnalysis {\n+    pub fn new(mir: &Mir<'_>) -> DefUseAnalysis {\n         DefUseAnalysis {\n             info: IndexVec::from_elem_n(Info::new(), mir.local_decls.len()),\n         }\n     }\n \n-    pub fn analyze(&mut self, mir: &Mir<'tcx>) {\n+    pub fn analyze(&mut self, mir: &Mir<'_>) {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n@@ -46,13 +43,13 @@ impl<'tcx> DefUseAnalysis<'tcx> {\n         }\n     }\n \n-    pub fn local_info(&self, local: Local) -> &Info<'tcx> {\n+    pub fn local_info(&self, local: Local) -> &Info {\n         &self.info[local]\n     }\n \n-    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Mir<'tcx>, mut callback: F)\n+    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Mir<'_>, mut callback: F)\n                                where F: for<'a> FnMut(&'a mut Local,\n-                                                      PlaceContext<'tcx>,\n+                                                      PlaceContext,\n                                                       Location) {\n         for place_use in &self.info[local].defs_and_uses {\n             MutateUseVisitor::new(local,\n@@ -64,20 +61,20 @@ impl<'tcx> DefUseAnalysis<'tcx> {\n     // FIXME(pcwalton): this should update the def-use chains.\n     pub fn replace_all_defs_and_uses_with(&self,\n                                           local: Local,\n-                                          mir: &mut Mir<'tcx>,\n+                                          mir: &mut Mir<'_>,\n                                           new_local: Local) {\n         self.mutate_defs_and_uses(local, mir, |local, _, _| *local = new_local)\n     }\n }\n \n-struct DefUseFinder<'tcx> {\n-    info: IndexVec<Local, Info<'tcx>>,\n+struct DefUseFinder {\n+    info: IndexVec<Local, Info>,\n }\n \n-impl<'tcx> Visitor<'tcx> for DefUseFinder<'tcx> {\n+impl Visitor<'_> for DefUseFinder {\n     fn visit_local(&mut self,\n                    &local: &Local,\n-                   context: PlaceContext<'tcx>,\n+                   context: PlaceContext,\n                    location: Location) {\n         self.info[local].defs_and_uses.push(Use {\n             context,\n@@ -86,8 +83,8 @@ impl<'tcx> Visitor<'tcx> for DefUseFinder<'tcx> {\n     }\n }\n \n-impl<'tcx> Info<'tcx> {\n-    fn new() -> Info<'tcx> {\n+impl Info {\n+    fn new() -> Info {\n         Info {\n             defs_and_uses: vec![],\n         }\n@@ -107,7 +104,7 @@ impl<'tcx> Info<'tcx> {\n \n     pub fn defs_not_including_drop(\n         &self,\n-    ) -> iter::Filter<slice::Iter<'_, Use<'tcx>>, fn(&&Use<'tcx>) -> bool> {\n+    ) -> impl Iterator<Item=&Use> {\n         self.defs_and_uses.iter().filter(|place_use| {\n             place_use.context.is_mutating_use() && !place_use.context.is_drop()\n         })\n@@ -120,29 +117,27 @@ impl<'tcx> Info<'tcx> {\n     }\n }\n \n-struct MutateUseVisitor<'tcx, F> {\n+struct MutateUseVisitor<F> {\n     query: Local,\n     callback: F,\n-    phantom: PhantomData<&'tcx ()>,\n }\n \n-impl<'tcx, F> MutateUseVisitor<'tcx, F> {\n-    fn new(query: Local, callback: F, _: &Mir<'tcx>)\n-           -> MutateUseVisitor<'tcx, F>\n-           where F: for<'a> FnMut(&'a mut Local, PlaceContext<'tcx>, Location) {\n+impl<F> MutateUseVisitor<F> {\n+    fn new(query: Local, callback: F, _: &Mir<'_>)\n+           -> MutateUseVisitor<F>\n+           where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n         MutateUseVisitor {\n             query,\n             callback,\n-            phantom: PhantomData,\n         }\n     }\n }\n \n-impl<'tcx, F> MutVisitor<'tcx> for MutateUseVisitor<'tcx, F>\n-              where F: for<'a> FnMut(&'a mut Local, PlaceContext<'tcx>, Location) {\n+impl<F> MutVisitor<'_> for MutateUseVisitor<F>\n+              where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n     fn visit_local(&mut self,\n                     local: &mut Local,\n-                    context: PlaceContext<'tcx>,\n+                    context: PlaceContext,\n                     location: Location) {\n         if *local == self.query {\n             (self.callback)(local, context, location)"}, {"sha": "4302076f1c32a8726728c551f9301f790028e152", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -110,7 +110,7 @@ pub enum DefUse {\n     Drop,\n }\n \n-pub fn categorize<'tcx>(context: PlaceContext<'tcx>) -> Option<DefUse> {\n+pub fn categorize<'tcx>(context: PlaceContext) -> Option<DefUse> {\n     match context {\n         ///////////////////////////////////////////////////////////////////////////\n         // DEFS\n@@ -147,10 +147,10 @@ pub fn categorize<'tcx>(context: PlaceContext<'tcx>) -> Option<DefUse> {\n         // This won't affect the results since we use this analysis for generators\n         // and we only care about the result at suspension points. Borrows cannot\n         // cross suspension points so this behavior is unproblematic.\n-        PlaceContext::MutatingUse(MutatingUseContext::Borrow(..)) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) |\n-        PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow(..)) |\n+        PlaceContext::MutatingUse(MutatingUseContext::Borrow) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow) |\n \n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect) |\n         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n@@ -220,7 +220,7 @@ impl DefsUses {\n \n impl<'tcx> Visitor<'tcx> for DefsUsesVisitor\n {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         match categorize(context) {\n             Some(DefUse::Def) => self.defs_uses.add_def(local),\n             Some(DefUse::Use) | Some(DefUse::Drop) => self.defs_uses.add_use(local),\n@@ -247,9 +247,9 @@ fn block<'tcx>(\n \n     // Visit the various parts of the basic block in reverse. If we go\n     // forward, the logic in `add_def` and `add_use` would be wrong.\n-    visitor.visit_terminator(BasicBlock::new(0), b.terminator(), dummy_location);\n+    visitor.visit_terminator(b.terminator(), dummy_location);\n     for statement in b.statements.iter().rev() {\n-        visitor.visit_statement(BasicBlock::new(0), statement, dummy_location);\n+        visitor.visit_statement(statement, dummy_location);\n     }\n \n     visitor.defs_uses"}, {"sha": "6c377684bee5196bc915a08a2a7ec70e1739e936", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada68c9d1997eab7941c371552a3ebcfa08159b7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=ada68c9d1997eab7941c371552a3ebcfa08159b7", "patch": "@@ -337,7 +337,7 @@ where\n         )?;\n \n         write_extra(tcx, w, |visitor| {\n-            visitor.visit_statement(current_location.block, statement, current_location);\n+            visitor.visit_statement(statement, current_location);\n         })?;\n \n         extra_data(PassWhere::AfterLocation(current_location), w)?;\n@@ -358,7 +358,7 @@ where\n     )?;\n \n     write_extra(tcx, w, |visitor| {\n-        visitor.visit_terminator(current_location.block, data.terminator(), current_location);\n+        visitor.visit_terminator(data.terminator(), current_location);\n     })?;\n \n     extra_data(PassWhere::AfterLocation(current_location), w)?;"}]}