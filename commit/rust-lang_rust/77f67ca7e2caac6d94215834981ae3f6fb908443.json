{"sha": "77f67ca7e2caac6d94215834981ae3f6fb908443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZjY3Y2E3ZTJjYWFjNmQ5NDIxNTgzNDk4MWFlM2Y2ZmI5MDg0NDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-13T09:27:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-13T10:39:48Z"}, "message": "gracefully handle cycles in crate graph\n\nrust-lang/rust has absolutely weird setup with rustc-workspace-shim,\nwhich leads to real cycles.", "tree": {"sha": "6047b4e5101e39af9837f2e3192c4e29d94b7b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6047b4e5101e39af9837f2e3192c4e29d94b7b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f67ca7e2caac6d94215834981ae3f6fb908443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f67ca7e2caac6d94215834981ae3f6fb908443", "html_url": "https://github.com/rust-lang/rust/commit/77f67ca7e2caac6d94215834981ae3f6fb908443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f67ca7e2caac6d94215834981ae3f6fb908443/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40686722ba0762c4af396da120331710edfeabe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/40686722ba0762c4af396da120331710edfeabe8", "html_url": "https://github.com/rust-lang/rust/commit/40686722ba0762c4af396da120331710edfeabe8"}], "stats": {"total": 119, "additions": 78, "deletions": 41}, "files": [{"sha": "2b761ea0c447ca1e0891ee5d54ddce7a81e1975c", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/77f67ca7e2caac6d94215834981ae3f6fb908443/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f67ca7e2caac6d94215834981ae3f6fb908443/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=77f67ca7e2caac6d94215834981ae3f6fb908443", "patch": "@@ -53,6 +53,9 @@ pub struct CrateGraph {\n     arena: FxHashMap<CrateId, CrateData>,\n }\n \n+#[derive(Debug)]\n+pub struct CyclicDependencies;\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n@@ -94,12 +97,16 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n-    pub fn add_dep(&mut self, from: CrateId, name: SmolStr, to: CrateId) {\n-        let mut visited = FxHashSet::default();\n-        if self.dfs_find(from, to, &mut visited) {\n-            panic!(\"Cycle dependencies found.\")\n+    pub fn add_dep(\n+        &mut self,\n+        from: CrateId,\n+        name: SmolStr,\n+        to: CrateId,\n+    ) -> Result<(), CyclicDependencies> {\n+        if self.dfs_find(from, to, &mut FxHashSet::default()) {\n+            return Err(CyclicDependencies);\n         }\n-        self.arena.get_mut(&from).unwrap().add_dep(name, to)\n+        Ok(self.arena.get_mut(&from).unwrap().add_dep(name, to))\n     }\n     pub fn is_empty(&self) -> bool {\n         self.arena.is_empty()\n@@ -139,35 +146,6 @@ impl CrateGraph {\n     }\n }\n \n-#[cfg(test)]\n-mod tests {\n-    use super::{CrateGraph, FxHashMap, FileId, SmolStr};\n-\n-    #[test]\n-    #[should_panic]\n-    fn it_should_painc_because_of_cycle_dependencies() {\n-        let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32));\n-        let crate2 = graph.add_crate_root(FileId(2u32));\n-        let crate3 = graph.add_crate_root(FileId(3u32));\n-        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n-        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n-        graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1);\n-    }\n-\n-    #[test]\n-    fn it_works() {\n-        let mut graph = CrateGraph {\n-            arena: FxHashMap::default(),\n-        };\n-        let crate1 = graph.add_crate_root(FileId(1u32));\n-        let crate2 = graph.add_crate_root(FileId(2u32));\n-        let crate3 = graph.add_crate_root(FileId(3u32));\n-        graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2);\n-        graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3);\n-    }\n-}\n-\n salsa::query_group! {\n     pub trait FilesDatabase: salsa::Database {\n         /// Text of the file.\n@@ -209,3 +187,39 @@ salsa::query_group! {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{CrateGraph, FileId, SmolStr};\n+\n+    #[test]\n+    fn it_should_painc_because_of_cycle_dependencies() {\n+        let mut graph = CrateGraph::default();\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        assert!(graph\n+            .add_dep(crate1, SmolStr::new(\"crate2\"), crate2)\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, SmolStr::new(\"crate3\"), crate3)\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate3, SmolStr::new(\"crate1\"), crate1)\n+            .is_err());\n+    }\n+\n+    #[test]\n+    fn it_works() {\n+        let mut graph = CrateGraph::default();\n+        let crate1 = graph.add_crate_root(FileId(1u32));\n+        let crate2 = graph.add_crate_root(FileId(2u32));\n+        let crate3 = graph.add_crate_root(FileId(3u32));\n+        assert!(graph\n+            .add_dep(crate1, SmolStr::new(\"crate2\"), crate2)\n+            .is_ok());\n+        assert!(graph\n+            .add_dep(crate2, SmolStr::new(\"crate3\"), crate3)\n+            .is_ok());\n+    }\n+}"}, {"sha": "647fd92aad01e430f88d961e25f6c10d575111d2", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77f67ca7e2caac6d94215834981ae3f6fb908443/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f67ca7e2caac6d94215834981ae3f6fb908443/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=77f67ca7e2caac6d94215834981ae3f6fb908443", "patch": "@@ -235,7 +235,9 @@ fn item_map_across_crates() {\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+    crate_graph\n+        .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n+        .unwrap();\n \n     db.set_crate_graph(crate_graph);\n \n@@ -288,7 +290,9 @@ fn import_across_source_roots() {\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+    crate_graph\n+        .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n+        .unwrap();\n \n     db.set_crate_graph(crate_graph);\n \n@@ -330,7 +334,9 @@ fn reexport_across_crates() {\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate);\n+    crate_graph\n+        .add_dep(main_crate, \"test_crate\".into(), lib_crate)\n+        .unwrap();\n \n     db.set_crate_graph(crate_graph);\n "}, {"sha": "d5dbf999fd157d6e9fcc730790f78170f57e41ac", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77f67ca7e2caac6d94215834981ae3f6fb908443/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f67ca7e2caac6d94215834981ae3f6fb908443/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=77f67ca7e2caac6d94215834981ae3f6fb908443", "patch": "@@ -73,7 +73,9 @@ impl ServerWorldState {\n                     if let (Some(&from), Some(&to)) =\n                         (sysroot_crates.get(&from), sysroot_crates.get(&to))\n                     {\n-                        crate_graph.add_dep(from, name.clone(), to);\n+                        if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n+                            log::error!(\"cyclic dependency between sysroot crates\")\n+                        }\n                     }\n                 }\n             }\n@@ -108,11 +110,20 @@ impl ServerWorldState {\n                 for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                     if let Some(to) = lib_tgt {\n                         if to != from {\n-                            crate_graph.add_dep(from, pkg.name(&ws.cargo).into(), to);\n+                            if let Err(_) =\n+                                crate_graph.add_dep(from, pkg.name(&ws.cargo).into(), to)\n+                            {\n+                                log::error!(\n+                                    \"cyclic dependency between targets of {}\",\n+                                    pkg.name(&ws.cargo)\n+                                )\n+                            }\n                         }\n                     }\n                     if let Some(std) = libstd {\n-                        crate_graph.add_dep(from, \"std\".into(), std);\n+                        if let Err(_) = crate_graph.add_dep(from, \"std\".into(), std) {\n+                            log::error!(\"cyclic dependency on std for {}\", pkg.name(&ws.cargo))\n+                        }\n                     }\n                 }\n             }\n@@ -123,7 +134,13 @@ impl ServerWorldState {\n                 for dep in pkg.dependencies(&ws.cargo) {\n                     if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                         for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                            crate_graph.add_dep(from, dep.name.clone(), to);\n+                            if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n+                                log::error!(\n+                                    \"cyclic dependency {} -> {}\",\n+                                    pkg.name(&ws.cargo),\n+                                    dep.pkg.name(&ws.cargo)\n+                                )\n+                            }\n                         }\n                     }\n                 }"}]}