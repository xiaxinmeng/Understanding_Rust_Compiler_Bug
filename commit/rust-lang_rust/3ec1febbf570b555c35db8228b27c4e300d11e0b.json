{"sha": "3ec1febbf570b555c35db8228b27c4e300d11e0b", "node_id": "C_kwDOAAsO6NoAKDNlYzFmZWJiZjU3MGI1NTVjMzVkYjgyMjhiMjdjNGUzMDBkMTFlMGI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-17T23:27:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-17T23:32:13Z"}, "message": "add caution to some comments", "tree": {"sha": "14bb5c6a0d76cc76101818461662a47f7c7ad72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14bb5c6a0d76cc76101818461662a47f7c7ad72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ec1febbf570b555c35db8228b27c4e300d11e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec1febbf570b555c35db8228b27c4e300d11e0b", "html_url": "https://github.com/rust-lang/rust/commit/3ec1febbf570b555c35db8228b27c4e300d11e0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ec1febbf570b555c35db8228b27c4e300d11e0b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18", "html_url": "https://github.com/rust-lang/rust/commit/85ee04c44a1d4ffc2f2e3bb0c217908ce4062a18"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "9ae50d0df80d7aea63a815a8eafe3cd3c2ca2525", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ec1febbf570b555c35db8228b27c4e300d11e0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec1febbf570b555c35db8228b27c4e300d11e0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=3ec1febbf570b555c35db8228b27c4e300d11e0b", "patch": "@@ -1058,7 +1058,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // operating system this can avoid physically allocating the page.\n             dest_alloc\n                 .write_uninit(&tcx, dest_range)\n-                .map_err(|e| e.to_interp_error(dest_alloc_id))?; // `Size` multiplication\n+                .map_err(|e| e.to_interp_error(dest_alloc_id))?;\n             // We can forget about the relocations, this is all not initialized anyway.\n             return Ok(());\n         }"}, {"sha": "ad1ea1a6d39ca3ef6e120fe98fae2e8ceaa2d683", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ec1febbf570b555c35db8228b27c4e300d11e0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec1febbf570b555c35db8228b27c4e300d11e0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=3ec1febbf570b555c35db8228b27c4e300d11e0b", "patch": "@@ -269,7 +269,7 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n     /// `get_bytes_with_uninit_and_ptr` instead,\n     ///\n     /// This function also guarantees that the resulting pointer will remain stable\n-    /// even when new allocations are pushed to the `HashMap`. `copy_repeatedly` relies\n+    /// even when new allocations are pushed to the `HashMap`. `mem_copy_repeatedly` relies\n     /// on that.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n@@ -605,6 +605,9 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Applies a relocation copy.\n     /// The affected range, as defined in the parameters to `prepare_relocation_copy` is expected\n     /// to be clear of relocations.\n+    ///\n+    /// This is dangerous to use as it can violate internal `Allocation` invariants!\n+    /// It only exists to support an efficient implementation of `mem_copy_repeatedly`.\n     pub fn mark_relocation_range(&mut self, relocations: AllocationRelocations<Tag>) {\n         self.relocations.0.insert_presorted(relocations.relative_relocations);\n     }\n@@ -1124,6 +1127,9 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n     }\n \n     /// Applies multiple instances of the run-length encoding to the initialization mask.\n+    ///\n+    /// This is dangerous to use as it can violate internal `Allocation` invariants!\n+    /// It only exists to support an efficient implementation of `mem_copy_repeatedly`.\n     pub fn mark_compressed_init_range(\n         &mut self,\n         defined: &InitMaskCompressed,"}]}