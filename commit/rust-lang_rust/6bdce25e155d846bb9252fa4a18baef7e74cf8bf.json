{"sha": "6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZGNlMjVlMTU1ZDg0NmJiOTI1MmZhNGExOGJhZWY3ZTc0Y2Y4YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-19T06:12:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-19T06:12:01Z"}, "message": "auto merge of #19899 : japaric/rust/unops-by-value, r=nikomatsakis\n\n- The following operator traits now take their argument by value: `Neg`, `Not`. This breaks all existing implementations of these traits.\r\n\r\n- The unary operation `OP a` now \"desugars\" to `OpTrait::op_method(a)` and consumes its argument.\r\n\r\n[breaking-change]\r\n\r\n---\r\n\r\nr? @nikomatsakis This PR is very similar to the binops-by-value PR\r\ncc @aturon", "tree": {"sha": "80099a51ee183950cfa5661299e8dfcdeafd20c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80099a51ee183950cfa5661299e8dfcdeafd20c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "html_url": "https://github.com/rust-lang/rust/commit/6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "840de072085df360733c48396224e9966e2dc72c", "url": "https://api.github.com/repos/rust-lang/rust/commits/840de072085df360733c48396224e9966e2dc72c", "html_url": "https://github.com/rust-lang/rust/commit/840de072085df360733c48396224e9966e2dc72c"}, {"sha": "9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "html_url": "https://github.com/rust-lang/rust/commit/9b5de39c25b9b19ffcff3d519821b72a31d39d6c"}], "stats": {"total": 209, "additions": 195, "deletions": 14}, "files": [{"sha": "0090da3cdad6edfc9ebbf4764f566702c28b5998", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -542,12 +542,16 @@ rem_float_impl! { f64, fmod }\n ///     -Foo;\n /// }\n /// ```\n+// NOTE(stage0): Remove trait after a snapshot\n+#[cfg(stage0)]\n #[lang=\"neg\"]\n pub trait Neg<Result> for Sized? {\n     /// The method for the unary `-` operator\n     fn neg(&self) -> Result;\n }\n \n+// NOTE(stage0): Remove macro after a snapshot\n+#[cfg(stage0)]\n macro_rules! neg_impl {\n     ($($t:ty)*) => ($(\n         impl Neg<$t> for $t {\n@@ -557,6 +561,8 @@ macro_rules! neg_impl {\n     )*)\n }\n \n+// NOTE(stage0): Remove macro after a snapshot\n+#[cfg(stage0)]\n macro_rules! neg_uint_impl {\n     ($t:ty, $t_signed:ty) => {\n         impl Neg<$t> for $t {\n@@ -566,6 +572,56 @@ macro_rules! neg_uint_impl {\n     }\n }\n \n+/// The `Neg` trait is used to specify the functionality of unary `-`.\n+///\n+/// # Example\n+///\n+/// A trivial implementation of `Neg`. When `-Foo` happens, it ends up calling\n+/// `neg`, and therefore, `main` prints `Negating!`.\n+///\n+/// ```\n+/// struct Foo;\n+///\n+/// impl Copy for Foo {}\n+///\n+/// impl Neg<Foo> for Foo {\n+///     fn neg(self) -> Foo {\n+///         println!(\"Negating!\");\n+///         self\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     -Foo;\n+/// }\n+/// ```\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+#[lang=\"neg\"]\n+pub trait Neg<Result> {\n+    /// The method for the unary `-` operator\n+    fn neg(self) -> Result;\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+macro_rules! neg_impl {\n+    ($($t:ty)*) => ($(\n+        impl Neg<$t> for $t {\n+            #[inline]\n+            fn neg(self) -> $t { -self }\n+        }\n+    )*)\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+macro_rules! neg_uint_impl {\n+    ($t:ty, $t_signed:ty) => {\n+        impl Neg<$t> for $t {\n+            #[inline]\n+            fn neg(self) -> $t { -(self as $t_signed) as $t }\n+        }\n+    }\n+}\n+\n neg_impl! { int i8 i16 i32 i64 f32 f64 }\n \n neg_uint_impl! { uint, int }\n@@ -598,13 +654,17 @@ neg_uint_impl! { u64, i64 }\n ///     !Foo;\n /// }\n /// ```\n+// NOTE(stage0): Remove macro after a snapshot\n+#[cfg(stage0)]\n #[lang=\"not\"]\n pub trait Not<Result> for Sized? {\n     /// The method for the unary `!` operator\n     fn not(&self) -> Result;\n }\n \n \n+// NOTE(stage0): Remove macro after a snapshot\n+#[cfg(stage0)]\n macro_rules! not_impl {\n     ($($t:ty)*) => ($(\n         impl Not<$t> for $t {\n@@ -614,6 +674,46 @@ macro_rules! not_impl {\n     )*)\n }\n \n+/// The `Not` trait is used to specify the functionality of unary `!`.\n+///\n+/// # Example\n+///\n+/// A trivial implementation of `Not`. When `!Foo` happens, it ends up calling\n+/// `not`, and therefore, `main` prints `Not-ing!`.\n+///\n+/// ```\n+/// struct Foo;\n+///\n+/// impl Copy for Foo {}\n+///\n+/// impl Not<Foo> for Foo {\n+///     fn not(self) -> Foo {\n+///         println!(\"Not-ing!\");\n+///         self\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     !Foo;\n+/// }\n+/// ```\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+#[lang=\"not\"]\n+pub trait Not<Result> {\n+    /// The method for the unary `!` operator\n+    fn not(self) -> Result;\n+}\n+\n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+macro_rules! not_impl {\n+    ($($t:ty)*) => ($(\n+        impl Not<$t> for $t {\n+            #[inline]\n+            fn not(self) -> $t { !self }\n+        }\n+    )*)\n+}\n+\n not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n \n /// The `BitAnd` trait is used to specify the functionality of `&`."}, {"sha": "901944cd0168e2b0d90c8285f7d95e6291c252f2", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -576,8 +576,14 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 self.walk_block(&**blk);\n             }\n \n-            ast::ExprUnary(_, ref lhs) => {\n-                if !self.walk_overloaded_operator(expr, &**lhs, Vec::new(), PassArgs::ByRef) {\n+            ast::ExprUnary(op, ref lhs) => {\n+                let pass_args = if ast_util::is_by_value_unop(op) {\n+                    PassArgs::ByValue\n+                } else {\n+                    PassArgs::ByRef\n+                };\n+\n+                if !self.walk_overloaded_operator(expr, &**lhs, Vec::new(), pass_args) {\n                     self.consume_expr(&**lhs);\n                 }\n             }\n@@ -937,7 +943,9 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         match pass_args {\n             PassArgs::ByValue => {\n                 self.consume_expr(receiver);\n-                self.consume_expr(rhs[0]);\n+                for &arg in rhs.iter() {\n+                    self.consume_expr(arg);\n+                }\n \n                 return true;\n             },"}, {"sha": "304142453a9c88c1884c08c6227bb0044262b1a4", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -1101,11 +1101,11 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                 vec![(rhs_datum, rhs.id)], Some(dest),\n                                 !ast_util::is_by_value_binop(op)).bcx\n         }\n-        ast::ExprUnary(_, ref subexpr) => {\n+        ast::ExprUnary(op, ref subexpr) => {\n             // if not overloaded, would be RvalueDatumExpr\n             let arg = unpack_datum!(bcx, trans(bcx, &**subexpr));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id),\n-                                arg, Vec::new(), Some(dest), true).bcx\n+                                arg, Vec::new(), Some(dest), !ast_util::is_by_value_unop(op)).bcx\n         }\n         ast::ExprIndex(ref base, ref idx) => {\n             // if not overloaded, would be RvalueDatumExpr"}, {"sha": "def82ecd6c85b18e783194ea453aaaee5edf72b0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -3356,14 +3356,15 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                  trait_did: Option<ast::DefId>,\n                                  ex: &ast::Expr,\n                                  rhs_expr: &ast::Expr,\n-                                 rhs_t: Ty<'tcx>) -> Ty<'tcx> {\n+                                 rhs_t: Ty<'tcx>,\n+                                 op: ast::UnOp) -> Ty<'tcx> {\n        lookup_op_method(fcx, ex, rhs_t, token::intern(mname),\n                         trait_did, rhs_expr, None, || {\n             fcx.type_error_message(ex.span, |actual| {\n                 format!(\"cannot apply unary operator `{}` to type `{}`\",\n                         op_str, actual)\n             }, rhs_t, None);\n-        }, AutorefArgs::Yes)\n+        }, if ast_util::is_by_value_unop(op) { AutorefArgs::No } else { AutorefArgs::Yes })\n     }\n \n     // Check field access expressions\n@@ -3803,7 +3804,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                          oprnd_t.sty == ty::ty_bool) {\n                         oprnd_t = check_user_unop(fcx, \"!\", \"not\",\n                                                   tcx.lang_items.not_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                                                  expr, &**oprnd, oprnd_t, unop);\n                     }\n                 }\n                 ast::UnNeg => {\n@@ -3813,7 +3814,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                          ty::type_is_fp(oprnd_t)) {\n                         oprnd_t = check_user_unop(fcx, \"-\", \"neg\",\n                                                   tcx.lang_items.neg_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                                                  expr, &**oprnd, oprnd_t, unop);\n                     }\n                 }\n             }"}, {"sha": "bfa3c384da7b2468f1065838c03021aacbabf3a5", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -682,10 +682,12 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprUnary(_, ref lhs) if has_method_map => {\n+        ast::ExprUnary(op, ref lhs) if has_method_map => {\n+            let implicitly_ref_args = !ast_util::is_by_value_unop(op);\n+\n             // As above.\n             constrain_call(rcx, expr, Some(&**lhs),\n-                           None::<ast::Expr>.iter(), true);\n+                           None::<ast::Expr>.iter(), implicitly_ref_args);\n \n             visit::walk_expr(rcx, expr);\n         }"}, {"sha": "f467b77dbf4cfdb9084171e07e9d5a16e5f9d369", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -281,13 +281,24 @@ macro_rules! bitflags {\n             }\n         }\n \n+        // NOTE(stage0): Remove impl after a snapshot\n+        #[cfg(stage0)]\n         impl Not<$BitFlags> for $BitFlags {\n             /// Returns the complement of this set of flags.\n             #[inline]\n             fn not(&self) -> $BitFlags {\n                 $BitFlags { bits: !self.bits } & $BitFlags::all()\n             }\n         }\n+\n+        #[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+        impl Not<$BitFlags> for $BitFlags {\n+            /// Returns the complement of this set of flags.\n+            #[inline]\n+            fn not(self) -> $BitFlags {\n+                $BitFlags { bits: !self.bits } & $BitFlags::all()\n+            }\n+        }\n     };\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n         $($(#[$Flag_attr:meta])* const $Flag:ident = $value:expr),+,"}, {"sha": "85ed27853c4544793a4f0e45fe036a08ab50849f", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -265,6 +265,8 @@ impl Duration {\n     }\n }\n \n+// NOTE(stage0): Remove impl after a snapshot\n+#[cfg(stage0)]\n impl Neg<Duration> for Duration {\n     #[inline]\n     fn neg(&self) -> Duration {\n@@ -276,6 +278,18 @@ impl Neg<Duration> for Duration {\n     }\n }\n \n+#[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+impl Neg<Duration> for Duration {\n+    #[inline]\n+    fn neg(self) -> Duration {\n+        if self.nanos == 0 {\n+            Duration { secs: -self.secs, nanos: 0 }\n+        } else {\n+            Duration { secs: -self.secs - 1, nanos: NANOS_PER_SEC - self.nanos }\n+        }\n+    }\n+}\n+\n // NOTE(stage0): Remove impl after a snapshot\n #[cfg(stage0)]\n impl Add<Duration,Duration> for Duration {"}, {"sha": "5243f07f32749f62fdc7787489a6dec391cf2782", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -85,7 +85,7 @@ pub fn is_shift_binop(b: BinOp) -> bool {\n     }\n }\n \n-/// Returns `true` is the binary operator takes its arguments by value\n+/// Returns `true` if the binary operator takes its arguments by value\n pub fn is_by_value_binop(b: BinOp) -> bool {\n     match b {\n         BiAdd | BiSub | BiMul | BiDiv | BiRem | BiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr => {\n@@ -95,6 +95,14 @@ pub fn is_by_value_binop(b: BinOp) -> bool {\n     }\n }\n \n+/// Returns `true` if the unary operator takes its argument by value\n+pub fn is_by_value_unop(u: UnOp) -> bool {\n+    match u {\n+        UnNeg | UnNot => true,\n+        _ => false,\n+    }\n+}\n+\n pub fn unop_to_string(op: UnOp) -> &'static str {\n     match op {\n       UnUniq => \"box() \","}, {"sha": "ccdc7b833e714401c32f84fd8b7d7a4f5aa06268", "filename": "src/test/compile-fail/unop-move-semantics.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funop-move-semantics.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that move restrictions are enforced on overloaded unary operations\n+\n+fn move_then_borrow<T: Not<T> + Clone>(x: T) {\n+    !x;\n+\n+    x.clone();  //~ ERROR: use of moved value\n+}\n+\n+fn move_borrowed<T: Not<T>>(x: T, mut y: T) {\n+    let m = &x;\n+    let n = &mut y;\n+\n+    !x;  //~ ERROR: cannot move out of `x` because it is borrowed\n+\n+    !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+}\n+\n+fn illegal_dereference<T: Not<T>>(mut x: T, y: T) {\n+    let m = &mut x;\n+    let n = &y;\n+\n+    !*m;  //~ ERROR: cannot move out of dereference of `&mut`-pointer\n+\n+    !*n;  //~ ERROR: cannot move out of dereference of `&`-pointer\n+}\n+\n+fn main() {}"}, {"sha": "1e646e9399c56714d4474c67c02cb7508a8cb505", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdce25e155d846bb9252fa4a18baef7e74cf8bf/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "patch": "@@ -31,13 +31,13 @@ impl ops::Sub<Point,Point> for Point {\n }\n \n impl ops::Neg<Point> for Point {\n-    fn neg(&self) -> Point {\n+    fn neg(self) -> Point {\n         Point {x: -self.x, y: -self.y}\n     }\n }\n \n impl ops::Not<Point> for Point {\n-    fn not(&self) -> Point {\n+    fn not(self) -> Point {\n         Point {x: !self.x, y: !self.y }\n     }\n }"}]}