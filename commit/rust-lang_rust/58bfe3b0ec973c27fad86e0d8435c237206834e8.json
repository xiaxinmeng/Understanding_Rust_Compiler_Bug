{"sha": "58bfe3b0ec973c27fad86e0d8435c237206834e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YmZlM2IwZWM5NzNjMjdmYWQ4NmUwZDg0MzVjMjM3MjA2ODM0ZTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T13:45:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T13:45:29Z"}, "message": "Rollup merge of #65145 - estebank:turbofish-assoc-fn-call, r=varkor\n\nWhen suggesting assoc function with type params, include turbofish\n\nFix https://github.com/rust-lang/rust/issues/61412, fix https://github.com/rust-lang/rust/issues/61411.", "tree": {"sha": "6e348ad881b7d5acf72ac63a8e7e8ac9838d639a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e348ad881b7d5acf72ac63a8e7e8ac9838d639a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bfe3b0ec973c27fad86e0d8435c237206834e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnJL5CRBK7hj4Ov3rIwAAdHIIAKr+k9yU1xI7g593115Ql79Z\ndCp6sA9iw+K8CGYxSmRQlL2JSUMQPU43d4ParscRwIqmTlTYxH/kuzeWYTd6/WQz\n/y5Whub/BzkLdBYPsmzPrY68/AfevVrErIp1kYM54V7Vqyw1v8d56qdc3h6AzF5O\n5sJABceP2lGW0XcQkYg8CTctWwydEUS4VTUBBFDitBidknVNqqlrsaSvuI1FSTbh\nl3KD/z9aLoO4Uo8sQKg2vzz9arEgb3s19T85BpMzzSq7EHO9tvIjqNTbcbCAN2yB\n0JTmKOB3MmWNu4dThmrD51ldEOTJ63b13/fk/EcAEDhRyqOAL/kPhs0WSmZzMuY=\n=cwHe\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e348ad881b7d5acf72ac63a8e7e8ac9838d639a\nparent 153d3c3ea76ed704bf1b9a4dde1e0d2cb36aaabe\nparent 3166ce81ec664a0982937050fcedeb3d8538f686\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570542329 +0200\ncommitter GitHub <noreply@github.com> 1570542329 +0200\n\nRollup merge of #65145 - estebank:turbofish-assoc-fn-call, r=varkor\n\nWhen suggesting assoc function with type params, include turbofish\n\nFix https://github.com/rust-lang/rust/issues/61412, fix https://github.com/rust-lang/rust/issues/61411.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bfe3b0ec973c27fad86e0d8435c237206834e8", "html_url": "https://github.com/rust-lang/rust/commit/58bfe3b0ec973c27fad86e0d8435c237206834e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bfe3b0ec973c27fad86e0d8435c237206834e8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "153d3c3ea76ed704bf1b9a4dde1e0d2cb36aaabe", "url": "https://api.github.com/repos/rust-lang/rust/commits/153d3c3ea76ed704bf1b9a4dde1e0d2cb36aaabe", "html_url": "https://github.com/rust-lang/rust/commit/153d3c3ea76ed704bf1b9a4dde1e0d2cb36aaabe"}, {"sha": "3166ce81ec664a0982937050fcedeb3d8538f686", "url": "https://api.github.com/repos/rust-lang/rust/commits/3166ce81ec664a0982937050fcedeb3d8538f686", "html_url": "https://github.com/rust-lang/rust/commit/3166ce81ec664a0982937050fcedeb3d8538f686"}], "stats": {"total": 111, "additions": 102, "deletions": 9}, "files": [{"sha": "b4b84b61fd6277ab8d771dc495d303fd0d8baa69", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=58bfe3b0ec973c27fad86e0d8435c237206834e8", "patch": "@@ -461,16 +461,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(span, \"this is an associated function, not a method\");\n                 }\n                 if static_sources.len() == 1 {\n+                    let ty_str = if let Some(CandidateSource::ImplSource(\n+                        impl_did,\n+                    )) = static_sources.get(0) {\n+                        // When the \"method\" is resolved through dereferencing, we really want the\n+                        // original type that has the associated function for accurate suggestions.\n+                        // (#61411)\n+                        let ty = self.impl_self_ty(span, *impl_did).ty;\n+                        match (&ty.peel_refs().kind, &actual.peel_refs().kind) {\n+                            (ty::Adt(def, _), ty::Adt(def_actual, _)) if def == def_actual => {\n+                                // Use `actual` as it will have more `substs` filled in.\n+                                self.ty_to_value_string(actual.peel_refs())\n+                            }\n+                            _ => self.ty_to_value_string(ty.peel_refs()),\n+                        }\n+                    } else {\n+                        self.ty_to_value_string(actual.peel_refs())\n+                    };\n                     if let SelfSource::MethodCall(expr) = source {\n-                        err.span_suggestion(expr.span.to(span),\n-                                            \"use associated function syntax instead\",\n-                                            format!(\"{}::{}\",\n-                                                    self.ty_to_string(actual),\n-                                                    item_name),\n-                                            Applicability::MachineApplicable);\n+                        err.span_suggestion(\n+                            expr.span.to(span),\n+                            \"use associated function syntax instead\",\n+                            format!(\"{}::{}\", ty_str, item_name),\n+                            Applicability::MachineApplicable,\n+                        );\n                     } else {\n-                        err.help(&format!(\"try with `{}::{}`\",\n-                                          self.ty_to_string(actual), item_name));\n+                        err.help(&format!(\n+                            \"try with `{}::{}`\",\n+                            ty_str,\n+                            item_name,\n+                        ));\n                     }\n \n                     report_candidates(span, &mut err, static_sources);\n@@ -586,6 +606,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    /// Print out the type for use in value namespace.\n+    fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n+        match ty.kind {\n+            ty::Adt(def, substs) => format!(\"{}\", ty::Instance::new(def.did, substs)),\n+            _ => self.ty_to_string(ty),\n+        }\n+    }\n+\n     fn suggest_use_candidates(&self,\n                               err: &mut DiagnosticBuilder<'_>,\n                               mut msg: String,"}, {"sha": "b98bc572a397c6c87cbf8b6ed148beb919fe5b1f", "filename": "src/test/ui/issues/issue-3707.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr?ref=58bfe3b0ec973c27fad86e0d8435c237206834e8", "patch": "@@ -5,7 +5,7 @@ LL |         self.boom();\n    |         -----^^^^\n    |         |    |\n    |         |    this is an associated function, not a method\n-   |         help: use associated function syntax instead: `&Obj::boom`\n+   |         help: use associated function syntax instead: `Obj::boom`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Obj`"}, {"sha": "5480adb31015a360e0b26cd35b8434a1105360f5", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.rs?ref=58bfe3b0ec973c27fad86e0d8435c237206834e8", "patch": "@@ -0,0 +1,13 @@\n+use std::cell::RefCell;\n+\n+struct HasAssocMethod;\n+\n+impl HasAssocMethod {\n+    fn hello() {}\n+}\n+fn main() {\n+    let shared_state = RefCell::new(HasAssocMethod);\n+    let state = shared_state.borrow_mut();\n+    state.hello();\n+    //~^ ERROR no method named `hello` found for type `std::cell::RefMut<'_, HasAssocMethod>`\n+}"}, {"sha": "a1c0126146e73278a2f3942db88d02ef1a1cde84", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish-through-deref.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish-through-deref.stderr?ref=58bfe3b0ec973c27fad86e0d8435c237206834e8", "patch": "@@ -0,0 +1,19 @@\n+error[E0599]: no method named `hello` found for type `std::cell::RefMut<'_, HasAssocMethod>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:11:11\n+   |\n+LL |     state.hello();\n+   |     ------^^^^^\n+   |     |     |\n+   |     |     this is an associated function, not a method\n+   |     help: use associated function syntax instead: `HasAssocMethod::hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `HasAssocMethod`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish-through-deref.rs:6:5\n+   |\n+LL |     fn hello() {}\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "ef4b38de9473272d78c489e6349319622673832e", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.rs?ref=58bfe3b0ec973c27fad86e0d8435c237206834e8", "patch": "@@ -0,0 +1,11 @@\n+struct GenericAssocMethod<T>(T);\n+\n+impl<T> GenericAssocMethod<T> {\n+    fn default_hello() {}\n+}\n+\n+fn main() {\n+    let x = GenericAssocMethod(33i32);\n+    x.default_hello();\n+    //~^ ERROR no method named `default_hello` found for type `GenericAssocMethod<i32>`\n+}"}, {"sha": "8cfa7de08bb38f163ecc4c47a1e86280b2aa6fa4", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe3b0ec973c27fad86e0d8435c237206834e8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=58bfe3b0ec973c27fad86e0d8435c237206834e8", "patch": "@@ -0,0 +1,22 @@\n+error[E0599]: no method named `default_hello` found for type `GenericAssocMethod<i32>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:9:7\n+   |\n+LL | struct GenericAssocMethod<T>(T);\n+   | -------------------------------- method `default_hello` not found for this\n+...\n+LL |     x.default_hello();\n+   |     --^^^^^^^^^^^^^\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<_>`\n+  --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n+   |\n+LL |     fn default_hello() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}