{"sha": "ef8de38c8498885a46119f214e17f0237dab6251", "node_id": "C_kwDOAAsO6NoAKGVmOGRlMzhjODQ5ODg4NWE0NjExOWYyMTRlMTdmMDIzN2RhYjYyNTE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-11T00:00:18Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-11T12:28:35Z"}, "message": "rustdoc: Don't resolve link to field on different variant", "tree": {"sha": "3073aa0e7a810e7d58790983fc9a8a2bd0ca32a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3073aa0e7a810e7d58790983fc9a8a2bd0ca32a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef8de38c8498885a46119f214e17f0237dab6251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8de38c8498885a46119f214e17f0237dab6251", "html_url": "https://github.com/rust-lang/rust/commit/ef8de38c8498885a46119f214e17f0237dab6251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef8de38c8498885a46119f214e17f0237dab6251/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2773383a314a4b8f481ce2bed12c32de794ffbe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2773383a314a4b8f481ce2bed12c32de794ffbe9", "html_url": "https://github.com/rust-lang/rust/commit/2773383a314a4b8f481ce2bed12c32de794ffbe9"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "1ee98a79b0563f578523efe85628700557daf9fd", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef8de38c8498885a46119f214e17f0237dab6251/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8de38c8498885a46119f214e17f0237dab6251/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ef8de38c8498885a46119f214e17f0237dab6251", "patch": "@@ -338,7 +338,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         match ty_res {\n             Res::Def(DefKind::Enum, did) => match tcx.type_of(did).kind() {\n                 ty::Adt(def, _) if def.is_enum() => {\n-                    if let Some(field) = def.all_fields().find(|f| f.name == variant_field_name) {\n+                    if let Some(variant) = def.variants().iter().find(|v| v.name == variant_name)\n+                        && let Some(field) = variant.fields.iter().find(|f| f.name == variant_field_name) {\n                         Ok((ty_res, field.did))\n                     } else {\n                         Err(UnresolvedPath {\n@@ -1768,15 +1769,35 @@ fn resolution_failure(\n \n                     // Otherwise, it must be an associated item or variant\n                     let res = partial_res.expect(\"None case was handled by `last_found_module`\");\n-                    let kind = match res {\n-                        Res::Def(kind, _) => Some(kind),\n+                    let kind_did = match res {\n+                        Res::Def(kind, did) => Some((kind, did)),\n                         Res::Primitive(_) => None,\n                     };\n-                    let path_description = if let Some(kind) = kind {\n+                    let is_struct_variant = |did| {\n+                        if let ty::Adt(def, _) = tcx.type_of(did).kind()\n+                        && def.is_enum()\n+                        && let Some(variant) = def.variants().iter().find(|v| v.name == res.name(tcx)) {\n+                            // ctor is `None` if variant is a struct\n+                            variant.ctor.is_none()\n+                        } else {\n+                            false\n+                        }\n+                    };\n+                    let path_description = if let Some((kind, did)) = kind_did {\n                         match kind {\n                             Mod | ForeignMod => \"inner item\",\n                             Struct => \"field or associated item\",\n                             Enum | Union => \"variant or associated item\",\n+                            Variant if is_struct_variant(did) => {\n+                                let variant = res.name(tcx);\n+                                let note = format!(\"variant `{variant}` has no such field\");\n+                                if let Some(span) = sp {\n+                                    diag.span_label(span, &note);\n+                                } else {\n+                                    diag.note(&note);\n+                                }\n+                                return;\n+                            }\n                             Variant\n                             | Field\n                             | Closure"}, {"sha": "95dd2b98e037ed1b49001ca610fa6a8a6e19d6ec", "filename": "tests/rustdoc-ui/intra-doc/errors.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef8de38c8498885a46119f214e17f0237dab6251/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8de38c8498885a46119f214e17f0237dab6251/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs?ref=ef8de38c8498885a46119f214e17f0237dab6251", "patch": "@@ -103,3 +103,19 @@ pub trait T {\n macro_rules! m {\n     () => {};\n }\n+\n+///[`TestEnum::Variant1::field_name`]\n+//~^ ERROR unresolved link\n+//~| NOTE variant `Variant1` has no such field\n+pub enum TestEnum {\n+    Variant1 {},\n+    Variant2 { field_name: u64 },\n+}\n+\n+///[`TestEnumNoFields::Variant1::field_name`]\n+//~^ ERROR unresolved link\n+//~| NOTE `Variant1` is a variant, not a module or type, and cannot have associated items\n+pub enum TestEnumNoFields {\n+    Variant1 (),\n+    Variant2 {},\n+}"}, {"sha": "1b2416d7da76570b745501df69df93a2b0e1e80a", "filename": "tests/rustdoc-ui/intra-doc/errors.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef8de38c8498885a46119f214e17f0237dab6251/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef8de38c8498885a46119f214e17f0237dab6251/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=ef8de38c8498885a46119f214e17f0237dab6251", "patch": "@@ -142,6 +142,18 @@ error: unresolved link to `T::h`\n LL | /// [T::h!]\n    |      ^^^^^ the trait `T` has no macro named `h`\n \n+error: unresolved link to `TestEnum::Variant1::field_name`\n+  --> $DIR/errors.rs:107:6\n+   |\n+LL | ///[`TestEnum::Variant1::field_name`]\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ variant `Variant1` has no such field\n+\n+error: unresolved link to `TestEnumNoFields::Variant1::field_name`\n+  --> $DIR/errors.rs:115:6\n+   |\n+LL | ///[`TestEnumNoFields::Variant1::field_name`]\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Variant1` is a variant, not a module or type, and cannot have associated items\n+\n error: unresolved link to `m`\n   --> $DIR/errors.rs:98:6\n    |\n@@ -153,5 +165,5 @@ help: to link to the macro, add an exclamation mark\n LL | /// [m!()]\n    |       +\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 22 previous errors\n "}]}