{"sha": "f15c8169327244730f8e68598bf85d288e16fd70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNWM4MTY5MzI3MjQ0NzMwZjhlNjg1OThiZjg1ZDI4OGUxNmZkNzA=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-23T17:19:21Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-23T17:31:09Z"}, "message": "Make PanicInfo::message available for std::panic! with a formatting string.\n\nThis enables PanicInfo\u2019s Display impl to show the panic message in those cases.", "tree": {"sha": "601e2a0f076fb55a6616769d33a0310a50c05943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/601e2a0f076fb55a6616769d33a0310a50c05943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15c8169327244730f8e68598bf85d288e16fd70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15c8169327244730f8e68598bf85d288e16fd70", "html_url": "https://github.com/rust-lang/rust/commit/f15c8169327244730f8e68598bf85d288e16fd70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15c8169327244730f8e68598bf85d288e16fd70/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e60287b4136bcede0c5eae8ab4e5de8496a16f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e60287b4136bcede0c5eae8ab4e5de8496a16f0", "html_url": "https://github.com/rust-lang/rust/commit/0e60287b4136bcede0c5eae8ab4e5de8496a16f0"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "14eb68d9b95b5ebf029424ae9debc8a2ffb5b4c8", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f15c8169327244730f8e68598bf85d288e16fd70/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15c8169327244730f8e68598bf85d288e16fd70/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=f15c8169327244730f8e68598bf85d288e16fd70", "patch": "@@ -130,8 +130,8 @@ impl<'a> fmt::Display for PanicInfo<'a> {\n         }\n         // NOTE: we cannot use downcast_ref::<String>() here\n         // since String is not available in libcore!\n-        // A String payload and no message is what we\u2019d get from `std::panic!`\n-        // called with multiple arguments.\n+        // The payload is a String when `std::panic!` is called with multiple arguments,\n+        // but in that case the message is also available.\n \n         self.location.fmt(formatter)\n     }"}, {"sha": "161c3fc7113a7eea96980c8cefc06b0df55c918e", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f15c8169327244730f8e68598bf85d288e16fd70/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15c8169327244730f8e68598bf85d288e16fd70/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=f15c8169327244730f8e68598bf85d288e16fd70", "patch": "@@ -344,7 +344,7 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n \n     let mut s = String::new();\n     let _ = s.write_fmt(*msg);\n-    begin_panic(s, file_line_col)\n+    rust_panic_with_hook(Box::new(s), Some(msg), file_line_col)\n }\n \n /// This is the entry point of panicking for panic!() and assert!().\n@@ -360,7 +360,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n     // be performed in the parent of this thread instead of the thread that's\n     // panicking.\n \n-    rust_panic_with_hook(Box::new(msg), file_line_col)\n+    rust_panic_with_hook(Box::new(msg), None, file_line_col)\n }\n \n /// Executes the primary logic for a panic, including checking for recursive\n@@ -371,7 +371,8 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// run panic hooks, and then delegate to the actual implementation of panics.\n #[inline(never)]\n #[cold]\n-fn rust_panic_with_hook(msg: Box<Any + Send>,\n+fn rust_panic_with_hook(payload: Box<Any + Send>,\n+                        message: Option<&fmt::Arguments>,\n                         file_line_col: &(&'static str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n \n@@ -390,8 +391,8 @@ fn rust_panic_with_hook(msg: Box<Any + Send>,\n \n     unsafe {\n         let info = PanicInfo::internal_constructor(\n-            &*msg,\n-            None,\n+            &*payload,\n+            message,\n             Location::internal_constructor(file, line, col),\n         );\n         HOOK_LOCK.read();\n@@ -412,7 +413,7 @@ fn rust_panic_with_hook(msg: Box<Any + Send>,\n         unsafe { intrinsics::abort() }\n     }\n \n-    rust_panic(msg)\n+    rust_panic(payload)\n }\n \n /// Shim around rust_panic. Called by resume_unwind."}]}