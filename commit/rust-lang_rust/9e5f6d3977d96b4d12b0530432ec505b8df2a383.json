{"sha": "9e5f6d3977d96b4d12b0530432ec505b8df2a383", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNWY2ZDM5NzdkOTZiNGQxMmIwNTMwNDMyZWM1MDViOGRmMmEzODM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-01-08T23:52:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-10T19:31:33Z"}, "message": "Cleanup circular_buffer", "tree": {"sha": "abc2e678971499f7efacf7937074c8eafd041868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc2e678971499f7efacf7937074c8eafd041868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e5f6d3977d96b4d12b0530432ec505b8df2a383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5f6d3977d96b4d12b0530432ec505b8df2a383", "html_url": "https://github.com/rust-lang/rust/commit/9e5f6d3977d96b4d12b0530432ec505b8df2a383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e5f6d3977d96b4d12b0530432ec505b8df2a383/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/295c54e10f587a56dfec95ca3a3aee0f9fd721a2", "html_url": "https://github.com/rust-lang/rust/commit/295c54e10f587a56dfec95ca3a3aee0f9fd721a2"}], "stats": {"total": 95, "additions": 56, "deletions": 39}, "files": [{"sha": "a466724702caf3c74485591cf0aa5329ce8041d9", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 52, "deletions": 39, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9e5f6d3977d96b4d12b0530432ec505b8df2a383/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9e5f6d3977d96b4d12b0530432ec505b8df2a383/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=9e5f6d3977d96b4d12b0530432ec505b8df2a383", "patch": "@@ -7,10 +7,10 @@\n circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n     dom(dom),\n     unit_sz(unit_sz),\n-    _buffer_sz(INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz),\n+    _buffer_sz(initial_size()),\n     _next(0),\n     _unread(0),\n-    _buffer((uint8_t *)dom->calloc(_buffer_sz)) {\n+    _buffer((uint8_t *)dom->malloc(_buffer_sz)) {\n \n     A(dom, unit_sz, \"Unit size must be larger than zero.\");\n \n@@ -30,6 +30,12 @@ circular_buffer::~circular_buffer() {\n     dom->free(_buffer);\n }\n \n+size_t\n+circular_buffer::initial_size() {\n+    I(dom, unit_sz > 0);\n+    return INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz;\n+}\n+\n /**\n  * Copies the unread data from this buffer to the \"dst\" address.\n  */\n@@ -43,19 +49,18 @@ circular_buffer::transfer(void *dst) {\n     // First copy from _next to either the end of the unread\n     // items or the end of the buffer\n     size_t head_sz;\n-    if (_next + _unread > _buffer_sz) {\n-        head_sz = _buffer_sz - _next;\n-    } else {\n+    if (_next + _unread <= _buffer_sz) {\n         head_sz = _unread;\n+    } else {\n+        head_sz = _buffer_sz - _next;\n     }\n     I(dom, _next + head_sz <= _buffer_sz);\n-    I(dom, _next < _buffer_sz);\n     memcpy(ptr, _buffer + _next, head_sz);\n \n     // Then copy any other items from the beginning of the buffer\n     I(dom, _unread >= head_sz);\n     size_t tail_sz = _unread - head_sz;\n-    I(dom, tail_sz <= _buffer_sz);\n+    I(dom, head_sz + tail_sz <= _buffer_sz);\n     memcpy(ptr + head_sz, _buffer, tail_sz);\n }\n \n@@ -71,16 +76,7 @@ circular_buffer::enqueue(void *src) {\n \n     // Grow if necessary.\n     if (_unread == _buffer_sz) {\n-        size_t new_buffer_sz = _buffer_sz * 2;\n-        I(dom, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n-        dom->log(rust_log::MEM | rust_log::COMM,\n-                 \"circular_buffer is growing to %d bytes\", new_buffer_sz);\n-        void *new_buffer = dom->malloc(new_buffer_sz);\n-        transfer(new_buffer);\n-        dom->free(_buffer);\n-        _buffer = (uint8_t *)new_buffer;\n-        _next = 0;\n-        _buffer_sz = new_buffer_sz;\n+        grow();\n     }\n \n     dom->log(rust_log::MEM | rust_log::COMM,\n@@ -92,21 +88,21 @@ circular_buffer::enqueue(void *src) {\n     I(dom, _unread + unit_sz <= _buffer_sz);\n \n     // Copy data\n-    size_t i;\n-    if (_next + _unread < _buffer_sz) {\n-        i = _next + _unread;\n-    } else {\n+    size_t dst_idx = _next + _unread;\n+    I(dom, dst_idx >= _buffer_sz || dst_idx + unit_sz <= _buffer_sz);\n+    if (dst_idx >= _buffer_sz) {\n+        dst_idx -= _buffer_sz;\n+\n         I(dom, _next >= unit_sz);\n-        i = _next + _unread - _buffer_sz;\n-        I(dom, i <= _next - unit_sz);\n+        I(dom, dst_idx <= _next - unit_sz);\n     }\n \n-    I(dom, i + unit_sz <= _buffer_sz);\n-    memcpy(&_buffer[i], src, unit_sz);\n+    I(dom, dst_idx + unit_sz <= _buffer_sz);\n+    memcpy(&_buffer[dst_idx], src, unit_sz);\n     _unread += unit_sz;\n \n     dom->log(rust_log::MEM | rust_log::COMM,\n-             \"circular_buffer pushed data at index: %d\", i);\n+             \"circular_buffer pushed data at index: %d\", dst_idx);\n }\n \n /**\n@@ -139,22 +135,39 @@ circular_buffer::dequeue(void *dst) {\n     }\n \n     // Shrink if possible.\n-    if (_buffer_sz > INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz &&\n-        _unread <= _buffer_sz / 4) {\n-        size_t new_buffer_sz = _buffer_sz / 2;\n-        I(dom,\n-          INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS * unit_sz <= new_buffer_sz);\n-        dom->log(rust_log::MEM | rust_log::COMM,\n-                 \"circular_buffer is shrinking to %d bytes\", new_buffer_sz);\n-        void *tmp = dom->malloc(new_buffer_sz);\n-        transfer(tmp);\n-        dom->free(_buffer);\n-        _buffer = (uint8_t *)tmp;\n-        _next = 0;\n-        _buffer_sz = new_buffer_sz;\n+    if (_buffer_sz > initial_size() && _unread <= _buffer_sz / 4) {\n+        shrink();\n     }\n }\n \n+void\n+circular_buffer::grow() {\n+    size_t new_buffer_sz = _buffer_sz * 2;\n+    I(dom, new_buffer_sz <= MAX_CIRCULAR_BUFFER_SIZE);\n+    dom->log(rust_log::MEM | rust_log::COMM,\n+             \"circular_buffer is growing to %d bytes\", new_buffer_sz);\n+    void *new_buffer = dom->malloc(new_buffer_sz);\n+    transfer(new_buffer);\n+    dom->free(_buffer);\n+    _buffer = (uint8_t *)new_buffer;\n+    _next = 0;\n+    _buffer_sz = new_buffer_sz;\n+}\n+\n+void\n+circular_buffer::shrink() {\n+    size_t new_buffer_sz = _buffer_sz / 2;\n+    I(dom, initial_size() <= new_buffer_sz);\n+    dom->log(rust_log::MEM | rust_log::COMM,\n+             \"circular_buffer is shrinking to %d bytes\", new_buffer_sz);\n+    void *new_buffer = dom->malloc(new_buffer_sz);\n+    transfer(new_buffer);\n+    dom->free(_buffer);\n+    _buffer = (uint8_t *)new_buffer;\n+    _next = 0;\n+    _buffer_sz = new_buffer_sz;\n+}\n+\n uint8_t *\n circular_buffer::peek() {\n     return &_buffer[_next];"}, {"sha": "cdd0b03b091078759c1bd5d6458408f3874dcef2", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e5f6d3977d96b4d12b0530432ec505b8df2a383/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/9e5f6d3977d96b4d12b0530432ec505b8df2a383/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=9e5f6d3977d96b4d12b0530432ec505b8df2a383", "patch": "@@ -24,6 +24,10 @@ circular_buffer : public dom_owned<circular_buffer> {\n     size_t size();\n \n private:\n+    size_t initial_size();\n+    void grow();\n+    void shrink();\n+\n     // Size of the buffer in bytes.\n     size_t _buffer_sz;\n "}]}