{"sha": "91581f6d5e0cc442397067363052f1e60f0d0941", "node_id": "C_kwDOAAsO6NoAKDkxNTgxZjZkNWUwY2M0NDIzOTcwNjczNjMwNTJmMWU2MGYwZDA5NDE", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2021-12-09T19:11:40Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-01-12T16:20:23Z"}, "message": "Resolve primitive impls in clippy_utils::path_to_res", "tree": {"sha": "5b5be3dd882f8140f73d8982ac1ec2c48667794b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5be3dd882f8140f73d8982ac1ec2c48667794b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91581f6d5e0cc442397067363052f1e60f0d0941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91581f6d5e0cc442397067363052f1e60f0d0941", "html_url": "https://github.com/rust-lang/rust/commit/91581f6d5e0cc442397067363052f1e60f0d0941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91581f6d5e0cc442397067363052f1e60f0d0941/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae01c4ab3c0c9aa65ebb943075eb127646f3c672", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae01c4ab3c0c9aa65ebb943075eb127646f3c672", "html_url": "https://github.com/rust-lang/rust/commit/ae01c4ab3c0c9aa65ebb943075eb127646f3c672"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "44f634b6519438d8e539362bed28640ddb606a2e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/91581f6d5e0cc442397067363052f1e60f0d0941/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91581f6d5e0cc442397067363052f1e60f0d0941/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=91581f6d5e0cc442397067363052f1e60f0d0941", "patch": "@@ -70,16 +70,16 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n-    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem,\n-    TraitItemKind, TraitRef, TyKind, UnOp,\n+    def, lang_items, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind,\n+    FnDecl, ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n+    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, Target,\n+    TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -525,18 +525,34 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             .iter()\n             .find(|item| item.ident.name.as_str() == name)\n     }\n+    fn find_primitive(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n+        if let Some(&(index, Target::Impl)) = lang_items::ITEM_REFS.get(&Symbol::intern(name)) {\n+            tcx.lang_items().items()[index]\n+        } else {\n+            None\n+        }\n+    }\n+    fn find_crate(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n+        tcx.crates(())\n+            .iter()\n+            .find(|&&num| tcx.crate_name(num).as_str() == name)\n+            .map(CrateNum::as_def_id)\n+    }\n \n-    let (krate, first, path) = match *path {\n-        [krate, first, ref path @ ..] => (krate, first, path),\n+    let (base, first, path) = match *path {\n+        [base, first, ref path @ ..] => (base, first, path),\n         [primitive] => {\n             return PrimTy::from_name(Symbol::intern(primitive)).map_or(Res::Err, Res::PrimTy);\n         },\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n-    let crates = tcx.crates(());\n-    let krate = try_res!(crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate));\n-    let first = try_res!(item_child_by_name(tcx, krate.as_def_id(), first));\n+    let first = try_res!(\n+        find_primitive(tcx, base)\n+            .or_else(|| find_crate(tcx, base))\n+            .and_then(|id| item_child_by_name(tcx, id, first))\n+    );\n+\n     let last = path\n         .iter()\n         .copied()"}]}