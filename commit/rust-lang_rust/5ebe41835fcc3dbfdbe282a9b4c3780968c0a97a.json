{"sha": "5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmU0MTgzNWZjYzNkYmZkYmUyODJhOWI0YzM3ODA5NjhjMGE5N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-15T22:08:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-15T22:08:46Z"}, "message": "Auto merge of #33619 - jonathandturner:improve_structured_errors, r=nikomatsakis\n\nBatch of improvements to errors for new error format\n\nThis is a batch of improvements to existing errors to help get the most out of the new error format.\n\n* Added labels to primary spans (^^^) for a set of errors that didn't currently have them\n* Highlight the source blue under the secondary notes for better readability\n* Move some of the \"Note:\" into secondary spans+labels\n* Fix span_label to take &mut instead, which makes it work the same as other methods in that set", "tree": {"sha": "9a1f7d9e9674e795fae579a23c8ad4626a5cecef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1f7d9e9674e795fae579a23c8ad4626a5cecef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "html_url": "https://github.com/rust-lang/rust/commit/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7420fbbae85a62a62163a2ac5c947b76a8eb62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7420fbbae85a62a62163a2ac5c947b76a8eb62d", "html_url": "https://github.com/rust-lang/rust/commit/e7420fbbae85a62a62163a2ac5c947b76a8eb62d"}, {"sha": "65cb5f73789723b5eeb4ba9332e3e034939369c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/65cb5f73789723b5eeb4ba9332e3e034939369c4", "html_url": "https://github.com/rust-lang/rust/commit/65cb5f73789723b5eeb4ba9332e3e034939369c4"}], "stats": {"total": 451, "additions": 279, "deletions": 172}, "files": [{"sha": "48a2d5755d7146265c735de48b41aab8513cbc64", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -482,10 +482,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                        trace.origin);\n \n         if !is_simple_error {\n-            err = err.note_expected_found(&\"type\", &expected, &found);\n+            err.note_expected_found(&\"type\", &expected, &found);\n         }\n \n-        err = err.span_label(trace.origin.span(), &terr);\n+        err.span_label(trace.origin.span(), &terr);\n \n         self.check_and_note_conflicting_crates(&mut err, terr, trace.origin.span());\n "}, {"sha": "fcfab96b9dfe8154061edb77e7cda8af577bf194", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 93, "deletions": 67, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -475,99 +475,104 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n             let mut err = match (new_loan.kind, old_loan.kind) {\n                 (ty::MutBorrow, ty::MutBorrow) => {\n-                    struct_span_err!(self.bccx, new_loan.span, E0499,\n-                                     \"cannot borrow `{}`{} as mutable \\\n-                                      more than once at a time\",\n-                                     nl, new_loan_msg)\n-                        .span_label(\n+                    let mut err = struct_span_err!(self.bccx, new_loan.span, E0499,\n+                                                  \"cannot borrow `{}`{} as mutable \\\n+                                                  more than once at a time\",\n+                                                  nl, new_loan_msg);\n+                    err.span_label(\n                             old_loan.span,\n-                            &format!(\"first mutable borrow occurs here{}\", old_loan_msg))\n-                        .span_label(\n+                            &format!(\"first mutable borrow occurs here{}\", old_loan_msg));\n+                    err.span_label(\n                             new_loan.span,\n-                            &format!(\"second mutable borrow occurs here{}\", new_loan_msg))\n-                        .span_label(\n+                            &format!(\"second mutable borrow occurs here{}\", new_loan_msg));\n+                    err.span_label(\n                             previous_end_span,\n-                            &format!(\"first borrow ends here\"))\n+                            &format!(\"first borrow ends here\"));\n+                    err\n                 }\n \n                 (ty::UniqueImmBorrow, ty::UniqueImmBorrow) => {\n-                    struct_span_err!(self.bccx, new_loan.span, E0524,\n+                    let mut err = struct_span_err!(self.bccx, new_loan.span, E0524,\n                                      \"two closures require unique access to `{}` \\\n                                       at the same time\",\n-                                     nl)\n-                        .span_label(\n+                                     nl);\n+                    err.span_label(\n                             old_loan.span,\n-                            &format!(\"first closure is constructed here\"))\n-                        .span_label(\n+                            &format!(\"first closure is constructed here\"));\n+                    err.span_label(\n                             new_loan.span,\n-                            &format!(\"second closure is constructed here\"))\n-                        .span_label(\n+                            &format!(\"second closure is constructed here\"));\n+                    err.span_label(\n                             previous_end_span,\n-                            &format!(\"borrow from first closure ends here\"))\n+                            &format!(\"borrow from first closure ends here\"));\n+                    err\n                 }\n \n                 (ty::UniqueImmBorrow, _) => {\n-                    struct_span_err!(self.bccx, new_loan.span, E0500,\n-                                     \"closure requires unique access to `{}` \\\n-                                      but {} is already borrowed{}\",\n-                                     nl, ol_pronoun, old_loan_msg)\n-                        .span_label(\n+                    let mut err = struct_span_err!(self.bccx, new_loan.span, E0500,\n+                                                   \"closure requires unique access to `{}` \\\n+                                                   but {} is already borrowed{}\",\n+                                                   nl, ol_pronoun, old_loan_msg);\n+                    err.span_label(\n                             new_loan.span,\n-                            &format!(\"closure construction occurs here{}\", new_loan_msg))\n-                        .span_label(\n+                            &format!(\"closure construction occurs here{}\", new_loan_msg));\n+                    err.span_label(\n                             old_loan.span,\n-                            &format!(\"borrow occurs here{}\", old_loan_msg))\n-                        .span_label(\n+                            &format!(\"borrow occurs here{}\", old_loan_msg));\n+                    err.span_label(\n                             previous_end_span,\n-                            &format!(\"borrow ends here\"))\n+                            &format!(\"borrow ends here\"));\n+                    err\n                 }\n \n                 (_, ty::UniqueImmBorrow) => {\n-                    struct_span_err!(self.bccx, new_loan.span, E0501,\n-                                     \"cannot borrow `{}`{} as {} because \\\n-                                      previous closure requires unique access\",\n-                                     nl, new_loan_msg, new_loan.kind.to_user_str())\n-                        .span_label(\n+                    let mut err = struct_span_err!(self.bccx, new_loan.span, E0501,\n+                                                   \"cannot borrow `{}`{} as {} because \\\n+                                                   previous closure requires unique access\",\n+                                                   nl, new_loan_msg, new_loan.kind.to_user_str());\n+                    err.span_label(\n                             new_loan.span,\n-                            &format!(\"borrow occurs here{}\", new_loan_msg))\n-                        .span_label(\n+                            &format!(\"borrow occurs here{}\", new_loan_msg));\n+                    err.span_label(\n                             old_loan.span,\n-                            &format!(\"closure construction occurs here{}\", old_loan_msg))\n-                        .span_label(\n+                            &format!(\"closure construction occurs here{}\", old_loan_msg));\n+                    err.span_label(\n                             previous_end_span,\n-                            &format!(\"borrow from closure ends here\"))\n+                            &format!(\"borrow from closure ends here\"));\n+                    err\n                 }\n \n                 (_, _) => {\n-                    struct_span_err!(self.bccx, new_loan.span, E0502,\n-                                     \"cannot borrow `{}`{} as {} because \\\n-                                      {} is also borrowed as {}{}\",\n-                                     nl,\n-                                     new_loan_msg,\n-                                     new_loan.kind.to_user_str(),\n-                                     ol_pronoun,\n-                                     old_loan.kind.to_user_str(),\n-                                     old_loan_msg)\n-                        .span_label(\n+                    let mut err = struct_span_err!(self.bccx, new_loan.span, E0502,\n+                                                   \"cannot borrow `{}`{} as {} because \\\n+                                                   {} is also borrowed as {}{}\",\n+                                                   nl,\n+                                                   new_loan_msg,\n+                                                   new_loan.kind.to_user_str(),\n+                                                   ol_pronoun,\n+                                                   old_loan.kind.to_user_str(),\n+                                                   old_loan_msg);\n+                    err.span_label(\n                             new_loan.span,\n                             &format!(\"{} borrow occurs here{}\",\n                                      new_loan.kind.to_user_str(),\n-                                     new_loan_msg))\n-                        .span_label(\n+                                     new_loan_msg));\n+                    err.span_label(\n                             old_loan.span,\n                             &format!(\"{} borrow occurs here{}\",\n                                      old_loan.kind.to_user_str(),\n-                                     old_loan_msg))\n-                        .span_label(\n+                                     old_loan_msg));\n+                    err.span_label(\n                             previous_end_span,\n                             &format!(\"{} borrow ends here\",\n-                                     old_loan.kind.to_user_str()))\n+                                     old_loan.kind.to_user_str()));\n+                    err\n                 }\n             };\n \n             match new_loan.cause {\n                 euv::ClosureCapture(span) => {\n-                    err = err.span_label(\n+                    err.span_label(\n                         span,\n                         &format!(\"borrow occurs due to use of `{}` in closure\", nl));\n                 }\n@@ -576,7 +581,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n             match old_loan.cause {\n                 euv::ClosureCapture(span) => {\n-                    err = err.span_label(\n+                    err.span_label(\n                         span,\n                         &format!(\"previous borrow occurs due to use of `{}` in closure\",\n                                  ol));\n@@ -663,23 +668,41 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             UseOk => { }\n             UseWhileBorrowed(loan_path, loan_span) => {\n                 let mut err = match move_kind {\n-                    move_data::Captured =>\n-                        struct_span_err!(self.bccx, span, E0504,\n+                    move_data::Captured => {\n+                        let mut err = struct_span_err!(self.bccx, span, E0504,\n                                          \"cannot move `{}` into closure because it is borrowed\",\n-                                         &self.bccx.loan_path_to_string(move_path)),\n+                                         &self.bccx.loan_path_to_string(move_path));\n+                        err.span_label(\n+                            loan_span,\n+                            &format!(\"borrow of `{}` occurs here\",\n+                                    &self.bccx.loan_path_to_string(&loan_path))\n+                            );\n+                        err.span_label(\n+                            span,\n+                            &format!(\"move into closure occurs here\")\n+                            );\n+                        err\n+                    }\n                     move_data::Declared |\n                     move_data::MoveExpr |\n-                    move_data::MovePat =>\n-                        struct_span_err!(self.bccx, span, E0505,\n+                    move_data::MovePat => {\n+                        let mut err = struct_span_err!(self.bccx, span, E0505,\n                                          \"cannot move out of `{}` because it is borrowed\",\n-                                         &self.bccx.loan_path_to_string(move_path))\n+                                         &self.bccx.loan_path_to_string(move_path));\n+                        err.span_label(\n+                            loan_span,\n+                            &format!(\"borrow of `{}` occurs here\",\n+                                    &self.bccx.loan_path_to_string(&loan_path))\n+                            );\n+                        err.span_label(\n+                            span,\n+                            &format!(\"move out of `{}` occurs here\",\n+                                &self.bccx.loan_path_to_string(move_path))\n+                            );\n+                        err\n+                    }\n                 };\n \n-                err.span_note(\n-                    loan_span,\n-                    &format!(\"borrow of `{}` occurs here\",\n-                            &self.bccx.loan_path_to_string(&loan_path))\n-                    );\n                 err.emit();\n             }\n         }\n@@ -845,9 +868,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         struct_span_err!(self.bccx, span, E0506,\n                          \"cannot assign to `{}` because it is borrowed\",\n                          self.bccx.loan_path_to_string(loan_path))\n-            .span_note(loan.span,\n+            .span_label(loan.span,\n                        &format!(\"borrow of `{}` occurs here\",\n                                self.bccx.loan_path_to_string(loan_path)))\n+            .span_label(span,\n+                       &format!(\"assignment to `{}` occurs here\",\n+                               self.bccx.loan_path_to_string(loan_path)))\n             .emit();\n     }\n }"}, {"sha": "cdc68edbf300b09b54f22771835848577989cc12", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -72,7 +72,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n         let mut is_first_note = true;\n         for move_to in &error.move_to_places {\n-            note_move_destination(&mut err, move_to.span,\n+            err = note_move_destination(err, move_to.span,\n                                   move_to.name, is_first_note);\n             is_first_note = false;\n         }\n@@ -121,18 +121,25 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         Categorization::Deref(_, _, mc::Implicit(..)) |\n         Categorization::Deref(_, _, mc::UnsafePtr(..)) |\n         Categorization::StaticItem => {\n-            struct_span_err!(bccx, move_from.span, E0507,\n+            let mut err = struct_span_err!(bccx, move_from.span, E0507,\n                              \"cannot move out of {}\",\n-                             move_from.descriptive_string(bccx.tcx))\n+                             move_from.descriptive_string(bccx.tcx));\n+            err.span_label(\n+                move_from.span,\n+                &format!(\"move occurs here\")\n+                );\n+            err\n         }\n \n         Categorization::Interior(ref b, mc::InteriorElement(Kind::Index, _)) => {\n             let expr = bccx.tcx.map.expect_expr(move_from.id);\n             if let hir::ExprIndex(..) = expr.node {\n-                struct_span_err!(bccx, move_from.span, E0508,\n-                                 \"cannot move out of type `{}`, \\\n-                                  a non-copy fixed-size array\",\n-                                 b.ty)\n+                let mut err = struct_span_err!(bccx, move_from.span, E0508,\n+                                               \"cannot move out of type `{}`, \\\n+                                               a non-copy fixed-size array\",\n+                                               b.ty);\n+                err.span_label(move_from.span, &format!(\"can not move out of here\"));\n+                err\n             } else {\n                 span_bug!(move_from.span, \"this path should not cause illegal move\");\n             }\n@@ -143,10 +150,12 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             match b.ty.sty {\n                 ty::TyStruct(def, _) |\n                 ty::TyEnum(def, _) if def.has_dtor() => {\n-                    struct_span_err!(bccx, move_from.span, E0509,\n-                                     \"cannot move out of type `{}`, \\\n-                                      which defines the `Drop` trait\",\n-                                     b.ty)\n+                    let mut err = struct_span_err!(bccx, move_from.span, E0509,\n+                                                   \"cannot move out of type `{}`, \\\n+                                                   which defines the `Drop` trait\",\n+                                                   b.ty);\n+                    err.span_label(move_from.span, &format!(\"can not move out of here\"));\n+                    err\n                 },\n                 _ => {\n                     span_bug!(move_from.span, \"this path should not cause illegal move\");\n@@ -159,22 +168,24 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn note_move_destination(err: &mut DiagnosticBuilder,\n+fn note_move_destination(mut err: DiagnosticBuilder,\n                          move_to_span: codemap::Span,\n                          pat_name: ast::Name,\n-                         is_first_note: bool) {\n+                         is_first_note: bool) -> DiagnosticBuilder {\n     if is_first_note {\n-        err.span_note(\n+        err.span_label(\n             move_to_span,\n-            \"attempting to move value to here\");\n+            &format!(\"attempting to move value to here\"));\n         err.help(\n             &format!(\"to prevent the move, \\\n                       use `ref {0}` or `ref mut {0}` to capture value by \\\n                       reference\",\n                      pat_name));\n+        err\n     } else {\n         err.span_note(move_to_span,\n                       &format!(\"and here (use `ref {0}` or `ref mut {0}`)\",\n                                pat_name));\n+        err\n     }\n }"}, {"sha": "36222e172b8d61d431745aff431853b6018984ef", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -620,10 +620,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n \n         // General fallback.\n+        let span = err.span.clone();\n         let mut db = self.struct_span_err(\n             err.span,\n             &self.bckerr_to_string(&err));\n-        self.note_and_explain_bckerr(&mut db, err);\n+        self.note_and_explain_bckerr(&mut db, err, span);\n         db.emit();\n     }\n \n@@ -647,7 +648,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     self.tcx.sess, use_span, E0381,\n                     \"{} of possibly uninitialized variable: `{}`\",\n                     verb,\n-                    self.loan_path_to_string(lp)).emit();\n+                    self.loan_path_to_string(lp))\n+                .span_label(use_span, &format!(\"use of possibly uninitialized `{}`\",\n+                    self.loan_path_to_string(lp)))\n+                .emit();\n                 return;\n             }\n             _ => {\n@@ -716,10 +720,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err.span_label(\n                 use_span,\n                 &format!(\"value moved{} here in previous iteration of loop\",\n-                         move_note))\n+                         move_note));\n+            err\n         } else {\n             err.span_label(use_span, &format!(\"value {} here after move\", verb_participle))\n-               .span_label(move_span, &format!(\"value moved{} here\", move_note))\n+               .span_label(move_span, &format!(\"value moved{} here\", move_note));\n+            err\n         };\n \n         err.note(&format!(\"move occurs because `{}` has type `{}`, \\\n@@ -946,7 +952,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             .emit();\n     }\n \n-    pub fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>) {\n+    pub fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>,\n+        error_span: Span) {\n         let code = err.code;\n         match code {\n             err_mutbl => {\n@@ -971,13 +978,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             let span = self.tcx.map.span(local_id);\n                             if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n                                 if snippet != \"self\" {\n-                                    db.span_suggestion(\n-                                        span,\n-                                        &format!(\"to make the {} mutable, use `mut` as shown:\",\n-                                                 self.cmt_to_string(&err.cmt)),\n-                                        format!(\"mut {}\", snippet));\n+                                    db.span_label(span,\n+                                        &format!(\"use `mut {}` here to make mutable\", snippet));\n                                 }\n                             }\n+                            db.span_label(error_span, &format!(\"cannot borrow mutably\"));\n                         }\n                     }\n                 }\n@@ -995,6 +1000,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     super_scope,\n                     \"\");\n                 if let Some(span) = statement_scope_span(self.tcx, super_scope) {\n+                    db.span_label(error_span, &format!(\"does not live long enough\"));\n                     db.span_help(span,\n                                  \"consider using a `let` binding to increase its lifetime\");\n                 }"}, {"sha": "ce7e30697f987e330a67e6be9409dfe849c81d8a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -123,7 +123,7 @@ enum ResolutionError<'a> {\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n     UseOfUndeclared(&'a str, &'a str, SuggestedCandidates),\n-    /// error E0413: declaration shadows an enum variant or unit-like struct in scope\n+    /// error E0413: cannot be named the same as an enum variant or unit-like struct in scope\n     DeclarationShadowsEnumVariantOrUnitLikeStruct(Name),\n     /// error E0414: only irrefutable patterns allowed here\n     ConstantForIrrefutableBinding(Name),\n@@ -200,11 +200,13 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n \n     match resolution_error {\n         ResolutionError::TypeParametersFromOuterFunction => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0401,\n-                             \"can't use type parameters from outer function; try using a local \\\n-                              type parameter instead\")\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0401,\n+                                           \"can't use type parameters from outer function; \\\n+                                           try using a local type parameter instead\");\n+            err.span_label(span, &format!(\"use of type variable from outer function\"));\n+            err\n         }\n         ResolutionError::OuterTypeParameterContext => {\n             struct_span_err!(resolver.session,\n@@ -230,6 +232,7 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                                            \"trait `{}` is not in scope\",\n                                            name);\n             show_candidates(&mut err, &candidates);\n+            err.span_label(span, &format!(\"`{}` is not in scope\", name));\n             err\n         }\n         ResolutionError::UndeclaredAssociatedType => {\n@@ -278,10 +281,12 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              pattern_number)\n         }\n         ResolutionError::SelfUsedOutsideImplOrTrait => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0411,\n-                             \"use of `Self` outside of an impl or trait\")\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0411,\n+                                           \"use of `Self` outside of an impl or trait\");\n+            err.span_label(span, &format!(\"used outside of impl or trait\"));\n+            err\n         }\n         ResolutionError::UseOfUndeclared(kind, name, candidates) => {\n             let mut err = struct_span_err!(resolver.session,\n@@ -291,54 +296,63 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                                            kind,\n                                            name);\n             show_candidates(&mut err, &candidates);\n+            err.span_label(span, &format!(\"undefined or not in scope\"));\n             err\n         }\n         ResolutionError::DeclarationShadowsEnumVariantOrUnitLikeStruct(name) => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0413,\n-                             \"declaration of `{}` shadows an enum variant \\\n+                             \"`{}` cannot be named the same as an enum variant \\\n                               or unit-like struct in scope\",\n-                             name)\n+                             name);\n+            err.span_label(span,\n+                &format!(\"has same name as enum variant or unit-like struct\"));\n+            err\n         }\n         ResolutionError::ConstantForIrrefutableBinding(name) => {\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0414,\n-                                           \"variable bindings cannot shadow constants\");\n-            err.span_note(span,\n-                          \"there already is a constant in scope sharing the same \\\n-                           name as this pattern\");\n+                                       \"let variables cannot be named the same as const variables\");\n+            err.span_label(span,\n+                           &format!(\"cannot be named the same as a const variable\"));\n             if let Some(binding) = resolver.current_module\n                                            .resolve_name_in_lexical_scope(name, ValueNS) {\n                 let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n-                err.span_note(binding.span, &format!(\"constant {} here\", participle));\n+                err.span_label(binding.span, &format!(\"a constant `{}` is {} here\",\n+                               name, participle));\n             }\n             err\n         }\n         ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0415,\n                              \"identifier `{}` is bound more than once in this parameter list\",\n-                             identifier)\n+                             identifier);\n+            err.span_label(span, &format!(\"used as parameter more than once\"));\n+            err\n         }\n         ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(identifier) => {\n-            struct_span_err!(resolver.session,\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0416,\n                              \"identifier `{}` is bound more than once in the same pattern\",\n-                             identifier)\n+                             identifier);\n+            err.span_label(span, &format!(\"used in a pattern more than once\"));\n+            err\n         }\n         ResolutionError::StaticVariableReference(binding) => {\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0417,\n                                            \"static variables cannot be referenced in a \\\n                                             pattern, use a `const` instead\");\n+            err.span_label(span, &format!(\"static variable used in pattern\"));\n             if binding.span != codemap::DUMMY_SP {\n                 let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n-                err.span_note(binding.span, &format!(\"static variable {} here\", participle));\n+                err.span_label(binding.span, &format!(\"static variable {} here\", participle));\n             }\n             err\n         }\n@@ -1804,7 +1818,9 @@ impl<'a> Resolver<'a> {\n \n                 // If it's a typedef, give a note\n                 if let Def::TyAlias(..) = path_res.base_def {\n-                    err.note(\"`type` aliases cannot be used for traits\");\n+                    let trait_name = trait_path.segments.last().unwrap().identifier.name;\n+                    err.span_label(trait_path.span,\n+                                   &format!(\"`{}` is not a trait\", trait_name));\n \n                     let definition_site = {\n                         let segments = &trait_path.segments;\n@@ -1816,7 +1832,8 @@ impl<'a> Resolver<'a> {\n                     };\n \n                     if definition_site != codemap::DUMMY_SP {\n-                        err.span_note(definition_site, \"type defined here\");\n+                        err.span_label(definition_site,\n+                                       &format!(\"type aliases cannot be used for traits\"));\n                     }\n                 }\n                 err.emit();\n@@ -3462,12 +3479,16 @@ impl<'a> Resolver<'a> {\n             _ => match (old_binding.is_import(), binding.is_import()) {\n                 (false, false) => struct_span_err!(self.session, span, E0428, \"{}\", msg),\n                 (true, true) => struct_span_err!(self.session, span, E0252, \"{}\", msg),\n-                _ => struct_span_err!(self.session, span, E0255, \"{}\", msg),\n+                _ => {\n+                    let mut e = struct_span_err!(self.session, span, E0255, \"{}\", msg);\n+                    e.span_label(span, &format!(\"`{}` was already imported\", name));\n+                    e\n+                }\n             },\n         };\n \n         if old_binding.span != codemap::DUMMY_SP {\n-            err.span_note(old_binding.span, &format!(\"previous {} of `{}` here\", noun, name));\n+            err.span_label(old_binding.span, &format!(\"previous {} of `{}` here\", noun, name));\n         }\n         err.emit();\n     }"}, {"sha": "0b23951db36612b53a35541fae408c6ae322f210", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -202,8 +202,8 @@ pub fn emit_type_err<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                      terr: &ty::error::TypeError<'tcx>,\n                                      msg: &str) {\n     let mut err = struct_span_err!(tcx.sess, span, E0211, \"{}\", msg);\n-    err = err.span_label(span, &terr);\n-    err = err.note_expected_found(&\"type\", &expected_ty, &found_ty);\n+    err.span_label(span, &terr);\n+    err.note_expected_found(&\"type\", &expected_ty, &found_ty);\n     tcx.note_and_explain_type_err(&mut err, terr, span);\n     err.emit();\n }"}, {"sha": "7592214c0ab924244bc95ab275e328c8b79c45e9", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -235,17 +235,17 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// all, and you just supplied a `Span` to create the diagnostic,\n     /// then the snippet will just include that `Span`, which is\n     /// called the primary span.\n-    pub fn span_label(mut self, span: Span, label: &fmt::Display)\n-                      -> DiagnosticBuilder<'a> {\n+    pub fn span_label(&mut self, span: Span, label: &fmt::Display)\n+                      -> &mut DiagnosticBuilder<'a> {\n         self.span.push_span_label(span, format!(\"{}\", label));\n         self\n     }\n \n-    pub fn note_expected_found(mut self,\n+    pub fn note_expected_found(&mut self,\n                                label: &fmt::Display,\n                                expected: &fmt::Display,\n                                found: &fmt::Display)\n-                               -> DiagnosticBuilder<'a>\n+                               -> &mut DiagnosticBuilder<'a>\n     {\n         // For now, just attach these as notes\n         self.note(&format!(\"expected {} `{}`\", label, expected));"}, {"sha": "092effbb2f6819af66a93cd4e3576488be8b367f", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -618,6 +618,7 @@ impl FileInfo {\n                         styled_buffer.set_style(0, p, Style::UnderlinePrimary);\n                     } else {\n                         styled_buffer.putc(1, p, '-', Style::UnderlineSecondary);\n+                        styled_buffer.set_style(0, p, Style::UnderlineSecondary);\n                     }\n                 }\n             }"}, {"sha": "92a8b10669ceeb1ab6c9785aede66dfa810a33a7", "filename": "src/test/compile-fail/augmented-assignments.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -27,7 +27,9 @@ fn main() {\n     x;  //~ value moved here\n \n     let y = Int(2);\n+    //~^use `mut y` here to make mutable\n     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+        //~| cannot borrow\n     +=\n     Int(1);\n }"}, {"sha": "287eab7a5633872c48f5053ffc8eb5f71081c11b", "filename": "src/test/compile-fail/blind-item-block-middle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -12,6 +12,6 @@ mod foo { pub struct bar; }\n \n fn main() {\n     let bar = 5;\n-    //~^ ERROR declaration of `bar` shadows an enum variant or unit-like struct in scope\n+    //~^ ERROR cannot be named the same\n     use foo::bar;\n }"}, {"sha": "853282ff014364786711170bdce00fadd7d1b3ab", "filename": "src/test/compile-fail/blind-item-item-shadow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -10,6 +10,8 @@\n \n mod foo { pub mod foo {  } } //~ NOTE previous definition of `foo` here\n \n-use foo::foo; //~ ERROR a module named `foo` has already been defined in this module\n+use foo::foo;\n+//~^ ERROR a module named `foo` has already been defined in this module\n+//~| was already imported\n \n fn main() {}"}, {"sha": "3fd71f715647dc83379b51e0839aefff1f951b4d", "filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -61,7 +61,9 @@ fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     //~^ NOTE borrow of `a.x` occurs here\n-    let _y = a.y; //~ ERROR cannot move\n+    let _y = a.y;\n+    //~^ ERROR cannot move\n+    //~| move out of\n }\n \n fn copy_after_mut_borrow() {\n@@ -75,7 +77,9 @@ fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n     //~^ NOTE borrow of `a.x` occurs here\n-    let _y = a.y; //~ ERROR cannot move\n+    let _y = a.y;\n+    //~^ ERROR cannot move\n+    //~| move out of\n }\n \n fn borrow_after_mut_borrow() {\n@@ -127,7 +131,9 @@ fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n     //~^ borrow of `a.x.x` occurs here\n-    let _y = a.y; //~ ERROR cannot move\n+    let _y = a.y;\n+    //~^ ERROR cannot move\n+    //~| move out of\n }\n \n fn copy_after_mut_borrow_nested() {\n@@ -141,7 +147,9 @@ fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n     //~^ NOTE borrow of `a.x.x` occurs here\n-    let _y = a.y; //~ ERROR cannot move\n+    let _y = a.y;\n+    //~^ ERROR cannot move\n+    //~| move out of\n }\n \n fn borrow_after_mut_borrow_nested() {"}, {"sha": "02aa771c787897209d1f19a37f893ea4bb93597f", "filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -26,6 +26,7 @@ fn f() {\n \n     v3.push(&'x');           // statement 6\n     //~^ ERROR borrowed value does not live long enough\n+    //~| does not live long enough\n     //~| NOTE ...but borrowed value is only valid for the statement\n     //~| HELP consider using a `let` binding to increase its lifetime\n \n@@ -36,6 +37,7 @@ fn f() {\n \n         v4.push(&'y');\n         //~^ ERROR borrowed value does not live long enough\n+        //~| does not live long enough\n         //~| NOTE ...but borrowed value is only valid for the statement\n         //~| HELP consider using a `let` binding to increase its lifetime\n \n@@ -46,6 +48,7 @@ fn f() {\n \n     v5.push(&'z');\n     //~^ ERROR borrowed value does not live long enough\n+    //~| does not live long enough\n     //~| NOTE ...but borrowed value is only valid for the statement\n     //~| HELP consider using a `let` binding to increase its lifetime\n "}, {"sha": "866e72f1a525844100150b59f13b62f96697a7f1", "filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -9,10 +9,12 @@\n // except according to those terms.\n \n fn f() {\n-    let x = [1].iter(); //~ ERROR borrowed value does not live long enough\n-                         //~^ NOTE reference must be valid for the block suffix following statement\n-                         //~^^ HELP consider using a `let` binding to increase its lifetime\n-                         //~^^^ NOTE ...but borrowed value is only valid for the statement at 12:4\n+    let x = [1].iter();\n+    //~^ ERROR borrowed value does not live long enough\n+    //~|does not live long enough\n+    //~| NOTE reference must be valid for the block suffix following statement\n+    //~| HELP consider using a `let` binding to increase its lifetime\n+    //~| NOTE ...but borrowed value is only valid for the statement at 12:4\n }\n \n fn main() {"}, {"sha": "ffa7d1925569e2497e7c2897d1714a23c1c0854e", "filename": "src/test/compile-fail/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -19,6 +19,7 @@ enum Foo {\n fn blah() {\n     let f = &Foo::Foo1(box 1, box 2);\n     match *f {             //~ ERROR cannot move out of\n+                           //~| move occurs here\n         Foo::Foo1(num1,         //~ NOTE attempting to move value to here\n                   num2) => (),  //~ NOTE and here\n         Foo::Foo2(num) => (),   //~ NOTE and here\n@@ -37,6 +38,7 @@ impl Drop for S {\n fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n         S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+        //~| can not move out of here\n             f: _s,  //~ NOTE attempting to move value to here\n             g: _t   //~ NOTE and here\n         } => {}\n@@ -53,6 +55,7 @@ fn free<T>(_: T) {}\n fn blah2() {\n     let a = &A { a: box 1 };\n     match a.a {           //~ ERROR cannot move out of\n+                          //~| move occurs here\n         n => {            //~ NOTE attempting to move value to here\n             free(n)\n         }"}, {"sha": "2f1c69d0d7dadd5d0115b06dbee688c440d3277c", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -27,10 +27,12 @@ pub fn main() {\n     match x {\n         [_, tail..] => {\n             match tail {\n-                [Foo { string: a }, //~ ERROR cannot move out of borrowed content\n+                [Foo { string: a },\n+                //~^ ERROR cannot move out of borrowed content\n+                //~| move occurs here\n+                //~| attempting to move value to here\n                  Foo { string: b }] => {\n-                    //~^^ NOTE attempting to move value to here\n-                    //~^^ NOTE and here\n+                    //~^ NOTE and here\n                 }\n                 _ => {\n                     unreachable!();"}, {"sha": "1c63b458e62e191825ed59e71b197d989e5976ab", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -19,6 +19,7 @@ fn a() {\n         [box ref _a, _, _] => {\n         //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n+            //~^ assignment to `vec[..]` occurs here\n         }\n     }\n }\n@@ -30,6 +31,7 @@ fn b() {\n         [_b..] => {\n         //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n+            //~^ assignment to `vec[..]` occurs here\n         }\n     }\n }\n@@ -39,8 +41,9 @@ fn c() {\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_a,         //~ ERROR cannot move out\n-         _b..] => {  //~^ NOTE attempting to move value to here\n-\n+        //~| move occurs here\n+        //~| attempting to move value to here\n+         _b..] => {\n             // Note: `_a` is *moved* here, but `b` is borrowing,\n             // hence illegal.\n             //\n@@ -51,32 +54,37 @@ fn c() {\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n     //~^ NOTE attempting to move value to here\n+    //~| can not move out of here\n }\n \n fn d() {\n     let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_a..,     //~ ERROR cannot move out\n+        //~^ move occurs here\n          _b] => {} //~ NOTE attempting to move value to here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n     //~^ NOTE attempting to move value to here\n+    //~| can not move out of here\n }\n \n fn e() {\n     let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out\n-        //~^ NOTE attempting to move value to here\n-        //~^^ NOTE and here\n-        //~^^^ NOTE and here\n+        //~| move occurs here\n+        //~| NOTE attempting to move value to here\n+        //~| NOTE and here\n+        //~| NOTE and here\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n     //~^ NOTE attempting to move value to here\n+    //~| can not move out of here\n }\n \n fn main() {}"}, {"sha": "392f391fb5120ce7e6452ccbb531690bd23e6463", "filename": "src/test/compile-fail/const-pattern-irrefutable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -13,16 +13,16 @@ mod foo {\n     pub const d: u8 = 2;\n }\n \n-use foo::b as c; //~ NOTE constant imported here\n-use foo::d; //~ NOTE constant imported here\n+use foo::b as c; //~ NOTE is imported here\n+use foo::d; //~ NOTE is imported here\n \n-const a: u8 = 2; //~ NOTE constant defined here\n+const a: u8 = 2; //~ NOTE is defined here\n \n fn main() {\n-    let a = 4; //~ ERROR variable bindings cannot\n-               //~^ NOTE there already is a constant in scope\n-    let c = 4; //~ ERROR variable bindings cannot\n-               //~^ NOTE there already is a constant in scope\n-    let d = 4; //~ ERROR variable bindings cannot\n-               //~^ NOTE there already is a constant in scope\n+    let a = 4; //~ ERROR let variables cannot\n+               //~^ NOTE cannot be named the same as a const variable\n+    let c = 4; //~ ERROR let variables cannot\n+               //~^ NOTE cannot be named the same as a const variable\n+    let d = 4; //~ ERROR let variables cannot\n+               //~^ NOTE cannot be named the same as a const variable\n }"}, {"sha": "6dffd1999d79b6977ca1844712ce743bdd420134", "filename": "src/test/compile-fail/enum-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -11,5 +11,5 @@\n struct hello(isize);\n \n fn main() {\n-    let hello = 0; //~ERROR declaration of `hello` shadows\n+    let hello = 0; //~ERROR cannot be named the same\n }"}, {"sha": "2e2115b71103a733a1e626b1c8b7e426830569e1", "filename": "src/test/compile-fail/issue-19498.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -11,11 +11,13 @@\n use self::A; //~ NOTE previous import of `A` here\n use self::B; //~ NOTE previous import of `B` here\n mod A {} //~ ERROR a module named `A` has already been imported in this module\n+//~| `A` was already imported\n pub mod B {} //~ ERROR a module named `B` has already been imported in this module\n-\n+//~| `B` was already imported\n mod C {\n     use C::D; //~ NOTE previous import of `D` here\n     mod D {} //~ ERROR a module named `D` has already been imported in this module\n+    //~| `D` was already imported\n }\n \n fn main() {}"}, {"sha": "b0d36610b7a51261f62dcc767ddfc7c52746f3ab", "filename": "src/test/compile-fail/issue-23716.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-23716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-23716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23716.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -13,6 +13,7 @@ static foo: i32 = 0;\n \n fn bar(foo: i32) {}\n //~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n+//~| static variable used in pattern\n \n mod submod {\n     pub static answer: i32 = 42;\n@@ -23,6 +24,6 @@ use self::submod::answer;\n \n fn question(answer: i32) {}\n //~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n-\n+//~| static variable used in pattern\n fn main() {\n }"}, {"sha": "188716c5e93f59eddd66f566389685c6f4f68dd9", "filename": "src/test/compile-fail/issue-24081.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -15,9 +15,14 @@ use std::ops::Div; //~ NOTE previous import\n use std::ops::Rem; //~ NOTE previous import\n \n type Add = bool; //~ ERROR a trait named `Add` has already been imported in this module\n+//~| was already imported\n struct Sub { x: f32 } //~ ERROR a trait named `Sub` has already been imported in this module\n+//~| was already imported\n enum Mul { A, B } //~ ERROR a trait named `Mul` has already been imported in this module\n+//~| was already imported\n mod Div { } //~ ERROR a trait named `Div` has already been imported in this module\n+//~| was already imported\n trait Rem {  } //~ ERROR a trait named `Rem` has already been imported in this module\n+//~| was already imported\n \n fn main() {}"}, {"sha": "b0904dfeaa7a37798268b8b72fb1b3b2317b9845", "filename": "src/test/compile-fail/issue-27033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -10,11 +10,11 @@\n \n fn main() {\n     match Some(1) {\n-        None @ _ => {} //~ ERROR declaration of `None` shadows an enum variant\n+        None @ _ => {} //~ ERROR cannot be named the same\n     };\n     const C: u8 = 1;\n     match 1 {\n-        C @ 2 => { //~ ERROR variable bindings cannot shadow constants\n+        C @ 2 => { //~ ERROR cannot be named the same\n             println!(\"{}\", C);\n         }\n         _ => {}"}, {"sha": "c99ff1813e0d12b78cbefabba88b74551a4494b0", "filename": "src/test/compile-fail/issue-3907.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -11,14 +11,14 @@\n // aux-build:issue_3907.rs\n extern crate issue_3907;\n \n-type Foo = issue_3907::Foo; //~ NOTE: type defined here\n+type Foo = issue_3907::Foo; //~ NOTE: type aliases cannot be used for traits\n \n struct S {\n     name: isize\n }\n \n impl Foo for S { //~ ERROR: `Foo` is not a trait\n-    //~^ NOTE: `type` aliases cannot be used for traits\n+    //~| `Foo` is not a trait\n     fn bar() { }\n }\n "}, {"sha": "a186a399a112c1f614ac16616b5c9d0a04e8ecf7", "filename": "src/test/compile-fail/issue-5035.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n trait I {}\n-type K = I; //~ NOTE: type defined here\n+type K = I;\n+//~^ NOTE: aliases cannot be used for traits\n impl K for isize {} //~ ERROR: `K` is not a trait\n-//~^ NOTE: `type` aliases cannot be used for traits\n+//~| is not a trait\n fn main() {}"}, {"sha": "1fd69e2dbfe74c7080589c81374ab5cfed823cff", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -32,6 +32,7 @@ fn main() {\n     loop {\n         f(&s, |hellothere| {\n             match hellothere.x { //~ ERROR cannot move out\n+                                 //~| move occurs here\n                 box E::Foo(_) => {}\n                 box E::Bar(x) => println!(\"{}\", x.to_string()), //~ NOTE attempting to move value to here\n                 box E::Baz => {}"}, {"sha": "242ad7aee8d1229c48622c0d9ad4e24bbc02ac16", "filename": "src/test/compile-fail/mut-suggestion.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fmut-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fmut-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-suggestion.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -17,14 +17,16 @@ impl S {\n }\n \n fn func(arg: S) {\n-    //~^ HELP use `mut` as shown\n-    //~| SUGGESTION fn func(mut arg: S) {\n-    arg.mutate(); //~ ERROR cannot borrow immutable argument\n+    //~^ here to make mutable\n+    arg.mutate();\n+    //~^ ERROR cannot borrow immutable argument\n+    //~| cannot borrow mutably\n }\n \n fn main() {\n     let local = S;\n-    //~^ HELP use `mut` as shown\n-    //~| SUGGESTION let mut local = S;\n-    local.mutate(); //~ ERROR cannot borrow immutable local variable\n+    //~^ here to make mutable\n+    local.mutate();\n+    //~^ ERROR cannot borrow immutable local variable\n+    //~| cannot borrow mutably\n }"}, {"sha": "662bb7bfe57f05bdbe3a24dc122a6142827081dd", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:declaration of `None` shadows\n+// error-pattern:cannot be named the same\n use std::option::*;\n \n fn main() {"}, {"sha": "4a8513e10d755959a7b6a356bd43e7b722c0811a", "filename": "src/test/compile-fail/pat-shadow-in-nested-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -11,5 +11,5 @@\n struct foo(usize);\n \n fn main() {\n-    let (foo, _) = (2, 3); //~ ERROR declaration of `foo` shadows\n+    let (foo, _) = (2, 3); //~ ERROR `foo` cannot be named the same as\n }"}, {"sha": "5a068ce42142fd4854ab28d5b59e40e0a5ec26ad", "filename": "src/test/compile-fail/resolve-conflict-item-vs-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs?ref=5ebe41835fcc3dbfdbe282a9b4c3780968c0a97a", "patch": "@@ -13,6 +13,6 @@ use std::mem::transmute;\n \n fn transmute() {}\n //~^ ERROR a value named `transmute` has already been imported in this module\n-\n+//~| was already imported\n fn main() {\n }"}]}