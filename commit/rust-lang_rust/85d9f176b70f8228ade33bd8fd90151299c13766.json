{"sha": "85d9f176b70f8228ade33bd8fd90151299c13766", "node_id": "C_kwDOAAsO6NoAKDg1ZDlmMTc2YjcwZjgyMjhhZGUzM2JkOGZkOTAxNTEyOTljMTM3NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T00:09:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T00:09:11Z"}, "message": "Auto merge of #10589 - blyxyas:fix-double_must_use, r=giraffate\n\nMini-fix `double_must_use` for async functions\n\nFrom Rust 1.67 onwards, the `#[must_use]` attribute also applies to the `Future::Output` (rust-lang/rust#100633). So the lint `double_must_use` was linting all async functions. This PR changes the `double_must_use` lint so it ignores `async` functions.\n\n---\n\nCloses #10486\nchangelog: [`double_must_use`]: Fix false positive in async function", "tree": {"sha": "a0608d87d7eab540bbd8e6f2ec4573df69d6bf27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0608d87d7eab540bbd8e6f2ec4573df69d6bf27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d9f176b70f8228ade33bd8fd90151299c13766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d9f176b70f8228ade33bd8fd90151299c13766", "html_url": "https://github.com/rust-lang/rust/commit/85d9f176b70f8228ade33bd8fd90151299c13766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d9f176b70f8228ade33bd8fd90151299c13766/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e53b6544f77de0f4bfb64413014c9ebd832d133", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e53b6544f77de0f4bfb64413014c9ebd832d133", "html_url": "https://github.com/rust-lang/rust/commit/9e53b6544f77de0f4bfb64413014c9ebd832d133"}, {"sha": "a37eb4dfc97cdcbd177ccc0fda1909014b145635", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37eb4dfc97cdcbd177ccc0fda1909014b145635", "html_url": "https://github.com/rust-lang/rust/commit/a37eb4dfc97cdcbd177ccc0fda1909014b145635"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "d0ad26282642c491bd7f7827729d5aa4fa3240a1", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85d9f176b70f8228ade33bd8fd90151299c13766/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d9f176b70f8228ade33bd8fd90151299c13766/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=85d9f176b70f8228ade33bd8fd90151299c13766", "patch": "@@ -1,7 +1,9 @@\n+use hir::FnSig;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::{self as hir, def::Res, QPath};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n     lint::in_external_macro,\n@@ -27,7 +29,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr, sig);\n         } else if is_public && !is_proc_macro(attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,\n@@ -49,7 +51,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr, sig);\n         } else if is_public && !is_proc_macro(attrs) && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n@@ -72,7 +74,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr, sig);\n         } else if let hir::TraitFn::Provided(eid) = *eid {\n             let body = cx.tcx.hir().body(eid);\n             if attr.is_none() && is_public && !is_proc_macro(attrs) {\n@@ -97,6 +99,7 @@ fn check_needless_must_use(\n     item_span: Span,\n     fn_header_span: Span,\n     attr: &Attribute,\n+    sig: &FnSig<'_>,\n ) {\n     if in_external_macro(cx.sess(), item_span) {\n         return;\n@@ -112,6 +115,15 @@ fn check_needless_must_use(\n             },\n         );\n     } else if attr.value_str().is_none() && is_must_use_ty(cx, return_ty(cx, item_id)) {\n+        // Ignore async functions unless Future::Output type is a must_use type\n+        if sig.header.is_async() {\n+            let infcx = cx.tcx.infer_ctxt().build();\n+            if let Some(future_ty) = infcx.get_impl_future_output_ty(return_ty(cx, item_id))\n+\t\t\t&& !is_must_use_ty(cx, future_ty) {\n+\t\t\t\treturn;\n+\t\t\t}\n+        }\n+\n         span_lint_and_help(\n             cx,\n             DOUBLE_MUST_USE,"}, {"sha": "26a387b3cf04972f1fe654993930d9db0e6b4d66", "filename": "tests/ui/double_must_use.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85d9f176b70f8228ade33bd8fd90151299c13766/tests%2Fui%2Fdouble_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d9f176b70f8228ade33bd8fd90151299c13766/tests%2Fui%2Fdouble_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_must_use.rs?ref=85d9f176b70f8228ade33bd8fd90151299c13766", "patch": "@@ -21,6 +21,17 @@ pub fn must_use_with_note() -> Result<(), ()> {\n     unimplemented!();\n }\n \n+// vvvv Should not lint (#10486)\n+#[must_use]\n+async fn async_must_use() -> usize {\n+    unimplemented!();\n+}\n+\n+#[must_use]\n+async fn async_must_use_result() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n fn main() {\n     must_use_result();\n     must_use_tuple();"}, {"sha": "49ab2ea3e12b42c2f287acb45fa6d55d05f10687", "filename": "tests/ui/double_must_use.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85d9f176b70f8228ade33bd8fd90151299c13766/tests%2Fui%2Fdouble_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85d9f176b70f8228ade33bd8fd90151299c13766/tests%2Fui%2Fdouble_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_must_use.stderr?ref=85d9f176b70f8228ade33bd8fd90151299c13766", "patch": "@@ -23,5 +23,13 @@ LL | pub fn must_use_array() -> [Result<(), ()>; 1] {\n    |\n    = help: either add some descriptive text or remove the attribute\n \n-error: aborting due to 3 previous errors\n+error: this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\n+  --> $DIR/double_must_use.rs:31:1\n+   |\n+LL | async fn async_must_use_result() -> Result<(), ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: either add some descriptive text or remove the attribute\n+\n+error: aborting due to 4 previous errors\n "}]}