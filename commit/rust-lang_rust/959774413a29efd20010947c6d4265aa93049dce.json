{"sha": "959774413a29efd20010947c6d4265aa93049dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTc3NDQxM2EyOWVmZDIwMDEwOTQ3YzZkNDI2NWFhOTMwNDlkY2U=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T01:13:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T01:13:50Z"}, "message": "Rollup merge of #74450 - aticu:master, r=jonas-schievink\n\nFix `Safety` docs for `from_raw_parts_mut`\n\nThis aligns the wording more with the documentation of e.g. `drop_in_place`, `replace`, `swap` and `swap_nonoverlapping` from `core::ptr`.\n\nAlso if the pointer were really only valid for writes, it would be trivial to introduce UB from safe code, after calling `core::slice::from_raw_parts_mut`.", "tree": {"sha": "d1a3ab6bb6162011e2561c04f7e84113500db368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a3ab6bb6162011e2561c04f7e84113500db368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959774413a29efd20010947c6d4265aa93049dce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEkzOCRBK7hj4Ov3rIwAAdHIIAK421FHD9N++NBiZ1Bv2stSy\nLAGaP4NMQcsvo8WsJQBa5cCprZo+nZybFOCuQBwvUglgW+Aeob1sBCuo8LdkAJ9N\n2uxWXZm+IJGLxk4TfvsBN62+TJFEJj/N32v8FOrDkPG6wki2W6Jpfb7DQRqhZRda\nycT4upwNazuNVYpXOMX0F+dztUsuPbMGm4bWcgxujH/nCAvVj4KJatYKMzSjDdBD\nPHWn67NLu/W3kq+FAqHZbJ1QS/b6Z9/WDBPT26sIzK+YUh+V8/MEP7MyzSTMfg9e\nzeC1rB7y76lifh7aTQUBmUsoNQB+yfJ1dwGRM2PMaIkUX3dqmaOPeOhbiEyeRYo=\n=74D2\n-----END PGP SIGNATURE-----\n", "payload": "tree d1a3ab6bb6162011e2561c04f7e84113500db368\nparent 18e8089303952034ccf8a9e993770022eaf6dd53\nparent 4127ed1732f8fe55363df1b65b03b2e58d25fc7f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595034830 -0700\ncommitter GitHub <noreply@github.com> 1595034830 -0700\n\nRollup merge of #74450 - aticu:master, r=jonas-schievink\n\nFix `Safety` docs for `from_raw_parts_mut`\n\nThis aligns the wording more with the documentation of e.g. `drop_in_place`, `replace`, `swap` and `swap_nonoverlapping` from `core::ptr`.\n\nAlso if the pointer were really only valid for writes, it would be trivial to introduce UB from safe code, after calling `core::slice::from_raw_parts_mut`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959774413a29efd20010947c6d4265aa93049dce", "html_url": "https://github.com/rust-lang/rust/commit/959774413a29efd20010947c6d4265aa93049dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959774413a29efd20010947c6d4265aa93049dce/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e8089303952034ccf8a9e993770022eaf6dd53", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e8089303952034ccf8a9e993770022eaf6dd53", "html_url": "https://github.com/rust-lang/rust/commit/18e8089303952034ccf8a9e993770022eaf6dd53"}, {"sha": "4127ed1732f8fe55363df1b65b03b2e58d25fc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4127ed1732f8fe55363df1b65b03b2e58d25fc7f", "html_url": "https://github.com/rust-lang/rust/commit/4127ed1732f8fe55363df1b65b03b2e58d25fc7f"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "20b2c3d3c965a8eb2c4cbc7d5de1e2891492cd1b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959774413a29efd20010947c6d4265aa93049dce/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959774413a29efd20010947c6d4265aa93049dce/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=959774413a29efd20010947c6d4265aa93049dce", "patch": "@@ -6095,7 +6095,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * `data` must be [valid] for writes for `len * mem::size_of::<T>()` many bytes,\n+/// * `data` must be [valid] for boths reads and writes for `len * mem::size_of::<T>()` many bytes,\n ///   and it must be properly aligned. This means in particular:\n ///\n ///     * The entire memory range of this slice must be contained within a single allocated object!"}]}