{"sha": "98c2b4b4ac7a110aee7c236f5d5c392dc7617a03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzJiNGI0YWM3YTExMGFlZTdjMjM2ZjVkNWMzOTJkYzc2MTdhMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T18:06:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T18:06:42Z"}, "message": "auto merge of #13738 : buttslol/rust/armv7-support, r=alexcrichton\n\nThis was required to get ./configure to work on my armv7 test machine.\r\n\r\nI haven't found anything sane to feature gate `hf` on that's pokable from the context of the configure script.\r\n\r\nIt also seems that gcc doesn't work on armv7 by default (rust wants to pass it `-m32` which isn't supported), would it be preferential to make the default `--enable-clang` on arm, or remove the `-m32` flag on that platform?", "tree": {"sha": "112e84499ace4aa8f6fbf11ab5ad70014c30ca53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112e84499ace4aa8f6fbf11ab5ad70014c30ca53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c2b4b4ac7a110aee7c236f5d5c392dc7617a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c2b4b4ac7a110aee7c236f5d5c392dc7617a03", "html_url": "https://github.com/rust-lang/rust/commit/98c2b4b4ac7a110aee7c236f5d5c392dc7617a03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c2b4b4ac7a110aee7c236f5d5c392dc7617a03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd6fb59ee266d0eeb60a9bcfdd1c513a88a50c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6fb59ee266d0eeb60a9bcfdd1c513a88a50c5c", "html_url": "https://github.com/rust-lang/rust/commit/cd6fb59ee266d0eeb60a9bcfdd1c513a88a50c5c"}, {"sha": "b4e69d4529186fa1558418578638bd0b069669dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e69d4529186fa1558418578638bd0b069669dc", "html_url": "https://github.com/rust-lang/rust/commit/b4e69d4529186fa1558418578638bd0b069669dc"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "f42eae6eb6ff2f43df209b03488ffe7a7539486a", "filename": "configure", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/98c2b4b4ac7a110aee7c236f5d5c392dc7617a03/configure", "raw_url": "https://github.com/rust-lang/rust/raw/98c2b4b4ac7a110aee7c236f5d5c392dc7617a03/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=98c2b4b4ac7a110aee7c236f5d5c392dc7617a03", "patch": "@@ -348,6 +348,11 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=arm\n         ;;\n \n+    armv7l)\n+        CFG_CPUTYPE=arm\n+        CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n+        ;;\n+\n     x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;\n@@ -401,6 +406,7 @@ opt optimize 1 \"build optimized rust code\"\n opt optimize-cxx 1 \"build optimized C++ code\"\n opt optimize-llvm 1 \"build optimized LLVM\"\n opt optimize-tests 1 \"build tests with optimizations\"\n+opt libcpp 1 \"build with clang's libcpp\"\n opt llvm-assertions 1 \"build LLVM with assertions\"\n opt debug 1 \"build with extra debug fun\"\n opt ratchet-bench 0 \"ratchet benchmarks\"\n@@ -1043,53 +1049,71 @@ do\n \n         case \"$CFG_CC\" in\n             (\"ccache clang\")\n-            LLVM_CXX_32=\"ccache clang++ -m32 -Qunused-arguments\"\n-            LLVM_CC_32=\"ccache clang -m32 -Qunused-arguments\"\n+            LLVM_CXX_32=\"ccache clang++ -Qunused-arguments\"\n+            LLVM_CC_32=\"ccache clang -Qunused-arguments\"\n \n             LLVM_CXX_64=\"ccache clang++ -Qunused-arguments\"\n             LLVM_CC_64=\"ccache clang -Qunused-arguments\"\n-            LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n             ;;\n             (\"clang\")\n-            LLVM_CXX_32=\"clang++ -m32 -Qunused-arguments\"\n-            LLVM_CC_32=\"clang -m32 -Qunused-arguments\"\n+            LLVM_CXX_32=\"clang++ -Qunused-arguments\"\n+            LLVM_CC_32=\"clang -Qunused-arguments\"\n \n             LLVM_CXX_64=\"clang++ -Qunused-arguments\"\n             LLVM_CC_64=\"clang -Qunused-arguments\"\n-            LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n             ;;\n             (\"ccache gcc\")\n-            LLVM_CXX_32=\"ccache g++ -m32\"\n-            LLVM_CC_32=\"ccache gcc -m32\"\n+            LLVM_CXX_32=\"ccache g++\"\n+            LLVM_CC_32=\"ccache gcc\"\n \n             LLVM_CXX_64=\"ccache g++\"\n             LLVM_CC_64=\"ccache gcc\"\n             ;;\n             (\"gcc\")\n-            LLVM_CXX_32=\"g++ -m32\"\n-            LLVM_CC_32=\"gcc -m32\"\n+            LLVM_CXX_32=\"g++\"\n+            LLVM_CC_32=\"gcc\"\n \n             LLVM_CXX_64=\"g++\"\n             LLVM_CC_64=\"gcc\"\n             ;;\n \n             (*)\n             msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n-            LLVM_CXX_32=\"$CXX -m32\"\n-            LLVM_CC_32=\"$CC -m32\"\n+            LLVM_CXX_32=\"$CXX\"\n+            LLVM_CC_32=\"$CC\"\n \n             LLVM_CXX_64=\"$CXX\"\n             LLVM_CC_64=\"$CC\"\n             ;;\n         esac\n \n-        LLVM_CFLAGS_32=\"-m32\"\n-        LLVM_CXXFLAGS_32=\"-m32\"\n-        LLVM_LDFLAGS_32=\"-m32\"\n+        case \"$CFG_CPUTYPE\" in\n+            (x86*)\n+                LLVM_CXX_32=\"$LLVM_CXX_32 -m32\"\n+                LLVM_CC_32=\"$LLVM_CC_32 -m32\"\n+\n+                LLVM_CFLAGS_32=\"-m32\"\n+                LLVM_CXXFLAGS_32=\"-m32\"\n+                LLVM_LDFLAGS_32=\"-m32\"\n+\n+                LLVM_CFLAGS_64=\"\"\n+                LLVM_CXXFLAGS_64=\"\"\n+                LLVM_LDFLAGS_64=\"\"\n+\n+                LLVM_CXX_32=\"$LLVM_CXX_32 -m32\"\n+                LLVM_CC_32=\"$LLVM_CC_32 -m32\"\n+                ;;\n+\n+            (*)\n+                LLVM_CFLAGS_32=\"\"\n+                LLVM_CXXFLAGS_32=\"\"\n+                LLVM_LDFLAGS_32=\"\"\n \n-        LLVM_CFLAGS_64=\"\"\n-        LLVM_CXXFLAGS_64=\"\"\n-        LLVM_LDFLAGS_64=\"\"\n+                LLVM_CFLAGS_64=\"\"\n+                LLVM_CXXFLAGS_64=\"\"\n+                LLVM_LDFLAGS_64=\"\"\n+                ;;\n+        esac\n \n         if echo $t | grep -q x86_64\n         then\n@@ -1112,6 +1136,10 @@ do\n         CXXFLAGS=$LLVM_CXXFLAGS\n         LDFLAGS=$LLVM_LDFLAGS\n \n+        if [ \"$CFG_DISABLE_LIBCPP\" != 1 ]; then\n+            LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n+        fi\n+\n         LLVM_FLAGS=\"$LLVM_TARGETS $LLVM_OPTS $LLVM_BUILD \\\n                         $LLVM_HOST $LLVM_TARGET --with-python=$CFG_PYTHON\"\n "}]}