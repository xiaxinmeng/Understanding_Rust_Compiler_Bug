{"sha": "b36a948831f7375b725f26ebec1df88687fdfeab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNmE5NDg4MzFmNzM3NWI3MjVmMjZlYmVjMWRmODg2ODdmZGZlYWI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-12-11T23:03:25Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-01-09T20:53:44Z"}, "message": "stop treating `Rc` cycles as unsafe", "tree": {"sha": "5a6d78b2e4c6324dbe0aec869d46caabb05da453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6d78b2e4c6324dbe0aec869d46caabb05da453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36a948831f7375b725f26ebec1df88687fdfeab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36a948831f7375b725f26ebec1df88687fdfeab", "html_url": "https://github.com/rust-lang/rust/commit/b36a948831f7375b725f26ebec1df88687fdfeab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36a948831f7375b725f26ebec1df88687fdfeab/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ba93f91d6988506fd25a91c7d80820818159ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ba93f91d6988506fd25a91c7d80820818159ab", "html_url": "https://github.com/rust-lang/rust/commit/63ba93f91d6988506fd25a91c7d80820818159ab"}], "stats": {"total": 83, "additions": 13, "deletions": 70}, "files": [{"sha": "cdca670bc66a9da55e47ca5565671dd96ed25250", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=b36a948831f7375b725f26ebec1df88687fdfeab", "patch": "@@ -406,14 +406,14 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n     }\n }\n \n-impl<S:Encoder,T:Encodable<S> + Freeze> Encodable<S> for Rc<T> {\n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for Rc<T> {\n     #[inline]\n     fn encode(&self, s: &mut S) {\n         self.borrow().encode(s)\n     }\n }\n \n-impl<D:Decoder,T:Decodable<D> + Freeze> Decodable<D> for Rc<T> {\n+impl<D:Decoder,T:Decodable<D> + NonManaged> Decodable<D> for Rc<T> {\n     #[inline]\n     fn decode(d: &mut D) -> Rc<T> {\n         Rc::new(Decodable::decode(d))"}, {"sha": "9e622dce4c0f8dbf9c67cbd41885245777046a32", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=b36a948831f7375b725f26ebec1df88687fdfeab", "patch": "@@ -19,9 +19,8 @@ overhead of atomic reference counting.\n use ptr::RawPtr;\n use unstable::intrinsics::transmute;\n use ops::Drop;\n-use kinds::{Freeze, Send};\n+use kinds::NonManaged;\n use clone::{Clone, DeepClone};\n-use cell::RefCell;\n use cmp::{Eq, TotalEq, Ord, TotalOrd, Ordering};\n \n struct RcBox<T> {\n@@ -36,46 +35,17 @@ pub struct Rc<T> {\n     priv ptr: *mut RcBox<T>\n }\n \n-impl<T: Freeze> Rc<T> {\n-    /// Construct a new reference-counted box from a `Freeze` value\n+impl<T: NonManaged> Rc<T> {\n+    /// Construct a new reference-counted box\n     #[inline]\n     pub fn new(value: T) -> Rc<T> {\n         unsafe {\n-            Rc::new_unchecked(value)\n-        }\n-    }\n-}\n-\n-impl<T: Send> Rc<T> {\n-    /// Construct a new reference-counted box from a `Send` value\n-    #[inline]\n-    pub fn from_send(value: T) -> Rc<T> {\n-        unsafe {\n-            Rc::new_unchecked(value)\n-        }\n-    }\n-}\n-\n-impl<T: Freeze> Rc<RefCell<T>> {\n-    /// Construct a new reference-counted box from a `RefCell`-wrapped `Freeze` value\n-    #[inline]\n-    pub fn from_mut(value: RefCell<T>) -> Rc<RefCell<T>> {\n-        unsafe {\n-            Rc::new_unchecked(value)\n+            Rc { ptr: transmute(~RcBox { value: value, count: 1 }) }\n         }\n     }\n }\n \n impl<T> Rc<T> {\n-    /// Unsafety construct a new reference-counted box from any value.\n-    ///\n-    /// It is possible to create cycles, which will leak, and may interact\n-    /// poorly with managed pointers.\n-    #[inline]\n-    pub unsafe fn new_unchecked(value: T) -> Rc<T> {\n-        Rc{ptr: transmute(~RcBox{value: value, count: 1})}\n-    }\n-\n     /// Borrow the value contained in the reference-counted box\n     #[inline]\n     pub fn borrow<'r>(&'r self) -> &'r T {\n@@ -147,10 +117,10 @@ impl<T> Clone for Rc<T> {\n     }\n }\n \n-impl<T: DeepClone> DeepClone for Rc<T> {\n+impl<T: NonManaged + DeepClone> DeepClone for Rc<T> {\n     #[inline]\n     fn deep_clone(&self) -> Rc<T> {\n-        unsafe { Rc::new_unchecked(self.borrow().deep_clone()) }\n+        Rc::new(self.borrow().deep_clone())\n     }\n }\n \n@@ -176,7 +146,7 @@ mod test_rc {\n \n     #[test]\n     fn test_clone() {\n-        let x = Rc::from_send(RefCell::new(5));\n+        let x = Rc::new(RefCell::new(5));\n         let y = x.clone();\n         x.borrow().with_mut(|inner| {\n             *inner = 20;\n@@ -186,7 +156,7 @@ mod test_rc {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = Rc::from_send(RefCell::new(5));\n+        let x = Rc::new(RefCell::new(5));\n         let y = x.deep_clone();\n         x.borrow().with_mut(|inner| {\n             *inner = 20;\n@@ -210,13 +180,7 @@ mod test_rc {\n \n     #[test]\n     fn test_destructor() {\n-        let x = Rc::from_send(~5);\n+        let x = Rc::new(~5);\n         assert_eq!(**x.borrow(), 5);\n     }\n-\n-    #[test]\n-    fn test_from_mut() {\n-        let a = 10;\n-        let _x = Rc::from_mut(RefCell::new(&a));\n-    }\n }"}, {"sha": "cf7cb1a5a535f48f593063c82772bb73349012c0", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=b36a948831f7375b725f26ebec1df88687fdfeab", "patch": "@@ -37,7 +37,7 @@ struct A\n fn main()\n {\n     let a = A {v: ~B{v: None} as ~Foo}; //~ ERROR cannot pack type `~B`, which does not fulfill `Send`\n-    let v = Rc::from_send(RefCell::new(a));\n+    let v = Rc::new(RefCell::new(a));\n     let w = v.clone();\n     let b = v.borrow();\n     let mut b = b.borrow_mut();"}, {"sha": "a963446b84c734d2bdfe88c7aeffc99d3d16c8f4", "filename": "src/test/compile-fail/no_freeze-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Ftest%2Fcompile-fail%2Fno_freeze-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36a948831f7375b725f26ebec1df88687fdfeab/src%2Ftest%2Fcompile-fail%2Fno_freeze-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_freeze-rc.rs?ref=b36a948831f7375b725f26ebec1df88687fdfeab", "patch": "@@ -14,6 +14,6 @@ use std::cell::RefCell;\n fn bar<T: Freeze>(_: T) {}\n \n fn main() {\n-    let x = Rc::from_send(RefCell::new(5));\n+    let x = Rc::new(RefCell::new(5));\n     bar(x); //~ ERROR instantiating a type parameter with an incompatible type `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Freeze`\n }"}, {"sha": "7e0c8319356e47f8ca7110978bfac4ea91d1258d", "filename": "src/test/compile-fail/rcmut-not-const-and-not-owned.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63ba93f91d6988506fd25a91c7d80820818159ab/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ba93f91d6988506fd25a91c7d80820818159ab/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs?ref=63ba93f91d6988506fd25a91c7d80820818159ab", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::cell::RefCell;\n-use std::rc::Rc;\n-\n-fn o<T: Send>(_: &T) {}\n-fn c<T: Freeze>(_: &T) {}\n-\n-fn main() {\n-    let x = Rc::from_send(RefCell::new(0));\n-    o(&x); //~ ERROR instantiating a type parameter with an incompatible type `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Send`\n-    c(&x); //~ ERROR instantiating a type parameter with an incompatible type `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Freeze`\n-}"}]}