{"sha": "3566ea853af5ed8219903050139994d3551d61e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NjZlYTg1M2FmNWVkODIxOTkwMzA1MDEzOTk5NGQzNTUxZDYxZTQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-04-24T23:29:04Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-05-14T16:03:22Z"}, "message": "factor out rustdoc's error message handler", "tree": {"sha": "7d5ef7bb7242fffedbf89ce2cfab68cc5562f136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5ef7bb7242fffedbf89ce2cfab68cc5562f136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3566ea853af5ed8219903050139994d3551d61e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3566ea853af5ed8219903050139994d3551d61e4", "html_url": "https://github.com/rust-lang/rust/commit/3566ea853af5ed8219903050139994d3551d61e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3566ea853af5ed8219903050139994d3551d61e4/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfa20b8b059b9591dc3782ff4b9f2bf821d81cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfa20b8b059b9591dc3782ff4b9f2bf821d81cd", "html_url": "https://github.com/rust-lang/rust/commit/7bfa20b8b059b9591dc3782ff4b9f2bf821d81cd"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "c9a80d4779177bed04d448da3b747f940b408c61", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 53, "deletions": 32, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3566ea853af5ed8219903050139994d3551d61e4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3566ea853af5ed8219903050139994d3551d61e4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3566ea853af5ed8219903050139994d3551d61e4", "patch": "@@ -117,6 +117,57 @@ impl DocAccessLevels for AccessLevels<DefId> {\n     }\n }\n \n+/// Creates a new diagnostic `Handler` that can be used to emit warnings and errors.\n+///\n+/// If the given `error_format` is `ErrorOutputType::Json` and no `CodeMap` is given, a new one\n+/// will be created for the handler.\n+pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::CodeMap>>)\n+    -> errors::Handler\n+{\n+    // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n+    // stick to the defaults\n+    let sessopts = config::basic_options();\n+    let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n+        ErrorOutputType::HumanReadable(color_config) => Box::new(\n+            EmitterWriter::stderr(\n+                color_config,\n+                codemap.map(|cm| cm as _),\n+                false,\n+                sessopts.debugging_opts.teach,\n+            ).ui_testing(sessopts.debugging_opts.ui_testing)\n+        ),\n+        ErrorOutputType::Json(pretty) => {\n+            let codemap = codemap.unwrap_or_else(\n+                || Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping())));\n+            Box::new(\n+                JsonEmitter::stderr(\n+                    None,\n+                    codemap,\n+                    pretty,\n+                    sessopts.debugging_opts.suggestion_applicability,\n+                ).ui_testing(sessopts.debugging_opts.ui_testing)\n+            )\n+        },\n+        ErrorOutputType::Short(color_config) => Box::new(\n+            EmitterWriter::stderr(\n+                color_config,\n+                codemap.map(|cm| cm as _),\n+                true,\n+                false)\n+        ),\n+    };\n+\n+    errors::Handler::with_emitter_and_flags(\n+        emitter,\n+        errors::HandlerFlags {\n+            can_emit_warnings: true,\n+            treat_err_as_bug: false,\n+            external_macro_backtrace: false,\n+            ..Default::default()\n+        },\n+    )\n+}\n+\n pub fn run_core(search_paths: SearchPaths,\n                 cfgs: Vec<String>,\n                 externs: config::Externs,\n@@ -159,41 +210,11 @@ pub fn run_core(search_paths: SearchPaths,\n         },\n         error_format,\n         edition,\n-        ..config::basic_options().clone()\n+        ..config::basic_options()\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n         let codemap = Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping()));\n-        let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n-            ErrorOutputType::HumanReadable(color_config) => Box::new(\n-                EmitterWriter::stderr(\n-                    color_config,\n-                    Some(codemap.clone()),\n-                    false,\n-                    sessopts.debugging_opts.teach,\n-                ).ui_testing(sessopts.debugging_opts.ui_testing)\n-            ),\n-            ErrorOutputType::Json(pretty) => Box::new(\n-                JsonEmitter::stderr(\n-                    None,\n-                    codemap.clone(),\n-                    pretty,\n-                    sessopts.debugging_opts.suggestion_applicability,\n-                ).ui_testing(sessopts.debugging_opts.ui_testing)\n-            ),\n-            ErrorOutputType::Short(color_config) => Box::new(\n-                EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false)\n-            ),\n-        };\n-\n-        let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n-            emitter,\n-            errors::HandlerFlags {\n-                can_emit_warnings: true,\n-                treat_err_as_bug: false,\n-                external_macro_backtrace: false,\n-                ..Default::default()\n-            },\n-        );\n+        let diagnostic_handler = new_handler(error_format, Some(codemap.clone()));\n \n         let mut sess = session::build_session_(\n             sessopts, cpath, diagnostic_handler, codemap,"}]}