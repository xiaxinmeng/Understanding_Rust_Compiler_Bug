{"sha": "d26ca984c32152d97eee51b7a7a400b75d2fff68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNmNhOTg0YzMyMTUyZDk3ZWVlNTFiN2E3YTQwMGI3NWQyZmZmNjg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-06T22:15:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T22:15:58Z"}, "message": "Rollup merge of #76784 - lzutao:rd_doc, r=GuillaumeGomez\n\nAdd some docs to rustdoc::clean::inline and def_id functions\n\nSplit from #76571 .", "tree": {"sha": "c674a93588e7d629b013f255c419f24828c5047c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c674a93588e7d629b013f255c419f24828c5047c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26ca984c32152d97eee51b7a7a400b75d2fff68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffOyeCRBK7hj4Ov3rIwAAdHIIAEvenBOtiYTXr1LHn/UeBZX3\nxgiEz1UVYgEpwddaCe2ygGaseGFnbYhv/slbdVstGLxWt+tiTifCHtwlmSTF6kCw\nQIBLwQy7DHJkSYQxtkjUgsWOPz94/dEK7+3IQZsjTU32yYVAzxSbrmhHk7ROg2vA\nVWBmMP7zI+8f1M1qEGjicO2YhBVQbbWOEhCLMLP+DYNHTth3yTq+b8AR9r6TPaIp\n7HqnzLXPoeH8b8BJJ0/A6IxqAuz84h6PEotT3Y2xzwYyTyIcpiB8NmMuyU5pk0wM\nAWHWjRE80SyFxrDlEQl89khWya88vHHfkHKktlK91H3MgBF9FjItCXr/VH+wCb4=\n=AJ9Y\n-----END PGP SIGNATURE-----\n", "payload": "tree c674a93588e7d629b013f255c419f24828c5047c\nparent 9fdaeb393a16951f6fdef087193fef576e36aba6\nparent 63e72348d192dfedfb84510a88099cd6523c187b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602022558 +0200\ncommitter GitHub <noreply@github.com> 1602022558 +0200\n\nRollup merge of #76784 - lzutao:rd_doc, r=GuillaumeGomez\n\nAdd some docs to rustdoc::clean::inline and def_id functions\n\nSplit from #76571 .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26ca984c32152d97eee51b7a7a400b75d2fff68", "html_url": "https://github.com/rust-lang/rust/commit/d26ca984c32152d97eee51b7a7a400b75d2fff68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26ca984c32152d97eee51b7a7a400b75d2fff68/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdaeb393a16951f6fdef087193fef576e36aba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaeb393a16951f6fdef087193fef576e36aba6", "html_url": "https://github.com/rust-lang/rust/commit/9fdaeb393a16951f6fdef087193fef576e36aba6"}, {"sha": "63e72348d192dfedfb84510a88099cd6523c187b", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e72348d192dfedfb84510a88099cd6523c187b", "html_url": "https://github.com/rust-lang/rust/commit/63e72348d192dfedfb84510a88099cd6523c187b"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "b24ede9c53aed1d431ff44aeb8bd68d77c912afd", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d26ca984c32152d97eee51b7a7a400b75d2fff68/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26ca984c32152d97eee51b7a7a400b75d2fff68/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=d26ca984c32152d97eee51b7a7a400b75d2fff68", "patch": "@@ -159,6 +159,7 @@ impl DefId {\n         DefId { krate: LOCAL_CRATE, index }\n     }\n \n+    /// Returns whether the item is defined in the crate currently being compiled.\n     #[inline]\n     pub fn is_local(self) -> bool {\n         self.krate == LOCAL_CRATE"}, {"sha": "7f64d20d8e7cd70d185cc248c5fae005a5638f1f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d26ca984c32152d97eee51b7a7a400b75d2fff68/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26ca984c32152d97eee51b7a7a400b75d2fff68/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d26ca984c32152d97eee51b7a7a400b75d2fff68", "patch": "@@ -290,10 +290,12 @@ pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n     }\n }\n \n+/// Builds all inherent implementations of an ADT (struct/union/enum) or Trait item/path/reexport.\n pub fn build_impls(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>) -> Vec<clean::Item> {\n     let tcx = cx.tcx;\n     let mut impls = Vec::new();\n \n+    // for each implementation of an item represented by `did`, build the clean::Item for that impl\n     for &did in tcx.inherent_impls(did).iter() {\n         build_impl(cx, did, attrs, &mut impls);\n     }\n@@ -320,6 +322,7 @@ fn merge_attrs(\n     merged_attrs.clean(cx)\n }\n \n+/// Builds a specific implementation of a type. The `did` could be a type method or trait method.\n pub fn build_impl(\n     cx: &DocContext<'_>,\n     did: DefId,"}]}