{"sha": "127c41f700a719cc60594382d7ae0409ba238d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyN2M0MWY3MDBhNzE5Y2M2MDU5NDM4MmQ3YWUwNDA5YmEyMzhkMGI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-14T13:56:00Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-14T13:56:00Z"}, "message": "Apply changes that were required for running in the rustc test suite", "tree": {"sha": "9db7a43d27d189415eeed1794d1f628cdae970cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db7a43d27d189415eeed1794d1f628cdae970cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127c41f700a719cc60594382d7ae0409ba238d0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloK9fAACgkQpp+NIls6\n19kXYA/8ChtVs47T+03khp1VAvxQ2szNM4UEHFl9Ip4i1nngRwDj0GgE9zxe7y8d\nw0ifzCrbZ+taHpnO0xwllJHHdgk6bEaJFdwTrKTdIfTJf5GEnrpaGWSmL8wikRyR\nJdO7wTOTqMyz6T3mn1LFKYlwYzix+I3UX3Rmkcv9fyz+jR5uIyd3+QmJWv3XyGTX\nDrBDIAskHUOsY49SYJ8GUyLwztMyeuVef2n8WW+u6uEOWb5KDp+j4p+8fXcx8FC8\n9ww/S73QK0dtwQWA7dva6FjR9Jw7r9Xl3dXIAF4dXgpB3x3QamRLqHg9aApOIIGY\n1NVL6XywSxASY1LBbOG70y+LQ+Pi4jFP20aTbKURBNIM6pfMKoMzbi/ZvVaP+IkB\n9/C0nAlIEb9sq6cHs+bBUH22nWBwd9iwfzXR19PKCpE4EBcdsvHFwALV7RnOoLum\n9Pe5YDnWbBkgx2vnDmWaagEaHzDUueGUy4lfqmBD63YNiZaQs3bULCacYBMn7SR8\nqZcUe5gMQMlVsQHbBNDLgbakywrKEjAm300BFweMbzgPMCM8JNt9J3sMlTTFJ9pC\nbiaYl0m550VUqcIR6Fe5+NVcoRJWEynHXYwOk3o7cthmBZAeHC+LJOqn4Qq0602P\nz1JstIjK3ixY/g9eVvecGjrg7SneZrPO9w6ifU5D5Bu/FPad1xU=\n=anbz\n-----END PGP SIGNATURE-----", "payload": "tree 9db7a43d27d189415eeed1794d1f628cdae970cc\nparent 299f1270a6d0dfa9b77ab0c61b1f25f257a9b692\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510667760 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510667760 +0100\n\nApply changes that were required for running in the rustc test suite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127c41f700a719cc60594382d7ae0409ba238d0b", "html_url": "https://github.com/rust-lang/rust/commit/127c41f700a719cc60594382d7ae0409ba238d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127c41f700a719cc60594382d7ae0409ba238d0b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299f1270a6d0dfa9b77ab0c61b1f25f257a9b692", "url": "https://api.github.com/repos/rust-lang/rust/commits/299f1270a6d0dfa9b77ab0c61b1f25f257a9b692", "html_url": "https://github.com/rust-lang/rust/commit/299f1270a6d0dfa9b77ab0c61b1f25f257a9b692"}], "stats": {"total": 241, "additions": 101, "deletions": 140}, "files": [{"sha": "38fcae193545cde9fa4f38f038521e269c0ba519", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -40,12 +40,12 @@ path = \"src/driver.rs\"\n clippy_lints = { version = \"0.0.170\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n+regex = \"0.2\"\n \n [dev-dependencies]\n compiletest_rs = \"0.3\"\n duct = \"0.8.2\"\n lazy_static = \"0.2\"\n-regex = \"0.2\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.1\", path = \"mini-macro\" }\n serde = \"1.0\""}, {"sha": "b53b34b3b2b45632fcff2e9cd90330f003be7403", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -183,17 +183,28 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n                 match utils::conf::lookup_conf_file() {\n                     Ok(path) => path,\n                     Err(error) => {\n-                        reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", error)).emit();\n+                        reg.sess.struct_err(&format!(\"error finding Clippy's configuration file: {}\", error)).emit();\n                         None\n                     }\n                 }\n             };\n \n+            let file_name = file_name.map(|file_name| if file_name.is_relative() {\n+                reg.sess\n+                    .local_crate_source_file\n+                    .as_ref()\n+                    .and_then(|file| std::path::Path::new(&file).parent().map(std::path::Path::to_path_buf))\n+                    .unwrap_or_default()\n+                    .join(file_name)\n+            } else {\n+                file_name\n+            });\n+\n             let (conf, errors) = utils::conf::read(file_name.as_ref().map(|p| p.as_ref()));\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {\n-                reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", error)).emit();\n+                reg.sess.struct_err(&format!(\"error reading Clippy's configuration file `{}`: {}\", file_name.as_ref().and_then(|p| p.to_str()).unwrap_or(\"\"), error)).emit();\n             }\n \n             conf"}, {"sha": "090e69cf027a923a4f7da6fc657fcde53c759949", "filename": "src/driver.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -129,33 +129,29 @@ fn show_version() {\n pub fn main() {\n     use std::env;\n \n-    if env::var(\"CLIPPY_DOGFOOD\").is_ok() {\n-        panic!(\"yummy\");\n-    }\n-\n     if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n         show_version();\n         return;\n     }\n \n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    let sys_root = if let (Some(home), Some(toolchain)) = (home, toolchain) {\n-        format!(\"{}/toolchains/{}\", home, toolchain)\n-    } else {\n-        option_env!(\"SYSROOT\")\n-            .map(|s| s.to_owned())\n-            .or_else(|| {\n-                Command::new(\"rustc\")\n-                    .arg(\"--print\")\n-                    .arg(\"sysroot\")\n-                    .output()\n-                    .ok()\n-                    .and_then(|out| String::from_utf8(out.stdout).ok())\n-                    .map(|s| s.trim().to_owned())\n-            })\n-            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n-    };\n+    let sys_root = option_env!(\"SYSROOT\")\n+        .map(String::from)\n+        .or_else(|| std::env::var(\"SYSROOT\").ok())\n+        .or_else(|| {\n+            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+        })\n+        .or_else(|| {\n+            Command::new(\"rustc\")\n+                .arg(\"--print\")\n+                .arg(\"sysroot\")\n+                .output()\n+                .ok()\n+                .and_then(|out| String::from_utf8(out.stdout).ok())\n+                .map(|s| s.trim().to_owned())\n+        })\n+        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n     rustc_driver::in_rustc_thread(|| {\n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument."}, {"sha": "c613f029b162e02bb9fada2106d281fe76af83e9", "filename": "src/main.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -49,12 +49,6 @@ fn show_version() {\n }\n \n pub fn main() {\n-    use std::env;\n-\n-    if env::var(\"CLIPPY_DOGFOOD\").is_ok() {\n-        panic!(\"yummy\");\n-    }\n-\n     // Check for version and help flags even when invoked as 'cargo-clippy'\n     if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n         show_help();"}, {"sha": "51ab6aee3a408aac197e96260edd2664b34cfd1c", "filename": "tests/compile-test.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,6 +1,9 @@\n+#![feature(test)]\n+\n extern crate compiletest_rs as compiletest;\n+extern crate test;\n \n-use std::path::PathBuf;\n+use std::path::{PathBuf, Path};\n use std::env::{set_var, var};\n \n fn clippy_driver_path() -> PathBuf {\n@@ -11,16 +14,37 @@ fn clippy_driver_path() -> PathBuf {\n     }\n }\n \n-fn run_mode(dir: &'static str, mode: &'static str) {\n+fn host_libs() -> PathBuf {\n+    if let Some(path) = option_env!(\"HOST_LIBS\") {\n+        PathBuf::from(path)\n+    } else {\n+        Path::new(\"target\").join(env!(\"PROFILE\"))\n+    }\n+}\n+\n+fn rustc_test_suite() -> Option<PathBuf> {\n+    option_env!(\"RUSTC_TEST_SUITE\").map(PathBuf::from)\n+}\n+\n+fn rustc_lib_path() -> PathBuf {\n+    option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n+}\n+\n+fn config(dir: &'static str, mode: &'static str) -> compiletest::Config {\n     let mut config = compiletest::Config::default();\n \n     let cfg_mode = mode.parse().expect(\"Invalid mode\");\n-    config.target_rustcflags = Some(\"-L target/debug/ -L target/debug/deps -Dwarnings\".to_owned());\n     if let Ok(name) = var::<&str>(\"TESTNAME\") {\n         let s: String = name.to_owned();\n         config.filter = Some(s)\n     }\n \n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n+    config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n+\n     config.mode = cfg_mode;\n     config.build_base = {\n         let mut path = std::env::current_dir().unwrap();\n@@ -29,8 +53,11 @@ fn run_mode(dir: &'static str, mode: &'static str) {\n     };\n     config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n     config.rustc_path = clippy_driver_path();\n+    config\n+}\n \n-    compiletest::run_tests(&config);\n+fn run_mode(dir: &'static str, mode: &'static str) {\n+    compiletest::run_tests(&config(dir, mode));\n }\n \n fn prepare_env() {\n@@ -45,3 +72,21 @@ fn compile_test() {\n     run_mode(\"run-pass\", \"run-pass\");\n     run_mode(\"ui\", \"ui\");\n }\n+\n+#[test]\n+fn dogfood() {\n+    prepare_env();\n+    let files = [\"src/main.rs\", \"src/driver.rs\", \"src/lib.rs\", \"clippy_lints/src/lib.rs\"];\n+    let mut config = config(\"dogfood\", \"ui\");\n+    config.target_rustcflags = config.target_rustcflags.map(|flags| format!(\"{} -Dclippy -Dclippy_pedantic -Dclippy_internal\", flags));\n+\n+    for file in &files {\n+        let paths = test::TestPaths {\n+            base: PathBuf::new(),\n+            file: PathBuf::from(file),\n+            relative_dir: PathBuf::new(),\n+        };\n+\n+        compiletest::runtest::run(config.clone(), &paths);\n+    }\n+}"}, {"sha": "10a7d3e72d7d509143f4ab003c3548f4fee1cca3", "filename": "tests/conf_whitelisted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fconf_whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fconf_whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconf_whitelisted.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,2 +1,2 @@\n #![feature(plugin)]\n-#![plugin(clippy(conf_file = \"./tests/auxiliary/conf_whitelisted.toml\"))]\n+#![plugin(clippy(conf_file = \"./auxiliary/conf_whitelisted.toml\"))]"}, {"sha": "4870bd285b499b248f320538524fc5504c1e7175", "filename": "tests/dogfood.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/299f1270a6d0dfa9b77ab0c61b1f25f257a9b692/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299f1270a6d0dfa9b77ab0c61b1f25f257a9b692/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=299f1270a6d0dfa9b77ab0c61b1f25f257a9b692", "patch": "@@ -1,49 +0,0 @@\n-#![feature(test, plugin)]\n-#![plugin(clippy)]\n-#![deny(clippy, clippy_pedantic)]\n-\n-extern crate compiletest_rs as compiletest;\n-extern crate test;\n-\n-use std::env::{set_var, var};\n-use std::path::PathBuf;\n-use test::TestPaths;\n-\n-#[test]\n-fn dogfood() {\n-    // don't run dogfood on travis, cargo-clippy already runs clippy on itself\n-    if let Ok(travis) = var(\"TRAVIS\") {\n-        if travis == \"true\" {\n-            return;\n-        }\n-    }\n-\n-    let mut config = compiletest::Config::default();\n-\n-    let cfg_mode = \"run-fail\".parse().expect(\"Invalid mode\");\n-    let mut s = String::new();\n-    s.push_str(\" -L target/debug/\");\n-    s.push_str(\" -L target/debug/deps\");\n-    s.push_str(\" -Zextra-plugins=clippy -Ltarget_recur/debug -Dwarnings -Dclippy_pedantic -Dclippy -Dclippy_internal\");\n-    config.target_rustcflags = Some(s);\n-    if let Ok(name) = var(\"TESTNAME\") {\n-        config.filter = Some(name.to_owned())\n-    }\n-\n-    config.mode = cfg_mode;\n-    config.verbose = true;\n-\n-    let files = [\"src/main.rs\", \"src/lib.rs\", \"clippy_lints/src/lib.rs\"];\n-\n-    for file in &files {\n-        let paths = TestPaths {\n-            base: PathBuf::new(),\n-            file: PathBuf::from(file),\n-            relative_dir: PathBuf::new(),\n-        };\n-\n-        set_var(\"CLIPPY_DOGFOOD\", \"tastes like chicken\");\n-\n-        compiletest::runtest::run(config.clone(), &paths);\n-    }\n-}"}, {"sha": "a2ce7ecc519b34147d369c8edb1a0be67e2ef3ac", "filename": "tests/ui/conf_bad_toml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file\n \n \n-#![plugin(clippy(conf_file=\"./tests/ui/conf_bad_toml.toml\"))]\n+#![plugin(clippy(conf_file=\"../ui/conf_bad_toml.toml\"))]\n \n fn main() {}"}, {"sha": "45477ff085546fdd7698632e2ba974505d3d8127", "filename": "tests/ui/conf_bad_toml.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,8 +1,8 @@\n error: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_toml.rs:4:1\n   |\n-4 | #![plugin(clippy(conf_file=\"./$DIR/conf_bad_toml.toml\"))]\n-  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+4 | #![plugin(clippy(conf_file=\"../ui/conf_bad_toml.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "cb18bfb8c90c84aac5756d30732ee2617a063d1b", "filename": "tests/ui/conf_bad_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n \n \n-#![plugin(clippy(conf_file=\"./tests/ui/conf_bad_type.toml\"))]\n+#![plugin(clippy(conf_file=\"../ui/conf_bad_type.toml\"))]\n \n fn main() {}"}, {"sha": "0fa40cfca9b51c3beca8b10f79c2f4aceec12157", "filename": "tests/ui/conf_bad_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,8 +1,8 @@\n error: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_type.rs:4:1\n   |\n-4 | #![plugin(clippy(conf_file=\"./$DIR/conf_bad_type.toml\"))]\n-  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+4 | #![plugin(clippy(conf_file=\"../ui/conf_bad_type.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "dbe6d85e5d28df8d88ae5bfac57fb0d4615d5a4a", "filename": "tests/ui/conf_french_blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,5 @@\n \n-#![plugin(clippy(conf_file=\"./tests/auxiliary/conf_french_blacklisted_name.toml\"))]\n+#![plugin(clippy(conf_file=\"../auxiliary/conf_french_blacklisted_name.toml\"))]\n \n #![allow(dead_code)]\n #![allow(single_match)]"}, {"sha": "f7eb174f9a6bb7ff0ee1f5ba9ec03c355b90c2da", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,8 +1,8 @@\n error: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_french_blacklisted_name.rs:2:1\n   |\n-2 | #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_french_blacklisted_name.toml\"))]\n-  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+2 | #![plugin(clippy(conf_file=\"../auxiliary/conf_french_blacklisted_name.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "437d0f9d8b0ac5f7f74b759002f375c5745ead26", "filename": "tests/ui/conf_unknown_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file: unknown key `foobar`\n \n \n-#![plugin(clippy(conf_file=\"./tests/auxiliary/conf_unknown_key.toml\"))]\n+#![plugin(clippy(conf_file=\"../auxiliary/conf_unknown_key.toml\"))]\n \n fn main() {}"}, {"sha": "c525366c129d4df86041f57f2fba762eb8b9bbfc", "filename": "tests/ui/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,8 +1,8 @@\n error: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_unknown_key.rs:4:1\n   |\n-4 | #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_unknown_key.toml\"))]\n-  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+4 | #![plugin(clippy(conf_file=\"../auxiliary/conf_unknown_key.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "558e9e83c331db3e3e5597368a64be17de350997", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -6,15 +6,3 @@ error: useless use of `format!`\n   |\n   = note: `-D useless-format` implied by `-D warnings`\n \n-error: useless use of `format!`\n- --> $DIR/format.rs:8:5\n-  |\n-8 |     format!(\"{}\", \"foo\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: useless use of `format!`\n-  --> $DIR/format.rs:15:5\n-   |\n-15 |     format!(\"{}\", arg);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "c93f858b5ca75d4d046f5cc21bec7cf8c0a96592", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused)]\n-//#![feature(plugin)]#![plugin(clippy)]\n+\n use std::collections::{HashMap, HashSet};\n use std::cmp::Eq;\n use std::hash::{Hash, BuildHasher};"}, {"sha": "a9e059f4a3eddde5fde2901c18f6cc71b7845342", "filename": "tests/ui/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[allow(no_effect, unnecessary_operation)]\n #[warn(int_plus_one)]"}, {"sha": "5d42ebb8986927184499f106e208f70f0bc0bf2d", "filename": "tests/ui/int_plus_one.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,3 @@\n-warning: running cargo clippy on a crate that also imports the clippy plugin\n-\n error: Unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:10:5\n    |"}, {"sha": "ce2596c0c1a4218fa1e49d03beaa9f1fb17db062", "filename": "tests/ui/invalid_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused)]\n #![feature(core_intrinsics)]"}, {"sha": "c018bdf6dd3820770f0176c1d6b50d486d8fa66a", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,3 @@\n-warning: running cargo clippy on a crate that also imports the clippy plugin\n-\n error: reference to zeroed memory\n   --> $DIR/invalid_ref.rs:27:24\n    |"}, {"sha": "0e397c7ae8ce639946829bc31df174dfaaf04e3f", "filename": "tests/ui/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.rs?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused)]\n "}, {"sha": "20dbb6511d75d10fa2d24b725c39220e609d629e", "filename": "tests/ui/mut_range_bound.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -1,5 +1,3 @@\n-warning: running cargo clippy on a crate that also imports the clippy plugin\n-\n error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n   --> $DIR/mut_range_bound.rs:18:21\n    |"}, {"sha": "0148a470e0d0c3b1459eec31762f9a07fb89e709", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/127c41f700a719cc60594382d7ae0409ba238d0b/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=127c41f700a719cc60594382d7ae0409ba238d0b", "patch": "@@ -6,21 +6,3 @@ error: using `print!()` with a format string that ends in a newline, consider us\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n-error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:7:5\n-  |\n-7 |     print!(\"Hello {}/n\", \"world\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:8:5\n-  |\n-8 |     print!(\"Hello {} {}/n/n\", \"world\", \"#2\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:9:5\n-  |\n-9 |     print!(\"{}/n\", 1265);\n-  |     ^^^^^^^^^^^^^^^^^^^^^\n-"}]}