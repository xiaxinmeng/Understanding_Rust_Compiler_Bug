{"sha": "2ff702cbb547ea02381820536b27a575f14ba59e", "node_id": "C_kwDOAAsO6NoAKDJmZjcwMmNiYjU0N2VhMDIzODE4MjA1MzZiMjdhNTc1ZjE0YmE1OWU", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-10-20T20:18:12Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Rephrase the fn checking for a double ref, not only one", "tree": {"sha": "7afcb750aa82d541dbe0645a5cdde9643b64c004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7afcb750aa82d541dbe0645a5cdde9643b64c004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ff702cbb547ea02381820536b27a575f14ba59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff702cbb547ea02381820536b27a575f14ba59e", "html_url": "https://github.com/rust-lang/rust/commit/2ff702cbb547ea02381820536b27a575f14ba59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ff702cbb547ea02381820536b27a575f14ba59e/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7221999181c3d14b45ba10240bbaa49da7f74e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/7221999181c3d14b45ba10240bbaa49da7f74e72", "html_url": "https://github.com/rust-lang/rust/commit/7221999181c3d14b45ba10240bbaa49da7f74e72"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "96e040d9261e01a4f7fa93ab97414522367a9930", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ff702cbb547ea02381820536b27a575f14ba59e/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff702cbb547ea02381820536b27a575f14ba59e/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=2ff702cbb547ea02381820536b27a575f14ba59e", "patch": "@@ -226,7 +226,7 @@ impl DerefDelegate<'_, 'tcx> {\n         format!(\"{}{}\", self.suggestion_start, end_snip)\n     }\n \n-    fn func_takes_arg_by_ref(&self, parent_expr: &'tcx hir::Expr<'_>, cmt_hir_id: HirId) -> bool {\n+    fn func_takes_arg_by_double_ref(&self, parent_expr: &'tcx hir::Expr<'_>, cmt_hir_id: HirId) -> bool {\n         let (call_args, inputs) = match parent_expr.kind {\n             ExprKind::MethodCall(_, _, call_args, _) => {\n                 if let Some(method_did) = self.cx.typeck_results().type_dependent_def_id(parent_expr.hir_id) {\n@@ -277,16 +277,18 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         let arg_ty_kind = self.cx.typeck_results().expr_ty(expr).kind();\n \n                         if matches!(arg_ty_kind, ty::Ref(_, _, Mutability::Not)) {\n-                            // suggest ampersand if call function is taking args by ref\n-                            let takes_arg_by_ref = self.func_takes_arg_by_ref(parent_expr, cmt.hir_id);\n+                            // suggest ampersand if call function is taking args by double reference\n+                            let takes_arg_by_double_ref = self.func_takes_arg_by_double_ref(parent_expr, cmt.hir_id);\n \n                             // do not suggest ampersand if the ident is the method caller\n-                            let ident_sugg =\n-                                if !call_args.is_empty() && call_args[0].hir_id == cmt.hir_id && !takes_arg_by_ref {\n-                                    format!(\"{}{}\", start_snip, ident_str)\n-                                } else {\n-                                    format!(\"{}&{}\", start_snip, ident_str)\n-                                };\n+                            let ident_sugg = if !call_args.is_empty()\n+                                && call_args[0].hir_id == cmt.hir_id\n+                                && !takes_arg_by_double_ref\n+                            {\n+                                format!(\"{}{}\", start_snip, ident_str)\n+                            } else {\n+                                format!(\"{}&{}\", start_snip, ident_str)\n+                            };\n                             self.suggestion_start.push_str(&ident_sugg);\n                             self.next_pos = span.hi();\n                             return;"}]}