{"sha": "1a08b96a0bb7c170130144214787b4a46aa5eb17", "node_id": "C_kwDOAAsO6NoAKDFhMDhiOTZhMGJiN2MxNzAxMzAxNDQyMTQ3ODdiNGE0NmFhNWViMTc", "commit": {"author": {"name": "Michael Benfield", "email": "mbenfield@google.com", "date": "2022-08-25T01:14:23Z"}, "committer": {"name": "Michael Benfield", "email": "mbenfield@google.com", "date": "2022-09-07T20:12:45Z"}, "message": "Change name of \"dataful\" variant to \"untagged\"\n\nThis is in anticipation of a new enum layout, in which the niche\noptimization may be applied even when multiple variants have data.", "tree": {"sha": "69c1281f993d4dfbf1b22d0883fb0650c94f91c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c1281f993d4dfbf1b22d0883fb0650c94f91c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a08b96a0bb7c170130144214787b4a46aa5eb17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a08b96a0bb7c170130144214787b4a46aa5eb17", "html_url": "https://github.com/rust-lang/rust/commit/1a08b96a0bb7c170130144214787b4a46aa5eb17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a08b96a0bb7c170130144214787b4a46aa5eb17/comments", "author": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikebenfield", "id": 543755, "node_id": "MDQ6VXNlcjU0Mzc1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikebenfield", "html_url": "https://github.com/mikebenfield", "followers_url": "https://api.github.com/users/mikebenfield/followers", "following_url": "https://api.github.com/users/mikebenfield/following{/other_user}", "gists_url": "https://api.github.com/users/mikebenfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikebenfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikebenfield/subscriptions", "organizations_url": "https://api.github.com/users/mikebenfield/orgs", "repos_url": "https://api.github.com/users/mikebenfield/repos", "events_url": "https://api.github.com/users/mikebenfield/events{/privacy}", "received_events_url": "https://api.github.com/users/mikebenfield/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91ca2878af792bc6969b97d78fe91b27739ac2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91ca2878af792bc6969b97d78fe91b27739ac2d", "html_url": "https://github.com/rust-lang/rust/commit/f91ca2878af792bc6969b97d78fe91b27739ac2d"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "97b395bcd05186b199e59026ddec9fda4472dc77", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -42,10 +42,10 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n         Variants::Multiple {\n             tag: _,\n             tag_field,\n-            tag_encoding: TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },\n+            tag_encoding: TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start },\n             variants: _,\n         } => {\n-            if variant_index != dataful_variant {\n+            if variant_index != untagged_variant {\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = ty::ScalarInt::try_from_uint(\n@@ -113,7 +113,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n             let res = CValue::by_val(val, dest_layout);\n             dest.write_cvalue(fx, res);\n         }\n-        TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+        TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start } => {\n             // Rebase from niche values to discriminants, and check\n             // whether the result is in range for the niche variants.\n \n@@ -169,8 +169,9 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 fx.bcx.ins().iadd_imm(relative_discr, i64::from(niche_variants.start().as_u32()))\n             };\n \n-            let dataful_variant = fx.bcx.ins().iconst(cast_to, i64::from(dataful_variant.as_u32()));\n-            let discr = fx.bcx.ins().select(is_niche, niche_discr, dataful_variant);\n+            let untagged_variant =\n+                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()));\n+            let discr = fx.bcx.ins().select(is_niche, niche_discr, untagged_variant);\n             let res = CValue::by_val(discr, dest_layout);\n             dest.write_cvalue(fx, res);\n         }"}, {"sha": "129e336c7e431c58dd68b2280188bce1ee199cfa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -99,7 +99,7 @@ const SINGLE_VARIANT_VIRTUAL_DISR: u64 = 0;\n /// compiler versions.\n ///\n /// Niche-tag enums have one special variant, usually called the\n-/// \"dataful variant\". This variant has a field that\n+/// \"untagged variant\". This variant has a field that\n /// doubles as the tag of the enum. The variant is active when the value of\n /// that field is within a pre-defined range. Therefore the variant struct\n /// has a `DISCR_BEGIN` and `DISCR_END` field instead of `DISCR_EXACT` in\n@@ -249,7 +249,7 @@ pub(super) fn build_enum_type_di_node<'ll, 'tcx>(\n                     None,\n                 ),\n                 Variants::Multiple {\n-                    tag_encoding: TagEncoding::Niche { dataful_variant, .. },\n+                    tag_encoding: TagEncoding::Niche { untagged_variant, .. },\n                     ref variants,\n                     tag_field,\n                     ..\n@@ -260,7 +260,7 @@ pub(super) fn build_enum_type_di_node<'ll, 'tcx>(\n                     enum_type_di_node,\n                     variants.indices(),\n                     tag_field,\n-                    Some(dataful_variant),\n+                    Some(untagged_variant),\n                 ),\n             }\n         },\n@@ -391,7 +391,7 @@ fn build_union_fields_for_enum<'ll, 'tcx>(\n     enum_type_di_node: &'ll DIType,\n     variant_indices: impl Iterator<Item = VariantIdx> + Clone,\n     tag_field: usize,\n-    dataful_variant_index: Option<VariantIdx>,\n+    untagged_variant_index: Option<VariantIdx>,\n ) -> SmallVec<&'ll DIType> {\n     let tag_base_type = super::tag_base_type(cx, enum_type_and_layout);\n \n@@ -436,7 +436,7 @@ fn build_union_fields_for_enum<'ll, 'tcx>(\n         variant_names_type_di_node,\n         tag_base_type,\n         tag_field,\n-        dataful_variant_index,\n+        untagged_variant_index,\n     )\n }\n \n@@ -472,7 +472,7 @@ fn build_variant_struct_wrapper_type_di_node<'ll, 'tcx>(\n     enum_or_generator_type_and_layout: TyAndLayout<'tcx>,\n     enum_or_generator_type_di_node: &'ll DIType,\n     variant_index: VariantIdx,\n-    dataful_variant_index: Option<VariantIdx>,\n+    untagged_variant_index: Option<VariantIdx>,\n     variant_struct_type_di_node: &'ll DIType,\n     variant_names_type_di_node: &'ll DIType,\n     tag_base_type_di_node: &'ll DIType,\n@@ -517,7 +517,7 @@ fn build_variant_struct_wrapper_type_di_node<'ll, 'tcx>(\n                     }\n                 }\n                 DiscrResult::Range(min, max) => {\n-                    assert_eq!(Some(variant_index), dataful_variant_index);\n+                    assert_eq!(Some(variant_index), untagged_variant_index);\n                     if is_128_bits {\n                         DiscrKind::Range128(min, max)\n                     } else {\n@@ -757,7 +757,7 @@ fn build_union_fields_for_direct_tag_enum_or_generator<'ll, 'tcx>(\n     discr_type_di_node: &'ll DIType,\n     tag_base_type: Ty<'tcx>,\n     tag_field: usize,\n-    dataful_variant_index: Option<VariantIdx>,\n+    untagged_variant_index: Option<VariantIdx>,\n ) -> SmallVec<&'ll DIType> {\n     let tag_base_type_di_node = type_di_node(cx, tag_base_type);\n     let mut unions_fields = SmallVec::with_capacity(variant_field_infos.len() + 1);\n@@ -776,7 +776,7 @@ fn build_union_fields_for_direct_tag_enum_or_generator<'ll, 'tcx>(\n             enum_type_and_layout,\n             enum_type_di_node,\n             variant_member_info.variant_index,\n-            dataful_variant_index,\n+            untagged_variant_index,\n             variant_member_info.variant_struct_type_di_node,\n             discr_type_di_node,\n             tag_base_type_di_node,"}, {"sha": "14044d0f99b987609ff17331b3ee50d4f2b83605", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -417,7 +417,7 @@ impl DiscrResult {\n /// Returns the discriminant value corresponding to the variant index.\n ///\n /// Will return `None` if there is less than two variants (because then the enum won't have)\n-/// a tag, and if this is the dataful variant of a niche-layout enum (because then there is no\n+/// a tag, and if this is the untagged variant of a niche-layout enum (because then there is no\n /// single discriminant value).\n fn compute_discriminant_value<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n@@ -430,11 +430,11 @@ fn compute_discriminant_value<'ll, 'tcx>(\n             enum_type_and_layout.ty.discriminant_for_variant(cx.tcx, variant_index).unwrap().val,\n         ),\n         &Variants::Multiple {\n-            tag_encoding: TagEncoding::Niche { ref niche_variants, niche_start, dataful_variant },\n+            tag_encoding: TagEncoding::Niche { ref niche_variants, niche_start, untagged_variant },\n             tag,\n             ..\n         } => {\n-            if variant_index == dataful_variant {\n+            if variant_index == untagged_variant {\n                 let valid_range = enum_type_and_layout\n                     .for_variant(cx, variant_index)\n                     .largest_niche"}, {"sha": "becbccc434d9ac33ee30091225aa0b87278986b7", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -378,7 +378,7 @@ fn build_discr_member_di_node<'ll, 'tcx>(\n ///\n /// The DW_AT_discr_value is optional, and is omitted if\n ///   - This is the only variant of a univariant enum (i.e. their is no discriminant)\n-///   - This is the \"dataful\" variant of a niche-layout enum\n+///   - This is the \"untagged\" variant of a niche-layout enum\n ///     (where only the other variants are identified by a single value)\n ///\n /// There is only ever a single member, the type of which is a struct that describes the"}, {"sha": "13d8f6eddd1de12579a15761d52d7f56acf5c50c", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                 };\n                 bx.intcast(tag.immediate(), cast_to, signed)\n             }\n-            TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+            TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start } => {\n                 // Rebase from niche values to discriminants, and check\n                 // whether the result is in range for the niche variants.\n                 let niche_llty = bx.cx().immediate_backend_type(tag.layout);\n@@ -302,7 +302,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                 bx.select(\n                     is_niche,\n                     niche_discr,\n-                    bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64),\n+                    bx.cx().const_uint(cast_to, untagged_variant.as_u32() as u64),\n                 )\n             }\n         }\n@@ -337,11 +337,11 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             }\n             Variants::Multiple {\n                 tag_encoding:\n-                    TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },\n+                    TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start },\n                 tag_field,\n                 ..\n             } => {\n-                if variant_index != dataful_variant {\n+                if variant_index != untagged_variant {\n                     let niche = self.project_field(bx, tag_field);\n                     let niche_llty = bx.cx().immediate_backend_type(niche.layout);\n                     let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();"}, {"sha": "efa33e1851084eec8ad4696844a8b2c0a3acc831", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -718,7 +718,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Return the cast value, and the index.\n                 (discr_val, index.0)\n             }\n-            TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+            TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start } => {\n                 let tag_val = tag_val.to_scalar();\n                 // Compute the variant this niche value/\"tag\" corresponds to. With niche layout,\n                 // discriminant (encoded in niche/tag) and variant index are the same.\n@@ -736,7 +736,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if !ptr_valid {\n                             throw_ub!(InvalidTag(dbg_val))\n                         }\n-                        dataful_variant\n+                        untagged_variant\n                     }\n                     Ok(tag_bits) => {\n                         let tag_bits = tag_bits.assert_bits(tag_layout.size);\n@@ -766,7 +766,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             assert!(usize::try_from(variant_index).unwrap() < variants_len);\n                             VariantIdx::from_u32(variant_index)\n                         } else {\n-                            dataful_variant\n+                            untagged_variant\n                         }\n                     }\n                 };"}, {"sha": "81b0b5a7459827e54c02c1042004fa3b18f5ac62", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -817,15 +817,15 @@ where\n             }\n             abi::Variants::Multiple {\n                 tag_encoding:\n-                    TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },\n+                    TagEncoding::Niche { untagged_variant, ref niche_variants, niche_start },\n                 tag: tag_layout,\n                 tag_field,\n                 ..\n             } => {\n                 // No need to validate that the discriminant here because the\n                 // `TyAndLayout::for_variant()` call earlier already checks the variant is valid.\n \n-                if variant_index != dataful_variant {\n+                if variant_index != untagged_variant {\n                     let variants_start = niche_variants.start().as_u32();\n                     let variant_index_relative = variant_index\n                         .as_u32()"}, {"sha": "0a5463a021fec7ae25eae8d26f613bad4fbb33e9", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -1047,7 +1047,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 assert!(def.is_enum());\n \n                 // The current code for niche-filling relies on variant indices\n-                // instead of actual discriminants, so dataful enums with\n+                // instead of actual discriminants, so untagged enums with\n                 // explicit discriminants (RFC #2363) would misbehave.\n                 let no_explicit_discriminants = def\n                     .variants()\n@@ -1058,7 +1058,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 // Niche-filling enum optimization.\n                 if !def.repr().inhibit_enum_layout_opt() && no_explicit_discriminants {\n-                    let mut dataful_variant = None;\n+                    let mut untagged_variant = None;\n                     let mut niche_variants = VariantIdx::MAX..=VariantIdx::new(0);\n \n                     // Find one non-ZST variant.\n@@ -1068,11 +1068,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         }\n                         for f in fields {\n                             if !f.is_zst() {\n-                                if dataful_variant.is_none() {\n-                                    dataful_variant = Some(v);\n+                                if untagged_variant.is_none() {\n+                                    untagged_variant = Some(v);\n                                     continue 'variants;\n                                 } else {\n-                                    dataful_variant = None;\n+                                    untagged_variant = None;\n                                     break 'variants;\n                                 }\n                             }\n@@ -1081,10 +1081,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n \n                     if niche_variants.start() > niche_variants.end() {\n-                        dataful_variant = None;\n+                        untagged_variant = None;\n                     }\n \n-                    if let Some(i) = dataful_variant {\n+                    if let Some(i) = untagged_variant {\n                         let count = (niche_variants.end().as_u32()\n                             - niche_variants.start().as_u32()\n                             + 1) as u128;\n@@ -1152,7 +1152,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 variants: Variants::Multiple {\n                                     tag: niche_scalar,\n                                     tag_encoding: TagEncoding::Niche {\n-                                        dataful_variant: i,\n+                                        untagged_variant: i,\n                                         niche_variants,\n                                         niche_start,\n                                     },\n@@ -2559,11 +2559,11 @@ where\n                     // using more niches than just null (e.g., the first page of\n                     // the address space, or unaligned pointers).\n                     Variants::Multiple {\n-                        tag_encoding: TagEncoding::Niche { dataful_variant, .. },\n+                        tag_encoding: TagEncoding::Niche { untagged_variant, .. },\n                         tag_field,\n                         ..\n                     } if this.fields.offset(tag_field) == offset => {\n-                        Some(this.for_variant(cx, dataful_variant))\n+                        Some(this.for_variant(cx, untagged_variant))\n                     }\n                     _ => Some(this),\n                 };"}, {"sha": "bcaf209f84b65dcf6e14ac18c0adbc16595e0e5f", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -1130,7 +1130,7 @@ pub enum TagEncoding {\n \n     /// Niche (values invalid for a type) encoding the discriminant:\n     /// Discriminant and variant index coincide.\n-    /// The variant `dataful_variant` contains a niche at an arbitrary\n+    /// The variant `untagged_variant` contains a niche at an arbitrary\n     /// offset (field `tag_field` of the enum), which for a variant with\n     /// discriminant `d` is set to\n     /// `(d - niche_variants.start).wrapping_add(niche_start)`.\n@@ -1139,7 +1139,7 @@ pub enum TagEncoding {\n     /// `None` has a null pointer for the second tuple field, and\n     /// `Some` is the identity function (with a non-null reference).\n     Niche {\n-        dataful_variant: VariantIdx,\n+        untagged_variant: VariantIdx,\n         niche_variants: RangeInclusive<VariantIdx>,\n         niche_start: u128,\n     },"}, {"sha": "7f1be6f27847c0d7f9632984f56dc384b9792852", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -53,8 +53,8 @@\n // cdb-command: dx niche128_none\n // cdb-check: niche128_none    : None [Type: enum2$<core::option::Option<core::num::nonzero::NonZeroI128> >]\n \n-// cdb-command: dx wrapping_niche128_dataful\n-// cdb-check: wrapping_niche128_dataful : X [Type: enum2$<msvc_pretty_enums::Wrapping128Niche>]\n+// cdb-command: dx wrapping_niche128_untagged\n+// cdb-check: wrapping_niche128_untagged : X [Type: enum2$<msvc_pretty_enums::Wrapping128Niche>]\n // cdb-check:    [+0x[...]] __0              [Type: msvc_pretty_enums::Wrapping128]\n \n // cdb-command: dx wrapping_niche128_none1\n@@ -213,7 +213,7 @@ fn main() {\n     let niche128_some = Some(NonZeroI128::new(123456).unwrap());\n     let niche128_none: Option<NonZeroI128> = None;\n \n-    let wrapping_niche128_dataful =\n+    let wrapping_niche128_untagged =\n         unsafe { Wrapping128Niche::X(Wrapping128(340282366920938463463374607431768211454)) };\n     let wrapping_niche128_none1 = Wrapping128Niche::Y;\n     let wrapping_niche128_none2 = Wrapping128Niche::Z;"}, {"sha": "bfabe2d12f7ffcc8a73d1c3c27aec08efc91be15", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -411,7 +411,7 @@ error: layout_of(NicheFirst) = Layout {\n                    valid_range: 0..=4,\n                },\n                tag_encoding: Niche {\n-                   dataful_variant: 0,\n+                   untagged_variant: 0,\n                    niche_variants: 1..=2,\n                    niche_start: 3,\n                },\n@@ -555,7 +555,7 @@ error: layout_of(NicheSecond) = Layout {\n                    valid_range: 0..=4,\n                },\n                tag_encoding: Niche {\n-                   dataful_variant: 0,\n+                   untagged_variant: 0,\n                    niche_variants: 1..=2,\n                    niche_start: 3,\n                },"}, {"sha": "a3e82070e0f529cd8287ba75c8e7454a41063856", "filename": "src/test/ui/layout/zero-sized-array-enum-niche.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b96a0bb7c170130144214787b4a46aa5eb17/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b96a0bb7c170130144214787b4a46aa5eb17/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr?ref=1a08b96a0bb7c170130144214787b4a46aa5eb17", "patch": "@@ -353,7 +353,7 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n                    valid_range: 0..=1,\n                },\n                tag_encoding: Niche {\n-                   dataful_variant: 1,\n+                   untagged_variant: 1,\n                    niche_variants: 0..=0,\n                    niche_start: 1,\n                },"}]}