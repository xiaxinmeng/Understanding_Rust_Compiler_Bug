{"sha": "afba69461a7a092753e1458b77fafcb30e016499", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYmE2OTQ2MWE3YTA5Mjc1M2UxNDU4Yjc3ZmFmY2IzMGUwMTY0OTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-16T10:31:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-24T09:34:58Z"}, "message": "move def-id to rustc crate", "tree": {"sha": "736c51dfc2fa63e6569437d028c702ab94978603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/736c51dfc2fa63e6569437d028c702ab94978603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afba69461a7a092753e1458b77fafcb30e016499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afba69461a7a092753e1458b77fafcb30e016499", "html_url": "https://github.com/rust-lang/rust/commit/afba69461a7a092753e1458b77fafcb30e016499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afba69461a7a092753e1458b77fafcb30e016499/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "html_url": "https://github.com/rust-lang/rust/commit/63ba780fd7ab506bfd0f92d34a39172b412cfbe1"}], "stats": {"total": 95, "additions": 57, "deletions": 38}, "files": [{"sha": "07ca6129505a6ceb9210016a213702726846205e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=afba69461a7a092753e1458b77fafcb30e016499", "patch": "@@ -118,6 +118,7 @@ pub mod middle {\n     pub mod dataflow;\n     pub mod dead;\n     pub mod def;\n+    pub mod def_id;\n     pub mod dependency_format;\n     pub mod effect;\n     pub mod entry;"}, {"sha": "b91ccc2f782204529814296c9ac75a598b675a4a", "filename": "src/librustc/middle/def_id.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibrustc%2Fmiddle%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibrustc%2Fmiddle%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef_id.rs?ref=afba69461a7a092753e1458b77fafcb30e016499", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use syntax::ast::{CrateNum, NodeId};\n+use std::cell::Cell;\n+use std::fmt;\n+\n+#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n+           RustcDecodable, Hash, Copy)]\n+pub struct DefId {\n+    pub krate: CrateNum,\n+    pub node: NodeId,\n+}\n+\n+fn default_def_id_debug(_: DefId, _: &mut fmt::Formatter) -> fmt::Result { Ok(()) }\n+\n+thread_local!(pub static DEF_ID_DEBUG: Cell<fn(DefId, &mut fmt::Formatter) -> fmt::Result> =\n+                Cell::new(default_def_id_debug));\n+\n+impl fmt::Debug for DefId {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"DefId {{ krate: {}, node: {} }}\",\n+                    self.krate, self.node));\n+        DEF_ID_DEBUG.with(|def_id_debug| def_id_debug.get()(*self, f))\n+    }\n+}\n+\n+impl DefId {\n+    pub fn local(id: NodeId) -> DefId {\n+        DefId { krate: LOCAL_CRATE, node: id }\n+    }\n+\n+    /// Read the node id, asserting that this def-id is krate-local.\n+    pub fn local_id(&self) -> NodeId {\n+        assert_eq!(self.krate, LOCAL_CRATE);\n+        self.node\n+    }\n+\n+    pub fn is_local(&self) -> bool {\n+        self.krate == LOCAL_CRATE\n+    }\n+}\n+\n+\n+/// Item definitions in the currently-compiled crate would have the CrateNum\n+/// LOCAL_CRATE in their DefId.\n+pub const LOCAL_CRATE: CrateNum = 0;\n+"}, {"sha": "66faa1227e6d6914707513d6dc5168c101fd17b1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=afba69461a7a092753e1458b77fafcb30e016499", "patch": "@@ -65,7 +65,6 @@ use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use print::pprust;\n use ptr::P;\n \n-use std::cell::Cell;\n use std::fmt;\n use std::rc::Rc;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -371,37 +370,7 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n-           RustcDecodable, Hash, Copy)]\n-pub struct DefId {\n-    pub krate: CrateNum,\n-    pub node: NodeId,\n-}\n-\n-fn default_def_id_debug(_: DefId, _: &mut fmt::Formatter) -> fmt::Result { Ok(()) }\n-\n-thread_local!(pub static DEF_ID_DEBUG: Cell<fn(DefId, &mut fmt::Formatter) -> fmt::Result> =\n-                Cell::new(default_def_id_debug));\n-\n-impl fmt::Debug for DefId {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"DefId {{ krate: {}, node: {} }}\",\n-                    self.krate, self.node));\n-        DEF_ID_DEBUG.with(|def_id_debug| def_id_debug.get()(*self, f))\n-    }\n-}\n-\n-impl DefId {\n-    /// Read the node id, asserting that this def-id is krate-local.\n-    pub fn local_id(&self) -> NodeId {\n-        assert_eq!(self.krate, LOCAL_CRATE);\n-        self.node\n-    }\n-}\n-\n-/// Item definitions in the currently-compiled crate would have the CrateNum\n-/// LOCAL_CRATE in their DefId.\n-pub const LOCAL_CRATE: CrateNum = 0;\n+/// Node id used to represent the root of the crate.\n pub const CRATE_NODE_ID: NodeId = 0;\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST"}, {"sha": "45a41edae6c3744fe31ff38912168b5e520657a3", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afba69461a7a092753e1458b77fafcb30e016499/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=afba69461a7a092753e1458b77fafcb30e016499", "patch": "@@ -28,12 +28,6 @@ pub fn path_name_i(idents: &[Ident]) -> String {\n     idents.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(\"::\")\n }\n \n-pub fn local_def(id: NodeId) -> DefId {\n-    ast::DefId { krate: LOCAL_CRATE, node: id }\n-}\n-\n-pub fn is_local(did: ast::DefId) -> bool { did.krate == LOCAL_CRATE }\n-\n pub fn stmt_id(s: &Stmt) -> NodeId {\n     match s.node {\n       StmtDecl(_, id) => id,"}]}