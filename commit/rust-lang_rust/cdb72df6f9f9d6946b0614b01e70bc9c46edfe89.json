{"sha": "cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjcyZGY2ZjlmOWQ2OTQ2YjA2MTRiMDFlNzBiYzljNDZlZGZlODk=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-09-26T06:39:39Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Split lint suggestion into two", "tree": {"sha": "a85bfc6d23aa9910c55d38d4ef5d8aab49a4738f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a85bfc6d23aa9910c55d38d4ef5d8aab49a4738f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "html_url": "https://github.com/rust-lang/rust/commit/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "html_url": "https://github.com/rust-lang/rust/commit/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "3ddf921a04b949c1e3bff129c6ac5ead9cf563b3", "filename": "clippy_lints/src/unnecessary_wrap.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wrap.rs?ref=cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "patch": "@@ -68,10 +68,10 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n             }\n         }\n \n-        let path = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n-            &paths::OPTION_SOME\n+        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n+            (\"Option\", &paths::OPTION_SOME)\n         } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n-            &paths::RESULT_OK\n+            (\"Result\", &paths::RESULT_OK)\n         } else {\n             return;\n         };\n@@ -98,23 +98,26 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n                 UNNECESSARY_WRAP,\n                 span,\n                 \"this function returns unnecessarily wrapping data\",\n-                move |diag| {\n+                |diag| {\n+                    let inner_ty = return_ty(cx, hir_id)\n+                        .walk()\n+                        .skip(1) // skip `std::option::Option` or `std::result::Result`\n+                        .take(1) // take the first outermost inner type\n+                        .filter_map(|inner| match inner.unpack() {\n+                            GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n+                            _ => None,\n+                        });\n+                    inner_ty.for_each(|inner_ty| {\n+                        diag.span_suggestion(\n+                            fn_decl.output.span(),\n+                            format!(\"remove `{}` from the return type...\", return_type).as_str(),\n+                            inner_ty,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n                     diag.multipart_suggestion(\n-                        \"factor this out to\",\n-                        suggs\n-                            .into_iter()\n-                            .chain({\n-                                let inner_ty = return_ty(cx, hir_id)\n-                                    .walk()\n-                                    .skip(1) // skip `std::option::Option` or `std::result::Result`\n-                                    .take(1) // take the first outermost inner type\n-                                    .filter_map(|inner| match inner.unpack() {\n-                                        GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n-                                        _ => None,\n-                                    });\n-                                inner_ty.map(|inner_ty| (fn_decl.output.span(), inner_ty))\n-                            })\n-                            .collect(),\n+                        \"...and change the returning expressions\",\n+                        suggs,\n                         Applicability::MachineApplicable,\n                     );\n                 },"}, {"sha": "7833ee4b213a0ef40e0b2f9ffe4780d9fe2bf214", "filename": "tests/ui/unnecessary_wrap.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89/tests%2Fui%2Funnecessary_wrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89/tests%2Fui%2Funnecessary_wrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.stderr?ref=cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "patch": "@@ -11,14 +11,18 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::unnecessary-wrap` implied by `-D warnings`\n-help: factor this out to\n+help: remove `Option` from the return type...\n    |\n LL | fn func1(a: bool, b: bool) -> i32 {\n-LL |     if a && b {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n LL |         return 42;\n LL |     }\n LL |     if a {\n LL |         Some(-1);\n+LL |         2\n+LL |     } else {\n  ...\n \n error: this function returns unnecessarily wrapping data\n@@ -29,9 +33,12 @@ LL | |     Some(1)\n LL | | }\n    | |_^\n    |\n-help: factor this out to\n+help: remove `Option` from the return type...\n    |\n LL | fn func4() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n LL |     1\n    |\n \n@@ -43,9 +50,12 @@ LL | |     Ok(1)\n LL | | }\n    | |_^\n    |\n-help: factor this out to\n+help: remove `Result` from the return type...\n    |\n LL | fn func6() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n LL |     1\n    |\n "}]}