{"sha": "9c408970eaff9c1b993903e5dea9f2558edfc013", "node_id": "C_kwDOAAsO6NoAKDljNDA4OTcwZWFmZjljMWI5OTM5MDNlNWRlYTlmMjU1OGVkZmMwMTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-18T12:27:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-18T12:27:01Z"}, "message": "Deduplicate loaded projects", "tree": {"sha": "5d79bff2c5fe5785ce5b656d3aa80ad2e1494eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d79bff2c5fe5785ce5b656d3aa80ad2e1494eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c408970eaff9c1b993903e5dea9f2558edfc013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c408970eaff9c1b993903e5dea9f2558edfc013", "html_url": "https://github.com/rust-lang/rust/commit/9c408970eaff9c1b993903e5dea9f2558edfc013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c408970eaff9c1b993903e5dea9f2558edfc013/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121", "html_url": "https://github.com/rust-lang/rust/commit/f5f68e4dc73ba37eaa057b6b7e476b4bc4a06121"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "31651c3c26958700b948ea6efa29e9e8804a7ff5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9c408970eaff9c1b993903e5dea9f2558edfc013/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c408970eaff9c1b993903e5dea9f2558edfc013/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9c408970eaff9c1b993903e5dea9f2558edfc013", "patch": "@@ -535,7 +535,7 @@ impl Default for ConfigData {\n \n #[derive(Debug, Clone)]\n pub struct Config {\n-    discovered_projects: Option<Vec<ProjectManifest>>,\n+    discovered_projects: Vec<ProjectManifest>,\n     /// The workspace roots as registered by the LSP client\n     workspace_roots: Vec<AbsPathBuf>,\n     caps: lsp_types::ClientCapabilities,\n@@ -743,7 +743,7 @@ impl Config {\n             caps,\n             data: ConfigData::default(),\n             detached_files: Vec::new(),\n-            discovered_projects: None,\n+            discovered_projects: Vec::new(),\n             root_path,\n             snippets: Default::default(),\n             workspace_roots,\n@@ -756,7 +756,7 @@ impl Config {\n         if discovered.is_empty() {\n             tracing::error!(\"failed to find any projects in {:?}\", &self.workspace_roots);\n         }\n-        self.discovered_projects = Some(discovered);\n+        self.discovered_projects = discovered;\n     }\n \n     pub fn remove_workspace(&mut self, path: &AbsPath) {\n@@ -871,25 +871,19 @@ impl Config {\n     pub fn linked_projects(&self) -> Vec<LinkedProject> {\n         match self.data.linkedProjects.as_slice() {\n             [] => {\n-                match self.discovered_projects.as_ref() {\n-                    Some(discovered_projects) => {\n-                        let exclude_dirs: Vec<_> = self\n-                            .data\n-                            .files_excludeDirs\n-                            .iter()\n-                            .map(|p| self.root_path.join(p))\n-                            .collect();\n-                        discovered_projects\n-                        .iter()\n-                        .filter(|(ProjectManifest::ProjectJson(path) | ProjectManifest::CargoToml(path))| {\n+                let exclude_dirs: Vec<_> =\n+                    self.data.files_excludeDirs.iter().map(|p| self.root_path.join(p)).collect();\n+                self.discovered_projects\n+                    .iter()\n+                    .filter(\n+                        |(ProjectManifest::ProjectJson(path)\n+                         | ProjectManifest::CargoToml(path))| {\n                             !exclude_dirs.iter().any(|p| path.starts_with(p))\n-                        })\n-                        .cloned()\n-                        .map(LinkedProject::from)\n-                        .collect()\n-                    }\n-                    None => Vec::new(),\n-                }\n+                        },\n+                    )\n+                    .cloned()\n+                    .map(LinkedProject::from)\n+                    .collect()\n             }\n             linked_projects => linked_projects\n                 .iter()"}, {"sha": "1c5de2f596a30f0e184c553efa7e7cba29491a66", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c408970eaff9c1b993903e5dea9f2558edfc013/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c408970eaff9c1b993903e5dea9f2558edfc013/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=9c408970eaff9c1b993903e5dea9f2558edfc013", "patch": "@@ -212,6 +212,20 @@ impl GlobalState {\n                     })\n                     .collect::<Vec<_>>();\n \n+                let mut i = 0;\n+                while i < workspaces.len() {\n+                    if let Ok(w) = &workspaces[i] {\n+                        if let Some(dupe) = workspaces[i + 1..]\n+                            .iter()\n+                            .filter_map(|it| it.as_ref().ok())\n+                            .position(|ws| ws.eq_ignore_build_data(w))\n+                        {\n+                            _ = workspaces.remove(dupe);\n+                        }\n+                    }\n+                    i += 1;\n+                }\n+\n                 if !detached_files.is_empty() {\n                     workspaces.push(project_model::ProjectWorkspace::load_detached_files(\n                         detached_files,"}, {"sha": "d0eeee189c51c56dd51aed3df1d66c3157fbe969", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c408970eaff9c1b993903e5dea9f2558edfc013/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c408970eaff9c1b993903e5dea9f2558edfc013/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=9c408970eaff9c1b993903e5dea9f2558edfc013", "patch": "@@ -9,7 +9,6 @@ use std::{\n use crossbeam_channel::{after, select, Receiver};\n use lsp_server::{Connection, Message, Notification, Request};\n use lsp_types::{notification::Exit, request::Shutdown, TextDocumentIdentifier, Url};\n-use project_model::ProjectManifest;\n use rust_analyzer::{config::Config, lsp_ext, main_loop};\n use serde::Serialize;\n use serde_json::{json, to_string_pretty, Value};"}]}