{"sha": "962e45144390d3f8b7482d5dfbc3d739881f514e", "node_id": "C_kwDOAAsO6NoAKDk2MmU0NTE0NDM5MGQzZjhiNzQ4MmQ1ZGZiYzNkNzM5ODgxZjUxNGU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-29T03:46:53Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-02T22:57:57Z"}, "message": "Replace all uses of `path.res.def_id()` with `path.def_id()`", "tree": {"sha": "0c335cc133ee22a6a22f99dd0a9cbc5504365f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c335cc133ee22a6a22f99dd0a9cbc5504365f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/962e45144390d3f8b7482d5dfbc3d739881f514e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/962e45144390d3f8b7482d5dfbc3d739881f514e", "html_url": "https://github.com/rust-lang/rust/commit/962e45144390d3f8b7482d5dfbc3d739881f514e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/962e45144390d3f8b7482d5dfbc3d739881f514e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b52e1951622062ce26a185dca58a8b472b4ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b52e1951622062ce26a185dca58a8b472b4ec8", "html_url": "https://github.com/rust-lang/rust/commit/82b52e1951622062ce26a185dca58a8b472b4ec8"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "e771714ed61191c3072ca42e953afd7c2e760b2d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -691,7 +691,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n     fn is_fn_trait(&self, path: &Path) -> bool {\n         let tcx = self.cx.tcx;\n-        let did = path.res.def_id();\n+        let did = path.def_id();\n         did == tcx.require_lang_item(LangItem::Fn, None)\n             || did == tcx.require_lang_item(LangItem::FnMut, None)\n             || did == tcx.require_lang_item(LangItem::FnOnce, None)"}, {"sha": "ebf61fd104843992e273e2de529790d3f7f5e916", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -454,7 +454,7 @@ crate fn build_impl(\n     // Return if the trait itself or any types of the generic parameters are doc(hidden).\n     let mut stack: Vec<&Type> = vec![&for_];\n \n-    if let Some(did) = trait_.as_ref().map(|t| t.res.def_id()) {\n+    if let Some(did) = trait_.as_ref().map(|t| t.def_id()) {\n         if tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n             return;\n         }\n@@ -474,7 +474,7 @@ crate fn build_impl(\n         }\n     }\n \n-    if let Some(did) = trait_.as_ref().map(|t| t.res.def_id()) {\n+    if let Some(did) = trait_.as_ref().map(|t| t.def_id()) {\n         record_extern_trait(cx, did);\n     }\n \n@@ -628,7 +628,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n             } if *s == kw::SelfUpper => {\n                 bounds.retain(|bound| match bound {\n                     clean::GenericBound::TraitBound(clean::PolyTrait { trait_, .. }, _) => {\n-                        trait_.res.def_id() != trait_did\n+                        trait_.def_id() != trait_did\n                     }\n                     _ => true,\n                 });\n@@ -642,7 +642,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n             ty: clean::QPath { self_type: box clean::Generic(ref s), trait_, name: _, .. },\n             bounds,\n             ..\n-        } => !(bounds.is_empty() || *s == kw::SelfUpper && trait_.res.def_id() == trait_did),\n+        } => !(bounds.is_empty() || *s == kw::SelfUpper && trait_.def_id() == trait_did),\n         _ => true,\n     });\n     g"}, {"sha": "9451664674b59958e7784be126d95d81fe8701ac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -1100,7 +1100,7 @@ impl Clean<Item> for ty::AssocItem {\n                             if *name != my_name {\n                                 return None;\n                             }\n-                            if trait_.res.def_id() != self.container.id() {\n+                            if trait_.def_id() != self.container.id() {\n                                 return None;\n                             }\n                             match **self_type {"}, {"sha": "4c81e75e8d6304b49b8055d90f75fcb0a7c98c4a", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -102,7 +102,7 @@ crate fn merge_bounds(\n         // If this QPath's trait `trait_did` is the same as, or a supertrait\n         // of, the bound's trait `did` then we can keep going, otherwise\n         // this is just a plain old equality bound.\n-        if !trait_is_same_or_supertrait(cx, trait_ref.trait_.res.def_id(), trait_did) {\n+        if !trait_is_same_or_supertrait(cx, trait_ref.trait_.def_id(), trait_did) {\n             return false;\n         }\n         let last = trait_ref.trait_.segments.last_mut().expect(\"segments were empty\");"}, {"sha": "d259ed3cdfa7e788dbf5820e0830eef64754a110", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -1499,13 +1499,13 @@ impl Type {\n             QPath { self_type, trait_, name, .. } => (self_type, trait_, name),\n             _ => return None,\n         };\n-        Some((&self_, trait_.res.def_id(), *name))\n+        Some((&self_, trait_.def_id(), *name))\n     }\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n             ResolvedPath { did, .. } => return Some(did),\n-            DynTrait(ref bounds, _) => return Some(bounds[0].trait_.res.def_id()),\n+            DynTrait(ref bounds, _) => return Some(bounds[0].trait_.def_id()),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,\n             BorrowedRef { ref type_, .. } => return type_.inner_def_id(cache),"}, {"sha": "9cd10481ef03d5c58349646ad41eaed2532bd625", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -914,7 +914,7 @@ fn fmt_type<'cx>(\n         clean::QPath { ref name, ref self_type, ref trait_, ref self_def_id } => {\n             let should_show_cast = !trait_.segments.is_empty()\n                 && self_def_id\n-                    .zip(Some(trait_.res.def_id()))\n+                    .zip(Some(trait_.def_id()))\n                     .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_);\n             if f.alternate() {\n                 if should_show_cast {\n@@ -939,7 +939,7 @@ fn fmt_type<'cx>(\n             //        the ugliness comes from inlining across crates where\n             //        everything comes in as a fully resolved QPath (hard to\n             //        look at).\n-            match href(trait_.res.def_id(), cx) {\n+            match href(trait_.def_id(), cx) {\n                 Ok((ref url, _, ref path)) if !f.alternate() => {\n                     write!(\n                         f,\n@@ -972,7 +972,7 @@ impl clean::Path {\n         &'a self,\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'b + Captures<'tcx> {\n-        display_fn(move |f| resolved_path(f, self.res.def_id(), self, false, false, cx))\n+        display_fn(move |f| resolved_path(f, self.def_id(), self, false, false, cx))\n     }\n }\n "}, {"sha": "9c05c80d55dfea35a5b8c820657ec6950d6a1394", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -322,7 +322,7 @@ crate fn get_real_types<'tcx>(\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n                 if let Some(path) = bound.get_trait_path() {\n-                    let ty = Type::ResolvedPath { did: path.res.def_id(), path };\n+                    let ty = Type::ResolvedPath { did: path.def_id(), path };\n                     let adds = get_real_types(generics, &ty, tcx, recurse + 1, res);\n                     nb_added += adds;\n                     if adds == 0 && !ty.is_full_generic() {"}, {"sha": "6b213da50a79c510522f45ae83b923dbc8c4b598", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -2389,7 +2389,7 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n             }\n             clean::Type::QPath { self_type, trait_, .. } => {\n                 work.push_back(*self_type);\n-                process_path(trait_.res.def_id());\n+                process_path(trait_.def_id());\n             }\n             _ => {}\n         }"}, {"sha": "1f2479a302f958a2e1d1ae10f42352b05382e1e8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -365,7 +365,7 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n             TraitBound(clean::PolyTrait { trait_, generic_params }, modifier) => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n                 let trait_ =\n-                    clean::ResolvedPath { did: trait_.res.def_id(), path: trait_ }.into_tcx(tcx);\n+                    clean::ResolvedPath { did: trait_.def_id(), path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n                     trait_,\n                     generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n@@ -401,7 +401,7 @@ impl FromWithTcx<clean::Type> for Type {\n \n                 Type::ResolvedPath {\n                     name: first_trait.whole_name(),\n-                    id: from_item_id(first_trait.res.def_id().into()),\n+                    id: from_item_id(first_trait.def_id().into()),\n                     args: first_trait\n                         .segments\n                         .last()\n@@ -436,7 +436,7 @@ impl FromWithTcx<clean::Type> for Type {\n             },\n             QPath { name, self_type, trait_, .. } => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = ResolvedPath { did: trait_.res.def_id(), path: trait_ }.into_tcx(tcx);\n+                let trait_ = ResolvedPath { did: trait_.def_id(), path: trait_ }.into_tcx(tcx);\n                 Type::QualifiedPath {\n                     name: name.to_string(),\n                     self_type: Box::new((*self_type).into_tcx(tcx)),\n@@ -513,7 +513,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| {\n-            let did = path.res.def_id();\n+            let did = path.def_id();\n             clean::ResolvedPath { path, did }.into_tcx(tcx)\n         });\n         Impl {"}, {"sha": "319dd7b42b0ee69cb4d2d23d656f79188977aa82", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e45144390d3f8b7482d5dfbc3d739881f514e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=962e45144390d3f8b7482d5dfbc3d739881f514e", "patch": "@@ -82,7 +82,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n             cleaner.keep_impl(for_)\n                 || trait_\n                     .as_ref()\n-                    .map_or(false, |t| cleaner.keep_impl_with_def_id(t.res.def_id().into()))\n+                    .map_or(false, |t| cleaner.keep_impl_with_def_id(t.def_id().into()))\n                 || blanket_impl.is_some()\n         } else {\n             true"}]}