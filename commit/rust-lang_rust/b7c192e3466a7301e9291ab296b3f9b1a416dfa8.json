{"sha": "b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "node_id": "C_kwDOAAsO6NoAKGI3YzE5MmUzNDY2YTczMDFlOTI5MWFiMjk2YjNmOWIxYTQxNmRmYTg", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T04:39:32Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:27Z"}, "message": "Use revisions for NLL in hrtb", "tree": {"sha": "e3bdad0d6198597716a517ff542aa404ca9b33f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3bdad0d6198597716a517ff542aa404ca9b33f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "html_url": "https://github.com/rust-lang/rust/commit/b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16bd7c3e27c655d9aeb645743dbe7ce25d567f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16bd7c3e27c655d9aeb645743dbe7ce25d567f4", "html_url": "https://github.com/rust-lang/rust/commit/b16bd7c3e27c655d9aeb645743dbe7ce25d567f4"}], "stats": {"total": 166, "additions": 95, "deletions": 71}, "files": [{"sha": "e55e56f916bad2a549b4f73efab9eff7a8c615ac", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:31:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr"}, {"sha": "61b549b9cd7612dfd312a355fea4cee2df71322c", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:31:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL | fn b() { want_foo2::<SomeStruct>(); }\n    = note: ...but it actually implements `Foo<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:31:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "11285d0757530e174e9fd21e9da0d1bae030297c", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test that an impl with only one bound region `'a` cannot be used to\n // satisfy a constraint where there are two bound regions.\n \n@@ -24,6 +28,9 @@ impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n }\n \n fn a() { want_foo1::<SomeStruct>(); } // OK -- foo wants just one region\n-fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n+fn b() { want_foo2::<SomeStruct>(); }\n+//[base]~^ ERROR\n+//[nll]~^^ ERROR implementation of\n+//[nll]~| ERROR implementation of\n \n fn main() { }"}, {"sha": "006b6756b1eb5b1a4b9357f4c5eabae52e0451ca", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:38:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr"}, {"sha": "23b5072826418aaa509ac7ab46f439b898e258f0", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:38:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^^^ implementation of `Trait` is not general enough"}, {"sha": "4b33dcb2cab4cfc29d066e3249c7bc27ccb2427a", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test a case where variance and higher-ranked types interact in surprising ways.\n //\n // In particular, we test this pattern in trait solving, where it is not connected"}, {"sha": "05575b01834b78335a5359b69ef77738660d0f7e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:32:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^ implementation of `Trait` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr"}, {"sha": "58d59f60379f73aaf6a6ebcdec1e07ebef00690a", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:32:5\n    |\n LL |     foo::<()>();\n    |     ^^^^^^^^^^^ implementation of `Trait` is not general enough"}, {"sha": "c779bc3f46c333968999662475b12bff7f9d7b23", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test an `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n //\n // In particular, we test this pattern in trait solving, where it is not connected"}, {"sha": "6e20b100664670d1757e8099457b9b85a1906f97", "filename": "src/test/ui/hrtb/hrtb-just-for-static.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:28:5\n    |\n LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     want_hrtb::<StaticInt>()\n    = note: ...but it actually implements `Foo<&'static isize>`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:34:5\n    |\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr"}, {"sha": "090bd9f68ad1bcbbe8fc1325d116d907dcde1439", "filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:28:5\n    |\n LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,15 +8,15 @@ LL |     want_hrtb::<StaticInt>()\n    = note: ...but it actually implements `Foo<&'static isize>`\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:34:5\n    |\n LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:34:5\n    |\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "dc70609c1684130bd78ec45f49f5c0c80ce57fee", "filename": "src/test/ui/hrtb/hrtb-just-for-static.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test a case where you have an impl of `Foo<X>` for all `X` that\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n@@ -27,7 +31,10 @@ fn give_static() {\n // AnyInt implements Foo<&'a isize> for any 'a, so it is a match.\n impl<'a> Foo<&'a isize> for &'a u32 { }\n fn give_some<'a>() {\n-    want_hrtb::<&'a u32>() //~ ERROR\n+    want_hrtb::<&'a u32>()\n+    //[base]~^ ERROR\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR implementation of `Foo` is not general enough\n }\n \n fn main() { }"}, {"sha": "678a1137cd678930cb5e82daa513a8214bb32251", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n@@ -8,7 +8,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = note: ...but it actually implements `Bar<&'b isize>`\n \n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough", "previous_filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr"}, {"sha": "3643ce62d40b74068afc42010301b4d767dedacc", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:16:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:20:1\n    |\n LL | / fn no_hrtb<'b, T>(mut t: T)\n LL | | where\n@@ -15,7 +15,7 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:25:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:29:1\n    |\n LL | / fn bar_hrtb<T>(mut t: T)\n LL | | where\n@@ -30,7 +30,7 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:35:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n    |\n LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n LL | | where\n@@ -39,15 +39,15 @@ LL | | {\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n-LL | |\n+...  |\n LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n    |                     -- lifetime `'b` defined here\n@@ -56,7 +56,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: implementation of `Bar` is not general enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:47:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n@@ -65,7 +65,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:48:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:53:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n LL | | where"}, {"sha": "2db9f661cf41c52d29bc2d8f1bac75f5a1af808c", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test a case where you have an impl of `Foo<X>` for all `X` that\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n@@ -13,7 +17,7 @@ impl<'a, X, F> Foo<X> for &'a mut F where F: Foo<X> + Bar<X> {}\n \n impl<'a, X, F> Bar<X> for &'a mut F where F: Bar<X> {}\n \n-fn no_hrtb<'b, T>(mut t: T)\n+fn no_hrtb<'b, T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: Bar<&'b isize>,\n {\n@@ -22,7 +26,7 @@ where\n     no_hrtb(&mut t);\n }\n \n-fn bar_hrtb<T>(mut t: T)\n+fn bar_hrtb<T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: for<'b> Bar<&'b isize>,\n {\n@@ -32,7 +36,7 @@ where\n     bar_hrtb(&mut t);\n }\n \n-fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+fn foo_hrtb_bar_not<'b, T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n {\n@@ -42,10 +46,11 @@ where\n     // clause only specifies `T : Bar<&'b isize>`.\n     foo_hrtb_bar_not(&mut t);\n     //~^ ERROR implementation of `Bar` is not general enough\n-    //~| ERROR implementation of `Bar` is not general enough\n+    //[base]~^^ ERROR implementation of `Bar` is not general enough\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n }\n \n-fn foo_hrtb_bar_hrtb<T>(mut t: T)\n+fn foo_hrtb_bar_hrtb<T>(mut t: T) //[nll]~ WARN function cannot return\n where\n     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n {"}, {"sha": "dba3911d99c17769ff4c588853bb7856ca3a73dd", "filename": "src/test/ui/hrtb/issue-30786.base.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:127:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:122:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,13 +8,13 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n@@ -23,8 +23,8 @@ help: one of the expressions' fields has a method of the same name\n LL |     let filter = map.stream.filterx(|x: &_| true);\n    |                      +++++++\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:140:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:134:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -33,13 +33,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here", "previous_filename": "src/test/ui/hrtb/issue-30786.migrate.stderr"}, {"sha": "dba3911d99c17769ff4c588853bb7856ca3a73dd", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:127:22\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:122:22\n    |\n LL | pub struct Map<S, F> {\n    | --------------------\n@@ -8,13 +8,13 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>` due to unsatisfied trait bounds\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:126:27: 126:36]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+      `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:121:27: 121:36]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n@@ -23,8 +23,8 @@ help: one of the expressions' fields has a method of the same name\n LL |     let filter = map.stream.filterx(|x: &_| true);\n    |                      +++++++\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-30786.rs:140:24\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-30786.rs:134:24\n    |\n LL | pub struct Filter<S, F> {\n    | -----------------------\n@@ -33,13 +33,13 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>` due to unsatisfied trait bounds\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>` due to unsatisfied trait bounds\n    |\n note: the following trait bounds were not satisfied:\n-      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:139:30: 139:42]>: Stream`\n-  --> $DIR/issue-30786.rs:105:50\n+      `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut &mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+      `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:133:30: 133:42]>: Stream`\n+  --> $DIR/issue-30786.rs:100:50\n    |\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here"}, {"sha": "c2e019098706ed91d1ee6b09f922007764fabe99", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // rust-lang/rust#30786: the use of `for<'b> &'b mut A: Stream<Item=T`\n // should act as assertion that item does not borrow from its stream;\n // but an earlier buggy rustc allowed `.map(|x: &_| x)` which does\n@@ -6,15 +10,6 @@\n // This tests double-checks that we do not allow such behavior to leak\n // through again.\n \n-// revisions: migrate nll\n-//[nll]compile-flags: -Z borrowck=mir\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n-\n pub trait Stream {\n     type Item;\n     fn next(self) -> Option<Self::Item>;\n@@ -125,8 +120,7 @@ fn variant1() {\n     // guess.\n     let map = source.mapx(|x: &_| x);\n     let filter = map.filterx(|x: &_| true);\n-    //[migrate]~^ ERROR the method\n-    //[nll]~^^ ERROR the method\n+    //~^ ERROR the method\n }\n \n fn variant2() {\n@@ -138,8 +132,7 @@ fn variant2() {\n     let map = source.mapx(identity);\n     let filter = map.filterx(|x: &_| true);\n     let count = filter.countx();\n-    //[migrate]~^ ERROR the method\n-    //[nll]~^^ ERROR the method\n+    //~^ ERROR the method\n }\n \n fn main() {}"}, {"sha": "d1f6fed10fdde9977c7280ebed7b2e1060c07098", "filename": "src/test/ui/hrtb/issue-46989.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.base.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:38:5\n+  --> $DIR/issue-46989.rs:42:5\n    |\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/hrtb/issue-46989.stderr"}, {"sha": "e1ddd7235f57d3c6b502c1a27faba76c16a4e053", "filename": "src/test/ui/hrtb/issue-46989.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/issue-46989.rs:38:5\n+  --> $DIR/issue-46989.rs:42:5\n    |\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "0bb6d7a18eb75e89a01f99d6286748e3beb65230", "filename": "src/test/ui/hrtb/issue-46989.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c192e3466a7301e9291ab296b3f9b1a416dfa8/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.rs?ref=b7c192e3466a7301e9291ab296b3f9b1a416dfa8", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Regression test for #46989:\n //\n // In the move to universes, this test started passing."}]}