{"sha": "d43ede10e4cc69547d1c05831ca43c9902304573", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0M2VkZTEwZTRjYzY5NTQ3ZDFjMDU4MzFjYTQzYzk5MDIzMDQ1NzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-08T17:16:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-08T17:19:56Z"}, "message": "Use more accurate spans for trait/impl method arg divergence", "tree": {"sha": "5b4339a52e820a954e9606b7095619f4c2d669b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4339a52e820a954e9606b7095619f4c2d669b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43ede10e4cc69547d1c05831ca43c9902304573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43ede10e4cc69547d1c05831ca43c9902304573", "html_url": "https://github.com/rust-lang/rust/commit/d43ede10e4cc69547d1c05831ca43c9902304573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43ede10e4cc69547d1c05831ca43c9902304573/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "010c2368fa33ef08df3080228498db8d2ba5a93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/010c2368fa33ef08df3080228498db8d2ba5a93b", "html_url": "https://github.com/rust-lang/rust/commit/010c2368fa33ef08df3080228498db8d2ba5a93b"}], "stats": {"total": 149, "additions": 53, "deletions": 96}, "files": [{"sha": "008e6d015e879e2068c78cc80dbbe19bf1168b6e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -36,6 +36,7 @@ pub enum TypeError<'tcx> {\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n+    ArgumentMutability(usize),\n     TupleSize(ExpectedFound<usize>),\n     FixedArraySize(ExpectedFound<u64>),\n     ArgCount,\n@@ -46,6 +47,7 @@ pub enum TypeError<'tcx> {\n     RegionsPlaceholderMismatch,\n \n     Sorts(ExpectedFound<Ty<'tcx>>),\n+    ArgumentSorts(ExpectedFound<Ty<'tcx>>, usize),\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n     FloatMismatch(ExpectedFound<ty::FloatTy>),\n     Traits(ExpectedFound<DefId>),\n@@ -110,7 +112,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             AbiMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n             }\n-            Mutability => write!(f, \"types differ in mutability\"),\n+            ArgumentMutability(_) | Mutability => write!(f, \"types differ in mutability\"),\n             TupleSize(values) => write!(\n                 f,\n                 \"expected a tuple with {} element{}, \\\n@@ -142,7 +144,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 br_string(br)\n             ),\n             RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n-            Sorts(values) => ty::tls::with(|tcx| {\n+            ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n                 report_maybe_different(\n                     f,\n                     &values.expected.sort_string(tcx),\n@@ -199,10 +201,11 @@ impl<'tcx> TypeError<'tcx> {\n         use self::TypeError::*;\n         match self {\n             CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_)\n-            | FixedArraySize(_) | Sorts(_) | IntMismatch(_) | FloatMismatch(_)\n-            | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n+            | FixedArraySize(_) | ArgumentSorts(..) | Sorts(_) | IntMismatch(_)\n+            | FloatMismatch(_) | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n \n             Mutability\n+            | ArgumentMutability(_)\n             | TupleSize(_)\n             | ArgCount\n             | RegionsDoesNotOutlive(..)\n@@ -339,7 +342,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         use self::TypeError::*;\n         debug!(\"note_and_explain_type_err err={:?} cause={:?}\", err, cause);\n         match err {\n-            Sorts(values) => {\n+            ArgumentSorts(values, _) | Sorts(values) => {\n                 match (values.expected.kind(), values.found.kind()) {\n                     (ty::Closure(..), ty::Closure(..)) => {\n                         db.note(\"no two closures, even if identical, have the same type\");"}, {"sha": "b6f93c9bd59e79bbe51efb25aefa106fdcea6e10", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -179,6 +179,12 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n                 } else {\n                     relation.relate_with_variance(ty::Contravariant, a, b)\n                 }\n+            })\n+            .enumerate()\n+            .map(|(i, r)| match r {\n+                Err(TypeError::Sorts(exp_found)) => Err(TypeError::ArgumentSorts(exp_found, i)),\n+                Err(TypeError::Mutability) => Err(TypeError::ArgumentMutability(i)),\n+                r => r,\n             });\n         Ok(ty::FnSig {\n             inputs_and_output: tcx.mk_type_list(inputs_and_output)?,"}, {"sha": "7290c41d615dfbb962b3d49f693bb3b2bc85ffcf", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -587,6 +587,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             UnsafetyMismatch(x) => UnsafetyMismatch(x),\n             AbiMismatch(x) => AbiMismatch(x),\n             Mutability => Mutability,\n+            ArgumentMutability(i) => ArgumentMutability(i),\n             TupleSize(x) => TupleSize(x),\n             FixedArraySize(x) => FixedArraySize(x),\n             ArgCount => ArgCount,\n@@ -607,6 +608,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             CyclicTy(t) => return tcx.lift(t).map(|t| CyclicTy(t)),\n             CyclicConst(ct) => return tcx.lift(ct).map(|ct| CyclicConst(ct)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n+            ArgumentSorts(x, i) => return tcx.lift(x).map(|x| ArgumentSorts(x, i)),\n             Sorts(x) => return tcx.lift(x).map(Sorts),\n             ExistentialMismatch(x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(x) => return tcx.lift(x).map(ConstMismatch),"}, {"sha": "3a337dadc88e9d90f920917192c306bee7fe46e7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 21, "deletions": 75, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -278,9 +278,8 @@ fn compare_predicate_entailment<'tcx>(\n         if let Err(terr) = sub_result {\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n \n-            let (impl_err_span, trait_err_span) = extract_spans_for_error_reporting(\n-                &infcx, param_env, &terr, &cause, impl_m, impl_sig, trait_m, trait_sig,\n-            );\n+            let (impl_err_span, trait_err_span) =\n+                extract_spans_for_error_reporting(&infcx, &terr, &cause, impl_m, trait_m);\n \n             cause.make_mut().span = impl_err_span;\n \n@@ -291,7 +290,7 @@ fn compare_predicate_entailment<'tcx>(\n                 \"method `{}` has an incompatible type for trait\",\n                 trait_m.ident\n             );\n-            if let TypeError::Mutability = terr {\n+            if let TypeError::ArgumentMutability(_) = terr {\n                 if let Some(trait_err_span) = trait_err_span {\n                     if let Ok(trait_err_str) = tcx.sess.source_map().span_to_snippet(trait_err_span)\n                     {\n@@ -385,86 +384,35 @@ fn check_region_bounds_on_impl_item<'tcx>(\n \n fn extract_spans_for_error_reporting<'a, 'tcx>(\n     infcx: &infer::InferCtxt<'a, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     terr: &TypeError<'_>,\n     cause: &ObligationCause<'tcx>,\n     impl_m: &ty::AssocItem,\n-    impl_sig: ty::FnSig<'tcx>,\n     trait_m: &ty::AssocItem,\n-    trait_sig: ty::FnSig<'tcx>,\n ) -> (Span, Option<Span>) {\n     let tcx = infcx.tcx;\n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-    let (impl_m_output, impl_m_iter) = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n-        ImplItemKind::Fn(ref impl_m_sig, _) => {\n-            (&impl_m_sig.decl.output, impl_m_sig.decl.inputs.iter())\n+    let mut impl_args = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+        ImplItemKind::Fn(ref sig, _) => {\n+            sig.decl.inputs.iter().map(|t| t.span).chain(iter::once(sig.decl.output.span()))\n         }\n         _ => bug!(\"{:?} is not a method\", impl_m),\n     };\n+    let trait_args = trait_m.def_id.as_local().map(|def_id| {\n+        let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n+            TraitItemKind::Fn(ref sig, _) => {\n+                sig.decl.inputs.iter().map(|t| t.span).chain(iter::once(sig.decl.output.span()))\n+            }\n+            _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n+        }\n+    });\n \n     match *terr {\n-        TypeError::Mutability => {\n-            if let Some(def_id) = trait_m.def_id.as_local() {\n-                let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let trait_m_iter = match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                    TraitItemKind::Fn(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n-                    _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n-                };\n-\n-                iter::zip(impl_m_iter, trait_m_iter)\n-                    .find(|&(ref impl_arg, ref trait_arg)| {\n-                        match (&impl_arg.kind, &trait_arg.kind) {\n-                            (\n-                                &hir::TyKind::Rptr(_, ref impl_mt),\n-                                &hir::TyKind::Rptr(_, ref trait_mt),\n-                            )\n-                            | (&hir::TyKind::Ptr(ref impl_mt), &hir::TyKind::Ptr(ref trait_mt)) => {\n-                                impl_mt.mutbl != trait_mt.mutbl\n-                            }\n-                            _ => false,\n-                        }\n-                    })\n-                    .map(|(ref impl_arg, ref trait_arg)| (impl_arg.span, Some(trait_arg.span)))\n-                    .unwrap_or_else(|| (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)))\n-            } else {\n-                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n-            }\n+        TypeError::ArgumentMutability(i) => {\n+            (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n         }\n-        TypeError::Sorts(ExpectedFound { .. }) => {\n-            if let Some(def_id) = trait_m.def_id.as_local() {\n-                let trait_m_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let (trait_m_output, trait_m_iter) =\n-                    match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                        TraitItemKind::Fn(ref trait_m_sig, _) => {\n-                            (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n-                        }\n-                        _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n-                    };\n-\n-                let impl_iter = impl_sig.inputs().iter();\n-                let trait_iter = trait_sig.inputs().iter();\n-                iter::zip(iter::zip(impl_iter, trait_iter), iter::zip(impl_m_iter, trait_m_iter))\n-                    .find_map(|((&impl_arg_ty, &trait_arg_ty), (impl_arg, trait_arg))| match infcx\n-                        .at(&cause, param_env)\n-                        .sub(trait_arg_ty, impl_arg_ty)\n-                    {\n-                        Ok(_) => None,\n-                        Err(_) => Some((impl_arg.span, Some(trait_arg.span))),\n-                    })\n-                    .unwrap_or_else(|| {\n-                        if infcx\n-                            .at(&cause, param_env)\n-                            .sup(trait_sig.output(), impl_sig.output())\n-                            .is_err()\n-                        {\n-                            (impl_m_output.span(), Some(trait_m_output.span()))\n-                        } else {\n-                            (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n-                        }\n-                    })\n-            } else {\n-                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n-            }\n+        TypeError::ArgumentSorts(ExpectedFound { .. }, i) => {\n+            (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n         }\n         _ => (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)),\n     }\n@@ -514,8 +462,7 @@ fn compare_self_type<'tcx>(\n                 tcx.sess,\n                 impl_m_span,\n                 E0185,\n-                \"method `{}` has a `{}` declaration in the impl, but \\\n-                                            not in the trait\",\n+                \"method `{}` has a `{}` declaration in the impl, but not in the trait\",\n                 trait_m.ident,\n                 self_descr\n             );\n@@ -993,8 +940,7 @@ crate fn compare_const_impl<'tcx>(\n                 tcx.sess,\n                 cause.span,\n                 E0326,\n-                \"implemented const `{}` has an incompatible type for \\\n-                                             trait\",\n+                \"implemented const `{}` has an incompatible type for trait\",\n                 trait_c.ident\n             );\n "}, {"sha": "0bf43a65aa072988f8c9f89037a0523a929cbcf7", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -1,8 +1,8 @@\n error[E0053]: method `fmt` has an incompatible type for trait\n-  --> $DIR/trait_type.rs:7:4\n+  --> $DIR/trait_type.rs:7:21\n    |\n LL |    fn fmt(&self, x: &str) -> () { }\n-   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n+   |                     ^^^^ types differ in mutability\n    |\n    = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n               found fn pointer `fn(&MyType, &str)`"}, {"sha": "756301de17c29e798fb8e8d281f7c1a437c0b3ab", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -1,33 +1,33 @@\n error[E0053]: method `call` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:6:3\n+  --> $DIR/issue-20225.rs:6:43\n    |\n LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n+   |                                           ^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:11:3\n+  --> $DIR/issue-20225.rs:11:51\n    |\n LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n+   |                                                   ^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n \n error[E0053]: method `call_once` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:18:3\n+  --> $DIR/issue-20225.rs:18:47\n    |\n LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n    |          - this type parameter\n ...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n+   |                                               ^^^^ expected `&T`, found type parameter `T`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "fd132687d7119f9410c7441d2ae9b9d834b20310", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -1,8 +1,8 @@\n error[E0053]: method `next` has an incompatible type for trait\n-  --> $DIR/issue-21332.rs:5:5\n+  --> $DIR/issue-21332.rs:5:27\n    |\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n+   |                           ^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n    |\n    = note: expected fn pointer `fn(&mut S) -> Option<i32>`\n               found fn pointer `fn(&mut S) -> Result<i32, i32>`"}, {"sha": "ce3528dcc9c0e8a292f55705fbce26619577e9d9", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d43ede10e4cc69547d1c05831ca43c9902304573/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=d43ede10e4cc69547d1c05831ca43c9902304573", "patch": "@@ -1,26 +1,26 @@\n error[E0053]: method `mul` has an incompatible type for trait\n-  --> $DIR/wrong-mul-method-signature.rs:16:5\n+  --> $DIR/wrong-mul-method-signature.rs:16:21\n    |\n LL |     fn mul(self, s: &f64) -> Vec1 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `&f64`\n+   |                     ^^^^ expected `f64`, found `&f64`\n    |\n    = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n               found fn pointer `fn(Vec1, &f64) -> Vec1`\n \n error[E0053]: method `mul` has an incompatible type for trait\n-  --> $DIR/wrong-mul-method-signature.rs:33:5\n+  --> $DIR/wrong-mul-method-signature.rs:33:21\n    |\n LL |     fn mul(self, s: f64) -> Vec2 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found `f64`\n+   |                     ^^^ expected struct `Vec2`, found `f64`\n    |\n    = note: expected fn pointer `fn(Vec2, Vec2) -> f64`\n               found fn pointer `fn(Vec2, f64) -> Vec2`\n \n error[E0053]: method `mul` has an incompatible type for trait\n-  --> $DIR/wrong-mul-method-signature.rs:52:5\n+  --> $DIR/wrong-mul-method-signature.rs:52:29\n    |\n LL |     fn mul(self, s: f64) -> f64 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `f64`\n+   |                             ^^^ expected `i32`, found `f64`\n    |\n    = note: expected fn pointer `fn(Vec3, _) -> i32`\n               found fn pointer `fn(Vec3, _) -> f64`"}]}