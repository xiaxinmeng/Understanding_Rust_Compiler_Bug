{"sha": "433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "node_id": "C_kwDOAAsO6NoAKDQzM2QyNDNjNmUzNTBjNWMwYzY0OWY4ZGFmM2MxNWM2M2E3YTFiOWU", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-03-17T15:52:36Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-03-17T15:52:36Z"}, "message": "extra_info_tags don't return string, use display_fn", "tree": {"sha": "301486f058044703a337516b69a25c68f59485b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/301486f058044703a337516b69a25c68f59485b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "html_url": "https://github.com/rust-lang/rust/commit/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f01433607c4f89cb1ef0d31337134e658173d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f01433607c4f89cb1ef0d31337134e658173d05", "html_url": "https://github.com/rust-lang/rust/commit/1f01433607c4f89cb1ef0d31337134e658173d05"}], "stats": {"total": 91, "additions": 56, "deletions": 35}, "files": [{"sha": "7eb9c0b7cf52af0f8ff782d6f26e15ab05ddabd0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 56, "deletions": 35, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433d243c6e350c5c0c649f8daf3c15c63a7a1b9e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=433d243c6e350c5c0c649f8daf3c15c63a7a1b9e", "patch": "@@ -1,5 +1,6 @@\n use clean::AttributesExt;\n \n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n@@ -28,8 +29,8 @@ use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n-    join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n-    visibility_print_with_space, Buffer, Ending, PrintWithSpace,\n+    display_fn, join_with_double_colon, print_abi_with_space, print_constness_with_space,\n+    print_where_clause, visibility_print_with_space, Buffer, Ending, PrintWithSpace,\n };\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n@@ -367,7 +368,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                         ..myitem.clone()\n                     };\n \n-                    let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));\n+                    let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()).to_string());\n                     stab_tags\n                 } else {\n                     None\n@@ -461,42 +462,62 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n \n /// Render the stability, deprecation and portability tags that are displayed in the item's summary\n /// at the module level.\n-fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) -> String {\n-    let mut tags = String::new();\n-\n-    fn tag_html(class: &str, title: &str, contents: &str) -> String {\n-        format!(r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#, class, Escape(title), contents)\n-    }\n-\n-    // The trailing space after each tag is to space it properly against the rest of the docs.\n-    if let Some(depr) = &item.deprecation(tcx) {\n-        let message = if stability::deprecation_in_effect(depr) {\n-            \"Deprecated\"\n-        } else {\n-            \"Deprecation planned\"\n-        };\n-        tags += &tag_html(\"deprecated\", \"\", message);\n-    }\n+fn extra_info_tags<'a, 'tcx: 'a>(\n+    item: &'a clean::Item,\n+    parent: &'a clean::Item,\n+    tcx: TyCtxt<'tcx>,\n+) -> impl fmt::Display + 'a + Captures<'tcx> {\n+    display_fn(move |f| {\n+        fn tag_html<'a>(\n+            class: &'a str,\n+            title: &'a str,\n+            contents: &'a str,\n+        ) -> impl fmt::Display + 'a {\n+            display_fn(move |f| {\n+                write!(\n+                    f,\n+                    r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#,\n+                    class,\n+                    Escape(title),\n+                    contents\n+                )\n+            })\n+        }\n \n-    // The \"rustc_private\" crates are permanently unstable so it makes no sense\n-    // to render \"unstable\" everywhere.\n-    if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)\n-        == Some(true)\n-    {\n-        tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n-    }\n+        // The trailing space after each tag is to space it properly against the rest of the docs.\n+        if let Some(depr) = &item.deprecation(tcx) {\n+            let message = if stability::deprecation_in_effect(depr) {\n+                \"Deprecated\"\n+            } else {\n+                \"Deprecation planned\"\n+            };\n+            write!(f, \"{}\", tag_html(\"deprecated\", \"\", message))?;\n+        }\n \n-    let cfg = match (&item.cfg, parent.cfg.as_ref()) {\n-        (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n-        (cfg, _) => cfg.as_deref().cloned(),\n-    };\n+        // The \"rustc_private\" crates are permanently unstable so it makes no sense\n+        // to render \"unstable\" everywhere.\n+        if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)\n+            == Some(true)\n+        {\n+            write!(f, \"{}\", tag_html(\"unstable\", \"\", \"Experimental\"))?;\n+        }\n \n-    debug!(\"Portability name={:?} {:?} - {:?} = {:?}\", item.name, item.cfg, parent.cfg, cfg);\n-    if let Some(ref cfg) = cfg {\n-        tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n-    }\n+        let cfg = match (&item.cfg, parent.cfg.as_ref()) {\n+            (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n+            (cfg, _) => cfg.as_deref().cloned(),\n+        };\n \n-    tags\n+        debug!(\"Portability name={:?} {:?} - {:?} = {:?}\", item.name, item.cfg, parent.cfg, cfg);\n+        if let Some(ref cfg) = cfg {\n+            write!(\n+                f,\n+                \"{}\",\n+                tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html())\n+            )\n+        } else {\n+            Ok(())\n+        }\n+    })\n }\n \n fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &clean::Function) {"}]}