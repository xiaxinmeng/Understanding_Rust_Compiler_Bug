{"sha": "b8601a3d8b91ad3b653d143307611f2f5c75617e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NjAxYTNkOGI5MWFkM2I2NTNkMTQzMzA3NjExZjJmNWM3NTYxN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-28T13:26:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-28T13:26:47Z"}, "message": "auto merge of #13160 : FlaPer87/rust/rename-pod, r=thestinger\n\nSo far, we've used the term POD \"Plain Old Data\" to refer to types that\r\ncan be safely copied. However, this term is not consistent with the\r\nother built-in bounds that use verbs instead. This patch renames the `Pod`\r\nkind into `Copy`.\r\n\r\nRFC: 0003-opt-in-builtin-traits\r\n\r\nr? @nikomatsakis", "tree": {"sha": "17e14596adb1325c47af6e5d0e027b1ae2ec7fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e14596adb1325c47af6e5d0e027b1ae2ec7fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8601a3d8b91ad3b653d143307611f2f5c75617e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8601a3d8b91ad3b653d143307611f2f5c75617e", "html_url": "https://github.com/rust-lang/rust/commit/b8601a3d8b91ad3b653d143307611f2f5c75617e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8601a3d8b91ad3b653d143307611f2f5c75617e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794ee03390af915898029411682357ad64662ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/794ee03390af915898029411682357ad64662ff4", "html_url": "https://github.com/rust-lang/rust/commit/794ee03390af915898029411682357ad64662ff4"}, {"sha": "81ec1f3c186cd64450d8141aab467f0a1f3a7ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ec1f3c186cd64450d8141aab467f0a1f3a7ebd", "html_url": "https://github.com/rust-lang/rust/commit/81ec1f3c186cd64450d8141aab467f0a1f3a7ebd"}], "stats": {"total": 451, "additions": 233, "deletions": 218}, "files": [{"sha": "2339f23f56e23788b4a30a83f8675c9e239510b3", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -595,7 +595,7 @@ Other features provided by lang items include:\n - stack unwinding and general failure; the `eh_personality`, `fail_`\n   and `fail_bounds_checks` lang items.\n - the traits in `std::kinds` used to indicate types that satisfy\n-  various kinds; lang items `send`, `share` and `pod`.\n+  various kinds; lang items `send`, `share` and `copy`.\n - the marker types and variance indicators found in\n   `std::kinds::markers`; lang items `covariant_type`,\n   `contravariant_lifetime`, `no_share_bound`, etc."}, {"sha": "8222d88f9b4288ccb129d8d728d3b3ae711ee80b", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -3439,12 +3439,12 @@ The kinds are:\n     This kind includes scalars, owning pointers, owned closures, and\n     structural types containing only other owned types.\n     All `Send` types are `'static`.\n-`Pod`\n+`Copy`\n   : Types of this kind consist of \"Plain Old Data\"\n     which can be copied by simply moving bits.\n     All values of this kind can be implicitly copied.\n     This kind includes scalars and immutable references,\n-    as well as structural types containing other `Pod` types.\n+    as well as structural types containing other `Copy` types.\n `'static`\n   : Types of this kind do not contain any references (except for\n     references with the `static` lifetime, which are allowed)."}, {"sha": "40250d6629464507523f0dc379d1e1bdb3cb0d51", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -52,7 +52,7 @@ syn keyword   rustType        f64 i8 i16 i32 i64 str Self\n \" to make it easy to update.\n \n \" Core operators {{{3\n-syn keyword   rustTrait       Freeze Pod Send Sized\n+syn keyword   rustTrait       Freeze Copy Send Sized\n syn keyword   rustTrait       Add Sub Mul Div Rem Neg Not\n syn keyword   rustTrait       BitAnd BitOr BitXor\n syn keyword   rustTrait       Drop"}, {"sha": "49340008ce88dde9abe49d59a7dfada2db442d33", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -48,7 +48,7 @@ use std::intrinsics;\n struct Chunk {\n     data: Rc<RefCell<Vec<u8> >>,\n     fill: Cell<uint>,\n-    is_pod: Cell<bool>,\n+    is_copy: Cell<bool>,\n }\n impl Chunk {\n     fn capacity(&self) -> uint {\n@@ -86,7 +86,7 @@ pub struct Arena {\n     // microoptimization, to avoid needing to case on the list to\n     // access the head.\n     priv head: Chunk,\n-    priv pod_head: Chunk,\n+    priv copy_head: Chunk,\n     priv chunks: RefCell<@List<Chunk>>,\n }\n \n@@ -98,17 +98,17 @@ impl Arena {\n     pub fn new_with_size(initial_size: uint) -> Arena {\n         Arena {\n             head: chunk(initial_size, false),\n-            pod_head: chunk(initial_size, true),\n+            copy_head: chunk(initial_size, true),\n             chunks: RefCell::new(@Nil),\n         }\n     }\n }\n \n-fn chunk(size: uint, is_pod: bool) -> Chunk {\n+fn chunk(size: uint, is_copy: bool) -> Chunk {\n     Chunk {\n         data: Rc::new(RefCell::new(Vec::with_capacity(size))),\n         fill: Cell::new(0u),\n-        is_pod: Cell::new(is_pod),\n+        is_copy: Cell::new(is_copy),\n     }\n }\n \n@@ -118,7 +118,7 @@ impl Drop for Arena {\n         unsafe {\n             destroy_chunk(&self.head);\n             for chunk in self.chunks.get().iter() {\n-                if !chunk.is_pod.get() {\n+                if !chunk.is_copy.get() {\n                     destroy_chunk(chunk);\n                 }\n             }\n@@ -173,61 +173,61 @@ fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n \n impl Arena {\n     fn chunk_size(&self) -> uint {\n-        self.pod_head.capacity()\n+        self.copy_head.capacity()\n     }\n     // Functions for the POD part of the arena\n-    fn alloc_pod_grow(&mut self, n_bytes: uint, align: uint) -> *u8 {\n+    fn alloc_copy_grow(&mut self, n_bytes: uint, align: uint) -> *u8 {\n         // Allocate a new chunk.\n         let new_min_chunk_size = cmp::max(n_bytes, self.chunk_size());\n-        self.chunks.set(@Cons(self.pod_head.clone(), self.chunks.get()));\n-        self.pod_head =\n+        self.chunks.set(@Cons(self.copy_head.clone(), self.chunks.get()));\n+        self.copy_head =\n             chunk(num::next_power_of_two(new_min_chunk_size + 1u), true);\n \n-        return self.alloc_pod_inner(n_bytes, align);\n+        return self.alloc_copy_inner(n_bytes, align);\n     }\n \n     #[inline]\n-    fn alloc_pod_inner(&mut self, n_bytes: uint, align: uint) -> *u8 {\n+    fn alloc_copy_inner(&mut self, n_bytes: uint, align: uint) -> *u8 {\n         unsafe {\n             let this = transmute_mut_region(self);\n-            let start = round_up(this.pod_head.fill.get(), align);\n+            let start = round_up(this.copy_head.fill.get(), align);\n             let end = start + n_bytes;\n             if end > self.chunk_size() {\n-                return this.alloc_pod_grow(n_bytes, align);\n+                return this.alloc_copy_grow(n_bytes, align);\n             }\n-            this.pod_head.fill.set(end);\n+            this.copy_head.fill.set(end);\n \n             //debug!(\"idx = {}, size = {}, align = {}, fill = {}\",\n             //       start, n_bytes, align, head.fill.get());\n \n-            this.pod_head.as_ptr().offset(start as int)\n+            this.copy_head.as_ptr().offset(start as int)\n         }\n     }\n \n     #[inline]\n-    fn alloc_pod<'a, T>(&'a mut self, op: || -> T) -> &'a T {\n+    fn alloc_copy<'a, T>(&'a mut self, op: || -> T) -> &'a T {\n         unsafe {\n-            let ptr = self.alloc_pod_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n+            let ptr = self.alloc_copy_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n             let ptr: *mut T = transmute(ptr);\n             mem::move_val_init(&mut (*ptr), op());\n             return transmute(ptr);\n         }\n     }\n \n     // Functions for the non-POD part of the arena\n-    fn alloc_nonpod_grow(&mut self, n_bytes: uint, align: uint)\n+    fn alloc_noncopy_grow(&mut self, n_bytes: uint, align: uint)\n                          -> (*u8, *u8) {\n         // Allocate a new chunk.\n         let new_min_chunk_size = cmp::max(n_bytes, self.chunk_size());\n         self.chunks.set(@Cons(self.head.clone(), self.chunks.get()));\n         self.head =\n             chunk(num::next_power_of_two(new_min_chunk_size + 1u), false);\n \n-        return self.alloc_nonpod_inner(n_bytes, align);\n+        return self.alloc_noncopy_inner(n_bytes, align);\n     }\n \n     #[inline]\n-    fn alloc_nonpod_inner(&mut self, n_bytes: uint, align: uint)\n+    fn alloc_noncopy_inner(&mut self, n_bytes: uint, align: uint)\n                           -> (*u8, *u8) {\n         unsafe {\n             let start;\n@@ -245,7 +245,7 @@ impl Arena {\n             }\n \n             if end > self.head.capacity() {\n-                return self.alloc_nonpod_grow(n_bytes, align);\n+                return self.alloc_noncopy_grow(n_bytes, align);\n             }\n \n             let head = transmute_mut_region(&mut self.head);\n@@ -260,11 +260,11 @@ impl Arena {\n     }\n \n     #[inline]\n-    fn alloc_nonpod<'a, T>(&'a mut self, op: || -> T) -> &'a T {\n+    fn alloc_noncopy<'a, T>(&'a mut self, op: || -> T) -> &'a T {\n         unsafe {\n             let tydesc = get_tydesc::<T>();\n             let (ty_ptr, ptr) =\n-                self.alloc_nonpod_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n+                self.alloc_noncopy_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n             let ty_ptr: *mut uint = transmute(ty_ptr);\n             let ptr: *mut T = transmute(ptr);\n             // Write in our tydesc along with a bit indicating that it\n@@ -287,9 +287,9 @@ impl Arena {\n             // FIXME: Borrow check\n             let this = transmute_mut(self);\n             if intrinsics::needs_drop::<T>() {\n-                this.alloc_nonpod(op)\n+                this.alloc_noncopy(op)\n             } else {\n-                this.alloc_pod(op)\n+                this.alloc_copy(op)\n             }\n         }\n     }\n@@ -496,7 +496,7 @@ mod tests {\n     }\n \n     #[test]\n-    pub fn test_pod() {\n+    pub fn test_copy() {\n         let arena = TypedArena::new();\n         for _ in range(0, 100000) {\n             arena.alloc(Point {\n@@ -508,7 +508,7 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_pod(bh: &mut BenchHarness) {\n+    pub fn bench_copy(bh: &mut BenchHarness) {\n         let arena = TypedArena::new();\n         bh.iter(|| {\n             arena.alloc(Point {\n@@ -520,7 +520,7 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_pod_nonarena(bh: &mut BenchHarness) {\n+    pub fn bench_copy_nonarena(bh: &mut BenchHarness) {\n         bh.iter(|| {\n             ~Point {\n                 x: 1,\n@@ -531,7 +531,7 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_pod_old_arena(bh: &mut BenchHarness) {\n+    pub fn bench_copy_old_arena(bh: &mut BenchHarness) {\n         let arena = Arena::new();\n         bh.iter(|| {\n             arena.alloc(|| {\n@@ -544,48 +544,48 @@ mod tests {\n         })\n     }\n \n-    struct Nonpod {\n+    struct Noncopy {\n         string: ~str,\n         array: Vec<int> ,\n     }\n \n     #[test]\n-    pub fn test_nonpod() {\n+    pub fn test_noncopy() {\n         let arena = TypedArena::new();\n         for _ in range(0, 100000) {\n-            arena.alloc(Nonpod {\n+            arena.alloc(Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),\n             });\n         }\n     }\n \n     #[bench]\n-    pub fn bench_nonpod(bh: &mut BenchHarness) {\n+    pub fn bench_noncopy(bh: &mut BenchHarness) {\n         let arena = TypedArena::new();\n         bh.iter(|| {\n-            arena.alloc(Nonpod {\n+            arena.alloc(Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),\n             })\n         })\n     }\n \n     #[bench]\n-    pub fn bench_nonpod_nonarena(bh: &mut BenchHarness) {\n+    pub fn bench_noncopy_nonarena(bh: &mut BenchHarness) {\n         bh.iter(|| {\n-            ~Nonpod {\n+            ~Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),\n             }\n         })\n     }\n \n     #[bench]\n-    pub fn bench_nonpod_old_arena(bh: &mut BenchHarness) {\n+    pub fn bench_noncopy_old_arena(bh: &mut BenchHarness) {\n         let arena = Arena::new();\n         bh.iter(|| {\n-            arena.alloc(|| Nonpod {\n+            arena.alloc(|| Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),\n             })"}, {"sha": "2d3f7d512c3d8799c93a93ebe554cfcd29523026", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -110,15 +110,15 @@ mod table {\n     /// Represents an index into a `RawTable` with no key or value in it.\n     pub struct EmptyIndex {\n         priv idx:   int,\n-        priv nopod: marker::NoPod,\n+        priv nocopy: marker::NoCopy,\n     }\n \n     /// Represents an index into a `RawTable` with a key, value, and hash\n     /// in it.\n     pub struct FullIndex {\n         priv idx:   int,\n         priv hash:  SafeHash,\n-        priv nopod: marker::NoPod,\n+        priv nocopy: marker::NoCopy,\n     }\n \n     impl FullIndex {\n@@ -237,19 +237,19 @@ mod table {\n             let idx  = index as int;\n             let hash = unsafe { *self.hashes.offset(idx) };\n \n-            let nopod = marker::NoPod;\n+            let nocopy = marker::NoCopy;\n \n             match hash {\n                 EMPTY_BUCKET =>\n                     Empty(EmptyIndex {\n                         idx: idx,\n-                        nopod: nopod\n+                        nocopy: nocopy\n                     }),\n                 full_hash =>\n                     Full(FullIndex {\n                         idx:   idx,\n                         hash:  SafeHash { hash: full_hash },\n-                        nopod: nopod,\n+                        nocopy: nocopy,\n                     })\n             }\n         }\n@@ -320,7 +320,7 @@ mod table {\n \n             self.size += 1;\n \n-            FullIndex { idx: idx, hash: hash, nopod: marker::NoPod }\n+            FullIndex { idx: idx, hash: hash, nocopy: marker::NoCopy }\n         }\n \n         /// Removes a key and value from the hashtable.\n@@ -347,7 +347,7 @@ mod table {\n \n                 self.size -= 1;\n \n-                (EmptyIndex { idx: idx, nopod: marker::NoPod }, k, v)\n+                (EmptyIndex { idx: idx, nocopy: marker::NoCopy }, k, v)\n             }\n         }\n "}, {"sha": "d0d79093cabce2e5a3c8286febc60d6291bbdf67", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -591,7 +591,7 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n                 param_bounds.builtin_bounds.add(ty::BoundSized);\n             }\n             'P' => {\n-                param_bounds.builtin_bounds.add(ty::BoundPod);\n+                param_bounds.builtin_bounds.add(ty::BoundCopy);\n             }\n             'T' => {\n                 param_bounds.builtin_bounds.add(ty::BoundShare);"}, {"sha": "e2c25a2536608dbb9bf714b36f0d9d90c1bbb44c", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -394,7 +394,7 @@ fn enc_bounds(w: &mut MemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n             ty::BoundSend => mywrite!(w, \"S\"),\n             ty::BoundStatic => mywrite!(w, \"O\"),\n             ty::BoundSized => mywrite!(w, \"Z\"),\n-            ty::BoundPod => mywrite!(w, \"P\"),\n+            ty::BoundCopy => mywrite!(w, \"P\"),\n             ty::BoundShare => mywrite!(w, \"T\"),\n         }\n     }"}, {"sha": "f93d90d273543f11b7025529f59c80de3e2b9cbb", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -86,8 +86,8 @@ impl LanguageItems {\n             Some(ty::BoundSend)\n         } else if Some(id) == self.sized_trait() {\n             Some(ty::BoundSized)\n-        } else if Some(id) == self.pod_trait() {\n-            Some(ty::BoundPod)\n+        } else if Some(id) == self.copy_trait() {\n+            Some(ty::BoundCopy)\n         } else if Some(id) == self.share_trait() {\n             Some(ty::BoundShare)\n         } else {\n@@ -210,7 +210,7 @@ lets_do_this! {\n //  Variant name,                    Name,                      Method name;\n     SendTraitLangItem,               \"send\",                    send_trait;\n     SizedTraitLangItem,              \"sized\",                   sized_trait;\n-    PodTraitLangItem,                \"pod\",                     pod_trait;\n+    CopyTraitLangItem,               \"copy\",                    copy_trait;\n     ShareTraitLangItem,              \"share\",                   share_trait;\n \n     DropTraitLangItem,               \"drop\",                    drop_trait;\n@@ -271,7 +271,7 @@ lets_do_this! {\n     InvariantLifetimeItem,           \"invariant_lifetime\",      invariant_lifetime;\n \n     NoSendItem,                      \"no_send_bound\",           no_send_bound;\n-    NoPodItem,                       \"no_pod_bound\",            no_pod_bound;\n+    NoCopyItem,                      \"no_copy_bound\",           no_copy_bound;\n     NoShareItem,                     \"no_share_bound\",          no_share_bound;\n     ManagedItem,                     \"managed_bound\",           managed_bound;\n }"}, {"sha": "3ec928d5f46691939da6e289870229fbfd25dff9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -842,7 +842,7 @@ pub enum BuiltinBound {\n     BoundStatic,\n     BoundSend,\n     BoundSized,\n-    BoundPod,\n+    BoundCopy,\n     BoundShare,\n }\n \n@@ -1905,7 +1905,7 @@ def_type_content_sets!(\n         // Things that make values considered not POD (would be same\n         // as `Moves`, but for the fact that managed data `@` is\n         // not considered POD)\n-        Nonpod                              = 0b0000_0000__0000_1111__0000,\n+        Noncopy                              = 0b0000_0000__0000_1111__0000,\n \n         // Bits to set when a managed value is encountered\n         //\n@@ -1929,7 +1929,7 @@ impl TypeContents {\n             BoundStatic => self.is_static(cx),\n             BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n-            BoundPod => self.is_pod(cx),\n+            BoundCopy => self.is_copy(cx),\n             BoundShare => self.is_sharable(cx),\n         }\n     }\n@@ -1966,8 +1966,8 @@ impl TypeContents {\n         !self.intersects(TC::Nonsized)\n     }\n \n-    pub fn is_pod(&self, _: &ctxt) -> bool {\n-        !self.intersects(TC::Nonpod)\n+    pub fn is_copy(&self, _: &ctxt) -> bool {\n+        !self.intersects(TC::Noncopy)\n     }\n \n     pub fn interior_unsafe(&self) -> bool {\n@@ -2263,7 +2263,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             tc | TC::ReachesNonsendAnnot\n         } else if Some(did) == cx.lang_items.managed_bound() {\n             tc | TC::Managed\n-        } else if Some(did) == cx.lang_items.no_pod_bound() {\n+        } else if Some(did) == cx.lang_items.no_copy_bound() {\n             tc | TC::OwnsAffine\n         } else if Some(did) == cx.lang_items.no_share_bound() {\n             tc | TC::ReachesNoShare\n@@ -2345,7 +2345,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 BoundStatic => TC::Nonstatic,\n                 BoundSend => TC::Nonsendable,\n                 BoundSized => TC::Nonsized,\n-                BoundPod => TC::Nonpod,\n+                BoundCopy => TC::Noncopy,\n                 BoundShare => TC::Nonsharable,\n             };\n         });"}, {"sha": "42a6438b58cb8d46ec06e55e92cae9eaf038566d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -665,7 +665,7 @@ impl Repr for ty::ParamBounds {\n                 ty::BoundStatic => ~\"'static\",\n                 ty::BoundSend => ~\"Send\",\n                 ty::BoundSized => ~\"Sized\",\n-                ty::BoundPod => ~\"Pod\",\n+                ty::BoundCopy => ~\"Pod\",\n                 ty::BoundShare => ~\"Share\",\n             });\n         }\n@@ -952,7 +952,7 @@ impl UserString for ty::BuiltinBound {\n             ty::BoundStatic => ~\"'static\",\n             ty::BoundSend => ~\"Send\",\n             ty::BoundSized => ~\"Sized\",\n-            ty::BoundPod => ~\"Pod\",\n+            ty::BoundCopy => ~\"Pod\",\n             ty::BoundShare => ~\"Share\",\n         }\n     }"}, {"sha": "a826521ab6ba50eb1645dc089fbfef29ebb2f4ae", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -14,18 +14,18 @@ use cast;\n use clone::Clone;\n use cmp::Eq;\n use fmt;\n-use kinds::{marker, Pod};\n+use kinds::{marker, Copy};\n use ops::{Deref, DerefMut, Drop};\n use option::{None, Option, Some};\n use ty::Unsafe;\n \n-/// A mutable memory location that admits only `Pod` data.\n+/// A mutable memory location that admits only `Copy` data.\n pub struct Cell<T> {\n     priv value: Unsafe<T>,\n     priv noshare: marker::NoShare,\n }\n \n-impl<T:Pod> Cell<T> {\n+impl<T:Copy> Cell<T> {\n     /// Creates a new `Cell` containing the given value.\n     pub fn new(value: T) -> Cell<T> {\n         Cell {\n@@ -49,13 +49,13 @@ impl<T:Pod> Cell<T> {\n     }\n }\n \n-impl<T:Pod> Clone for Cell<T> {\n+impl<T:Copy> Clone for Cell<T> {\n     fn clone(&self) -> Cell<T> {\n         Cell::new(self.get())\n     }\n }\n \n-impl<T:Eq + Pod> Eq for Cell<T> {\n+impl<T:Eq + Copy> Eq for Cell<T> {\n     fn eq(&self, other: &Cell<T>) -> bool {\n         self.get() == other.get()\n     }\n@@ -71,7 +71,7 @@ impl<T: fmt::Show> fmt::Show for Cell<T> {\n pub struct RefCell<T> {\n     priv value: Unsafe<T>,\n     priv borrow: BorrowFlag,\n-    priv nopod: marker::NoPod,\n+    priv nocopy: marker::NoCopy,\n     priv noshare: marker::NoShare,\n }\n \n@@ -86,7 +86,7 @@ impl<T> RefCell<T> {\n     pub fn new(value: T) -> RefCell<T> {\n         RefCell {\n             value: Unsafe::new(value),\n-            nopod: marker::NoPod,\n+            nocopy: marker::NoCopy,\n             noshare: marker::NoShare,\n             borrow: UNUSED,\n         }"}, {"sha": "1da9a3a710339296415108da12420b27587c676d", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -296,7 +296,7 @@ extern \"rust-intrinsic\" {\n     /// Create a value initialized to zero.\n     ///\n     /// `init` is unsafe because it returns a zeroed-out datum,\n-    /// which is unsafe unless T is Pod.\n+    /// which is unsafe unless T is Copy.\n     pub fn init<T>() -> T;\n \n     /// Create an uninitialized value."}, {"sha": "c01b09dd5ac56d8d0968586e417508eb14d15d96", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -33,10 +33,16 @@ pub trait Sized {\n }\n \n /// Types that can be copied by simply copying bits (i.e. `memcpy`).\n-///\n-/// The name \"POD\" stands for \"Plain Old Data\" and is borrowed from C++.\n+#[cfg(stage0)]\n #[lang=\"pod\"]\n-pub trait Pod {\n+pub trait Copy {\n+    // Empty.\n+}\n+\n+/// Types that can be copied by simply copying bits (i.e. `memcpy`).\n+#[cfg(not(stage0))]\n+#[lang=\"copy\"]\n+pub trait Copy {\n     // Empty.\n }\n \n@@ -264,9 +270,18 @@ pub mod marker {\n     /// A type which is considered \"not POD\", meaning that it is not\n     /// implicitly copyable. This is typically embedded in other types to\n     /// ensure that they are never copied, even if they lack a destructor.\n+    #[cfg(not(stage0))]\n+    #[lang=\"no_copy_bound\"]\n+    #[deriving(Eq,Clone)]\n+    pub struct NoCopy;\n+\n+    /// A type which is considered \"not POD\", meaning that it is not\n+    /// implicitly copyable. This is typically embedded in other types to\n+    /// ensure that they are never copied, even if they lack a destructor.\n+    #[cfg(stage0)]\n     #[lang=\"no_pod_bound\"]\n     #[deriving(Eq,Clone)]\n-    pub struct NoPod;\n+    pub struct NoCopy;\n \n     /// A type which is considered \"not sharable\", meaning that\n     /// its contents are not threadsafe, hence they cannot be"}, {"sha": "1f0a3b5b0bdf93d9ae7027c198c3b9e3f150cd14", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -79,7 +79,7 @@ pub fn pref_align_of_val<T>(_val: &T) -> uint {\n /// Create a value initialized to zero.\n ///\n /// `init` is unsafe because it returns a zeroed-out datum,\n-/// which is unsafe unless T is Pod.\n+/// which is unsafe unless T is Copy.\n #[inline]\n pub unsafe fn init<T>() -> T {\n     intrinsics::init()"}, {"sha": "d09cf28357bcd92210a94fbc41409523be06b7ca", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -17,7 +17,7 @@\n \n use clone::Clone;\n use cmp::{Eq, Ord};\n-use kinds::Pod;\n+use kinds::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n@@ -276,7 +276,7 @@ pub trait Bitwise: Bounded\n /// Specifies the available operations common to all of Rust's core numeric primitives.\n /// These may not always make sense from a purely mathematical point of view, but\n /// may be useful for systems programming.\n-pub trait Primitive: Pod\n+pub trait Primitive: Copy\n                    + Clone\n                    + Num\n                    + NumCast"}, {"sha": "a1b7060018641b803436f543f347ed041d3c757d", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -684,7 +684,7 @@ mod tests {\n \n     #[test] #[should_fail]\n     fn test_option_too_much_dance() {\n-        let mut y = Some(marker::NoPod);\n+        let mut y = Some(marker::NoCopy);\n         let _y2 = y.take_unwrap();\n         let _y3 = y.take_unwrap();\n     }"}, {"sha": "0a4b32f5a89957836b202fc958be6085ae358e9c", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -20,7 +20,7 @@ generally useful to many Rust programs.\n */\n \n // Reexported core operators\n-pub use kinds::{Pod, Send, Sized, Share};\n+pub use kinds::{Copy, Send, Sized, Share};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop, Deref, DerefMut};"}, {"sha": "8602c65352342c1593899a8519be6ef4cda4995a", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -2304,12 +2304,12 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n                 MutItems{ptr: p,\n                          end: (p as uint + self.len()) as *mut T,\n                          marker: marker::ContravariantLifetime::<'a>,\n-                         marker2: marker::NoPod}\n+                         marker2: marker::NoCopy}\n             } else {\n                 MutItems{ptr: p,\n                          end: p.offset(self.len() as int),\n                          marker: marker::ContravariantLifetime::<'a>,\n-                         marker2: marker::NoPod}\n+                         marker2: marker::NoCopy}\n             }\n         }\n     }\n@@ -2670,7 +2670,7 @@ pub struct MutItems<'a, T> {\n     priv ptr: *mut T,\n     priv end: *mut T,\n     priv marker: marker::ContravariantLifetime<'a>,\n-    priv marker2: marker::NoPod\n+    priv marker2: marker::NoCopy\n }\n \n macro_rules! iterator {"}, {"sha": "bca7cf259444cb0d242b62fd7770d709a40b4c8c", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -117,25 +117,25 @@ use ty::Unsafe;\n /// An atomic boolean type.\n pub struct AtomicBool {\n     priv v: Unsafe<uint>,\n-    priv nopod: marker::NoPod\n+    priv nocopy: marker::NoCopy\n }\n \n /// A signed atomic integer type, supporting basic atomic arithmetic operations\n pub struct AtomicInt {\n     priv v: Unsafe<int>,\n-    priv nopod: marker::NoPod\n+    priv nocopy: marker::NoCopy\n }\n \n /// An unsigned atomic integer type, supporting basic atomic arithmetic operations\n pub struct AtomicUint {\n     priv v: Unsafe<uint>,\n-    priv nopod: marker::NoPod\n+    priv nocopy: marker::NoCopy\n }\n \n /// An unsafe atomic pointer. Only supports basic atomic operations\n pub struct AtomicPtr<T> {\n     priv p: Unsafe<uint>,\n-    priv nopod: marker::NoPod\n+    priv nocopy: marker::NoCopy\n }\n \n /// An atomic, nullable unique pointer\n@@ -180,15 +180,15 @@ pub enum Ordering {\n /// An `AtomicBool` initialized to `false`\n pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: Unsafe{value: 0,\n                                                                   marker1: marker::InvariantType},\n-                                                        nopod: marker::NoPod };\n+                                                        nocopy: marker::NoCopy };\n /// An `AtomicInt` initialized to `0`\n pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: Unsafe{value: 0,\n                                                                   marker1: marker::InvariantType},\n-                                                        nopod: marker::NoPod };\n+                                                        nocopy: marker::NoCopy };\n /// An `AtomicUint` initialized to `0`\n pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: Unsafe{value: 0,\n                                                                   marker1: marker::InvariantType},\n-                                                        nopod: marker::NoPod };\n+                                                        nocopy: marker::NoCopy };\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n static UINT_TRUE: uint = -1;\n@@ -197,7 +197,7 @@ impl AtomicBool {\n     /// Create a new `AtomicBool`\n     pub fn new(v: bool) -> AtomicBool {\n         let val = if v { UINT_TRUE } else { 0 };\n-        AtomicBool { v: Unsafe::new(val), nopod: marker::NoPod }\n+        AtomicBool { v: Unsafe::new(val), nocopy: marker::NoCopy }\n     }\n \n     /// Load the value\n@@ -400,7 +400,7 @@ impl AtomicBool {\n impl AtomicInt {\n     /// Create a new `AtomicInt`\n     pub fn new(v: int) -> AtomicInt {\n-        AtomicInt {v: Unsafe::new(v), nopod: marker::NoPod}\n+        AtomicInt {v: Unsafe::new(v), nocopy: marker::NoCopy}\n     }\n \n     /// Load the value\n@@ -467,7 +467,7 @@ impl AtomicInt {\n impl AtomicUint {\n     /// Create a new `AtomicUint`\n     pub fn new(v: uint) -> AtomicUint {\n-        AtomicUint { v: Unsafe::new(v), nopod: marker::NoPod }\n+        AtomicUint { v: Unsafe::new(v), nocopy: marker::NoCopy }\n     }\n \n     /// Load the value\n@@ -534,7 +534,7 @@ impl AtomicUint {\n impl<T> AtomicPtr<T> {\n     /// Create a new `AtomicPtr`\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p: Unsafe::new(p as uint), nopod: marker::NoPod }\n+        AtomicPtr { p: Unsafe::new(p as uint), nocopy: marker::NoCopy }\n     }\n \n     /// Load the value"}, {"sha": "c3d02236948089d3a98c617b8812876b50b494ef", "filename": "src/libstd/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -87,7 +87,7 @@ pub struct TaskBuilder {\n     /// Options to spawn the new task with\n     opts: TaskOpts,\n     priv gen_body: Option<proc:Send(v: proc:Send()) -> proc:Send()>,\n-    priv nopod: Option<marker::NoPod>,\n+    priv nocopy: Option<marker::NoCopy>,\n }\n \n /**\n@@ -98,7 +98,7 @@ pub fn task() -> TaskBuilder {\n     TaskBuilder {\n         opts: TaskOpts::new(),\n         gen_body: None,\n-        nopod: None,\n+        nocopy: None,\n     }\n }\n "}, {"sha": "ba53b3b2e95fd620ea3c978f2c61bd806d023961", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -192,7 +192,7 @@ impl Sem<Vec<WaitQueue>> {\n     pub fn access_cond<'a>(&'a self) -> SemCondGuard<'a> {\n         SemCondGuard {\n             guard: self.access(),\n-            cvar: Condvar { sem: self, order: Nothing, nopod: marker::NoPod },\n+            cvar: Condvar { sem: self, order: Nothing, nocopy: marker::NoCopy },\n         }\n     }\n }\n@@ -218,7 +218,7 @@ pub struct Condvar<'a> {\n     // See the comment in write_cond for more detail.\n     priv order: ReacquireOrderLock<'a>,\n     // Make sure condvars are non-copyable.\n-    priv nopod: marker::NoPod,\n+    priv nocopy: marker::NoCopy,\n }\n \n impl<'a> Condvar<'a> {\n@@ -565,7 +565,7 @@ impl RWLock {\n             cond: Condvar {\n                 sem: &self.access_lock,\n                 order: Just(&self.order_lock),\n-                nopod: marker::NoPod,\n+                nocopy: marker::NoCopy,\n             }\n         }\n     }"}, {"sha": "5db353b7262a5ef1dce15093e7f3c6894e614c52", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -68,7 +68,7 @@ impl<'a> Iterator<PathElem> for LinkedPath<'a> {\n #[deriving(Clone)]\n pub struct Values<'a, T>(slice::Items<'a, T>);\n \n-impl<'a, T: Pod> Iterator<T> for Values<'a, T> {\n+impl<'a, T: Copy> Iterator<T> for Values<'a, T> {\n     fn next(&mut self) -> Option<T> {\n         let &Values(ref mut items) = self;\n         items.next().map(|&x| x)"}, {"sha": "0ae43db83158492031ec36f2df2933a572c1153e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -306,7 +306,7 @@ pub fn Parser<'a>(sess: &'a ParseSess, cfg: ast::CrateConfig, rdr: ~Reader:)\n         obsolete_set: HashSet::new(),\n         mod_path_stack: Vec::new(),\n         open_braces: Vec::new(),\n-        nopod: marker::NoPod\n+        nocopy: marker::NoCopy\n     }\n }\n \n@@ -337,7 +337,7 @@ pub struct Parser<'a> {\n     /// Stack of spans of open delimiters. Used for error message.\n     open_braces: Vec<Span> ,\n     /* do not copy the parser; its state is tied to outside state */\n-    priv nopod: marker::NoPod\n+    priv nocopy: marker::NoCopy\n }\n \n fn is_plain_ident_or_underscore(t: &token::Token) -> bool {"}, {"sha": "7ca11c8925f54c9404271a0ded220ace3e0baa0a", "filename": "src/test/auxiliary/kinds_in_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fauxiliary%2Fkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fauxiliary%2Fkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fkinds_in_metadata.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -11,9 +11,9 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-// Tests that metadata serialization works for the `Pod` kind.\n+// Tests that metadata serialization works for the `Copy` kind.\n \n #[crate_type=\"lib\"];\n \n-pub fn f<T:Pod>() {}\n+pub fn f<T:Copy>() {}\n "}, {"sha": "40ae0ad45831fecf5bd4f7b630dcd42705e0bd6f", "filename": "src/test/auxiliary/trait_superkinds_in_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -15,4 +15,4 @@\n \n pub trait RequiresShare : Share { }\n pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n-pub trait RequiresPod : Pod { }\n+pub trait RequiresCopy : Copy { }"}, {"sha": "ea36c76ea40580d161a7117c9add3b141e99cb5b", "filename": "src/test/compile-fail/borrowck-move-out-of-static-item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -14,10 +14,10 @@ use std::kinds::marker;\n \n struct Foo {\n     foo: int,\n-    nopod: marker::NoPod\n+    nocopy: marker::NoCopy\n }\n \n-static BAR: Foo = Foo{foo: 5, nopod: marker::NoPod};\n+static BAR: Foo = Foo{foo: 5, nocopy: marker::NoCopy};\n \n \n fn test(f: Foo) {"}, {"sha": "651104d1eda447454abc57dbba3fc23b68d8522a", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -11,8 +11,8 @@\n // Issue 4691: Ensure that functional-struct-update can only copy, not\n // move, when the struct implements Drop.\n \n-// NoPod\n-use NP = std::kinds::marker::NoPod;\n+// NoCopy\n+use NP = std::kinds::marker::NoCopy;\n struct S { a: int, np: NP }\n impl Drop for S { fn drop(&mut self) { } }\n "}, {"sha": "a1b8b06ab955a93249095100252d7b18307510bc", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test which of the builtin types are considered POD.\n+\n+#[feature(managed_boxes)];\n+\n+use std::rc::Rc;\n+\n+fn assert_copy<T:Copy>() { }\n+trait Dummy { }\n+\n+struct MyStruct {\n+    x: int,\n+    y: int,\n+}\n+\n+struct MyNoncopyStruct {\n+    x: ~int,\n+}\n+\n+fn test<'a,T,U:Copy>(_: &'a int) {\n+    // lifetime pointers are ok...\n+    assert_copy::<&'static int>();\n+    assert_copy::<&'a int>();\n+    assert_copy::<&'a str>();\n+    assert_copy::<&'a [int]>();\n+\n+    // ...unless they are mutable\n+    assert_copy::<&'static mut int>(); //~ ERROR does not fulfill\n+    assert_copy::<&'a mut int>();  //~ ERROR does not fulfill\n+\n+    // ~ pointers are not ok\n+    assert_copy::<~int>();   //~ ERROR does not fulfill\n+    assert_copy::<~str>();   //~ ERROR does not fulfill\n+    assert_copy::<Vec<int> >(); //~ ERROR does not fulfill\n+    assert_copy::<~&'a mut int>(); //~ ERROR does not fulfill\n+\n+    // borrowed object types are generally ok\n+    assert_copy::<&'a Dummy>();\n+    assert_copy::<&'a Dummy:Copy>();\n+    assert_copy::<&'static Dummy:Copy>();\n+\n+    // owned object types are not ok\n+    assert_copy::<~Dummy>(); //~ ERROR does not fulfill\n+    assert_copy::<~Dummy:Copy>(); //~ ERROR does not fulfill\n+\n+    // mutable object types are not ok\n+    assert_copy::<&'a mut Dummy:Copy>();  //~ ERROR does not fulfill\n+\n+    // closures are like an `&mut` object\n+    assert_copy::<||>(); //~ ERROR does not fulfill\n+\n+    // unsafe ptrs are ok\n+    assert_copy::<*int>();\n+    assert_copy::<*&'a mut int>();\n+\n+    // regular old ints and such are ok\n+    assert_copy::<int>();\n+    assert_copy::<bool>();\n+    assert_copy::<()>();\n+\n+    // tuples are ok\n+    assert_copy::<(int,int)>();\n+\n+    // structs of POD are ok\n+    assert_copy::<MyStruct>();\n+\n+    // structs containing non-POD are not ok\n+    assert_copy::<MyNoncopyStruct>(); //~ ERROR does not fulfill\n+\n+    // managed or ref counted types are not ok\n+    assert_copy::<@int>();   //~ ERROR does not fulfill\n+    assert_copy::<Rc<int>>();   //~ ERROR does not fulfill\n+}\n+\n+pub fn main() {\n+}\n+"}, {"sha": "94902d4e68ea5a50d155453989f933282c2cef44", "filename": "src/test/compile-fail/kindck-pod.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/794ee03390af915898029411682357ad64662ff4/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794ee03390af915898029411682357ad64662ff4/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs?ref=794ee03390af915898029411682357ad64662ff4", "patch": "@@ -1,86 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test which of the builtin types are considered POD.\n-\n-#[feature(managed_boxes)];\n-\n-use std::rc::Rc;\n-\n-fn assert_pod<T:Pod>() { }\n-trait Dummy { }\n-\n-struct MyStruct {\n-    x: int,\n-    y: int,\n-}\n-\n-struct MyNonpodStruct {\n-    x: ~int,\n-}\n-\n-fn test<'a,T,U:Pod>(_: &'a int) {\n-    // lifetime pointers are ok...\n-    assert_pod::<&'static int>();\n-    assert_pod::<&'a int>();\n-    assert_pod::<&'a str>();\n-    assert_pod::<&'a [int]>();\n-\n-    // ...unless they are mutable\n-    assert_pod::<&'static mut int>(); //~ ERROR does not fulfill `Pod`\n-    assert_pod::<&'a mut int>();  //~ ERROR does not fulfill `Pod`\n-\n-    // ~ pointers are not ok\n-    assert_pod::<~int>();   //~ ERROR does not fulfill `Pod`\n-    assert_pod::<~str>();   //~ ERROR does not fulfill `Pod`\n-    assert_pod::<Vec<int> >(); //~ ERROR does not fulfill `Pod`\n-    assert_pod::<~&'a mut int>(); //~ ERROR does not fulfill `Pod`\n-\n-    // borrowed object types are generally ok\n-    assert_pod::<&'a Dummy>();\n-    assert_pod::<&'a Dummy:Pod>();\n-    assert_pod::<&'static Dummy:Pod>();\n-\n-    // owned object types are not ok\n-    assert_pod::<~Dummy>(); //~ ERROR does not fulfill `Pod`\n-    assert_pod::<~Dummy:Pod>(); //~ ERROR does not fulfill `Pod`\n-\n-    // mutable object types are not ok\n-    assert_pod::<&'a mut Dummy:Pod>();  //~ ERROR does not fulfill `Pod`\n-\n-    // closures are like an `&mut` object\n-    assert_pod::<||>(); //~ ERROR does not fulfill `Pod`\n-\n-    // unsafe ptrs are ok\n-    assert_pod::<*int>();\n-    assert_pod::<*&'a mut int>();\n-\n-    // regular old ints and such are ok\n-    assert_pod::<int>();\n-    assert_pod::<bool>();\n-    assert_pod::<()>();\n-\n-    // tuples are ok\n-    assert_pod::<(int,int)>();\n-\n-    // structs of POD are ok\n-    assert_pod::<MyStruct>();\n-\n-    // structs containing non-POD are not ok\n-    assert_pod::<MyNonpodStruct>(); //~ ERROR does not fulfill `Pod`\n-\n-    // managed or ref counted types are not ok\n-    assert_pod::<@int>();   //~ ERROR does not fulfill `Pod`\n-    assert_pod::<Rc<int>>();   //~ ERROR does not fulfill `Pod`\n-}\n-\n-pub fn main() {\n-}\n-"}, {"sha": "5a7cddc250a16823f3f3ea2b40deb3f08c157cb7", "filename": "src/test/compile-fail/marker-no-copy.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -10,9 +10,9 @@\n \n use std::kinds::marker;\n \n-fn foo<P:Pod>(p: P) { }\n+fn foo<P:Copy>(p: P) { }\n \n fn main()\n {\n-    foo(marker::NoPod); //~ ERROR does not fulfill `Pod`\n+    foo(marker::NoCopy); //~ ERROR does not fulfill\n }", "previous_filename": "src/test/compile-fail/marker-no-pod.rs"}, {"sha": "28e73f74ff3fcebe738ecd30d95dea7e9e7e1543", "filename": "src/test/compile-fail/static-items-cant-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -14,10 +14,10 @@ use std::kinds::marker;\n \n struct Foo {\n     foo: int,\n-    nopod: marker::NoPod\n+    nocopy: marker::NoCopy\n }\n \n-static BAR: Foo = Foo{foo: 5, nopod: marker::NoPod};\n+static BAR: Foo = Foo{foo: 5, nocopy: marker::NoCopy};\n \n \n fn test(f: Foo) {"}, {"sha": "5261ea9d1e1090633af9168fa82c0984eaf12dc7", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -16,14 +16,14 @@\n \n extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n-use trait_superkinds_in_metadata::{RequiresPod};\n+use trait_superkinds_in_metadata::{RequiresCopy};\n \n struct X<T>(T);\n \n impl <T:Share> RequiresShare for X<T> { }\n \n impl <T:Share+Send> RequiresRequiresShareAndSend for X<T> { }\n \n-impl <T:Pod> RequiresPod for X<T> { }\n+impl <T:Copy> RequiresCopy for X<T> { }\n \n pub fn main() { }"}, {"sha": "8375aafb5b7ba75be5622b37e4817b015f7e8c9c", "filename": "src/test/run-pass/can-copy-pod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -11,11 +11,11 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-// Tests that type parameters with the `Pod` are implicitly copyable.\n+// Tests that type parameters with the `Copy` are implicitly copyable.\n \n #[allow(dead_code)];\n \n-fn can_copy_pod<T:Pod>(v: T) {\n+fn can_copy_copy<T:Copy>(v: T) {\n     let _a = v;\n     let _b = v;\n }"}, {"sha": "571ef4bd7b4a48351578498d5e14d0be53519308", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -11,14 +11,14 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-use NP = std::kinds::marker::NoPod;\n+use NP = std::kinds::marker::NoCopy;\n \n struct ncint { np: NP, v: int }\n fn ncint(v: int) -> ncint { ncint { np: NP, v: v } }\n \n-struct NoFoo { copied: int, nopod: ncint, }\n+struct NoFoo { copied: int, nocopy: ncint, }\n impl NoFoo {\n-    fn new(x:int,y:int) -> NoFoo { NoFoo { copied: x, nopod: ncint(y) } }\n+    fn new(x:int,y:int) -> NoFoo { NoFoo { copied: x, nocopy: ncint(y) } }\n }\n \n struct MoveFoo { copied: int, moved: ~int, }\n@@ -44,18 +44,18 @@ fn test0() {\n     // (and thus it is okay that these are Drop; compare against\n     // compile-fail test: borrowck-struct-update-with-dtor.rs).\n \n-    // Case 1: Nopodable\n+    // Case 1: Nocopyable\n     let f = DropNoFoo::new(1, 2);\n-    let b = DropNoFoo { inner: NoFoo { nopod: ncint(3), ..f.inner }};\n-    let c = DropNoFoo { inner: NoFoo { nopod: ncint(4), ..f.inner }};\n+    let b = DropNoFoo { inner: NoFoo { nocopy: ncint(3), ..f.inner }};\n+    let c = DropNoFoo { inner: NoFoo { nocopy: ncint(4), ..f.inner }};\n     assert_eq!(f.inner.copied,    1);\n-    assert_eq!(f.inner.nopod.v, 2);\n+    assert_eq!(f.inner.nocopy.v, 2);\n \n     assert_eq!(b.inner.copied,    1);\n-    assert_eq!(b.inner.nopod.v, 3);\n+    assert_eq!(b.inner.nocopy.v, 3);\n \n     assert_eq!(c.inner.copied,    1);\n-    assert_eq!(c.inner.nopod.v, 4);\n+    assert_eq!(c.inner.nocopy.v, 4);\n \n     // Case 2: Owned\n     let f = DropMoveFoo::new(5, 6);\n@@ -86,12 +86,12 @@ fn test1() {\n fn test2() {\n     // move non-copyable field\n     let f = NoFoo::new(21, 22);\n-    let b = NoFoo {nopod: ncint(23), ..f};\n+    let b = NoFoo {nocopy: ncint(23), ..f};\n     let c = NoFoo {copied: 24, ..f};\n     assert_eq!(b.copied,    21);\n-    assert_eq!(b.nopod.v, 23);\n+    assert_eq!(b.nocopy.v, 23);\n     assert_eq!(c.copied,    24);\n-    assert_eq!(c.nopod.v, 22);\n+    assert_eq!(c.nocopy.v, 22);\n }\n \n pub fn main() {"}, {"sha": "05f58acd949794f6c486b402448e5e57bb0d3b67", "filename": "src/test/run-pass/kinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Fkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8601a3d8b91ad3b653d143307611f2f5c75617e/src%2Ftest%2Frun-pass%2Fkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkinds-in-metadata.rs?ref=b8601a3d8b91ad3b653d143307611f2f5c75617e", "patch": "@@ -14,7 +14,7 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-// Tests that metadata serialization works for the `Pod` kind.\n+// Tests that metadata serialization works for the `Copy` kind.\n \n extern crate kinds_in_metadata;\n "}]}