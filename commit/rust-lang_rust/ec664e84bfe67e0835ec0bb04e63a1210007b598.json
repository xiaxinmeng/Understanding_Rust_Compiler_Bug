{"sha": "ec664e84bfe67e0835ec0bb04e63a1210007b598", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjY0ZTg0YmZlNjdlMDgzNWVjMGJiMDRlNjNhMTIxMDAwN2I1OTg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:27:27Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:27:27Z"}, "message": "literal representation restructure 5\n\nUse `split_digit_parts` in `check_lit`.", "tree": {"sha": "7b7447f6f7551d445e027d97a0eb9c0172b4a9fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7447f6f7551d445e027d97a0eb9c0172b4a9fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec664e84bfe67e0835ec0bb04e63a1210007b598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec664e84bfe67e0835ec0bb04e63a1210007b598", "html_url": "https://github.com/rust-lang/rust/commit/ec664e84bfe67e0835ec0bb04e63a1210007b598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec664e84bfe67e0835ec0bb04e63a1210007b598/comments", "author": null, "committer": null, "parents": [{"sha": "2d244d33588157257b4297b74276b5bc9b779a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d244d33588157257b4297b74276b5bc9b779a5f", "html_url": "https://github.com/rust-lang/rust/commit/2d244d33588157257b4297b74276b5bc9b779a5f"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "eacba87073a660b40b21921eb63ef23a9c36cf10", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ec664e84bfe67e0835ec0bb04e63a1210007b598/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec664e84bfe67e0835ec0bb04e63a1210007b598/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=ec664e84bfe67e0835ec0bb04e63a1210007b598", "patch": "@@ -400,36 +400,21 @@ impl LiteralDigitGrouping {\n                         }\n                     }\n \n-                    match lit.kind {\n-                        LitKind::Int(..) => {\n-                            Self::do_lint(digit_info.digits, in_macro)?;\n-                        },\n-                        LitKind::Float(..) => {\n-                            // Separate digits into integral and fractional parts.\n-                            let parts: Vec<&str> = digit_info\n-                                .digits\n-                                .split_terminator('.')\n-                                .collect();\n-\n-                            // Lint integral and fractional parts separately, and then check consistency of digit\n-                            // groups if both pass.\n-                            let integral_group_size = Self::do_lint(parts[0], in_macro)?;\n-                            if parts.len() > 1 {\n-                                // Lint the fractional part of literal just like integral part, but reversed.\n-                                let fractional_part = &parts[1].chars().rev().collect::<String>();\n-                                let fractional_group_size = Self::do_lint(fractional_part, in_macro)?;\n-                                let consistent = Self::parts_consistent(integral_group_size,\n-                                                                        fractional_group_size,\n-                                                                        parts[0].len(),\n-                                                                        parts[1].len());\n-                                if !consistent {\n-                                    return Err(WarningType::InconsistentDigitGrouping);\n-                                };\n-                            };\n-                        },\n-                        _ => (),\n+                    let (integer, fraction, _) = digit_info.split_digit_parts();\n+\n+                    let integral_group_size = Self::do_lint(integer, in_macro)?;\n+                    if let Some(fraction) = fraction {\n+                        let fractional_part = fraction.chars().rev().collect::<String>();\n+                        let fractional_group_size = Self::do_lint(&fractional_part, in_macro)?;\n+\n+                        let consistent = Self::parts_consistent(integral_group_size,\n+                                                                fractional_group_size,\n+                                                                integer.len(),\n+                                                                fraction.len());\n+                        if !consistent {\n+                            return Err(WarningType::InconsistentDigitGrouping);\n+                        };\n                     }\n-\n                     Ok(())\n                 })();\n "}]}