{"sha": "d243e0047d2f819b6cc6b8883515a6a95f7d468b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNDNlMDA0N2QyZjgxOWI2Y2M2Yjg4ODM1MTVhNmE5NWY3ZDQ2OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-07T03:32:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-07T03:32:09Z"}, "message": "auto merge of #7572 : Dretch/rust/missing-trait-message-followup, r=pcwalton\n\nThis a followup to #7510. @catamorphism requested a test - so I have created one, but in doing so I noticed some inconsistency in the error messages resulting from referencing nonexistent traits, so I changed the messages to be more consistent.", "tree": {"sha": "4b05490e2a3912db30d8407ccaa86792ae697029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b05490e2a3912db30d8407ccaa86792ae697029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d243e0047d2f819b6cc6b8883515a6a95f7d468b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d243e0047d2f819b6cc6b8883515a6a95f7d468b", "html_url": "https://github.com/rust-lang/rust/commit/d243e0047d2f819b6cc6b8883515a6a95f7d468b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d243e0047d2f819b6cc6b8883515a6a95f7d468b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f178c148858b3b121aaf849907905262a41a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f178c148858b3b121aaf849907905262a41a6c", "html_url": "https://github.com/rust-lang/rust/commit/a9f178c148858b3b121aaf849907905262a41a6c"}, {"sha": "908a22b62697fcb6c943527492158729dc762f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/908a22b62697fcb6c943527492158729dc762f10", "html_url": "https://github.com/rust-lang/rust/commit/908a22b62697fcb6c943527492158729dc762f10"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "dc55dcad99d1b583db1edbb45cd359083623ce09", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d243e0047d2f819b6cc6b8883515a6a95f7d468b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243e0047d2f819b6cc6b8883515a6a95f7d468b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d243e0047d2f819b6cc6b8883515a6a95f7d468b", "patch": "@@ -510,6 +510,13 @@ pub struct NameBindings {\n     value_def: Option<ValueNsDef>,  //< Meaning in value namespace.\n }\n \n+/// Ways in which a trait can be referenced\n+enum TraitReferenceType {\n+    TraitImplementation,             // impl SomeTrait for T { ... }\n+    TraitDerivation,                 // trait T : SomeTrait { ... }\n+    TraitBoundingTypeParameter,      // fn f<T:SomeTrait>() { ... }\n+}\n+\n impl NameBindings {\n     /// Creates a new module in this set of name bindings.\n     pub fn define_module(@mut self,\n@@ -3554,23 +3561,7 @@ impl Resolver {\n \n                     // Resolve derived traits.\n                     for traits.iter().advance |trt| {\n-                        match self.resolve_path(trt.path, TypeNS, true,\n-                                                visitor) {\n-                            None =>\n-                                self.session.span_err(trt.path.span,\n-                                                      \"attempt to derive a \\\n-                                                      nonexistent trait\"),\n-                            Some(def) => {\n-                                // Write a mapping from the trait ID to the\n-                                // definition of the trait into the definition\n-                                // map.\n-\n-                                debug!(\"(resolving trait) found trait def: \\\n-                                       %?\", def);\n-\n-                                self.record_def(trt.ref_id, def);\n-                            }\n-                        }\n+                        self.resolve_trait_reference(*trt, visitor, TraitDerivation);\n                     }\n \n                     for (*methods).iter().advance |method| {\n@@ -3821,22 +3812,31 @@ impl Resolver {\n                                         visitor: ResolveVisitor) {\n         match *type_parameter_bound {\n             TraitTyParamBound(tref) => {\n-                self.resolve_trait_reference(tref, visitor)\n+                self.resolve_trait_reference(tref, visitor, TraitBoundingTypeParameter)\n             }\n             RegionTyParamBound => {}\n         }\n     }\n \n     pub fn resolve_trait_reference(@mut self,\n                                    trait_reference: &trait_ref,\n-                                   visitor: ResolveVisitor) {\n+                                   visitor: ResolveVisitor,\n+                                   reference_type: TraitReferenceType) {\n         match self.resolve_path(trait_reference.path, TypeNS, true, visitor) {\n             None => {\n-                let idents = self.idents_to_str(trait_reference.path.idents);\n-                self.session.span_err(trait_reference.path.span,\n-                                      fmt!(\"attempt to implement an unknown trait `%s`\", idents));\n+                let path_str = self.idents_to_str(trait_reference.path.idents);\n+\n+                let usage_str = match reference_type {\n+                    TraitBoundingTypeParameter => \"bound type parameter with\",\n+                    TraitImplementation        => \"implement\",\n+                    TraitDerivation            => \"derive\"\n+                };\n+\n+                let msg = fmt!(\"attempt to %s a nonexistent trait `%s`\", usage_str, path_str);\n+                self.session.span_err(trait_reference.path.span, msg);\n             }\n             Some(def) => {\n+                debug!(\"(resolving trait) found trait def: %?\", def);\n                 self.record_def(trait_reference.ref_id, def);\n             }\n         }\n@@ -3930,7 +3930,7 @@ impl Resolver {\n             let original_trait_refs;\n             match opt_trait_reference {\n                 Some(trait_reference) => {\n-                    self.resolve_trait_reference(trait_reference, visitor);\n+                    self.resolve_trait_reference(trait_reference, visitor, TraitImplementation);\n \n                     // Record the current set of trait references.\n                     let mut new_trait_refs = ~[];"}, {"sha": "699a30ad4ebdd72d330e36173a32bfcc09f0e7b1", "filename": "src/test/compile-fail/resolve-unknown-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d243e0047d2f819b6cc6b8883515a6a95f7d468b/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d243e0047d2f819b6cc6b8883515a6a95f7d468b/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs?ref=d243e0047d2f819b6cc6b8883515a6a95f7d468b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+trait NewTrait : SomeNonExistentTrait {}\n+//~^ ERROR attempt to derive a nonexistent trait `SomeNonExistentTrait`\n+\n+impl SomeNonExistentTrait for int {}\n+//~^ ERROR attempt to implement a nonexistent trait `SomeNonExistentTrait`\n+\n+fn f<T:SomeNonExistentTrait>() {}\n+//~^ ERROR attempt to bound type parameter with a nonexistent trait `SomeNonExistentTrait`\n+"}]}