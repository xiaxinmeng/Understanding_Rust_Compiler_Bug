{"sha": "8d9e7deab5fd509160d60c33f2c7fb83acde9366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOWU3ZGVhYjVmZDUwOTE2MGQ2MGMzM2YyYzdmYjgzYWNkZTkzNjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-21T22:31:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-21T22:31:31Z"}, "message": "Switch log_expr to carrying a full expr:u32 for level. Add log_full variant that parses that expr, prepare for snapshot.", "tree": {"sha": "f4c2c91b66c07c90ab3d855d3f4cc687cd63eb98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c2c91b66c07c90ab3d855d3f4cc687cd63eb98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9e7deab5fd509160d60c33f2c7fb83acde9366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9e7deab5fd509160d60c33f2c7fb83acde9366", "html_url": "https://github.com/rust-lang/rust/commit/8d9e7deab5fd509160d60c33f2c7fb83acde9366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9e7deab5fd509160d60c33f2c7fb83acde9366/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66856a39b38b1ded0200e57c713c39ecf3dcc192", "url": "https://api.github.com/repos/rust-lang/rust/commits/66856a39b38b1ded0200e57c713c39ecf3dcc192", "html_url": "https://github.com/rust-lang/rust/commit/66856a39b38b1ded0200e57c713c39ecf3dcc192"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "c163ac9871b0c174bd1711ddb4ad9d98d8c5f2c5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -3622,7 +3622,7 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n         assert dest == ignore;\n         ret trans_fail_expr(bcx, some(e.span), expr);\n       }\n-      ast::expr_log(lvl, a) {\n+      ast::expr_log(_, lvl, a) {\n         assert dest == ignore;\n         ret trans_log(lvl, bcx, a);\n       }\n@@ -3768,7 +3768,7 @@ fn load_if_immediate(cx: @block_ctxt, v: ValueRef, t: ty::t) -> ValueRef {\n     ret v;\n }\n \n-fn trans_log(lvl: int, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n+fn trans_log(lvl: @ast::expr, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n     let ccx = bcx_ccx(cx);\n     let lcx = cx.fcx.lcx;\n     let modname = str::connect(lcx.module_path, \"::\");\n@@ -3778,20 +3778,26 @@ fn trans_log(lvl: int, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n         let s = link::mangle_internal_name_by_path_and_seq(\n             lcx.ccx, lcx.module_path, \"loglevel\");\n         let global = str::as_buf(s, {|buf|\n-            llvm::LLVMAddGlobal(lcx.ccx.llmod, ccx.int_type, buf)\n+            llvm::LLVMAddGlobal(lcx.ccx.llmod, T_i32(), buf)\n         });\n         llvm::LLVMSetGlobalConstant(global, False);\n-        llvm::LLVMSetInitializer(global, C_null(ccx.int_type));\n+        llvm::LLVMSetInitializer(global, C_null(T_i32()));\n         llvm::LLVMSetLinkage(global,\n                              lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n         lcx.ccx.module_data.insert(modname, global);\n         global\n     };\n+    let level_cx = new_scope_block_ctxt(cx, \"level\");\n     let log_cx = new_scope_block_ctxt(cx, \"log\");\n     let after_cx = new_sub_block_ctxt(cx, \"after\");\n     let load = Load(cx, global);\n-    let test = ICmp(cx, lib::llvm::LLVMIntSGE, load, C_int(ccx, lvl));\n-    CondBr(cx, test, log_cx.llbb, after_cx.llbb);\n+\n+    Br(cx, level_cx.llbb);\n+    let level_res = trans_temp_expr(level_cx, lvl);\n+    let test = ICmp(level_res.bcx, lib::llvm::LLVMIntUGE,\n+                    load, level_res.val);\n+\n+    CondBr(level_res.bcx, test, log_cx.llbb, after_cx.llbb);\n     let sub = trans_temp_expr(log_cx, e);\n     let e_ty = ty::expr_ty(bcx_tcx(cx), e);\n     let log_bcx = sub.bcx;\n@@ -3807,14 +3813,12 @@ fn trans_log(lvl: int, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n     let llvalptr = r.val;\n     let llval_i8 = PointerCast(log_bcx, llvalptr, T_ptr(T_i8()));\n \n-    // FIXME lvl should not be int, but actually u32,\n-    // and the upcall should take a u32, not an i32\n     Call(log_bcx, ccx.upcalls.log_type,\n-         [lltydesc, llval_i8, C_i32(lvl as i32)]);\n+         [lltydesc, llval_i8, level_res.val]);\n \n     log_bcx = trans_block_cleanups(log_bcx, log_cx);\n     Br(log_bcx, after_cx.llbb);\n-    ret after_cx;\n+    ret trans_block_cleanups(after_cx, level_cx);\n }\n \n fn trans_check_expr(cx: @block_ctxt, e: @ast::expr, s: str) -> @block_ctxt {"}, {"sha": "c47d0db6ece3c18f4db9a5feb2ea757b7b7da4bc", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -344,9 +344,8 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         clear_pp(rslt);\n         handle_var(fcx, rslt, e.id, path_to_ident(fcx.ccx.tcx, p));\n       }\n-      expr_log(_, arg) {\n-        find_pre_post_expr(fcx, arg);\n-        copy_pre_post(fcx.ccx, e.id, arg);\n+      expr_log(_, lvl, arg) {\n+        find_pre_post_exprs(fcx, [lvl, arg], e.id);\n       }\n       expr_fn(f, cap_clause) {\n         find_pre_post_expr_fn_upvars(fcx, e);"}, {"sha": "b48f8dc61f17cf37bf942cdbfe0e9fe802c52e05", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -366,8 +366,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                      return_val);\n       }\n       expr_path(_) { ret pure_exp(fcx.ccx, e.id, pres); }\n-      expr_log(_, ex) {\n-        ret find_pre_post_state_sub(fcx, pres, ex, e.id, none);\n+      expr_log(_, lvl, ex) {\n+        ret find_pre_post_state_two(fcx, pres, lvl, ex, e.id, oper_pure);\n       }\n       expr_mac(_) { fcx.ccx.tcx.sess.bug(\"unexpanded macro\"); }\n       expr_lit(l) { ret pure_exp(fcx.ccx, e.id, pres); }"}, {"sha": "1de1457b76a05b734731e93de3f7c9baa504ac5a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -1868,8 +1868,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         bot = true;\n         write::nil_ty(tcx, id);\n       }\n-      ast::expr_log(l, e) {\n-        bot = check_expr(fcx, e);\n+      ast::expr_log(_, lv, e) {\n+        bot = check_expr_with(fcx, lv, ty::mk_mach_uint(tcx, ast::ty_u32));\n+        bot |= check_expr(fcx, e);\n         write::nil_ty(tcx, id);\n       }\n       ast::expr_check(_, e) {"}, {"sha": "a7b856d35788ba92ef6a762d450a763e9b2a4f99", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -247,7 +247,7 @@ tag expr_ {\n     expr_cont;\n     expr_ret(option::t<@expr>);\n     expr_be(@expr);\n-    expr_log(int, @expr);\n+    expr_log(int, @expr, @expr);\n \n     /* just an assert, no significance to typestate */\n     expr_assert(@expr);"}, {"sha": "ce9e237aeff8c85c9d52698982e0dbef427ff93e", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -424,7 +424,8 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_cont. { e }\n           expr_ret(e) { expr_ret(option::map(e, fld.fold_expr)) }\n           expr_be(e) { expr_be(fld.fold_expr(e)) }\n-          expr_log(lv, e) { expr_log(lv, fld.fold_expr(e)) }\n+          expr_log(i, lv, e) { expr_log(i, fld.fold_expr(lv),\n+                                        fld.fold_expr(e)) }\n           expr_assert(e) { expr_assert(fld.fold_expr(e)) }\n           expr_check(m, e) { expr_check(m, fld.fold_expr(e)) }\n           expr_if_check(cond, tr, fl) {"}, {"sha": "0b19ec479182c716a1fa3cfa8c095e581b74f49a", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -165,7 +165,8 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n                  \"assert\", \"claim\", \"native\", \"fn\", \"lambda\", \"pure\",\n                  \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n-                 \"log\", \"log_err\", \"tag\", \"obj\", \"copy\", \"sendfn\", \"impl\"] {\n+                 \"log\", \"log_err\", \"log_full\",\n+                 \"tag\", \"obj\", \"copy\", \"sendfn\", \"impl\"] {\n         words.insert(word, ());\n     }\n     words\n@@ -758,6 +759,15 @@ fn is_bar(t: token::token) -> bool {\n     alt t { token::BINOP(token::OR.) | token::OROR. { true } _ { false } }\n }\n \n+fn mk_lit_u32(p: parser, i: u32) -> @ast::expr {\n+    let span = p.get_span();\n+\n+    let lv_lit = @{node: ast::lit_uint(i as u64, ast::ty_u32),\n+                   span: span};\n+\n+    ret @{id: p.get_id(), node: ast::expr_lit(lv_lit), span: span};\n+}\n+\n fn parse_bottom_expr(p: parser) -> @ast::expr {\n     let lo = p.get_lo_pos();\n     let hi = p.get_hi_pos();\n@@ -899,13 +909,18 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n             hi = e.span.hi;\n             ex = ast::expr_fail(some(e));\n         } else { ex = ast::expr_fail(none); }\n+    } else if eat_word(p, \"log_full\") {\n+        let e = parse_expr(p);\n+        let lvl = parse_expr(p);\n+        ex = ast::expr_log(2, lvl, e);\n+        hi = e.span.hi;\n     } else if eat_word(p, \"log\") {\n         let e = parse_expr(p);\n-        ex = ast::expr_log(1, e);\n+        ex = ast::expr_log(1, mk_lit_u32(p, 1u32), e);\n         hi = e.span.hi;\n     } else if eat_word(p, \"log_err\") {\n         let e = parse_expr(p);\n-        ex = ast::expr_log(0, e);\n+        ex = ast::expr_log(0, mk_lit_u32(p, 0u32), e);\n         hi = e.span.hi;\n     } else if eat_word(p, \"assert\") {\n         let e = parse_expr(p);"}, {"sha": "eef84757b8a7a0e9c7a6c1611d5aecfb57e0e30f", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -913,9 +913,16 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         }\n       }\n       ast::expr_be(result) { word_nbsp(s, \"be\"); print_expr(s, result); }\n-      ast::expr_log(lvl, expr) {\n-        alt lvl { 1 { word_nbsp(s, \"log\"); } 0 { word_nbsp(s, \"log_err\"); } }\n-        print_expr(s, expr);\n+      ast::expr_log(lvl, lexp, expr) {\n+        alt lvl {\n+          1 { word_nbsp(s, \"log\"); print_expr(s, expr); }\n+          0 { word_nbsp(s, \"log_err\"); print_expr(s, expr); }\n+          2 {\n+            word_nbsp(s, \"log_full\");\n+            word(s.s, \" \");\n+            print_expr(s, lexp);\n+          }\n+        }\n       }\n       ast::expr_check(m, expr) {\n         alt m {\n@@ -990,7 +997,7 @@ fn print_expr_parens_if_not_bot(s: ps, ex: @ast::expr) {\n       ast::expr_ternary(_, _, _) | ast::expr_move(_, _) |\n       ast::expr_copy(_) | ast::expr_assign(_, _) | ast::expr_be(_) |\n       ast::expr_assign_op(_, _, _) | ast::expr_swap(_, _) |\n-      ast::expr_log(_, _) | ast::expr_assert(_) |\n+      ast::expr_log(_, _, _) | ast::expr_assert(_) |\n       ast::expr_check(_, _) { true }\n       _ { false }\n     };\n@@ -1305,7 +1312,7 @@ fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n       ast::expr_be(_) { true }\n       ast::expr_assert(_) { true }\n       ast::expr_check(_, _) { true }\n-      ast::expr_log(_, _) { true }\n+      ast::expr_log(_, _, _) { true }\n       _ { false }\n     }\n }\n@@ -1644,7 +1651,7 @@ fn ends_in_lit_int(ex: @ast::expr) -> bool {\n       ast::expr_ternary(_, _, sub) | ast::expr_move(_, sub) |\n       ast::expr_copy(sub) | ast::expr_assign(_, sub) | ast::expr_be(sub) |\n       ast::expr_assign_op(_, _, sub) | ast::expr_swap(_, sub) |\n-      ast::expr_log(_, sub) | ast::expr_assert(sub) |\n+      ast::expr_log(_, _, sub) | ast::expr_assert(sub) |\n       ast::expr_check(_, sub) { ends_in_lit_int(sub) }\n       ast::expr_fail(osub) | ast::expr_ret(osub) {\n         alt osub {"}, {"sha": "e02193c2cd11bb77f8b7abb9e96b54c77b1a2c7a", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9e7deab5fd509160d60c33f2c7fb83acde9366/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=8d9e7deab5fd509160d60c33f2c7fb83acde9366", "patch": "@@ -333,7 +333,10 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_cont. { }\n       expr_ret(eo) { visit_expr_opt(eo, e, v); }\n       expr_be(x) { v.visit_expr(x, e, v); }\n-      expr_log(_, x) { v.visit_expr(x, e, v); }\n+      expr_log(_, lv, x) {\n+        v.visit_expr(lv, e, v);\n+        v.visit_expr(x, e, v);\n+      }\n       expr_check(_, x) { v.visit_expr(x, e, v); }\n       expr_assert(x) { v.visit_expr(x, e, v); }\n       expr_anon_obj(anon_obj) {"}]}