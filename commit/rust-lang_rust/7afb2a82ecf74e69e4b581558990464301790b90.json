{"sha": "7afb2a82ecf74e69e4b581558990464301790b90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmIyYTgyZWNmNzRlNjllNGI1ODE1NTg5OTA0NjQzMDE3OTBiOTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T16:50:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T23:39:44Z"}, "message": "syntax: extract `active.rs` feature gates.", "tree": {"sha": "6a2c3b98ba8d0ce00e7899413c77cf0efbc71282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2c3b98ba8d0ce00e7899413c77cf0efbc71282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afb2a82ecf74e69e4b581558990464301790b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afb2a82ecf74e69e4b581558990464301790b90", "html_url": "https://github.com/rust-lang/rust/commit/7afb2a82ecf74e69e4b581558990464301790b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afb2a82ecf74e69e4b581558990464301790b90/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975455b37dcdb6c59e47a289aa2d5f19d63a18f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/975455b37dcdb6c59e47a289aa2d5f19d63a18f6", "html_url": "https://github.com/rust-lang/rust/commit/975455b37dcdb6c59e47a289aa2d5f19d63a18f6"}], "stats": {"total": 1042, "additions": 525, "deletions": 517}, "files": [{"sha": "f01b3af7af40b4b1d9dfe0f63cfe3b3cfa125d0b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 517, "changes": 520, "blob_url": "https://github.com/rust-lang/rust/blob/7afb2a82ecf74e69e4b581558990464301790b90/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afb2a82ecf74e69e4b581558990464301790b90/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7afb2a82ecf74e69e4b581558990464301790b90", "patch": "@@ -16,6 +16,9 @@ mod accepted;\n use accepted::ACCEPTED_FEATURES;\n mod removed;\n use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+mod active;\n+use active::{ACTIVE_FEATURES};\n+pub use active::{Features, INCOMPLETE_FEATURES};\n \n use AttributeType::*;\n use AttributeGate::*;\n@@ -42,523 +45,6 @@ use lazy_static::lazy_static;\n \n use std::env;\n \n-macro_rules! set {\n-    ($field: ident) => {{\n-        fn f(features: &mut Features, _: Span) {\n-            features.$field = true;\n-        }\n-        f as fn(&mut Features, Span)\n-    }}\n-}\n-\n-macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr, $edition: expr),)+) => {\n-        /// Represents active features that are currently being implemented or\n-        /// currently being considered for addition/removal.\n-        const ACTIVE_FEATURES:\n-            &[(Symbol, &str, Option<u32>, Option<Edition>, fn(&mut Features, Span))] =\n-            &[$((sym::$feature, $ver, $issue, $edition, set!($feature))),+];\n-\n-        /// A set of features to be used by later passes.\n-        #[derive(Clone)]\n-        pub struct Features {\n-            /// `#![feature]` attrs for language features, for error reporting\n-            pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n-            /// `#![feature]` attrs for non-language (library) features\n-            pub declared_lib_features: Vec<(Symbol, Span)>,\n-            $(pub $feature: bool),+\n-        }\n-\n-        impl Features {\n-            pub fn new() -> Features {\n-                Features {\n-                    declared_lang_features: Vec::new(),\n-                    declared_lib_features: Vec::new(),\n-                    $($feature: false),+\n-                }\n-            }\n-\n-            pub fn walk_feature_fields<F>(&self, mut f: F)\n-                where F: FnMut(&str, bool)\n-            {\n-                $(f(stringify!($feature), self.$feature);)+\n-            }\n-        }\n-    };\n-}\n-\n-// If you change this, please modify `src/doc/unstable-book` as well.\n-//\n-// Don't ever remove anything from this list; set them to 'Removed'.\n-//\n-// The version numbers here correspond to the version in which the current status\n-// was set. This is most important for knowing when a particular feature became\n-// stable (active).\n-//\n-// Note that the features are grouped into internal/user-facing and then\n-// sorted by version inside those groups. This is inforced with tidy.\n-//\n-// N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n-// source, so take care when modifying it.\n-\n-declare_features! (\n-    // -------------------------------------------------------------------------\n-    // feature-group-start: internal feature gates\n-    // -------------------------------------------------------------------------\n-\n-    // no-tracking-issue-start\n-\n-    // Allows using compiler's own crates.\n-    (active, rustc_private, \"1.0.0\", Some(27812), None),\n-\n-    // Allows using the `rust-intrinsic`'s \"ABI\".\n-    (active, intrinsics, \"1.0.0\", None, None),\n-\n-    // Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n-    (active, lang_items, \"1.0.0\", None, None),\n-\n-    // Allows using the `#[stable]` and `#[unstable]` attributes.\n-    (active, staged_api, \"1.0.0\", None, None),\n-\n-    // Allows using `#[allow_internal_unstable]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n-    (active, allow_internal_unstable, \"1.0.0\", None, None),\n-\n-    // Allows using `#[allow_internal_unsafe]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n-    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n-\n-    // Allows using the macros:\n-    // + `__diagnostic_used`\n-    // + `__register_diagnostic`\n-    // +`__build_diagnostic_array`\n-    (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n-\n-    // Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n-    // lets a function to be `const` when opted into with `#![feature(foo)]`.\n-    (active, rustc_const_unstable, \"1.0.0\", None, None),\n-\n-    // no-tracking-issue-end\n-\n-    // Allows using `#[link_name=\"llvm.*\"]`.\n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n-\n-    // Allows using `rustc_*` attributes (RFC 572).\n-    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n-\n-    // Allows using `#[on_unimplemented(..)]` on traits.\n-    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n-\n-    // Allows using the `box $expr` syntax.\n-    (active, box_syntax, \"1.0.0\", Some(49733), None),\n-\n-    // Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n-    (active, main, \"1.0.0\", Some(29634), None),\n-\n-    // Allows using `#[start]` on a function indicating that it is the program entrypoint.\n-    (active, start, \"1.0.0\", Some(29633), None),\n-\n-    // Allows using the `#[fundamental]` attribute.\n-    (active, fundamental, \"1.0.0\", Some(29635), None),\n-\n-    // Allows using the `rust-call` ABI.\n-    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n-\n-    // Allows using the `#[linkage = \"..\"]` attribute.\n-    (active, linkage, \"1.0.0\", Some(29603), None),\n-\n-    // Allows features specific to OIBIT (auto traits).\n-    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n-\n-    // Allows using `box` in patterns (RFC 469).\n-    (active, box_patterns, \"1.0.0\", Some(29641), None),\n-\n-    // no-tracking-issue-start\n-\n-    // Allows using `#[prelude_import]` on glob `use` items.\n-    (active, prelude_import, \"1.2.0\", None, None),\n-\n-    // no-tracking-issue-end\n-\n-    // no-tracking-issue-start\n-\n-    // Allows using `#[omit_gdb_pretty_printer_section]`.\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n-\n-    // Allows using the `vectorcall` ABI.\n-    (active, abi_vectorcall, \"1.7.0\", None, None),\n-\n-    // no-tracking-issue-end\n-\n-    // Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n-    (active, structural_match, \"1.8.0\", Some(31434), None),\n-\n-    // Allows using the `may_dangle` attribute (RFC 1327).\n-    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n-\n-    // Allows using the `#![panic_runtime]` attribute.\n-    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n-\n-    // Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n-\n-    // no-tracking-issue-start\n-\n-    // Allows identifying the `compiler_builtins` crate.\n-    (active, compiler_builtins, \"1.13.0\", None, None),\n-\n-    // Allows using the `unadjusted` ABI; perma-unstable.\n-    (active, abi_unadjusted, \"1.16.0\", None, None),\n-\n-    // Allows identifying crates that contain sanitizer runtimes.\n-    (active, sanitizer_runtime, \"1.17.0\", None, None),\n-\n-    // Used to identify crates that contain the profiler runtime.\n-    (active, profiler_runtime, \"1.18.0\", None, None),\n-\n-    // Allows using the `thiscall` ABI.\n-    (active, abi_thiscall, \"1.19.0\", None, None),\n-\n-    // Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n-    (active, allocator_internals, \"1.20.0\", None, None),\n-\n-    // no-tracking-issue-end\n-\n-    // Added for testing E0705; perma-unstable.\n-    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-end: internal feature gates\n-    // -------------------------------------------------------------------------\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-start: actual feature gates (target features)\n-    // -------------------------------------------------------------------------\n-\n-    // FIXME: Document these and merge with the list below.\n-\n-    // Unstable `#[target_feature]` directives.\n-    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n-    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n-    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n-    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-end: actual feature gates (target features)\n-    // -------------------------------------------------------------------------\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-start: actual feature gates\n-    // -------------------------------------------------------------------------\n-\n-    // Allows using the `#[link_args]` attribute.\n-    (active, link_args, \"1.0.0\", Some(29596), None),\n-\n-    // Allows defining identifiers beyond ASCII.\n-    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n-\n-    // Allows using `#[plugin_registrar]` on functions.\n-    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n-\n-    // Allows using `#![plugin(myplugin)]`.\n-    (active, plugin, \"1.0.0\", Some(29597), None),\n-\n-    // Allows using `#[thread_local]` on `static` items.\n-    (active, thread_local, \"1.0.0\", Some(29594), None),\n-\n-    // Allows the use of SIMD types in functions declared in `extern` blocks.\n-    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n-\n-    // Allows using custom attributes (RFC 572).\n-    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n-\n-    // Allows using non lexical lifetimes (RFC 2094).\n-    (active, nll, \"1.0.0\", Some(43234), None),\n-\n-    // Allows using slice patterns.\n-    (active, slice_patterns, \"1.0.0\", Some(62254), None),\n-\n-    // Allows the definition of `const` functions with some advanced features.\n-    (active, const_fn, \"1.2.0\", Some(57563), None),\n-\n-    // Allows associated type defaults.\n-    (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n-\n-    // Allows `#![no_core]`.\n-    (active, no_core, \"1.3.0\", Some(29639), None),\n-\n-    // Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n-\n-    // Allows `repr(simd)` and importing the various simd intrinsics.\n-    (active, repr_simd, \"1.4.0\", Some(27731), None),\n-\n-    // Allows `extern \"platform-intrinsic\" { ... }`.\n-    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n-\n-    // Allows `#[unwind(..)]`.\n-    //\n-    // Permits specifying whether a function should permit unwinding or abort on unwind.\n-    (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n-\n-    // Allows `#[no_debug]`.\n-    (active, no_debug, \"1.5.0\", Some(29721), None),\n-\n-    // Allows attributes on expressions and non-item statements.\n-    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n-\n-    // Allows the use of type ascription in expressions.\n-    (active, type_ascription, \"1.6.0\", Some(23416), None),\n-\n-    // Allows `cfg(target_thread_local)`.\n-    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n-\n-    // Allows specialization of implementations (RFC 1210).\n-    (active, specialization, \"1.7.0\", Some(31844), None),\n-\n-    // Allows using `#[naked]` on functions.\n-    (active, naked_functions, \"1.9.0\", Some(32408), None),\n-\n-    // Allows `cfg(target_has_atomic = \"...\")`.\n-    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n-\n-    // Allows `X..Y` patterns.\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n-\n-    // Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n-    (active, never_type, \"1.13.0\", Some(35121), None),\n-\n-    // Allows exhaustive pattern matching on types that contain uninhabited types.\n-    (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n-\n-    // Allows untagged unions `union U { ... }`.\n-    (active, untagged_unions, \"1.13.0\", Some(32836), None),\n-\n-    // Allows `#[link(..., cfg(..))]`.\n-    (active, link_cfg, \"1.14.0\", Some(37406), None),\n-\n-    // Allows `extern \"ptx-*\" fn()`.\n-    (active, abi_ptx, \"1.15.0\", Some(38788), None),\n-\n-    // Allows the `#[repr(i128)]` attribute for enums.\n-    (active, repr128, \"1.16.0\", Some(35118), None),\n-\n-    // Allows `#[link(kind=\"static-nobundle\"...)]`.\n-    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n-\n-    // Allows `extern \"msp430-interrupt\" fn()`.\n-    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n-\n-    // Allows declarative macros 2.0 (`macro`).\n-    (active, decl_macro, \"1.17.0\", Some(39412), None),\n-\n-    // Allows `extern \"x86-interrupt\" fn()`.\n-    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n-\n-    // Allows overlapping impls of marker traits.\n-    (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n-\n-    // Allows a test to fail without failing the whole suite.\n-    (active, allow_fail, \"1.19.0\", Some(46488), None),\n-\n-    // Allows unsized tuple coercion.\n-    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n-\n-    // Allows defining generators.\n-    (active, generators, \"1.21.0\", Some(43122), None),\n-\n-    // Allows `#[doc(cfg(...))]`.\n-    (active, doc_cfg, \"1.21.0\", Some(43781), None),\n-\n-    // Allows `#[doc(masked)]`.\n-    (active, doc_masked, \"1.21.0\", Some(44027), None),\n-\n-    // Allows `#[doc(spotlight)]`.\n-    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n-\n-    // Allows `#[doc(include = \"some-file\")]`.\n-    (active, external_doc, \"1.22.0\", Some(44732), None),\n-\n-    // Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n-    (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n-\n-    // Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n-\n-    // Allows defining `extern type`s.\n-    (active, extern_types, \"1.23.0\", Some(43467), None),\n-\n-    // Allows trait methods with arbitrary self types.\n-    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n-\n-    // Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n-    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n-\n-    // Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n-\n-    // Allows defining `trait X = A + B;` alias items.\n-    (active, trait_alias, \"1.24.0\", Some(41517), None),\n-\n-    // Allows infering `'static` outlives requirements (RFC 2093).\n-    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n-\n-    // Allows macro invocations in `extern {}` blocks.\n-    (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n-\n-    // Allows accessing fields of unions inside `const` functions.\n-    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n-\n-    // Allows casting raw pointers to `usize` during const eval.\n-    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n-\n-    // Allows dereferencing raw pointers during const eval.\n-    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n-\n-    // Allows comparing raw pointers during const eval.\n-    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n-\n-    // Allows `#[doc(alias = \"...\")]`.\n-    (active, doc_alias, \"1.27.0\", Some(50146), None),\n-\n-    // Allows inconsistent bounds in where clauses.\n-    (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n-\n-    // Allows `'a: { break 'a; }`.\n-    (active, label_break_value, \"1.28.0\", Some(48594), None),\n-\n-    // Allows using `#[doc(keyword = \"...\")]`.\n-    (active, doc_keyword, \"1.28.0\", Some(51315), None),\n-\n-    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n-    (active, const_transmute, \"1.29.0\", Some(53605), None),\n-\n-    // Allows using `try {...}` expressions.\n-    (active, try_blocks, \"1.29.0\", Some(31436), None),\n-\n-    // Allows defining an `#[alloc_error_handler]`.\n-    (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n-\n-    // Allows using the `amdgpu-kernel` ABI.\n-    (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n-\n-    // Allows panicking during const eval (producing compile-time errors).\n-    (active, const_panic, \"1.30.0\", Some(51999), None),\n-\n-    // Allows `#[marker]` on certain traits allowing overlapping implementations.\n-    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n-\n-    // Allows macro invocations on modules expressions and statements and\n-    // procedural macros to expand to non-items.\n-    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n-\n-    // Allows unsized rvalues at arguments and parameters.\n-    (active, unsized_locals, \"1.30.0\", Some(48055), None),\n-\n-    // Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n-    (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n-\n-    // Allows non-builtin attributes in inner attribute position.\n-    (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n-\n-    // Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n-    (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n-\n-    // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n-    (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n-\n-    // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n-    (active, lint_reasons, \"1.31.0\", Some(54503), None),\n-\n-    // Allows exhaustive integer pattern matching on `usize` and `isize`.\n-    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n-\n-    // Allows relaxing the coherence rules such that\n-    // `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n-    (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n-\n-    // Allows using `#[ffi_returns_twice]` on foreign functions.\n-    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n-\n-    // Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n-    (active, const_generics, \"1.34.0\", Some(44580), None),\n-\n-    // Allows using `#[optimize(X)]`.\n-    (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n-\n-    // Allows using C-variadics.\n-    (active, c_variadic, \"1.34.0\", Some(44930), None),\n-\n-    // Allows the user of associated type bounds.\n-    (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n-\n-    // Attributes on formal function params.\n-    (active, param_attrs, \"1.36.0\", Some(60406), None),\n-\n-    // Allows calling constructor functions in `const fn`.\n-    (active, const_constructor, \"1.37.0\", Some(61456), None),\n-\n-    // Allows `if/while p && let q = r && ...` chains.\n-    (active, let_chains, \"1.37.0\", Some(53667), None),\n-\n-    // Allows #[repr(transparent)] on enums (RFC 2645).\n-    (active, transparent_enums, \"1.37.0\", Some(60405), None),\n-\n-    // Allows #[repr(transparent)] on unions (RFC 2645).\n-    (active, transparent_unions, \"1.37.0\", Some(60405), None),\n-\n-    // Allows explicit discriminants on non-unit enum variants.\n-    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n-\n-    // Allows `impl Trait` with multiple unrelated lifetimes.\n-    (active, member_constraints, \"1.37.0\", Some(61977), None),\n-\n-    // Allows `async || body` closures.\n-    (active, async_closure, \"1.37.0\", Some(62290), None),\n-\n-    // Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests\n-    (active, cfg_doctest, \"1.37.0\", Some(62210), None),\n-\n-    // Allows `[x; N]` where `x` is a constant (RFC 2203).\n-    (active, const_in_array_repeat_expressions, \"1.37.0\", Some(49147), None),\n-\n-    // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n-    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n-\n-    // Allows the use of or-patterns, e.g. `0 | 1`.\n-    (active, or_patterns, \"1.38.0\", Some(54883), None),\n-\n-    // -------------------------------------------------------------------------\n-    // feature-group-end: actual feature gates\n-    // -------------------------------------------------------------------------\n-);\n-\n-/// Some features are known to be incomplete and using them is likely to have\n-/// unanticipated results, such as compiler crashes. We warn the user about these\n-/// to alert them.\n-pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n-    sym::impl_trait_in_bindings,\n-    sym::generic_associated_types,\n-    sym::const_generics,\n-    sym::or_patterns,\n-    sym::let_chains,\n-];\n-\n // If you change this, please modify `src/doc/unstable-book` as well. You must\n // move that documentation into the relevant place in the other docs, and\n // remove the chapter on the flag."}, {"sha": "0bff4ed24a4ce44988191865fb988d42f5d4af7e", "filename": "src/libsyntax/feature_gate/active.rs", "status": "added", "additions": 522, "deletions": 0, "changes": 522, "blob_url": "https://github.com/rust-lang/rust/blob/7afb2a82ecf74e69e4b581558990464301790b90/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afb2a82ecf74e69e4b581558990464301790b90/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=7afb2a82ecf74e69e4b581558990464301790b90", "patch": "@@ -0,0 +1,522 @@\n+//! List of the active feature gates.\n+\n+use crate::edition::Edition;\n+use crate::symbol::{Symbol, sym};\n+use syntax_pos::Span;\n+\n+macro_rules! set {\n+    ($field: ident) => {{\n+        fn f(features: &mut Features, _: Span) {\n+            features.$field = true;\n+        }\n+        f as fn(&mut Features, Span)\n+    }}\n+}\n+\n+macro_rules! declare_features {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr, $edition: expr),)+) => {\n+        /// Represents active features that are currently being implemented or\n+        /// currently being considered for addition/removal.\n+        pub const ACTIVE_FEATURES:\n+            &[(Symbol, &str, Option<u32>, Option<Edition>, fn(&mut Features, Span))] =\n+            &[$((sym::$feature, $ver, $issue, $edition, set!($feature))),+];\n+\n+        /// A set of features to be used by later passes.\n+        #[derive(Clone)]\n+        pub struct Features {\n+            /// `#![feature]` attrs for language features, for error reporting\n+            pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n+            /// `#![feature]` attrs for non-language (library) features\n+            pub declared_lib_features: Vec<(Symbol, Span)>,\n+            $(pub $feature: bool),+\n+        }\n+\n+        impl Features {\n+            pub fn new() -> Features {\n+                Features {\n+                    declared_lang_features: Vec::new(),\n+                    declared_lib_features: Vec::new(),\n+                    $($feature: false),+\n+                }\n+            }\n+\n+            pub fn walk_feature_fields<F>(&self, mut f: F)\n+                where F: FnMut(&str, bool)\n+            {\n+                $(f(stringify!($feature), self.$feature);)+\n+            }\n+        }\n+    };\n+}\n+\n+// If you change this, please modify `src/doc/unstable-book` as well.\n+//\n+// Don't ever remove anything from this list; move them to `removed.rs`.\n+//\n+// The version numbers here correspond to the version in which the current status\n+// was set. This is most important for knowing when a particular feature became\n+// stable (active).\n+//\n+// Note that the features are grouped into internal/user-facing and then\n+// sorted by version inside those groups. This is inforced with tidy.\n+//\n+// N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n+// source, so take care when modifying it.\n+\n+declare_features! (\n+    // -------------------------------------------------------------------------\n+    // feature-group-start: internal feature gates\n+    // -------------------------------------------------------------------------\n+\n+    // no-tracking-issue-start\n+\n+    // Allows using compiler's own crates.\n+    (active, rustc_private, \"1.0.0\", Some(27812), None),\n+\n+    // Allows using the `rust-intrinsic`'s \"ABI\".\n+    (active, intrinsics, \"1.0.0\", None, None),\n+\n+    // Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n+    (active, lang_items, \"1.0.0\", None, None),\n+\n+    // Allows using the `#[stable]` and `#[unstable]` attributes.\n+    (active, staged_api, \"1.0.0\", None, None),\n+\n+    // Allows using `#[allow_internal_unstable]`. This is an\n+    // attribute on `macro_rules!` and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n+\n+    // Allows using `#[allow_internal_unsafe]`. This is an\n+    // attribute on `macro_rules!` and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n+\n+    // Allows using the macros:\n+    // + `__diagnostic_used`\n+    // + `__register_diagnostic`\n+    // +`__build_diagnostic_array`\n+    (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n+\n+    // Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n+    // lets a function to be `const` when opted into with `#![feature(foo)]`.\n+    (active, rustc_const_unstable, \"1.0.0\", None, None),\n+\n+    // no-tracking-issue-end\n+\n+    // Allows using `#[link_name=\"llvm.*\"]`.\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+\n+    // Allows using `rustc_*` attributes (RFC 572).\n+    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n+\n+    // Allows using `#[on_unimplemented(..)]` on traits.\n+    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n+\n+    // Allows using the `box $expr` syntax.\n+    (active, box_syntax, \"1.0.0\", Some(49733), None),\n+\n+    // Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n+    (active, main, \"1.0.0\", Some(29634), None),\n+\n+    // Allows using `#[start]` on a function indicating that it is the program entrypoint.\n+    (active, start, \"1.0.0\", Some(29633), None),\n+\n+    // Allows using the `#[fundamental]` attribute.\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n+\n+    // Allows using the `rust-call` ABI.\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n+\n+    // Allows using the `#[linkage = \"..\"]` attribute.\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+\n+    // Allows features specific to OIBIT (auto traits).\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n+\n+    // Allows using `box` in patterns (RFC 469).\n+    (active, box_patterns, \"1.0.0\", Some(29641), None),\n+\n+    // no-tracking-issue-start\n+\n+    // Allows using `#[prelude_import]` on glob `use` items.\n+    (active, prelude_import, \"1.2.0\", None, None),\n+\n+    // no-tracking-issue-end\n+\n+    // no-tracking-issue-start\n+\n+    // Allows using `#[omit_gdb_pretty_printer_section]`.\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n+\n+    // Allows using the `vectorcall` ABI.\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n+\n+    // no-tracking-issue-end\n+\n+    // Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n+\n+    // Allows using the `may_dangle` attribute (RFC 1327).\n+    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n+\n+    // Allows using the `#![panic_runtime]` attribute.\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n+\n+    // Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n+\n+    // no-tracking-issue-start\n+\n+    // Allows identifying the `compiler_builtins` crate.\n+    (active, compiler_builtins, \"1.13.0\", None, None),\n+\n+    // Allows using the `unadjusted` ABI; perma-unstable.\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n+\n+    // Allows identifying crates that contain sanitizer runtimes.\n+    (active, sanitizer_runtime, \"1.17.0\", None, None),\n+\n+    // Used to identify crates that contain the profiler runtime.\n+    (active, profiler_runtime, \"1.18.0\", None, None),\n+\n+    // Allows using the `thiscall` ABI.\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n+\n+    // Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n+    (active, allocator_internals, \"1.20.0\", None, None),\n+\n+    // no-tracking-issue-end\n+\n+    // Added for testing E0705; perma-unstable.\n+    (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-end: internal feature gates\n+    // -------------------------------------------------------------------------\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-start: actual feature gates (target features)\n+    // -------------------------------------------------------------------------\n+\n+    // FIXME: Document these and merge with the list below.\n+\n+    // Unstable `#[target_feature]` directives.\n+    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, mmx_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n+    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n+    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n+    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-end: actual feature gates (target features)\n+    // -------------------------------------------------------------------------\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-start: actual feature gates\n+    // -------------------------------------------------------------------------\n+\n+    // Allows using the `#[link_args]` attribute.\n+    (active, link_args, \"1.0.0\", Some(29596), None),\n+\n+    // Allows defining identifiers beyond ASCII.\n+    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n+\n+    // Allows using `#[plugin_registrar]` on functions.\n+    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n+\n+    // Allows using `#![plugin(myplugin)]`.\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+\n+    // Allows using `#[thread_local]` on `static` items.\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+\n+    // Allows the use of SIMD types in functions declared in `extern` blocks.\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+\n+    // Allows using custom attributes (RFC 572).\n+    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n+\n+    // Allows using non lexical lifetimes (RFC 2094).\n+    (active, nll, \"1.0.0\", Some(43234), None),\n+\n+    // Allows using slice patterns.\n+    (active, slice_patterns, \"1.0.0\", Some(62254), None),\n+\n+    // Allows the definition of `const` functions with some advanced features.\n+    (active, const_fn, \"1.2.0\", Some(57563), None),\n+\n+    // Allows associated type defaults.\n+    (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n+\n+    // Allows `#![no_core]`.\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n+\n+    // Allows default type parameters to influence type inference.\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+\n+    // Allows `repr(simd)` and importing the various simd intrinsics.\n+    (active, repr_simd, \"1.4.0\", Some(27731), None),\n+\n+    // Allows `extern \"platform-intrinsic\" { ... }`.\n+    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n+\n+    // Allows `#[unwind(..)]`.\n+    //\n+    // Permits specifying whether a function should permit unwinding or abort on unwind.\n+    (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n+\n+    // Allows `#[no_debug]`.\n+    (active, no_debug, \"1.5.0\", Some(29721), None),\n+\n+    // Allows attributes on expressions and non-item statements.\n+    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n+\n+    // Allows the use of type ascription in expressions.\n+    (active, type_ascription, \"1.6.0\", Some(23416), None),\n+\n+    // Allows `cfg(target_thread_local)`.\n+    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n+\n+    // Allows specialization of implementations (RFC 1210).\n+    (active, specialization, \"1.7.0\", Some(31844), None),\n+\n+    // Allows using `#[naked]` on functions.\n+    (active, naked_functions, \"1.9.0\", Some(32408), None),\n+\n+    // Allows `cfg(target_has_atomic = \"...\")`.\n+    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n+\n+    // Allows `X..Y` patterns.\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n+\n+    // Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n+\n+    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n+\n+    // Allows untagged unions `union U { ... }`.\n+    (active, untagged_unions, \"1.13.0\", Some(32836), None),\n+\n+    // Allows `#[link(..., cfg(..))]`.\n+    (active, link_cfg, \"1.14.0\", Some(37406), None),\n+\n+    // Allows `extern \"ptx-*\" fn()`.\n+    (active, abi_ptx, \"1.15.0\", Some(38788), None),\n+\n+    // Allows the `#[repr(i128)]` attribute for enums.\n+    (active, repr128, \"1.16.0\", Some(35118), None),\n+\n+    // Allows `#[link(kind=\"static-nobundle\"...)]`.\n+    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n+\n+    // Allows `extern \"msp430-interrupt\" fn()`.\n+    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n+\n+    // Allows declarative macros 2.0 (`macro`).\n+    (active, decl_macro, \"1.17.0\", Some(39412), None),\n+\n+    // Allows `extern \"x86-interrupt\" fn()`.\n+    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n+\n+    // Allows overlapping impls of marker traits.\n+    (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n+\n+    // Allows a test to fail without failing the whole suite.\n+    (active, allow_fail, \"1.19.0\", Some(46488), None),\n+\n+    // Allows unsized tuple coercion.\n+    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n+\n+    // Allows defining generators.\n+    (active, generators, \"1.21.0\", Some(43122), None),\n+\n+    // Allows `#[doc(cfg(...))]`.\n+    (active, doc_cfg, \"1.21.0\", Some(43781), None),\n+\n+    // Allows `#[doc(masked)]`.\n+    (active, doc_masked, \"1.21.0\", Some(44027), None),\n+\n+    // Allows `#[doc(spotlight)]`.\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n+\n+    // Allows `#[doc(include = \"some-file\")]`.\n+    (active, external_doc, \"1.22.0\", Some(44732), None),\n+\n+    // Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n+    (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n+\n+    // Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n+\n+    // Allows defining `extern type`s.\n+    (active, extern_types, \"1.23.0\", Some(43467), None),\n+\n+    // Allows trait methods with arbitrary self types.\n+    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n+\n+    // Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n+\n+    // Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n+    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n+\n+    // Allows defining `trait X = A + B;` alias items.\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n+\n+    // Allows infering `'static` outlives requirements (RFC 2093).\n+    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n+\n+    // Allows macro invocations in `extern {}` blocks.\n+    (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n+\n+    // Allows accessing fields of unions inside `const` functions.\n+    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n+\n+    // Allows casting raw pointers to `usize` during const eval.\n+    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n+\n+    // Allows dereferencing raw pointers during const eval.\n+    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+\n+    // Allows comparing raw pointers during const eval.\n+    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n+\n+    // Allows `#[doc(alias = \"...\")]`.\n+    (active, doc_alias, \"1.27.0\", Some(50146), None),\n+\n+    // Allows inconsistent bounds in where clauses.\n+    (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n+\n+    // Allows `'a: { break 'a; }`.\n+    (active, label_break_value, \"1.28.0\", Some(48594), None),\n+\n+    // Allows using `#[doc(keyword = \"...\")]`.\n+    (active, doc_keyword, \"1.28.0\", Some(51315), None),\n+\n+    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n+    (active, const_transmute, \"1.29.0\", Some(53605), None),\n+\n+    // Allows using `try {...}` expressions.\n+    (active, try_blocks, \"1.29.0\", Some(31436), None),\n+\n+    // Allows defining an `#[alloc_error_handler]`.\n+    (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n+\n+    // Allows using the `amdgpu-kernel` ABI.\n+    (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n+\n+    // Allows panicking during const eval (producing compile-time errors).\n+    (active, const_panic, \"1.30.0\", Some(51999), None),\n+\n+    // Allows `#[marker]` on certain traits allowing overlapping implementations.\n+    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n+\n+    // Allows macro invocations on modules expressions and statements and\n+    // procedural macros to expand to non-items.\n+    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n+\n+    // Allows unsized rvalues at arguments and parameters.\n+    (active, unsized_locals, \"1.30.0\", Some(48055), None),\n+\n+    // Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n+    (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n+\n+    // Allows non-builtin attributes in inner attribute position.\n+    (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n+\n+    // Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n+    (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n+\n+    // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n+    (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n+\n+    // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n+    (active, lint_reasons, \"1.31.0\", Some(54503), None),\n+\n+    // Allows exhaustive integer pattern matching on `usize` and `isize`.\n+    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n+\n+    // Allows relaxing the coherence rules such that\n+    // `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n+    (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n+\n+    // Allows using `#[ffi_returns_twice]` on foreign functions.\n+    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n+\n+    // Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n+    (active, const_generics, \"1.34.0\", Some(44580), None),\n+\n+    // Allows using `#[optimize(X)]`.\n+    (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n+\n+    // Allows using C-variadics.\n+    (active, c_variadic, \"1.34.0\", Some(44930), None),\n+\n+    // Allows the user of associated type bounds.\n+    (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n+\n+    // Attributes on formal function params.\n+    (active, param_attrs, \"1.36.0\", Some(60406), None),\n+\n+    // Allows calling constructor functions in `const fn`.\n+    (active, const_constructor, \"1.37.0\", Some(61456), None),\n+\n+    // Allows `if/while p && let q = r && ...` chains.\n+    (active, let_chains, \"1.37.0\", Some(53667), None),\n+\n+    // Allows #[repr(transparent)] on enums (RFC 2645).\n+    (active, transparent_enums, \"1.37.0\", Some(60405), None),\n+\n+    // Allows #[repr(transparent)] on unions (RFC 2645).\n+    (active, transparent_unions, \"1.37.0\", Some(60405), None),\n+\n+    // Allows explicit discriminants on non-unit enum variants.\n+    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n+\n+    // Allows `impl Trait` with multiple unrelated lifetimes.\n+    (active, member_constraints, \"1.37.0\", Some(61977), None),\n+\n+    // Allows `async || body` closures.\n+    (active, async_closure, \"1.37.0\", Some(62290), None),\n+\n+    // Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests\n+    (active, cfg_doctest, \"1.37.0\", Some(62210), None),\n+\n+    // Allows `[x; N]` where `x` is a constant (RFC 2203).\n+    (active, const_in_array_repeat_expressions, \"1.37.0\", Some(49147), None),\n+\n+    // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n+    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n+\n+    // Allows the use of or-patterns, e.g. `0 | 1`.\n+    (active, or_patterns, \"1.38.0\", Some(54883), None),\n+\n+    // -------------------------------------------------------------------------\n+    // feature-group-end: actual feature gates\n+    // -------------------------------------------------------------------------\n+);\n+\n+/// Some features are known to be incomplete and using them is likely to have\n+/// unanticipated results, such as compiler crashes. We warn the user about these\n+/// to alert them.\n+pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n+    sym::impl_trait_in_bindings,\n+    sym::generic_associated_types,\n+    sym::const_generics,\n+    sym::or_patterns,\n+    sym::let_chains,\n+];"}]}