{"sha": "abd78f2f0483833266ef3aac9e80dd9afba41de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDc4ZjJmMDQ4MzgzMzI2NmVmM2FhYzllODBkZDlhZmJhNDFkZTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-18T17:56:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-18T18:14:38Z"}, "message": "rustc: Create stub glue for structural comparison", "tree": {"sha": "3d019ad1dee050446ab22e41cfa1708faf44e591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d019ad1dee050446ab22e41cfa1708faf44e591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd78f2f0483833266ef3aac9e80dd9afba41de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd78f2f0483833266ef3aac9e80dd9afba41de0", "html_url": "https://github.com/rust-lang/rust/commit/abd78f2f0483833266ef3aac9e80dd9afba41de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd78f2f0483833266ef3aac9e80dd9afba41de0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef62fae9db156c1706ad08a2d2b0562fd0b9e42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef62fae9db156c1706ad08a2d2b0562fd0b9e42d", "html_url": "https://github.com/rust-lang/rust/commit/ef62fae9db156c1706ad08a2d2b0562fd0b9e42d"}], "stats": {"total": 103, "additions": 80, "deletions": 23}, "files": [{"sha": "220fec81e8e3de5c600957fa344e7686c4914fba", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd78f2f0483833266ef3aac9e80dd9afba41de0/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd78f2f0483833266ef3aac9e80dd9afba41de0/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=abd78f2f0483833266ef3aac9e80dd9afba41de0", "patch": "@@ -39,6 +39,8 @@ const int tydesc_field_sever_glue = 6;\n const int tydesc_field_mark_glue = 7;\n const int tydesc_field_obj_drop_glue = 8;\n const int tydesc_field_is_stateful = 9;\n+const int tydesc_field_cmp_glue = 10;\n+const int n_tydesc_fields = 11;\n \n \n const int obj_field_vtbl = 0;"}, {"sha": "b8327ad234a147b5a1fb324075b1ff0265bcde0d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 78, "deletions": 23, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/abd78f2f0483833266ef3aac9e80dd9afba41de0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd78f2f0483833266ef3aac9e80dd9afba41de0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=abd78f2f0483833266ef3aac9e80dd9afba41de0", "patch": "@@ -66,7 +66,8 @@ type glue_fns = rec(ValueRef activate_glue,\n \n type tydesc_info = rec(ValueRef tydesc,\n                        ValueRef take_glue,\n-                       ValueRef drop_glue);\n+                       ValueRef drop_glue,\n+                       ValueRef cmp_glue);\n \n /*\n  * A note on nomenclature of linking: \"upcall\", \"extern\" and \"native\".\n@@ -325,19 +326,34 @@ fn T_task(type_names tn) -> TypeRef {\n     ret t;\n }\n \n+fn T_tydesc_field(type_names tn, int field) -> TypeRef {\n+    // Bit of a kludge: pick the fn typeref out of the tydesc..\n+    let vec[TypeRef] tydesc_elts =\n+        _vec.init_elt[TypeRef](T_nil(), abi.n_tydesc_fields as uint);\n+    llvm.LLVMGetStructElementTypes(T_tydesc(tn),\n+                                   _vec.buf[TypeRef](tydesc_elts));\n+    auto t = llvm.LLVMGetElementType(tydesc_elts.(field));\n+    ret t;\n+}\n+\n fn T_glue_fn(type_names tn) -> TypeRef {\n     auto s = \"glue_fn\";\n     if (tn.name_has_type(s)) {\n         ret tn.get_type(s);\n     }\n \n-    // Bit of a kludge: pick the fn typeref out of the tydesc..\n-    let vec[TypeRef] tydesc_elts = _vec.init_elt[TypeRef](T_nil(), 10u);\n-    llvm.LLVMGetStructElementTypes(T_tydesc(tn),\n-                                   _vec.buf[TypeRef](tydesc_elts));\n-    auto t =\n-        llvm.LLVMGetElementType\n-        (tydesc_elts.(abi.tydesc_field_drop_glue));\n+    auto t = T_tydesc_field(tn, abi.tydesc_field_drop_glue);\n+    tn.associate(s, t);\n+    ret t;\n+}\n+\n+fn T_cmp_glue_fn(type_names tn) -> TypeRef {\n+    auto s = \"cmp_glue_fn\";\n+    if (tn.name_has_type(s)) {\n+        ret tn.get_type(s);\n+    }\n+\n+    auto t = T_tydesc_field(tn, abi.tydesc_field_cmp_glue);\n     tn.associate(s, t);\n     ret t;\n }\n@@ -358,6 +374,12 @@ fn T_tydesc(type_names tn) -> TypeRef {\n                                      T_ptr(T_nil()),\n                                      tydescpp,\n                                      pvoid), T_void()));\n+    auto cmp_glue_fn_ty = T_ptr(T_fn(vec(T_ptr(T_nil()),\n+                                         T_taskptr(tn),\n+                                         T_ptr(T_nil()),\n+                                         tydescpp,\n+                                         pvoid,\n+                                         pvoid), T_void()));\n     auto tydesc = T_struct(vec(tydescpp,          // first_param\n                                T_int(),           // size\n                                T_int(),           // align\n@@ -367,7 +389,8 @@ fn T_tydesc(type_names tn) -> TypeRef {\n                                glue_fn_ty,        // sever_glue\n                                glue_fn_ty,        // mark_glue\n                                glue_fn_ty,        // obj_drop_glue\n-                               glue_fn_ty));      // is_stateful\n+                               glue_fn_ty,        // is_stateful\n+                               cmp_glue_fn_ty));  // cmp_glue\n \n     llvm.LLVMRefineType(abs_tydesc, tydesc);\n     auto t = llvm.LLVMResolveTypeHandle(th.llth);\n@@ -1580,8 +1603,12 @@ fn get_tydesc(&@block_ctxt cx, @ty.t t) -> result {\n // needs to be separate from make_tydesc() below, because sometimes type glue\n // functions needs to refer to their own type descriptors.\n fn declare_tydesc(@local_ctxt cx, @ty.t t) {\n-    auto take_glue = declare_generic_glue(cx, t, \"take\");\n-    auto drop_glue = declare_generic_glue(cx, t, \"drop\");\n+    auto take_glue = declare_generic_glue(cx, t, T_glue_fn(cx.ccx.tn),\n+                                          \"take\");\n+    auto drop_glue = declare_generic_glue(cx, t, T_glue_fn(cx.ccx.tn),\n+                                          \"drop\");\n+    auto cmp_glue = declare_generic_glue(cx, t, T_cmp_glue_fn(cx.ccx.tn),\n+                                         \"cmp\");\n     auto ccx = cx.ccx;\n \n     auto llsize;\n@@ -1611,7 +1638,8 @@ fn declare_tydesc(@local_ctxt cx, @ty.t t) {\n                                C_null(glue_fn_ty),    // sever_glue\n                                C_null(glue_fn_ty),    // mark_glue\n                                C_null(glue_fn_ty),    // obj_drop_glue\n-                               C_null(glue_fn_ty)));  // is_stateful\n+                               C_null(glue_fn_ty),    // is_stateful\n+                               cmp_glue));            // cmp_glue\n \n     llvm.LLVMSetInitializer(gvar, tydesc);\n     llvm.LLVMSetGlobalConstant(gvar, True);\n@@ -1621,35 +1649,47 @@ fn declare_tydesc(@local_ctxt cx, @ty.t t) {\n     auto info = rec(\n         tydesc=gvar,\n         take_glue=take_glue,\n-        drop_glue=drop_glue\n+        drop_glue=drop_glue,\n+        cmp_glue=cmp_glue\n     );\n \n     ccx.tydescs.insert(t, @info);\n }\n \n+tag make_generic_glue_helper_fn {\n+    mgghf_single(val_and_ty_fn);\n+    mgghf_pair(val_pair_and_ty_fn);\n+}\n+\n // declare_tydesc() above must have been called first.\n fn define_tydesc(@local_ctxt cx, @ty.t t, vec[uint] ty_params) {\n     auto info = cx.ccx.tydescs.get(t);\n     auto gvar = info.tydesc;\n \n     auto tg = make_take_glue;\n-    auto take_glue = make_generic_glue(cx, t, info.take_glue, tg, ty_params);\n+    make_generic_glue(cx, t, info.take_glue, mgghf_single(tg), ty_params);\n     auto dg = make_drop_glue;\n-    auto drop_glue = make_generic_glue(cx, t, info.drop_glue, dg, ty_params);\n+    make_generic_glue(cx, t, info.drop_glue, mgghf_single(dg), ty_params);\n+    auto cg = make_cmp_glue;\n+    make_generic_glue(cx, t, info.cmp_glue, mgghf_pair(cg), ty_params);\n }\n \n-fn declare_generic_glue(@local_ctxt cx, @ty.t t, str name) -> ValueRef {\n-    auto llfnty = T_glue_fn(cx.ccx.tn);\n-\n+fn declare_generic_glue(@local_ctxt cx,\n+                        @ty.t t,\n+                        TypeRef llfnty,\n+                        str name) -> ValueRef {\n     auto gcx = @rec(path=vec(\"glue\", name) with *cx);\n     auto fn_name = mangle_name_by_type(gcx, t);\n     fn_name = sanitize(fn_name);\n     auto llfn = decl_internal_fastcall_fn(cx.ccx.llmod, fn_name, llfnty);\n     ret llfn;\n }\n \n-fn make_generic_glue(@local_ctxt cx, @ty.t t, ValueRef llfn,\n-                     val_and_ty_fn helper, vec[uint] ty_params) -> ValueRef {\n+fn make_generic_glue(@local_ctxt cx,\n+                     @ty.t t,\n+                     ValueRef llfn,\n+                     make_generic_glue_helper_fn helper,\n+                     vec[uint] ty_params) -> ValueRef {\n     auto fcx = new_fn_ctxt(cx, llfn);\n     auto bcx = new_top_block_ctxt(fcx);\n     auto lltop = bcx.llbb;\n@@ -1684,10 +1724,19 @@ fn make_generic_glue(@local_ctxt cx, @ty.t t, ValueRef llfn,\n         }\n         bcx.fcx.lltydescs = _vec.freeze[ValueRef](lltydescs);\n \n-        auto llrawptr = llvm.LLVMGetParam(llfn, 4u);\n-        auto llval = bcx.build.BitCast(llrawptr, llty);\n+        auto llrawptr0 = llvm.LLVMGetParam(llfn, 4u);\n+        auto llval0 = bcx.build.BitCast(llrawptr0, llty);\n \n-        re = helper(bcx, llval, t);\n+        alt (helper) {\n+            case (mgghf_single(?single_fn)) {\n+                re = single_fn(bcx, llval0, t);\n+            }\n+            case (mgghf_pair(?pair_fn)) {\n+                auto llrawptr1 = llvm.LLVMGetParam(llfn, 5u);\n+                auto llval1 = bcx.build.BitCast(llrawptr0, llty);\n+                re = pair_fn(bcx, llval0, llval1, t);\n+            }\n+        }\n     } else {\n         re = res(bcx, C_nil());\n     }\n@@ -1933,6 +1982,12 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n     ret res(next_cx, phi);\n }\n \n+fn make_cmp_glue(@block_ctxt cx, ValueRef v0, ValueRef v1, @ty.t t)\n+        -> result {\n+    ret res(cx, C_nil());   // TODO\n+}\n+\n+\n // Tag information\n \n type variant_info = rec(vec[@ty.t] args, @ty.t ctor_ty, ast.def_id id);"}]}