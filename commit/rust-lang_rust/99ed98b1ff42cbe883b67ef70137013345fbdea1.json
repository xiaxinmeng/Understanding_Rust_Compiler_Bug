{"sha": "99ed98b1ff42cbe883b67ef70137013345fbdea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWQ5OGIxZmY0MmNiZTg4M2I2N2VmNzAxMzcwMTMzNDVmYmRlYTE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:11:35Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T13:52:02Z"}, "message": "Move ScalarMaybeUndef into `value.rs`", "tree": {"sha": "afff7721c712db3b874a8a2853959bf839e52c20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afff7721c712db3b874a8a2853959bf839e52c20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ed98b1ff42cbe883b67ef70137013345fbdea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ed98b1ff42cbe883b67ef70137013345fbdea1", "html_url": "https://github.com/rust-lang/rust/commit/99ed98b1ff42cbe883b67ef70137013345fbdea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ed98b1ff42cbe883b67ef70137013345fbdea1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2108b6bc9534c1991b5d13a8f8738d4013ddee08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2108b6bc9534c1991b5d13a8f8738d4013ddee08", "html_url": "https://github.com/rust-lang/rust/commit/2108b6bc9534c1991b5d13a8f8738d4013ddee08"}], "stats": {"total": 258, "additions": 129, "deletions": 129}, "files": [{"sha": "509180a54f8594f73309522e1b68469db2228e8e", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 129, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/99ed98b1ff42cbe883b67ef70137013345fbdea1/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ed98b1ff42cbe883b67ef70137013345fbdea1/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=99ed98b1ff42cbe883b67ef70137013345fbdea1", "patch": "@@ -24,7 +24,7 @@ pub use self::error::{\n     FrameInfo, ConstEvalResult, ErrorHandled,\n };\n \n-pub use self::value::{Scalar, ConstValue};\n+pub use self::value::{Scalar, ConstValue, ScalarMaybeUndef};\n \n pub use self::allocation::{\n     Allocation, AllocationExtra,\n@@ -572,131 +572,3 @@ pub fn truncate(value: u128, size: Size) -> u128 {\n     // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n     (value << shift) >> shift\n }\n-\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n-    Scalar(Scalar<Tag, Id>),\n-    Undef,\n-}\n-\n-impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n-    #[inline(always)]\n-    fn from(s: Scalar<Tag>) -> Self {\n-        ScalarMaybeUndef::Scalar(s)\n-    }\n-}\n-\n-impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ScalarMaybeUndef::Undef => write!(f, \"uninitialized bytes\"),\n-            ScalarMaybeUndef::Scalar(s) => write!(f, \"{}\", s),\n-        }\n-    }\n-}\n-\n-impl<'tcx> ScalarMaybeUndef<()> {\n-    #[inline]\n-    pub fn with_default_tag<Tag>(self) -> ScalarMaybeUndef<Tag>\n-        where Tag: Default\n-    {\n-        match self {\n-            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.with_default_tag()),\n-            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n-        }\n-    }\n-}\n-\n-impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n-    #[inline]\n-    pub fn erase_tag(self) -> ScalarMaybeUndef\n-    {\n-        match self {\n-            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.erase_tag()),\n-            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn not_undef(self) -> EvalResult<'static, Scalar<Tag>> {\n-        match self {\n-            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n-            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n-        }\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer<Tag>> {\n-        self.not_undef()?.to_ptr()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n-        self.not_undef()?.to_bits(target_size)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n-        self.not_undef()?.to_bool()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_char(self) -> EvalResult<'tcx, char> {\n-        self.not_undef()?.to_char()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n-        self.not_undef()?.to_f32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n-        self.not_undef()?.to_f64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n-        self.not_undef()?.to_u8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n-        self.not_undef()?.to_u32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_u64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_usize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_usize(cx)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n-        self.not_undef()?.to_i8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n-        self.not_undef()?.to_i32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_i64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_isize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_isize(cx)\n-    }\n-}\n-\n-impl_stable_hash_for!(enum ::mir::interpret::ScalarMaybeUndef {\n-    Scalar(v),\n-    Undef\n-});"}, {"sha": "47c42c9431a210325e7e8ab9130268c22411ca83", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/99ed98b1ff42cbe883b67ef70137013345fbdea1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ed98b1ff42cbe883b67ef70137013345fbdea1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=99ed98b1ff42cbe883b67ef70137013345fbdea1", "patch": "@@ -392,3 +392,131 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n         Scalar::Ptr(ptr)\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n+    Scalar(Scalar<Tag, Id>),\n+    Undef,\n+}\n+\n+impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n+    #[inline(always)]\n+    fn from(s: Scalar<Tag>) -> Self {\n+        ScalarMaybeUndef::Scalar(s)\n+    }\n+}\n+\n+impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ScalarMaybeUndef::Undef => write!(f, \"uninitialized bytes\"),\n+            ScalarMaybeUndef::Scalar(s) => write!(f, \"{}\", s),\n+        }\n+    }\n+}\n+\n+impl<'tcx> ScalarMaybeUndef<()> {\n+    #[inline]\n+    pub fn with_default_tag<Tag>(self) -> ScalarMaybeUndef<Tag>\n+        where Tag: Default\n+    {\n+        match self {\n+            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.with_default_tag()),\n+            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n+        }\n+    }\n+}\n+\n+impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n+    #[inline]\n+    pub fn erase_tag(self) -> ScalarMaybeUndef\n+    {\n+        match self {\n+            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.erase_tag()),\n+            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn not_undef(self) -> EvalResult<'static, Scalar<Tag>> {\n+        match self {\n+            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n+            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer<Tag>> {\n+        self.not_undef()?.to_ptr()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n+        self.not_undef()?.to_bits(target_size)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n+        self.not_undef()?.to_bool()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_char(self) -> EvalResult<'tcx, char> {\n+        self.not_undef()?.to_char()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n+        self.not_undef()?.to_f32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n+        self.not_undef()?.to_f64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n+        self.not_undef()?.to_u8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n+        self.not_undef()?.to_u32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_u64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_usize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_usize(cx)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n+        self.not_undef()?.to_i8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n+        self.not_undef()?.to_i32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_i64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_isize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_isize(cx)\n+    }\n+}\n+\n+impl_stable_hash_for!(enum ::mir::interpret::ScalarMaybeUndef {\n+    Scalar(v),\n+    Undef\n+});"}]}