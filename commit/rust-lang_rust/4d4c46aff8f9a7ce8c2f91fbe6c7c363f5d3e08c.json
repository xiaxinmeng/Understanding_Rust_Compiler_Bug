{"sha": "4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGM0NmFmZjhmOWE3Y2U4YzJmOTFmYmU2YzdjMzYzZjVkM2UwOGM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-05T07:53:08Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-05T07:53:08Z"}, "message": "Merge #742\n\n742: Extern crate r=matklad a=flodiebold\n\nThis implements `extern crate` declarations by lowering them to (absolute) imports, and adds support for absolute paths. It also extracts the extern prelude from the per-module item map, and handles the special case of extern crates in the crate root adding to the extern prelude.\r\n\r\nThis means we finally resolve `Arc`, so it fixes #523 :smile: \n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "90473c4a67ac70ee40fde54a25b11d7768c41593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90473c4a67ac70ee40fde54a25b11d7768c41593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "html_url": "https://github.com/rust-lang/rust/commit/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "94d5d0d7e893a50bdd22ce4366ca15f083218d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d5d0d7e893a50bdd22ce4366ca15f083218d22", "html_url": "https://github.com/rust-lang/rust/commit/94d5d0d7e893a50bdd22ce4366ca15f083218d22"}, {"sha": "de4c5e381fb1adc25143dcd67af6c87f6d9789ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4c5e381fb1adc25143dcd67af6c87f6d9789ae", "html_url": "https://github.com/rust-lang/rust/commit/de4c5e381fb1adc25143dcd67af6c87f6d9789ae"}], "stats": {"total": 238, "additions": 190, "deletions": 48}, "files": [{"sha": "a58bf8f87bbb412b32f41845bce91197d4fdad91", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -134,7 +134,7 @@ impl Module {\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, _db: &impl HirDatabase) -> Option<Crate> {\n+    pub fn krate(&self, _db: &impl PersistentHirDatabase) -> Option<Crate> {\n         Some(self.krate)\n     }\n "}, {"sha": "681aa9a676898911b9a53a5a3a99ab06115b0c00", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -34,6 +34,7 @@ use crate::{\n /// module, the set of visible items.\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ItemMap {\n+    pub(crate) extern_prelude: FxHashMap<Name, ModuleDef>,\n     per_module: ArenaMap<ModuleId, ModuleScope>,\n }\n \n@@ -204,6 +205,7 @@ where\n     }\n \n     pub(crate) fn resolve(mut self) -> ItemMap {\n+        self.populate_extern_prelude();\n         for (&module_id, items) in self.input.iter() {\n             self.populate_module(module_id, Arc::clone(items));\n         }\n@@ -227,29 +229,19 @@ where\n         self.result\n     }\n \n+    fn populate_extern_prelude(&mut self) {\n+        for dep in self.krate.dependencies(self.db) {\n+            log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.krate);\n+            if let Some(module) = dep.krate.root_module(self.db) {\n+                self.result\n+                    .extern_prelude\n+                    .insert(dep.name.clone(), module.into());\n+            }\n+        }\n+    }\n+\n     fn populate_module(&mut self, module_id: ModuleId, input: Arc<LoweredModule>) {\n         let mut module_items = ModuleScope::default();\n-\n-        // Populate extern crates prelude\n-        {\n-            let root_id = module_id.crate_root(&self.module_tree);\n-            let file_id = root_id.file_id(&self.module_tree);\n-            let crate_graph = self.db.crate_graph();\n-            if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id.as_original_file())\n-            {\n-                let krate = Crate { crate_id };\n-                for dep in krate.dependencies(self.db) {\n-                    if let Some(module) = dep.krate.root_module(self.db) {\n-                        let def = module.into();\n-                        self.add_module_item(\n-                            &mut module_items,\n-                            dep.name.clone(),\n-                            PerNs::types(def),\n-                        );\n-                    }\n-                }\n-            };\n-        }\n         for (import_id, import_data) in input.imports.iter() {\n             if let Some(last_segment) = import_data.path.segments.iter().last() {\n                 if !import_data.is_glob {\n@@ -327,7 +319,16 @@ where\n                 .alias\n                 .clone()\n                 .unwrap_or_else(|| last_segment.name.clone());\n-            log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def,);\n+            log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n+\n+            // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658\n+            if let Some(root_module) = self.krate.root_module(self.db) {\n+                if import.is_extern_crate && module_id == root_module.module_id {\n+                    if let Some(def) = def.take_types() {\n+                        self.result.extern_prelude.insert(name.clone(), def);\n+                    }\n+                }\n+            }\n             self.update(module_id, |items| {\n                 let res = Resolution {\n                     def,\n@@ -389,24 +390,53 @@ impl ItemMap {\n         original_module: Module,\n         path: &Path,\n     ) -> (PerNs<ModuleDef>, ReachedFixedPoint) {\n-        let mut curr_per_ns: PerNs<ModuleDef> = PerNs::types(match path.kind {\n-            PathKind::Crate => original_module.crate_root(db).into(),\n-            PathKind::Self_ | PathKind::Plain => original_module.into(),\n+        let mut segments = path.segments.iter().enumerate();\n+        let mut curr_per_ns: PerNs<ModuleDef> = match path.kind {\n+            PathKind::Crate => PerNs::types(original_module.crate_root(db).into()),\n+            PathKind::Self_ => PerNs::types(original_module.into()),\n+            PathKind::Plain => {\n+                let segment = match segments.next() {\n+                    Some((_, segment)) => segment,\n+                    None => return (PerNs::none(), ReachedFixedPoint::Yes),\n+                };\n+                // Resolve in:\n+                //  - current module / scope\n+                //  - extern prelude\n+                match self[original_module.module_id].items.get(&segment.name) {\n+                    Some(res) if !res.def.is_none() => res.def,\n+                    _ => {\n+                        if let Some(def) = self.extern_prelude.get(&segment.name) {\n+                            PerNs::types(*def)\n+                        } else {\n+                            return (PerNs::none(), ReachedFixedPoint::No);\n+                        }\n+                    }\n+                }\n+            }\n             PathKind::Super => {\n                 if let Some(p) = original_module.parent(db) {\n-                    p.into()\n+                    PerNs::types(p.into())\n                 } else {\n                     log::debug!(\"super path in root module\");\n                     return (PerNs::none(), ReachedFixedPoint::Yes);\n                 }\n             }\n             PathKind::Abs => {\n-                // TODO: absolute use is not supported\n-                return (PerNs::none(), ReachedFixedPoint::Yes);\n+                // 2018-style absolute path -- only extern prelude\n+                let segment = match segments.next() {\n+                    Some((_, segment)) => segment,\n+                    None => return (PerNs::none(), ReachedFixedPoint::Yes),\n+                };\n+                if let Some(def) = self.extern_prelude.get(&segment.name) {\n+                    log::debug!(\"absolute path {:?} resolved to crate {:?}\", path, def);\n+                    PerNs::types(*def)\n+                } else {\n+                    return (PerNs::none(), ReachedFixedPoint::No); // extern crate declarations can add to the extern prelude\n+                }\n             }\n-        });\n+        };\n \n-        for (i, segment) in path.segments.iter().enumerate() {\n+        for (i, segment) in segments {\n             let curr = match curr_per_ns.as_ref().take_types() {\n                 Some(r) => r,\n                 None => {"}, {"sha": "7e6e48ae00d35ac10a20dc7a95ff883635b9d57b", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -8,7 +8,7 @@ use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    SourceItemId, Path, ModuleSource, Name,\n+    SourceItemId, Path, PathKind, ModuleSource, Name,\n     HirFileId, MacroCallLoc, AsName, PerNs, Function,\n     ModuleDef, Module, Struct, Enum, Const, Static, Trait, Type,\n     ids::LocationCtx, PersistentHirDatabase,\n@@ -23,6 +23,7 @@ pub(super) struct ImportData {\n     pub(super) path: Path,\n     pub(super) alias: Option<Name>,\n     pub(super) is_glob: bool,\n+    pub(super) is_extern_crate: bool,\n }\n \n /// A set of items and imports declared inside a module, without relation to\n@@ -186,8 +187,22 @@ impl LoweredModule {\n             ast::ModuleItemKind::UseItem(it) => {\n                 self.add_use_item(source_map, it);\n             }\n-            ast::ModuleItemKind::ExternCrateItem(_) => {\n-                // TODO\n+            ast::ModuleItemKind::ExternCrateItem(it) => {\n+                // Lower `extern crate x` to `use ::x`. This is kind of cheating\n+                // and only works if we always interpret absolute paths in the\n+                // 2018 style; otherwise `::x` could also refer to a module in\n+                // the crate root.\n+                if let Some(name_ref) = it.name_ref() {\n+                    let mut path = Path::from_name_ref(name_ref);\n+                    path.kind = PathKind::Abs;\n+                    let alias = it.alias().and_then(|a| a.name()).map(AsName::as_name);\n+                    self.imports.alloc(ImportData {\n+                        path,\n+                        alias,\n+                        is_glob: false,\n+                        is_extern_crate: true,\n+                    });\n+                }\n             }\n             ast::ModuleItemKind::ConstDef(it) => {\n                 if let Some(name) = it.name() {\n@@ -215,6 +230,7 @@ impl LoweredModule {\n                 path,\n                 alias,\n                 is_glob: segment.is_none(),\n+                is_extern_crate: false,\n             });\n             if let Some(segment) = segment {\n                 source_map.insert(import, segment)"}, {"sha": "0654dbaa13a01d2b46fcddc94a676ea6deadb6f9", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -329,7 +329,49 @@ fn item_map_across_crates() {\n         module.module_id,\n         \"\n             Baz: t v\n-            test_crate: t\n+        \",\n+    );\n+}\n+\n+#[test]\n+fn extern_crate_rename() {\n+    let (mut db, sr) = MockDatabase::with_files(\n+        \"\n+        //- /main.rs\n+        extern crate alloc as alloc_crate;\n+\n+        mod alloc;\n+        mod sync;\n+\n+        //- /sync.rs\n+        use alloc_crate::Arc;\n+\n+        //- /lib.rs\n+        struct Arc;\n+    \",\n+    );\n+    let main_id = sr.files[RelativePath::new(\"/main.rs\")];\n+    let sync_id = sr.files[RelativePath::new(\"/sync.rs\")];\n+    let lib_id = sr.files[RelativePath::new(\"/lib.rs\")];\n+\n+    let mut crate_graph = CrateGraph::default();\n+    let main_crate = crate_graph.add_crate_root(main_id);\n+    let lib_crate = crate_graph.add_crate_root(lib_id);\n+    crate_graph\n+        .add_dep(main_crate, \"alloc\".into(), lib_crate)\n+        .unwrap();\n+\n+    db.set_crate_graph(Arc::new(crate_graph));\n+\n+    let module = crate::source_binder::module_from_file_id(&db, sync_id).unwrap();\n+    let krate = module.krate(&db).unwrap();\n+    let item_map = db.item_map(krate);\n+\n+    check_module_item_map(\n+        &item_map,\n+        module.module_id,\n+        \"\n+            Arc: t v\n         \",\n     );\n }\n@@ -361,8 +403,6 @@ fn import_across_source_roots() {\n \n     let main_id = sr2.files[RelativePath::new(\"/main.rs\")];\n \n-    eprintln!(\"lib = {:?}, main = {:?}\", lib_id, main_id);\n-\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n@@ -381,7 +421,6 @@ fn import_across_source_roots() {\n         module.module_id,\n         \"\n             C: t v\n-            test_crate: t\n         \",\n     );\n }\n@@ -423,7 +462,6 @@ fn reexport_across_crates() {\n         module.module_id,\n         \"\n             Baz: t v\n-            test_crate: t\n         \",\n     );\n }"}, {"sha": "5ca7bacb5d86ed29979aafc7d08e59136f7c2a62", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -197,7 +197,10 @@ impl Scope {\n                     .entries()\n                     .for_each(|(name, res)| {\n                         f(name.clone(), res.def.map(Resolution::Def));\n-                    })\n+                    });\n+                m.item_map.extern_prelude.iter().for_each(|(name, def)| {\n+                    f(name.clone(), PerNs::types(Resolution::Def(*def)));\n+                });\n             }\n             Scope::GenericParams(gp) => {\n                 for param in &gp.params {"}, {"sha": "8674b1e66c15e1f034760548a6d712c578078da9", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -110,6 +110,20 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_extern_prelude() {\n+        check_reference_completion(\n+            \"extern_prelude\",\n+            r\"\n+            //- /lib.rs\n+            use <|>;\n+\n+            //- /other_crate/lib.rs\n+            // nothing here\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn completes_module_items_in_nested_modules() {\n         check_reference_completion("}, {"sha": "d0e3a61886cd8b2e35811d12cb91ea200d688b6b", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__extern_prelude.snap", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__extern_prelude.snap", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__extern_prelude.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__extern_prelude.snap?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -0,0 +1,22 @@\n+---\n+created: \"2019-02-04T21:08:32.615556587+00:00\"\n+creator: insta@0.5.3\n+expression: kind_completions\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"other_crate\",\n+        kind: Some(\n+            Module\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [4; 4),\n+        text_edit: None\n+    }\n+]"}, {"sha": "834b3054157562b508ed7e7698c198cd2f4b8aab", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -86,17 +86,25 @@ impl MockAnalysis {\n         let mut change = AnalysisChange::new();\n         change.add_root(source_root, true);\n         let mut crate_graph = CrateGraph::default();\n+        let mut root_crate = None;\n         for (i, (path, contents)) in self.files.into_iter().enumerate() {\n             assert!(path.starts_with('/'));\n             let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n             let file_id = FileId(i as u32 + 1);\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n-                crate_graph.add_crate_root(file_id);\n+                root_crate = Some(crate_graph.add_crate_root(file_id));\n+            } else if path.ends_with(\"/lib.rs\") {\n+                let other_crate = crate_graph.add_crate_root(file_id);\n+                let crate_name = path.parent().unwrap().file_name().unwrap();\n+                if let Some(root_crate) = root_crate {\n+                    crate_graph\n+                        .add_dep(root_crate, crate_name.into(), other_crate)\n+                        .unwrap();\n+                }\n             }\n             change.add_file(source_root, file_id, path, Arc::new(contents));\n         }\n         change.set_crate_graph(crate_graph);\n-        // change.set_file_resolver(Arc::new(file_map));\n         host.apply_change(change);\n         host\n     }"}, {"sha": "fb46856716b363d2380792431f8aace4dbfa3f21", "filename": "crates/ra_lsp_server/src/project_model/sysroot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -127,6 +127,7 @@ rustc_tsan\n syntax\";\n \n const STD_DEPS: &str = \"\n+alloc\n alloc_jemalloc\n alloc_system\n core"}, {"sha": "a8d60e882d759a1f210983a86ee49d3ba6bac408", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -970,7 +970,15 @@ impl ToOwned for ExternCrateItem {\n }\n \n \n-impl ExternCrateItem {}\n+impl ExternCrateItem {\n+    pub fn name_ref(&self) -> Option<&NameRef> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn alias(&self) -> Option<&Alias> {\n+        super::child_opt(self)\n+    }\n+}\n \n // FalseKw\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "2ed1fd1b88668382139c2a90e8bc794a7b310a89", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -601,7 +601,9 @@ Grammar(\n         \"UseTreeList\": (\n             collections: [[\"use_trees\", \"UseTree\"]]\n         ),\n-        \"ExternCrateItem\": (),\n+        \"ExternCrateItem\": (\n+            options: [\"NameRef\", \"Alias\"],\n+        ),\n         \"ArgList\": (\n             collections: [\n                 [\"args\", \"Expr\"]"}, {"sha": "84c18a2932ac0288c836e8d309dcd62108622a71", "filename": "crates/ra_syntax/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems.rs?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -247,7 +247,7 @@ fn extern_crate_item(p: &mut Parser) {\n     p.bump();\n     assert!(p.at(CRATE_KW));\n     p.bump();\n-    name(p);\n+    name_ref(p);\n     opt_alias(p);\n     p.expect(SEMI);\n }"}, {"sha": "a7b4287878f47545e5f3cffb2329bd270f47d7c3", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0060_extern_crate.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0060_extern_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0060_extern_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0060_extern_crate.txt?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -4,7 +4,7 @@ SOURCE_FILE@[0; 18)\n     WHITESPACE@[6; 7)\n     CRATE_KW@[7; 12)\n     WHITESPACE@[12; 13)\n-    NAME@[13; 16)\n+    NAME_REF@[13; 16)\n       IDENT@[13; 16) \"foo\"\n     SEMI@[16; 17)\n   WHITESPACE@[17; 18)"}, {"sha": "5558d952e5374af68fc3bc23b213c5e371df5bdf", "filename": "crates/ra_syntax/tests/data/parser/ok/0007_extern_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.txt?ref=4d4c46aff8f9a7ce8c2f91fbe6c7c363f5d3e08c", "patch": "@@ -4,7 +4,7 @@ SOURCE_FILE@[0; 43)\n     WHITESPACE@[6; 7)\n     CRATE_KW@[7; 12)\n     WHITESPACE@[12; 13)\n-    NAME@[13; 16)\n+    NAME_REF@[13; 16)\n       IDENT@[13; 16) \"foo\"\n     SEMI@[16; 17)\n   WHITESPACE@[17; 18)\n@@ -13,7 +13,7 @@ SOURCE_FILE@[0; 43)\n     WHITESPACE@[24; 25)\n     CRATE_KW@[25; 30)\n     WHITESPACE@[30; 31)\n-    NAME@[31; 34)\n+    NAME_REF@[31; 34)\n       IDENT@[31; 34) \"foo\"\n     WHITESPACE@[34; 35)\n     ALIAS@[35; 41)"}]}