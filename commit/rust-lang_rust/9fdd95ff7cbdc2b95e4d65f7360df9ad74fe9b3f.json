{"sha": "9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZGQ5NWZmN2NiZGMyYjk1ZTRkNjVmNzM2MGRmOWFkNzRmZTliM2Y=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-28T19:09:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-28T19:09:18Z"}, "message": "Rollup merge of #80383 - RalfJung:wrapping-ptr-arithmetic, r=dtolnay\n\nclarify wrapping ptr arithmetic docs\n\nFixes https://github.com/rust-lang/rust/issues/80306\n\n`@steffahn` please let me know if this helps avoid the misunderstanding. :)", "tree": {"sha": "1a7cc024ebdd7fda35277d9cd4b02ad4e7c0d2c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7cc024ebdd7fda35277d9cd4b02ad4e7c0d2c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6i1fCRBK7hj4Ov3rIwAAdHIIAGQNMhaR25HYDER5D53HdV8P\nz/Zv0E5wuFddl/Hbwae7iYgEMysRhFMSrJU6EnsTqKj+bbYUbp1R5s/rJUzE7o6F\nklRLXv0X6d4bZCo9Za1N4B6nHYZbu404KoBQz5h0L/eB075pFnOXk7Hxmy6O1HUJ\nJRrofxL0wYmPxjVOzY+UV8qKDaytrnfKKAkowpa9+/aT9KCBoP1aV/ysjaEvwcxb\nfryBfJj4/GkwKcDRnEm3TG5Vs9buYcSYyXEM/i+6zIITYOWJ/bx6uDTU5pS6ngez\nnhnh1g0S8Ps7wIS6ZSYjE1VOm6QWFy4BvtFT3AJDgXLC0B5mHPQo4US9dpcUEpM=\n=DKyu\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a7cc024ebdd7fda35277d9cd4b02ad4e7c0d2c1\nparent 2987785df3d46d5ff144a5c67fbb8f5cca798d78\nparent 8543388beb52785897b87e3f0a5ffd3c8560f956\nauthor Mara Bos <m-ou.se@m-ou.se> 1609182558 +0000\ncommitter GitHub <noreply@github.com> 1609182558 +0000\n\nRollup merge of #80383 - RalfJung:wrapping-ptr-arithmetic, r=dtolnay\n\nclarify wrapping ptr arithmetic docs\n\nFixes https://github.com/rust-lang/rust/issues/80306\n\n`@steffahn` please let me know if this helps avoid the misunderstanding. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f", "html_url": "https://github.com/rust-lang/rust/commit/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2987785df3d46d5ff144a5c67fbb8f5cca798d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2987785df3d46d5ff144a5c67fbb8f5cca798d78", "html_url": "https://github.com/rust-lang/rust/commit/2987785df3d46d5ff144a5c67fbb8f5cca798d78"}, {"sha": "8543388beb52785897b87e3f0a5ffd3c8560f956", "url": "https://api.github.com/repos/rust-lang/rust/commits/8543388beb52785897b87e3f0a5ffd3c8560f956", "html_url": "https://github.com/rust-lang/rust/commit/8543388beb52785897b87e3f0a5ffd3c8560f956"}], "stats": {"total": 184, "additions": 112, "deletions": 72}, "files": [{"sha": "38519f759ae0504cdd483b396f1c451f4945ac70", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 56, "deletions": 36, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f", "patch": "@@ -232,23 +232,27 @@ impl<T: ?Sized> *const T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as usize) / size_of::<T>())`\n-    /// is *not* the same as `y`, and dereferencing it is undefined behavior\n-    /// unless `x` and `y` point into the same allocated object.\n+    /// In other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n-    /// Compared to [`offset`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`offset`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n+    ///\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())` is always the same as `x`. In other\n+    /// words, leaving the allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -571,19 +575,27 @@ impl<T: ?Sized> *const T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`add`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`add`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`add`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -628,19 +640,27 @@ impl<T: ?Sized> *const T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`sub`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`sub`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`sub`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there."}, {"sha": "92f4e431de499dbf24ae88abeeb1be3020b0a97b", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 56, "deletions": 36, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9fdd95ff7cbdc2b95e4d65f7360df9ad74fe9b3f", "patch": "@@ -238,23 +238,27 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as usize) / size_of::<T>())`\n-    /// is *not* the same as `y`, and dereferencing it is undefined behavior\n-    /// unless `x` and `y` point into the same allocated object.\n+    /// In other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n-    /// Compared to [`offset`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`offset`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n+    ///\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())` is always the same as `x`. In other\n+    /// words, leaving the allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -678,19 +682,27 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`add`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`add`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`add`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -735,19 +747,27 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does *not* make `z`\n+    /// the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still\n+    /// attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless\n+    /// `x` and `y` point into the same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`sub`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`sub`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`sub`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// The delayed check only considers the value of the pointer that was dereferenced, not the\n+    /// intermediate values used during the computation of the final result. For example,\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there."}]}