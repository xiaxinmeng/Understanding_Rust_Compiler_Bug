{"sha": "e590b934998c85175b85cb13842163a27a221dc7", "node_id": "C_kwDOAAsO6NoAKGU1OTBiOTM0OTk4Yzg1MTc1Yjg1Y2IxMzg0MjE2M2EyN2EyMjFkYzc", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-14T08:20:20Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-14T23:23:46Z"}, "message": "make error emitted on `impl &Trait` nicer", "tree": {"sha": "801404caaa55f47198416ef7b072efe47a209ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801404caaa55f47198416ef7b072efe47a209ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e590b934998c85175b85cb13842163a27a221dc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmPDOYIVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNE5XUP/2Y0M5C+t2EaN2BURrd2a7n61BVf\n40KP3kme74vuPn1OU0cnD7ySL8rXVLn3jypgcviWpKlyaFe/jPgm5VUSrCZHJYeY\nLvNS30UEGY2MFKU1ju50W14dMi7WrEDQUMSHVH4L6uhM9cxETqU8Tm8PUrPQH1Tg\n+MXPzKtXshCCsuAaw2/ESLmYtQEFZ737rHpbJF4ZSyAxOHXLB8OCP+v64fVcdDYL\n0ePB+Zo2adh9E16B9wCOnXuE+0BVq9tMBJSRB3SmIkHrb2orNjB9vLu2+2v/R2ZE\n7a1kqZSmMekKlKEhXHXdH5vRfZVbNbySHzuUhm4YfS252Tl/tv9OS3G8ZCBiGdnb\nLI1Z4H6LPwTAVr4SKP7BTKg80ffKzw0FSc4C3FIdz+ougYg2it0MwloIo+TUUofD\nJSnFFl3qx3x+twdl9+GzKzWrSNjuAl442VJlZaEFhhwoZTofCaeXKAk1TjM3ZX0b\n8xsfYl0MKEhrqmeN7WMzqpE1h43xIeQ2Fe3QkbNL0L766vtGt5GMb6MJrZuPXERP\nU6kwFDCAtCI05NWYvWy9bYL87nWt7s9zqFsXt2pHCdlYEfXYsjbRSZiUDlmqR7CN\nfJMr+A+7oN5U3MbCNtqSuG8IV5osSu2Xuq9UAe2m4vi8CmKgtrsrYoe3pxOVIaD7\n2QfIm6GJ5PZduHx5\n=kq2T\n-----END PGP SIGNATURE-----", "payload": "tree 801404caaa55f47198416ef7b072efe47a209ada\nparent ca5d92d789c94060fc32bfc4a778fb16904756ea\nauthor Ezra Shaw <ezrasure@outlook.com> 1673684420 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1673738626 +1300\n\nmake error emitted on `impl &Trait` nicer\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e590b934998c85175b85cb13842163a27a221dc7", "html_url": "https://github.com/rust-lang/rust/commit/e590b934998c85175b85cb13842163a27a221dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e590b934998c85175b85cb13842163a27a221dc7/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5d92d789c94060fc32bfc4a778fb16904756ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5d92d789c94060fc32bfc4a778fb16904756ea", "html_url": "https://github.com/rust-lang/rust/commit/ca5d92d789c94060fc32bfc4a778fb16904756ea"}], "stats": {"total": 159, "additions": 154, "deletions": 5}, "files": [{"sha": "9317579f70dd5967cb5e80382c8cab541c58ecea", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e590b934998c85175b85cb13842163a27a221dc7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e590b934998c85175b85cb13842163a27a221dc7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e590b934998c85175b85cb13842163a27a221dc7", "patch": "@@ -2032,7 +2032,8 @@ impl Clone for Ty {\n impl Ty {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) | TyKind::Ptr(MutTy { ty, .. }) = &final_ty.kind\n+        {\n             final_ty = ty;\n         }\n         final_ty"}, {"sha": "aedebd0fb70624fad1b66a3fd32ff4569f6edca9", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e590b934998c85175b85cb13842163a27a221dc7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e590b934998c85175b85cb13842163a27a221dc7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e590b934998c85175b85cb13842163a27a221dc7", "patch": "@@ -727,11 +727,13 @@ impl<'a> Parser<'a> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n \n+        // In addition to looping while we find generic bounds:\n+        // We continue even if we find a keyword. This is necessary for error recovery on,\n+        // for example, `impl fn()`. The only keyword that can go after generic bounds is\n+        // `where`, so stop if it's it.\n+        // We also continue if we find types (not traits), again for error recovery.\n         while self.can_begin_bound()\n-            // Continue even if we find a keyword.\n-            // This is necessary for error recover on, for example, `impl fn()`.\n-            //\n-            // The only keyword that can go after generic bounds is `where`, so stop if it's it.\n+            || self.token.can_begin_type()\n             || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))\n         {\n             if self.token.is_keyword(kw::Dyn) {\n@@ -938,6 +940,35 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |tok| tok.kind == TokenKind::OpenDelim(Delimiter::Parenthesis))\n             && let Some(path) = self.recover_path_from_fn()\n         {\n+            path\n+        } else if !self.token.is_path_start() && self.token.can_begin_type() && let Ok(ty) = self.parse_ty_no_plus() {\n+            // Instead of finding a path (a trait), we found a type.\n+            let mut err = self.struct_span_err(ty.span, \"expected a trait, found type\");\n+\n+            // If we can recover, try to extract a path from the type. Note\n+            // that we do not use the try operator when parsing the type because\n+            // if it fails then we get a parser error which we don't want (we're trying\n+            // to recover from errors, not make more).\n+            let path = if self.may_recover()\n+                && matches!(ty.kind, TyKind::Ptr(..) | TyKind::Ref(..))\n+                && let TyKind::Path(_, path) = &ty.peel_refs().kind {\n+                // Just get the indirection part of the type.\n+                let span = ty.span.until(path.span);\n+\n+                err.span_suggestion_verbose(\n+                    span,\n+                    \"consider removing the indirection\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+\n+                path.clone()\n+            } else {\n+                return Err(err);\n+            };\n+\n+            err.emit();\n+\n             path\n         } else {\n             self.parse_path(PathStyle::Type)?"}, {"sha": "c4b02ee81ec8f65e7dce2f0ef064167be0f83625", "filename": "tests/ui/generics/issue-106694.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e590b934998c85175b85cb13842163a27a221dc7/tests%2Fui%2Fgenerics%2Fissue-106694.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e590b934998c85175b85cb13842163a27a221dc7/tests%2Fui%2Fgenerics%2Fissue-106694.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-106694.rs?ref=e590b934998c85175b85cb13842163a27a221dc7", "patch": "@@ -0,0 +1,24 @@\n+trait Trait {}\n+\n+fn foo(_: impl &Trait) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn bar<T: &Trait>(_: T) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn foo_bad(_: impl &BadTrait) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn bar_bad<T: &BadTrait>(_: T) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn main() {}"}, {"sha": "235b8982a99c6e9346308a20a0ce4327534414b6", "filename": "tests/ui/generics/issue-106694.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e590b934998c85175b85cb13842163a27a221dc7/tests%2Fui%2Fgenerics%2Fissue-106694.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e590b934998c85175b85cb13842163a27a221dc7/tests%2Fui%2Fgenerics%2Fissue-106694.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-106694.stderr?ref=e590b934998c85175b85cb13842163a27a221dc7", "patch": "@@ -0,0 +1,93 @@\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:3:16\n+   |\n+LL | fn foo(_: impl &Trait) {}\n+   |                ^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn foo(_: impl &Trait) {}\n+LL + fn foo(_: impl Trait) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:6:11\n+   |\n+LL | fn bar<T: &Trait>(_: T) {}\n+   |           ^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn bar<T: &Trait>(_: T) {}\n+LL + fn bar<T: Trait>(_: T) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:9:35\n+   |\n+LL | fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+   |                                   ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+LL + fn partially_correct_impl(_: impl Trait + Copy) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:12:20\n+   |\n+LL | fn foo_bad(_: impl &BadTrait) {}\n+   |                    ^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn foo_bad(_: impl &BadTrait) {}\n+LL + fn foo_bad(_: impl BadTrait) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:16:15\n+   |\n+LL | fn bar_bad<T: &BadTrait>(_: T) {}\n+   |               ^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn bar_bad<T: &BadTrait>(_: T) {}\n+LL + fn bar_bad<T: BadTrait>(_: T) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:20:39\n+   |\n+LL | fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+   |                                       ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+LL + fn partially_correct_impl_bad(_: impl BadTrait + Copy) {}\n+   |\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:12:21\n+   |\n+LL | fn foo_bad(_: impl &BadTrait) {}\n+   |                     ^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:16:16\n+   |\n+LL | fn bar_bad<T: &BadTrait>(_: T) {}\n+   |                ^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:20:48\n+   |\n+LL | fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+   |                                                ^^^^^^^^ not found in this scope\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}]}