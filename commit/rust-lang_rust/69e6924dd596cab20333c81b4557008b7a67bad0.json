{"sha": "69e6924dd596cab20333c81b4557008b7a67bad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZTY5MjRkZDU5NmNhYjIwMzMzYzgxYjQ1NTcwMDhiN2E2N2JhZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:24:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:24:27Z"}, "message": "Use Handle/Actor terminology for flycheck", "tree": {"sha": "1cbafc99095060a580c4454a2588732d8311f3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbafc99095060a580c4454a2588732d8311f3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e6924dd596cab20333c81b4557008b7a67bad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e6924dd596cab20333c81b4557008b7a67bad0", "html_url": "https://github.com/rust-lang/rust/commit/69e6924dd596cab20333c81b4557008b7a67bad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e6924dd596cab20333c81b4557008b7a67bad0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "html_url": "https://github.com/rust-lang/rust/commit/659b16981a19b3b47f63e6cd4b7f668775e8e9a4"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "6751e5c389815982e19312b774908dc29226f406", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69e6924dd596cab20333c81b4557008b7a67bad0/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e6924dd596cab20333c81b4557008b7a67bad0/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=69e6924dd596cab20333c81b4557008b7a67bad0", "patch": "@@ -48,21 +48,21 @@ impl fmt::Display for FlycheckConfig {\n /// diagnostics based on the output.\n /// The spawned thread is shut down when this struct is dropped.\n #[derive(Debug)]\n-pub struct Flycheck {\n+pub struct FlycheckHandle {\n     // XXX: drop order is significant\n     cmd_send: Sender<CheckCommand>,\n     handle: jod_thread::JoinHandle<()>,\n     pub task_recv: Receiver<CheckTask>,\n }\n \n-impl Flycheck {\n-    pub fn new(config: FlycheckConfig, workspace_root: PathBuf) -> Flycheck {\n+impl FlycheckHandle {\n+    pub fn spawn(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckHandle {\n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            FlycheckThread::new(config, workspace_root).run(&task_send, &cmd_recv);\n+            FlycheckActor::new(config, workspace_root).run(&task_send, &cmd_recv);\n         });\n-        Flycheck { task_recv, cmd_send, handle }\n+        FlycheckHandle { task_recv, cmd_send, handle }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n@@ -95,7 +95,7 @@ pub enum CheckCommand {\n     Update,\n }\n \n-struct FlycheckThread {\n+struct FlycheckActor {\n     config: FlycheckConfig,\n     workspace_root: PathBuf,\n     last_update_req: Option<Instant>,\n@@ -109,9 +109,9 @@ struct FlycheckThread {\n     check_process: Option<jod_thread::JoinHandle<()>>,\n }\n \n-impl FlycheckThread {\n-    fn new(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckThread {\n-        FlycheckThread {\n+impl FlycheckActor {\n+    fn new(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckActor {\n+        FlycheckActor {\n             config,\n             workspace_root,\n             last_update_req: None,"}, {"sha": "2a7111a888c544927fabccf65bf98bdf74653f38", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69e6924dd596cab20333c81b4557008b7a67bad0/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e6924dd596cab20333c81b4557008b7a67bad0/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=69e6924dd596cab20333c81b4557008b7a67bad0", "patch": "@@ -9,7 +9,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_db::{CrateId, SourceRoot, VfsPath};\n-use ra_flycheck::{Flycheck, FlycheckConfig};\n+use ra_flycheck::{FlycheckConfig, FlycheckHandle};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use stdx::format_to;\n@@ -27,12 +27,15 @@ use crate::{\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) -> Option<Flycheck> {\n+fn create_flycheck(\n+    workspaces: &[ProjectWorkspace],\n+    config: &FlycheckConfig,\n+) -> Option<FlycheckHandle> {\n     // FIXME: Figure out the multi-workspace situation\n     workspaces.iter().find_map(move |w| match w {\n         ProjectWorkspace::Cargo { cargo, .. } => {\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            Some(Flycheck::new(config.clone(), cargo_project_root.into()))\n+            Some(FlycheckHandle::spawn(config.clone(), cargo_project_root.into()))\n         }\n         ProjectWorkspace::Json { .. } => {\n             log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n@@ -63,7 +66,7 @@ pub(crate) struct GlobalState {\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) loader: Box<dyn vfs::loader::Handle>,\n     pub(crate) task_receiver: Receiver<vfs::loader::Message>,\n-    pub(crate) flycheck: Option<Flycheck>,\n+    pub(crate) flycheck: Option<FlycheckHandle>,\n     pub(crate) diagnostics: DiagnosticCollection,\n     pub(crate) mem_docs: FxHashSet<VfsPath>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,"}]}