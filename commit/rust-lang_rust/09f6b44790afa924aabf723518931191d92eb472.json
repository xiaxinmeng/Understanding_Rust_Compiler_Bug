{"sha": "09f6b44790afa924aabf723518931191d92eb472", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZjZiNDQ3OTBhZmE5MjRhYWJmNzIzNTE4OTMxMTkxZDkyZWI0NzI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-08-27T04:22:31Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-08-27T04:22:31Z"}, "message": "Simplify some code in rustdoc's simplify", "tree": {"sha": "409e6d5d78562496cc24fdeff0c155e59a667551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/409e6d5d78562496cc24fdeff0c155e59a667551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09f6b44790afa924aabf723518931191d92eb472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09f6b44790afa924aabf723518931191d92eb472", "html_url": "https://github.com/rust-lang/rust/commit/09f6b44790afa924aabf723518931191d92eb472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09f6b44790afa924aabf723518931191d92eb472/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c015927af3604ec5305e078c1a57c81901f81190", "url": "https://api.github.com/repos/rust-lang/rust/commits/c015927af3604ec5305e078c1a57c81901f81190", "html_url": "https://github.com/rust-lang/rust/commit/c015927af3604ec5305e078c1a57c81901f81190"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "73bc0386326ce72838687c4b6d77a8e793d322f6", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/09f6b44790afa924aabf723518931191d92eb472/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f6b44790afa924aabf723518931191d92eb472/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=09f6b44790afa924aabf723518931191d92eb472", "patch": "@@ -35,7 +35,7 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n                 match ty {\n                     clean::Generic(s) => params.entry(s).or_default()\n                                                .extend(bounds),\n-                    t => tybounds.push((t, ty_bounds(bounds))),\n+                    t => tybounds.push((t, bounds)),\n                 }\n             }\n             WP::RegionPredicate { lifetime, bounds } => {\n@@ -45,11 +45,6 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n         }\n     }\n \n-    // Simplify the type parameter bounds on all the generics\n-    let mut params = params.into_iter().map(|(k, v)| {\n-        (k, ty_bounds(v))\n-    }).collect::<BTreeMap<_, _>>();\n-\n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates\n     equalities.retain(|&(ref lhs, ref rhs)| {\n@@ -73,7 +68,7 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     // And finally, let's reassemble everything\n     let mut clauses = Vec::new();\n     clauses.extend(lifetimes.into_iter().map(|(lt, bounds)| {\n-        WP::RegionPredicate { lifetime: lt, bounds: bounds }\n+        WP::RegionPredicate { lifetime: lt, bounds }\n     }));\n     clauses.extend(params.into_iter().map(|(k, v)| {\n         WP::BoundPredicate {\n@@ -82,10 +77,10 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n         }\n     }));\n     clauses.extend(tybounds.into_iter().map(|(ty, bounds)| {\n-        WP::BoundPredicate { ty: ty, bounds: bounds }\n+        WP::BoundPredicate { ty, bounds }\n     }));\n     clauses.extend(equalities.into_iter().map(|(lhs, rhs)| {\n-        WP::EqPredicate { lhs: lhs, rhs: rhs }\n+        WP::EqPredicate { lhs, rhs }\n     }));\n     clauses\n }\n@@ -137,18 +132,14 @@ pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericP\n     for param in &mut params {\n         match param.kind {\n             clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = ty_bounds(mem::take(bounds));\n+                *bounds = mem::take(bounds);\n             }\n             _ => panic!(\"expected only type parameters\"),\n         }\n     }\n     params\n }\n \n-fn ty_bounds(bounds: Vec<clean::GenericBound>) -> Vec<clean::GenericBound> {\n-    bounds\n-}\n-\n fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId,\n                                trait_: DefId) -> bool {\n     if child == trait_ {"}]}