{"sha": "aaebae973f7a4fafd24cb6c9fad7a6beba205b74", "node_id": "C_kwDOAAsO6NoAKGFhZWJhZTk3M2Y3YTRmYWZkMjRjYjZjOWZhZDdhNmJlYmEyMDViNzQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-18T21:17:44Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-01-18T21:17:44Z"}, "message": "Add Result::{is_ok_with, is_err_with}.", "tree": {"sha": "eb7cb061ee9a6bf8e956e9439787122c7d59956c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb7cb061ee9a6bf8e956e9439787122c7d59956c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaebae973f7a4fafd24cb6c9fad7a6beba205b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaebae973f7a4fafd24cb6c9fad7a6beba205b74", "html_url": "https://github.com/rust-lang/rust/commit/aaebae973f7a4fafd24cb6c9fad7a6beba205b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaebae973f7a4fafd24cb6c9fad7a6beba205b74/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282224edf19fb8a511c5a9e279f18b804ff61b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/282224edf19fb8a511c5a9e279f18b804ff61b25", "html_url": "https://github.com/rust-lang/rust/commit/282224edf19fb8a511c5a9e279f18b804ff61b25"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "f4f3d84e62bfd086796f66cc9a86d1f408ac4c7a", "filename": "library/core/src/result.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aaebae973f7a4fafd24cb6c9fad7a6beba205b74/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaebae973f7a4fafd24cb6c9fad7a6beba205b74/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=aaebae973f7a4fafd24cb6c9fad7a6beba205b74", "patch": "@@ -542,6 +542,27 @@ impl<T, E> Result<T, E> {\n         matches!(*self, Ok(_))\n     }\n \n+    /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.is_ok_with(|x| x > 1), true);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(0);\n+    /// assert_eq!(x.is_ok_with(|x| x > 1), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"hey\");\n+    /// assert_eq!(x.is_ok_with(|x| x > 1), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"is_some_with\", issue = \"none\")]\n+    pub fn is_ok_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+        matches!(self, Ok(x) if f(x))\n+    }\n+\n     /// Returns `true` if the result is [`Err`].\n     ///\n     /// # Examples\n@@ -563,6 +584,27 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n+    /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Err(\"abc\");\n+    /// assert_eq!(x.is_err_with(|x| x.len() > 1), true);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"\");\n+    /// assert_eq!(x.is_ok_with(|x| x.len() > 1), false);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(123);\n+    /// assert_eq!(x.is_ok_with(|x| x.len() > 1), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"is_some_with\", issue = \"none\")]\n+    pub fn is_err_with(&self, f: impl FnOnce(&E) -> bool) -> bool {\n+        matches!(self, Err(x) if f(x))\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////"}]}