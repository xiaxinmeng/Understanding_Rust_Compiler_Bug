{"sha": "fb4e734f99b8efc77634dc96424cafb956e4596f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNGU3MzRmOTliOGVmYzc3NjM0ZGM5NjQyNGNhZmI5NTZlNDU5NmY=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2021-02-06T13:33:29Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2021-02-06T15:00:37Z"}, "message": "Prefer match intead of combinators to make some Box function inlineable", "tree": {"sha": "c0461bbaf5ef3ea89fb48c546d30fca57593062a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0461bbaf5ef3ea89fb48c546d30fca57593062a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4e734f99b8efc77634dc96424cafb956e4596f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4e734f99b8efc77634dc96424cafb956e4596f", "html_url": "https://github.com/rust-lang/rust/commit/fb4e734f99b8efc77634dc96424cafb956e4596f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4e734f99b8efc77634dc96424cafb956e4596f/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399b6452b5d9982438be208668bc758479f13725", "url": "https://api.github.com/repos/rust-lang/rust/commits/399b6452b5d9982438be208668bc758479f13725", "html_url": "https://github.com/rust-lang/rust/commit/399b6452b5d9982438be208668bc758479f13725"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "e87303749b423376fe514971d1f2efa432017cdc", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb4e734f99b8efc77634dc96424cafb956e4596f/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4e734f99b8efc77634dc96424cafb956e4596f/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=fb4e734f99b8efc77634dc96424cafb956e4596f", "patch": "@@ -390,7 +390,12 @@ impl<T, A: Allocator> Box<T, A> {\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n-        Box::try_new_uninit_in(alloc).unwrap_or_else(|_| handle_alloc_error(layout))\n+        // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n+        // That would make code size bigger.\n+        match Box::try_new_uninit_in(alloc) {\n+            Ok(m) => m,\n+            Err(_) => handle_alloc_error(layout),\n+        }\n     }\n \n     /// Constructs a new box with uninitialized contents in the provided allocator,\n@@ -447,7 +452,12 @@ impl<T, A: Allocator> Box<T, A> {\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n-        Box::try_new_zeroed_in(alloc).unwrap_or_else(|_| handle_alloc_error(layout))\n+        // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n+        // That would make code size bigger.\n+        match Box::try_new_zeroed_in(alloc) {\n+            Ok(m) => m,\n+            Err(_) => handle_alloc_error(layout),\n+        }\n     }\n \n     /// Constructs a new `Box` with uninitialized contents, with the memory"}]}