{"sha": "65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "node_id": "C_kwDOAAsO6NoAKDY1ZTVjZDBlOTViOTg1NGEwZDhjMGNhZTM0ZTlkOTIzZDUyYWUxMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T19:27:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T19:27:44Z"}, "message": "Auto merge of #8553 - Jarcho:transmute_undefined_8499, r=llogiq\n\nDon't lint `transmute_undefined_repr` when changing the type of generic params\n\nPartially fixes #8499\n\nchangelog: Don't lint `transmute_undefined_repr` when changing the type of generic params", "tree": {"sha": "af7c76a74bec56cc1a0773b3bd72c60229b8f5aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7c76a74bec56cc1a0773b3bd72c60229b8f5aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "html_url": "https://github.com/rust-lang/rust/commit/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23ddab82d74cf6bfd72d282254a5c19c9631ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23ddab82d74cf6bfd72d282254a5c19c9631ef2", "html_url": "https://github.com/rust-lang/rust/commit/d23ddab82d74cf6bfd72d282254a5c19c9631ef2"}, {"sha": "8e5208cbffd5ff43f80097d74a8802aad1d6190b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5208cbffd5ff43f80097d74a8802aad1d6190b", "html_url": "https://github.com/rust-lang/rust/commit/8e5208cbffd5ff43f80097d74a8802aad1d6190b"}], "stats": {"total": 130, "additions": 102, "deletions": 28}, "files": [{"sha": "f5e21267a8976e4aff843095c42782569b9c73cd", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::ty::is_c_void;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, IntTy, Ty, TypeAndMut, UintTy};\n use rustc_span::Span;\n \n@@ -127,6 +127,17 @@ pub(super) fn check<'tcx>(\n             } => match (reduce_ty(cx, from_sub_ty), reduce_ty(cx, to_sub_ty)) {\n                 (ReducedTy::TypeErasure, _) | (_, ReducedTy::TypeErasure) => return false,\n                 (ReducedTy::UnorderedFields(from_ty), ReducedTy::UnorderedFields(to_ty)) if from_ty != to_ty => {\n+                    let same_adt_did = if let (ty::Adt(from_def, from_subs), ty::Adt(to_def, to_subs))\n+                        = (from_ty.kind(), to_ty.kind())\n+                        && from_def == to_def\n+                    {\n+                        if same_except_params(from_subs, to_subs) {\n+                            return false;\n+                        }\n+                        Some(from_def.did())\n+                    } else {\n+                        None\n+                    };\n                     span_lint_and_then(\n                         cx,\n                         TRANSMUTE_UNDEFINED_REPR,\n@@ -136,21 +147,17 @@ pub(super) fn check<'tcx>(\n                             from_ty_orig, to_ty_orig\n                         ),\n                         |diag| {\n-                            if_chain! {\n-                                if let (Some(from_def), Some(to_def)) = (from_ty.ty_adt_def(), to_ty.ty_adt_def());\n-                                if from_def == to_def;\n-                                then {\n-                                    diag.note(&format!(\n-                                        \"two instances of the same generic type (`{}`) may have different layouts\",\n-                                        cx.tcx.item_name(from_def.did())\n-                                    ));\n-                                } else {\n-                                    if from_ty_orig.peel_refs() != from_ty {\n-                                        diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n-                                    }\n-                                    if to_ty_orig.peel_refs() != to_ty {\n-                                        diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n-                                    }\n+                            if let Some(same_adt_did) = same_adt_did {\n+                                diag.note(&format!(\n+                                    \"two instances of the same generic type (`{}`) may have different layouts\",\n+                                    cx.tcx.item_name(same_adt_did)\n+                                ));\n+                            } else {\n+                                if from_ty_orig.peel_refs() != from_ty {\n+                                    diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                                }\n+                                if to_ty_orig.peel_refs() != to_ty {\n+                                    diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n                                 }\n                             }\n                         },\n@@ -197,10 +204,13 @@ pub(super) fn check<'tcx>(\n                     continue;\n                 },\n                 (\n-                    ReducedTy::OrderedFields(_) | ReducedTy::Ref(_) | ReducedTy::Other(_),\n-                    ReducedTy::OrderedFields(_) | ReducedTy::Ref(_) | ReducedTy::Other(_),\n+                    ReducedTy::OrderedFields(_) | ReducedTy::Ref(_) | ReducedTy::Other(_) | ReducedTy::Param,\n+                    ReducedTy::OrderedFields(_) | ReducedTy::Ref(_) | ReducedTy::Other(_) | ReducedTy::Param,\n                 )\n-                | (ReducedTy::UnorderedFields(_), ReducedTy::UnorderedFields(_)) => break,\n+                | (\n+                    ReducedTy::UnorderedFields(_) | ReducedTy::Param,\n+                    ReducedTy::UnorderedFields(_) | ReducedTy::Param,\n+                ) => break,\n             },\n         }\n     }\n@@ -264,6 +274,8 @@ enum ReducedTy<'tcx> {\n     UnorderedFields(Ty<'tcx>),\n     /// The type is a reference to the contained type.\n     Ref(Ty<'tcx>),\n+    /// The type is a generic parameter.\n+    Param,\n     /// Any other type.\n     Other(Ty<'tcx>),\n }\n@@ -317,6 +329,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n             ty::Foreign(_) => ReducedTy::TypeErasure,\n             ty::Ref(_, ty, _) => ReducedTy::Ref(ty),\n             ty::RawPtr(ty) => ReducedTy::Ref(ty.ty),\n+            ty::Param(_) => ReducedTy::Param,\n             _ => ReducedTy::Other(ty),\n         };\n     }\n@@ -344,3 +357,16 @@ fn is_size_pair(ty: Ty<'_>) -> bool {\n         false\n     }\n }\n+\n+fn same_except_params(subs1: SubstsRef<'_>, subs2: SubstsRef<'_>) -> bool {\n+    // TODO: check const parameters as well. Currently this will consider `Array<5>` the same as\n+    // `Array<6>`\n+    for (ty1, ty2) in subs1.types().zip(subs2.types()).filter(|(ty1, ty2)| ty1 != ty2) {\n+        match (ty1.kind(), ty2.kind()) {\n+            (ty::Param(_), _) | (_, ty::Param(_)) => (),\n+            (ty::Adt(adt1, subs1), ty::Adt(adt2, subs2)) if adt1 == adt2 && same_except_params(subs1, subs2) => (),\n+            _ => return false,\n+        }\n+    }\n+    true\n+}"}, {"sha": "b06ed4a917376f63775d02dd60f3d4afc4d2ac75", "filename": "tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/tests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/tests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.rs?ref=65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::transmute_undefined_repr)]\n #![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref)]\n \n+use core::any::TypeId;\n use core::ffi::c_void;\n use core::mem::{size_of, transmute, MaybeUninit};\n \n@@ -110,3 +111,34 @@ fn main() {\n         let _: Ty<&[u32]> = transmute::<&[u32], _>(value::<&Vec<u32>>()); // Ok\n     }\n }\n+\n+fn _with_generics<T: 'static, U: 'static>() {\n+    if TypeId::of::<T>() != TypeId::of::<u32>() || TypeId::of::<T>() != TypeId::of::<U>() {\n+        return;\n+    }\n+    unsafe {\n+        let _: &u32 = transmute(value::<&T>()); // Ok\n+        let _: &T = transmute(value::<&u32>()); // Ok\n+\n+        let _: Vec<U> = transmute(value::<Vec<T>>()); // Ok\n+        let _: Vec<T> = transmute(value::<Vec<U>>()); // Ok\n+\n+        let _: Ty<&u32> = transmute(value::<&T>()); // Ok\n+        let _: Ty<&T> = transmute(value::<&u32>()); // Ok\n+\n+        let _: Vec<u32> = transmute(value::<Vec<T>>()); // Ok\n+        let _: Vec<T> = transmute(value::<Vec<u32>>()); // Ok\n+\n+        let _: &Ty2<u32, u32> = transmute(value::<&Ty2<T, U>>()); // Ok\n+        let _: &Ty2<T, U> = transmute(value::<&Ty2<u32, u32>>()); // Ok\n+\n+        let _: Vec<Vec<u32>> = transmute(value::<Vec<Vec<T>>>()); // Ok\n+        let _: Vec<Vec<T>> = transmute(value::<Vec<Vec<u32>>>()); // Ok\n+\n+        let _: Vec<Ty2<T, u32>> = transmute(value::<Vec<Ty2<U, i32>>>()); // Err\n+        let _: Vec<Ty2<U, i32>> = transmute(value::<Vec<Ty2<T, u32>>>()); // Err\n+\n+        let _: *const u32 = transmute(value::<Box<T>>()); // Ok\n+        let _: Box<T> = transmute(value::<*const u32>()); // Ok\n+    }\n+}"}, {"sha": "28bfba6c7571dc249ad3c97ae5c31982a4e07f9a", "filename": "tests/ui/transmute_undefined_repr.stderr", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/tests%2Fui%2Ftransmute_undefined_repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d/tests%2Fui%2Ftransmute_undefined_repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.stderr?ref=65e5cd0e95b9854a0d8c0cae34e9d923d52ae12d", "patch": "@@ -1,64 +1,80 @@\n error: transmute from `Ty2<u32, i32>` which has an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:26:33\n+  --> $DIR/transmute_undefined_repr.rs:27:33\n    |\n LL |         let _: Ty2C<u32, i32> = transmute(value::<Ty2<u32, i32>>()); // Lint, Ty2 is unordered\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::transmute-undefined-repr` implied by `-D warnings`\n \n error: transmute into `Ty2<u32, i32>` which has an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:27:32\n+  --> $DIR/transmute_undefined_repr.rs:28:32\n    |\n LL |         let _: Ty2<u32, i32> = transmute(value::<Ty2C<u32, i32>>()); // Lint, Ty2 is unordered\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from `Ty<Ty2<u32, i32>>` to `Ty2<u32, f32>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:32:32\n+  --> $DIR/transmute_undefined_repr.rs:33:32\n    |\n LL |         let _: Ty2<u32, f32> = transmute(value::<Ty<Ty2<u32, i32>>>()); // Lint, different Ty2 instances\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n error: transmute from `Ty2<u32, f32>` to `Ty<Ty2<u32, i32>>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:33:36\n+  --> $DIR/transmute_undefined_repr.rs:34:36\n    |\n LL |         let _: Ty<Ty2<u32, i32>> = transmute(value::<Ty2<u32, f32>>()); // Lint, different Ty2 instances\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n error: transmute from `Ty<&Ty2<u32, i32>>` to `&Ty2<u32, f32>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:38:33\n+  --> $DIR/transmute_undefined_repr.rs:39:33\n    |\n LL |         let _: &Ty2<u32, f32> = transmute(value::<Ty<&Ty2<u32, i32>>>()); // Lint, different Ty2 instances\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n error: transmute from `&Ty2<u32, f32>` to `Ty<&Ty2<u32, i32>>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:39:37\n+  --> $DIR/transmute_undefined_repr.rs:40:37\n    |\n LL |         let _: Ty<&Ty2<u32, i32>> = transmute(value::<&Ty2<u32, f32>>()); // Lint, different Ty2 instances\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n error: transmute from `std::boxed::Box<Ty2<u32, u32>>` to `&mut Ty2<u32, f32>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:56:45\n+  --> $DIR/transmute_undefined_repr.rs:57:45\n    |\n LL |         let _: &'static mut Ty2<u32, f32> = transmute(value::<Box<Ty2<u32, u32>>>()); // Lint, different Ty2 instances\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n error: transmute from `&mut Ty2<u32, f32>` to `std::boxed::Box<Ty2<u32, u32>>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:57:37\n+  --> $DIR/transmute_undefined_repr.rs:58:37\n    |\n LL |         let _: Box<Ty2<u32, u32>> = transmute(value::<&'static mut Ty2<u32, f32>>()); // Lint, different Ty2 instances\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n-error: aborting due to 8 previous errors\n+error: transmute from `std::vec::Vec<Ty2<U, i32>>` to `std::vec::Vec<Ty2<T, u32>>`, both of which have an undefined layout\n+  --> $DIR/transmute_undefined_repr.rs:138:35\n+   |\n+LL |         let _: Vec<Ty2<T, u32>> = transmute(value::<Vec<Ty2<U, i32>>>()); // Err\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: two instances of the same generic type (`Vec`) may have different layouts\n+\n+error: transmute from `std::vec::Vec<Ty2<T, u32>>` to `std::vec::Vec<Ty2<U, i32>>`, both of which have an undefined layout\n+  --> $DIR/transmute_undefined_repr.rs:139:35\n+   |\n+LL |         let _: Vec<Ty2<U, i32>> = transmute(value::<Vec<Ty2<T, u32>>>()); // Err\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: two instances of the same generic type (`Vec`) may have different layouts\n+\n+error: aborting due to 10 previous errors\n "}]}