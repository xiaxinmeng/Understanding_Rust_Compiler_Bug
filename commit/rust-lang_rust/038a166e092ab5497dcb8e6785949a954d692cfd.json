{"sha": "038a166e092ab5497dcb8e6785949a954d692cfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOGExNjZlMDkyYWI1NDk3ZGNiOGU2Nzg1OTQ5YTk1NGQ2OTJjZmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-02-17T07:00:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-02-17T19:25:47Z"}, "message": "Properly display note/expected details", "tree": {"sha": "c11c8dd2dd12f609c3b2d711ec85d9b2c5942c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c11c8dd2dd12f609c3b2d711ec85d9b2c5942c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038a166e092ab5497dcb8e6785949a954d692cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038a166e092ab5497dcb8e6785949a954d692cfd", "html_url": "https://github.com/rust-lang/rust/commit/038a166e092ab5497dcb8e6785949a954d692cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038a166e092ab5497dcb8e6785949a954d692cfd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49d10207a7e105525fb3bd71c18fde6fc2f5aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49d10207a7e105525fb3bd71c18fde6fc2f5aed", "html_url": "https://github.com/rust-lang/rust/commit/c49d10207a7e105525fb3bd71c18fde6fc2f5aed"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "2601ff4af43c1b027dc0ed027e79dde615fd54d1", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=038a166e092ab5497dcb8e6785949a954d692cfd", "patch": "@@ -562,40 +562,41 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                          values: Option<ValuePairs<'tcx>>,\n                          terr: &TypeError<'tcx>)\n     {\n-        let expected_found = match values {\n-            None => None,\n-            Some(values) => match self.values_str(&values) {\n-                Some((expected, found)) => Some((expected, found)),\n-                None => {\n-                    // Derived error. Cancel the emitter.\n-                    self.tcx.sess.diagnostic().cancel(diag);\n-                    return\n-                }\n+        let (expected_found, is_simple_error) = match values {\n+            None => (None, false),\n+            Some(values) => {\n+                let is_simple_error = match values {\n+                    ValuePairs::Types(exp_found) => {\n+                        exp_found.expected.is_primitive() && exp_found.found.is_primitive()\n+                    }\n+                    _ => false,\n+                };\n+                let vals = match self.values_str(&values) {\n+                    Some((expected, found)) => Some((expected, found)),\n+                    None => {\n+                        // Derived error. Cancel the emitter.\n+                        self.tcx.sess.diagnostic().cancel(diag);\n+                        return\n+                    }\n+                };\n+                (vals, is_simple_error)\n             }\n         };\n \n         let span = cause.span;\n \n         if let Some((expected, found)) = expected_found {\n-            let is_simple_error = if let &TypeError::Sorts(ref values) = terr {\n-                values.expected.is_primitive() && values.found.is_primitive()\n-            } else {\n-                false\n-            };\n-\n-            if !is_simple_error {\n-                if expected == found {\n-                    if let &TypeError::Sorts(ref values) = terr {\n-                        diag.note_expected_found_extra(\n-                            &\"type\", &expected, &found,\n-                            &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n-                            &format!(\" ({})\", values.found.sort_string(self.tcx)));\n-                    } else {\n-                        diag.note_expected_found(&\"type\", &expected, &found);\n-                    }\n-                } else {\n+            match (terr, is_simple_error, expected == found) {\n+                (&TypeError::Sorts(ref values), false,  true) => {\n+                    diag.note_expected_found_extra(\n+                        &\"type\", &expected, &found,\n+                        &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n+                        &format!(\" ({})\", values.found.sort_string(self.tcx)));\n+                }\n+                (_, false,  _) => {\n                     diag.note_expected_found(&\"type\", &expected, &found);\n                 }\n+                _ => (),\n             }\n         }\n "}, {"sha": "8cde239ca6edf0c8c3126d6de4e4a7b540dad199", "filename": "src/test/compile-fail/default_ty_param_conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs?ref=038a166e092ab5497dcb8e6785949a954d692cfd", "patch": "@@ -23,8 +23,6 @@ fn main() {\n     // Here, F is instantiated with $0=uint\n     let x = foo();\n     //~^ ERROR: mismatched types\n-    //~| expected type `usize`\n-    //~| found type `isize`\n     //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n     //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n     //~| NOTE: ...that was applied to an unconstrained type variable here"}, {"sha": "e5b035e50aa931c625e36761098f26cd85a5f161", "filename": "src/test/compile-fail/default_ty_param_conflict_cross_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs?ref=038a166e092ab5497dcb8e6785949a954d692cfd", "patch": "@@ -29,6 +29,4 @@ fn main() {\n     //~| NOTE: conflicting type parameter defaults `bool` and `char`\n     //~| a second default is defined on `default_param_test::bleh`\n     //~| NOTE:  ...that was applied to an unconstrained type variable here\n-    //~| expected type `bool`\n-    //~| found type `char`\n }"}, {"sha": "d1d6390cce35b2347f91255033657c6559434bea", "filename": "src/test/compile-fail/issue-35869.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fcompile-fail%2Fissue-35869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fcompile-fail%2Fissue-35869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35869.rs?ref=038a166e092ab5497dcb8e6785949a954d692cfd", "patch": "@@ -23,15 +23,19 @@ impl Foo for Bar {\n     fn foo(_: fn(u16) -> ()) {}\n     //~^ ERROR method `foo` has an incompatible type for trait\n     //~| NOTE expected u8\n+    //~| NOTE expected type `fn(fn(u8))`\n     fn bar(_: Option<u16>) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n     //~| NOTE expected u8\n+    //~| NOTE expected type `fn(std::option::Option<u8>)`\n     fn baz(_: (u16, u16)) {}\n     //~^ ERROR method `baz` has an incompatible type for trait\n     //~| NOTE expected u8\n+    //~| NOTE expected type `fn((u8, u16))`\n     fn qux() -> u16 { 5u16 }\n     //~^ ERROR method `qux` has an incompatible type for trait\n     //~| NOTE expected u8\n+    //~| NOTE expected type `fn() -> u8`\n }\n \n fn main() {}"}, {"sha": "d9871b8970c5cf22b1cd32b70b5b34bbc8f4c32d", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=038a166e092ab5497dcb8e6785949a954d692cfd", "patch": "@@ -6,6 +6,9 @@ error[E0053]: method `foo` has an incompatible type for trait\n ...\n 19 |     fn foo(x: i16) { }\n    |               ^^^ expected u16, found i16\n+   |\n+   = note: expected type `fn(u16)`\n+              found type `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/E0053.rs:22:12"}, {"sha": "349432f64bbc20cf4af4839fe604639f2c6f7124", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/038a166e092ab5497dcb8e6785949a954d692cfd/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=038a166e092ab5497dcb8e6785949a954d692cfd", "patch": "@@ -6,6 +6,9 @@ error[E0053]: method `foo` has an incompatible type for trait\n ...\n 21 |     fn foo(x: i16) { }\n    |               ^^^ expected u16, found i16\n+   |\n+   = note: expected type `fn(u16)`\n+              found type `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:22:28"}]}