{"sha": "f43320924817b44dc3c4d51e1dba0a40a115103b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzMyMDkyNDgxN2I0NGRjM2M0ZDUxZTFkYmEwYTQwYTExNTEwM2I=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T18:51:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T18:51:15Z"}, "message": "Rollup merge of #36868 - petrochenkov:adtstab, r=nikomatsakis\n\nPartially stabilize RFC 1506 \"Clarify relationships between ADTs\"\n\nLifted restrictions on tuple structs/variants are stabilized, i.e. `S{..}` can be used with any structs and empty tuple structs are permitted without feature gate.\nNumeric fields in struct expressions/patterns `S { 0: a, 1: b }` are **NOT** stabilized.\nThis was implemented 1.5 months ago in Rust 1.12, but this is a tiny technical change that could probably go even without RFC/stabilization period.\n\ncc https://github.com/rust-lang/rust/issues/35626 https://github.com/rust-lang/rust/pull/36871\nr? @nikomatsakis", "tree": {"sha": "34d4798353937619a101d39ea5c755ec92563c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d4798353937619a101d39ea5c755ec92563c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43320924817b44dc3c4d51e1dba0a40a115103b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43320924817b44dc3c4d51e1dba0a40a115103b", "html_url": "https://github.com/rust-lang/rust/commit/f43320924817b44dc3c4d51e1dba0a40a115103b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43320924817b44dc3c4d51e1dba0a40a115103b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02aa42860d6e74dfa57824f79bdc9c57665d6af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/02aa42860d6e74dfa57824f79bdc9c57665d6af0", "html_url": "https://github.com/rust-lang/rust/commit/02aa42860d6e74dfa57824f79bdc9c57665d6af0"}, {"sha": "ab5ba049bcf38f7bc7bde43d0acbd3869a9c7683", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5ba049bcf38f7bc7bde43d0acbd3869a9c7683", "html_url": "https://github.com/rust-lang/rust/commit/ab5ba049bcf38f7bc7bde43d0acbd3869a9c7683"}], "stats": {"total": 138, "additions": 23, "deletions": 115}, "files": [{"sha": "81eec25762b3da63c48033046b4506ab7153d11f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -3261,13 +3261,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if let Some((variant, did, substs)) = variant {\n-            if variant.ctor_kind == CtorKind::Fn &&\n-                    !self.tcx.sess.features.borrow().relaxed_adts {\n-                emit_feature_err(&self.tcx.sess.parse_sess,\n-                                 \"relaxed_adts\", path.span, GateIssue::Language,\n-                                 \"tuple structs and variants in struct patterns are unstable\");\n-            }\n-\n             // Check bounds on type arguments used in the path.\n             let type_predicates = self.tcx.lookup_predicates(did);\n             let bounds = self.instantiate_bounds(path.span, substs, &type_predicates);"}, {"sha": "8ac3f9e5e54c74305614c9d89af6b7e1a9d2a84c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -271,7 +271,6 @@ declare_features! (\n     // Allows `impl Trait` in function return types.\n     (active, conservative_impl_trait, \"1.12.0\", Some(34511)),\n \n-    // Allows tuple structs and variants in more contexts,\n     // Permits numeric fields in struct expressions and patterns.\n     (active, relaxed_adts, \"1.12.0\", Some(35626)),\n \n@@ -996,6 +995,10 @@ fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n     }\n }\n \n+fn starts_with_digit(s: &str) -> bool {\n+    s.as_bytes().first().cloned().map_or(false, |b| b >= b'0' && b <= b'9')\n+}\n+\n impl<'a> Visitor for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if !self.context.cm.span_allows_unstable(attr.span) {\n@@ -1175,6 +1178,11 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                         gate_feature_post!(&self, field_init_shorthand, field.span,\n                                            \"struct field shorthands are unstable\");\n                     }\n+                    if starts_with_digit(&field.ident.node.name.as_str()) {\n+                        gate_feature_post!(&self, relaxed_adts,\n+                                          field.span,\n+                                          \"numeric fields in struct expressions are unstable\");\n+                    }\n                 }\n             }\n             _ => {}\n@@ -1201,10 +1209,14 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                                   pattern.span,\n                                   \"box pattern syntax is experimental\");\n             }\n-            PatKind::TupleStruct(_, ref fields, ddpos)\n-                    if ddpos.is_none() && fields.is_empty() => {\n-                gate_feature_post!(&self, relaxed_adts, pattern.span,\n-                                   \"empty tuple structs patterns are unstable\");\n+            PatKind::Struct(_, ref fields, _) => {\n+                for field in fields {\n+                    if starts_with_digit(&field.node.ident.name.as_str()) {\n+                        gate_feature_post!(&self, relaxed_adts,\n+                                          field.span,\n+                                          \"numeric fields in struct patterns are unstable\");\n+                    }\n+                }\n             }\n             _ => {}\n         }\n@@ -1287,19 +1299,6 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n         visit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_variant_data(&mut self, vdata: &ast::VariantData, _: ast::Ident,\n-                          _: &ast::Generics, _: NodeId, span: Span) {\n-        if vdata.fields().is_empty() {\n-            if vdata.is_tuple() {\n-                gate_feature_post!(&self, relaxed_adts, span,\n-                                   \"empty tuple structs and enum variants are unstable, \\\n-                                    use unit structs and enum variants instead\");\n-            }\n-        }\n-\n-        visit::walk_struct_def(self, vdata)\n-    }\n-\n     fn visit_vis(&mut self, vis: &ast::Visibility) {\n         let span = match *vis {\n             ast::Visibility::Crate(span) => span,"}, {"sha": "4a302865634224b5f541664e70f1fe5921c17f2e", "filename": "src/test/compile-fail/auxiliary/empty-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fempty-struct.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(relaxed_adts)]\n-\n pub struct XEmpty1 {}\n pub struct XEmpty2;\n pub struct XEmpty6();"}, {"sha": "d42c0ee1a4da5c14ecd7a8b6f9caed0a7991b446", "filename": "src/test/compile-fail/auxiliary/namespace-mix-new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-new.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(item_like_imports, relaxed_adts)]\n+#![feature(item_like_imports)]\n \n pub mod c {\n     pub struct S {}"}, {"sha": "29b139d771b0deebe0fa6054f8059831bee9fc3b", "filename": "src/test/compile-fail/auxiliary/namespace-mix-old.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -10,8 +10,6 @@\n \n // FIXME: Remove when `item_like_imports` is stabilized.\n \n-#![feature(relaxed_adts)]\n-\n pub mod c {\n     pub struct S {}\n     pub struct TS();"}, {"sha": "4349e72c5d73be4af2d24c2a54ba9232bbbfd518", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(relaxed_adts)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "d6c5b95349211e75e9c18eef9c96ec7597020c93", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(relaxed_adts)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "5e683eafade8a311ed292becb5a7b63251ebc40d", "filename": "src/test/compile-fail/empty-struct-tuple-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(relaxed_adts)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "532c2d85053f6b4d56ac6b7d1d8bdf37dcb527c1", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(relaxed_adts)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "a75f2647f49a4d3fd324c84700c127629819f927", "filename": "src/test/compile-fail/feature-gate-relaxed-adts-2.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-relaxed-adts-2.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Z(u8, u8);\n-\n-enum E {\n-    U(u8, u8),\n-}\n-\n-fn main() {\n-    match Z(0, 1) {\n-        Z{..} => {} //~ ERROR tuple structs and variants in struct patterns are unstable\n-    }\n-    match E::U(0, 1) {\n-        E::U{..} => {} //~ ERROR tuple structs and variants in struct patterns are unstable\n-    }\n-\n-    let z1 = Z(0, 1);\n-    let z2 = Z { ..z1 }; //~ ERROR tuple structs and variants in struct patterns are unstable\n-}"}, {"sha": "4301b47f2e9b29ce956f8450d3d69c4fc543bccf", "filename": "src/test/compile-fail/issue-16819.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct TS ( //~ ERROR empty tuple structs and enum variants are unstable\n-    #[cfg(untrue)]\n-    i32,\n-);\n-\n-enum E {\n-    TV ( //~ ERROR empty tuple structs and enum variants are unstable\n-        #[cfg(untrue)]\n-        i32,\n-    )\n-}\n-\n-fn main() {\n-    let s = TS;\n-    let tv = E::TV;\n-}"}, {"sha": "f7cae91aa93a43e334e5812f19499aff4aae6897", "filename": "src/test/compile-fail/issue-17800.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(relaxed_adts)]\n-\n enum MyOption<T> {\n     MySome(T),\n     MyNone,"}, {"sha": "19803079d022493a9569996064f3d0d4ca4bc2f4", "filename": "src/test/compile-fail/issue-4736.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4736.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(relaxed_adts)]\n-\n struct NonCopyable(());\n \n fn main() {"}, {"sha": "59592e3d737d8f6478b4c10a9c865054c8826da4", "filename": "src/test/compile-fail/namespace-mix-new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-new.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:namespace-mix-new.rs\n \n-#![feature(item_like_imports, relaxed_adts)]\n+#![feature(item_like_imports)]\n \n extern crate namespace_mix_new;\n use namespace_mix_new::*;"}, {"sha": "8cd82050814a001674d250edccb542fddc0e3b18", "filename": "src/test/compile-fail/namespace-mix-old.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:namespace-mix-old.rs\n \n-#![feature(relaxed_adts)]\n-\n extern crate namespace_mix_old;\n use namespace_mix_old::{xm1, xm2, xm3, xm4, xm5, xm6, xm7, xm8, xm9, xmA, xmB, xmC};\n "}, {"sha": "3ce85813a9b519a9d351c1db38528c3145c01fde", "filename": "src/test/compile-fail/numeric-fields-feature-gate.rs", "status": "renamed", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fnumeric-fields-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Fcompile-fail%2Fnumeric-fields-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnumeric-fields-feature-gate.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -8,19 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct S(); //~ ERROR empty tuple structs and enum variants are unstable\n-struct Z(u8, u8);\n-\n-enum E {\n-    V(), //~ ERROR empty tuple structs and enum variants are unstable\n-    U(u8, u8),\n-}\n+struct S(u8);\n \n fn main() {\n-    match S() {\n-        S() => {} //~ ERROR empty tuple structs patterns are unstable\n-    }\n-    match E::V() {\n-        E::V() => {} //~ ERROR empty tuple structs patterns are unstable\n+    let s = S{0: 10}; //~ ERROR numeric fields in struct expressions are unstable\n+    match s {\n+        S{0: a, ..} => {} //~ ERROR numeric fields in struct patterns are unstable\n     }\n }", "previous_filename": "src/test/compile-fail/feature-gate-relaxed-adts.rs"}, {"sha": "79ce3cb68d4be7e1bbdac925fa2b879f64089ef7", "filename": "src/test/run-pass-fulldeps/empty-struct-braces-derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Frun-pass-fulldeps%2Fempty-struct-braces-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Frun-pass-fulldeps%2Fempty-struct-braces-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fempty-struct-braces-derive.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -10,7 +10,6 @@\n \n // `#[derive(Trait)]` works for empty structs/variants with braces or parens.\n \n-#![feature(relaxed_adts)]\n #![feature(rustc_private)]\n \n extern crate serialize as rustc_serialize;"}, {"sha": "734e57a774d87935a50b08162effe599960a69e0", "filename": "src/test/run-pass/auxiliary/empty-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Frun-pass%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Frun-pass%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fempty-struct.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(relaxed_adts)]\n-\n pub struct XEmpty1 {}\n pub struct XEmpty2;\n pub struct XEmpty7();"}, {"sha": "7c161ba8dd96e71c84e6eab12aac3680ba05c58d", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43320924817b44dc3c4d51e1dba0a40a115103b/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=f43320924817b44dc3c4d51e1dba0a40a115103b", "patch": "@@ -13,8 +13,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(relaxed_adts)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}]}