{"sha": "3d4da98273553b2307d8ce3a03c476e459aa3f45", "node_id": "C_kwDOAAsO6NoAKDNkNGRhOTgyNzM1NTNiMjMwN2Q4Y2UzYTAzYzQ3NmU0NTlhYTNmNDU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-31T01:21:38Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-06T18:43:20Z"}, "message": "Make TraitEngine::new use the right solver, add compare mode", "tree": {"sha": "f0728e73270bdf03a3c42bc2c9d54484feeae711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0728e73270bdf03a3c42bc2c9d54484feeae711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d4da98273553b2307d8ce3a03c476e459aa3f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4da98273553b2307d8ce3a03c476e459aa3f45", "html_url": "https://github.com/rust-lang/rust/commit/3d4da98273553b2307d8ce3a03c476e459aa3f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d4da98273553b2307d8ce3a03c476e459aa3f45/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b637048a89654d105a17b6b6f1a060fd8dcfd093", "url": "https://api.github.com/repos/rust-lang/rust/commits/b637048a89654d105a17b6b6f1a060fd8dcfd093", "html_url": "https://github.com/rust-lang/rust/commit/b637048a89654d105a17b6b6f1a060fd8dcfd093"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "6eb18aecd653f93d4bbff7c6efa4cfa5e867cb91", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -161,8 +161,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n     ) -> Option<(Ty<'tcx>, Vec<traits::PredicateObligation<'tcx>>)> {\n-        let tcx = self.infcx.tcx;\n-        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.infcx);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n         let normalized_ty = match self"}, {"sha": "17be5fe66cf629e24b20eabb7431901df437af9f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -1549,7 +1549,7 @@ pub(super) fn check_generator_obligations(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         .with_opaque_type_inference(DefiningAnchor::Bind(def_id))\n         .build();\n \n-    let mut fulfillment_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n+    let mut fulfillment_cx = <dyn TraitEngine<'_>>::new(&infcx);\n     for (predicate, cause) in generator_interior_predicates {\n         let obligation = Obligation::new(tcx, cause.clone(), param_env, *predicate);\n         fulfillment_cx.register_predicate_obligation(&infcx, obligation);"}, {"sha": "aa4f90b4ad8a063df2c826ba856cb9888dc7c190", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -86,8 +86,8 @@ impl<'tcx> Inherited<'tcx> {\n \n         Inherited {\n             typeck_results,\n+            fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(&infcx)),\n             infcx,\n-            fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),\n             deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),"}, {"sha": "7a80ee98cb3c1ff9cd566a9a899b83c95c46e09d", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -231,17 +231,15 @@ impl<'tcx> InferCtxt<'tcx> {\n             {\n                 let (a, b) = if relation.a_is_expected() { (a, b) } else { (b, a) };\n \n-                relation.register_predicates([ty::Binder::dummy(\n-                    if self.next_trait_solver() {\n-                        ty::PredicateKind::AliasRelate(\n-                            a.into(),\n-                            b.into(),\n-                            ty::AliasRelationDirection::Equate,\n-                        )\n-                    } else {\n-                        ty::PredicateKind::ConstEquate(a, b)\n-                    },\n-                )]);\n+                relation.register_predicates([ty::Binder::dummy(if self.next_trait_solver() {\n+                    ty::PredicateKind::AliasRelate(\n+                        a.into(),\n+                        b.into(),\n+                        ty::AliasRelationDirection::Equate,\n+                    )\n+                } else {\n+                    ty::PredicateKind::ConstEquate(a, b)\n+                })]);\n \n                 return Ok(b);\n             }"}, {"sha": "90699c3cadcf523f0e1888c1c132d0aa932f8c8f", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -27,26 +27,42 @@ use rustc_session::config::TraitSolver;\n use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>) -> Box<Self>;\n-    fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self>;\n+    fn new(infcx: &InferCtxt<'tcx>) -> Box<Self>;\n+    fn new_in_snapshot(infcx: &InferCtxt<'tcx>) -> Box<Self>;\n }\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        match tcx.sess.opts.unstable_opts.trait_solver {\n-            TraitSolver::Classic => Box::new(FulfillmentContext::new()),\n-            TraitSolver::NextCoherence => Box::new(FulfillmentContext::new()),\n-            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new()),\n-            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n+    fn new(infcx: &InferCtxt<'tcx>) -> Box<Self> {\n+        match (infcx.tcx.sess.opts.unstable_opts.trait_solver, infcx.next_trait_solver()) {\n+            (TraitSolver::Classic, false) | (TraitSolver::NextCoherence, false) => {\n+                Box::new(FulfillmentContext::new())\n+            }\n+            (TraitSolver::Next | TraitSolver::NextCoherence, true) => {\n+                Box::new(NextFulfillmentCtxt::new())\n+            }\n+            (TraitSolver::Chalk, false) => Box::new(ChalkFulfillmentContext::new()),\n+            _ => bug!(\n+                \"incompatible combination of -Ztrait-solver flag ({:?}) and InferCtxt::next_trait_solver ({:?})\",\n+                infcx.tcx.sess.opts.unstable_opts.trait_solver,\n+                infcx.next_trait_solver()\n+            ),\n         }\n     }\n \n-    fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        match tcx.sess.opts.unstable_opts.trait_solver {\n-            TraitSolver::Classic => Box::new(FulfillmentContext::new_in_snapshot()),\n-            TraitSolver::NextCoherence => Box::new(FulfillmentContext::new_in_snapshot()),\n-            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new_in_snapshot()),\n-            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n+    fn new_in_snapshot(infcx: &InferCtxt<'tcx>) -> Box<Self> {\n+        match (infcx.tcx.sess.opts.unstable_opts.trait_solver, infcx.next_trait_solver()) {\n+            (TraitSolver::Classic, false) | (TraitSolver::NextCoherence, false) => {\n+                Box::new(FulfillmentContext::new_in_snapshot())\n+            }\n+            (TraitSolver::Next | TraitSolver::NextCoherence, true) => {\n+                Box::new(NextFulfillmentCtxt::new())\n+            }\n+            (TraitSolver::Chalk, false) => Box::new(ChalkFulfillmentContext::new_in_snapshot()),\n+            _ => bug!(\n+                \"incompatible combination of -Ztrait-solver flag ({:?}) and InferCtxt::next_trait_solver ({:?})\",\n+                infcx.tcx.sess.opts.unstable_opts.trait_solver,\n+                infcx.next_trait_solver()\n+            ),\n         }\n     }\n }\n@@ -60,11 +76,11 @@ pub struct ObligationCtxt<'a, 'tcx> {\n \n impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n-        Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new(infcx.tcx)) }\n+        Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new(infcx)) }\n     }\n \n     pub fn new_in_snapshot(infcx: &'a InferCtxt<'tcx>) -> Self {\n-        Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new_in_snapshot(infcx.tcx)) }\n+        Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new_in_snapshot(infcx)) }\n     }\n \n     pub fn register_obligation(&self, obligation: PredicateObligation<'tcx>) {"}, {"sha": "5f84acc8a0473d6db52aaef93f1120518add46a6", "filename": "compiler/rustc_traits/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -55,7 +55,7 @@ pub fn codegen_select_candidate<'tcx>(\n     // Currently, we use a fulfillment context to completely resolve\n     // all nested obligations. This is because they can inform the\n     // inference of the impl's type parameters.\n-    let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(tcx);\n+    let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(&infcx);\n     let impl_source = selection.map(|predicate| {\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n     });"}, {"sha": "96fe720630ccd890e9db2071ac2c01d62829f6db", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -108,6 +108,7 @@ string_enum! {\n         Polonius => \"polonius\",\n         Chalk => \"chalk\",\n         NextSolver => \"next-solver\",\n+        NextSolverCoherence => \"next-solver-coherence\",\n         SplitDwarf => \"split-dwarf\",\n         SplitDwarfSingle => \"split-dwarf-single\",\n     }"}, {"sha": "6582b534488a8c3c99be3613398a3cdeef63629a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d4da98273553b2307d8ce3a03c476e459aa3f45/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4da98273553b2307d8ce3a03c476e459aa3f45/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3d4da98273553b2307d8ce3a03c476e459aa3f45", "patch": "@@ -2127,6 +2127,9 @@ impl<'test> TestCx<'test> {\n             Some(CompareMode::NextSolver) => {\n                 rustc.args(&[\"-Ztrait-solver=next\"]);\n             }\n+            Some(CompareMode::NextSolverCoherence) => {\n+                rustc.args(&[\"-Ztrait-solver=next-coherence\"]);\n+            }\n             Some(CompareMode::SplitDwarf) if self.config.target.contains(\"windows\") => {\n                 rustc.args(&[\"-Csplit-debuginfo=unpacked\", \"-Zunstable-options\"]);\n             }"}]}