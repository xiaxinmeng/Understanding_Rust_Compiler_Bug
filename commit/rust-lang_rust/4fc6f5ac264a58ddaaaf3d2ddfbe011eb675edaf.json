{"sha": "4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzZmNWFjMjY0YTU4ZGRhYWFmM2QyZGRmYmUwMTFlYjY3NWVkYWY=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-08-03T11:30:28Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-08-03T21:12:25Z"}, "message": "Add an example to `std::thread::park_timeout`", "tree": {"sha": "3083e714667a33c19602bdf3e50cd6b1813325de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3083e714667a33c19602bdf3e50cd6b1813325de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf", "html_url": "https://github.com/rust-lang/rust/commit/4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea07d52676a68aff3e85599469523a25eeb1afbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea07d52676a68aff3e85599469523a25eeb1afbf", "html_url": "https://github.com/rust-lang/rust/commit/ea07d52676a68aff3e85599469523a25eeb1afbf"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "40d5c700246838121217b8ba34153a6a2cbe0c70", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=4fc6f5ac264a58ddaaaf3d2ddfbe011eb675edaf", "patch": "@@ -478,6 +478,25 @@ pub fn park_timeout_ms(ms: u32) {\n ///\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n+///\n+/// # Example\n+///\n+/// Waiting for the complete expiration of the timeout:\n+///\n+/// ```rust,no_run\n+/// use std::thread::park_timeout;\n+/// use std::time::{Instant, Duration};\n+///\n+/// let timeout = Duration::from_secs(2);\n+/// let beginning_park = Instant::now();\n+/// park_timeout(timeout);\n+///\n+/// while beginning_park.elapsed() < timeout {\n+///     println!(\"restarting park_timeout after {:?}\", beginning_park.elapsed());\n+///     let timeout = timeout - beginning_park.elapsed();\n+///     park_timeout(timeout);\n+/// }\n+/// ```\n #[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n     let thread = current();"}]}