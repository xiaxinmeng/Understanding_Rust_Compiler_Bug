{"sha": "4bedc314597c20cbaf68ac094e42ba569fcc8973", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWRjMzE0NTk3YzIwY2JhZjY4YWMwOTRlNDJiYTU2OWZjYzg5NzM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-21T17:16:26Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-05-22T14:54:08Z"}, "message": "Cleanup SortedMap by wrapping element lookup in a method.", "tree": {"sha": "1aaf46ead976230cf43ae82abe22e39d66fba3f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aaf46ead976230cf43ae82abe22e39d66fba3f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bedc314597c20cbaf68ac094e42ba569fcc8973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bedc314597c20cbaf68ac094e42ba569fcc8973", "html_url": "https://github.com/rust-lang/rust/commit/4bedc314597c20cbaf68ac094e42ba569fcc8973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bedc314597c20cbaf68ac094e42ba569fcc8973/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e850d78bcc42d4ef1e2e938f13fde319b37ced9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e850d78bcc42d4ef1e2e938f13fde319b37ced9c", "html_url": "https://github.com/rust-lang/rust/commit/e850d78bcc42d4ef1e2e938f13fde319b37ced9c"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "cdce1e77c0fb23c1add29f6c1a73c930a17bdb9a", "filename": "src/librustc_data_structures/sorted_map.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4bedc314597c20cbaf68ac094e42ba569fcc8973/src%2Flibrustc_data_structures%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bedc314597c20cbaf68ac094e42ba569fcc8973/src%2Flibrustc_data_structures%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsorted_map.rs?ref=4bedc314597c20cbaf68ac094e42ba569fcc8973", "patch": "@@ -42,9 +42,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     #[inline]\n     pub fn insert(&mut self, key: K, mut value: V) -> Option<V> {\n-        let index = self.data.binary_search_by(|&(ref x, _)| x.cmp(&key));\n-\n-        match index {\n+        match self.lookup_index_for(&key) {\n             Ok(index) => {\n                 let mut slot = unsafe {\n                     self.data.get_unchecked_mut(index)\n@@ -61,9 +59,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     #[inline]\n     pub fn remove(&mut self, key: &K) -> Option<V> {\n-        let index = self.data.binary_search_by(|&(ref x, _)| x.cmp(key));\n-\n-        match index {\n+        match self.lookup_index_for(key) {\n             Ok(index) => {\n                 Some(self.data.remove(index).1)\n             }\n@@ -75,9 +71,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     #[inline]\n     pub fn get(&self, key: &K) -> Option<&V> {\n-        let index = self.data.binary_search_by(|&(ref x, _)| x.cmp(key));\n-\n-        match index {\n+        match self.lookup_index_for(key) {\n             Ok(index) => {\n                 unsafe {\n                     Some(&self.data.get_unchecked(index).1)\n@@ -91,9 +85,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     #[inline]\n     pub fn get_mut(&mut self, key: &K) -> Option<&mut V> {\n-        let index = self.data.binary_search_by(|&(ref x, _)| x.cmp(key));\n-\n-        match index {\n+        match self.lookup_index_for(key) {\n             Ok(index) => {\n                 unsafe {\n                     Some(&mut self.data.get_unchecked_mut(index).1)\n@@ -168,12 +160,9 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n         debug_assert!(elements.windows(2).all(|w| w[0].0 < w[1].0));\n \n-        let index = {\n-            let first_element = &elements[0].0;\n-            self.data.binary_search_by(|&(ref x, _)| x.cmp(first_element))\n-        };\n+        let start_index = self.lookup_index_for(&elements[0].0);\n \n-        let drain = match index {\n+        let drain = match start_index {\n             Ok(index) => {\n                 let mut drain = elements.drain(..);\n                 self.data[index] = drain.next().unwrap();\n@@ -200,18 +189,24 @@ impl<K: Ord, V> SortedMap<K, V> {\n         }\n     }\n \n+    /// Looks up the key in `self.data` via `slice::binary_search()`.\n+    #[inline(always)]\n+    fn lookup_index_for(&self, key: &K) -> Result<usize, usize> {\n+        self.data.binary_search_by(|&(ref x, _)| x.cmp(key))\n+    }\n+\n     #[inline]\n     fn range_slice_indices<R>(&self, range: R) -> (usize, usize)\n         where R: RangeBounds<K>\n     {\n         let start = match range.start() {\n             Bound::Included(ref k) => {\n-                match self.data.binary_search_by(|&(ref x, _)| x.cmp(k)) {\n+                match self.lookup_index_for(k) {\n                     Ok(index) | Err(index) => index\n                 }\n             }\n             Bound::Excluded(ref k) => {\n-                match self.data.binary_search_by(|&(ref x, _)| x.cmp(k)) {\n+                match self.lookup_index_for(k) {\n                     Ok(index) => index + 1,\n                     Err(index) => index,\n                 }\n@@ -221,13 +216,13 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n         let end = match range.end() {\n             Bound::Included(ref k) => {\n-                match self.data.binary_search_by(|&(ref x, _)| x.cmp(k)) {\n+                match self.lookup_index_for(k) {\n                     Ok(index) => index + 1,\n                     Err(index) => index,\n                 }\n             }\n             Bound::Excluded(ref k) => {\n-                match self.data.binary_search_by(|&(ref x, _)| x.cmp(k)) {\n+                match self.lookup_index_for(k) {\n                     Ok(index) | Err(index) => index,\n                 }\n             }"}]}