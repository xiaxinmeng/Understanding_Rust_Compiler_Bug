{"sha": "c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZWQ0NDJmNDAxZDkwMjExYWUzNmE5ODA4Y2NhZjBhM2RjMDI1ZjY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-22T12:07:05Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T10:23:25Z"}, "message": "ty: `STILL_FURTHER_SPECIALIZABLE` w/out prnt subst\n\nThis commit modifies the `STILL_FURTHER_SPECIALIZABLE` flag so that the\nflag isn't set by the parent substs of closures or generators.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "226bb49097be3131683c13cdc06e4f7b7c905eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226bb49097be3131683c13cdc06e4f7b7c905eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8VcJ0ACgkQJZLnbIc4\nH9mkqQ//ZsaBCniyw5OPgFixuPhwLl7qXKL6t29NwWXsjOcImqnKenJ1BzojFMy1\nD4VuI+lv9i7AMjLPTRpdxCioszKUQjh7rAAkPCMH2luz78r/erLbEYdtwCwAHH2T\ncu2p03vt/MGOYuZ2cEY3F9k6Jhg3Jm1y9UL1x/DC1m3GOR+2VPy5VQ+nSv6vWMzm\nt1hHwAQoYU8PkWW7ubLgki3v82OXKHFJ885kL7wy/eUw4Nft5ml6BXjgc2j3C/ws\n+ImM3CPwPBR2s3OSpcGTyVpBSTtrek6savIor6Lk+2Y34RrIahB4ZX/JNHXYX3Ig\n/laTyh0lmxOCkhrrsyLNMUFa5/faFDXErZ5JMzeZaoVv4V4/2gD4Hsr+QGxrF/z1\nUA5zo+v2a//XxTvf/lBFlRd3bSlyFzQ0p1827v8rwLgKz0fK0gXklwZB1bDQ9DCK\nKMZSwTs+wFQ3qCv53LtpPRM53eJlJQVwViUnuYfKR+EvUS3+3yFhMKJ6SnFOExfd\nCnHzv+rnKTDvFVS3ldgVzcAzxae+y4tBZNgqXlSOxhp0numIL7fJyswyici/Ze/+\n8irAe6FZPCy7y94IFJj+gvlSqm7Y+U8AzAJd2hcq9xrGcPpfagBuKi8Gs04ompxx\nb9vpYq6k+5UP95admS0t/Y64eeMH+vvlbOnWCC3UUDOklxFIF4E=\n=lN9w\n-----END PGP SIGNATURE-----", "payload": "tree 226bb49097be3131683c13cdc06e4f7b7c905eb8\nparent 576deef691830084184be0618e86fd4a798802ed\nauthor David Wood <david@davidtw.co> 1592827625 +0100\ncommitter David Wood <david@davidtw.co> 1595240605 +0100\n\nty: `STILL_FURTHER_SPECIALIZABLE` w/out prnt subst\n\nThis commit modifies the `STILL_FURTHER_SPECIALIZABLE` flag so that the\nflag isn't set by the parent substs of closures or generators.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "html_url": "https://github.com/rust-lang/rust/commit/c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed442f401d90211ae36a9808ccaf0a3dc025f6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576deef691830084184be0618e86fd4a798802ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/576deef691830084184be0618e86fd4a798802ed", "html_url": "https://github.com/rust-lang/rust/commit/576deef691830084184be0618e86fd4a798802ed"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "11a8bedb6605bf6caa3de7fd23e818806f244f72", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed442f401d90211ae36a9808ccaf0a3dc025f6/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed442f401d90211ae36a9808ccaf0a3dc025f6/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "patch": "@@ -85,7 +85,19 @@ impl FlagComputation {\n             }\n \n             &ty::Generator(_, ref substs, _) => {\n-                self.add_substs(substs);\n+                let substs = substs.as_generator();\n+                let should_remove_further_specializable =\n+                    !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n+                self.add_substs(substs.parent_substs());\n+                if should_remove_further_specializable {\n+                    self.flags -= TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n+                }\n+\n+                self.add_ty(substs.resume_ty());\n+                self.add_ty(substs.return_ty());\n+                self.add_ty(substs.witness());\n+                self.add_ty(substs.yield_ty());\n+                self.add_ty(substs.tupled_upvars_ty());\n             }\n \n             &ty::GeneratorWitness(ts) => {\n@@ -95,7 +107,17 @@ impl FlagComputation {\n             }\n \n             &ty::Closure(_, substs) => {\n-                self.add_substs(substs);\n+                let substs = substs.as_closure();\n+                let should_remove_further_specializable =\n+                    !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n+                self.add_substs(substs.parent_substs());\n+                if should_remove_further_specializable {\n+                    self.flags -= TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n+                }\n+\n+                self.add_ty(substs.sig_as_fn_ptr_ty());\n+                self.add_ty(substs.kind_ty());\n+                self.add_ty(substs.tupled_upvars_ty());\n             }\n \n             &ty::Bound(debruijn, _) => {"}, {"sha": "03bf51c95c5a3d7d2a0ecb3beec2f190de0ebab0", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed442f401d90211ae36a9808ccaf0a3dc025f6/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed442f401d90211ae36a9808ccaf0a3dc025f6/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=c6ed442f401d90211ae36a9808ccaf0a3dc025f6", "patch": "@@ -318,6 +318,7 @@ pub struct ClosureSubsts<'tcx> {\n /// Struct returned by `split()`. Note that these are subslices of the\n /// parent slice and not canonical substs themselves.\n struct SplitClosureSubsts<'tcx> {\n+    parent: &'tcx [GenericArg<'tcx>],\n     closure_kind_ty: GenericArg<'tcx>,\n     closure_sig_as_fn_ptr_ty: GenericArg<'tcx>,\n     tupled_upvars_ty: GenericArg<'tcx>,\n@@ -329,8 +330,13 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// ordering.\n     fn split(self) -> SplitClosureSubsts<'tcx> {\n         match self.substs[..] {\n-            [.., closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty] => {\n-                SplitClosureSubsts { closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty }\n+            [ref parent @ .., closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty] => {\n+                SplitClosureSubsts {\n+                    parent,\n+                    closure_kind_ty,\n+                    closure_sig_as_fn_ptr_ty,\n+                    tupled_upvars_ty,\n+                }\n             }\n             _ => bug!(\"closure substs missing synthetics\"),\n         }\n@@ -345,9 +351,20 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         self.substs.len() >= 3 && matches!(self.split().tupled_upvars_ty.expect_ty().kind, Tuple(_))\n     }\n \n+    /// Returns the substitutions of the closure's parent.\n+    pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {\n+        self.split().parent\n+    }\n+\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        self.split().tupled_upvars_ty.expect_ty().tuple_fields()\n+        self.tupled_upvars_ty().tuple_fields()\n+    }\n+\n+    /// Returns the tuple type representing the upvars for this closure.\n+    #[inline]\n+    pub fn tupled_upvars_ty(self) -> Ty<'tcx> {\n+        self.split().tupled_upvars_ty.expect_ty()\n     }\n \n     /// Returns the closure kind for this closure; may return a type\n@@ -392,6 +409,7 @@ pub struct GeneratorSubsts<'tcx> {\n }\n \n struct SplitGeneratorSubsts<'tcx> {\n+    parent: &'tcx [GenericArg<'tcx>],\n     resume_ty: GenericArg<'tcx>,\n     yield_ty: GenericArg<'tcx>,\n     return_ty: GenericArg<'tcx>,\n@@ -402,8 +420,15 @@ struct SplitGeneratorSubsts<'tcx> {\n impl<'tcx> GeneratorSubsts<'tcx> {\n     fn split(self) -> SplitGeneratorSubsts<'tcx> {\n         match self.substs[..] {\n-            [.., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {\n-                SplitGeneratorSubsts { resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty }\n+            [ref parent @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {\n+                SplitGeneratorSubsts {\n+                    parent,\n+                    resume_ty,\n+                    yield_ty,\n+                    return_ty,\n+                    witness,\n+                    tupled_upvars_ty,\n+                }\n             }\n             _ => bug!(\"generator substs missing synthetics\"),\n         }\n@@ -418,6 +443,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         self.substs.len() >= 5 && matches!(self.split().tupled_upvars_ty.expect_ty().kind, Tuple(_))\n     }\n \n+    /// Returns the substitutions of the generator's parent.\n+    pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {\n+        self.split().parent\n+    }\n+\n     /// This describes the types that can be contained in a generator.\n     /// It will be a type variable initially and unified in the last stages of typeck of a body.\n     /// It contains a tuple of all the types that could end up on a generator frame.\n@@ -429,7 +459,13 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n \n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        self.split().tupled_upvars_ty.expect_ty().tuple_fields()\n+        self.tupled_upvars_ty().tuple_fields()\n+    }\n+\n+    /// Returns the tuple type representing the upvars for this generator.\n+    #[inline]\n+    pub fn tupled_upvars_ty(self) -> Ty<'tcx> {\n+        self.split().tupled_upvars_ty.expect_ty()\n     }\n \n     /// Returns the type representing the resume type of the generator."}]}