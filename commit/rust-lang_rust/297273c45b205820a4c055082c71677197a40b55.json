{"sha": "297273c45b205820a4c055082c71677197a40b55", "node_id": "C_kwDOAAsO6NoAKDI5NzI3M2M0NWIyMDU4MjBhNGMwNTUwODJjNzE2NzcxOTdhNDBiNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-07T07:29:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-07T07:29:08Z"}, "message": "Auto merge of #94692 - matthiaskrgr:rollup-64p7ya7, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #94636 (Check extra function arg exprs even if the fn is not C-variadic)\n - #94676 (Remove unnecessary `..` patterns)\n - #94681 (CTFE engine: expose misc_cast to Miri)\n - #94684 (Fix rustdoc for GATs with with anonymous bound regions)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8e3d8139b8c6d678c173695eadd9b3d66998bc43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e3d8139b8c6d678c173695eadd9b3d66998bc43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/297273c45b205820a4c055082c71677197a40b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/297273c45b205820a4c055082c71677197a40b55", "html_url": "https://github.com/rust-lang/rust/commit/297273c45b205820a4c055082c71677197a40b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/297273c45b205820a4c055082c71677197a40b55/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2631aeef823a9e16d31f999d3f07001e5fcc4b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2631aeef823a9e16d31f999d3f07001e5fcc4b3d", "html_url": "https://github.com/rust-lang/rust/commit/2631aeef823a9e16d31f999d3f07001e5fcc4b3d"}, {"sha": "a1119fd6999aa034d026d1d97d4acff8a2662f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1119fd6999aa034d026d1d97d4acff8a2662f18", "html_url": "https://github.com/rust-lang/rust/commit/a1119fd6999aa034d026d1d97d4acff8a2662f18"}], "stats": {"total": 157, "additions": 93, "deletions": 64}, "files": [{"sha": "7a272308fb051af3e51861a78d23e8ff22369900", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -2064,17 +2064,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )),\n                 _ => None,\n             });\n-            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n-                itctx\n-            {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes } = itctx {\n                 capturable_lifetimes.extend(lt_def_names.clone());\n             }\n \n             let res = this.lower_trait_ref(&p.trait_ref, itctx.reborrow());\n \n-            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n-                itctx\n-            {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes } = itctx {\n                 for param in lt_def_names {\n                     capturable_lifetimes.remove(&param);\n                 }"}, {"sha": "5be0a183cf6b40300685b951120cf339abee7cca", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -97,7 +97,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    fn misc_cast(\n+    pub fn misc_cast(\n         &self,\n         src: &ImmTy<'tcx, M::PointerTag>,\n         cast_ty: Ty<'tcx>,\n@@ -139,7 +139,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n                     let discr_layout = self.layout_of(discr.ty)?;\n-                    return Ok(self.cast_from_scalar(discr.val, discr_layout, cast_ty).into());\n+                    return Ok(self.cast_from_int_like(discr.val, discr_layout, cast_ty).into());\n                 }\n             }\n             Variants::Multiple { .. } => {}\n@@ -169,17 +169,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n-        // # The remaining source values are scalar.\n+        // # The remaining source values are scalar and \"int-like\".\n \n         // For all remaining casts, we either\n         // (a) cast a raw ptr to usize, or\n         // (b) cast from an integer-like (including bool, char, enums).\n         // In both cases we want the bits.\n         let bits = src.to_scalar()?.to_bits(src.layout.size)?;\n-        Ok(self.cast_from_scalar(bits, src.layout, cast_ty).into())\n+        Ok(self.cast_from_int_like(bits, src.layout, cast_ty).into())\n     }\n \n-    pub(super) fn cast_from_scalar(\n+    fn cast_from_int_like(\n         &self,\n         v: u128, // raw bits (there is no ScalarTy so we separate data+layout)\n         src_layout: TyAndLayout<'tcx>,"}, {"sha": "fb4fe41bdbc4c31981b3007ab59cd9faf8c7a02d", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -681,18 +681,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;\n         assert_eq!(tag_layout.size, tag_val.layout.size);\n         assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());\n-        let tag_val = tag_val.to_scalar()?;\n-        trace!(\"tag value: {:?}\", tag_val);\n+        trace!(\"tag value: {}\", tag_val);\n \n         // Figure out which discriminant and variant this corresponds to.\n         Ok(match *tag_encoding {\n             TagEncoding::Direct => {\n+                // Generate a specific error if `tag_val` is not an integer.\n+                // (`tag_bits` itself is only used for error messages below.)\n                 let tag_bits = tag_val\n+                    .to_scalar()?\n                     .try_to_int()\n                     .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?\n                     .assert_bits(tag_layout.size);\n                 // Cast bits from tag layout to discriminant layout.\n-                let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);\n+                // After the checks we did above, this cannot fail.\n+                let discr_val =\n+                    self.misc_cast(&tag_val, discr_layout.ty).unwrap().to_scalar().unwrap();\n                 let discr_bits = discr_val.assert_bits(discr_layout.size);\n                 // Convert discriminant to variant index, and catch invalid discriminants.\n                 let index = match *op.layout.ty.kind() {\n@@ -712,6 +716,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (discr_val, index.0)\n             }\n             TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+                let tag_val = tag_val.to_scalar()?;\n                 // Compute the variant this niche value/\"tag\" corresponds to. With niche layout,\n                 // discriminant (encoded in niche/tag) and variant index are the same.\n                 let variants_start = niche_variants.start().as_u32();"}, {"sha": "dab1da78d4c8f7af0f95b733c7ff91021fdc86ab", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -660,7 +660,7 @@ pub fn write_allocations<'tcx>(\n     }\n     fn alloc_ids_from_const(val: ConstValue<'_>) -> impl Iterator<Item = AllocId> + '_ {\n         match val {\n-            ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _size)) => {\n+            ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _)) => {\n                 Either::Left(Either::Left(std::iter::once(ptr.provenance)))\n             }\n             ConstValue::Scalar(interpret::Scalar::Int { .. }) => {"}, {"sha": "fd1c0239b596511b011a76acd04436b0d90ff95c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -852,7 +852,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n                         self.visit(self.ev.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Const { has_default, .. } => {\n+                GenericParamDefKind::Const { has_default } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n                     if has_default {\n                         self.visit(self.ev.tcx.const_param_default(param.def_id));"}, {"sha": "f2ddc3ea7fa3909eebfebdd593ef60acc0fbf0a1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 hir::Node::Item(hir::Item {\n                     kind:\n-                        hir::ItemKind::Trait(_, _, generics, _, _)\n+                        hir::ItemKind::Trait(_, _, generics, ..)\n                         | hir::ItemKind::Impl(hir::Impl { generics, .. }),\n                     ..\n                 }) if projection.is_some() => {"}, {"sha": "b3213451d76c43049bddb5ecef655d312455c6a5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -1403,7 +1403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.fcx.var_for_def(self.span, param)\n                         }\n                     }\n-                    GenericParamDefKind::Const { has_default, .. } => {\n+                    GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n                             tcx.const_param_default(param.def_id)\n                                 .subst_spanned(tcx, substs.unwrap(), Some(self.span))"}, {"sha": "f165093c958dba28ffcfcd499828aadf6a9f4beb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -281,6 +281,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_suptype(provided_arg.span, formal_input_ty, coerced_ty);\n         };\n \n+        let minimum_input_count = formal_input_tys.len();\n+\n         // Check the arguments.\n         // We do this in a pretty awful way: first we type-check any arguments\n         // that are not closures, then we type-check the closures. This is so\n@@ -303,7 +305,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n             }\n \n-            let minimum_input_count = formal_input_tys.len();\n             for (idx, arg) in provided_args.iter().enumerate() {\n                 // Warn only for the first loop (the \"no closures\" one).\n                 // Closure arguments themselves can't be diverging, but\n@@ -456,17 +457,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.emit();\n         }\n \n-        // We also need to make sure we at least write the ty of the other\n-        // arguments which we skipped above.\n-        if c_variadic {\n-            fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n-                use crate::structured_errors::MissingCastForVariadicArg;\n+        for arg in provided_args.iter().skip(minimum_input_count) {\n+            let arg_ty = self.check_expr(&arg);\n \n-                MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n-            }\n+            if c_variadic {\n+                // We also need to make sure we at least write the ty of the other\n+                // arguments which we skipped above, either because they were additional\n+                // c_variadic args, or because we had an argument count mismatch.\n+                fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n+                    use crate::structured_errors::MissingCastForVariadicArg;\n \n-            for arg in provided_args.iter().skip(expected_arg_count) {\n-                let arg_ty = self.check_expr(&arg);\n+                    MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n+                }\n \n                 // There are a few types which get autopromoted when passed via varargs\n                 // in C but we just error out instead and require explicit casts."}, {"sha": "29c11c7b28a5f43431c15b54f8a3b0906a5f4698", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -402,16 +402,7 @@ fn projection_to_path_segment(ty: ty::ProjectionTy<'_>, cx: &mut DocContext<'_>)\n     PathSegment {\n         name: item.name,\n         args: GenericArgs::AngleBracketed {\n-            args: ty.substs[generics.parent_count..]\n-                .iter()\n-                .map(|ty| match ty.unpack() {\n-                    ty::subst::GenericArgKind::Lifetime(lt) => {\n-                        GenericArg::Lifetime(lt.clean(cx).unwrap())\n-                    }\n-                    ty::subst::GenericArgKind::Type(ty) => GenericArg::Type(ty.clean(cx)),\n-                    ty::subst::GenericArgKind::Const(c) => GenericArg::Const(Box::new(c.clean(cx))),\n-                })\n-                .collect(),\n+            args: substs_to_args(cx, &ty.substs[generics.parent_count..], false),\n             bindings: Default::default(),\n         },\n     }\n@@ -451,7 +442,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     },\n                 )\n             }\n-            ty::GenericParamDefKind::Const { has_default, .. } => (\n+            ty::GenericParamDefKind::Const { has_default } => (\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,\n@@ -1379,11 +1370,7 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n                 });\n                 if let Some(lt) = lifetime.cloned() {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned = if !lt.is_elided() {\n-                        lt.clean(cx)\n-                    } else {\n-                        self::types::Lifetime::elided()\n-                    };\n+                    let cleaned = if !lt.is_elided() { lt.clean(cx) } else { Lifetime::elided() };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;"}, {"sha": "7861b915e9627668edd0e9be6f388f4270f229b7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -77,16 +77,12 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     Crate { module, primitives, external_traits: cx.external_traits.clone() }\n }\n \n-fn external_generic_args(\n+crate fn substs_to_args(\n     cx: &mut DocContext<'_>,\n-    did: DefId,\n-    has_self: bool,\n-    bindings: Vec<TypeBinding>,\n-    substs: SubstsRef<'_>,\n-) -> GenericArgs {\n-    let mut skip_self = has_self;\n-    let mut ty_kind = None;\n-    let args: Vec<_> = substs\n+    substs: &[ty::subst::GenericArg<'_>],\n+    mut skip_first: bool,\n+) -> Vec<GenericArg> {\n+    substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n             GenericArgKind::Lifetime(lt) => match *lt {\n@@ -95,23 +91,32 @@ fn external_generic_args(\n                 }\n                 _ => lt.clean(cx).map(GenericArg::Lifetime),\n             },\n-            GenericArgKind::Type(_) if skip_self => {\n-                skip_self = false;\n+            GenericArgKind::Type(_) if skip_first => {\n+                skip_first = false;\n                 None\n             }\n-            GenericArgKind::Type(ty) => {\n-                ty_kind = Some(ty.kind());\n-                Some(GenericArg::Type(ty.clean(cx)))\n-            }\n+            GenericArgKind::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n             GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(ct.clean(cx)))),\n         })\n-        .collect();\n+        .collect()\n+}\n+\n+fn external_generic_args(\n+    cx: &mut DocContext<'_>,\n+    did: DefId,\n+    has_self: bool,\n+    bindings: Vec<TypeBinding>,\n+    substs: SubstsRef<'_>,\n+) -> GenericArgs {\n+    let args = substs_to_args(cx, &substs, has_self);\n \n     if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n-        let inputs = match ty_kind.unwrap() {\n-            ty::Tuple(tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n-            _ => return GenericArgs::AngleBracketed { args, bindings: bindings.into() },\n-        };\n+        let inputs =\n+            // The trait's first substitution is the one after self, if there is one.\n+            match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {\n+                ty::Tuple(tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                _ => return GenericArgs::AngleBracketed { args, bindings: bindings.into() },\n+            };\n         let output = None;\n         // FIXME(#20299) return type comes from a projection now\n         // match types[1].kind {"}, {"sha": "38ecf5283108f047462a5832192b6001e4689b30", "filename": "src/test/rustdoc/generic-associated-types/issue-94683.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -0,0 +1,13 @@\n+#![crate_name = \"foo\"]\n+#![feature(generic_associated_types)]\n+\n+pub trait Trait {\n+    type Gat<'a>;\n+}\n+\n+// Make sure that the elided lifetime shows up\n+\n+// @has foo/type.T.html\n+// @has - \"pub type T = \"\n+// @has - \"&lt;'_&gt;\"\n+pub type T = fn(&<() as Trait>::Gat<'_>);"}, {"sha": "479bd0d819fdb921b4a59fdb1e1cc737d544afca", "filename": "src/test/ui/tuple/wrong_argument_ice-4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    (|| {})(|| {\n+        //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+        let b = 1;\n+    });\n+}"}, {"sha": "fef5dca856db36592aad666b9a3cde8b603a3ffb", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/297273c45b205820a4c055082c71677197a40b55/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/297273c45b205820a4c055082c71677197a40b55/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=297273c45b205820a4c055082c71677197a40b55", "patch": "@@ -0,0 +1,15 @@\n+error[E0057]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/wrong_argument_ice-4.rs:2:5\n+   |\n+LL |       (|| {})(|| {\n+   |  _____^^^^^^^_-\n+   | |     |\n+   | |     expected 0 arguments\n+LL | |\n+LL | |         let b = 1;\n+LL | |     });\n+   | |_____- supplied 1 argument\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0057`."}]}