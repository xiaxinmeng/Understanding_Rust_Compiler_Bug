{"sha": "76b13c9eeaa3bf814ff4559eafff235a892d213b", "node_id": "C_kwDOAAsO6NoAKDc2YjEzYzllZWFhM2JmODE0ZmY0NTU5ZWFmZmYyMzVhODkyZDIxM2I", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-23T13:11:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-25T13:00:53Z"}, "message": "Enable rustc_pass_by_value for Span", "tree": {"sha": "7b14a6b2cf3257a3938c29aa729828925be3568b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b14a6b2cf3257a3938c29aa729828925be3568b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b13c9eeaa3bf814ff4559eafff235a892d213b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b13c9eeaa3bf814ff4559eafff235a892d213b", "html_url": "https://github.com/rust-lang/rust/commit/76b13c9eeaa3bf814ff4559eafff235a892d213b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b13c9eeaa3bf814ff4559eafff235a892d213b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c3a71de1f798822594498559622407ed882d88", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c3a71de1f798822594498559622407ed882d88", "html_url": "https://github.com/rust-lang/rust/commit/22c3a71de1f798822594498559622407ed882d88"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "7320a5690693b732ae617afeb3cc980446eb8885", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -162,6 +162,9 @@ macro_rules! make_mir_visitor {\n                 self.super_constant(constant, location);\n             }\n \n+            // The macro results in a false positive of sorts, where &mut Span\n+            // is fine, but &Span is not; just allow the lint.\n+            #[allow(rustc::pass_by_value)]\n             fn visit_span(&mut self,\n                           span: & $($mutability)? Span) {\n                 self.super_span(span);\n@@ -869,6 +872,9 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n+            // The macro results in a false positive of sorts, where &mut Span\n+            // is fine, but &Span is not; just allow the lint.\n+            #[allow(rustc::pass_by_value)]\n             fn super_span(&mut self, _span: & $($mutability)? Span) {\n             }\n "}, {"sha": "b2ea2889b3e048b55d13783b7a2d1f5ecb1edac7", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // a Coverage code region can be generated, `continue` needs no `Assign`; but\n                 // without one, the `InstrumentCoverage` MIR pass cannot generate a code region for\n                 // `continue`. Coverage will be missing unless we add a dummy `Assign` to MIR.\n-                self.add_dummy_assignment(&span, block, source_info);\n+                self.add_dummy_assignment(span, block, source_info);\n             }\n         }\n \n@@ -730,8 +730,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     // Add a dummy `Assign` statement to the CFG, with the span for the source code's `continue`\n     // statement.\n-    fn add_dummy_assignment(&mut self, span: &Span, block: BasicBlock, source_info: SourceInfo) {\n-        let local_decl = LocalDecl::new(self.tcx.mk_unit(), *span).internal();\n+    fn add_dummy_assignment(&mut self, span: Span, block: BasicBlock, source_info: SourceInfo) {\n+        let local_decl = LocalDecl::new(self.tcx.mk_unit(), span).internal();\n         let temp_place = Place::from(self.local_decls.push(local_decl));\n         self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);\n     }"}, {"sha": "27b9b6c2fa3e76872c627e1d32f43203a2993125", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -47,9 +47,9 @@ impl CoverageStatement {\n         }\n     }\n \n-    pub fn span(&self) -> &Span {\n+    pub fn span(&self) -> Span {\n         match self {\n-            Self::Statement(_, span, _) | Self::Terminator(_, span) => span,\n+            Self::Statement(_, span, _) | Self::Terminator(_, span) => *span,\n         }\n     }\n }"}, {"sha": "6d7377927c2910df4f9cc7fda27ddc7244b1e3eb", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -22,6 +22,7 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n #![allow(rustc::potential_query_instability)]\n \n #[macro_use]"}, {"sha": "3ee329e9736f2570e47c4e771da6cbd8a72921a0", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -61,8 +61,7 @@ use rustc_data_structures::fx::FxIndexSet;\n /// using the callback `SPAN_TRACK` to access the query engine.\n ///\n #[derive(Clone, Copy, Eq, PartialEq, Hash)]\n-// FIXME: Enable this in the bootstrap bump, but separate commit.\n-// #[rustc_pass_by_value]\n+#[rustc_pass_by_value]\n pub struct Span {\n     base_or_index: u32,\n     len_or_tag: u16,"}, {"sha": "8d4ffefda73bb41d03c1b58b882d0cf4afb65307", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Box(subexpr) => self.check_expr_box(subexpr, expected),\n             ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),\n             ExprKind::Binary(op, lhs, rhs) => self.check_binop(expr, op, lhs, rhs),\n-            ExprKind::Assign(lhs, rhs, ref span) => {\n+            ExprKind::Assign(lhs, rhs, span) => {\n                 self.check_expr_assign(expr, expected, lhs, rhs, span)\n             }\n             ExprKind::AssignOp(op, lhs, rhs) => self.check_binop_assign(expr, op, lhs, rhs),\n@@ -982,7 +982,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n         lhs: &'tcx hir::Expr<'tcx>,\n         rhs: &'tcx hir::Expr<'tcx>,\n-        span: &Span,\n+        span: Span,\n     ) -> Ty<'tcx> {\n         let expected_ty = expected.coercion_target_type(self, expr.span);\n         if expected_ty == self.tcx.types.bool {\n@@ -1014,7 +1014,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             if eq {\n                 err.span_suggestion_verbose(\n-                    *span,\n+                    span,\n                     \"you might have meant to compare for equality\",\n                     \"==\".to_string(),\n                     applicability,\n@@ -1031,7 +1031,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return self.tcx.ty_error();\n         }\n \n-        self.check_lhs_assignable(lhs, \"E0070\", *span);\n+        self.check_lhs_assignable(lhs, \"E0070\", span);\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n         let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));"}, {"sha": "5dd5e71656d2317fd13a85667a3e8064520ab1ce", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let ty =\n             if !lhs_ty.is_ty_var() && !rhs_ty.is_ty_var() && is_builtin_binop(lhs_ty, rhs_ty, op) {\n-                self.enforce_builtin_binop_types(&lhs.span, lhs_ty, &rhs.span, rhs_ty, op);\n+                self.enforce_builtin_binop_types(lhs.span, lhs_ty, rhs.span, rhs_ty, op);\n                 self.tcx.mk_unit()\n             } else {\n                 return_ty\n@@ -98,9 +98,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     && is_builtin_binop(lhs_ty, rhs_ty, op)\n                 {\n                     let builtin_return_ty = self.enforce_builtin_binop_types(\n-                        &lhs_expr.span,\n+                        lhs_expr.span,\n                         lhs_ty,\n-                        &rhs_expr.span,\n+                        rhs_expr.span,\n                         rhs_ty,\n                         op,\n                     );\n@@ -114,9 +114,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn enforce_builtin_binop_types(\n         &self,\n-        lhs_span: &Span,\n+        lhs_span: Span,\n         lhs_ty: Ty<'tcx>,\n-        rhs_span: &Span,\n+        rhs_span: Span,\n         rhs_ty: Ty<'tcx>,\n         op: hir::BinOp,\n     ) -> Ty<'tcx> {\n@@ -129,8 +129,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         match BinOpCategory::from(op) {\n             BinOpCategory::Shortcircuit => {\n-                self.demand_suptype(*lhs_span, tcx.types.bool, lhs_ty);\n-                self.demand_suptype(*rhs_span, tcx.types.bool, rhs_ty);\n+                self.demand_suptype(lhs_span, tcx.types.bool, lhs_ty);\n+                self.demand_suptype(rhs_span, tcx.types.bool, rhs_ty);\n                 tcx.types.bool\n             }\n \n@@ -141,13 +141,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             BinOpCategory::Math | BinOpCategory::Bitwise => {\n                 // both LHS and RHS and result will have the same type\n-                self.demand_suptype(*rhs_span, lhs_ty, rhs_ty);\n+                self.demand_suptype(rhs_span, lhs_ty, rhs_ty);\n                 lhs_ty\n             }\n \n             BinOpCategory::Comparison => {\n                 // both LHS and RHS and result will have the same type\n-                self.demand_suptype(*rhs_span, lhs_ty, rhs_ty);\n+                self.demand_suptype(rhs_span, lhs_ty, rhs_ty);\n                 tcx.types.bool\n             }\n         }"}, {"sha": "4f333cd27cefe5c9a70d1a7e883819f126dcf8de", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76b13c9eeaa3bf814ff4559eafff235a892d213b/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b13c9eeaa3bf814ff4559eafff235a892d213b/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=76b13c9eeaa3bf814ff4559eafff235a892d213b", "patch": "@@ -1533,7 +1533,7 @@ fn rewrite_struct_lit<'a>(\n     enum StructLitField<'a> {\n         Regular(&'a ast::ExprField),\n         Base(&'a ast::Expr),\n-        Rest(&'a Span),\n+        Rest(Span),\n     }\n \n     // 2 = \" {\".len()\n@@ -1568,7 +1568,7 @@ fn rewrite_struct_lit<'a>(\n         let field_iter = fields.iter().map(StructLitField::Regular).chain(\n             match struct_rest {\n                 ast::StructRest::Base(expr) => Some(StructLitField::Base(&**expr)),\n-                ast::StructRest::Rest(span) => Some(StructLitField::Rest(span)),\n+                ast::StructRest::Rest(span) => Some(StructLitField::Rest(*span)),\n                 ast::StructRest::None => None,\n             }\n             .into_iter(),"}]}