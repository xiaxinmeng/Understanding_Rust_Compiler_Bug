{"sha": "639f660dde9936368714a10a80a325a78a1b3a99", "node_id": "C_kwDOAAsO6NoAKDYzOWY2NjBkZGU5OTM2MzY4NzE0YTEwYTgwYTMyNWE3OGExYjNhOTk", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-22T06:03:34Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-22T06:21:12Z"}, "message": "Manual adjustments", "tree": {"sha": "139785a07b846699b2e1ce2e267e0c68a5c9c79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/139785a07b846699b2e1ce2e267e0c68a5c9c79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/639f660dde9936368714a10a80a325a78a1b3a99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKytNgACgkQ+boUO5X/\nbYIVgBAAxnh/rzYuqbPZb2XXVxL/Ear5kHOwYaBFp0E+epoUgyS/RSZXWUvhWXlP\nP0xcxY/G6qmy+OYuPkpSVzQXX8fDozNs8KVKfshdB5ektUQTtzpbuvKuloiVw9LV\n8KCOX/pYKdC8wmDMDxmChG/t3w55TKQjjL81+R8y1AM4jfcCKytDHt+DAGTNFpLp\nySHqoQyh6oWPvJV1b6kC/pTGR7A4YN0xMfvhXCKIViHqEDrIP+1ASn/V566CUsOA\nX55XiHrYmuKVzdGq2BhA2NuL3wD3PRw9FascZG31SqubRKKSyMSR81+ERqPKPVuC\ncIK0unTWJqkUd+dZY8RtQ0dzDuDyg9E5Wq7zqHTXjX73TW0xNa/BJbRpCXKd0ZKV\n1dnM6cTR2qlcHUbPKNwcveMF8hL6lixoNm7KsZeB7G53NHuuvUyzRqFrfZN3vxfz\nhTkTFOi4lVRC9Cm2gQtmVvlY2KODnK282VrcciAqJ1vx0qmH6trW7LLyHJPeFJac\nHbv1uzJ2lfZk+vdCVHhQhKObV09KWxZEey37FoWR/bkbUg4UfDlk32Tf/vo2P+K3\n9AOriM5wpvTaGsrhXJJajJq4XhI8ehizER+qPXOqMMyGfnYI7cw1siN00OWI6pqX\nc+bGVHtHaaIVqKtprIxpaqYDohAWBihFHdnbV0MviV6m5KUjf1M=\n=Skqe\n-----END PGP SIGNATURE-----", "payload": "tree 139785a07b846699b2e1ce2e267e0c68a5c9c79b\nparent 7d09004aee288b3debfcfa734c77a4805ad76822\nauthor David Tolnay <dtolnay@gmail.com> 1655877814 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655878872 -0700\n\nManual adjustments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/639f660dde9936368714a10a80a325a78a1b3a99", "html_url": "https://github.com/rust-lang/rust/commit/639f660dde9936368714a10a80a325a78a1b3a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/639f660dde9936368714a10a80a325a78a1b3a99/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d09004aee288b3debfcfa734c77a4805ad76822", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d09004aee288b3debfcfa734c77a4805ad76822", "html_url": "https://github.com/rust-lang/rust/commit/7d09004aee288b3debfcfa734c77a4805ad76822"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "7e1b969e02cf60badcb5d586bb459906e448dbd5", "filename": "tests/fail/branchless-select-i128-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -12,7 +12,7 @@ fn main() {\n         // However, it drops provenance when transmuting to TwoPtrs, so this is UB.\n         let val = unsafe {\n             transmute::<_, &str>(\n-                //~ERROR type validation failed: encountered a dangling reference\n+                //~^ ERROR type validation failed: encountered a dangling reference\n                 !mask & transmute::<_, TwoPtrs>(\"false !\")\n                     | mask & transmute::<_, TwoPtrs>(\"true !\"),\n             )"}, {"sha": "555700a75d3aec5e71d31555ed1bf24a5bb285aa", "filename": "tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -18,14 +18,17 @@ pub fn main() {\n     let ptr = EvilSend(pointer);\n \n     unsafe {\n-        let j1 = spawn(move || *ptr.0);\n+        let j1 = spawn(move || {\n+            let _val = *ptr.0;\n+        });\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n+                //~^ ERROR Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1)\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),\n-            ); //~ ERROR Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1)\n+            );\n         });\n \n         j1.join().unwrap();"}, {"sha": "44078a044a7f8f67348379d580dd70c09fa0226f", "filename": "tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -23,10 +23,11 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n+                //~^ ERROR Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1)\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),\n-            ); //~ ERROR Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1)\n+            );\n         });\n \n         j1.join().unwrap();"}, {"sha": "0a5a2d48d2743ee68e9f9d7bcc0b0fac3fa3c6d8", "filename": "tests/fail/function_calls/check_callback_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         // Make sure we check the ABI when Miri itself invokes a function\n         // as part of a shim implementation.\n         std::intrinsics::r#try(\n-            //~ ERROR calling a function with ABI C using caller ABI Rust\n+            //~^ ERROR calling a function with ABI C using caller ABI Rust\n             std::mem::transmute::<extern \"C\" fn(*mut u8), _>(try_fn),\n             std::ptr::null_mut(),\n             |_, _| unreachable!(),"}, {"sha": "c337e1f29f16fe6ca77cc86089835ec0436bd32a", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -11,23 +11,25 @@ fn main() {\n \n     #[cfg(fn_ptr)]\n     unsafe {\n-        std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)()\n+        std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)();\n+        //[fn_ptr]~^ ERROR calling a function with calling convention Rust using calling convention C\n     }\n-    //[fn_ptr]~^ ERROR calling a function with calling convention Rust using calling convention C\n \n     // `Instance` caching should not suppress ABI check.\n     #[cfg(cache)]\n     unsafe {\n-        foo()\n+        foo();\n     }\n \n     {\n         #[cfg_attr(any(cache, fn_ptr), allow(clashing_extern_declarations))]\n         extern \"C\" {\n             fn foo();\n         }\n-        unsafe { foo() }\n-        //[no_cache]~^ ERROR calling a function with calling convention Rust using calling convention C\n-        //[cache]~^^ ERROR calling a function with calling convention Rust using calling convention C\n+        unsafe {\n+            foo();\n+            //[no_cache]~^ ERROR calling a function with calling convention Rust using calling convention C\n+            //[cache]~| ERROR calling a function with calling convention Rust using calling convention C\n+        }\n     }\n }"}, {"sha": "08f7a49b0255cdb6fa49edd544b8d63b6b2ad59b", "filename": "tests/fail/type-too-large.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Ftype-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Ftype-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftype-too-large.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -1,5 +1,6 @@\n // ignore-32bit\n \n fn main() {\n-    let _fat: [u8; (1 << 61) + (1 << 31)] = [0; (1u64 << 61) as usize + (1u64 << 31) as usize]; //~ ERROR post-monomorphization error\n+    let _fat: [u8; (1 << 61) + (1 << 31)];\n+    _fat = [0; (1u64 << 61) as usize + (1u64 << 31) as usize]; //~ ERROR post-monomorphization error\n }"}, {"sha": "80749fd7c7916c2823acb97097364bbdc23e8227", "filename": "tests/fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Ffail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_char.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n     let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } {\n-        //~ ERROR encountered 0xffffffff, but expected a valid unicode scalar value\n+        //~^ ERROR encountered 0xffffffff, but expected a valid unicode scalar value\n         'a' => true,\n         'b' => false,\n         _ => true,"}, {"sha": "0f798d2b575e08039d6243bfcaa21c69202998ca", "filename": "tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2F0weak_memory_consistency.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -54,14 +54,14 @@ fn test_corr() {\n         x.store(2, Relaxed);\n     });\n \n+    #[rustfmt::skip]\n     let j2 = spawn(move || {\n         let r2 = x.load(Relaxed); // -------------------------------------+\n         y.store(1, Release); // ---------------------+                    |\n         r2 //                                        |                    |\n     }); //                                           |                    |\n-    //                                               |synchronizes-with   |happens-before\n-    let j3 = spawn(move || {\n-        //                      |                    |\n+    #[rustfmt::skip] //                              |synchronizes-with   |happens-before\n+    let j3 = spawn(move || { //                      |                    |\n         acquires_value(&y, 1); // <------------------+                    |\n         x.load(Relaxed) // <----------------------------------------------+\n         // The two reads on x are ordered by hb, so they cannot observe values\n@@ -81,18 +81,17 @@ fn test_wrc() {\n     let x = static_atomic(0);\n     let y = static_atomic(0);\n \n+    #[rustfmt::skip]\n     let j1 = spawn(move || {\n         x.store(1, Release); // ---------------------+---------------------+\n     }); //                                           |                     |\n-    //                                               |synchronizes-with    |\n-    let j2 = spawn(move || {\n-        //                      |                     |\n+    #[rustfmt::skip] //                              |synchronizes-with    |\n+    let j2 = spawn(move || { //                      |                     |\n         acquires_value(&x, 1); // <------------------+                     |\n         y.store(1, Release); // ---------------------+                     |happens-before\n     }); //                                           |                     |\n-    //                                               |synchronizes-with    |\n-    let j3 = spawn(move || {\n-        //                      |                     |\n+    #[rustfmt::skip] //                              |synchronizes-with    |\n+    let j3 = spawn(move || { //                      |                     |\n         acquires_value(&y, 1); // <------------------+                     |\n         x.load(Relaxed) // <-----------------------------------------------+\n     });\n@@ -110,13 +109,13 @@ fn test_message_passing() {\n     let x = EvilSend(ptr);\n     let y = static_atomic(0);\n \n+    #[rustfmt::skip]\n     let j1 = spawn(move || {\n         unsafe { *x.0 = 1 }; // -----------------------------------------+\n         y.store(1, Release); // ---------------------+                   |\n     }); //                                           |                   |\n-    //                                               |synchronizes-with  | happens-before\n-    let j2 = spawn(move || {\n-        //                      |                   |\n+    #[rustfmt::skip] //                              |synchronizes-with  | happens-before\n+    let j2 = spawn(move || { //                      |                   |\n         acquires_value(&y, 1); // <------------------+                   |\n         unsafe { *x.0 } // <---------------------------------------------+\n     });"}, {"sha": "2c60df1ee138a68163c96406334d9f573d0240c0", "filename": "tests/pass/concurrency/linux-futex.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -16,7 +16,7 @@ fn wake_nobody() {\n \n     // Wake 1 waiter. Expect zero waiters woken up, as nobody is waiting.\n     unsafe {\n-        assert_eq!(libc::syscall(libc::SYS_futex, &futex as *const i32, libc::FUTEX_WAKE, 1,), 0);\n+        assert_eq!(libc::syscall(libc::SYS_futex, &futex as *const i32, libc::FUTEX_WAKE, 1), 0);\n     }\n \n     // Same, but without omitting the unused arguments.\n@@ -31,7 +31,7 @@ fn wake_nobody() {\n                 0usize,\n                 0,\n             ),\n-            0\n+            0,\n         );\n     }\n }\n@@ -43,7 +43,7 @@ fn wake_dangling() {\n \n     // Wake 1 waiter. Expect zero waiters woken up, as nobody is waiting.\n     unsafe {\n-        assert_eq!(libc::syscall(libc::SYS_futex, ptr, libc::FUTEX_WAKE, 1,), 0);\n+        assert_eq!(libc::syscall(libc::SYS_futex, ptr, libc::FUTEX_WAKE, 1), 0);\n     }\n }\n \n@@ -60,7 +60,7 @@ fn wait_wrong_val() {\n                 456,\n                 ptr::null::<libc::timespec>(),\n             ),\n-            -1\n+            -1,\n         );\n         assert_eq!(*libc::__errno_location(), libc::EAGAIN);\n     }\n@@ -81,7 +81,7 @@ fn wait_timeout() {\n                 123,\n                 &libc::timespec { tv_sec: 0, tv_nsec: 200_000_000 },\n             ),\n-            -1\n+            -1,\n         );\n         assert_eq!(*libc::__errno_location(), libc::ETIMEDOUT);\n     }\n@@ -120,7 +120,7 @@ fn wait_absolute_timeout() {\n                 0usize,\n                 u32::MAX,\n             ),\n-            -1\n+            -1,\n         );\n         assert_eq!(*libc::__errno_location(), libc::ETIMEDOUT);\n     }\n@@ -143,8 +143,8 @@ fn wait_wake() {\n                     libc::FUTEX_WAKE,\n                     10, // Wake up at most 10 threads.\n                 ),\n-                1\n-            ); // Woken up one thread.\n+                1, // Woken up one thread.\n+            );\n         }\n     });\n \n@@ -157,7 +157,7 @@ fn wait_wake() {\n                 0,\n                 ptr::null::<libc::timespec>(),\n             ),\n-            0\n+            0,\n         );\n     }\n \n@@ -183,8 +183,8 @@ fn wait_wake_bitset() {\n                     0usize,\n                     0b1001, // bitset\n                 ),\n-                0\n-            ); // Didn't match any thread.\n+                0, // Didn't match any thread.\n+            );\n         }\n         thread::sleep(Duration::from_millis(200));\n         unsafe {\n@@ -198,8 +198,8 @@ fn wait_wake_bitset() {\n                     0usize,\n                     0b0110, // bitset\n                 ),\n-                1\n-            ); // Woken up one thread.\n+                1, // Woken up one thread.\n+            );\n         }\n     });\n \n@@ -214,7 +214,7 @@ fn wait_wake_bitset() {\n                 0usize,\n                 0b0100, // bitset\n             ),\n-            0\n+            0,\n         );\n     }\n "}, {"sha": "2c38dcb49f1cee993951ea62e4bcaed30bffdcff", "filename": "tests/pass/heap_allocator.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fheap_allocator.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -16,7 +16,7 @@ fn check_alloc<T: Allocator>(allocator: T) {\n                 assert_eq!(\n                     a.as_ptr() as usize % layout_20.align(),\n                     0,\n-                    \"pointer is incorrectly aligned\"\n+                    \"pointer is incorrectly aligned\",\n                 );\n                 allocator.deallocate(a, layout_20);\n             }\n@@ -25,7 +25,7 @@ fn check_alloc<T: Allocator>(allocator: T) {\n             assert_eq!(\n                 p1.as_ptr() as usize % layout_20.align(),\n                 0,\n-                \"pointer is incorrectly aligned\"\n+                \"pointer is incorrectly aligned\",\n             );\n             assert_eq!(*p1.as_ptr(), 0);\n \n@@ -34,7 +34,7 @@ fn check_alloc<T: Allocator>(allocator: T) {\n             assert_eq!(\n                 p2.as_ptr() as usize % layout_40.align(),\n                 0,\n-                \"pointer is incorrectly aligned\"\n+                \"pointer is incorrectly aligned\",\n             );\n             let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n             assert_eq!(&slice, &[0_u8; 20]);\n@@ -44,7 +44,7 @@ fn check_alloc<T: Allocator>(allocator: T) {\n             assert_eq!(\n                 p3.as_ptr() as usize % layout_40.align(),\n                 0,\n-                \"pointer is incorrectly aligned\"\n+                \"pointer is incorrectly aligned\",\n             );\n             let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n             assert_eq!(&slice, &[0_u8; 20]);\n@@ -54,7 +54,7 @@ fn check_alloc<T: Allocator>(allocator: T) {\n             assert_eq!(\n                 p4.as_ptr() as usize % layout_10.align(),\n                 0,\n-                \"pointer is incorrectly aligned\"\n+                \"pointer is incorrectly aligned\",\n             );\n             let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n             assert_eq!(&slice, &[0_u8; 10]);\n@@ -65,10 +65,9 @@ fn check_alloc<T: Allocator>(allocator: T) {\n }\n \n fn check_align_requests<T: Allocator>(allocator: T) {\n-    for &size in &[2, 8, 64] {\n-        // size less than and bigger than alignment\n-        for &align in &[4, 8, 16, 32] {\n-            // Be sure to cover less than and bigger than `MIN_ALIGN` for all architectures\n+    #[rustfmt::skip] // https://github.com/rust-lang/rustfmt/issues/3255\n+    for &size in &[2, 8, 64] { // size less than and bigger than alignment\n+        for &align in &[4, 8, 16, 32] { // Be sure to cover less than and bigger than `MIN_ALIGN` for all architectures\n             let iterations = 32;\n             unsafe {\n                 let pointers: Vec<_> = (0..iterations)\n@@ -83,7 +82,7 @@ fn check_align_requests<T: Allocator>(allocator: T) {\n                     assert_eq!(\n                         (ptr.as_ptr() as usize) % align,\n                         0,\n-                        \"Got a pointer less aligned than requested\"\n+                        \"Got a pointer less aligned than requested\",\n                     )\n                 }\n \n@@ -93,7 +92,7 @@ fn check_align_requests<T: Allocator>(allocator: T) {\n                 }\n             }\n         }\n-    }\n+    };\n }\n \n fn global_to_box() {"}, {"sha": "31d0d7442d9d2f3c144e6e6a2c9a67928f0302d5", "filename": "tests/pass/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639f660dde9936368714a10a80a325a78a1b3a99/tests%2Fpass%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fiter.rs?ref=639f660dde9936368714a10a80a325a78a1b3a99", "patch": "@@ -1,6 +1,6 @@\n fn iter_empty_and_zst() {\n+    // Iterate over a Unique::empty()\n     for _ in Vec::<u32>::new().iter() {\n-        // this iterates over a Unique::empty()\n         panic!(\"We should never be here.\");\n     }\n "}]}