{"sha": "75b98fbe77d472d85d1691bae5b25e7eefb3609c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Yjk4ZmJlNzdkNDcyZDg1ZDE2OTFiYWU1YjI1ZTdlZWZiMzYwOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-17T06:44:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-17T06:44:35Z"}, "message": "Auto merge of #69226 - JohnTitor:rollup-syn03oj, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #68495 (Updating str.chars docs to mention crates.io.)\n - #68701 (Improve #Safety of various methods in core::ptr)\n - #69158 (Don't print block exit state in dataflow graphviz if unchanged)\n - #69179 (Rename `FunctionRetTy` to `FnRetTy`)\n - #69186 ([tiny] parser: `macro_rules` is a weak keyword)\n - #69188 (Clean up E0309 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a4abaff4b39aed152126339809782e299df467c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4abaff4b39aed152126339809782e299df467c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b98fbe77d472d85d1691bae5b25e7eefb3609c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b98fbe77d472d85d1691bae5b25e7eefb3609c", "html_url": "https://github.com/rust-lang/rust/commit/75b98fbe77d472d85d1691bae5b25e7eefb3609c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b98fbe77d472d85d1691bae5b25e7eefb3609c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4590facc2c48f2ca42e074a1902c2d1f162a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4590facc2c48f2ca42e074a1902c2d1f162a2f", "html_url": "https://github.com/rust-lang/rust/commit/3c4590facc2c48f2ca42e074a1902c2d1f162a2f"}, {"sha": "cc497c4c84be72d0c4a06ef1b202faf266b0843a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc497c4c84be72d0c4a06ef1b202faf266b0843a", "html_url": "https://github.com/rust-lang/rust/commit/cc497c4c84be72d0c4a06ef1b202faf266b0843a"}], "stats": {"total": 343, "additions": 185, "deletions": 158}, "files": [{"sha": "88b490a25d5ddcaf6efdf53f1da17f5436325d13", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -119,10 +119,13 @@ mod mut_ptr;\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * `to_drop` must be [valid] for reads.\n+/// * `to_drop` must be [valid] for both reads and writes.\n ///\n /// * `to_drop` must be properly aligned.\n ///\n+/// * The value `to_drop` points to must be valid for dropping, which may mean it must uphold\n+///   additional invariants - this is type-dependent.\n+///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n /// foo` counts as a use because it will cause the value to be dropped\n@@ -289,7 +292,7 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * Both `x` and `y` must be [valid] for reads and writes.\n+/// * Both `x` and `y` must be [valid] for both reads and writes.\n ///\n /// * Both `x` and `y` must be properly aligned.\n ///\n@@ -355,7 +358,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * Both `x` and `y` must be [valid] for reads and writes of `count *\n+/// * Both `x` and `y` must be [valid] for both reads and writes of `count *\n ///   size_of::<T>()` bytes.\n ///\n /// * Both `x` and `y` must be properly aligned.\n@@ -471,10 +474,12 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * `dst` must be [valid] for writes.\n+/// * `dst` must be [valid] for both reads and writes.\n ///\n /// * `dst` must be properly aligned.\n ///\n+/// * `dst` must point to a properly initialized value of type `T`.\n+///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n /// [valid]: ../ptr/index.html#safety\n@@ -514,6 +519,8 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// * `src` must be properly aligned. Use [`read_unaligned`] if this is not the\n ///   case.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n /// # Examples\n@@ -628,6 +635,8 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// * `src` must be [valid] for reads.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Like [`read`], `read_unaligned` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership].\n@@ -922,6 +931,8 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// * `src` must be properly aligned.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Like [`read`], `read_volatile` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership]."}, {"sha": "e5b8412e117e842addd3dc0a1f9b68df60e84421", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -2658,7 +2658,8 @@ impl str {\n     ///\n     /// It's important to remember that [`char`] represents a Unicode Scalar\n     /// Value, and may not match your idea of what a 'character' is. Iteration\n-    /// over grapheme clusters may be what you actually want.\n+    /// over grapheme clusters may be what you actually want. This functionality\n+    /// is not provided by Rust's standard library, check crates.io instead.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e2dd55b4cbac2655286e6e9b6f9b55b6dbb2e2c9", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -480,8 +480,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n         let output = match ret_ty {\n-            Some(ty) => FunctionRetTy::Ty(ty),\n-            None => FunctionRetTy::Default(span),\n+            Some(ty) => FnRetTy::Ty(ty),\n+            None => FnRetTy::Default(span),\n         };\n         let ast_decl = FnDecl { inputs: vec![], output };\n         let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n@@ -721,7 +721,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n         let outer_decl =\n-            FnDecl { inputs: decl.inputs.clone(), output: FunctionRetTy::Default(fn_decl_span) };\n+            FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n         // We need to lower the declaration outside the new scope, because we\n         // have to conserve the state of being inside a loop condition for the\n         // closure argument types.\n@@ -747,7 +747,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             // `|x: u8| future_from_generator(|| -> X { ... })`.\n             let body_id = this.lower_fn_body(&outer_decl, |this| {\n                 let async_ret_ty =\n-                    if let FunctionRetTy::Ty(ty) = &decl.output { Some(ty.clone()) } else { None };\n+                    if let FnRetTy::Ty(ty) = &decl.output { Some(ty.clone()) } else { None };\n                 let async_body = this.make_async_expr(\n                     capture_clause,\n                     closure_id,"}, {"sha": "56c844b37da88ea5fa752d495dab3657d246355d", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1725,16 +1725,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             )\n         } else {\n             match decl.output {\n-                FunctionRetTy::Ty(ref ty) => {\n+                FnRetTy::Ty(ref ty) => {\n                     let context = match in_band_ty_params {\n                         Some((def_id, _)) if impl_trait_return_allow => {\n                             ImplTraitContext::OpaqueTy(Some(def_id), hir::OpaqueTyOrigin::FnReturn)\n                         }\n                         _ => ImplTraitContext::disallowed(),\n                     };\n-                    hir::FunctionRetTy::Return(self.lower_ty(ty, context))\n+                    hir::FnRetTy::Return(self.lower_ty(ty, context))\n                 }\n-                FunctionRetTy::Default(span) => hir::FunctionRetTy::DefaultReturn(span),\n+                FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(span),\n             }\n         };\n \n@@ -1781,10 +1781,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `elided_lt_replacement`: replacement for elided lifetimes in the return type\n     fn lower_async_fn_ret_ty(\n         &mut self,\n-        output: &FunctionRetTy,\n+        output: &FnRetTy,\n         fn_def_id: DefId,\n         opaque_ty_node_id: NodeId,\n-    ) -> hir::FunctionRetTy<'hir> {\n+    ) -> hir::FnRetTy<'hir> {\n         debug!(\n             \"lower_async_fn_ret_ty(\\\n              output={:?}, \\\n@@ -1949,27 +1949,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // only the lifetime parameters that we must supply.\n         let opaque_ty_ref = hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, generic_args);\n         let opaque_ty = self.ty(opaque_ty_span, opaque_ty_ref);\n-        hir::FunctionRetTy::Return(self.arena.alloc(opaque_ty))\n+        hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n \n     /// Transforms `-> T` into `Future<Output = T>`\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,\n-        output: &FunctionRetTy,\n+        output: &FnRetTy,\n         fn_def_id: DefId,\n         span: Span,\n     ) -> hir::GenericBound<'hir> {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n-            FunctionRetTy::Ty(ty) => {\n+            FnRetTy::Ty(ty) => {\n                 // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n                 // `impl Future` opaque type that `async fn` implicitly\n                 // generates.\n                 let context =\n                     ImplTraitContext::OpaqueTy(Some(fn_def_id), hir::OpaqueTyOrigin::FnReturn);\n                 self.lower_ty(ty, context)\n             }\n-            FunctionRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n+            FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };\n \n         // \"<Output = T>\""}, {"sha": "b45a06e1c1d2a490c670a9f65109dc7b6004a269", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -397,8 +397,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 inputs.iter().map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed())),\n             );\n             let output_ty = match output {\n-                FunctionRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n-                FunctionRetTy::Default(_) => this.arena.alloc(this.ty_tup(span, &[])),\n+                FnRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n+                FnRetTy::Default(_) => this.arena.alloc(this.ty_tup(span, &[])),\n             };\n             let args = smallvec![GenericArg::Type(this.ty_tup(span, inputs))];\n             let binding = this.output_ty_binding(output_ty.span, output_ty);"}, {"sha": "584f7b4b4bb6883c52e3e2e081d7b37b08126ebe", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -954,7 +954,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             GenericArgs::Parenthesized(ref data) => {\n                 walk_list!(self, visit_ty, &data.inputs);\n-                if let FunctionRetTy::Ty(ty) = &data.output {\n+                if let FnRetTy::Ty(ty) = &data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n                     self.with_impl_trait(None, |this| this.visit_ty(ty));"}, {"sha": "d57c7495a07ded1b2ca19888c0f9878c6605bba0", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -419,8 +419,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n-        if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n+    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FnRetTy) {\n+        if let ast::FnRetTy::Ty(ref output_ty) = *ret_ty {\n             if let ast::TyKind::Never = output_ty.kind {\n                 // Do nothing.\n             } else {"}, {"sha": "20b1ff06034f59c18f6554ad4439be9fbbd9d74c", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -2673,8 +2673,8 @@ impl<'a> State<'a> {\n         self.end();\n     }\n \n-    crate fn print_fn_ret_ty(&mut self, fn_ret_ty: &ast::FunctionRetTy) {\n-        if let ast::FunctionRetTy::Ty(ty) = fn_ret_ty {\n+    crate fn print_fn_ret_ty(&mut self, fn_ret_ty: &ast::FnRetTy) {\n+        if let ast::FnRetTy::Ty(ty) = fn_ret_ty {\n             self.space_if_not_bol();\n             self.ibox(INDENT_UNIT);\n             self.word_space(\"->\");"}, {"sha": "2c9384535331e28cf27a3406a735d2ef299650c6", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -34,10 +34,8 @@ fn test_fun_to_string() {\n     with_default_globals(|| {\n         let abba_ident = ast::Ident::from_str(\"abba\");\n \n-        let decl = ast::FnDecl {\n-            inputs: Vec::new(),\n-            output: ast::FunctionRetTy::Default(rustc_span::DUMMY_SP),\n-        };\n+        let decl =\n+            ast::FnDecl { inputs: Vec::new(), output: ast::FnRetTy::Default(rustc_span::DUMMY_SP) };\n         let generics = ast::Generics::default();\n         assert_eq!(\n             fun_to_string(&decl, ast::FnHeader::default(), abba_ident, &generics),"}, {"sha": "c2bd2ac90e3c3c8572c26c947d94d46c5c2a89bb", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -957,7 +957,7 @@ impl<'a> MethodDef<'a> {\n         let ret_type = self.get_ret_ty(cx, trait_, generics, type_ident);\n \n         let method_ident = cx.ident_of(self.name, trait_.span);\n-        let fn_decl = cx.fn_decl(args, ast::FunctionRetTy::Ty(ret_type));\n+        let fn_decl = cx.fn_decl(args, ast::FnRetTy::Ty(ret_type));\n         let body_block = cx.block_expr(body);\n \n         let unsafety = if self.is_unsafe { ast::Unsafe::Yes(trait_.span) } else { ast::Unsafe::No };"}, {"sha": "3ffb1d2206a5e32a36ac27de3010dacd58f453e6", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -63,7 +63,7 @@ impl AllocFnFactory<'_, '_> {\n         let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, mk)).collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n-        let decl = self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty));\n+        let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header };\n         let kind = ItemKind::Fn(sig, Generics::default(), Some(self.cx.block_expr(output_expr)));"}, {"sha": "2e38a7880c69f34fc39f420953a6eae6c8116e3a", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -391,8 +391,8 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n         // If the termination trait is active, the compiler will check that the output\n         // type implements the `Termination` trait as `libtest` enforces that.\n         let has_output = match sig.decl.output {\n-            ast::FunctionRetTy::Default(..) => false,\n-            ast::FunctionRetTy::Ty(ref t) if t.kind.is_unit() => false,\n+            ast::FnRetTy::Default(..) => false,\n+            ast::FnRetTy::Ty(ref t) if t.kind.is_unit() => false,\n             _ => true,\n         };\n "}, {"sha": "f0ea256cf2bf390f6c9f6b8db1dfc093697389cf", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -305,7 +305,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         ecx.block(sp, vec![call_test_main])\n     };\n \n-    let decl = ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty));\n+    let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n     let main = ast::ItemKind::Fn(sig, ast::Generics::default(), Some(main_body));\n "}, {"sha": "e719ee590aba67a0aabe8e92775f2643084567de", "filename": "src/librustc_error_codes/error_codes/E0309.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0309.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0309.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0309.md?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1,9 +1,7 @@\n-The type definition contains some field whose type\n-requires an outlives annotation. Outlives annotations\n-(e.g., `T: 'a`) are used to guarantee that all the data in T is valid\n-for at least the lifetime `'a`. This scenario most commonly\n-arises when the type contains an associated type reference\n-like `<T as SomeTrait<'a>>::Output`, as shown in this example:\n+A parameter type is missing an explicit lifetime bound and may not live long\n+enough.\n+\n+Erroneous code example:\n \n ```compile_fail,E0309\n // This won't compile because the applicable impl of\n@@ -25,9 +23,15 @@ where\n }\n ```\n \n-Here, the where clause `T: 'a` that appears on the impl is not known to be\n-satisfied on the struct. To make this example compile, you have to add\n-a where-clause like `T: 'a` to the struct definition:\n+The type definition contains some field whose type requires an outlives\n+annotation. Outlives annotations (e.g., `T: 'a`) are used to guarantee that all\n+the data in T is valid for at least the lifetime `'a`. This scenario most\n+commonly arises when the type contains an associated type reference like\n+`<T as SomeTrait<'a>>::Output`, as shown in the previous code.\n+\n+There, the where clause `T: 'a` that appears on the impl is not known to be\n+satisfied on the struct. To make this example compile, you have to add a\n+where-clause like `T: 'a` to the struct definition:\n \n ```\n struct Foo<'a, T>"}, {"sha": "9030001542d75af1b818c3783c3de334284e0cda", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -519,7 +519,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn lambda(&self, span: Span, ids: Vec<ast::Ident>, body: P<ast::Expr>) -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.param(span, *id, self.ty(span, ast::TyKind::Infer))).collect(),\n-            ast::FunctionRetTy::Default(span),\n+            ast::FnRetTy::Default(span),\n         );\n \n         // FIXME -- We are using `span` as the span of the `|...|`\n@@ -569,7 +569,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     // FIXME: unused `self`\n-    pub fn fn_decl(&self, inputs: Vec<ast::Param>, output: ast::FunctionRetTy) -> P<ast::FnDecl> {\n+    pub fn fn_decl(&self, inputs: Vec<ast::Param>, output: ast::FnRetTy) -> P<ast::FnDecl> {\n         P(ast::FnDecl { inputs, output })\n     }\n "}, {"sha": "10cdceefdf5798d195f096b67d893478d3d3b913", "filename": "src/librustc_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_check.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -109,7 +109,7 @@ use crate::mbe::{KleeneToken, TokenTree};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n use rustc_session::parse::ParseSess;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::kw;\n use rustc_span::{symbol::Ident, MultiSpan, Span};\n use syntax::ast::NodeId;\n use syntax::token::{DelimToken, Token, TokenKind};\n@@ -392,7 +392,7 @@ fn check_nested_occurrences(\n                 NestedMacroState::Empty,\n                 &TokenTree::Token(Token { kind: TokenKind::Ident(name, false), .. }),\n             ) => {\n-                if name == sym::macro_rules {\n+                if name == kw::MacroRules {\n                     state = NestedMacroState::MacroRules;\n                 } else if name == kw::Macro {\n                     state = NestedMacroState::Macro;"}, {"sha": "4713c8dcd9a3b3e159f3040a8593cc4851848cd4", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -65,7 +65,7 @@ fn string_to_tts_macro() {\n \n         match tts {\n             [TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }), TokenTree::Token(Token { kind: token::Not, .. }), TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }), TokenTree::Delimited(_, macro_delim, macro_tts)]\n-                if name_macro_rules == &sym::macro_rules && name_zip.as_str() == \"zip\" =>\n+                if name_macro_rules == &kw::MacroRules && name_zip.as_str() == \"zip\" =>\n             {\n                 let tts = &macro_tts.trees().collect::<Vec<_>>();\n                 match &tts[..] {"}, {"sha": "56a8e2cfd02c9e5424183340446e2f4d7e897211", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -5,7 +5,7 @@ use crate::itemlikevisit;\n use crate::print;\n \n crate use BlockCheckMode::*;\n-crate use FunctionRetTy::*;\n+crate use FnRetTy::*;\n crate use UnsafeSource::*;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -2082,7 +2082,7 @@ pub struct FnDecl<'hir> {\n     ///\n     /// Additional argument data is stored in the function's [body](Body::parameters).\n     pub inputs: &'hir [Ty<'hir>],\n-    pub output: FunctionRetTy<'hir>,\n+    pub output: FnRetTy<'hir>,\n     pub c_variadic: bool,\n     /// Does the function have an implicit self?\n     pub implicit_self: ImplicitSelfKind,\n@@ -2148,7 +2148,7 @@ impl Defaultness {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n-pub enum FunctionRetTy<'hir> {\n+pub enum FnRetTy<'hir> {\n     /// Return type is not specified.\n     ///\n     /// Functions default to `()` and\n@@ -2159,7 +2159,7 @@ pub enum FunctionRetTy<'hir> {\n     Return(&'hir Ty<'hir>),\n }\n \n-impl fmt::Display for FunctionRetTy<'_> {\n+impl fmt::Display for FnRetTy<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Self::Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n@@ -2168,7 +2168,7 @@ impl fmt::Display for FunctionRetTy<'_> {\n     }\n }\n \n-impl FunctionRetTy<'_> {\n+impl FnRetTy<'_> {\n     pub fn span(&self) -> Span {\n         match *self {\n             Self::DefaultReturn(span) => span,"}, {"sha": "f574449c6b954756e56a4e8f06a06e62c747983f", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -865,8 +865,8 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n     }\n }\n \n-pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy<'v>) {\n-    if let FunctionRetTy::Return(ref output_ty) = *ret_ty {\n+pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FnRetTy<'v>) {\n+    if let FnRetTy::Return(ref output_ty) = *ret_ty {\n         visitor.visit_ty(output_ty)\n     }\n }"}, {"sha": "a1e6a0a325ada94a6467dcbb4f7e6b7ffe8d4982", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FunctionRetTy, HirId, Local, Pat};\n+use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, Pat};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n fn closure_return_type_suggestion(\n     span: Span,\n     err: &mut DiagnosticBuilder<'_>,\n-    output: &FunctionRetTy<'_>,\n+    output: &FnRetTy<'_>,\n     body: &Body<'_>,\n     descr: &str,\n     name: &str,\n@@ -117,7 +117,7 @@ fn closure_return_type_suggestion(\n     parent_descr: Option<&str>,\n ) {\n     let (arrow, post) = match output {\n-        FunctionRetTy::DefaultReturn(_) => (\"-> \", \" \"),\n+        FnRetTy::DefaultReturn(_) => (\"-> \", \" \"),\n         _ => (\"\", \"\"),\n     };\n     let suggestion = match body.value.kind {"}, {"sha": "02ce357967c18b734d1f31e3cc457e5dba00dfa1", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -3,7 +3,7 @@\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::ty;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc_hir::{FunctionRetTy, TyKind};\n+use rustc_hir::{FnRetTy, TyKind};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n@@ -79,7 +79,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             {\n                 return None;\n             }\n-            if let FunctionRetTy::Return(ty) = &fndecl.output {\n+            if let FnRetTy::Return(ty) = &fndecl.output {\n                 if let (TyKind::Def(_, _), ty::ReStatic) = (&ty.kind, sub) {\n                     // This is an impl Trait return that evaluates de need of 'static.\n                     // We handle this case better in `static_impl_trait`."}, {"sha": "50ae7c4fbbf6b4a33410603918467dcb4d5a8080", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -594,7 +594,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => return false,\n         };\n \n-        let ret_ty = if let hir::FunctionRetTy::Return(ret_ty) = sig.decl.output {\n+        let ret_ty = if let hir::FnRetTy::Return(ret_ty) = sig.decl.output {\n             ret_ty\n         } else {\n             return false;"}, {"sha": "72abfa15a1f750663be825ddee70004e2e2bc0fd", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -620,8 +620,8 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n         ret\n     }\n \n-    fn should_ignore_fn(ret_ty: &ast::FunctionRetTy) -> bool {\n-        if let ast::FunctionRetTy::Ty(ref ty) = ret_ty {\n+    fn should_ignore_fn(ret_ty: &ast::FnRetTy) -> bool {\n+        if let ast::FnRetTy::Ty(ref ty) = ret_ty {\n             fn involves_impl_trait(ty: &ast::Ty) -> bool {\n                 match ty.kind {\n                     ast::TyKind::ImplTrait(..) => true,"}, {"sha": "703a6959ab2a8192a5eb323eb58e4142db2d7552", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -953,7 +953,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false);\n         }\n \n-        if let hir::FunctionRetTy::Return(ref ret_hir) = decl.output {\n+        if let hir::FnRetTy::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n                 self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false);"}, {"sha": "0ed7dd03f3ab787bda799090cc2c06b322a554b6", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1885,7 +1885,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // as the HIR doesn't have full types for closure arguments.\n                 let return_ty = *sig.output().skip_binder();\n                 let mut return_span = fn_decl.output.span();\n-                if let hir::FunctionRetTy::Return(ty) = &fn_decl.output {\n+                if let hir::FnRetTy::Return(ty) = &fn_decl.output {\n                     if let hir::TyKind::Rptr(lifetime, _) = ty.kind {\n                         return_span = lifetime.span;\n                     }"}, {"sha": "01ace74287622c1175cc7fd3b9a1c407b6371ee8", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -645,8 +645,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 ..\n             }) => (\n                 match return_ty.output {\n-                    hir::FunctionRetTy::DefaultReturn(_) => tcx.sess.source_map().end_point(*span),\n-                    hir::FunctionRetTy::Return(_) => return_ty.output.span(),\n+                    hir::FnRetTy::DefaultReturn(_) => tcx.sess.source_map().end_point(*span),\n+                    hir::FnRetTy::Return(_) => return_ty.output.span(),\n                 },\n                 if gen_move.is_some() { \" of generator\" } else { \" of closure\" },\n             ),"}, {"sha": "157526d3c51adc6b5f262322f8a032bee13a167f", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -195,6 +195,8 @@ where\n         // C: Entry state\n         self.bg = Background::Light;\n         self.results.seek_to_block_start(block);\n+        let block_entry_state = self.results.get().clone();\n+\n         self.write_row_with_full_state(w, \"\", \"(on entry)\")?;\n \n         // D: Statement transfer functions\n@@ -213,29 +215,42 @@ where\n         self.write_row_for_location(w, \"T\", &terminator_str, terminator_loc)?;\n \n         // F: Exit state\n+\n+        // Write the full dataflow state immediately after the terminator if it differs from the\n+        // state at block entry.\n         self.results.seek_after(terminator_loc);\n-        if let mir::TerminatorKind::Call { destination: Some(_), .. } = &terminator.kind {\n-            self.write_row_with_full_state(w, \"\", \"(on unwind)\")?;\n-\n-            let num_state_columns = self.num_state_columns();\n-            self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n-                write!(\n-                    w,\n-                    r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n-                    colspan = num_state_columns,\n-                    fmt = fmt,\n-                )?;\n-\n-                let state_on_unwind = this.results.get().clone();\n-                this.results.seek_after_assume_call_returns(terminator_loc);\n-                write_diff(w, this.results.analysis(), &state_on_unwind, this.results.get())?;\n-\n-                write!(w, \"</td>\")\n-            })?;\n-        } else {\n-            self.write_row_with_full_state(w, \"\", \"(on exit)\")?;\n+        if self.results.get() != &block_entry_state {\n+            let after_terminator_name = match terminator.kind {\n+                mir::TerminatorKind::Call { destination: Some(_), .. } => \"(on unwind)\",\n+                _ => \"(on exit)\",\n+            };\n+\n+            self.write_row_with_full_state(w, \"\", after_terminator_name)?;\n         }\n \n+        // Write any changes caused by terminator-specific effects\n+        match terminator.kind {\n+            mir::TerminatorKind::Call { destination: Some(_), .. } => {\n+                let num_state_columns = self.num_state_columns();\n+                self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n+                    write!(\n+                        w,\n+                        r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n+                        colspan = num_state_columns,\n+                        fmt = fmt,\n+                    )?;\n+\n+                    let state_on_unwind = this.results.get().clone();\n+                    this.results.seek_after_assume_call_returns(terminator_loc);\n+                    write_diff(w, this.results.analysis(), &state_on_unwind, this.results.get())?;\n+\n+                    write!(w, \"</td>\")\n+                })?;\n+            }\n+\n+            _ => {}\n+        };\n+\n         write!(w, \"</table>\")\n     }\n "}, {"sha": "51822ab2ea5a1d5357e00f243baa6aa833ef8b9c", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -10,9 +10,7 @@ use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n use syntax::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, DUMMY_NODE_ID};\n-use syntax::ast::{\n-    AnonConst, BinOp, BinOpKind, FnDecl, FunctionRetTy, Mac, Param, Ty, TyKind, UnOp,\n-};\n+use syntax::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, Mac, Param, Ty, TyKind, UnOp};\n use syntax::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use syntax::ptr::P;\n use syntax::token::{self, Token, TokenKind};\n@@ -1358,7 +1356,7 @@ impl<'a> Parser<'a> {\n         let decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_span;\n         let body = match decl.output {\n-            FunctionRetTy::Default(_) => {\n+            FnRetTy::Default(_) => {\n                 let restrictions = self.restrictions - Restrictions::STMT_EXPR;\n                 self.parse_expr_res(restrictions, None)?\n             }"}, {"sha": "d7b8d9778f0d2690eb6f15ace7ad6e636ffcee15", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1343,14 +1343,14 @@ impl<'a> Parser<'a> {\n \n     /// Is this unambiguously the start of a `macro_rules! foo` item defnition?\n     fn is_macro_rules_item(&mut self) -> bool {\n-        self.check_keyword(sym::macro_rules)\n+        self.check_keyword(kw::MacroRules)\n             && self.look_ahead(1, |t| *t == token::Not)\n             && self.look_ahead(2, |t| t.is_ident())\n     }\n \n     /// Parses a legacy `macro_rules! foo { ... }` declarative macro.\n     fn parse_item_macro_rules(&mut self, vis: &Visibility) -> PResult<'a, ItemInfo> {\n-        self.expect_keyword(sym::macro_rules)?; // `macro_rules`\n+        self.expect_keyword(kw::MacroRules)?; // `macro_rules`\n         self.expect(&token::Not)?; // `!`\n \n         let ident = self.parse_ident()?;"}, {"sha": "29615ac14703c56e1624c3312fd213d321674a68", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -5,9 +5,7 @@ use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym};\n-use syntax::ast::{\n-    self, BareFnTy, FunctionRetTy, GenericParam, Ident, Lifetime, MutTy, Ty, TyKind,\n-};\n+use syntax::ast::{self, BareFnTy, FnRetTy, GenericParam, Ident, Lifetime, MutTy, Ty, TyKind};\n use syntax::ast::{\n     GenericBound, GenericBounds, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax,\n };\n@@ -91,13 +89,13 @@ impl<'a> Parser<'a> {\n         &mut self,\n         allow_plus: AllowPlus,\n         recover_qpath: RecoverQPath,\n-    ) -> PResult<'a, FunctionRetTy> {\n+    ) -> PResult<'a, FnRetTy> {\n         Ok(if self.eat(&token::RArrow) {\n             // FIXME(Centril): Can we unconditionally `allow_plus`?\n             let ty = self.parse_ty_common(allow_plus, recover_qpath, AllowCVariadic::No)?;\n-            FunctionRetTy::Ty(ty)\n+            FnRetTy::Ty(ty)\n         } else {\n-            FunctionRetTy::Default(self.token.span.shrink_to_lo())\n+            FnRetTy::Default(self.token.span.shrink_to_lo())\n         })\n     }\n "}, {"sha": "997b1a4da8c2158e118a5f29e4eb0e48709d4bba", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -2035,7 +2035,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     // Resolve arguments:\n                     this.resolve_params(&fn_decl.inputs);\n                     // No need to resolve return type --\n-                    // the outer closure return type is `FunctionRetTy::Default`.\n+                    // the outer closure return type is `FnRetTy::Default`.\n \n                     // Now resolve the inner closure\n                     {"}, {"sha": "b9c5f4992f6edc96ca333aa958249eb397907e70", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -881,8 +881,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_fn_decl(&mut self, fd: &'tcx hir::FnDecl<'tcx>) {\n         let output = match fd.output {\n-            hir::FunctionRetTy::DefaultReturn(_) => None,\n-            hir::FunctionRetTy::Return(ref ty) => Some(&**ty),\n+            hir::FnRetTy::DefaultReturn(_) => None,\n+            hir::FnRetTy::Return(ref ty) => Some(&**ty),\n         };\n         self.visit_fn_like_elision(&fd.inputs, output);\n     }"}, {"sha": "a445b0ea1b884d232f9dabb2ae04edfaefaa379e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -285,7 +285,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 v.visit_ty(&arg.ty);\n             }\n \n-            if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n+            if let ast::FnRetTy::Ty(ref ret_ty) = sig.decl.output {\n                 // In async functions, return types are desugared and redefined\n                 // as an `impl Trait` existential type. Because of this, to match\n                 // the definition paths when resolving nested types we need to\n@@ -374,7 +374,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 v.visit_ty(&arg.ty)\n             }\n \n-            if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n+            if let ast::FnRetTy::Ty(ref ret_ty) = decl.output {\n                 if let ast::TyKind::ImplTrait(..) = ret_ty.kind {\n                     // FIXME: Opaque type desugaring prevents us from easily\n                     // processing trait bounds. See `visit_ty` for more details.\n@@ -792,7 +792,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                         for t in &data.inputs {\n                             self.visit_ty(t);\n                         }\n-                        if let ast::FunctionRetTy::Ty(ty) = &data.output {\n+                        if let ast::FnRetTy::Ty(ty) = &data.output {\n                             self.visit_ty(ty);\n                         }\n                     }\n@@ -1449,7 +1449,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&arg.ty);\n                 }\n \n-                if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n+                if let ast::FnRetTy::Ty(ref ret_ty) = decl.output {\n                     self.visit_ty(&ret_ty);\n                 }\n \n@@ -1528,7 +1528,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&arg.ty);\n                 }\n \n-                if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n+                if let ast::FnRetTy::Ty(ref ret_ty) = decl.output {\n                     self.visit_ty(&ret_ty);\n                 }\n             }"}, {"sha": "eea7376590e476ace56031ba6b6847e8b61529b7", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -880,8 +880,8 @@ fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n     sig.push_str(&decl.inputs.iter().map(param_to_string).collect::<Vec<_>>().join(\", \"));\n     sig.push(')');\n     match decl.output {\n-        ast::FunctionRetTy::Default(_) => sig.push_str(\" -> ()\"),\n-        ast::FunctionRetTy::Ty(ref t) => sig.push_str(&format!(\" -> {}\", ty_to_string(t))),\n+        ast::FnRetTy::Default(_) => sig.push_str(\" -> ()\"),\n+        ast::FnRetTy::Ty(ref t) => sig.push_str(&format!(\" -> {}\", ty_to_string(t))),\n     }\n \n     sig"}, {"sha": "4f5c388f2a9dbf96a501daa27d0e45c31d01a67b", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -241,7 +241,7 @@ impl Sig for ast::Ty {\n                     refs.extend(nested.refs.into_iter());\n                 }\n                 text.push(')');\n-                if let ast::FunctionRetTy::Ty(ref t) = f.decl.output {\n+                if let ast::FnRetTy::Ty(ref t) = f.decl.output {\n                     text.push_str(\" -> \");\n                     let nested = t.make(offset + text.len(), None, scx)?;\n                     text.push_str(&nested.text);\n@@ -392,7 +392,7 @@ impl Sig for ast::Item {\n                 }\n                 sig.text.push(')');\n \n-                if let ast::FunctionRetTy::Ty(ref t) = decl.output {\n+                if let ast::FnRetTy::Ty(ref t) = decl.output {\n                     sig.text.push_str(\" -> \");\n                     let nested = t.make(offset + sig.text.len(), None, scx)?;\n                     sig.text.push_str(&nested.text);\n@@ -743,7 +743,7 @@ impl Sig for ast::ForeignItem {\n                 }\n                 sig.text.push(')');\n \n-                if let ast::FunctionRetTy::Ty(ref t) = decl.output {\n+                if let ast::FnRetTy::Ty(ref t) = decl.output {\n                     sig.text.push_str(\" -> \");\n                     let nested = t.make(offset + sig.text.len(), None, scx)?;\n                     sig.text.push_str(&nested.text);\n@@ -911,7 +911,7 @@ fn make_method_signature(\n     }\n     sig.text.push(')');\n \n-    if let ast::FunctionRetTy::Ty(ref t) = m.decl.output {\n+    if let ast::FnRetTy::Ty(ref t) = m.decl.output {\n         sig.text.push_str(\" -> \");\n         let nested = t.make(sig.text.len(), None, scx)?;\n         sig.text.push_str(&nested.text);"}, {"sha": "3c419334d421e4a19fdfd6fbaf50eb54b1d803a5", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -97,6 +97,7 @@ symbols! {\n         Auto:               \"auto\",\n         Catch:              \"catch\",\n         Default:            \"default\",\n+        MacroRules:         \"macro_rules\",\n         Raw:                \"raw\",\n         Union:              \"union\",\n     }\n@@ -429,7 +430,6 @@ symbols! {\n         macro_lifetime_matcher,\n         macro_literal_matcher,\n         macro_reexport,\n-        macro_rules,\n         macros_in_extern,\n         macro_use,\n         macro_vis_matcher,\n@@ -1071,6 +1071,9 @@ pub mod sym {\n \n     symbols!();\n \n+    // Used from a macro in `librustc_feature/accepted.rs`\n+    pub use super::kw::MacroRules as macro_rules;\n+\n     // Get the symbol for an integer. The first few non-negative integers each\n     // have a static symbol and therefore are fast.\n     pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {"}, {"sha": "69970faab3f98b50353dd48c9d0d10a57883ca62", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -2827,11 +2827,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n         let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n         let output_ty = match decl.output {\n-            hir::FunctionRetTy::Return(ref output) => {\n+            hir::FnRetTy::Return(ref output) => {\n                 visitor.visit_ty(output);\n                 self.ast_ty_to_ty(output)\n             }\n-            hir::FunctionRetTy::DefaultReturn(..) => tcx.mk_unit(),\n+            hir::FnRetTy::DefaultReturn(..) => tcx.mk_unit(),\n         };\n \n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);"}, {"sha": "e17c65faf1fdf7a67b2ed77c167998cd671a8885", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -555,8 +555,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, convert the types that the user supplied (if any).\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n         let supplied_return = match decl.output {\n-            hir::FunctionRetTy::Return(ref output) => astconv.ast_ty_to_ty(&output),\n-            hir::FunctionRetTy::DefaultReturn(_) => match body.generator_kind {\n+            hir::FnRetTy::Return(ref output) => astconv.ast_ty_to_ty(&output),\n+            hir::FnRetTy::DefaultReturn(_) => match body.generator_kind {\n                 // In the case of the async block that we create for a function body,\n                 // we expect the return type of the block to match that of the enclosing\n                 // function.\n@@ -703,7 +703,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.types.err\n         });\n \n-        if let hir::FunctionRetTy::Return(ref output) = decl.output {\n+        if let hir::FnRetTy::Return(ref output) = decl.output {\n             astconv.ast_ty_to_ty(&output);\n         }\n "}, {"sha": "c327a7996b6e4e8aced92af095d39b374312a5be", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1363,7 +1363,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         fcx: &FnCtxt<'a, 'tcx>,\n         expected: Ty<'tcx>,\n         sp: Span,\n-        fn_output: &hir::FunctionRetTy<'_>,\n+        fn_output: &hir::FnRetTy<'_>,\n     ) {\n         let return_sp = fn_output.span();\n         err.span_label(return_sp, \"expected because this return type...\");\n@@ -1389,7 +1389,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let has_impl = snippet_iter.next().map_or(false, |s| s == \"impl\");\n         // Only suggest `Box<dyn Trait>` if `Trait` in `impl Trait` is object safe.\n         let mut is_object_safe = false;\n-        if let hir::FunctionRetTy::Return(ty) = fn_output {\n+        if let hir::FnRetTy::Return(ty) = fn_output {\n             // Get the return type.\n             if let hir::TyKind::Def(..) = ty.kind {\n                 let ty = AstConv::ast_ty_to_ty(fcx, ty);\n@@ -1430,7 +1430,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n     fn is_return_ty_unsized(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n         if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id) {\n-            if let hir::FunctionRetTy::Return(ty) = fn_decl.output {\n+            if let hir::FnRetTy::Return(ty) = fn_decl.output {\n                 let ty = AstConv::ast_ty_to_ty(fcx, ty);\n                 if let ty::Dynamic(..) = ty.kind {\n                     return true;"}, {"sha": "9656cbb6bd6a1a938a19776a3962585c29ac3bb4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -5153,7 +5153,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n         match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n-            (&hir::FunctionRetTy::DefaultReturn(span), true, true, true) => {\n+            (&hir::FnRetTy::DefaultReturn(span), true, true, true) => {\n                 err.span_suggestion(\n                     span,\n                     \"try adding a return type\",\n@@ -5162,18 +5162,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 true\n             }\n-            (&hir::FunctionRetTy::DefaultReturn(span), false, true, true) => {\n+            (&hir::FnRetTy::DefaultReturn(span), false, true, true) => {\n                 err.span_label(span, \"possibly return type missing here?\");\n                 true\n             }\n-            (&hir::FunctionRetTy::DefaultReturn(span), _, false, true) => {\n+            (&hir::FnRetTy::DefaultReturn(span), _, false, true) => {\n                 // `fn main()` must return `()`, do not suggest changing return type\n                 err.span_label(span, \"expected `()` because of default return type\");\n                 true\n             }\n             // expectation was caused by something else, not the default return\n-            (&hir::FunctionRetTy::DefaultReturn(_), _, _, false) => false,\n-            (&hir::FunctionRetTy::Return(ref ty), _, _, _) => {\n+            (&hir::FnRetTy::DefaultReturn(_), _, _, false) => false,\n+            (&hir::FnRetTy::Return(ref ty), _, _, _) => {\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);"}, {"sha": "4ffc3bf8e78fde4b551054db6be09f8edc77f232", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -214,7 +214,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n                 }\n             }\n             match sig.decl.output {\n-                hir::FunctionRetTy::Return(ty) if could_be_self(trait_def_id, ty) => {\n+                hir::FnRetTy::Return(ty) if could_be_self(trait_def_id, ty) => {\n                     trait_should_be_self.push(ty.span);\n                 }\n                 _ => {}"}, {"sha": "e8913b6927a4fc08815900b79652d7773ad319af", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1360,8 +1360,8 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n     }\n }\n \n-pub fn get_infer_ret_ty(output: &'hir hir::FunctionRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n-    if let hir::FunctionRetTy::Return(ref ty) = output {\n+pub fn get_infer_ret_ty(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n+    if let hir::FnRetTy::Return(ref ty) = output {\n         if is_suggestable_infer_ty(ty) {\n             return Some(&**ty);\n         }\n@@ -2079,7 +2079,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n         for (input, ty) in decl.inputs.iter().zip(*fty.inputs().skip_binder()) {\n             check(&input, ty)\n         }\n-        if let hir::FunctionRetTy::Return(ref ty) = decl.output {\n+        if let hir::FnRetTy::Return(ref ty) = decl.output {\n             check(&ty, *fty.output().skip_binder())\n         }\n     }"}, {"sha": "820937b21c8452dac12d69792611e55310c4dcb7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -43,7 +43,7 @@ use utils::*;\n \n pub use utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n \n-pub use self::types::FunctionRetTy::*;\n+pub use self::types::FnRetTy::*;\n pub use self::types::ItemEnum::*;\n pub use self::types::SelfTy::*;\n pub use self::types::Type::*;\n@@ -1001,8 +1001,8 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     }\n }\n \n-impl Clean<FunctionRetTy> for hir::FunctionRetTy<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> FunctionRetTy {\n+impl Clean<FnRetTy> for hir::FnRetTy<'_> {\n+    fn clean(&self, cx: &DocContext<'_>) -> FnRetTy {\n         match *self {\n             Self::Return(ref typ) => Return(typ.clean(cx)),\n             Self::DefaultReturn(..) => DefaultReturn,"}, {"sha": "2f220cbc9be8cf56e25f25194362274857a24da9", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -35,7 +35,7 @@ use crate::doctree;\n use crate::html::item_type::ItemType;\n use crate::html::render::{cache, ExternalLocation};\n \n-use self::FunctionRetTy::*;\n+use self::FnRetTy::*;\n use self::ItemEnum::*;\n use self::SelfTy::*;\n use self::Type::*;\n@@ -862,7 +862,7 @@ pub struct Function {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n-    pub output: FunctionRetTy,\n+    pub output: FnRetTy,\n     pub c_variadic: bool,\n     pub attrs: Attributes,\n }\n@@ -881,12 +881,12 @@ impl FnDecl {\n     ///\n     /// This function will panic if the return type does not match the expected sugaring for async\n     /// functions.\n-    pub fn sugared_async_return_type(&self) -> FunctionRetTy {\n+    pub fn sugared_async_return_type(&self) -> FnRetTy {\n         match &self.output {\n-            FunctionRetTy::Return(Type::ImplTrait(bounds)) => match &bounds[0] {\n+            FnRetTy::Return(Type::ImplTrait(bounds)) => match &bounds[0] {\n                 GenericBound::TraitBound(PolyTrait { trait_, .. }, ..) => {\n                     let bindings = trait_.bindings().unwrap();\n-                    FunctionRetTy::Return(bindings[0].ty().clone())\n+                    FnRetTy::Return(bindings[0].ty().clone())\n                 }\n                 _ => panic!(\"unexpected desugaring of async function\"),\n             },\n@@ -931,12 +931,12 @@ impl Argument {\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum FunctionRetTy {\n+pub enum FnRetTy {\n     Return(Type),\n     DefaultReturn,\n }\n \n-impl GetDefId for FunctionRetTy {\n+impl GetDefId for FnRetTy {\n     fn def_id(&self) -> Option<DefId> {\n         match *self {\n             Return(ref ty) => ty.def_id(),"}, {"sha": "b76db6804f813dc4242d45e1574b52115c37721b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -1,7 +1,7 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FunctionRetTy, Generic, GenericArg,\n+    inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n     GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, MacroKind, Path,\n     PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type, TypeBinding,\n     TypeKind, Visibility, WherePredicate,\n@@ -273,7 +273,7 @@ pub fn get_all_types(\n     }\n \n     let ret_types = match decl.output {\n-        FunctionRetTy::Return(ref return_type) => {\n+        FnRetTy::Return(ref return_type) => {\n             let mut ret = get_real_types(generics, &return_type, cx, 0);\n             if ret.is_empty() {\n                 ret.insert(return_type.clone());"}, {"sha": "ec615fc8589762dba432a388df67218833fe8c7f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -933,7 +933,7 @@ impl clean::Arguments {\n     }\n }\n \n-impl clean::FunctionRetTy {\n+impl clean::FnRetTy {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| match self {\n             clean::Return(clean::Tuple(tys)) if tys.is_empty() => Ok(()),"}, {"sha": "a9c6fcddc77e74b0865cca6826e67da227967c9b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -243,7 +243,7 @@ pub struct ParenthesizedArgs {\n     pub inputs: Vec<P<Ty>>,\n \n     /// `C`\n-    pub output: FunctionRetTy,\n+    pub output: FnRetTy,\n }\n \n impl ParenthesizedArgs {\n@@ -2083,7 +2083,7 @@ impl Param {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnDecl {\n     pub inputs: Vec<Param>,\n-    pub output: FunctionRetTy,\n+    pub output: FnRetTy,\n }\n \n impl FnDecl {\n@@ -2168,8 +2168,7 @@ impl fmt::Debug for ImplPolarity {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum FunctionRetTy {\n-    // FIXME(Centril): Rename to `FnRetTy` and in HIR also.\n+pub enum FnRetTy {\n     /// Returns type is not specified.\n     ///\n     /// Functions default to `()` and closures default to inference.\n@@ -2179,11 +2178,11 @@ pub enum FunctionRetTy {\n     Ty(P<Ty>),\n }\n \n-impl FunctionRetTy {\n+impl FnRetTy {\n     pub fn span(&self) -> Span {\n         match *self {\n-            FunctionRetTy::Default(span) => span,\n-            FunctionRetTy::Ty(ref ty) => ty.span,\n+            FnRetTy::Default(span) => span,\n+            FnRetTy::Ty(ref ty) => ty.span,\n         }\n     }\n }"}, {"sha": "2afe4159e93af14c96a6389243d8b9663bf98ab3", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -744,10 +744,10 @@ pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {\n     noop_visit_fn_ret_ty(output, vis);\n }\n \n-pub fn noop_visit_fn_ret_ty<T: MutVisitor>(fn_ret_ty: &mut FunctionRetTy, vis: &mut T) {\n+pub fn noop_visit_fn_ret_ty<T: MutVisitor>(fn_ret_ty: &mut FnRetTy, vis: &mut T) {\n     match fn_ret_ty {\n-        FunctionRetTy::Default(span) => vis.visit_span(span),\n-        FunctionRetTy::Ty(ty) => vis.visit_ty(ty),\n+        FnRetTy::Default(span) => vis.visit_span(span),\n+        FnRetTy::Ty(ty) => vis.visit_ty(ty),\n     }\n }\n "}, {"sha": "26f3773bea8f57816c28cf6a253cbbcf3e51fa36", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -215,7 +215,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_vis(&mut self, vis: &'ast Visibility) {\n         walk_vis(self, vis)\n     }\n-    fn visit_fn_ret_ty(&mut self, ret_ty: &'ast FunctionRetTy) {\n+    fn visit_fn_ret_ty(&mut self, ret_ty: &'ast FnRetTy) {\n         walk_fn_ret_ty(self, ret_ty)\n     }\n     fn visit_fn_header(&mut self, _header: &'ast FnHeader) {\n@@ -594,8 +594,8 @@ pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a\n     }\n }\n \n-pub fn walk_fn_ret_ty<'a, V: Visitor<'a>>(visitor: &mut V, ret_ty: &'a FunctionRetTy) {\n-    if let FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n+pub fn walk_fn_ret_ty<'a, V: Visitor<'a>>(visitor: &mut V, ret_ty: &'a FnRetTy) {\n+    if let FnRetTy::Ty(ref output_ty) = *ret_ty {\n         visitor.visit_ty(output_ty)\n     }\n }"}, {"sha": "38576ef39d1d702a0546e772d298e8e7a071d366", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b98fbe77d472d85d1691bae5b25e7eefb3609c/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=75b98fbe77d472d85d1691bae5b25e7eefb3609c", "patch": "@@ -117,7 +117,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             11 => {\n                 let decl = P(FnDecl {\n                     inputs: vec![],\n-                    output: FunctionRetTy::Default(DUMMY_SP),\n+                    output: FnRetTy::Default(DUMMY_SP),\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(\n                         ExprKind::Closure(CaptureBy::Value,"}]}