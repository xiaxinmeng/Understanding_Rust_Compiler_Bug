{"sha": "9ea295b7df26c954cbb4f5f3c0dc669b14a2389d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTI5NWI3ZGYyNmM5NTRjYmI0ZjVmM2MwZGM2NjliMTRhMjM4OWQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-10T00:05:24Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-09-16T16:40:32Z"}, "message": "extra::json: use a different encoding for enums.\n\nIt now uses `{\"type\": VariantName, \"fields\": [...]}`, which, according to\n@Seldaek, since all enums will have the same \"shape\" rather than being a weird\nad-hoc array, will optimize better in javascript JITs. It also looks prettier,\nand makes more sense.", "tree": {"sha": "d4daf06d228daef6c91cd2f894c6b187a10d2b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4daf06d228daef6c91cd2f894c6b187a10d2b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea295b7df26c954cbb4f5f3c0dc669b14a2389d", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea295b7df26c954cbb4f5f3c0dc669b14a2389d", "html_url": "https://github.com/rust-lang/rust/commit/9ea295b7df26c954cbb4f5f3c0dc669b14a2389d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea295b7df26c954cbb4f5f3c0dc669b14a2389d/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "507a7f093d51829ccde225542bda2a805be32ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/507a7f093d51829ccde225542bda2a805be32ba2", "html_url": "https://github.com/rust-lang/rust/commit/507a7f093d51829ccde225542bda2a805be32ba2"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "e0e860d102e056da13346c1d2e383fc0edfc8be4", "filename": "src/libextra/json.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9ea295b7df26c954cbb4f5f3c0dc669b14a2389d/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea295b7df26c954cbb4f5f3c0dc669b14a2389d/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=9ea295b7df26c954cbb4f5f3c0dc669b14a2389d", "patch": "@@ -135,18 +135,21 @@ impl serialize::Encoder for Encoder {\n                          _id: uint,\n                          cnt: uint,\n                          f: &fn(&mut Encoder)) {\n-        // enums are encoded as strings or vectors:\n+        // enums are encoded as strings or objects\n         // Bunny => \"Bunny\"\n-        // Kangaroo(34,\"William\") => [\"Kangaroo\",[34,\"William\"]]\n-\n+        // Kangaroo(34,\"William\") => {\"variant\": \"Kangaroo\", \"fields\": [34,\"William\"]}\n         if cnt == 0 {\n             self.wr.write_str(escape_str(name));\n         } else {\n-            self.wr.write_char('[');\n+            self.wr.write_char('{');\n+            self.wr.write_str(\"\\\"variant\\\"\");\n+            self.wr.write_char(':');\n             self.wr.write_str(escape_str(name));\n             self.wr.write_char(',');\n+            self.wr.write_str(\"\\\"fields\\\"\");\n+            self.wr.write_str(\":[\");\n             f(self);\n-            self.wr.write_char(']');\n+            self.wr.write_str(\"]}\");\n         }\n     }\n \n@@ -947,14 +950,20 @@ impl serialize::Decoder for Decoder {\n         debug!(\"read_enum_variant(names=%?)\", names);\n         let name = match self.stack.pop() {\n             String(s) => s,\n-            List(list) => {\n-                for v in list.move_rev_iter() {\n-                    self.stack.push(v);\n-                }\n-                match self.stack.pop() {\n-                    String(s) => s,\n-                    value => fail!(\"invalid variant name: %?\", value),\n+            Object(o) => {\n+                let n = match o.find(&~\"variant\").expect(\"invalidly encoded json\") {\n+                    &String(ref s) => s.clone(),\n+                    _ => fail!(\"invalidly encoded json\"),\n+                };\n+                match o.find(&~\"fields\").expect(\"invalidly encoded json\") {\n+                    &List(ref l) => {\n+                        for field in l.rev_iter() {\n+                            self.stack.push(field.clone());\n+                        }\n+                    },\n+                    _ => fail!(\"invalidly encoded json\")\n                 }\n+                n\n             }\n             ref json => fail!(\"invalid variant: %?\", *json),\n         };\n@@ -1517,7 +1526,7 @@ mod tests {\n                 let mut encoder = Encoder(wr);\n                 animal.encode(&mut encoder);\n             },\n-            ~\"[\\\"Frog\\\",\\\"Henry\\\",349]\"\n+            ~\"{\\\"variant\\\":\\\"Frog\\\",\\\"fields\\\":[\\\"Henry\\\",349]}\"\n         );\n         assert_eq!(\n             do io::with_str_writer |wr| {\n@@ -1921,14 +1930,14 @@ mod tests {\n         assert_eq!(value, Dog);\n \n         let mut decoder =\n-            Decoder(from_str(\"[\\\"Frog\\\",\\\"Henry\\\",349]\").unwrap());\n+            Decoder(from_str(\"{\\\"variant\\\":\\\"Frog\\\",\\\"fields\\\":[\\\"Henry\\\",349]}\").unwrap());\n         let value: Animal = Decodable::decode(&mut decoder);\n         assert_eq!(value, Frog(~\"Henry\", 349));\n     }\n \n     #[test]\n     fn test_decode_map() {\n-        let s = ~\"{\\\"a\\\": \\\"Dog\\\", \\\"b\\\": [\\\"Frog\\\", \\\"Henry\\\", 349]}\";\n+        let s = ~\"{\\\"a\\\": \\\"Dog\\\", \\\"b\\\": {\\\"variant\\\":\\\"Frog\\\",\\\"fields\\\":[\\\"Henry\\\", 349]}}\";\n         let mut decoder = Decoder(from_str(s).unwrap());\n         let mut map: TreeMap<~str, Animal> = Decodable::decode(&mut decoder);\n "}]}