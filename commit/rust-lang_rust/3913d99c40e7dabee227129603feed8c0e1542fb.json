{"sha": "3913d99c40e7dabee227129603feed8c0e1542fb", "node_id": "C_kwDOAAsO6NoAKDM5MTNkOTljNDBlN2RhYmVlMjI3MTI5NjAzZmVlZDhjMGUxNTQyZmI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-19T15:22:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-19T15:22:50Z"}, "message": "Rollup merge of #97169 - gimbles:u32-diagnostic, r=petrochenkov\n\nImprove `u32 as char` cast diagnostic\n\nFixes #97160", "tree": {"sha": "90fa2f1bb816cbddbf973e4c1248a71e976e3d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90fa2f1bb816cbddbf973e4c1248a71e976e3d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3913d99c40e7dabee227129603feed8c0e1542fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihmDKCRBK7hj4Ov3rIwAAmeQIADlIhzft87AG4RMn3A1/FWOp\nFsTLVnP7P49ZCT0zr9wBuHGwZaDFHNLz9RCRpPpFD4YIAlBohjtvoHwaHzVX51WF\ntBymzHbgYrIWOFjpdMsobOe7A5bu72ZQ98dUyL0CJ5XMUPnM62OBSYzhppI8W49U\n3Wx1ipTp0Kqt4I24V4N/dC4kvE5iNb/mYg+lmKe+SY8TWJ4MB23IBXt9uzV4YvFP\nDEQmk5+C/NbuuKwA669+UD7sfqvL7KnFMEiRMIMGrvpCp7SW/trFqu/DPwyQXX6H\nA8Owa0ux9GnAYayUPxQms91OC7Xyp5zj9CmY3+ICvld6zlCVedmBGoRqMNKoQLY=\n=Plyj\n-----END PGP SIGNATURE-----\n", "payload": "tree 90fa2f1bb816cbddbf973e4c1248a71e976e3d08\nparent 12644bc39d6a1aae74e7a1d51a9b650cacfa4616\nparent 9e5c24eaf886a314312b4e5047ffd30addb0fe90\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1652973770 +0200\ncommitter GitHub <noreply@github.com> 1652973770 +0200\n\nRollup merge of #97169 - gimbles:u32-diagnostic, r=petrochenkov\n\nImprove `u32 as char` cast diagnostic\n\nFixes #97160\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3913d99c40e7dabee227129603feed8c0e1542fb", "html_url": "https://github.com/rust-lang/rust/commit/3913d99c40e7dabee227129603feed8c0e1542fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3913d99c40e7dabee227129603feed8c0e1542fb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12644bc39d6a1aae74e7a1d51a9b650cacfa4616", "url": "https://api.github.com/repos/rust-lang/rust/commits/12644bc39d6a1aae74e7a1d51a9b650cacfa4616", "html_url": "https://github.com/rust-lang/rust/commit/12644bc39d6a1aae74e7a1d51a9b650cacfa4616"}, {"sha": "9e5c24eaf886a314312b4e5047ffd30addb0fe90", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5c24eaf886a314312b4e5047ffd30addb0fe90", "html_url": "https://github.com/rust-lang/rust/commit/9e5c24eaf886a314312b4e5047ffd30addb0fe90"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "d9aaf730efcc472e146a18d2aea7f6023fb64128", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3913d99c40e7dabee227129603feed8c0e1542fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3913d99c40e7dabee227129603feed8c0e1542fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=3913d99c40e7dabee227129603feed8c0e1542fb", "patch": "@@ -347,16 +347,22 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 );\n                 err.span_label(self.span, \"invalid cast\");\n                 if self.expr_ty.is_numeric() {\n-                    err.span_help(\n-                        self.span,\n-                        if self.expr_ty == fcx.tcx.types.i8 {\n-                            \"try casting from `u8` instead\"\n-                        } else if self.expr_ty == fcx.tcx.types.u32 {\n-                            \"try `char::from_u32` instead\"\n-                        } else {\n-                            \"try `char::from_u32` instead (via a `u32`)\"\n-                        },\n-                    );\n+                    if self.expr_ty == fcx.tcx.types.u32 {\n+                        match fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                            Ok(snippet) => err.span_suggestion(\n+                                self.span,\n+                                \"try `char::from_u32` instead\",\n+                                format!(\"char::from_u32({snippet})\"),\n+                                Applicability::MachineApplicable,\n+                            ),\n+\n+                            Err(_) => err.span_help(self.span, \"try `char::from_u32` instead\"),\n+                        };\n+                    } else if self.expr_ty == fcx.tcx.types.i8 {\n+                        err.span_help(self.span, \"try casting from `u8` instead\");\n+                    } else {\n+                        err.span_help(self.span, \"try `char::from_u32` instead (via a `u32`)\");\n+                    };\n                 }\n                 err.emit();\n             }"}, {"sha": "68da03928b783ebb9013e912ddc29a7fb67bc4ad", "filename": "src/test/ui/error-codes/E0604.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3913d99c40e7dabee227129603feed8c0e1542fb/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3913d99c40e7dabee227129603feed8c0e1542fb/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr?ref=3913d99c40e7dabee227129603feed8c0e1542fb", "patch": "@@ -1,14 +1,11 @@\n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/E0604.rs:2:5\n    |\n-LL |     1u32 as char;\n-   |     ^^^^^^^^^^^^ invalid cast\n-   |\n-help: try `char::from_u32` instead\n-  --> $DIR/E0604.rs:2:5\n-   |\n LL |     1u32 as char;\n    |     ^^^^^^^^^^^^\n+   |     |\n+   |     invalid cast\n+   |     help: try `char::from_u32` instead: `char::from_u32(1u32)`\n \n error: aborting due to previous error\n "}, {"sha": "81aa268cacc5cd62c11f9d082247d321361c3958", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3913d99c40e7dabee227129603feed8c0e1542fb/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3913d99c40e7dabee227129603feed8c0e1542fb/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=3913d99c40e7dabee227129603feed8c0e1542fb", "patch": "@@ -56,14 +56,11 @@ LL | | }\n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:25:5\n    |\n-LL |     0u32 as char;\n-   |     ^^^^^^^^^^^^ invalid cast\n-   |\n-help: try `char::from_u32` instead\n-  --> $DIR/error-festival.rs:25:5\n-   |\n LL |     0u32 as char;\n    |     ^^^^^^^^^^^^\n+   |     |\n+   |     invalid cast\n+   |     help: try `char::from_u32` instead: `char::from_u32(0u32)`\n \n error[E0605]: non-primitive cast: `u8` as `Vec<u8>`\n   --> $DIR/error-festival.rs:29:5"}, {"sha": "3a508459cc0466316473a5e2e349787b9d26f943", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3913d99c40e7dabee227129603feed8c0e1542fb/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3913d99c40e7dabee227129603feed8c0e1542fb/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=3913d99c40e7dabee227129603feed8c0e1542fb", "patch": "@@ -97,14 +97,11 @@ LL |     let _ = E::A as bool;\n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/cast-rfc0401.rs:41:13\n    |\n-LL |     let _ = 0x61u32 as char;\n-   |             ^^^^^^^^^^^^^^^ invalid cast\n-   |\n-help: try `char::from_u32` instead\n-  --> $DIR/cast-rfc0401.rs:41:13\n-   |\n LL |     let _ = 0x61u32 as char;\n    |             ^^^^^^^^^^^^^^^\n+   |             |\n+   |             invalid cast\n+   |             help: try `char::from_u32` instead: `char::from_u32(0x61u32)`\n \n error[E0606]: casting `bool` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:43:13"}]}