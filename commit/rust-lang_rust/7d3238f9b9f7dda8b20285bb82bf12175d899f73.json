{"sha": "7d3238f9b9f7dda8b20285bb82bf12175d899f73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzIzOGY5YjlmN2RkYThiMjAyODViYjgyYmYxMjE3NWQ4OTlmNzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T06:56:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T06:56:13Z"}, "message": "Rollup merge of #73362 - erikdesjardins:bounds, r=nikomatsakis\n\nTest that bounds checks are elided when slice len is checked up-front\n\nCloses #69101", "tree": {"sha": "8f2e3055a4dd0d05fbd2b09988ae0963d1dc37e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2e3055a4dd0d05fbd2b09988ae0963d1dc37e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3238f9b9f7dda8b20285bb82bf12175d899f73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7GGOCRBK7hj4Ov3rIwAAdHIIAJUzP8A1qHEtRHfGuNO/6kWD\nD+tZujtHMV1kPn83yODU4ZMQqlex4g3z0B2HkHXeiTOFYI2NEdhfh8uziHUpzLXx\nvcdLfF5anGPWoZHRD45KeFwGvF0/uj9PzbzDj210Fmo0jy18QngGCgg2lt0keYY1\nqkIdyuo5PUt60IuKyqJRjJIXl0fvciiFHvrx07bE+MSTBMu/Y3iyriRweSY2UWzA\nIouLQ+CMsu5cisnjUK4iT0JDprWZnq5WUFsA0kdzqRXf8aZf3vhnV0Khg8Gp1/YV\nC7ODyy2wgXhK3jg1yPa+H0mpsY49cpInBj5wBmkr1yioV+syJN2t87dcGos38oo=\n=6vxC\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f2e3055a4dd0d05fbd2b09988ae0963d1dc37e1\nparent 8d79ebd09b15ace5db433d3151961fba203ac314\nparent 6351850d8fc89c8150d6503ab6dc8524650e359d\nauthor Ralf Jung <post@ralfj.de> 1592549773 +0200\ncommitter GitHub <noreply@github.com> 1592549773 +0200\n\nRollup merge of #73362 - erikdesjardins:bounds, r=nikomatsakis\n\nTest that bounds checks are elided when slice len is checked up-front\n\nCloses #69101\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3238f9b9f7dda8b20285bb82bf12175d899f73", "html_url": "https://github.com/rust-lang/rust/commit/7d3238f9b9f7dda8b20285bb82bf12175d899f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3238f9b9f7dda8b20285bb82bf12175d899f73/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d79ebd09b15ace5db433d3151961fba203ac314", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d79ebd09b15ace5db433d3151961fba203ac314", "html_url": "https://github.com/rust-lang/rust/commit/8d79ebd09b15ace5db433d3151961fba203ac314"}, {"sha": "6351850d8fc89c8150d6503ab6dc8524650e359d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6351850d8fc89c8150d6503ab6dc8524650e359d", "html_url": "https://github.com/rust-lang/rust/commit/6351850d8fc89c8150d6503ab6dc8524650e359d"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "8ade583b5712732466153f2161f43fa49d0d7141", "filename": "src/test/codegen/issue-69101-bounds-check.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7d3238f9b9f7dda8b20285bb82bf12175d899f73/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3238f9b9f7dda8b20285bb82bf12175d899f73/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-69101-bounds-check.rs?ref=7d3238f9b9f7dda8b20285bb82bf12175d899f73", "patch": "@@ -0,0 +1,44 @@\n+// no-system-llvm\n+// compile-flags: -O\n+// ignore-debug: the debug assertions get in the way\n+#![crate_type = \"lib\"]\n+\n+// Make sure no bounds checks are emitted in the loop when upfront slicing\n+// ensures that the slices are big enough.\n+// In particular, bounds checks were not always optimized out if the upfront\n+// check was for a greater len than the loop requires.\n+// (i.e. `already_sliced_no_bounds_check` was not always optimized even when\n+// `already_sliced_no_bounds_check_exact` was)\n+// CHECK-LABEL: @already_sliced_no_bounds_check\n+#[no_mangle]\n+pub fn already_sliced_no_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n+    // CHECK: slice_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    let _ = (&a[..2048], &b[..2048], &mut c[..2048]);\n+    for i in 0..1024 {\n+        c[i] = a[i] ^ b[i];\n+    }\n+}\n+\n+// CHECK-LABEL: @already_sliced_no_bounds_check_exact\n+#[no_mangle]\n+pub fn already_sliced_no_bounds_check_exact(a: &[u8], b: &[u8], c: &mut [u8]) {\n+    // CHECK: slice_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    let _ = (&a[..1024], &b[..1024], &mut c[..1024]);\n+    for i in 0..1024 {\n+        c[i] = a[i] ^ b[i];\n+    }\n+}\n+\n+// Make sure we're checking for the right thing: there can be a panic if the slice is too small.\n+// CHECK-LABEL: @already_sliced_bounds_check\n+#[no_mangle]\n+pub fn already_sliced_bounds_check(a: &[u8], b: &[u8], c: &mut [u8]) {\n+    // CHECK: slice_index_len_fail\n+    // CHECK: panic_bounds_check\n+    let _ = (&a[..1023], &b[..2048], &mut c[..2048]);\n+    for i in 0..1024 {\n+        c[i] = a[i] ^ b[i];\n+    }\n+}"}]}