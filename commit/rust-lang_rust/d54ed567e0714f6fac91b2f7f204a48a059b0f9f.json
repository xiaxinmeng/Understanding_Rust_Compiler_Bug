{"sha": "d54ed567e0714f6fac91b2f7f204a48a059b0f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NGVkNTY3ZTA3MTRmNmZhYzkxYjJmN2YyMDRhNDhhMDU5YjBmOWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-25T08:45:24Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-25T09:51:58Z"}, "message": "path -> PathBuf for osx/dragonfly (fixup #22727)", "tree": {"sha": "38600c45f99d5bc759d1f2961ed7d3de376a3c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38600c45f99d5bc759d1f2961ed7d3de376a3c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d54ed567e0714f6fac91b2f7f204a48a059b0f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d54ed567e0714f6fac91b2f7f204a48a059b0f9f", "html_url": "https://github.com/rust-lang/rust/commit/d54ed567e0714f6fac91b2f7f204a48a059b0f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d54ed567e0714f6fac91b2f7f204a48a059b0f9f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2470fa155e8a0793d725891da2e6963c762fa674", "url": "https://api.github.com/repos/rust-lang/rust/commits/2470fa155e8a0793d725891da2e6963c762fa674", "html_url": "https://github.com/rust-lang/rust/commit/2470fa155e8a0793d725891da2e6963c762fa674"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "899280aa7094bb2f17f245be0ab6ed3044cf1f9c", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d54ed567e0714f6fac91b2f7f204a48a059b0f9f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54ed567e0714f6fac91b2f7f204a48a059b0f9f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=d54ed567e0714f6fac91b2f7f204a48a059b0f9f", "patch": "@@ -183,7 +183,7 @@ impl StdError for JoinPathsError {\n }\n \n #[cfg(target_os = \"freebsd\")]\n-pub fn current_exe() -> IoResult<Path> {\n+pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {\n         use libc::funcs::bsd44::*;\n         use libc::consts::os::extra::*;\n@@ -195,16 +195,16 @@ pub fn current_exe() -> IoResult<Path> {\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          ptr::null_mut(), &mut sz, ptr::null_mut(),\n                          0 as libc::size_t);\n-        if err != 0 { return Err(IoError::last_error()); }\n-        if sz == 0 { return Err(IoError::last_error()); }\n+        if err != 0 { return Err(io::Error::last_os_error()); }\n+        if sz == 0 { return Err(io::Error::last_os_error()); }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as uint);\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n                          ptr::null_mut(), 0 as libc::size_t);\n-        if err != 0 { return Err(IoError::last_error()); }\n-        if sz == 0 { return Err(IoError::last_error()); }\n+        if err != 0 { return Err(io::Error::last_os_error()); }\n+        if sz == 0 { return Err(io::Error::last_os_error()); }\n         v.set_len(sz as uint - 1); // chop off trailing NUL\n-        Ok(Path::new(v))\n+        Ok(PathBuf::new::<OsString>(&OsStringExt::from_vec(v)))\n     }\n }\n \n@@ -227,7 +227,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {\n         let v = rust_current_exe();\n         if v.is_null() {\n-            Err(IoError::last_error())\n+            Err(io::Error::last_os_error())\n         } else {\n             Ok(Path::new(CStr::from_ptr(v).to_bytes().to_vec()))\n         }\n@@ -240,17 +240,17 @@ pub fn current_exe() -> io::Result<PathBuf> {\n }\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-pub fn current_exe() -> IoResult<Path> {\n+pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {\n         use libc::funcs::extra::_NSGetExecutablePath;\n         let mut sz: u32 = 0;\n         _NSGetExecutablePath(ptr::null_mut(), &mut sz);\n-        if sz == 0 { return Err(IoError::last_error()); }\n+        if sz == 0 { return Err(io::Error::last_os_error()); }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as uint);\n         let err = _NSGetExecutablePath(v.as_mut_ptr() as *mut i8, &mut sz);\n-        if err != 0 { return Err(IoError::last_error()); }\n+        if err != 0 { return Err(io::Error::last_os_error()); }\n         v.set_len(sz as uint - 1); // chop off trailing NUL\n-        Ok(Path::new(v))\n+        Ok(PathBuf::new::<OsString>(&OsStringExt::from_vec(v)))\n     }\n }\n "}]}