{"sha": "df4d490038c37e441065890fa27ed2ce0bdf83e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNGQ0OTAwMzhjMzdlNDQxMDY1ODkwZmEyN2VkMmNlMGJkZjgzZTY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-23T20:40:20Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-24T01:46:42Z"}, "message": "Minimize unsafety in encode_utf8\n\nUse slice patterns to avoid having to skip bounds checking", "tree": {"sha": "42e8b2b9ab318d768899f3b04cc8fa4e67ce16e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42e8b2b9ab318d768899f3b04cc8fa4e67ce16e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4d490038c37e441065890fa27ed2ce0bdf83e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4d490038c37e441065890fa27ed2ce0bdf83e6", "html_url": "https://github.com/rust-lang/rust/commit/df4d490038c37e441065890fa27ed2ce0bdf83e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4d490038c37e441065890fa27ed2ce0bdf83e6/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae6cedb8d1e37469be1434642a3e403fce50a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6cedb8d1e37469be1434642a3e403fce50a03", "html_url": "https://github.com/rust-lang/rust/commit/9ae6cedb8d1e37469be1434642a3e403fce50a03"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "fe5d16862a6a673e1d9bdf93bd6a4affa49c77d2", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/df4d490038c37e441065890fa27ed2ce0bdf83e6/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4d490038c37e441065890fa27ed2ce0bdf83e6/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=df4d490038c37e441065890fa27ed2ce0bdf83e6", "patch": "@@ -434,36 +434,35 @@ impl char {\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n         let code = self as u32;\n-        // SAFETY: each arm checks the size of the slice and only uses `get_unchecked` unsafe ops\n-        unsafe {\n-            let len = if code < MAX_ONE_B && !dst.is_empty() {\n-                *dst.get_unchecked_mut(0) = code as u8;\n-                1\n-            } else if code < MAX_TWO_B && dst.len() >= 2 {\n-                *dst.get_unchecked_mut(0) = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *dst.get_unchecked_mut(1) = (code & 0x3F) as u8 | TAG_CONT;\n-                2\n-            } else if code < MAX_THREE_B && dst.len() >= 3 {\n-                *dst.get_unchecked_mut(0) = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *dst.get_unchecked_mut(1) = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code & 0x3F) as u8 | TAG_CONT;\n-                3\n-            } else if dst.len() >= 4 {\n-                *dst.get_unchecked_mut(0) = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *dst.get_unchecked_mut(1) = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(3) = (code & 0x3F) as u8 | TAG_CONT;\n-                4\n-            } else {\n-                panic!(\n-                    \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf8(),\n-                    code,\n-                    dst.len(),\n-                )\n-            };\n-            from_utf8_unchecked_mut(dst.get_unchecked_mut(..len))\n-        }\n+        let len = self.len_utf8();\n+        match (len, &mut dst[..]) {\n+            (1, [a, ..]) => {\n+                *a = code as u8;\n+            }\n+            (2, [a, b, ..]) => {\n+                *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+                *b = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            (3, [a, b, c, ..]) => {\n+                *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+                *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+                *c = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            (4, [a, b, c, d, ..]) => {\n+                *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+                *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+                *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+                *d = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            _ => panic!(\n+                \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+                len,\n+                code,\n+                dst.len(),\n+            ),\n+        };\n+        // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n+        unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,"}, {"sha": "7d11dd2800fd4df43dd4925b734afe2661311a9b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df4d490038c37e441065890fa27ed2ce0bdf83e6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4d490038c37e441065890fa27ed2ce0bdf83e6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=df4d490038c37e441065890fa27ed2ce0bdf83e6", "patch": "@@ -129,6 +129,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n+#![feature(slice_patterns)]\n \n #[prelude_import]\n #[allow(unused)]"}]}