{"sha": "eeec73244d2ab68e23b17b13f1163b254e597718", "node_id": "C_kwDOAAsO6NoAKGVlZWM3MzI0NGQyYWI2OGUyM2IxN2IxM2YxMTYzYjI1NGU1OTc3MTg", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-04-07T21:30:49Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-04-07T21:30:49Z"}, "message": "download beta compiler toolchain in bootstrap if it doesn't yet exist\n\nThis is needed for when the shell scripts bypass python altogether and run the downloaded\nbootstrap directly. Changes are mainly provided from @jyn514, I just fixed the review notes.\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "a96be6115882b18def0b8e71ba895834861a5771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a96be6115882b18def0b8e71ba895834861a5771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeec73244d2ab68e23b17b13f1163b254e597718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeec73244d2ab68e23b17b13f1163b254e597718", "html_url": "https://github.com/rust-lang/rust/commit/eeec73244d2ab68e23b17b13f1163b254e597718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeec73244d2ab68e23b17b13f1163b254e597718/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "356c651e6d013fe9ca1d47da278ba208a95dbcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/356c651e6d013fe9ca1d47da278ba208a95dbcf9", "html_url": "https://github.com/rust-lang/rust/commit/356c651e6d013fe9ca1d47da278ba208a95dbcf9"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "ec41288d25c1b78e31636be891a8886b56de2343", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eeec73244d2ab68e23b17b13f1163b254e597718/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeec73244d2ab68e23b17b13f1163b254e597718/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=eeec73244d2ab68e23b17b13f1163b254e597718", "patch": "@@ -223,25 +223,34 @@ pub struct Config {\n     pub reuse: Option<PathBuf>,\n     pub cargo_native_static: bool,\n     pub configure_args: Vec<String>,\n+    pub out: PathBuf,\n+    pub rust_info: channel::GitInfo,\n \n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+\n     #[cfg(not(test))]\n     initial_rustfmt: RefCell<RustfmtState>,\n     #[cfg(test)]\n     pub initial_rustfmt: RefCell<RustfmtState>,\n-    pub out: PathBuf,\n-    pub rust_info: channel::GitInfo,\n }\n \n #[derive(Default, Deserialize)]\n #[cfg_attr(test, derive(Clone))]\n pub struct Stage0Metadata {\n+    pub compiler: CompilerMetadata,\n     pub config: Stage0Config,\n     pub checksums_sha256: HashMap<String, String>,\n     pub rustfmt: Option<RustfmtMetadata>,\n }\n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct CompilerMetadata {\n+    pub date: String,\n+    pub version: String,\n+}\n+\n #[derive(Default, Deserialize)]\n #[cfg_attr(test, derive(Clone))]\n pub struct Stage0Config {\n@@ -989,10 +998,10 @@ impl Config {\n             config.out = crate::util::absolute(&config.out);\n         }\n \n-        config.initial_rustc = build\n-            .rustc\n-            .map(PathBuf::from)\n-            .unwrap_or_else(|| config.out.join(config.build.triple).join(\"stage0/bin/rustc\"));\n+        config.initial_rustc = build.rustc.map(PathBuf::from).unwrap_or_else(|| {\n+            config.download_beta_toolchain();\n+            config.out.join(config.build.triple).join(\"stage0/bin/rustc\")\n+        });\n         config.initial_cargo = build\n             .cargo\n             .map(PathBuf::from)"}, {"sha": "478d2e8cacc319d2f409f3fc4d3a6ce4ef741f64", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/eeec73244d2ab68e23b17b13f1163b254e597718/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeec73244d2ab68e23b17b13f1163b254e597718/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=eeec73244d2ab68e23b17b13f1163b254e597718", "patch": "@@ -367,26 +367,70 @@ impl Config {\n \n     pub(crate) fn download_ci_rustc(&self, commit: &str) {\n         self.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n+\n         let version = self.artifact_version_part(commit);\n+        // download-rustc doesn't need its own cargo, it can just use beta's. But it does need the\n+        // `rustc_private` crates for tools.\n+        let extra_components = [\"rustc-dev\"];\n+\n+        self.download_toolchain(\n+            &version,\n+            \"ci-rustc\",\n+            commit,\n+            &extra_components,\n+            Self::download_ci_component,\n+        );\n+    }\n+\n+    pub(crate) fn download_beta_toolchain(&self) {\n+        self.verbose(&format!(\"downloading stage0 beta artifacts\"));\n+\n+        let date = &self.stage0_metadata.compiler.date;\n+        let version = &self.stage0_metadata.compiler.version;\n+        let extra_components = [\"cargo\"];\n+\n+        let download_beta_component = |config: &Config, filename, prefix: &_, date: &_| {\n+            config.download_component(DownloadSource::Dist, filename, prefix, date, \"stage0\")\n+        };\n+\n+        self.download_toolchain(\n+            version,\n+            \"stage0\",\n+            date,\n+            &extra_components,\n+            download_beta_component,\n+        );\n+    }\n+\n+    fn download_toolchain(\n+        &self,\n+        // FIXME(ozkanonur) use CompilerMetadata instead of `version: &str`\n+        version: &str,\n+        sysroot: &str,\n+        stamp_key: &str,\n+        extra_components: &[&str],\n+        download_component: fn(&Config, String, &str, &str),\n+    ) {\n         let host = self.build.triple;\n-        let bin_root = self.out.join(host).join(\"ci-rustc\");\n+        let bin_root = self.out.join(host).join(sysroot);\n         let rustc_stamp = bin_root.join(\".rustc-stamp\");\n \n-        if !bin_root.join(\"bin\").join(\"rustc\").exists() || program_out_of_date(&rustc_stamp, commit)\n+        if !bin_root.join(\"bin\").join(exe(\"rustc\", self.build)).exists()\n+            || program_out_of_date(&rustc_stamp, stamp_key)\n         {\n             if bin_root.exists() {\n                 t!(fs::remove_dir_all(&bin_root));\n             }\n             let filename = format!(\"rust-std-{version}-{host}.tar.xz\");\n             let pattern = format!(\"rust-std-{host}\");\n-            self.download_ci_component(filename, &pattern, commit);\n+            download_component(self, filename, &pattern, stamp_key);\n             let filename = format!(\"rustc-{version}-{host}.tar.xz\");\n-            self.download_ci_component(filename, \"rustc\", commit);\n-            // download-rustc doesn't need its own cargo, it can just use beta's.\n-            let filename = format!(\"rustc-dev-{version}-{host}.tar.xz\");\n-            self.download_ci_component(filename, \"rustc-dev\", commit);\n-            let filename = format!(\"rust-src-{version}.tar.xz\");\n-            self.download_ci_component(filename, \"rust-src\", commit);\n+            download_component(self, filename, \"rustc\", stamp_key);\n+\n+            for component in extra_components {\n+                let filename = format!(\"{component}-{version}-{host}.tar.xz\");\n+                download_component(self, filename, component, stamp_key);\n+            }\n \n             if self.should_fix_bins_and_dylibs() {\n                 self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n@@ -403,7 +447,7 @@ impl Config {\n                 }\n             }\n \n-            t!(fs::write(rustc_stamp, commit));\n+            t!(fs::write(rustc_stamp, stamp_key));\n         }\n     }\n "}, {"sha": "171e1ccf0468a3e7392c73c92c3c10517821d6a9", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eeec73244d2ab68e23b17b13f1163b254e597718/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeec73244d2ab68e23b17b13f1163b254e597718/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=eeec73244d2ab68e23b17b13f1163b254e597718", "patch": "@@ -1133,7 +1133,7 @@ impl Step for Tidy {\n         if builder.config.channel == \"dev\" || builder.config.channel == \"nightly\" {\n             builder.info(\"fmt check\");\n             if builder.initial_rustfmt().is_none() {\n-                let inferred_rustfmt_dir = builder.config.initial_rustc.parent().unwrap();\n+                let inferred_rustfmt_dir = builder.initial_rustc.parent().unwrap();\n                 eprintln!(\n                     \"\\\n error: no `rustfmt` binary found in {PATH}"}]}