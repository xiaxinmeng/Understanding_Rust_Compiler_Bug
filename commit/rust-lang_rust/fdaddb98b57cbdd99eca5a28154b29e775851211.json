{"sha": "fdaddb98b57cbdd99eca5a28154b29e775851211", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYWRkYjk4YjU3Y2JkZDk5ZWNhNWEyODE1NGIyOWU3NzU4NTEyMTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-30T11:09:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T11:09:57Z"}, "message": "Merge #4210\n\n4210: Include function qualifiers in signature r=matklad a=oxalica\n\nFixes #2450\r\n\r\nIt seems there's no test for `ra_ide/display/{short_label,function_signature}`. I'm not sure how to setup it.\r\n\r\nManually tested:\r\n<img width=\"428\" alt=\"Screenshot_20200430_004434\" src=\"https://user-images.githubusercontent.com/14816024/80622769-d6f1c200-8a7b-11ea-91f3-e94bfb2703c5.png\">\r\n\n\nCo-authored-by: oxalica <oxalicc@pm.me>", "tree": {"sha": "3ed69bcee57785dd8d42ae09174121cc26319720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed69bcee57785dd8d42ae09174121cc26319720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdaddb98b57cbdd99eca5a28154b29e775851211", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqrIFCRBK7hj4Ov3rIwAAdHIIABmvnzMscPEXHLwgJHJ0Jx0E\n5PG3VMYb+nBZW4sfnD8PfcC9i78c86ldftx3bqKO5/xNyQD3pWMa9kdTkKi9d7n6\nEzPa0KydQ99rR6oF68lfVI08x2p8aRxnq2jicB1V1JPXfars7dzu976vRlOJL1BY\nDi3Zfjmxynf1tMf94NvsD/yCaTnukf9B4SjrNFgavkttviJki+iKLN+47xtbjVnm\nMxW2pwXON9AVXNGwrVl3C2W9RHcinn8p0waQhQGoBSB7P/VJS9LSTdKd5KLJQHns\nE3kFlT57V6JCkOH1MDnLVCscVcc1tiT+X5jDtgBTS/2/sG4/gPG0ViOWWveO+Yo=\n=e3Lt\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ed69bcee57785dd8d42ae09174121cc26319720\nparent 95e8766db60be2a00bce9978e2680a769771a546\nparent b9b342ff93ad3da659934ccb6dd3c15b6c2e9115\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588244997 +0000\ncommitter GitHub <noreply@github.com> 1588244997 +0000\n\nMerge #4210\n\n4210: Include function qualifiers in signature r=matklad a=oxalica\n\nFixes #2450\r\n\r\nIt seems there's no test for `ra_ide/display/{short_label,function_signature}`. I'm not sure how to setup it.\r\n\r\nManually tested:\r\n<img width=\"428\" alt=\"Screenshot_20200430_004434\" src=\"https://user-images.githubusercontent.com/14816024/80622769-d6f1c200-8a7b-11ea-91f3-e94bfb2703c5.png\">\r\n\n\nCo-authored-by: oxalica <oxalicc@pm.me>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaddb98b57cbdd99eca5a28154b29e775851211", "html_url": "https://github.com/rust-lang/rust/commit/fdaddb98b57cbdd99eca5a28154b29e775851211", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdaddb98b57cbdd99eca5a28154b29e775851211/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e8766db60be2a00bce9978e2680a769771a546", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e8766db60be2a00bce9978e2680a769771a546", "html_url": "https://github.com/rust-lang/rust/commit/95e8766db60be2a00bce9978e2680a769771a546"}, {"sha": "b9b342ff93ad3da659934ccb6dd3c15b6c2e9115", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b342ff93ad3da659934ccb6dd3c15b6c2e9115", "html_url": "https://github.com/rust-lang/rust/commit/b9b342ff93ad3da659934ccb6dd3c15b6c2e9115"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "db3907fe64e13afe8194abb13e1a209fda488b8f", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fdaddb98b57cbdd99eca5a28154b29e775851211/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdaddb98b57cbdd99eca5a28154b29e775851211/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=fdaddb98b57cbdd99eca5a28154b29e775851211", "patch": "@@ -26,6 +26,8 @@ pub struct FunctionSignature {\n     pub kind: CallableKind,\n     /// Optional visibility\n     pub visibility: Option<String>,\n+    /// Qualifiers like `async`, `unsafe`, ...\n+    pub qualifier: FunctionQualifier,\n     /// Name of the function\n     pub name: Option<String>,\n     /// Documentation for the function\n@@ -46,6 +48,16 @@ pub struct FunctionSignature {\n     pub has_self_param: bool,\n }\n \n+#[derive(Debug, Default)]\n+pub struct FunctionQualifier {\n+    // `async` and `const` are mutually exclusive. Do we need to enforcing it here?\n+    pub is_async: bool,\n+    pub is_const: bool,\n+    pub is_unsafe: bool,\n+    /// The string `extern \"..\"`\n+    pub extern_abi: Option<String>,\n+}\n+\n impl FunctionSignature {\n     pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n         self.doc = doc;\n@@ -83,6 +95,8 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::StructConstructor,\n                 visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+                // Do we need `const`?\n+                qualifier: Default::default(),\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: node.name().map(|n| n.text().to_string()),\n                 parameters: params,\n@@ -128,6 +142,8 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::VariantConstructor,\n                 visibility: None,\n+                // Do we need `const`?\n+                qualifier: Default::default(),\n                 name: Some(name),\n                 ret_type: None,\n                 parameters: params,\n@@ -151,6 +167,7 @@ impl FunctionSignature {\n             FunctionSignature {\n                 kind: CallableKind::Macro,\n                 visibility: None,\n+                qualifier: Default::default(),\n                 name: node.name().map(|n| n.text().to_string()),\n                 ret_type: None,\n                 parameters: params,\n@@ -223,6 +240,12 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n         FunctionSignature {\n             kind: CallableKind::Function,\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            qualifier: FunctionQualifier {\n+                is_async: node.async_token().is_some(),\n+                is_const: node.const_token().is_some(),\n+                is_unsafe: node.unsafe_token().is_some(),\n+                extern_abi: node.abi().map(|n| n.to_string()),\n+            },\n             name: node.name().map(|n| n.text().to_string()),\n             ret_type: node\n                 .ret_type()\n@@ -246,6 +269,23 @@ impl Display for FunctionSignature {\n             write!(f, \"{} \", t)?;\n         }\n \n+        if self.qualifier.is_async {\n+            write!(f, \"async \")?;\n+        }\n+\n+        if self.qualifier.is_const {\n+            write!(f, \"const \")?;\n+        }\n+\n+        if self.qualifier.is_unsafe {\n+            write!(f, \"unsafe \")?;\n+        }\n+\n+        if let Some(extern_abi) = &self.qualifier.extern_abi {\n+            // Keyword `extern` is included in the string.\n+            write!(f, \"{} \", extern_abi)?;\n+        }\n+\n         if let Some(name) = &self.name {\n             match self.kind {\n                 CallableKind::Function => write!(f, \"fn {}\", name)?,"}, {"sha": "a62f598f0db82e0f0af12ecd5f36de507aa3453a", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fdaddb98b57cbdd99eca5a28154b29e775851211/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdaddb98b57cbdd99eca5a28154b29e775851211/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=fdaddb98b57cbdd99eca5a28154b29e775851211", "patch": "@@ -844,4 +844,29 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"fn foo()\\n```\\n\\n<- `\\u{3000}` here\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_hover_function_show_qualifiers() {\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            async fn foo<|>() {}\n+            \",\n+            &[\"async fn foo()\"],\n+        );\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            pub const unsafe fn foo<|>() {}\n+            \",\n+            &[\"pub const unsafe fn foo()\"],\n+        );\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            pub(crate) async unsafe extern \"C\" fn foo<|>() {}\n+            \"#,\n+            &[r#\"pub(crate) async unsafe extern \"C\" fn foo()\"#],\n+        );\n+    }\n }"}]}