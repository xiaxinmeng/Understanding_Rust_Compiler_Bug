{"sha": "19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "node_id": "C_kwDOAAsO6NoAKDE5MzA2YzA3MGQ1ZGViOGFmYTZlOWRhMjFmY2YyMmU1YjdlMjRhMTE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-11T10:59:52Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-11-11T11:31:46Z"}, "message": "Fix tests that depended on loose visibility restriction", "tree": {"sha": "412e2d6bcfb538461cb6b40382bdab63afa0a469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/412e2d6bcfb538461cb6b40382bdab63afa0a469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNuMqIACgkQ4laYqTBY\nYXFjCw//Qa2JO+NFZ0O7GVoWYRw8WzaYhniOCoEDOspgZjSlW651db1ej50Vb01Y\n0MUtbyA1ilCaIglXLgUGgZs/ZT/uDG+oZUiIoTHVwfLOoIZk0WCkpRTN9vYc886o\npPwZZVCvcXv5cRyEJ+jRtyD8K7yUQQZ3ZfeIfMkMelRxVjK8pYrnNm4fSh/3LNVW\nRcmKXtFDk9xMWU2Ae+DTqeie9Rr4vXoGmzY9Uyit6vog5sjwWfeFkBrkdzlH6TX6\nTEFscM1GsFzqNAHXkCJKAE3hRiuxKFVq8HUoh+/HjaEUVXRaloGkSC3iIIsADprT\nnCjNrDeoan8tWG+Oe6ybHdR+cMTsHixvyiib+u1nwKvKAg2IFZ7ZqAn33gQKenv0\nWm/tdUPpmE7bs4XadIRwK4xmCwkyHdN5A4bz5o2SCcyvqjbU0hx/lAnrAlcz7KFR\nuuD+8lSdxIWKJv1VUwMMzUG42ErwWuMZJw8aIP97g1gapAO2BMQZOQg6KjzDeuI3\nnr378Db49FEt6rnfh48Sttr8aCI7buEYG1qOmyD35UZx9sjvFYsYudrq7mx1WRJi\nyABQyA8IhsTJdDnHXumFbHlGnUTOcp4atrqUO5NrcHpG9Qmnzr0acy3juWaXVTib\nqNd1LJfm58+ZW2W/MctFQnqYF7ilSAYGzXtsbI8TGdSpK3/JqeU=\n=oe7R\n-----END PGP SIGNATURE-----", "payload": "tree 412e2d6bcfb538461cb6b40382bdab63afa0a469\nparent e75afebeb243538ac85e4cb965bd40582f4c7b59\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1668164392 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1668166306 +0900\n\nFix tests that depended on loose visibility restriction\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "html_url": "https://github.com/rust-lang/rust/commit/19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75afebeb243538ac85e4cb965bd40582f4c7b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75afebeb243538ac85e4cb965bd40582f4c7b59", "html_url": "https://github.com/rust-lang/rust/commit/e75afebeb243538ac85e4cb965bd40582f4c7b59"}], "stats": {"total": 179, "additions": 90, "deletions": 89}, "files": [{"sha": "0d90047c28f6f7e3e30991914642effaedb23387", "filename": "crates/hir-def/src/nameres/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -58,9 +58,9 @@ extern {\n \"#,\n         expect![[r#\"\n             crate\n-            E: t\n+            E: _\n             S: t v\n-            V: t v\n+            V: _\n             foo: t\n \n             crate::foo\n@@ -307,7 +307,7 @@ pub struct FromLib;\n             Bar: t v\n \n             crate::foo\n-            Bar: t v\n+            Bar: _\n             FromLib: t v\n         \"#]],\n     );"}, {"sha": "88a3c76393f08fed9b12adf425a5f37f9d7e3d7d", "filename": "crates/hir-def/src/nameres/tests/globs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -119,7 +119,7 @@ use foo::*;\n use foo::bar::*;\n \n //- /foo/mod.rs\n-mod bar;\n+pub mod bar;\n fn Foo() {};\n pub struct Foo {};\n \n@@ -132,6 +132,7 @@ pub(crate) struct PubCrateStruct;\n             crate\n             Foo: t\n             PubCrateStruct: t v\n+            bar: t\n             foo: t\n \n             crate::foo"}, {"sha": "c575bf7cac2550d252c88bf785b6179c86b43551", "filename": "crates/hir-def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -580,7 +580,7 @@ fn module_resolution_decl_inside_inline_module_in_crate_root() {\n //- /main.rs\n mod foo {\n     #[path = \"baz.rs\"]\n-    mod bar;\n+    pub mod bar;\n }\n use self::foo::bar::Baz;\n "}, {"sha": "5d76d185ffc0441cb3b961bd57c251f612972b33", "filename": "crates/hir-ty/src/tests/method_resolution.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -164,16 +164,16 @@ fn infer_associated_method_with_modules() {\n     check_infer(\n         r#\"\n         mod a {\n-            struct A;\n+            pub struct A;\n             impl A { pub fn thing() -> A { A {} }}\n         }\n \n         mod b {\n-            struct B;\n+            pub struct B;\n             impl B { pub fn thing() -> u32 { 99 }}\n \n-            mod c {\n-                struct C;\n+            pub mod c {\n+                pub struct C;\n                 impl C { pub fn thing() -> C { C {} }}\n             }\n         }\n@@ -186,22 +186,22 @@ fn infer_associated_method_with_modules() {\n         }\n         \"#,\n         expect![[r#\"\n-            55..63 '{ A {} }': A\n-            57..61 'A {}': A\n-            125..131 '{ 99 }': u32\n-            127..129 '99': u32\n-            201..209 '{ C {} }': C\n-            203..207 'C {}': C\n-            240..324 '{     ...g(); }': ()\n-            250..251 'x': A\n-            254..265 'a::A::thing': fn thing() -> A\n-            254..267 'a::A::thing()': A\n-            277..278 'y': u32\n-            281..292 'b::B::thing': fn thing() -> u32\n-            281..294 'b::B::thing()': u32\n-            304..305 'z': C\n-            308..319 'c::C::thing': fn thing() -> C\n-            308..321 'c::C::thing()': C\n+            59..67 '{ A {} }': A\n+            61..65 'A {}': A\n+            133..139 '{ 99 }': u32\n+            135..137 '99': u32\n+            217..225 '{ C {} }': C\n+            219..223 'C {}': C\n+            256..340 '{     ...g(); }': ()\n+            266..267 'x': A\n+            270..281 'a::A::thing': fn thing() -> A\n+            270..283 'a::A::thing()': A\n+            293..294 'y': u32\n+            297..308 'b::B::thing': fn thing() -> u32\n+            297..310 'b::B::thing()': u32\n+            320..321 'z': C\n+            324..335 'c::C::thing': fn thing() -> C\n+            324..337 'c::C::thing()': C\n         \"#]],\n     );\n }"}, {"sha": "d7431443b83d519bb1330a7bd5e5ef4a1650142a", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -214,7 +214,7 @@ fn infer_paths() {\n fn a() -> u32 { 1 }\n \n mod b {\n-    fn c() -> u32 { 1 }\n+    pub fn c() -> u32 { 1 }\n }\n \n fn test() {\n@@ -225,13 +225,13 @@ fn test() {\n         expect![[r#\"\n             14..19 '{ 1 }': u32\n             16..17 '1': u32\n-            47..52 '{ 1 }': u32\n-            49..50 '1': u32\n-            66..90 '{     ...c(); }': ()\n-            72..73 'a': fn a() -> u32\n-            72..75 'a()': u32\n-            81..85 'b::c': fn c() -> u32\n-            81..87 'b::c()': u32\n+            51..56 '{ 1 }': u32\n+            53..54 '1': u32\n+            70..94 '{     ...c(); }': ()\n+            76..77 'a': fn a() -> u32\n+            76..79 'a()': u32\n+            85..89 'b::c': fn c() -> u32\n+            85..91 'b::c()': u32\n         \"#]],\n     );\n }\n@@ -1856,7 +1856,7 @@ fn not_shadowing_module_by_primitive() {\n     check_types(\n         r#\"\n //- /str.rs\n-fn foo() -> u32 {0}\n+pub fn foo() -> u32 {0}\n \n //- /main.rs\n mod str;"}, {"sha": "3d7194b6f4468ff0fe20910642af7f61bd52b73f", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -1706,7 +1706,7 @@ fn where_clause_trait_in_scope_for_method_resolution() {\n     check_types(\n         r#\"\n mod foo {\n-    trait Trait {\n+    pub trait Trait {\n         fn foo(&self) -> u32 { 0 }\n     }\n }\n@@ -1723,7 +1723,7 @@ fn super_trait_method_resolution() {\n     check_infer(\n         r#\"\n mod foo {\n-    trait SuperTrait {\n+    pub trait SuperTrait {\n         fn foo(&self) -> u32 {}\n     }\n }\n@@ -1735,15 +1735,15 @@ fn test<T: Trait1, U: Trait2>(x: T, y: U) {\n     y.foo();\n }\"#,\n         expect![[r#\"\n-            49..53 'self': &Self\n-            62..64 '{}': u32\n-            181..182 'x': T\n-            187..188 'y': U\n-            193..222 '{     ...o(); }': ()\n-            199..200 'x': T\n-            199..206 'x.foo()': u32\n-            212..213 'y': U\n-            212..219 'y.foo()': u32\n+            53..57 'self': &Self\n+            66..68 '{}': u32\n+            185..186 'x': T\n+            191..192 'y': U\n+            197..226 '{     ...o(); }': ()\n+            203..204 'x': T\n+            203..210 'x.foo()': u32\n+            216..217 'y': U\n+            216..223 'y.foo()': u32\n         \"#]],\n     );\n }\n@@ -1754,7 +1754,7 @@ fn super_trait_impl_trait_method_resolution() {\n         r#\"\n //- minicore: sized\n mod foo {\n-    trait SuperTrait {\n+    pub trait SuperTrait {\n         fn foo(&self) -> u32 {}\n     }\n }\n@@ -1764,12 +1764,12 @@ fn test(x: &impl Trait1) {\n     x.foo();\n }\"#,\n         expect![[r#\"\n-            49..53 'self': &Self\n-            62..64 '{}': u32\n-            115..116 'x': &impl Trait1\n-            132..148 '{     ...o(); }': ()\n-            138..139 'x': &impl Trait1\n-            138..145 'x.foo()': u32\n+            53..57 'self': &Self\n+            66..68 '{}': u32\n+            119..120 'x': &impl Trait1\n+            136..152 '{     ...o(); }': ()\n+            142..143 'x': &impl Trait1\n+            142..149 'x.foo()': u32\n         \"#]],\n     );\n }"}, {"sha": "722302f991e27190cb8f0b6ddbfc34c2f4789aa2", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -379,14 +379,14 @@ impl Foo for S {\n             r#\"\n mod foo {\n     pub struct Bar;\n-    trait Foo { fn foo(&self, bar: Bar); }\n+    pub trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar;\n-    trait Foo { fn foo(&self, bar: Bar); }\n+    pub trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n impl foo::Foo for S {\n@@ -439,14 +439,14 @@ impl bar::Foo for S {\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n-    trait Foo { fn foo(&self, bar: Bar<u32>); }\n+    pub trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n-    trait Foo { fn foo(&self, bar: Bar<u32>); }\n+    pub trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n impl foo::Foo for S {\n@@ -464,14 +464,14 @@ impl foo::Foo for S {\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n-    trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n+    pub trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n impl foo::Foo<u32> for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n-    trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n+    pub trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n impl foo::Foo<u32> for S {\n@@ -489,15 +489,15 @@ impl foo::Foo<u32> for S {\n             add_missing_impl_members,\n             r#\"\n mod foo {\n-    trait Foo<T> { fn foo(&self, bar: T); }\n+    pub trait Foo<T> { fn foo(&self, bar: T); }\n     pub struct Param;\n }\n struct Param;\n struct S;\n impl foo::Foo<Param> for S { $0 }\"#,\n             r#\"\n mod foo {\n-    trait Foo<T> { fn foo(&self, bar: T); }\n+    pub trait Foo<T> { fn foo(&self, bar: T); }\n     pub struct Param;\n }\n struct Param;\n@@ -518,15 +518,15 @@ impl foo::Foo<Param> for S {\n mod foo {\n     pub struct Bar<T>;\n     impl Bar<T> { type Assoc = u32; }\n-    trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n+    pub trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n     impl Bar<T> { type Assoc = u32; }\n-    trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n+    pub trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n impl foo::Foo for S {\n@@ -545,15 +545,15 @@ impl foo::Foo for S {\n mod foo {\n     pub struct Bar<T>;\n     pub struct Baz;\n-    trait Foo { fn foo(&self, bar: Bar<Baz>); }\n+    pub trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub struct Bar<T>;\n     pub struct Baz;\n-    trait Foo { fn foo(&self, bar: Bar<Baz>); }\n+    pub trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n impl foo::Foo for S {\n@@ -571,14 +571,14 @@ impl foo::Foo for S {\n             r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n-    trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n+    pub trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n impl foo::Foo for S { $0 }\"#,\n             r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n-    trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n+    pub trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n impl foo::Foo for S {"}, {"sha": "0bcb5728311b73db3f6c757a34864c6ee3ac2cc8", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -261,12 +261,12 @@ fn main() {\n }\n \n //- /foo.rs\n-enum Foo {\n+pub enum Foo {\n     Bar,\n }\n \",\n             r\"\n-enum Foo {\n+pub enum Foo {\n     Bar,\n     Baz,\n }\n@@ -310,7 +310,7 @@ fn main() {\n             generate_enum_variant,\n             r\"\n mod m {\n-    enum Foo {\n+    pub enum Foo {\n         Bar,\n     }\n }\n@@ -320,7 +320,7 @@ fn main() {\n \",\n             r\"\n mod m {\n-    enum Foo {\n+    pub enum Foo {\n         Bar,\n         Baz,\n     }\n@@ -516,10 +516,10 @@ mod foo;\n use foo::Foo::Bar$0;\n \n //- /foo.rs\n-enum Foo {}\n+pub enum Foo {}\n \",\n             r\"\n-enum Foo {\n+pub enum Foo {\n     Bar,\n }\n \","}, {"sha": "57f198748cb76ef9a285b538a2b09a6071f8db67", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -1324,7 +1324,7 @@ fn foo() {\n             generate_function,\n             r\"\n mod bar {\n-    mod baz {}\n+    pub mod baz {}\n }\n \n fn foo() {\n@@ -1333,7 +1333,7 @@ fn foo() {\n \",\n             r\"\n mod bar {\n-    mod baz {\n+    pub mod baz {\n         pub(crate) fn my_fn() {\n             ${0:todo!()}\n         }"}, {"sha": "d8f2a9de9818fca43f638f6e8e8031abc9887d78", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -268,12 +268,12 @@ fn main() {\n     foo::Foo { bar: 3, $0baz: false};\n }\n //- /foo.rs\n-struct Foo {\n+pub struct Foo {\n     bar: i32\n }\n \"#,\n             r#\"\n-struct Foo {\n+pub struct Foo {\n     bar: i32,\n     pub(crate) baz: bool\n }"}, {"sha": "289ed0458c67dbc4aea2f677dc9e5a88037e91eb", "filename": "crates/ide-diagnostics/src/handlers/useless_braces.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fuseless_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fuseless_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fuseless_braces.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -71,9 +71,9 @@ use a;\n use a::{c, d::e};\n \n mod a {\n-    mod c {}\n-    mod d {\n-        mod e {}\n+    pub mod c {}\n+    pub mod d {\n+        pub mod e {}\n     }\n }\n \"#,\n@@ -87,9 +87,9 @@ use a::{\n };\n \n mod a {\n-    mod c {}\n-    mod d {\n-        mod e {}\n+    pub mod c {}\n+    pub mod d {\n+        pub mod e {}\n     }\n }\n \"#,\n@@ -116,11 +116,11 @@ use b;\n         );\n         check_fix(\n             r#\"\n-mod a { mod c {} }\n+mod a { pub mod c {} }\n use a::{c$0};\n \"#,\n             r#\"\n-mod a { mod c {} }\n+mod a { pub mod c {} }\n use a::c;\n \"#,\n         );\n@@ -136,11 +136,11 @@ use a;\n         );\n         check_fix(\n             r#\"\n-mod a { mod c {} mod d { mod e {} } }\n+mod a { pub mod c {} pub mod d { pub mod e {} } }\n use a::{c, d::{e$0}};\n \"#,\n             r#\"\n-mod a { mod c {} mod d { mod e {} } }\n+mod a { pub mod c {} pub mod d { pub mod e {} } }\n use a::{c, d::e};\n \"#,\n         );"}, {"sha": "43f7a529bc2979168dcef1d96a2daf67aafe1b28", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19306c070d5deb8afa6e9da21fcf22e5b7e24a11/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=19306c070d5deb8afa6e9da21fcf22e5b7e24a11", "patch": "@@ -289,10 +289,10 @@ mod b;\n enum E { X(Foo$0) }\n \n //- /a.rs\n-struct Foo;\n-     //^^^\n+pub struct Foo;\n+         //^^^\n //- /b.rs\n-struct Foo;\n+pub struct Foo;\n \"#,\n         );\n     }"}]}