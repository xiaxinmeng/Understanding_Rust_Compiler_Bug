{"sha": "d73077f82dc0f074f7abcb017bd73f4d70a685e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzA3N2Y4MmRjMGYwNzRmN2FiY2IwMTdiZDczZjRkNzBhNjg1ZTk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-25T21:39:04Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-25T21:39:04Z"}, "message": "Revert \"Merge pull request #4633 from thestinger/treemap\"\n\nI was too hasty in merging -- this needs a snapshot.\n\nThis reverts commit 4a7e1ab3745f519536ef6e0377427fc41e47f7c6, reversing\nchanges made to e447521c1ca2dbead5b485ddc43060b282840817.", "tree": {"sha": "1ea31e0c59add1d937a2bda9939b51ac19cc093f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea31e0c59add1d937a2bda9939b51ac19cc093f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d73077f82dc0f074f7abcb017bd73f4d70a685e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d73077f82dc0f074f7abcb017bd73f4d70a685e9", "html_url": "https://github.com/rust-lang/rust/commit/d73077f82dc0f074f7abcb017bd73f4d70a685e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d73077f82dc0f074f7abcb017bd73f4d70a685e9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f1dba510f4710df7de4ba8f16f8029efe2015c", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f1dba510f4710df7de4ba8f16f8029efe2015c", "html_url": "https://github.com/rust-lang/rust/commit/18f1dba510f4710df7de4ba8f16f8029efe2015c"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "01b62797a8d7621a2cde37ed847b843d134cab1d", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d73077f82dc0f074f7abcb017bd73f4d70a685e9/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73077f82dc0f074f7abcb017bd73f4d70a685e9/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=d73077f82dc0f074f7abcb017bd73f4d70a685e9", "patch": "@@ -76,7 +76,8 @@ impl <T: Ord> PriorityQueue<T> {\n     }\n \n     /// Optimized version of a push followed by a pop\n-    fn push_pop(&mut self, mut item: T) -> T {\n+    fn push_pop(&mut self, item: T) -> T {\n+        let mut item = item;\n         if !self.is_empty() && self.data[0] > item {\n             item <-> self.data[0];\n             self.siftdown(0);\n@@ -85,7 +86,8 @@ impl <T: Ord> PriorityQueue<T> {\n     }\n \n     /// Optimized version of a pop followed by a push - fails if empty\n-    fn replace(&mut self, mut item: T) -> T {\n+    fn replace(&mut self, item: T) -> T {\n+        let mut item = item;\n         item <-> self.data[0];\n         self.siftdown(0);\n         item\n@@ -127,8 +129,9 @@ impl <T: Ord> PriorityQueue<T> {\n     // vector over the junk element.  This reduces the constant factor\n     // compared to using swaps, which involves twice as many moves.\n \n-    priv fn siftup(&mut self, start: uint, mut pos: uint) {\n+    priv fn siftup(&mut self, start: uint, pos: uint) {\n         unsafe {\n+            let mut pos = pos;\n             let new = move *addr_of(&self.data[pos]);\n \n             while pos > start {\n@@ -146,8 +149,9 @@ impl <T: Ord> PriorityQueue<T> {\n         }\n     }\n \n-    priv fn siftdown_range(&mut self, mut pos: uint, end: uint) {\n+    priv fn siftdown_range(&mut self, pos: uint, end: uint) {\n         unsafe {\n+            let mut pos = pos;\n             let start = pos;\n             let new = move *addr_of(&self.data[pos]);\n "}, {"sha": "36d919494f13d45abeacd130a56eadcb1ba4b023", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d73077f82dc0f074f7abcb017bd73f4d70a685e9/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73077f82dc0f074f7abcb017bd73f4d70a685e9/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=d73077f82dc0f074f7abcb017bd73f4d70a685e9", "patch": "@@ -526,8 +526,9 @@ pure fn each_reverse<K: Ord, V>(node: &Option<~TreeNode<K, V>>,\n }\n \n // Remove left horizontal link by rotating right\n-fn skew<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn skew<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n     if node.left.map_default(false, |x| x.level == node.level) {\n+        let mut node = node;\n         let mut save = node.left.swap_unwrap();\n         node.left <-> save.right; // save.right now None\n         save.right = Some(node);\n@@ -539,9 +540,10 @@ fn skew<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n \n // Remove dual horizontal link by rotating left and increasing level of\n // the parent\n-fn split<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn split<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n     if node.right.map_default(false,\n       |x| x.right.map_default(false, |y| y.level == node.level)) {\n+        let mut node = node;\n         let mut save = node.right.swap_unwrap();\n         node.right <-> save.left; // save.left now None\n         save.left = Some(node);\n@@ -580,7 +582,8 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n     fn heir_swap<K: Ord, V>(node: &mut TreeNode<K, V>,\n                             child: &mut Option<~TreeNode<K, V>>) {\n         // *could* be done without recursion, but it won't borrow check\n-        do child.mutate |mut child| {\n+        do child.mutate |child| {\n+            let mut child = child;\n             if child.right.is_some() {\n                 heir_swap(&mut *node, &mut child.right);\n             } else {\n@@ -633,13 +636,15 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n             save.level -= 1;\n \n             if right_level > save.level {\n-                do save.right.mutate |mut x| { x.level = save.level; x }\n+                do save.right.mutate |x| {\n+                    let mut x = x; x.level = save.level; x\n+                }\n             }\n \n             save = skew(save);\n \n-            do save.right.mutate |mut right| {\n-                right = skew(right);\n+            do save.right.mutate |right| {\n+                let mut right = skew(right);\n                 right.right.mutate(skew);\n                 right\n             }"}]}