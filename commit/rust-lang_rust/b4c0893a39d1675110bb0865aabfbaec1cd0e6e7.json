{"sha": "b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzA4OTNhMzlkMTY3NTExMGJiMDg2NWFhYmZiYWVjMWNkMGU2ZTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-24T18:31:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-24T18:32:50Z"}, "message": "rustc: If needed, duplicate types' heap parts recursively through structural types", "tree": {"sha": "e5538361913fae3b3f42d8e0bb2d87b729856288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5538361913fae3b3f42d8e0bb2d87b729856288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "html_url": "https://github.com/rust-lang/rust/commit/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7f06b17ae11b35e55a6f8655f13be8d590e91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7f06b17ae11b35e55a6f8655f13be8d590e91a", "html_url": "https://github.com/rust-lang/rust/commit/1e7f06b17ae11b35e55a6f8655f13be8d590e91a"}], "stats": {"total": 97, "additions": 65, "deletions": 32}, "files": [{"sha": "2bcc19b6c69e9e6318dfe24a64887452706a334e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "patch": "@@ -3024,13 +3024,20 @@ fn memmove_ty(&@block_ctxt cx, ValueRef dst, ValueRef src, &ty::t t) ->\n // Duplicates the heap-owned memory owned by a value of the given type.\n fn duplicate_heap_parts(&@block_ctxt cx, ValueRef vptr, ty::t typ) -> result {\n     alt (ty::struct(cx.fcx.lcx.ccx.tcx, typ)) {\n-        case (ty::ty_ivec(?tm)) {\n-            ret ivec::duplicate_heap_part(cx, vptr, tm.ty);\n-        }\n-        case (ty::ty_str) {\n-            ret ivec::duplicate_heap_part(cx, vptr,\n-                ty::mk_mach(cx.fcx.lcx.ccx.tcx, common::ty_u8));\n+      case (ty::ty_ivec(?tm)) {\n+        ret ivec::duplicate_heap_part(cx, vptr, tm.ty);\n+      }\n+      case (ty::ty_istr) {\n+        ret ivec::duplicate_heap_part(cx, vptr,\n+            ty::mk_mach(cx.fcx.lcx.ccx.tcx, common::ty_u8));\n+      }\n+      case (_) {    // TODO: guard\n+        if (ty::type_is_structural(cx.fcx.lcx.ccx.tcx, typ)) {\n+            ret iter_structural_ty(cx, vptr, typ, duplicate_heap_parts);\n         }\n+\n+        ret res(cx, C_nil());\n+      }\n     }\n }\n "}, {"sha": "e392c8aa0f3712ce28b12568c9ccfafa9c3ad7fc", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 52, "deletions": 26, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c0893a39d1675110bb0865aabfbaec1cd0e6e7/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b4c0893a39d1675110bb0865aabfbaec1cd0e6e7", "patch": "@@ -1151,36 +1151,62 @@ fn type_is_signed(&ctxt cx, &t ty) -> bool {\n }\n \n fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n+    auto result = false;\n     alt (struct(cx, ty)) {\n-        case (ty_ivec(_)) { ret true; }\n-        case (ty_istr) { ret true; }\n+        case (ty_ivec(_)) { result = true; }\n+        case (ty_istr) { result = true; }\n \n-        case (ty_nil) { ret false; }\n-        case (ty_bot) { ret false; }\n-        case (ty_bool) { ret false; }\n-        case (ty_int) { ret false; }\n-        case (ty_float) { ret false; }\n-        case (ty_uint) { ret false; }\n-        case (ty_machine(_)) { ret false; }\n-        case (ty_char) { ret false; }\n-        case (ty_str) { ret false; }\n-        case (ty_tag(_,_)) { ret false; }\n-        case (ty_box(_)) { ret false; }\n-        case (ty_vec(_)) { ret false; }\n-        case (ty_ptr(_)) { ret false; }\n-        case (ty_port(_)) { ret false; }\n-        case (ty_chan(_)) { ret false; }\n-        case (ty_task) { ret false; }\n-        case (ty_tup(_)) { ret false; }\n-        case (ty_rec(_)) { ret false; }\n-        case (ty_fn(_,_,_,_,_)) { ret false; }\n-        case (ty_native_fn(_,_,_)) { ret false; }\n-        case (ty_obj(_)) { ret false; }\n+        // scalar types\n+        case (ty_nil) { result = false; }\n+        case (ty_bot) { result = false; }\n+        case (ty_bool) { result = false; }\n+        case (ty_int) { result = false; }\n+        case (ty_float) { result = false; }\n+        case (ty_uint) { result = false; }\n+        case (ty_machine(_)) { result = false; }\n+        case (ty_char) { result = false; }\n+        case (ty_type) { result = false; }\n+        case (ty_native) { result = false; }\n+\n+        // boxed types\n+        case (ty_str) { result = false; }\n+        case (ty_box(_)) { result = false; }\n+        case (ty_vec(_)) { result = false; }\n+        case (ty_fn(_,_,_,_,_)) { result = false; }\n+        case (ty_native_fn(_,_,_)) { result = false; }\n+        case (ty_obj(_)) { result = false; }\n+\n+        // structural types\n+        case (ty_tag(?did, ?tps)) {\n+            auto variants = tag_variants(cx, did);\n+            for (variant_info variant in variants) {\n+                auto tup_ty = mk_imm_tup(cx, variant.args);\n+                // Perform any type parameter substitutions.\n+                tup_ty = substitute_type_params(cx, tps, tup_ty);\n+                if (type_owns_heap_mem(cx, tup_ty)) { result = true; }\n+            }\n+        }\n+        case (ty_tup(?elts)) {\n+            for (mt m in elts) {\n+                if (type_owns_heap_mem(cx, m.ty)) { result = true; }\n+            }\n+        }\n+        case (ty_rec(?flds)) {\n+            for (field f in flds) {\n+                if (type_owns_heap_mem(cx, f.mt.ty)) { result = true; }\n+            }\n+        }\n+\n+        case (ty_ptr(_)) { result = false; }\n+        case (ty_port(_)) { result = false; }\n+        case (ty_chan(_)) { result = false; }\n+        case (ty_task) { result = false; }\n+        case (ty_tup(_)) { result = false; }\n+        case (ty_rec(_)) { result = false; }\n         case (ty_var(_)) { fail \"ty_var in type_owns_heap_mem\"; }\n-        case (ty_param(_)) { ret false; }\n-        case (ty_type) { ret false; }\n-        case (ty_native) { ret false; }\n+        case (ty_param(_)) { result = false; }\n     }\n+    ret result;\n }\n \n fn type_param(&ctxt cx, &t ty) -> option::t[uint] {"}]}