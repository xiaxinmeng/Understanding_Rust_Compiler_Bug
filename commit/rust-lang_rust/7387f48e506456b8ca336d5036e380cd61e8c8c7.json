{"sha": "7387f48e506456b8ca336d5036e380cd61e8c8c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODdmNDhlNTA2NDU2YjhjYTMzNmQ1MDM2ZTM4MGNkNjFlOGM4Yzc=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-11-28T14:24:30Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-11-28T14:24:44Z"}, "message": "Require allocator to be static for boxed `Pin`-API", "tree": {"sha": "8ac4273d43c78459aafff87daec7a48bf8f3d569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac4273d43c78459aafff87daec7a48bf8f3d569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7387f48e506456b8ca336d5036e380cd61e8c8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7387f48e506456b8ca336d5036e380cd61e8c8c7", "html_url": "https://github.com/rust-lang/rust/commit/7387f48e506456b8ca336d5036e380cd61e8c8c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7387f48e506456b8ca336d5036e380cd61e8c8c7/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a13b2bc4fa6370b9501135d97c5fe0bc401894", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a13b2bc4fa6370b9501135d97c5fe0bc401894", "html_url": "https://github.com/rust-lang/rust/commit/a1a13b2bc4fa6370b9501135d97c5fe0bc401894"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "d814c525ceb6e865479171d5f040dce70d5cf881", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7387f48e506456b8ca336d5036e380cd61e8c8c7/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7387f48e506456b8ca336d5036e380cd61e8c8c7/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7387f48e506456b8ca336d5036e380cd61e8c8c7", "patch": "@@ -327,7 +327,10 @@ impl<T, A: AllocRef> Box<T, A> {\n     /// `x` will be pinned in memory and unable to be moved.\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     #[inline(always)]\n-    pub fn pin_in(x: T, alloc: A) -> Pin<Self> {\n+    pub fn pin_in(x: T, alloc: A) -> Pin<Self>\n+    where\n+        A: 'static,\n+    {\n         Self::new_in(x, alloc).into()\n     }\n \n@@ -802,7 +805,10 @@ impl<T: ?Sized, A: AllocRef> Box<T, A> {\n     ///\n     /// This is also available via [`From`].\n     #[unstable(feature = \"box_into_pin\", issue = \"62370\")]\n-    pub fn into_pin(boxed: Self) -> Pin<Self> {\n+    pub fn into_pin(boxed: Self) -> Pin<Self>\n+    where\n+        A: 'static,\n+    {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n         // when `T: !Unpin`,  so it's safe to pin it directly without any\n         // additional requirements.\n@@ -1010,7 +1016,10 @@ impl<T> From<T> for Box<T> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T: ?Sized, A: AllocRef> From<Box<T, A>> for Pin<Box<T, A>> {\n+impl<T: ?Sized, A: AllocRef> From<Box<T, A>> for Pin<Box<T, A>>\n+where\n+    A: 'static,\n+{\n     /// Converts a `Box<T>` into a `Pin<Box<T>>`\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n@@ -1413,10 +1422,13 @@ impl<T: ?Sized, A: AllocRef> AsMut<T> for Box<T, A> {\n  *  could have a method to project a Pin<T> from it.\n  */\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T: ?Sized, A: AllocRef> Unpin for Box<T, A> {}\n+impl<T: ?Sized, A: AllocRef> Unpin for Box<T, A> where A: 'static {}\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A> {\n+impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A>\n+where\n+    A: 'static,\n+{\n     type Yield = G::Yield;\n     type Return = G::Return;\n \n@@ -1426,7 +1438,10 @@ impl<G: ?Sized + Generator<R> + Unpin, R, A: AllocRef> Generator<R> for Box<G, A\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>> {\n+impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>>\n+where\n+    A: 'static,\n+{\n     type Yield = G::Yield;\n     type Return = G::Return;\n \n@@ -1436,7 +1451,10 @@ impl<G: ?Sized + Generator<R>, R, A: AllocRef> Generator<R> for Pin<Box<G, A>> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<F: ?Sized + Future + Unpin, A: AllocRef> Future for Box<F, A> {\n+impl<F: ?Sized + Future + Unpin, A: AllocRef> Future for Box<F, A>\n+where\n+    A: 'static,\n+{\n     type Output = F::Output;\n \n     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {"}]}