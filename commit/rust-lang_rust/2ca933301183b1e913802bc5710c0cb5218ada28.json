{"sha": "2ca933301183b1e913802bc5710c0cb5218ada28", "node_id": "C_kwDOAAsO6NoAKDJjYTkzMzMwMTE4M2IxZTkxMzgwMmJjNTcxMGMwY2I1MjE4YWRhMjg", "commit": {"author": {"name": "Michael", "email": "michael.prantl@hotmail.de", "date": "2021-11-26T21:39:44Z"}, "committer": {"name": "Michael", "email": "michael.prantl@hotmail.de", "date": "2021-12-01T21:59:54Z"}, "message": "Improve suggestion for extern crate self error message", "tree": {"sha": "d8245bcf8b925372623abc3f1606a1aaede029a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8245bcf8b925372623abc3f1606a1aaede029a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca933301183b1e913802bc5710c0cb5218ada28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca933301183b1e913802bc5710c0cb5218ada28", "html_url": "https://github.com/rust-lang/rust/commit/2ca933301183b1e913802bc5710c0cb5218ada28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca933301183b1e913802bc5710c0cb5218ada28/comments", "author": {"login": "mjptree", "id": 18014796, "node_id": "MDQ6VXNlcjE4MDE0Nzk2", "avatar_url": "https://avatars.githubusercontent.com/u/18014796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjptree", "html_url": "https://github.com/mjptree", "followers_url": "https://api.github.com/users/mjptree/followers", "following_url": "https://api.github.com/users/mjptree/following{/other_user}", "gists_url": "https://api.github.com/users/mjptree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjptree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjptree/subscriptions", "organizations_url": "https://api.github.com/users/mjptree/orgs", "repos_url": "https://api.github.com/users/mjptree/repos", "events_url": "https://api.github.com/users/mjptree/events{/privacy}", "received_events_url": "https://api.github.com/users/mjptree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjptree", "id": 18014796, "node_id": "MDQ6VXNlcjE4MDE0Nzk2", "avatar_url": "https://avatars.githubusercontent.com/u/18014796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjptree", "html_url": "https://github.com/mjptree", "followers_url": "https://api.github.com/users/mjptree/followers", "following_url": "https://api.github.com/users/mjptree/following{/other_user}", "gists_url": "https://api.github.com/users/mjptree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjptree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjptree/subscriptions", "organizations_url": "https://api.github.com/users/mjptree/orgs", "repos_url": "https://api.github.com/users/mjptree/repos", "events_url": "https://api.github.com/users/mjptree/events{/privacy}", "received_events_url": "https://api.github.com/users/mjptree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "html_url": "https://github.com/rust-lang/rust/commit/62f4ce993e8aa788c8269d75aea2db84cafb1f9f"}], "stats": {"total": 147, "additions": 77, "deletions": 70}, "files": [{"sha": "2626a2e189c1d062cffc8b676e4669b77ab3e433", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -9,7 +9,6 @@ use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::FatalError;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -508,31 +507,22 @@ impl<'a> CrateLoader<'a> {\n         }))\n     }\n \n-    fn resolve_crate_or_abort<'b>(\n-        &'b mut self,\n-        name: Symbol,\n-        span: Span,\n-        dep_kind: CrateDepKind,\n-    ) -> CrateNum {\n-        self.resolve_crate(name, span, dep_kind).unwrap_or_else(|| FatalError.raise())\n-    }\n-\n     fn resolve_crate<'b>(\n         &'b mut self,\n         name: Symbol,\n         span: Span,\n         dep_kind: CrateDepKind,\n     ) -> Option<CrateNum> {\n         self.used_extern_options.insert(name);\n-        self.maybe_resolve_crate(name, dep_kind, None).map_or_else(\n-            |err| {\n+        match self.maybe_resolve_crate(name, dep_kind, None) {\n+            Ok(cnum) => Some(cnum),\n+            Err(err) => {\n                 let missing_core =\n                     self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n                 err.report(&self.sess, span, missing_core);\n                 None\n-            },\n-            |cnum| Some(cnum),\n-        )\n+            }\n+        }\n     }\n \n     fn maybe_resolve_crate<'b>(\n@@ -765,7 +755,7 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n-        let cnum = self.resolve_crate_or_abort(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let Some(cnum) = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit) else { return; };\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -805,7 +795,7 @@ impl<'a> CrateLoader<'a> {\n             );\n         }\n \n-        let cnum = self.resolve_crate_or_abort(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let Some(cnum) = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit) else { return; };\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n@@ -1043,8 +1033,8 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        let cnum = self.resolve_crate_or_abort(name, span, CrateDepKind::Explicit);\n+    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> Option<CrateNum> {\n+        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit)?;\n \n         self.update_extern_crate(\n             cnum,\n@@ -1057,7 +1047,7 @@ impl<'a> CrateLoader<'a> {\n             },\n         );\n \n-        cnum\n+        Some(cnum)\n     }\n \n     pub fn maybe_process_path_extern(&mut self, name: Symbol) -> Option<CrateNum> {"}, {"sha": "e2fd8056f1a7c6a63fe728b6a38c5bd36d9706d8", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -220,7 +220,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, FatalError};\n+use rustc_errors::{struct_span_err, FatalError};\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n@@ -931,8 +931,8 @@ impl fmt::Display for MetadataError<'_> {\n }\n \n impl CrateError {\n-    fn build_diag(self, sess: &Session, span: Span, missing_core: bool) -> DiagnosticBuilder<'_> {\n-        match self {\n+    crate fn report(self, sess: &Session, span: Span, missing_core: bool) {\n+        let mut diag = match self {\n             CrateError::NonAsciiName(crate_name) => sess.struct_span_err(\n                 span,\n                 &format!(\"cannot load a crate with a non-ascii name `{}`\", crate_name),\n@@ -1208,10 +1208,8 @@ impl CrateError {\n                 \"plugin `{}` only found in rlib format, but must be available in dylib format\",\n                 crate_name,\n             ),\n-        }\n-    }\n+        };\n \n-    crate fn report(self, sess: &Session, span: Span, missing_core: bool) {\n-        self.build_diag(sess, span, missing_core).emit();\n+        diag.emit();\n     }\n }"}, {"sha": "c936e08d536a4f16e498a5491292f3f5d8862447", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -840,57 +840,41 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent_scope = self.parent_scope;\n         let expansion = parent_scope.expansion;\n \n-        let module = if orig_name.is_none() && ident.name == kw::SelfLower {\n+        let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {\n             self.r\n                 .session\n                 .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n                 .span_suggestion(\n                     item.span,\n-                    \"try\",\n+                    \"rename the `self` crate to be able to import it\",\n                     \"extern crate self as name;\".into(),\n                     Applicability::HasPlaceholders,\n                 )\n                 .emit();\n             return;\n         } else if orig_name == Some(kw::SelfLower) {\n-            self.r.graph_root\n+            Some(self.r.graph_root)\n         } else {\n-            match self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id)\n-            {\n-                Some(crate_id) => {\n+            self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(\n+                |crate_id| {\n                     self.r.extern_crate_map.insert(local_def_id, crate_id);\n                     self.r.expect_module(crate_id.as_def_id())\n-                }\n-                _ => {\n-                    let dummy_import = self.r.arenas.alloc_import(Import {\n-                        kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n-                        root_id: item.id,\n-                        id: item.id,\n-                        parent_scope: self.parent_scope,\n-                        imported_module: Cell::new(None),\n-                        has_attributes: !item.attrs.is_empty(),\n-                        use_span_with_attributes: item.span_with_attributes(),\n-                        use_span: item.span,\n-                        root_span: item.span,\n-                        span: item.span,\n-                        module_path: Vec::new(),\n-                        vis: Cell::new(vis),\n-                        used: Cell::new(true),\n-                    });\n-                    self.r.import_dummy_binding(dummy_import);\n-                    return;\n-                }\n-            }\n-        };\n-        let used = self.process_macro_use_imports(item, module);\n-        let binding =\n-            (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n+                },\n+            )\n+        }\n+        .map(|module| {\n+            let used = self.process_macro_use_imports(item, module);\n+            let binding =\n+                (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n+            (used, Some(ModuleOrUniformRoot::Module(module)), binding)\n+        })\n+        .unwrap_or((true, None, self.r.dummy_binding));\n         let import = self.r.arenas.alloc_import(Import {\n             kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n             root_id: item.id,\n             id: item.id,\n             parent_scope: self.parent_scope,\n-            imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n+            imported_module: Cell::new(module),\n             has_attributes: !item.attrs.is_empty(),\n             use_span_with_attributes: item.span_with_attributes(),\n             use_span: item.span,"}, {"sha": "bf4cece8bde8d7f563c247fd7927732cb2d752e8", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -600,10 +600,8 @@ impl<'a> Resolver<'a> {\n \n     // Define a \"dummy\" resolution containing a Res::Err as a placeholder for a\n     // failed resolution\n-    crate fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n-        if let ImportKind::Single { target, .. } | ImportKind::ExternCrate { target, .. } =\n-            import.kind\n-        {\n+    fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n+        if let ImportKind::Single { target, .. } = import.kind {\n             let dummy_binding = self.dummy_binding;\n             let dummy_binding = self.import(dummy_binding, import);\n             self.per_ns(|this, ns| {"}, {"sha": "df0dc9307d697a3d4b4395b642d9d61ebb43f804", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -3285,7 +3285,9 @@ impl<'a> Resolver<'a> {\n                 Some(binding)\n             } else {\n                 let crate_id = if !speculative {\n-                    self.crate_loader.process_path_extern(ident.name, ident.span)\n+                    let Some(crate_id) =\n+                        self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };\n+                    crate_id\n                 } else {\n                     self.crate_loader.maybe_process_path_extern(ident.name)?\n                 };"}, {"sha": "aea861e3261b5fc8a19f5be0e18f5b35e371a189", "filename": "src/test/ui/crate-loading/invalid-rlib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -6,3 +6,5 @@\n #![no_std]\n use ::foo; //~ ERROR invalid metadata files for crate `foo`\n //~| NOTE failed to mmap file\n+//~^^ ERROR invalid metadata files for crate `foo`\n+//~| NOTE failed to mmap file"}, {"sha": "3c0d23bf7b4cce575aae1978e32884981535d356", "filename": "src/test/ui/crate-loading/invalid-rlib.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -6,6 +6,14 @@ LL | use ::foo;\n    |\n    = note: failed to mmap file 'auxiliary/libfoo.rlib'\n \n-error: aborting due to previous error\n+error[E0786]: found invalid metadata files for crate `foo`\n+  --> $DIR/invalid-rlib.rs:7:7\n+   |\n+LL | use ::foo;\n+   |       ^^^\n+   |\n+   = note: failed to mmap file 'auxiliary/libfoo.rlib'\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0786`."}, {"sha": "3170537b0e0a088f61916102199d1b5b27c86526", "filename": "src/test/ui/extern-flag/empty-extern-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -1,4 +1,6 @@\n // compile-flags: --extern std=\n // error-pattern: extern location for std does not exist\n+// needs-unwind since it affects the error output\n+// ignore-emscripten compiled with panic=abort, personality not required\n \n fn main() {}"}, {"sha": "a6560ca78624d5294f6539980d107ba0500135a2", "filename": "src/test/ui/extern/extern-crate-multiple-missing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -3,6 +3,8 @@ extern crate bar; //~ ERROR can't find crate for `bar`\n extern crate foo; //~ ERROR can't find crate for `foo`\n \n fn main() {\n+    // If the crate name introduced by `extern crate` failed to resolve then subsequent\n+    // derived paths do not emit additional errors\n     foo::something();\n     bar::something();\n }"}, {"sha": "127765727b401f000058c11cefda55831f9b2fb7", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -2,7 +2,12 @@ error: `extern crate self;` requires renaming\n   --> $DIR/extern-crate-self-fail.rs:1:1\n    |\n LL | extern crate self;\n-   | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+help: rename the `self` crate to be able to import it\n+   |\n+LL | extern crate self as name;\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: `#[macro_use]` is not supported on `extern crate self`\n   --> $DIR/extern-crate-self-fail.rs:3:1"}, {"sha": "2427bde6d18bcbe543e2f92d9101d7a85f3d1a07", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -1,7 +1,8 @@\n // edition:2018\n // compile-flags:--extern foo --extern bar\n \n+use bar::foo; //~ ERROR can't find crate for `bar`\n use foo::bar; //~ ERROR can't find crate for `foo`\n-use bar::foo;\n+//~^^ ERROR unresolved imports `bar::foo`, `foo::bar`\n \n fn main() {}"}, {"sha": "8b9863948bd6cd9cd076df02214ec65b7bb906aa", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ca933301183b1e913802bc5710c0cb5218ada28/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr?ref=2ca933301183b1e913802bc5710c0cb5218ada28", "patch": "@@ -1,9 +1,24 @@\n-error[E0463]: can't find crate for `foo`\n+error[E0463]: can't find crate for `bar`\n   --> $DIR/deadlock.rs:4:5\n    |\n+LL | use bar::foo;\n+   |     ^^^ can't find crate\n+\n+error[E0463]: can't find crate for `foo`\n+  --> $DIR/deadlock.rs:5:5\n+   |\n LL | use foo::bar;\n    |     ^^^ can't find crate\n \n-error: aborting due to previous error\n+error[E0432]: unresolved imports `bar::foo`, `foo::bar`\n+  --> $DIR/deadlock.rs:4:5\n+   |\n+LL | use bar::foo;\n+   |     ^^^^^^^^\n+LL | use foo::bar;\n+   |     ^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0463`.\n+Some errors have detailed explanations: E0432, E0463.\n+For more information about an error, try `rustc --explain E0432`."}]}