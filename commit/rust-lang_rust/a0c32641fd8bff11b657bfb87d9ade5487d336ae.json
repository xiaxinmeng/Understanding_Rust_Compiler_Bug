{"sha": "a0c32641fd8bff11b657bfb87d9ade5487d336ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzMyNjQxZmQ4YmZmMTFiNjU3YmZiODdkOWFkZTU0ODdkMzM2YWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-08-29T22:41:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-08-29T22:41:05Z"}, "message": "Make fields of `Span` public again\n\nThis helps to avoid landing changes to rustc and rustfmt in one step", "tree": {"sha": "ecab731f486ee5fb5cd5dbf768a5e47689764ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecab731f486ee5fb5cd5dbf768a5e47689764ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c32641fd8bff11b657bfb87d9ade5487d336ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c32641fd8bff11b657bfb87d9ade5487d336ae", "html_url": "https://github.com/rust-lang/rust/commit/a0c32641fd8bff11b657bfb87d9ade5487d336ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c32641fd8bff11b657bfb87d9ade5487d336ae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71dfe6487d8e7733c293db49124afc85108727d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/71dfe6487d8e7733c293db49124afc85108727d4", "html_url": "https://github.com/rust-lang/rust/commit/71dfe6487d8e7733c293db49124afc85108727d4"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "24842ff29d4281fb967cedabfca1b8909b1c46e2", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0c32641fd8bff11b657bfb87d9ade5487d336ae/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c32641fd8bff11b657bfb87d9ade5487d336ae/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=a0c32641fd8bff11b657bfb87d9ade5487d336ae", "patch": "@@ -25,6 +25,7 @@\n #![feature(optin_builtin_traits)]\n #![allow(unused_attributes)]\n #![feature(specialization)]\n+#![feature(staged_api)]\n \n use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n@@ -60,13 +61,20 @@ pub type FileName = String;\n /// range between files.\n #[derive(Clone, Copy, Hash, PartialEq, Eq, Ord, PartialOrd)]\n pub struct Span {\n-    lo: BytePos,\n-    hi: BytePos,\n+    #[unstable(feature = \"rustc_private\", issue = \"27812\")]\n+    #[rustc_deprecated(since = \"1.21\", reason = \"use getters/setters instead\")]\n+    pub lo: BytePos,\n+    #[unstable(feature = \"rustc_private\", issue = \"27812\")]\n+    #[rustc_deprecated(since = \"1.21\", reason = \"use getters/setters instead\")]\n+    pub hi: BytePos,\n     /// Information about where the macro came from, if this piece of\n     /// code was created by a macro expansion.\n-    ctxt: SyntaxContext,\n+    #[unstable(feature = \"rustc_private\", issue = \"27812\")]\n+    #[rustc_deprecated(since = \"1.21\", reason = \"use getters/setters instead\")]\n+    pub ctxt: SyntaxContext,\n }\n \n+#[allow(deprecated)]\n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), ctxt: NO_EXPANSION };\n \n /// A collection of spans. Spans have two orthogonal attributes:\n@@ -82,11 +90,13 @@ pub struct MultiSpan {\n }\n \n impl Span {\n+    #[allow(deprecated)]\n     #[inline]\n     pub fn new(lo: BytePos, hi: BytePos, ctxt: SyntaxContext) -> Self {\n         if lo <= hi { Span { lo, hi, ctxt } } else { Span { lo: hi, hi: lo, ctxt } }\n     }\n \n+    #[allow(deprecated)]\n     #[inline]\n     pub fn lo(self) -> BytePos {\n         self.lo\n@@ -95,6 +105,7 @@ impl Span {\n     pub fn with_lo(self, lo: BytePos) -> Span {\n         Span::new(lo, self.hi(), self.ctxt())\n     }\n+    #[allow(deprecated)]\n     #[inline]\n     pub fn hi(self) -> BytePos {\n         self.hi\n@@ -103,6 +114,7 @@ impl Span {\n     pub fn with_hi(self, hi: BytePos) -> Span {\n         Span::new(self.lo(), hi, self.ctxt())\n     }\n+    #[allow(deprecated)]\n     #[inline]\n     pub fn ctxt(self) -> SyntaxContext {\n         self.ctxt"}]}