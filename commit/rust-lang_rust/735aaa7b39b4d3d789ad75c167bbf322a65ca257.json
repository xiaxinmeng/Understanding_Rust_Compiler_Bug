{"sha": "735aaa7b39b4d3d789ad75c167bbf322a65ca257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNWFhYTdiMzliNGQzZDc4OWFkNzVjMTY3YmJmMzIyYTY1Y2EyNTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T17:54:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T17:54:01Z"}, "message": "Move int parsing to IntNumber token", "tree": {"sha": "865daba83547042e2aed9cc412382fd646a5a158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865daba83547042e2aed9cc412382fd646a5a158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735aaa7b39b4d3d789ad75c167bbf322a65ca257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735aaa7b39b4d3d789ad75c167bbf322a65ca257", "html_url": "https://github.com/rust-lang/rust/commit/735aaa7b39b4d3d789ad75c167bbf322a65ca257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735aaa7b39b4d3d789ad75c167bbf322a65ca257/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcc33e5b7e32a79865be4893fcc33caf8d831d6", "html_url": "https://github.com/rust-lang/rust/commit/6bcc33e5b7e32a79865be4893fcc33caf8d831d6"}], "stats": {"total": 169, "additions": 92, "deletions": 77}, "files": [{"sha": "6d477c045e4df4757269c85fa4ef61f5b230b0ee", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=735aaa7b39b4d3d789ad75c167bbf322a65ca257", "patch": "@@ -15,7 +15,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // ```\n pub(crate) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let literal = ctx.find_node_at_offset::<ast::Literal>()?;\n-    let (radix, value) = literal.int_value()?;\n+    let (radix, value) = literal.as_int_number()?.value()?;\n \n     let range = literal.syntax().text_range();\n     let group_id = GroupLabel(\"Convert integer base\".into());"}, {"sha": "8a0e3d27b21ab6647ed0229cbafccf0c9717c05a", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=735aaa7b39b4d3d789ad75c167bbf322a65ca257", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, Radix, RangeOp},\n+    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,"}, {"sha": "3d33cd1cf7955cb5928c182c4a784bf1cffbac99", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 12, "deletions": 75, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=735aaa7b39b4d3d789ad75c167bbf322a65ca257", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n-    SmolStr,\n+    AstToken, SmolStr,\n     SyntaxKind::*,\n     SyntaxToken, T,\n };\n@@ -316,6 +316,10 @@ impl ast::Literal {\n             .unwrap()\n     }\n \n+    pub fn as_int_number(&self) -> Option<ast::IntNumber> {\n+        ast::IntNumber::cast(self.token())\n+    }\n+\n     fn find_suffix(text: &str, possible_suffixes: &[&str]) -> Option<SmolStr> {\n         possible_suffixes\n             .iter()\n@@ -324,11 +328,6 @@ impl ast::Literal {\n     }\n \n     pub fn kind(&self) -> LiteralKind {\n-        const INT_SUFFIXES: [&str; 12] = [\n-            \"u64\", \"u32\", \"u16\", \"u8\", \"usize\", \"isize\", \"i64\", \"i32\", \"i16\", \"i8\", \"u128\", \"i128\",\n-        ];\n-        const FLOAT_SUFFIXES: [&str; 2] = [\"f32\", \"f64\"];\n-\n         let token = self.token();\n \n         match token.kind() {\n@@ -337,17 +336,20 @@ impl ast::Literal {\n                 // The lexer treats e.g. `1f64` as an integer literal. See\n                 // https://github.com/rust-analyzer/rust-analyzer/issues/1592\n                 // and the comments on the linked PR.\n-\n                 let text = token.text();\n-                if let suffix @ Some(_) = Self::find_suffix(&text, &FLOAT_SUFFIXES) {\n+                if let suffix @ Some(_) = Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES) {\n                     LiteralKind::FloatNumber { suffix }\n                 } else {\n-                    LiteralKind::IntNumber { suffix: Self::find_suffix(&text, &INT_SUFFIXES) }\n+                    LiteralKind::IntNumber {\n+                        suffix: Self::find_suffix(&text, &ast::IntNumber::SUFFIXES),\n+                    }\n                 }\n             }\n             FLOAT_NUMBER => {\n                 let text = token.text();\n-                LiteralKind::FloatNumber { suffix: Self::find_suffix(&text, &FLOAT_SUFFIXES) }\n+                LiteralKind::FloatNumber {\n+                    suffix: Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES),\n+                }\n             }\n             STRING | RAW_STRING => LiteralKind::String,\n             T![true] => LiteralKind::Bool(true),\n@@ -358,71 +360,6 @@ impl ast::Literal {\n             _ => unreachable!(),\n         }\n     }\n-\n-    // FIXME: should probably introduce string token type?\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/6308\n-    pub fn int_value(&self) -> Option<(Radix, u128)> {\n-        let suffix = match self.kind() {\n-            LiteralKind::IntNumber { suffix } => suffix,\n-            _ => return None,\n-        };\n-\n-        let token = self.token();\n-        let mut text = token.text().as_str();\n-        text = &text[..text.len() - suffix.map_or(0, |it| it.len())];\n-\n-        let buf;\n-        if text.contains(\"_\") {\n-            buf = text.replace('_', \"\");\n-            text = buf.as_str();\n-        };\n-\n-        let radix = Radix::identify(text)?;\n-        let digits = &text[radix.prefix_len()..];\n-        let value = u128::from_str_radix(digits, radix as u32).ok()?;\n-        Some((radix, value))\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n-pub enum Radix {\n-    Binary = 2,\n-    Octal = 8,\n-    Decimal = 10,\n-    Hexadecimal = 16,\n-}\n-\n-impl Radix {\n-    pub const ALL: &'static [Radix] =\n-        &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n-\n-    fn identify(literal_text: &str) -> Option<Self> {\n-        // We cannot express a literal in anything other than decimal in under 3 characters, so we return here if possible.\n-        if literal_text.len() < 3 && literal_text.chars().all(|c| c.is_digit(10)) {\n-            return Some(Self::Decimal);\n-        }\n-\n-        let res = match &literal_text[..2] {\n-            \"0b\" => Radix::Binary,\n-            \"0o\" => Radix::Octal,\n-            \"0x\" => Radix::Hexadecimal,\n-            _ => Radix::Decimal,\n-        };\n-\n-        // Checks that all characters after the base prefix are all valid digits for that base.\n-        if literal_text[res.prefix_len()..].chars().all(|c| c.is_digit(res as u32)) {\n-            Some(res)\n-        } else {\n-            None\n-        }\n-    }\n-\n-    const fn prefix_len(&self) -> usize {\n-        match self {\n-            Self::Decimal => 0,\n-            _ => 2,\n-        }\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "5623799b47503d41f3b359623e1db2fd84f26f1e", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735aaa7b39b4d3d789ad75c167bbf322a65ca257/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=735aaa7b39b4d3d789ad75c167bbf322a65ca257", "patch": "@@ -536,3 +536,81 @@ impl HasFormatSpecifier for ast::RawString {\n         Some(res)\n     }\n }\n+\n+impl ast::IntNumber {\n+    #[rustfmt::skip]\n+    pub(crate) const SUFFIXES: &'static [&'static str] = &[\n+        \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\",\n+        \"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\",\n+    ];\n+\n+    // FIXME: should probably introduce string token type?\n+    // https://github.com/rust-analyzer/rust-analyzer/issues/6308\n+    pub fn value(&self) -> Option<(Radix, u128)> {\n+        let token = self.syntax();\n+\n+        let mut text = token.text().as_str();\n+        for suffix in ast::IntNumber::SUFFIXES {\n+            if let Some(without_suffix) = text.strip_suffix(suffix) {\n+                text = without_suffix;\n+                break;\n+            }\n+        }\n+\n+        let buf;\n+        if text.contains(\"_\") {\n+            buf = text.replace('_', \"\");\n+            text = buf.as_str();\n+        };\n+\n+        let radix = Radix::identify(text)?;\n+        let digits = &text[radix.prefix_len()..];\n+        let value = u128::from_str_radix(digits, radix as u32).ok()?;\n+        Some((radix, value))\n+    }\n+}\n+\n+impl ast::FloatNumber {\n+    pub(crate) const SUFFIXES: &'static [&'static str] = &[\"f32\", \"f64\"];\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+pub enum Radix {\n+    Binary = 2,\n+    Octal = 8,\n+    Decimal = 10,\n+    Hexadecimal = 16,\n+}\n+\n+impl Radix {\n+    pub const ALL: &'static [Radix] =\n+        &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n+\n+    fn identify(literal_text: &str) -> Option<Self> {\n+        // We cannot express a literal in anything other than decimal in under 3 characters, so we return here if possible.\n+        if literal_text.len() < 3 && literal_text.chars().all(|c| c.is_digit(10)) {\n+            return Some(Self::Decimal);\n+        }\n+\n+        let res = match &literal_text[..2] {\n+            \"0b\" => Radix::Binary,\n+            \"0o\" => Radix::Octal,\n+            \"0x\" => Radix::Hexadecimal,\n+            _ => Radix::Decimal,\n+        };\n+\n+        // Checks that all characters after the base prefix are all valid digits for that base.\n+        if literal_text[res.prefix_len()..].chars().all(|c| c.is_digit(res as u32)) {\n+            Some(res)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    const fn prefix_len(&self) -> usize {\n+        match self {\n+            Self::Decimal => 0,\n+            _ => 2,\n+        }\n+    }\n+}"}]}