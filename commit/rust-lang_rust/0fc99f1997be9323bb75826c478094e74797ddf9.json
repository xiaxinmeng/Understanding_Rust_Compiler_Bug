{"sha": "0fc99f1997be9323bb75826c478094e74797ddf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYzk5ZjE5OTdiZTkzMjNiYjc1ODI2YzQ3ODA5NGU3NDc5N2RkZjk=", "commit": {"author": {"name": "Jordi Boggiano", "email": "j.boggiano@seld.be", "date": "2013-06-30T18:12:04Z"}, "committer": {"name": "Jordi Boggiano", "email": "j.boggiano@seld.be", "date": "2013-06-30T23:50:27Z"}, "message": "Add an EnumSetIterator and EnumSet::iter", "tree": {"sha": "a002976e84ed87aa98a694936f9aaf8ccc2c63ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a002976e84ed87aa98a694936f9aaf8ccc2c63ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc99f1997be9323bb75826c478094e74797ddf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc99f1997be9323bb75826c478094e74797ddf9", "html_url": "https://github.com/rust-lang/rust/commit/0fc99f1997be9323bb75826c478094e74797ddf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc99f1997be9323bb75826c478094e74797ddf9/comments", "author": {"login": "Seldaek", "id": 183678, "node_id": "MDQ6VXNlcjE4MzY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seldaek", "html_url": "https://github.com/Seldaek", "followers_url": "https://api.github.com/users/Seldaek/followers", "following_url": "https://api.github.com/users/Seldaek/following{/other_user}", "gists_url": "https://api.github.com/users/Seldaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seldaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seldaek/subscriptions", "organizations_url": "https://api.github.com/users/Seldaek/orgs", "repos_url": "https://api.github.com/users/Seldaek/repos", "events_url": "https://api.github.com/users/Seldaek/events{/privacy}", "received_events_url": "https://api.github.com/users/Seldaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Seldaek", "id": 183678, "node_id": "MDQ6VXNlcjE4MzY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seldaek", "html_url": "https://github.com/Seldaek", "followers_url": "https://api.github.com/users/Seldaek/followers", "following_url": "https://api.github.com/users/Seldaek/following{/other_user}", "gists_url": "https://api.github.com/users/Seldaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seldaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seldaek/subscriptions", "organizations_url": "https://api.github.com/users/Seldaek/orgs", "repos_url": "https://api.github.com/users/Seldaek/repos", "events_url": "https://api.github.com/users/Seldaek/events{/privacy}", "received_events_url": "https://api.github.com/users/Seldaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca835f482cebcd353db789e45f9cec72db1a24ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca835f482cebcd353db789e45f9cec72db1a24ed", "html_url": "https://github.com/rust-lang/rust/commit/ca835f482cebcd353db789e45f9cec72db1a24ed"}], "stats": {"total": 92, "additions": 83, "deletions": 9}, "files": [{"sha": "7f29ce98b3ec1d92a56c0a7e347450115afda4c0", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 83, "deletions": 9, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0fc99f1997be9323bb75826c478094e74797ddf9/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc99f1997be9323bb75826c478094e74797ddf9/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=0fc99f1997be9323bb75826c478094e74797ddf9", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::iterator::Iterator;\n \n #[deriving(Eq, IterBytes)]\n pub struct EnumSet<E> {\n@@ -73,6 +74,10 @@ impl<E:CLike> EnumSet<E> {\n         }\n         return true;\n     }\n+\n+    pub fn iter(&self) -> EnumSetIterator<E> {\n+        EnumSetIterator::new(self.bits)\n+    }\n }\n \n impl<E:CLike> Sub<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n@@ -93,6 +98,39 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n     }\n }\n \n+pub struct EnumSetIterator<E> {\n+    priv index: uint,\n+    priv bits: uint,\n+}\n+\n+impl<E:CLike> EnumSetIterator<E> {\n+    fn new(bits: uint) -> EnumSetIterator<E> {\n+        EnumSetIterator { index: 0, bits: bits }\n+    }\n+}\n+\n+impl<E:CLike> Iterator<E> for EnumSetIterator<E> {\n+    fn next(&mut self) -> Option<E> {\n+        if (self.bits == 0) {\n+            return None;\n+        }\n+\n+        while (self.bits & 1) == 0 {\n+            self.index += 1;\n+            self.bits >>= 1;\n+        }\n+        let elem = CLike::from_uint(self.index);\n+        self.index += 1;\n+        self.bits >>= 1;\n+        Some(elem)\n+    }\n+\n+    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+        let exact = Some(self.bits.population_count());\n+        (exact, exact)\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n \n@@ -199,25 +237,58 @@ mod test {\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n-    // each\n+    // iterator\n+\n+    #[test]\n+    fn test_iterator() {\n+        let mut e1: EnumSet<Foo> = EnumSet::empty();\n+\n+        let elems: ~[Foo] = e1.iter().collect();\n+        assert_eq!(~[], elems)\n+\n+        e1.add(A);\n+        let elems: ~[Foo] = e1.iter().collect();\n+        assert_eq!(~[A], elems)\n+\n+        e1.add(C);\n+        let elems: ~[Foo] = e1.iter().collect();\n+        assert_eq!(~[A,C], elems)\n+\n+        e1.add(C);\n+        let elems: ~[Foo] = e1.iter().collect();\n+        assert_eq!(~[A,C], elems)\n+\n+        e1.add(B);\n+        let elems: ~[Foo] = e1.iter().collect();\n+        assert_eq!(~[A,B,C], elems)\n+    }\n+\n+    fn collect(e: EnumSet<Foo>) -> ~[Foo] {\n+        let mut elems = ~[];\n+        e.each(|elem| {\n+           elems.push(elem);\n+           true\n+        });\n+        elems\n+    }\n \n     #[test]\n     fn test_each() {\n         let mut e1: EnumSet<Foo> = EnumSet::empty();\n \n-        assert_eq!(~[], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n+        assert_eq!(~[], collect(e1))\n \n         e1.add(A);\n-        assert_eq!(~[A], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n+        assert_eq!(~[A], collect(e1))\n \n         e1.add(C);\n-        assert_eq!(~[A,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n+        assert_eq!(~[A,C], collect(e1))\n \n         e1.add(C);\n-        assert_eq!(~[A,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n+        assert_eq!(~[A,C], collect(e1))\n \n         e1.add(B);\n-        assert_eq!(~[A,B,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e1.each(f)))\n+        assert_eq!(~[A,B,C], collect(e1))\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -234,12 +305,15 @@ mod test {\n         e2.add(C);\n \n         let e_union = e1 | e2;\n-        assert_eq!(~[A,B,C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_union.each(f)))\n+        let elems: ~[Foo] = e_union.iter().collect();\n+        assert_eq!(~[A,B,C], elems)\n \n         let e_intersection = e1 & e2;\n-        assert_eq!(~[C], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_intersection.each(f)))\n+        let elems: ~[Foo] = e_intersection.iter().collect();\n+        assert_eq!(~[C], elems)\n \n         let e_subtract = e1 - e2;\n-        assert_eq!(~[A], iter::FromIter::from_iter::<Foo, ~[Foo]>(|f| e_subtract.each(f)))\n+        let elems: ~[Foo] = e_subtract.iter().collect();\n+        assert_eq!(~[A], elems)\n     }\n }"}]}