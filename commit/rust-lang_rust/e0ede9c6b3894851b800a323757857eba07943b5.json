{"sha": "e0ede9c6b3894851b800a323757857eba07943b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWRlOWM2YjM4OTQ4NTFiODAwYTMyMzc1Nzg1N2ViYTA3OTQzYjU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-07-10T21:19:17Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-07-13T19:52:51Z"}, "message": "Stabilization for `owned` (now `boxed`) and `cell`\n\nThis PR is the outcome of the library stabilization meeting for the\n`liballoc::owned` and `libcore::cell` modules.\n\nAside from the stability attributes, there are a few breaking changes:\n\n* The `owned` modules is now named `boxed`, to better represent its\n  contents. (`box` was unavailable, since it's a keyword.) This will\n  help avoid the misconception that `Box` plays a special role wrt\n  ownership.\n\n* The `AnyOwnExt` extension trait is renamed to `BoxAny`, and its `move`\n  method is renamed to `downcast`, in both cases to improve clarity.\n\n* The recently-added `AnySendOwnExt` extension trait is removed; it was\n  not being used and is unnecessary.\n\n[breaking-change]", "tree": {"sha": "0b97e02f7dad2e56cced3dbf1542b924bd6cfa1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b97e02f7dad2e56cced3dbf1542b924bd6cfa1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ede9c6b3894851b800a323757857eba07943b5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ede9c6b3894851b800a323757857eba07943b5", "html_url": "https://github.com/rust-lang/rust/commit/e0ede9c6b3894851b800a323757857eba07943b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ede9c6b3894851b800a323757857eba07943b5/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b57d272e9908e164a72bd1a688141031705e1208", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57d272e9908e164a72bd1a688141031705e1208", "html_url": "https://github.com/rust-lang/rust/commit/b57d272e9908e164a72bd1a688141031705e1208"}], "stats": {"total": 219, "additions": 112, "deletions": 107}, "files": [{"sha": "56506d798d9df3335f70ad6abe8f56bf8b9e76db", "filename": "src/liballoc/boxed.rs", "status": "renamed", "additions": 19, "deletions": 40, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -16,7 +16,6 @@ use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::intrinsics;\n-use core::kinds::Send;\n use core::mem;\n use core::option::Option;\n use core::raw::TraitObject;\n@@ -27,17 +26,19 @@ use core::result::{Ok, Err, Result};\n ///\n /// The following two examples are equivalent:\n ///\n-///     use std::owned::HEAP;\n+///     use std::boxed::HEAP;\n ///\n ///     # struct Bar;\n ///     # impl Bar { fn new(_a: int) { } }\n ///     let foo = box(HEAP) Bar::new(2);\n ///     let foo = box Bar::new(2);\n-#[lang=\"exchange_heap\"]\n+#[lang = \"exchange_heap\"]\n+#[experimental = \"may be renamed; uncertain about custom allocator design\"]\n pub static HEAP: () = ();\n \n /// A type that represents a uniquely-owned value.\n-#[lang=\"owned_box\"]\n+#[lang = \"owned_box\"]\n+#[unstable = \"custom allocators will add an additional type parameter (with default)\"]\n pub struct Box<T>(*mut T);\n \n impl<T: Default> Default for Box<T> {\n@@ -57,7 +58,6 @@ impl<T: Clone> Clone for Box<T> {\n     }\n }\n \n-// box pointers\n impl<T:PartialEq> PartialEq for Box<T> {\n     #[inline]\n     fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n@@ -85,48 +85,27 @@ impl<T: Ord> Ord for Box<T> {\n impl<T: Eq> Eq for Box<T> {}\n \n /// Extension methods for an owning `Any` trait object\n-pub trait AnyOwnExt {\n+#[unstable = \"post-DST, the signature of `downcast` will change to take `Box<Self>`\"]\n+pub trait BoxAny {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't.\n-    fn move<T: 'static>(self) -> Result<Box<T>, Self>;\n-}\n-\n-impl AnyOwnExt for Box<Any> {\n-    #[inline]\n-    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject =\n-                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n-\n-                // Prevent destructor on self being run\n-                intrinsics::forget(self);\n+    fn downcast<T: 'static>(self) -> Result<Box<T>, Self>;\n \n-                // Extract the data pointer\n-                Ok(mem::transmute(to.data))\n-            }\n-        } else {\n-            Err(self)\n-        }\n+    /// Deprecated; this method has been renamed to `downcast`.\n+    #[deprecated = \"use downcast instead\"]\n+    fn move<T: 'static>(self) -> Result<Box<T>, Self> {\n+        self.downcast::<T>()\n     }\n }\n \n-/// Extension methods for an owning `Any+Send` trait object\n-pub trait AnySendOwnExt {\n-    /// Returns the boxed value if it is of type `T`, or\n-    /// `Err(Self)` if it isn't.\n-    fn move_send<T: 'static>(self) -> Result<Box<T>, Self>;\n-}\n-\n-impl AnySendOwnExt for Box<Any+Send> {\n+impl BoxAny for Box<Any> {\n     #[inline]\n-    fn move_send<T: 'static>(self) -> Result<Box<T>, Box<Any+Send>> {\n+    fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n                 let to: TraitObject =\n-                    *mem::transmute::<&Box<Any+Send>, &TraitObject>(&self);\n+                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n \n                 // Prevent destructor on self being run\n                 intrinsics::forget(self);\n@@ -166,20 +145,20 @@ mod test {\n         let a = box 8u as Box<Any>;\n         let b = box Test as Box<Any>;\n \n-        match a.move::<uint>() {\n+        match a.downcast::<uint>() {\n             Ok(a) => { assert!(a == box 8u); }\n             Err(..) => fail!()\n         }\n-        match b.move::<Test>() {\n+        match b.downcast::<Test>() {\n             Ok(a) => { assert!(a == box Test); }\n             Err(..) => fail!()\n         }\n \n         let a = box 8u as Box<Any>;\n         let b = box Test as Box<Any>;\n \n-        assert!(a.move::<Box<Test>>().is_err());\n-        assert!(b.move::<Box<uint>>().is_err());\n+        assert!(a.downcast::<Box<Test>>().is_err());\n+        assert!(b.downcast::<Box<uint>>().is_err());\n     }\n \n     #[test]", "previous_filename": "src/liballoc/owned.rs"}, {"sha": "6ae91f3897104bddcbf7ae9e17c64c520c5e58cd", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -21,11 +21,11 @@\n //!\n //! Currently, there are four major definitions in this library.\n //!\n-//! ## Owned pointers\n+//! ## Boxed values\n //!\n-//! The [`Box`](owned/index.html) type is the core owned pointer type in rust.\n+//! The [`Box`](boxed/index.html) type is the core owned pointer type in rust.\n //! There can only be one owner of a `Box`, and the owner can decide to mutate\n-//! the contents.\n+//! the contents, which live on the heap.\n //!\n //! This type can be sent among tasks efficiently as the size of a `Box` value\n //! is just a pointer. Tree-like data structures are often built on owned\n@@ -82,6 +82,12 @@ extern crate libc;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n+// The deprecated name of the boxed module\n+\n+#[deprecated = \"use boxed instead\"]\n+#[cfg(not(test))]\n+pub use owned = boxed;\n+\n // Heaps provided for low-level allocation strategies\n \n pub mod heap;\n@@ -91,7 +97,7 @@ pub mod util;\n // Primitive types using the heaps above\n \n #[cfg(not(test))]\n-pub mod owned;\n+pub mod boxed;\n pub mod arc;\n pub mod rc;\n "}, {"sha": "6ee68f74438fecc08460858d83abdcb1ea589310", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -20,7 +20,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::fmt;\n use core::fmt::Show;\n "}, {"sha": "226dd5a2356c93415db75bc49d2aa0b7d6a7b22c", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -23,7 +23,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::default::Default;\n use core::fmt;\n use core::iter;"}, {"sha": "357383207150ea047c70ca8989eadc453f40a171", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -65,7 +65,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use alloc::rc::Rc;\n use core::intrinsics::TypeId;\n use core::mem;"}, {"sha": "bb596530d4ab85008371f417132b13bc7ea86c23", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -14,7 +14,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::default::Default;\n use core::fmt;\n use core::fmt::Show;"}, {"sha": "29ec85590b32044a14d900e7a92ffae09bc1230f", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -12,7 +12,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::default::Default;\n use core::mem::zeroed;\n use core::mem;"}, {"sha": "51b5d0aded800b2fd6ec3fbc0d9c72856e3fb693", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -163,11 +163,13 @@ use option::{None, Option, Some};\n use ty::Unsafe;\n \n /// A mutable memory location that admits only `Copy` data.\n+#[unstable = \"likely to be renamed; otherwise stable\"]\n pub struct Cell<T> {\n     value: Unsafe<T>,\n     noshare: marker::NoShare,\n }\n \n+#[stable]\n impl<T:Copy> Cell<T> {\n     /// Creates a new `Cell` containing the given value.\n     pub fn new(value: T) -> Cell<T> {\n@@ -192,20 +194,22 @@ impl<T:Copy> Cell<T> {\n     }\n }\n \n-#[unstable]\n+#[unstable = \"waiting for `Clone` trait to become stable\"]\n impl<T:Copy> Clone for Cell<T> {\n     fn clone(&self) -> Cell<T> {\n         Cell::new(self.get())\n     }\n }\n \n+#[unstable = \"waiting for `PartialEq` trait to become stable\"]\n impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n     fn eq(&self, other: &Cell<T>) -> bool {\n         self.get() == other.get()\n     }\n }\n \n /// A mutable memory location with dynamically checked borrow rules\n+#[unstable = \"likely to be renamed; otherwise stable\"]\n pub struct RefCell<T> {\n     value: Unsafe<T>,\n     borrow: Cell<BorrowFlag>,\n@@ -221,6 +225,7 @@ static WRITING: BorrowFlag = -1;\n \n impl<T> RefCell<T> {\n     /// Create a new `RefCell` containing `value`\n+    #[stable]\n     pub fn new(value: T) -> RefCell<T> {\n         RefCell {\n             value: Unsafe::new(value),\n@@ -231,6 +236,7 @@ impl<T> RefCell<T> {\n     }\n \n     /// Consumes the `RefCell`, returning the wrapped value.\n+    #[unstable = \"may be renamed, depending on global conventions\"]\n     pub fn unwrap(self) -> T {\n         debug_assert!(self.borrow.get() == UNUSED);\n         unsafe{self.value.unwrap()}\n@@ -242,6 +248,7 @@ impl<T> RefCell<T> {\n     /// immutable borrows can be taken out at the same time.\n     ///\n     /// Returns `None` if the value is currently mutably borrowed.\n+    #[unstable = \"may be renamed, depending on global conventions\"]\n     pub fn try_borrow<'a>(&'a self) -> Option<Ref<'a, T>> {\n         match self.borrow.get() {\n             WRITING => None,\n@@ -260,6 +267,7 @@ impl<T> RefCell<T> {\n     /// # Failure\n     ///\n     /// Fails if the value is currently mutably borrowed.\n+    #[unstable]\n     pub fn borrow<'a>(&'a self) -> Ref<'a, T> {\n         match self.try_borrow() {\n             Some(ptr) => ptr,\n@@ -273,6 +281,7 @@ impl<T> RefCell<T> {\n     /// cannot be borrowed while this borrow is active.\n     ///\n     /// Returns `None` if the value is currently borrowed.\n+    #[unstable = \"may be renamed, depending on global conventions\"]\n     pub fn try_borrow_mut<'a>(&'a self) -> Option<RefMut<'a, T>> {\n         match self.borrow.get() {\n             UNUSED => {\n@@ -291,6 +300,7 @@ impl<T> RefCell<T> {\n     /// # Failure\n     ///\n     /// Fails if the value is currently borrowed.\n+    #[unstable]\n     pub fn borrow_mut<'a>(&'a self) -> RefMut<'a, T> {\n         match self.try_borrow_mut() {\n             Some(ptr) => ptr,\n@@ -299,27 +309,30 @@ impl<T> RefCell<T> {\n     }\n }\n \n-#[unstable]\n+#[unstable = \"waiting for `Clone` to become stable\"]\n impl<T: Clone> Clone for RefCell<T> {\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())\n     }\n }\n \n+#[unstable = \"waiting for `PartialEq` to become stable\"]\n impl<T: PartialEq> PartialEq for RefCell<T> {\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n     }\n }\n \n /// Wraps a borrowed reference to a value in a `RefCell` box.\n+#[unstable]\n pub struct Ref<'b, T> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _parent: &'b RefCell<T>\n }\n \n #[unsafe_destructor]\n+#[unstable]\n impl<'b, T> Drop for Ref<'b, T> {\n     fn drop(&mut self) {\n         let borrow = self._parent.borrow.get();\n@@ -328,6 +341,7 @@ impl<'b, T> Drop for Ref<'b, T> {\n     }\n }\n \n+#[unstable = \"waiting for `Deref` to become stable\"]\n impl<'b, T> Deref<T> for Ref<'b, T> {\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n@@ -341,7 +355,7 @@ impl<'b, T> Deref<T> for Ref<'b, T> {\n ///\n /// A `Clone` implementation would interfere with the widespread\n /// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n-#[experimental]\n+#[experimental = \"likely to be moved to a method, pending language changes\"]\n pub fn clone_ref<'b, T>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n     // Since this Ref exists, we know the borrow flag\n     // is not set to WRITING.\n@@ -355,13 +369,15 @@ pub fn clone_ref<'b, T>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n }\n \n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n+#[unstable]\n pub struct RefMut<'b, T> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _parent: &'b RefCell<T>\n }\n \n #[unsafe_destructor]\n+#[unstable]\n impl<'b, T> Drop for RefMut<'b, T> {\n     fn drop(&mut self) {\n         let borrow = self._parent.borrow.get();\n@@ -370,13 +386,15 @@ impl<'b, T> Drop for RefMut<'b, T> {\n     }\n }\n \n+#[unstable = \"waiting for `Deref` to become stable\"]\n impl<'b, T> Deref<T> for RefMut<'b, T> {\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n         unsafe { &*self._parent.value.get() }\n     }\n }\n \n+#[unstable = \"waiting for `DerefMut` to become stable\"]\n impl<'b, T> DerefMut<T> for RefMut<'b, T> {\n     #[inline]\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {"}, {"sha": "af6de0cf605a204119deefbe2ebf8b683d8c2cb1", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -45,7 +45,7 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n mod imp {\n     use core::prelude::*;\n \n-    use alloc::owned::Box;\n+    use alloc::boxed::Box;\n     use collections::vec::Vec;\n     use core::mem;\n     use core::slice;"}, {"sha": "1faf492e498ace09860dd8fc0ccd65091c892a82", "filename": "src/librustrt/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fat_exit_imp.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -14,7 +14,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use collections::vec::Vec;\n use core::atomics;\n use core::mem;"}, {"sha": "0b611381aa2de90f7b12b29d62e6c663643218e8", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -37,7 +37,7 @@ pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::any::Any;\n \n use task::{Task, BlockedTask, TaskOpts};"}, {"sha": "bdb1c60b6d6f8db7acedcbb32d2aeb0d1ffe3f49", "filename": "src/librustrt/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -10,7 +10,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use local_ptr;\n use task::Task;\n "}, {"sha": "ace53478d0a034b5b2aa329318b1d2a0f31ef710", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -40,7 +40,7 @@ assert_eq!(*key_vector.get().unwrap(), vec![4]);\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use collections::vec::Vec;\n use core::kinds::marker;\n use core::mem;"}, {"sha": "c94e5c6187b3a93e308801b3ea0feb21c64a617e", "filename": "src/librustrt/local_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_ptr.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -20,7 +20,7 @@\n use core::prelude::*;\n \n use core::mem;\n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n \n #[cfg(windows)]               // mingw-w32 doesn't like thread_local things\n #[cfg(target_os = \"android\")] // see #10686\n@@ -86,7 +86,7 @@ pub unsafe fn borrow<T>() -> Borrowed<T> {\n pub mod compiled {\n     use core::prelude::*;\n \n-    use alloc::owned::Box;\n+    use alloc::boxed::Box;\n     use core::mem;\n \n     #[cfg(test)]\n@@ -237,7 +237,7 @@ pub mod compiled {\n pub mod native {\n     use core::prelude::*;\n \n-    use alloc::owned::Box;\n+    use alloc::boxed::Box;\n     use core::mem;\n     use core::ptr;\n     use tls = thread_local_storage;"}, {"sha": "343b911fb83f3d775e9312fa34b7ef3794d82fa0", "filename": "src/librustrt/rtio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Frtio.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -11,7 +11,7 @@\n //! The EventLoop and internal synchronous I/O interface.\n \n use core::prelude::*;\n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use collections::string::String;\n use collections::vec::Vec;\n use core::fmt;"}, {"sha": "0eacd40f01cee052d45bcf48e9fe47cfa19a21b2", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -56,7 +56,7 @@ pub static RED_ZONE: uint = 20 * 1024;\n #[lang = \"stack_exhausted\"]\n extern fn stack_exhausted() {\n     use core::prelude::*;\n-    use alloc::owned::Box;\n+    use alloc::boxed::Box;\n     use local::Local;\n     use task::Task;\n     use core::intrinsics;"}, {"sha": "78c32889277b2230d131838f694b24933fc789f5", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -16,7 +16,7 @@\n use core::prelude::*;\n \n use alloc::arc::Arc;\n-use alloc::owned::{AnyOwnExt, Box};\n+use alloc::boxed::{BoxAny, Box};\n use core::any::Any;\n use core::atomics::{AtomicUint, SeqCst};\n use core::iter::Take;\n@@ -376,7 +376,7 @@ impl Task {\n         unsafe {\n             let imp = self.imp.take_unwrap();\n             let vtable = mem::transmute::<_, &raw::TraitObject>(&imp).vtable;\n-            match imp.wrap().move::<T>() {\n+            match imp.wrap().downcast::<T>() {\n                 Ok(t) => Some(t),\n                 Err(t) => {\n                     let data = mem::transmute::<_, raw::TraitObject>(t).data;"}, {"sha": "7bc991cf72f3a85b98fa3595cda8a5812168500d", "filename": "src/librustrt/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -18,7 +18,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::mem;\n use core::uint;\n use libc;\n@@ -147,7 +147,7 @@ impl<T: Send> Drop for Thread<T> {\n mod imp {\n     use core::prelude::*;\n \n-    use alloc::owned::Box;\n+    use alloc::boxed::Box;\n     use core::cmp;\n     use core::mem;\n     use core::ptr;\n@@ -215,7 +215,7 @@ mod imp {\n mod imp {\n     use core::prelude::*;\n \n-    use alloc::owned::Box;\n+    use alloc::boxed::Box;\n     use core::cmp;\n     use core::mem;\n     use core::ptr;"}, {"sha": "f26cccdd3ed9085fa372a8aa97f8f0a6a6a284b5", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -59,7 +59,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use collections::string::String;\n use collections::vec::Vec;\n use core::any::Any;"}, {"sha": "45301737adb3dad902371e20052671c92773552e", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -45,7 +45,7 @@ use iter::{range, Iterator};\n use mem;\n use ops::Drop;\n use option::{Some, None, Option};\n-use owned::Box;\n+use boxed::Box;\n use ptr;\n use result::{Ok, Err};\n "}, {"sha": "8c709d20d1904d3ee25e9ba770059bd33de2e770", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -10,7 +10,7 @@\n \n #![experimental]\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use any::{Any, AnyRefExt};\n use fmt;\n use io::{Writer, IoResult};"}, {"sha": "ff2b35160a151b42b4adf01e06f09312f89dd63d", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -62,7 +62,7 @@ use iter::Iterator;\n use kinds::Send;\n use libc;\n use option::{Some, None, Option};\n-use owned::Box;\n+use boxed::Box;\n use path::{Path, GenericPath};\n use path;\n use result::{Err, Ok};"}, {"sha": "db4df7a8a6f10ecf3525a8ba8a77fb40e36ddd77", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -229,7 +229,7 @@ use mem::transmute;\n use ops::{BitOr, BitAnd, Sub, Not};\n use option::{Option, Some, None};\n use os;\n-use owned::Box;\n+use boxed::Box;\n use result::{Ok, Err, Result};\n use rt::rtio;\n use slice::{Vector, MutableVector, ImmutableVector};"}, {"sha": "642654ba6ed815252e62df30ebb2ac6729061235", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -29,7 +29,7 @@ use io::{Reader, Writer, Listener, Acceptor};\n use from_str::FromStr;\n use kinds::Send;\n use option::{None, Some, Option};\n-use owned::Box;\n+use boxed::Box;\n use rt::rtio::{IoFactory, LocalIo, RtioSocket, RtioTcpListener};\n use rt::rtio::{RtioTcpAcceptor, RtioTcpStream};\n use rt::rtio;"}, {"sha": "5f7563e7467ba6644e9399dac350f2d3b82c1c03", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -19,7 +19,7 @@ use clone::Clone;\n use io::net::ip::{SocketAddr, IpAddr};\n use io::{Reader, Writer, IoResult, IoError};\n use kinds::Send;\n-use owned::Box;\n+use boxed::Box;\n use option::Option;\n use result::{Ok, Err};\n use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};"}, {"sha": "5e7c421497772faa7f7244326a6a238c3ee10b4e", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -30,7 +30,7 @@ use c_str::ToCStr;\n use clone::Clone;\n use io::{Listener, Acceptor, Reader, Writer, IoResult, IoError};\n use kinds::Send;\n-use owned::Box;\n+use boxed::Box;\n use rt::rtio::{IoFactory, LocalIo, RtioUnixListener};\n use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n "}, {"sha": "c476a99fee9dc465d3d31b23ec40ef775c29a26d", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -20,7 +20,7 @@ use prelude::*;\n use io::{IoResult, IoError};\n use libc;\n use os;\n-use owned::Box;\n+use boxed::Box;\n use rt::rtio::{RtioPipe, LocalIo};\n \n /// A synchronous, in-memory pipe."}, {"sha": "07574b726457985af06b1f217403493d5e7ac431", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -21,7 +21,7 @@ use io::{IoResult, IoError};\n use io;\n use libc;\n use mem;\n-use owned::Box;\n+use boxed::Box;\n use rt::rtio::{RtioProcess, ProcessConfig, IoFactory, LocalIo};\n use rt::rtio;\n use c_str::CString;"}, {"sha": "d46f437cddd50a500badf5021657b7528866b4b7", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -26,7 +26,7 @@ use iter::Iterator;\n use kinds::Send;\n use mem::drop;\n use option::{Some, None};\n-use owned::Box;\n+use boxed::Box;\n use result::{Ok, Err};\n use rt::rtio::{IoFactory, LocalIo, RtioSignal, Callback};\n use slice::ImmutableVector;"}, {"sha": "45c084b3459613370e5aeac03d2f00fb4e73410a", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -35,7 +35,7 @@ use iter::Iterator;\n use kinds::Send;\n use libc;\n use option::{Option, Some, None};\n-use owned::Box;\n+use boxed::Box;\n use result::{Ok, Err};\n use rt;\n use rt::local::Local;"}, {"sha": "1c9e428dcad82e897897ddcc4f40ba6c2c3a913b", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -20,7 +20,7 @@ and create receivers which will receive notifications after a period of time.\n use comm::{Receiver, Sender, channel};\n use io::{IoResult, IoError};\n use kinds::Send;\n-use owned::Box;\n+use boxed::Box;\n use rt::rtio::{IoFactory, LocalIo, RtioTimer, Callback};\n \n /// A synchronous timer object"}, {"sha": "e928323030c4f5f34ca5e485af1ae8a9eed1d27a", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -13,7 +13,7 @@\n use prelude::*;\n use cmp;\n use io;\n-use owned::Box;\n+use boxed::Box;\n use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n@@ -263,7 +263,7 @@ impl<T: Iterator<u8>> Reader for IterReader<T> {\n mod test {\n     use io::{MemReader, MemWriter, BufReader};\n     use io;\n-    use owned::Box;\n+    use boxed::Box;\n     use super::*;\n     use prelude::*;\n "}, {"sha": "34c1530f96ca1e72fb5a337d3d8b5c760395ca6f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -138,7 +138,7 @@ extern crate rustrt;\n #[cfg(test)] pub use realstd::ops;\n #[cfg(test)] pub use realstd::cmp;\n #[cfg(test)] pub use realstd::ty;\n-#[cfg(test)] pub use realstd::owned;\n+#[cfg(test)] pub use realstd::boxed;\n #[cfg(test)] pub use realstd::gc;\n \n \n@@ -167,7 +167,10 @@ pub use core::unit;\n pub use core::result;\n pub use core::option;\n \n-pub use alloc::owned;\n+pub use alloc::boxed;\n+#[deprecated = \"use boxed instead\"]\n+pub use owned = boxed;\n+\n pub use alloc::rc;\n \n pub use core_collections::slice;"}, {"sha": "a20ac112ac52cc7270faf777d9de12bbf90a357d", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -72,7 +72,7 @@\n #[doc(no_inline)] pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul, CheckedDiv};\n #[doc(no_inline)] pub use num::{Signed, Unsigned, Primitive, Int, Float};\n #[doc(no_inline)] pub use num::{FloatMath, ToPrimitive, FromPrimitive};\n-#[doc(no_inline)] pub use owned::Box;\n+#[doc(no_inline)] pub use boxed::Box;\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n #[doc(no_inline)] pub use ptr::RawPtr;\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek};"}, {"sha": "d7af92024eb5e6fe753f16e34885543086c4433a", "filename": "src/libstd/task.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -98,7 +98,7 @@ use comm::channel;\n use io::{Writer, stdio};\n use kinds::{Send, marker};\n use option::{None, Some, Option};\n-use owned::Box;\n+use boxed::Box;\n use result::Result;\n use rt::local::Local;\n use rt::task;\n@@ -374,7 +374,7 @@ pub fn failing() -> bool {\n #[cfg(test)]\n mod test {\n     use any::{Any, AnyRefExt};\n-    use owned::AnyOwnExt;\n+    use boxed::BoxAny;\n     use result;\n     use result::{Ok, Err};\n     use str::StrAllocating;\n@@ -578,7 +578,7 @@ mod test {\n             Err(e) => {\n                 type T = &'static str;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.move::<T>().unwrap(), \"static string\");\n+                assert_eq!(*e.downcast::<T>().unwrap(), \"static string\");\n             }\n             Ok(()) => fail!()\n         }\n@@ -592,7 +592,7 @@ mod test {\n             Err(e) => {\n                 type T = String;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.move::<T>().unwrap(), \"owned string\".to_string());\n+                assert_eq!(*e.downcast::<T>().unwrap(), \"owned string\".to_string());\n             }\n             Ok(()) => fail!()\n         }\n@@ -606,9 +606,9 @@ mod test {\n             Err(e) => {\n                 type T = Box<Any + Send>;\n                 assert!(e.is::<T>());\n-                let any = e.move::<T>().unwrap();\n+                let any = e.downcast::<T>().unwrap();\n                 assert!(any.is::<u16>());\n-                assert_eq!(*any.move::<u16>().unwrap(), 413u16);\n+                assert_eq!(*any.downcast::<u16>().unwrap(), 413u16);\n             }\n             Ok(()) => fail!()\n         }"}, {"sha": "0be124ad58408d6f9cf375af5fb6f83021f0853c", "filename": "src/libsync/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fatomics.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -103,7 +103,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::mem;\n \n pub use core::atomics::{AtomicBool, AtomicInt, AtomicUint, AtomicPtr};"}, {"sha": "e9a303634fe37c0ac34dd26186862f7582407555", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -320,7 +320,7 @@\n use core::prelude::*;\n \n use alloc::arc::Arc;\n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::cell::Cell;\n use core::kinds::marker;\n use core::mem;"}, {"sha": "c9782db5c24b66e2a1de511c0e69ae99344a3b8c", "filename": "src/libsync/comm/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Foneshot.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -34,7 +34,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::mem;\n use rustrt::local::Local;\n use rustrt::task::{Task, BlockedTask};"}, {"sha": "737a4bfe29916fab400b184b8877d985bc38f7ab", "filename": "src/libsync/comm/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fselect.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -54,7 +54,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::cell::Cell;\n use core::kinds::marker;\n use core::mem;"}, {"sha": "d13b2c32978c41e4d11cdf26ea7af4dca1e3cb7b", "filename": "src/libsync/comm/shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fshared.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -20,7 +20,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::cmp;\n use core::int;\n use rustrt::local::Local;"}, {"sha": "9747c207a22612fdce2a6fa71f8b6f8dc23389a3", "filename": "src/libsync/comm/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fstream.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -19,7 +19,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::cmp;\n use core::int;\n use rustrt::local::Local;"}, {"sha": "cc3c2197c13f03368adf77a6e75647e5463c07a1", "filename": "src/libsync/comm/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fsync.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -35,7 +35,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use collections::Vec;\n use collections::Collection;\n use core::mem;"}, {"sha": "913a58010d496b9db4c010e393a048a93ce07056", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -54,7 +54,7 @@ use core::prelude::*;\n \n use alloc::arc::Arc;\n use alloc::heap::{allocate, deallocate};\n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use collections::Vec;\n use core::kinds::marker;\n use core::mem::{forget, min_align_of, size_of, transmute};"}, {"sha": "759695fe5b6dd2520d691861f7810c6065e88748", "filename": "src/libsync/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpsc_queue.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -42,7 +42,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::mem;\n use core::ty::Unsafe;\n "}, {"sha": "990d743465d6998e483a51f633adfe745de1b89d", "filename": "src/libsync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmutex.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -59,7 +59,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::atomics;\n use core::kinds::marker;\n use core::mem;"}, {"sha": "cf4d3222ed0ed8527636ab11f450b7794e13c088", "filename": "src/libsync/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Flibsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fspsc_queue.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -37,7 +37,7 @@\n \n use core::prelude::*;\n \n-use alloc::owned::Box;\n+use alloc::boxed::Box;\n use core::mem;\n use core::ty::Unsafe;\n "}, {"sha": "602ffe2680b04a7c7b79e7263d05810c0bc7d573", "filename": "src/test/compile-fail/new-box-syntax-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnew-box-syntax-bad.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -14,7 +14,7 @@\n // Tests that the new `box` syntax works with unique pointers and GC pointers.\n \n use std::gc::{Gc, GC};\n-use std::owned::{Box, HEAP};\n+use std::boxed::{Box, HEAP};\n \n pub fn main() {\n     let x: Gc<int> = box(HEAP) 2;  //~ ERROR mismatched types"}, {"sha": "f61a8837e2c7c7dfe31eeb9fb92b6791d465cd73", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -14,7 +14,7 @@\n // Tests that the new `box` syntax works with unique pointers and GC pointers.\n \n use std::gc::{Gc, GC};\n-use std::owned::{Box, HEAP};\n+use std::boxed::{Box, HEAP};\n \n struct Structure {\n     x: int,\n@@ -33,4 +33,3 @@ pub fn main() {\n     let c = box()(3i + 4);\n     let d = box(GC)(5i + 6);\n }\n-"}, {"sha": "3a1cc0331a3e6c04ef39c12cfd896361f2660dab", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ede9c6b3894851b800a323757857eba07943b5/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ede9c6b3894851b800a323757857eba07943b5/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=e0ede9c6b3894851b800a323757857eba07943b5", "patch": "@@ -10,7 +10,7 @@\n \n // Make sure the destructor is run for unit-like structs.\n \n-use std::owned::AnyOwnExt;\n+use std::boxed::BoxAny;\n use std::task;\n \n struct Foo;\n@@ -26,6 +26,6 @@ pub fn main() {\n         let _b = Foo;\n     });\n \n-    let s = x.unwrap_err().move::<&'static str>().unwrap();\n+    let s = x.unwrap_err().downcast::<&'static str>().unwrap();\n     assert_eq!(s.as_slice(), \"This failure should happen.\");\n }"}]}