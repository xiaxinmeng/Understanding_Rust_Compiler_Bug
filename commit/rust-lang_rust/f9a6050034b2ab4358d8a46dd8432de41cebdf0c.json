{"sha": "f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YTYwNTAwMzRiMmFiNDM1OGQ4YTQ2ZGQ4NDMyZGU0MWNlYmRmMGM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-18T13:52:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:26Z"}, "message": "Move parsing of field pattern lists to the parser (where it belongs)", "tree": {"sha": "9de2701b95000fc0a089213bebf8b88924ff61c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de2701b95000fc0a089213bebf8b88924ff61c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "html_url": "https://github.com/rust-lang/rust/commit/f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2769837f1f9c94b977bd6022090f8e5cd02410c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2769837f1f9c94b977bd6022090f8e5cd02410c", "html_url": "https://github.com/rust-lang/rust/commit/d2769837f1f9c94b977bd6022090f8e5cd02410c"}], "stats": {"total": 135, "additions": 71, "deletions": 64}, "files": [{"sha": "b52f7591d9ad13e43443c595cde475106475752e", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "patch": "@@ -857,11 +857,19 @@ impl ExprCollector {\n                 let fields = p\n                     .field_pat_list()\n                     .expect(\"every struct should have a field list\")\n-                    .field_pats()\n-                    .into_iter()\n+                    .pats()\n                     .map(|f| {\n-                        let name = Name::new(f.ident);\n-                        let pat = self.collect_pat(&*f.pat);\n+                        let ast_pat = f.pat().expect(\"field pat always contains a pattern\");\n+                        let pat = self.collect_pat(ast_pat);\n+                        let name = f\n+                            .name()\n+                            .unwrap_or_else(|| {\n+                                ast::BindPat::cast(ast_pat.syntax())\n+                                    .expect(\"field pat without label is a bind pat\")\n+                                    .name()\n+                                    .expect(\"bind pat has a name\")\n+                            })\n+                            .as_name();\n                         FieldPat { name, pat }\n                     })\n                     .collect();"}, {"sha": "5a5f56057bbba29c183638bcb1b4fc37f03c81d4", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "patch": "@@ -664,55 +664,6 @@ impl LiteralExpr {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct FieldPat {\n-    pub ident: SmolStr,\n-    // FIXME: could we use a regular reference?\n-    pub pat: TreeArc<Pat>,\n-}\n-\n-impl FieldPatList {\n-    // TODO: try returning an iterator?\n-    // FIXME: shouldnt the parser do this? :o\n-    pub fn field_pats(&self) -> Vec<FieldPat> {\n-        let mut child_iter = self.syntax().children();\n-        let mut pats = Vec::new();\n-\n-        while let Some(node) = child_iter.next() {\n-            let kind = node.kind();\n-            if kind != IDENT && kind != BIND_PAT {\n-                continue;\n-            }\n-\n-            let ident = if let Some(text) = node.leaf_text() {\n-                text.clone()\n-            } else {\n-                SmolStr::new(node.text().to_string())\n-            };\n-            let mut pat = Pat::cast(node).map(AstNode::to_owned);\n-\n-            // get pat\n-            while let Some(node) = child_iter.next() {\n-                if node.kind() == COMMA {\n-                    break;\n-                }\n-\n-                if let Some(p) = Pat::cast(node) {\n-                    pat = Some(p.to_owned());\n-                }\n-            }\n-\n-            let field_pat = FieldPat {\n-                ident: ident,\n-                pat: pat.unwrap(),\n-            };\n-            pats.push(field_pat);\n-        }\n-\n-        pats\n-    }\n-}\n-\n impl BindPat {\n     pub fn is_mutable(&self) -> bool {\n         self.syntax().children().any(|n| n.kind() == MUT_KW)"}, {"sha": "23a573d7435b2b600a0100bfe6df01c74fb6289f", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "patch": "@@ -858,6 +858,35 @@ impl FieldExpr {\n     }\n }\n \n+// FieldPat\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct FieldPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for FieldPat {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for FieldPat {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            FIELD_PAT => Some(FieldPat::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+    fn to_owned(&self) -> TreeArc<FieldPat> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::NameOwner for FieldPat {}\n+impl FieldPat {\n+    pub fn pat(&self) -> Option<&Pat> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // FieldPatList\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n@@ -880,7 +909,11 @@ impl AstNode for FieldPatList {\n }\n \n \n-impl FieldPatList {}\n+impl FieldPatList {\n+    pub fn pats(&self) -> impl Iterator<Item = &FieldPat> {\n+        super::children(self)\n+    }\n+}\n \n // FloatNumber\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "d8c1ae53892afaad000ec1c91576921d5439ea39", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "patch": "@@ -154,6 +154,7 @@ Grammar(\n         \"PATH_PAT\",\n         \"STRUCT_PAT\",\n         \"FIELD_PAT_LIST\",\n+        \"FIELD_PAT\",\n         \"TUPLE_STRUCT_PAT\",\n         \"TUPLE_PAT\",\n         \"SLICE_PAT\",\n@@ -495,7 +496,11 @@ Grammar(\n         \"PlaceholderPat\": (),\n         \"PathPat\": ( options: [ \"Path\" ] ),\n         \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),\n-        \"FieldPatList\": (),\n+        \"FieldPatList\": ( collections: [[\"pats\", \"FieldPat\"]] ),\n+        \"FieldPat\": (\n+            traits: [\"NameOwner\"],\n+            options: [\"Pat\"]\n+        ),\n         \"TupleStructPat\": (\n             options: [\"Path\"],\n             collections: [[\"args\", \"Pat\"]],"}, {"sha": "ff9d94f8a7d7c64519efcb57b2f105a16304d74b", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "patch": "@@ -128,15 +128,7 @@ fn field_pat_list(p: &mut Parser) {\n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n             DOTDOT => p.bump(),\n-            IDENT if p.nth(1) == COLON => {\n-                p.bump();\n-                p.bump();\n-                pattern(p);\n-            }\n-            L_CURLY => error_block(p, \"expected ident\"),\n-            _ => {\n-                bind_pat(p, false);\n-            }\n+            _ => field_pat(p),\n         }\n         if !p.at(R_CURLY) {\n             p.expect(COMMA);\n@@ -146,6 +138,22 @@ fn field_pat_list(p: &mut Parser) {\n     m.complete(p, FIELD_PAT_LIST);\n }\n \n+fn field_pat(p: &mut Parser) {\n+    let m = p.start();\n+    match p.current() {\n+        IDENT if p.nth(1) == COLON => {\n+            name(p);\n+            p.bump();\n+            pattern(p);\n+        }\n+        L_CURLY => error_block(p, \"expected ident\"),\n+        _ => {\n+            bind_pat(p, false);\n+        }\n+    }\n+    m.complete(p, FIELD_PAT);\n+}\n+\n // test placeholder_pat\n // fn main() { let _ = (); }\n fn placeholder_pat(p: &mut Parser) -> CompletedMarker {"}, {"sha": "06faf7557fd2acf0ef5881b1b8336b2d69138161", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6050034b2ab4358d8a46dd8432de41cebdf0c/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=f9a6050034b2ab4358d8a46dd8432de41cebdf0c", "patch": "@@ -152,6 +152,7 @@ pub enum SyntaxKind {\n     PATH_PAT,\n     STRUCT_PAT,\n     FIELD_PAT_LIST,\n+    FIELD_PAT,\n     TUPLE_STRUCT_PAT,\n     TUPLE_PAT,\n     SLICE_PAT,\n@@ -414,6 +415,7 @@ impl SyntaxKind {\n             PATH_PAT => &SyntaxInfo { name: \"PATH_PAT\" },\n             STRUCT_PAT => &SyntaxInfo { name: \"STRUCT_PAT\" },\n             FIELD_PAT_LIST => &SyntaxInfo { name: \"FIELD_PAT_LIST\" },\n+            FIELD_PAT => &SyntaxInfo { name: \"FIELD_PAT\" },\n             TUPLE_STRUCT_PAT => &SyntaxInfo { name: \"TUPLE_STRUCT_PAT\" },\n             TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n             SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },"}]}