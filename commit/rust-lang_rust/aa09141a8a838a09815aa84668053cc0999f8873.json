{"sha": "aa09141a8a838a09815aa84668053cc0999f8873", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMDkxNDFhOGE4MzhhMDk4MTVhYTg0NjY4MDUzY2MwOTk5Zjg4NzM=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T12:08:02Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T14:26:25Z"}, "message": "finish debug_struct impls", "tree": {"sha": "d707ba2bfc3d578a9541696259032e2987063c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d707ba2bfc3d578a9541696259032e2987063c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa09141a8a838a09815aa84668053cc0999f8873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa09141a8a838a09815aa84668053cc0999f8873", "html_url": "https://github.com/rust-lang/rust/commit/aa09141a8a838a09815aa84668053cc0999f8873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa09141a8a838a09815aa84668053cc0999f8873/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd7236c7917c81f19b1e2f859b15e9d30bab7e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7236c7917c81f19b1e2f859b15e9d30bab7e3c", "html_url": "https://github.com/rust-lang/rust/commit/fd7236c7917c81f19b1e2f859b15e9d30bab7e3c"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "3ad1c46878c923bf19cc69078d9678537fa11feb", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 91, "deletions": 3, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/aa09141a8a838a09815aa84668053cc0999f8873/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa09141a8a838a09815aa84668053cc0999f8873/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=aa09141a8a838a09815aa84668053cc0999f8873", "patch": "@@ -3,7 +3,6 @@ use ide_db::helpers::{import_assets::NameToImport, mod_path_to_ast};\n use ide_db::items_locator;\n use itertools::Itertools;\n use syntax::ast::edit::AstNodeEdit;\n-use syntax::ast::Pat;\n use syntax::ted;\n use syntax::{\n     ast::{self, make, AstNode, NameOwner},\n@@ -203,7 +202,22 @@ fn gen_debug_impl(adt: &ast::Adt, fn_: &ast::Fn, annotated_name: &ast::Name) {\n                 let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n                 ted::replace(fn_.body().unwrap().syntax(), body.clone_for_update().syntax());\n             }\n-            Some(ast::FieldList::TupleFieldList(field_list)) => {}\n+            Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                let name = format!(\"\\\"{}\\\"\", annotated_name);\n+                let args = make::arg_list(Some(make::expr_literal(&name).into()));\n+                let target = make::expr_path(make::ext::ident_path(\"f\"));\n+                let mut expr = make::expr_method_call(target, \"debug_tuple\", args);\n+                for (idx, _) in field_list.fields().enumerate() {\n+                    let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let f_path = make::expr_ref(f_path, false);\n+                    let f_path = make::expr_field(f_path, &format!(\"{}\", idx)).into();\n+                    let args = make::arg_list(Some(f_path));\n+                    expr = make::expr_method_call(expr, \"field\", args);\n+                }\n+                let expr = make::expr_method_call(expr, \"finish\", make::arg_list(None));\n+                let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n+                ted::replace(fn_.body().unwrap().syntax(), body.clone_for_update().syntax());\n+            }\n             None => {\n                 let name = format!(\"\\\"{}\\\"\", annotated_name);\n                 let args = make::arg_list(Some(make::expr_literal(&name).into()));\n@@ -258,7 +272,7 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn add_custom_impl_debug() {\n+    fn add_custom_impl_debug_record_struct() {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n@@ -295,6 +309,80 @@ impl fmt::Debug for Foo {\n         f.debug_struct(\"Foo\").field(\"bar\", &self.bar).finish()\n     }\n }\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_debug_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+mod fmt {\n+    pub struct Error;\n+    pub type Result = Result<(), Error>;\n+    pub struct Formatter<'a>;\n+    pub trait Debug {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+    }\n+}\n+\n+#[derive(Debu$0g)]\n+struct Foo(String, usize);\n+\"#,\n+            r#\"\n+mod fmt {\n+    pub struct Error;\n+    pub type Result = Result<(), Error>;\n+    pub struct Formatter<'a>;\n+    pub trait Debug {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+    }\n+}\n+\n+struct Foo(String, usize);\n+\n+impl fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"Foo\").field(&self.0).field(&self.1).finish()\n+    }\n+}\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_debug_empty_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+mod fmt {\n+    pub struct Error;\n+    pub type Result = Result<(), Error>;\n+    pub struct Formatter<'a>;\n+    pub trait Debug {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+    }\n+}\n+\n+#[derive(Debu$0g)]\n+struct Foo;\n+\"#,\n+            r#\"\n+mod fmt {\n+    pub struct Error;\n+    pub type Result = Result<(), Error>;\n+    pub struct Formatter<'a>;\n+    pub trait Debug {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+    }\n+}\n+\n+struct Foo;\n+\n+impl fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"Foo\").finish()\n+    }\n+}\n \"#,\n         )\n     }"}]}