{"sha": "6148c1c0c5d6a1fcef0486ab8f22656187c85376", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNDhjMWMwYzVkNmExZmNlZjA0ODZhYjhmMjI2NTYxODdjODUzNzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-13T06:19:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-14T04:25:17Z"}, "message": "When running rusti, consume the JIT contexts and collect them in the parent task", "tree": {"sha": "434b4efcc2614ae60c4a02bb20bb7a2343dcf990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/434b4efcc2614ae60c4a02bb20bb7a2343dcf990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6148c1c0c5d6a1fcef0486ab8f22656187c85376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6148c1c0c5d6a1fcef0486ab8f22656187c85376", "html_url": "https://github.com/rust-lang/rust/commit/6148c1c0c5d6a1fcef0486ab8f22656187c85376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6148c1c0c5d6a1fcef0486ab8f22656187c85376/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "html_url": "https://github.com/rust-lang/rust/commit/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "0d21dda3edd6197fe378a1a2fd942464461ff15d", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 68, "deletions": 35, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/6148c1c0c5d6a1fcef0486ab8f22656187c85376/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6148c1c0c5d6a1fcef0486ab8f22656187c85376/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=6148c1c0c5d6a1fcef0486ab8f22656187c85376", "patch": "@@ -36,8 +36,23 @@\n  * - Pass #3\n  *   Finally, a program is generated to deserialize the local variable state,\n  *   run the code input, and then reserialize all bindings back into a local\n- *   hash map. Once this code runs, the input has fully been run and the REPL\n- *   waits for new input.\n+ *   hash map. This code is then run in the JIT engine provided by the rust\n+ *   compiler.\n+ *\n+ * - Pass #4\n+ *   Once this code runs, the input has fully been run and the hash map of local\n+ *   variables from TLS is read back into the local store of variables. This is\n+ *   then used later to pass back along to the parent rusti task and then begin\n+ *   waiting for input again.\n+ *\n+ * - Pass #5\n+ *   When running rusti code, it's important to consume ownership of the LLVM\n+ *   jit contextual information to prevent code from being deallocated too soon\n+ *   (before drop glue runs, see #7732). For this reason, the jit context is\n+ *   consumed and also passed along to the parent task. The parent task then\n+ *   keeps around all contexts while rusti is running. This must be done because\n+ *   tasks could in theory be spawned off and running in the background (still\n+ *   using the code).\n  *\n  * Encoding/decoding is done with EBML, and there is simply a map of ~str ->\n  * ~[u8] maintaining the values of each local binding (by name).\n@@ -60,6 +75,7 @@ use std::cell::Cell;\n use extra::rl;\n \n use rustc::driver::{driver, session};\n+use rustc::back::link::jit;\n use syntax::{ast, diagnostic};\n use syntax::ast_util::*;\n use syntax::parse::token;\n@@ -80,8 +96,9 @@ pub struct Repl {\n     binary: ~str,\n     running: bool,\n     lib_search_paths: ~[~str],\n+    engines: ~[~jit::Engine],\n \n-    program: Program,\n+    program: ~Program,\n }\n \n // Action to do after reading a :command\n@@ -91,13 +108,15 @@ enum CmdAction {\n }\n \n /// Run an input string in a Repl, returning the new Repl.\n-fn run(mut repl: Repl, input: ~str) -> Repl {\n+fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n+       input: ~str) -> (~Program, Option<~jit::Engine>)\n+{\n     // Build some necessary rustc boilerplate for compiling things\n-    let binary = repl.binary.to_managed();\n+    let binary = binary.to_managed();\n     let options = @session::options {\n         crate_type: session::unknown_crate,\n         binary: binary,\n-        addl_lib_search_paths: @mut repl.lib_search_paths.map(|p| Path(*p)),\n+        addl_lib_search_paths: @mut lib_search_paths.map(|p| Path(*p)),\n         jit: true,\n         .. copy *session::basic_options()\n     };\n@@ -136,9 +155,9 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n             };\n             match vi.node {\n                 ast::view_item_extern_mod(*) => {\n-                    repl.program.record_extern(s);\n+                    program.record_extern(s);\n                 }\n-                ast::view_item_use(*) => { repl.program.record_view_item(s); }\n+                ast::view_item_use(*) => { program.record_view_item(s); }\n             }\n         }\n \n@@ -156,10 +175,10 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n                                 // them at all usable they need to be decorated\n                                 // with #[deriving(Encoable, Decodable)]\n                                 ast::item_struct(*) => {\n-                                    repl.program.record_struct(name, s);\n+                                    program.record_struct(name, s);\n                                 }\n                                 // Item declarations are hoisted out of main()\n-                                _ => { repl.program.record_item(name, s); }\n+                                _ => { program.record_item(name, s); }\n                             }\n                         }\n \n@@ -190,17 +209,17 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n     }\n     // return fast for empty inputs\n     if to_run.len() == 0 && result.is_none() {\n-        return repl;\n+        return (program, None);\n     }\n \n     //\n     // Stage 2: run everything up to typeck to learn the types of the new\n     //          variables introduced into the program\n     //\n     info!(\"Learning about the new types in the program\");\n-    repl.program.set_cache(); // before register_new_vars (which changes them)\n+    program.set_cache(); // before register_new_vars (which changes them)\n     let input = to_run.connect(\"\\n\");\n-    let test = repl.program.test_code(input, &result, *new_locals);\n+    let test = program.test_code(input, &result, *new_locals);\n     debug!(\"testing with ^^^^^^ %?\", (||{ println(test) })());\n     let dinput = driver::str_input(test.to_managed());\n     let cfg = driver::build_configuration(sess, binary, &dinput);\n@@ -210,14 +229,14 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n     // Once we're typechecked, record the types of all local variables defined\n     // in this input\n     do find_main(crate.expect(\"crate after cu_typeck\"), sess) |blk| {\n-        repl.program.register_new_vars(blk, tcx.expect(\"tcx after cu_typeck\"));\n+        program.register_new_vars(blk, tcx.expect(\"tcx after cu_typeck\"));\n     }\n \n     //\n     // Stage 3: Actually run the code in the JIT\n     //\n     info!(\"actually running code\");\n-    let code = repl.program.code(input, &result);\n+    let code = program.code(input, &result);\n     debug!(\"actually running ^^^^^^ %?\", (||{ println(code) })());\n     let input = driver::str_input(code.to_managed());\n     let cfg = driver::build_configuration(sess, binary, &input);\n@@ -231,9 +250,15 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n     //          local variable bindings.\n     //\n     info!(\"cleaning up after code\");\n-    repl.program.consume_cache();\n+    program.consume_cache();\n \n-    return repl;\n+    //\n+    // Stage 5: Extract the LLVM execution engine to take ownership of the\n+    //          generated JIT code. This means that rusti can spawn parallel\n+    //          tasks and we won't deallocate the code emitted until rusti\n+    //          itself is destroyed.\n+    //\n+    return (program, jit::consume_engine());\n \n     fn parse_input(sess: session::Session, binary: @str,\n                    input: &str) -> @ast::crate {\n@@ -418,8 +443,8 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n /// Executes a line of input, which may either be rust code or a\n /// :command. Returns a new Repl if it has changed.\n pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n-                use_rl: bool)\n-    -> Option<Repl> {\n+                use_rl: bool) -> bool\n+{\n     if line.starts_with(\":\") {\n         // drop the : and the \\n (one byte each)\n         let full = line.slice(1, line.len());\n@@ -442,21 +467,30 @@ pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n                         }\n                     }\n                 }\n-                return None;\n+                return true;\n             }\n         }\n     }\n \n     let line = Cell::new(line);\n-    let r = Cell::new(copy *repl);\n+    let program = Cell::new(copy repl.program);\n+    let lib_search_paths = Cell::new(copy repl.lib_search_paths);\n+    let binary = Cell::new(copy repl.binary);\n     let result = do task::try {\n-        run(r.take(), line.take())\n+        run(program.take(), binary.take(), lib_search_paths.take(), line.take())\n     };\n \n-    if result.is_ok() {\n-        return Some(result.get());\n+    match result {\n+        Ok((program, engine)) => {\n+            repl.program = program;\n+            match engine {\n+                Some(e) => { repl.engines.push(e); }\n+                None => {}\n+            }\n+            return true;\n+        }\n+        Err(*) => { return false; }\n     }\n-    return None;\n }\n \n pub fn main() {\n@@ -468,8 +502,9 @@ pub fn main() {\n         binary: copy args[0],\n         running: true,\n         lib_search_paths: ~[],\n+        engines: ~[],\n \n-        program: Program::new(),\n+        program: ~Program::new(),\n     };\n \n     let istty = unsafe { libc::isatty(libc::STDIN_FILENO as i32) } != 0;\n@@ -502,10 +537,7 @@ pub fn main() {\n                     }\n                     loop;\n                 }\n-                match run_line(&mut repl, in, out, line, istty) {\n-                    Some(new_repl) => repl = new_repl,\n-                    None => { }\n-                }\n+                run_line(&mut repl, in, out, line, istty);\n             }\n         }\n     }\n@@ -524,7 +556,8 @@ mod tests {\n             binary: ~\"rusti\",\n             running: true,\n             lib_search_paths: ~[],\n-            program: Program::new(),\n+            engines: ~[],\n+            program: ~Program::new(),\n         }\n     }\n \n@@ -535,9 +568,9 @@ mod tests {\n     fn run_program(prog: &str) {\n         let mut r = repl();\n         for prog.split_iter('\\n').advance |cmd| {\n-            let result = run_line(&mut r, io::stdin(), io::stdout(),\n-                                  cmd.to_owned(), false);\n-            r = result.expect(fmt!(\"the command '%s' failed\", cmd));\n+            assert!(run_line(&mut r, io::stdin(), io::stdout(),\n+                             cmd.to_owned(), false),\n+                    \"the command '%s' failed\", cmd);\n         }\n     }\n     fn run_program(_: &str) {}\n@@ -682,7 +715,7 @@ mod tests {\n         assert!(r.running);\n         let result = run_line(&mut r, io::stdin(), io::stdout(),\n                               ~\":exit\", false);\n-        assert!(result.is_none());\n+        assert!(result);\n         assert!(!r.running);\n     }\n }"}]}