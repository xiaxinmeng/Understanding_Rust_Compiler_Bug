{"sha": "ae964207bb17911cf96d9744d9469fa2734093a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOTY0MjA3YmIxNzkxMWNmOTZkOTc0NGQ5NDY5ZmEyNzM0MDkzYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T08:07:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T08:07:36Z"}, "message": "Auto merge of #1739 - RalfJung:rustup, r=RalfJung\n\nrustup", "tree": {"sha": "943a6618e59ae3587416583104952b85acf343bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943a6618e59ae3587416583104952b85acf343bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae964207bb17911cf96d9744d9469fa2734093a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae964207bb17911cf96d9744d9469fa2734093a8", "html_url": "https://github.com/rust-lang/rust/commit/ae964207bb17911cf96d9744d9469fa2734093a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae964207bb17911cf96d9744d9469fa2734093a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6539934d9d96b371fc50b2c1090f7c8bca215b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6539934d9d96b371fc50b2c1090f7c8bca215b0", "html_url": "https://github.com/rust-lang/rust/commit/a6539934d9d96b371fc50b2c1090f7c8bca215b0"}, {"sha": "98f28ac9c8f29b12a0aa56ea13720db5d469fb2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f28ac9c8f29b12a0aa56ea13720db5d469fb2a", "html_url": "https://github.com/rust-lang/rust/commit/98f28ac9c8f29b12a0aa56ea13720db5d469fb2a"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "f064064db14c968982f5dd8502fda4db80555590", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -1 +1 @@\n-a4d9624242df6bfe6c0a298867dd2bd527263424\n+b3ac52646f7591a811fa9bf55995b24fd17ece08"}, {"sha": "e98488b9bf6123daa3ed529d50d7398e5207fa3d", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -559,7 +559,7 @@ pub fn check_abi<'a>(abi: Abi, exp_abi: Abi) -> InterpResult<'a, ()> {\n     if abi == exp_abi {\n         Ok(())\n     } else {\n-        throw_ub_format!(\"calling a function with ABI {:?} using caller ABI {:?}\", exp_abi, abi)\n+        throw_ub_format!(\"calling a function with ABI {} using caller ABI {}\", exp_abi.name(), abi.name())\n     }\n }\n "}, {"sha": "373d5299618d5c5e44ab88e00e33c1d2e602b9c5", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -146,14 +146,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 | \"exit\"\n                 | \"ExitProcess\"\n                 => {\n-                    check_abi(abi, if link_name == \"exit\" { Abi::C } else { Abi::System })?;\n+                    check_abi(abi, if link_name == \"exit\" { Abi::C { unwind: false } } else { Abi::System { unwind: false } })?;\n                     let &[ref code] = check_arg_count(args)?;\n                     // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n                     let code = this.read_scalar(code)?.to_i32()?;\n                     throw_machine_stop!(TerminationInfo::Exit(code.into()));\n                 }\n                 \"abort\" => {\n-                    check_abi(abi, Abi::C)?;\n+                    check_abi(abi, Abi::C { unwind: false })?;\n                     throw_machine_stop!(TerminationInfo::Abort(\"the program aborted execution\".to_owned()))\n                 }\n                 _ => throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name),\n@@ -170,7 +170,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Normally, this will be either `libpanic_unwind` or `libpanic_abort`, but it could\n             // also be a custom user-provided implementation via `#![feature(panic_runtime)]`\n             \"__rust_start_panic\" | \"__rust_panic_cleanup\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 // This replicates some of the logic in `inject_panic_runtime`.\n                 // FIXME: is there a way to reuse that logic?\n                 let panic_runtime = match this.tcx.sess.panic_strategy() {\n@@ -236,14 +236,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Standard C allocation\n             \"malloc\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref size] = check_arg_count(args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C);\n                 this.write_scalar(res, dest)?;\n             }\n             \"calloc\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref items, ref len] = check_arg_count(args)?;\n                 let items = this.read_scalar(items)?.to_machine_usize(this)?;\n                 let len = this.read_scalar(len)?.to_machine_usize(this)?;\n@@ -253,13 +253,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n             \"free\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 this.free(ptr, MiriMemoryKind::C)?;\n             }\n             \"realloc\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref old_ptr, ref new_size] = check_arg_count(args)?;\n                 let old_ptr = this.read_scalar(old_ptr)?.check_init()?;\n                 let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n@@ -334,7 +334,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // C memory handling functions\n             \"memcmp\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref left, ref right, ref n] = check_arg_count(args)?;\n                 let left = this.read_scalar(left)?.check_init()?;\n                 let right = this.read_scalar(right)?.check_init()?;\n@@ -355,7 +355,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"memrchr\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref ptr, ref val, ref num] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n@@ -374,7 +374,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"memchr\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref ptr, ref val, ref num] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n@@ -392,7 +392,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"strlen\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref ptr] = check_arg_count(args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n@@ -408,7 +408,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"asinf\"\n             | \"atanf\"\n             => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref f] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n@@ -428,7 +428,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"hypotf\"\n             | \"atan2f\"\n             => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref f1, ref f2] = check_arg_count(args)?;\n                 // underscore case for windows, here and below\n                 // (see https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/floating-point-primitives?view=vs-2019)\n@@ -450,7 +450,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"asin\"\n             | \"atan\"\n             => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref f] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n@@ -470,7 +470,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"hypot\"\n             | \"atan2\"\n             => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref f1, ref f2] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(f1)?.to_u64()?);\n@@ -486,7 +486,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"ldexp\"\n             | \"scalbn\"\n             => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref x, ref exp] = check_arg_count(args)?;\n                 // For radix-2 (binary) systems, `ldexp` and `scalbn` are the same.\n                 let x = this.read_scalar(x)?.to_f64()?;\n@@ -508,12 +508,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Architecture-specific shims\n             \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 this.yield_active_thread();\n             }\n             \"llvm.aarch64.hint\" if this.tcx.sess.target.arch == \"aarch64\" => {\n-                check_abi(abi, Abi::C)?;\n+                check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref hint] = check_arg_count(args)?;\n                 let hint = this.read_scalar(hint)?.to_i32()?;\n                 match hint {"}, {"sha": "df9e945f29f7554a8f03ead409189d1a45d014c7", "filename": "src/shims/posix/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fposix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fposix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fdlsym.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -35,7 +35,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        check_abi(abi, Abi::C)?;\n+        check_abi(abi, Abi::C { unwind: false })?;\n \n         match dlsym {\n             Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, ret),"}, {"sha": "fdbe88cd7d6125df1e72b572e37d438107d008aa", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -22,7 +22,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        check_abi(abi, Abi::C)?;\n+        check_abi(abi, Abi::C { unwind: false })?;\n \n         match link_name {\n             // Environment related shims"}, {"sha": "704b8872a4b03815b3cdcc6b6a3fa47d1c867dd8", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -32,7 +32,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (_dest, _ret) = ret.expect(\"we don't support any diverging dlsym\");\n         assert!(this.tcx.sess.target.os == \"windows\");\n \n-        check_abi(abi, Abi::System)?;\n+        check_abi(abi, Abi::System { unwind: false })?;\n \n         match dlsym {}\n     }"}, {"sha": "d9c5ce7896f6603871464e0faa258a26e40a8cc3", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -20,7 +20,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n-        check_abi(abi, Abi::System)?;\n+        check_abi(abi, Abi::System { unwind: false })?;\n \n         // Windows API stubs.\n         // HANDLE = isize"}, {"sha": "c13a2ac8bb04664370ab19cbd294f444f35d2249", "filename": "tests/compile-fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae964207bb17911cf96d9744d9469fa2734093a8/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae964207bb17911cf96d9744d9469fa2734093a8/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=ae964207bb17911cf96d9744d9469fa2734093a8", "patch": "@@ -3,13 +3,13 @@\n \n //! Unwinding past the top frame of a stack is Undefined Behavior.\n \n-#![feature(rustc_private)]\n+#![feature(rustc_private, c_unwind)]\n \n extern crate libc;\n \n use std::{mem, ptr};\n \n-extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+extern \"C-unwind\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n     panic!()\n }\n \n@@ -18,6 +18,9 @@ fn main() {\n         let mut native: libc::pthread_t = mem::zeroed();\n         let attr: libc::pthread_attr_t = mem::zeroed();\n         // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n+        // Cast to avoid inserting abort-on-unwind.\n+        let thread_start: extern \"C-unwind\" fn(*mut libc::c_void) -> *mut libc::c_void = thread_start;\n+        let thread_start: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void = mem::transmute(thread_start);\n         assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n     }"}]}