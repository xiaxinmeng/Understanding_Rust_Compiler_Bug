{"sha": "f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NGE4Y2YyOGE1ZTkxNGFlMTNmNGQ4ZDljMTU0NjgyNjhlNDE1ZDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-27T12:32:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-27T12:32:21Z"}, "message": "Rollup merge of #58678 - doctorn:refuse-async-fn-2015-edition, r=varkor\n\nDeny `async fn` in 2015 edition\n\nThis commit prevents code using `async fn` from being compiled in Rust 2015 edition.\n\nCompiling code of the form:\n\n```rust\nasync fn foo() {}\n```\n\nWill now result in the error:\n\n```\nerror[E0670]: `async fn` is not permitted in the 2015 edition\n --> async.rs:1:1\n  |\n1 | async fn foo() {}\n  | ^^^^^\n\nerror: aborting due to error\n\nFor more information about an error, try `rustc --explain E0670`.\n```\n\nThis resolves #58652 and also resolves #53714.\n\nr? @varkor", "tree": {"sha": "fbf44e7b47ed63bee29136fe78e24d2c643d2c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf44e7b47ed63bee29136fe78e24d2c643d2c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcdoNVCRBK7hj4Ov3rIwAAdHIIAGjBwmQMJCcOmeGmWTxvHEhN\nndXmDyTRXeMyhSlimQbXp/LIw96+DaHBU43JpY7I1okiY9ciyyUl/JpVZGmhZEhY\nIIY32eyR2NwvdnvVFmj2XTFcwyNnmj/PGdJN+p+5Akx6xOzAzLhONNF5aprdOhqe\ntm70L5Vz+vx2uFbWfalTm2bd6Z4b8UCiIQMMORNVf+GaKbQnJcQqtVgP9fjK4UnM\n/TRGx4y2HJuo3mjDbV6rezZh/miUO6lFwW8pe0KtQ4ciXx2wFQFuDNxjDpwTjsQO\nxrS3M/V6YcCn7NGgnF1eKGocABC31GT4gY2PUu0lpn51c0Hf9JVese/IqMw2S/U=\n=Pp+z\n-----END PGP SIGNATURE-----\n", "payload": "tree fbf44e7b47ed63bee29136fe78e24d2c643d2c56\nparent a46b00eeb5cb78288f04df0ab68b4192c92608c9\nparent 8300f51936149ec43eb063205e4d03c54a308f3c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1551270741 +0100\ncommitter GitHub <noreply@github.com> 1551270741 +0100\n\nRollup merge of #58678 - doctorn:refuse-async-fn-2015-edition, r=varkor\n\nDeny `async fn` in 2015 edition\n\nThis commit prevents code using `async fn` from being compiled in Rust 2015 edition.\n\nCompiling code of the form:\n\n```rust\nasync fn foo() {}\n```\n\nWill now result in the error:\n\n```\nerror[E0670]: `async fn` is not permitted in the 2015 edition\n --> async.rs:1:1\n  |\n1 | async fn foo() {}\n  | ^^^^^\n\nerror: aborting due to error\n\nFor more information about an error, try `rustc --explain E0670`.\n```\n\nThis resolves #58652 and also resolves #53714.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "html_url": "https://github.com/rust-lang/rust/commit/f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a46b00eeb5cb78288f04df0ab68b4192c92608c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a46b00eeb5cb78288f04df0ab68b4192c92608c9", "html_url": "https://github.com/rust-lang/rust/commit/a46b00eeb5cb78288f04df0ab68b4192c92608c9"}, {"sha": "8300f51936149ec43eb063205e4d03c54a308f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8300f51936149ec43eb063205e4d03c54a308f3c", "html_url": "https://github.com/rust-lang/rust/commit/8300f51936149ec43eb063205e4d03c54a308f3c"}], "stats": {"total": 277, "additions": 215, "deletions": 62}, "files": [{"sha": "df45a085944d66436ff5934fad75bcf69e8c8879", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -2892,7 +2892,7 @@ impl<'a> LoweringContext<'a> {\n                     // `impl Future<Output = T>` here because lower_body\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n-                    let body_id = this.lower_async_body(decl, header.asyncness, body);\n+                    let body_id = this.lower_async_body(decl, header.asyncness.node, body);\n \n                     let (generics, fn_decl) = this.add_in_band_defs(\n                         generics,\n@@ -2902,7 +2902,7 @@ impl<'a> LoweringContext<'a> {\n                             decl,\n                             Some((fn_def_id, idty)),\n                             true,\n-                            header.asyncness.opt_return_id()\n+                            header.asyncness.node.opt_return_id()\n                         ),\n                     );\n \n@@ -3398,14 +3398,14 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness, body);\n+                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness.node, body);\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n                     sig,\n                     impl_item_def_id,\n                     impl_trait_return_allow,\n-                    sig.header.asyncness.opt_return_id(),\n+                    sig.header.asyncness.node.opt_return_id(),\n                 );\n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n@@ -3624,7 +3624,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n             unsafety: self.lower_unsafety(h.unsafety),\n-            asyncness: self.lower_asyncness(h.asyncness),\n+            asyncness: self.lower_asyncness(h.asyncness.node),\n             constness: self.lower_constness(h.constness),\n             abi: h.abi,\n         }"}, {"sha": "12760f8b9828b2372c40c6335d1a422bfa64775f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -73,7 +73,7 @@ impl<'a> DefCollector<'a> {\n         decl: &'a FnDecl,\n         body: &'a Block,\n     ) {\n-        let (closure_id, return_impl_trait_id) = match header.asyncness {\n+        let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n             IsAsync::Async {\n                 closure_id,\n                 return_impl_trait_id,\n@@ -129,10 +129,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ItemKind::Fn(\n                 ref decl,\n-                ref header @ FnHeader { asyncness: IsAsync::Async { .. }, .. },\n+                ref header,\n                 ref generics,\n                 ref body,\n-            ) => {\n+            ) if header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -242,9 +242,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(MethodSig {\n-                header: ref header @ FnHeader { asyncness: IsAsync::Async { .. }, .. },\n+                ref header,\n                 ref decl,\n-            }, ref body) => {\n+            }, ref body) if header.asyncness.node.is_async() => {\n                 return self.visit_async_fn(\n                     ii.id,\n                     ii.ident.name,"}, {"sha": "f96fc3b897f80bc4e85d40d225f737ae1dd77885", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -463,7 +463,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.invalid_visibility(&impl_item.vis, None);\n                     if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n                         self.check_trait_fn_not_const(sig.header.constness);\n-                        self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness);\n+                        self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n                     }\n                 }\n             }\n@@ -482,9 +482,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .note(\"only trait implementations may be annotated with default\").emit();\n                 }\n             }\n-            ItemKind::Fn(_, header, ref generics, _) => {\n+            ItemKind::Fn(_, ref header, ref generics, _) => {\n                 // We currently do not permit const generics in `const fn`, as\n                 // this is tantamount to allowing compile-time dependent typing.\n+                self.visit_fn_header(header);\n                 if header.constness.node == Constness::Const {\n                     // Look for const generics and error if we find any.\n                     for param in &generics.params {\n@@ -535,7 +536,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n-                        self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness);\n+                        self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         if block.is_none() {\n                             self.check_decl_no_pat(&sig.decl, |span, mut_ident| {\n@@ -702,6 +703,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             .span_bug(mac.span, \"macro invocation missed in expansion; did you forget to override \\\n                                  the relevant `fold_*()` method in `PlaceholderExpander`?\");\n     }\n+\n+    fn visit_fn_header(&mut self, header: &'a FnHeader) {\n+        if header.asyncness.node.is_async() && self.session.rust_2015() {\n+            struct_span_err!(self.session, header.asyncness.span, E0670,\n+                             \"`async fn` is not permitted in the 2015 edition\").emit();\n+        }\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) -> (bool, bool) {"}, {"sha": "e3c6b16703a4ac1a105fdc91812297d5168dff5d", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -310,6 +310,18 @@ loop {\n     break;\n }\n ```\n+\"##,\n+\n+E0670: r##\"\n+Rust 2015 does not permit the use of `async fn`.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0670\n+async fn foo() {}\n+```\n+\n+Switch to the Rust 2018 edition to use `async fn`.\n \"##\n }\n "}, {"sha": "e9331fcd8bad12676bf094972b7fe62e345dc50a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -806,9 +806,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n-                (ItemRibKind, header.asyncness),\n+                (ItemRibKind, header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n-                (TraitOrImplItemRibKind, sig.header.asyncness),\n+                (TraitOrImplItemRibKind, sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n                 // Async closures aren't resolved through `visit_fn`-- they're\n                 // processed separately"}, {"sha": "52f3a2077702192a22ac8c8419b0145952cb665e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -378,7 +378,7 @@ impl Sig for ast::Item {\n                 if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");\n                 }\n-                if header.asyncness.is_async() {\n+                if header.asyncness.node.is_async() {\n                     text.push_str(\"async \");\n                 }\n                 if header.unsafety == ast::Unsafety::Unsafe {\n@@ -936,7 +936,7 @@ fn make_method_signature(\n     if m.header.constness.node == ast::Constness::Const {\n         text.push_str(\"const \");\n     }\n-    if m.header.asyncness.is_async() {\n+    if m.header.asyncness.node.is_async() {\n         text.push_str(\"async \");\n     }\n     if m.header.unsafety == ast::Unsafety::Unsafe {"}, {"sha": "b6f9ae36da70c4af2c3f58feae08740958237a40", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -2216,7 +2216,7 @@ impl Item {\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,\n-    pub asyncness: IsAsync,\n+    pub asyncness: Spanned<IsAsync>,\n     pub constness: Spanned<Constness>,\n     pub abi: Abi,\n }\n@@ -2225,7 +2225,7 @@ impl Default for FnHeader {\n     fn default() -> FnHeader {\n         FnHeader {\n             unsafety: Unsafety::Normal,\n-            asyncness: IsAsync::NotAsync,\n+            asyncness: dummy_spanned(IsAsync::NotAsync),\n             constness: dummy_spanned(Constness::NotConst),\n             abi: Abi::Rust,\n         }"}, {"sha": "2f88749ace85ea3048ac6b4698c0fef69fd0270c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -1017,7 +1017,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   ast::ItemKind::Fn(self.fn_decl(inputs, ast::FunctionRetTy::Ty(output)),\n                               ast::FnHeader {\n                                   unsafety: ast::Unsafety::Normal,\n-                                  asyncness: ast::IsAsync::NotAsync,\n+                                  asyncness: dummy_spanned(ast::IsAsync::NotAsync),\n                                   constness: dummy_spanned(ast::Constness::NotConst),\n                                   abi: Abi::Rust,\n                               },"}, {"sha": "8df1f38d60d499333bd36e1106052a34dd9ed22c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -1898,7 +1898,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match fn_kind {\n             FnKind::ItemFn(_, header, _, _) => {\n                 // Check for const fn and async fn declarations.\n-                if header.asyncness.is_async() {\n+                if header.asyncness.node.is_async() {\n                     gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n                 }\n                 // Stability of const fn methods are covered in"}, {"sha": "d30372d45d754b20943a5a6eee1dde055a32947d", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -934,7 +934,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n     let FnHeader { unsafety: _, asyncness, constness: _, abi: _ } = header;\n-    vis.visit_asyncness(asyncness);\n+    vis.visit_asyncness(&mut asyncness.node);\n }\n \n pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod, vis: &mut T) {"}, {"sha": "b762365c31f9760ea9d1b9ef3b6b0cbdd9d92a4c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -5001,6 +5001,11 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n+    fn is_async_fn(&mut self) -> bool {\n+        self.token.is_keyword(keywords::Async) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Fn))\n+    }\n+\n     fn is_do_catch_block(&mut self) -> bool {\n         self.token.is_keyword(keywords::Do) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n@@ -5133,7 +5138,8 @@ impl<'a> Parser<'a> {\n                   !self.is_union_item() &&\n                   !self.is_crate_vis() &&\n                   !self.is_existential_type_decl() &&\n-                  !self.is_auto_trait_item() {\n+                  !self.is_auto_trait_item() &&\n+                  !self.is_async_fn() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n@@ -6384,7 +6390,7 @@ impl<'a> Parser<'a> {\n     /// Parses an item-position function declaration.\n     fn parse_item_fn(&mut self,\n                      unsafety: Unsafety,\n-                     asyncness: IsAsync,\n+                     asyncness: Spanned<IsAsync>,\n                      constness: Spanned<Constness>,\n                      abi: Abi)\n                      -> PResult<'a, ItemInfo> {\n@@ -6416,14 +6422,15 @@ impl<'a> Parser<'a> {\n         -> PResult<'a, (\n             Spanned<Constness>,\n             Unsafety,\n-            IsAsync,\n+            Spanned<IsAsync>,\n             Abi\n         )>\n     {\n         let is_const_fn = self.eat_keyword(keywords::Const);\n         let const_span = self.prev_span;\n         let unsafety = self.parse_unsafety();\n         let asyncness = self.parse_asyncness();\n+        let asyncness = respan(self.prev_span, asyncness);\n         let (constness, unsafety, abi) = if is_const_fn {\n             (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n         } else {\n@@ -7834,7 +7841,7 @@ impl<'a> Parser<'a> {\n                 let abi = opt_abi.unwrap_or(Abi::C);\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(Unsafety::Normal,\n-                                       IsAsync::NotAsync,\n+                                       respan(fn_span, IsAsync::NotAsync),\n                                        respan(fn_span, Constness::NotConst),\n                                        abi)?;\n                 let prev_span = self.prev_span;\n@@ -7878,7 +7885,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(unsafety,\n-                                       IsAsync::NotAsync,\n+                                       respan(const_span, IsAsync::NotAsync),\n                                        respan(const_span, Constness::Const),\n                                        Abi::Rust)?;\n                 let prev_span = self.prev_span;\n@@ -7926,14 +7933,15 @@ impl<'a> Parser<'a> {\n             // ASYNC FUNCTION ITEM\n             let unsafety = self.parse_unsafety();\n             self.expect_keyword(keywords::Async)?;\n+            let async_span = self.prev_span;\n             self.expect_keyword(keywords::Fn)?;\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(unsafety,\n-                                   IsAsync::Async {\n+                                   respan(async_span, IsAsync::Async {\n                                        closure_id: ast::DUMMY_NODE_ID,\n                                        return_impl_trait_id: ast::DUMMY_NODE_ID,\n-                                   },\n+                                   }),\n                                    respan(fn_span, Constness::NotConst),\n                                    Abi::Rust)?;\n             let prev_span = self.prev_span;\n@@ -7942,6 +7950,13 @@ impl<'a> Parser<'a> {\n                                     item_,\n                                     visibility,\n                                     maybe_append(attrs, extra_attrs));\n+            if self.span.rust_2015() {\n+                self.diagnostic().struct_span_err_with_code(\n+                    async_span,\n+                    \"`async fn` is not permitted in the 2015 edition\",\n+                    DiagnosticId::Error(\"E0670\".into())\n+                ).emit();\n+            }\n             return Ok(Some(item));\n         }\n         if self.check_keyword(keywords::Unsafe) &&\n@@ -7989,7 +8004,7 @@ impl<'a> Parser<'a> {\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(Unsafety::Normal,\n-                                   IsAsync::NotAsync,\n+                                   respan(fn_span, IsAsync::NotAsync),\n                                    respan(fn_span, Constness::NotConst),\n                                    Abi::Rust)?;\n             let prev_span = self.prev_span;\n@@ -8015,7 +8030,7 @@ impl<'a> Parser<'a> {\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(Unsafety::Unsafe,\n-                                   IsAsync::NotAsync,\n+                                   respan(fn_span, IsAsync::NotAsync),\n                                    respan(fn_span, Constness::NotConst),\n                                    abi)?;\n             let prev_span = self.prev_span;\n@@ -8282,7 +8297,8 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         visibility: Visibility\n     ) -> PResult<'a, Option<P<Item>>> {\n-        if macros_allowed && self.token.is_path_start() {\n+        if macros_allowed && self.token.is_path_start() &&\n+                !(self.is_async_fn() && self.span.rust_2015()) {\n             // MACRO INVOCATION ITEM\n \n             let prev_span = self.prev_span;\n@@ -8337,7 +8353,8 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n                                at_end: &mut bool) -> PResult<'a, Option<Mac>>\n     {\n-        if self.token.is_path_start() {\n+        if self.token.is_path_start() &&\n+                !(self.is_async_fn() && self.span.rust_2015()) {\n             let prev_span = self.prev_span;\n             let lo = self.span;\n             let pth = self.parse_path(PathStyle::Mod)?;"}, {"sha": "d6265ebde1bbc9dcb1d97dd8748d7a372ee7c872", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -3195,7 +3195,7 @@ impl<'a> State<'a> {\n             ast::Constness::Const => self.word_nbsp(\"const\")?\n         }\n \n-        self.print_asyncness(header.asyncness)?;\n+        self.print_asyncness(header.asyncness.node)?;\n         self.print_unsafety(header.unsafety)?;\n \n         if header.abi != Abi::Rust {\n@@ -3247,7 +3247,7 @@ mod tests {\n                     ast::FnHeader {\n                         unsafety: ast::Unsafety::Normal,\n                         constness: source_map::dummy_spanned(ast::Constness::NotConst),\n-                        asyncness: ast::IsAsync::NotAsync,\n+                        asyncness: source_map::dummy_spanned(ast::IsAsync::NotAsync),\n                         abi: Abi::Rust,\n                     },\n                     abba_ident,"}, {"sha": "46d8d772e9321ac707c7b6eba245a66de378cf84", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::Span;\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, FnHeader, &'a Visibility, &'a Block),\n+    ItemFn(Ident, &'a FnHeader, &'a Visibility, &'a Block),\n \n     /// fn foo(&self)\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n@@ -149,6 +149,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_fn_ret_ty(&mut self, ret_ty: &'ast FunctionRetTy) {\n         walk_fn_ret_ty(self, ret_ty)\n     }\n+    fn visit_fn_header(&mut self, _header: &'ast FnHeader) {\n+        // Nothing to do\n+    }\n }\n \n #[macro_export]\n@@ -225,8 +228,9 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n-        ItemKind::Fn(ref declaration, header, ref generics, ref body) => {\n+        ItemKind::Fn(ref declaration, ref header, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n+            visitor.visit_fn_header(header);\n             visitor.visit_fn(FnKind::ItemFn(item.ident, header,\n                                             &item.vis, body),\n                              declaration,\n@@ -539,11 +543,13 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n     where V: Visitor<'a>,\n {\n     match kind {\n-        FnKind::ItemFn(_, _, _, body) => {\n+        FnKind::ItemFn(_, header, _, body) => {\n+            visitor.visit_fn_header(header);\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n-        FnKind::Method(_, _, _, body) => {\n+        FnKind::Method(_, sig, _, body) => {\n+            visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n@@ -564,6 +570,7 @@ pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a Trai\n             walk_list!(visitor, visit_expr, default);\n         }\n         TraitItemKind::Method(ref sig, None) => {\n+            visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         TraitItemKind::Method(ref sig, Some(ref body)) => {"}, {"sha": "f4b625f8ea2c862c69bec862608d001c7f377fe8", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -257,7 +257,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n             );\n             return false\n         }\n-        if header.asyncness.is_async() {\n+        if header.asyncness.node.is_async() {\n             sd.span_err(\n                 i.span,\n                 \"async functions cannot be used for tests\""}, {"sha": "2105aa5835d0dbc0bc5cbe61603822faacaffdce", "filename": "src/test/ui/editions/edition-deny-async-fns-2015.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -0,0 +1,34 @@\n+// edition:2015\n+\n+#![feature(futures_api, async_await)]\n+\n+async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+\n+fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition\n+\n+async fn async_baz() { //~ ERROR `async fn` is not permitted in the 2015 edition\n+    async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+}\n+\n+struct Foo {}\n+\n+impl Foo {\n+    async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+}\n+\n+trait Bar {\n+    async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+                      //~^ ERROR trait fns cannot be declared `async`\n+}\n+\n+fn main() {\n+    macro_rules! accept_item { ($x:item) => {} }\n+\n+    accept_item! {\n+        async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+    }\n+\n+    let inside_closure = || {\n+        async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+    };\n+}"}, {"sha": "1ad907aa7eb43fd0288d976147bcd68239b630f1", "filename": "src/test/ui/editions/edition-deny-async-fns-2015.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-deny-async-fns-2015.stderr?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -0,0 +1,58 @@\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+   |\n+LL | async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   | ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+   |\n+LL | fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |            ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+   |\n+LL |     async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+   |\n+LL | async fn async_baz() { //~ ERROR `async fn` is not permitted in the 2015 edition\n+   | ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:32:9\n+   |\n+LL |         async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |         ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+   |\n+LL |         async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |         ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+   |\n+LL |     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^\n+\n+error[E0706]: trait fns cannot be declared `async`\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   |     ^^^^^\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0670, E0706.\n+For more information about an error, try `rustc --explain E0670`."}, {"sha": "b6ab8ae0a9bc7c6b4a27f080194d07dc8e674bf6", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -2,7 +2,8 @@\n \n #![feature(futures_api)]\n \n-async fn foo() {} //~ ERROR async fn is unstable\n+async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+                  //~^ ERROR async fn is unstable\n \n fn main() {\n     let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`"}, {"sha": "58051153e1f0df72c43f74f9a6f5e4b09a54eb56", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -1,24 +1,30 @@\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n+   |\n+LL | async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+   | ^^^^^\n+\n error[E0422]: cannot find struct, variant or union type `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:8:13\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:9:13\n    |\n LL |     let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`\n    |             ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:9:13\n+  --> $DIR/feature-gate-async-await-2015-edition.rs:10:13\n    |\n LL |     let _ = async || { true }; //~ ERROR cannot find value `async` in this scope\n    |             ^^^^^ not found in this scope\n \n error[E0658]: async fn is unstable (see issue #50547)\n   --> $DIR/feature-gate-async-await-2015-edition.rs:5:1\n    |\n-LL | async fn foo() {} //~ ERROR async fn is unstable\n+LL | async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0422, E0425, E0658.\n+Some errors occurred: E0422, E0425, E0658, E0670.\n For more information about an error, try `rustc --explain E0422`."}, {"sha": "40642523be255af7651ebd43621f3ec2f6dc7fbd", "filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden when using `async` and `await`.\n+\n+#![feature(await_macro, async_await, futures_api, generators)]\n+\n+async fn recursive_async_function() -> () { //~ ERROR\n+    await!(recursive_async_function());\n+}\n+\n+fn main() {}"}, {"sha": "acdeabb2f9892a3b429fada5afe37f14c961372a", "filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-async-impl-trait-type.stderr?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -0,0 +1,11 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-async-impl-trait-type.rs:7:40\n+   |\n+LL | async fn recursive_async_function() -> () { //~ ERROR\n+   |                                        ^^ expands to self-referential type\n+   |\n+   = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-async-impl-trait-type.rs:7:43: 9:2 {impl std::future::Future, ()}]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "869876dc6a88a3e6c7f53a5cb129a3044227125f", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.rs?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -1,7 +1,7 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden.\n \n-#![feature(await_macro, async_await, futures_api, generators)]\n+#![feature(futures_api, generators)]\n \n fn option(i: i32) -> impl Sized { //~ ERROR\n     if i < 0 {\n@@ -62,10 +62,6 @@ fn generator_hold() -> impl Sized { //~ ERROR\n     }\n }\n \n-async fn recursive_async_function() -> () { //~ ERROR\n-    await!(recursive_async_function());\n-}\n-\n fn use_fn_ptr() -> impl Sized { // OK, error already reported\n     fn_ptr()\n }"}, {"sha": "96494229fd339f6d70e97d85d19ba63146b35e21", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f84a8cf28a5e914ae13f4d8d9c15468268e415d4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr?ref=f84a8cf28a5e914ae13f4d8d9c15468268e415d4", "patch": "@@ -95,29 +95,21 @@ LL | fn generator_hold() -> impl Sized { //~ ERROR\n    = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:58:5: 62:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:65:40\n-   |\n-LL | async fn recursive_async_function() -> () { //~ ERROR\n-   |                                        ^^ expands to self-referential type\n-   |\n-   = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-impl-trait-type.rs:65:43: 67:2 {impl std::future::Future, ()}]>`\n-\n-error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:73:26\n+  --> $DIR/recursive-impl-trait-type.rs:69:26\n    |\n LL | fn mutual_recursion() -> impl Sync { //~ ERROR\n    |                          ^^^^^^^^^ expands to self-referential type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:77:28\n+  --> $DIR/recursive-impl-trait-type.rs:73:28\n    |\n LL | fn mutual_recursion_b() -> impl Sized { //~ ERROR\n    |                            ^^^^^^^^^^ expands to self-referential type\n    |\n    = note: type resolves to itself\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0720`."}]}