{"sha": "023274483e5b61202c623352452cf17fcf455a6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMzI3NDQ4M2U1YjYxMjAyYzYyMzM1MjQ1MmNmMTdmY2Y0NTVhNmQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-03T09:02:01Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-23T22:58:02Z"}, "message": "Changed `check_stability` to take an `Option<NodeId>` instead of `NodeId`.\n\nThis clarifies the intent of whether to emit deprecated lint or not.", "tree": {"sha": "398d69f4afd5923badd5ab9d781820c25a5bed38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/398d69f4afd5923badd5ab9d781820c25a5bed38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/023274483e5b61202c623352452cf17fcf455a6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlq1hnoACgkQ/vbIBR0O\nATyQbRAAnlTOmmwj9V88sOBD8Qvto+92PwDvX4jLhxKE7izQoN0U3ElfPVHqTvgU\nUK1xzwgJ31vPr7u17xDsqm97qE0XaZGWLH/UpWayVxesE6iogTR4/A3npkTmRPSw\noK6lYHsFDYze4xrqEQmZZH8upVtefgOpGitCAM92OnpiPSYfd5BzpISq0vN+G9Ir\nX6JqC+0h9QXSFil9OgGFufW82ye+I2QaP76D5GmMl8Ec+7Umy3CBMscx7nj2BngA\nC5gmErXeyT6/njqj3LokereIW5A5DoheEXT/r44dzUu7IdMlZ0HqrQCyM2gSc9Z3\nQY5oZWeYh4XcZMUDL04m1bVNkwSK6xP9e/TtYaBbG8SI7tAKQP9GP7mInusmtIjI\n3YDZFOvrk/IREkZeK+OUgG/FbtWiHc0JYXb1E2+RWZ2EXxRWs8uvveAgmSwT6W28\nMePnxwEPYG4FaaB167U1PBr5CppluZKiqAm4mWr8E1hnUzGpGEIhJZ88mV98xEHC\nSqZ74EaneW0kKMnGDn0YU7Q41PKim2k7B2bDaH3XevQ/z0PAmWf1+jKkwaRZpkeY\nilRB1AXWN69gTNbdBHhYXTjqZwh4XgqbSKz28D3H5dpObm3MSb72Jik21F9FZGBh\nA35+TdOBfQnXrX1GYBnxIxsyostYYhC0sZTqhEh3z1DBecd3BpY=\n=HY8P\n-----END PGP SIGNATURE-----", "payload": "tree 398d69f4afd5923badd5ab9d781820c25a5bed38\nparent abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5\nauthor kennytm <kennytm@gmail.com> 1520067721 +0800\ncommitter kennytm <kennytm@gmail.com> 1521845882 +0800\n\nChanged `check_stability` to take an `Option<NodeId>` instead of `NodeId`.\n\nThis clarifies the intent of whether to emit deprecated lint or not.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/023274483e5b61202c623352452cf17fcf455a6d", "html_url": "https://github.com/rust-lang/rust/commit/023274483e5b61202c623352452cf17fcf455a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/023274483e5b61202c623352452cf17fcf455a6d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5", "html_url": "https://github.com/rust-lang/rust/commit/abf4d8babfebcdad66599c50bf5b6ae3e5bcbeb5"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "29c8ac046b815f43b2ecdb8f8ea29d23350db124", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=023274483e5b61202c623352452cf17fcf455a6d", "patch": "@@ -527,17 +527,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Evaluates the stability of an item.\n     ///\n-    /// Returns `None` if the item is stable, or unstable but the corresponding `#![feature]` has\n-    /// been provided. Returns the tuple `Some((feature, reason, issue))` of the offending unstable\n-    /// feature otherwise.\n-    pub fn eval_stability(self, def_id: DefId, id: NodeId, span: Span) -> EvalResult {\n+    /// Returns `EvalResult::Allow` if the item is stable, or unstable but the corresponding\n+    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending\n+    /// unstable feature otherwise.\n+    ///\n+    /// If `id` is `Some(_)`, this function will also check if the item at `def_id` has been\n+    /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n+    /// `id`.\n+    pub fn eval_stability(self, def_id: DefId, id: Option<NodeId>, span: Span) -> EvalResult {\n         if span.allows_unstable() {\n             debug!(\"stability: \\\n                     skipping span={:?} since it is internal\", span);\n             return EvalResult::Allow;\n         }\n \n-        let lint_deprecated = |def_id: DefId, note: Option<Symbol>| {\n+        let lint_deprecated = |def_id: DefId, id: NodeId, note: Option<Symbol>| {\n             let path = self.item_path_str(def_id);\n \n             let msg = if let Some(note) = note {\n@@ -547,22 +551,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             self.lint_node(lint::builtin::DEPRECATED, id, span, &msg);\n+            if id == ast::DUMMY_NODE_ID {\n+                span_bug!(span, \"emitted a deprecated lint with dummy node id: {:?}\", def_id);\n+            }\n         };\n \n         // Deprecated attributes apply in-crate and cross-crate.\n-        if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n-            let skip = if id == ast::DUMMY_NODE_ID {\n-                true\n-            } else {\n+        if let Some(id) = id {\n+            if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n                 let parent_def_id = self.hir.local_def_id(self.hir.get_parent(id));\n-                self.lookup_deprecation_entry(parent_def_id).map_or(false, |parent_depr| {\n-                    parent_depr.same_origin(&depr_entry)\n-                })\n+                let skip = self.lookup_deprecation_entry(parent_def_id)\n+                    .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n+                if !skip {\n+                    lint_deprecated(def_id, id, depr_entry.attr.note);\n+                }\n             };\n-\n-            if !skip {\n-                lint_deprecated(def_id, depr_entry.attr.note);\n-            }\n         }\n \n         let is_staged_api = self.lookup_stability(DefId {\n@@ -579,8 +582,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some(&Stability{rustc_depr: Some(attr::RustcDeprecation { reason, .. }), ..})\n                 = stability {\n-            if id != ast::DUMMY_NODE_ID {\n-                lint_deprecated(def_id, Some(reason));\n+            if let Some(id) = id {\n+                lint_deprecated(def_id, id, Some(reason));\n             }\n         }\n \n@@ -629,7 +632,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n+    /// Checks if an item is stable or error out.\n+    ///\n+    /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not\n+    /// exist, emits an error.\n+    ///\n+    /// Additionally, this function will also check if the item is deprecated. If so, and `id` is\n+    /// not `None`, a deprecated lint attached to `id` will be emitted.\n+    pub fn check_stability(self, def_id: DefId, id: Option<NodeId>, span: Span) {\n         match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue } => {\n@@ -687,7 +697,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     None => return,\n                 };\n                 let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n-                self.tcx.check_stability(def_id, item.id, item.span);\n+                self.tcx.check_stability(def_id, Some(item.id), item.span);\n             }\n \n             // For implementations of traits, check the stability of each item\n@@ -700,8 +710,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                         let trait_item_def_id = self.tcx.associated_items(trait_did)\n                             .find(|item| item.name == impl_item.name).map(|item| item.def_id);\n                         if let Some(def_id) = trait_item_def_id {\n-                            // Pass `DUMMY_NODE_ID` to skip deprecation warnings.\n-                            self.tcx.check_stability(def_id, ast::DUMMY_NODE_ID, impl_item.span);\n+                            // Pass `None` to skip deprecation warnings.\n+                            self.tcx.check_stability(def_id, None, impl_item.span);\n                         }\n                     }\n                 }\n@@ -737,7 +747,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         match path.def {\n             Def::Local(..) | Def::Upvar(..) |\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}\n-            _ => self.tcx.check_stability(path.def.def_id(), id, path.span)\n+            _ => self.tcx.check_stability(path.def.def_id(), Some(id), path.span)\n         }\n         intravisit::walk_path(self, path)\n     }"}, {"sha": "385154152b3736b250cd87d4e4ff21d36ef2b840", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=023274483e5b61202c623352452cf17fcf455a6d", "patch": "@@ -530,7 +530,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             let msg = format!(\"associated type `{}` is private\", binding.item_name);\n             tcx.sess.span_err(binding.span, &msg);\n         }\n-        tcx.check_stability(assoc_ty.def_id, ref_id, binding.span);\n+        tcx.check_stability(assoc_ty.def_id, Some(ref_id), binding.span);\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {\n@@ -868,7 +868,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             let msg = format!(\"{} `{}` is private\", def.kind_name(), assoc_name);\n             tcx.sess.span_err(span, &msg);\n         }\n-        tcx.check_stability(item.def_id, ref_id, span);\n+        tcx.check_stability(item.def_id, Some(ref_id), span);\n \n         (ty, def)\n     }"}, {"sha": "00c3b2278098453abcd241e95bd8aeb7b9987bc4", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=023274483e5b61202c623352452cf17fcf455a6d", "patch": "@@ -861,7 +861,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 let field_ty = self.field_ty(subpat.span, &variant.fields[i], substs);\n                 self.check_pat_walk(&subpat, field_ty, def_bm, true);\n \n-                self.tcx.check_stability(variant.fields[i].did, pat.id, subpat.span);\n+                self.tcx.check_stability(variant.fields[i].did, Some(pat.id), subpat.span);\n             }\n         } else {\n             let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n@@ -923,7 +923,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                     vacant.insert(span);\n                     field_map.get(&field.name)\n                         .map(|f| {\n-                            self.tcx.check_stability(f.did, pat_id, span);\n+                            self.tcx.check_stability(f.did, Some(pat_id), span);\n \n                             self.field_ty(span, f, substs)\n                         })"}, {"sha": "54f41e65d06a0bb08d5fc8e7f4258aeaf418e921", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=023274483e5b61202c623352452cf17fcf455a6d", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         .unwrap().insert(import_def_id);\n         }\n \n-        self.tcx.check_stability(pick.item.def_id, call_expr.id, span);\n+        self.tcx.check_stability(pick.item.def_id, Some(call_expr.id), span);\n \n         let result = self.confirm_method(span,\n                                          self_expr,\n@@ -371,7 +371,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         let def = pick.item.def();\n-        self.tcx.check_stability(def.def_id(), expr_id, span);\n+        self.tcx.check_stability(def.def_id(), Some(expr_id), span);\n \n         Ok(def)\n     }"}, {"sha": "ede7703b619662c8345b9b182eafb8845d4e99fd", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=023274483e5b61202c623352452cf17fcf455a6d", "patch": "@@ -1008,7 +1008,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         if let Some(uc) = unstable_candidates {\n             applicable_candidates.retain(|&(p, _)| {\n                 if let stability::EvalResult::Deny { feature, .. } =\n-                    self.tcx.eval_stability(p.item.def_id, ast::DUMMY_NODE_ID, self.span)\n+                    self.tcx.eval_stability(p.item.def_id, None, self.span)\n                 {\n                     uc.push((p, feature));\n                     return false;"}, {"sha": "9e302c0ffb39ab83b13879a8da9e2e3699fd0ded", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023274483e5b61202c623352452cf17fcf455a6d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=023274483e5b61202c623352452cf17fcf455a6d", "patch": "@@ -3078,7 +3078,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             self.apply_adjustments(base, adjustments);\n                             autoderef.finalize();\n \n-                            self.tcx.check_stability(field.did, expr.id, expr.span);\n+                            self.tcx.check_stability(field.did, Some(expr.id), expr.span);\n \n                             return field_ty;\n                         }\n@@ -3219,7 +3219,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(field) = fields.iter().find(|f| f.name.to_ident() == ident) {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if field.vis.is_accessible_from(def_scope, self.tcx) {\n-                            self.tcx.check_stability(field.did, expr.id, expr.span);\n+                            self.tcx.check_stability(field.did, Some(expr.id), expr.span);\n                             Some(field_ty)\n                         } else {\n                             private_candidate = Some((base_def.did, field_ty));\n@@ -3364,7 +3364,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // struct-like enums (yet...), but it's definitely not\n                 // a bug to have construct one.\n                 if adt_kind != ty::AdtKind::Enum {\n-                    tcx.check_stability(v_field.did, expr_id, field.span);\n+                    tcx.check_stability(v_field.did, Some(expr_id), field.span);\n                 }\n \n                 self.field_ty(field.span, v_field, substs)"}]}