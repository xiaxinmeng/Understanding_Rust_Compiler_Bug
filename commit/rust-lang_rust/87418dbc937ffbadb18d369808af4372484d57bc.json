{"sha": "87418dbc937ffbadb18d369808af4372484d57bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDE4ZGJjOTM3ZmZiYWRiMThkMzY5ODA4YWY0MzcyNDg0ZDU3YmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T16:44:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T16:44:38Z"}, "message": "Prevent pretty-printer from trying to consume stdin twice\n\nWhy this didn't fail on my machine, I don't know.", "tree": {"sha": "5cbc03dbb2b3572f8ed672160cf740836b5ddebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cbc03dbb2b3572f8ed672160cf740836b5ddebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87418dbc937ffbadb18d369808af4372484d57bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87418dbc937ffbadb18d369808af4372484d57bc", "html_url": "https://github.com/rust-lang/rust/commit/87418dbc937ffbadb18d369808af4372484d57bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87418dbc937ffbadb18d369808af4372484d57bc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d5a9846f6bfe0fe37e2a81c9bd74178ff1f3b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d5a9846f6bfe0fe37e2a81c9bd74178ff1f3b4", "html_url": "https://github.com/rust-lang/rust/commit/54d5a9846f6bfe0fe37e2a81c9bd74178ff1f3b4"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "a8c1cc8118ade4b914e60cef7ac9eccfd92d30ec", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/87418dbc937ffbadb18d369808af4372484d57bc/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87418dbc937ffbadb18d369808af4372484d57bc/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=87418dbc937ffbadb18d369808af4372484d57bc", "patch": "@@ -76,14 +76,15 @@ fn parse_cfgspecs(cfgspecs: [str]) -> ast::crate_cfg {\n \n fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n \n-fn parse_input(sess: session, cfg: ast::crate_cfg, input: str) ->\n-   @ast::crate {\n-    if !input_is_stdin(input) {\n+fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n+    -> {crate: @ast::crate, src: str} {\n+    let src = get_input_str(sess, input);\n+    let crate = if !input_is_stdin(input) {\n         parser::parse_crate_from_file(input, cfg, sess.parse_sess)\n     } else {\n-        let src = get_input_str(sess, input);\n         parser::parse_crate_from_source_str(input, src, cfg, sess.parse_sess)\n-    }\n+    };\n+    {crate: crate, src: src}\n }\n \n fn get_input_str(sess: session, infile: str) -> str {\n@@ -140,11 +141,11 @@ enum compile_upto {\n fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                 input: str, upto: compile_upto,\n                 outputs: option::t<output_filenames>)\n-    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>} {\n+    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>, src: str} {\n     let time_passes = sess.opts.time_passes;\n-    let crate =\n+    let {crate, src} =\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n-    if upto == cu_parse { ret {crate: crate, tcx: none}; }\n+    if upto == cu_parse { ret {crate: crate, tcx: none, src: src}; }\n \n     sess.building_library =\n         session::building_library(sess.opts.crate_type, crate);\n@@ -159,7 +160,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"expansion\",\n              bind syntax::ext::expand::expand_crate(sess, crate));\n \n-    if upto == cu_expand { ret {crate: crate, tcx: none}; }\n+    if upto == cu_expand { ret {crate: crate, tcx: none, src: src}; }\n     if sess.opts.libcore {\n         crate = inject_libcore_reference(sess, crate);\n     }\n@@ -182,7 +183,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         time(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, impl_map, crate));\n \n-    if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx)}; }\n+    if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n \n     time(time_passes, \"block-use checking\",\n          bind middle::block_use::check_crate(ty_cx, crate));\n@@ -203,7 +204,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n \n-    if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx)}; }\n+    if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n     let outputs = option::get(outputs);\n \n     let (llmod, link_meta) =\n@@ -219,12 +220,12 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         sess.opts.output_type != link::output_type_exe ||\n             sess.opts.static && sess.building_library;\n \n-    if stop_after_codegen { ret {crate: crate, tcx: some(ty_cx)}; }\n+    if stop_after_codegen { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n \n     time(time_passes, \"Linking\",\n          bind link::link_binary(sess, outputs.obj_filename,\n                                 outputs.out_filename, link_meta));\n-    ret {crate: crate, tcx: some(ty_cx)};\n+    ret {crate: crate, tcx: some(ty_cx), src: src};\n }\n \n fn compile_input(sess: session, cfg: ast::crate_cfg, input: str,\n@@ -283,8 +284,7 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n       ppm_typed. { cu_typeck }\n       _ { cu_parse }\n     };\n-    let {crate, tcx} = compile_upto(sess, cfg, input, upto, none);\n-    let src = get_input_str(sess, input);\n+    let {crate, tcx, src} = compile_upto(sess, cfg, input, upto, none);\n \n     let ann: pprust::pp_ann = pprust::no_ann();\n     alt ppm {"}]}