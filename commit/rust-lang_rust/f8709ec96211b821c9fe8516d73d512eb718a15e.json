{"sha": "f8709ec96211b821c9fe8516d73d512eb718a15e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzA5ZWM5NjIxMWI4MjFjOWZlODUxNmQ3M2Q1MTJlYjcxOGExNWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T22:24:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T22:24:34Z"}, "message": "Rollup merge of #83841 - Amanieu:asm_clobber_feature, r=nagisa\n\nAllow clobbering unsupported registers in asm!\n\nPreviously registers could only be marked as clobbered if the target feature for that register was enabled. This restriction is now removed.\n\ncc #81092\n\nr? ``@nagisa``", "tree": {"sha": "0517691d8a4a555d2d7a68fbed6baf1d381310fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0517691d8a4a555d2d7a68fbed6baf1d381310fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8709ec96211b821c9fe8516d73d512eb718a15e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgajyjCRBK7hj4Ov3rIwAAdHIIAJgqc//2Poyq419vngkyc+KE\nafa5hMxBNq2b/whIIQ6IoogEO9YkEYzl7x5/GtamU8ozKof6wlCmV2f5YyhBFqIf\n0e+zHdwXB8JkpMxRZdPyZ2nEcuJaHXE38lK6we/i20FMDW49TxWwcmQ8RJ3sx0Ld\nZ/ygs/S+8U24crNLe4wUUATtA+BzrhRzqmLB7wibQj1AxgaWiTWfmTjVXnO2byN+\ncxKfm+FgWkqdW7J5eE3dWAKrr44x9y9biNi+yw3S720rs2VwHrNFxmCNI+Pnxqwz\nKCmLuQ4+KcLjuG6TkuxBrUjx0T7sgA8eANNfAAO62AR65129p0rG5qMBU5R0CfY=\n=ZikX\n-----END PGP SIGNATURE-----\n", "payload": "tree 0517691d8a4a555d2d7a68fbed6baf1d381310fa\nparent 3c2e4ff525a710987c4e01805edf051740cb022b\nparent 31d0459207d3623cabf931ed6b272b45592c2a7e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617575074 +0200\ncommitter GitHub <noreply@github.com> 1617575074 +0200\n\nRollup merge of #83841 - Amanieu:asm_clobber_feature, r=nagisa\n\nAllow clobbering unsupported registers in asm!\n\nPreviously registers could only be marked as clobbered if the target feature for that register was enabled. This restriction is now removed.\n\ncc #81092\n\nr? ``@nagisa``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8709ec96211b821c9fe8516d73d512eb718a15e", "html_url": "https://github.com/rust-lang/rust/commit/f8709ec96211b821c9fe8516d73d512eb718a15e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8709ec96211b821c9fe8516d73d512eb718a15e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c2e4ff525a710987c4e01805edf051740cb022b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2e4ff525a710987c4e01805edf051740cb022b", "html_url": "https://github.com/rust-lang/rust/commit/3c2e4ff525a710987c4e01805edf051740cb022b"}, {"sha": "31d0459207d3623cabf931ed6b272b45592c2a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d0459207d3623cabf931ed6b272b45592c2a7e", "html_url": "https://github.com/rust-lang/rust/commit/31d0459207d3623cabf931ed6b272b45592c2a7e"}], "stats": {"total": 138, "additions": 104, "deletions": 34}, "files": [{"sha": "d5a9d7ee6e3666f3fb3800ddc4afa3f081441611", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f8709ec96211b821c9fe8516d73d512eb718a15e/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8709ec96211b821c9fe8516d73d512eb718a15e/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=f8709ec96211b821c9fe8516d73d512eb718a15e", "patch": "@@ -1499,46 +1499,64 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // previous iteration.\n                 required_features.clear();\n \n-                // Validate register classes against currently enabled target\n-                // features. We check that at least one type is available for\n-                // the current target.\n                 let reg_class = reg.reg_class();\n                 if reg_class == asm::InlineAsmRegClass::Err {\n                     continue;\n                 }\n-                for &(_, feature) in reg_class.supported_types(asm_arch.unwrap()) {\n-                    if let Some(feature) = feature {\n-                        if self.sess.target_features.contains(&Symbol::intern(feature)) {\n+\n+                // We ignore target feature requirements for clobbers: if the\n+                // feature is disabled then the compiler doesn't care what we\n+                // do with the registers.\n+                //\n+                // Note that this is only possible for explicit register\n+                // operands, which cannot be used in the asm string.\n+                let is_clobber = matches!(\n+                    op,\n+                    hir::InlineAsmOperand::Out {\n+                        reg: asm::InlineAsmRegOrRegClass::Reg(_),\n+                        late: _,\n+                        expr: None\n+                    }\n+                );\n+\n+                if !is_clobber {\n+                    // Validate register classes against currently enabled target\n+                    // features. We check that at least one type is available for\n+                    // the current target.\n+                    for &(_, feature) in reg_class.supported_types(asm_arch.unwrap()) {\n+                        if let Some(feature) = feature {\n+                            if self.sess.target_features.contains(&Symbol::intern(feature)) {\n+                                required_features.clear();\n+                                break;\n+                            } else {\n+                                required_features.push(feature);\n+                            }\n+                        } else {\n                             required_features.clear();\n                             break;\n-                        } else {\n-                            required_features.push(feature);\n                         }\n-                    } else {\n-                        required_features.clear();\n-                        break;\n                     }\n-                }\n-                // We are sorting primitive strs here and can use unstable sort here\n-                required_features.sort_unstable();\n-                required_features.dedup();\n-                match &required_features[..] {\n-                    [] => {}\n-                    [feature] => {\n-                        let msg = format!(\n-                            \"register class `{}` requires the `{}` target feature\",\n-                            reg_class.name(),\n-                            feature\n-                        );\n-                        sess.struct_span_err(op_sp, &msg).emit();\n-                    }\n-                    features => {\n-                        let msg = format!(\n-                            \"register class `{}` requires at least one target feature: {}\",\n-                            reg_class.name(),\n-                            features.join(\", \")\n-                        );\n-                        sess.struct_span_err(op_sp, &msg).emit();\n+                    // We are sorting primitive strs here and can use unstable sort here\n+                    required_features.sort_unstable();\n+                    required_features.dedup();\n+                    match &required_features[..] {\n+                        [] => {}\n+                        [feature] => {\n+                            let msg = format!(\n+                                \"register class `{}` requires the `{}` target feature\",\n+                                reg_class.name(),\n+                                feature\n+                            );\n+                            sess.struct_span_err(op_sp, &msg).emit();\n+                        }\n+                        features => {\n+                            let msg = format!(\n+                                \"register class `{}` requires at least one target feature: {}\",\n+                                reg_class.name(),\n+                                features.join(\", \")\n+                            );\n+                            sess.struct_span_err(op_sp, &msg).emit();\n+                        }\n                     }\n                 }\n "}, {"sha": "84b091d8d4d79ec4d15710ad20356a9bd21f658b", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f8709ec96211b821c9fe8516d73d512eb718a15e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8709ec96211b821c9fe8516d73d512eb718a15e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=f8709ec96211b821c9fe8516d73d512eb718a15e", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::{bug, span_bug};\n-use rustc_span::{Pos, Span};\n+use rustc_span::{Pos, Span, Symbol};\n use rustc_target::abi::*;\n use rustc_target::asm::*;\n \n@@ -125,15 +125,39 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n         // Collect the types of output operands\n         let mut constraints = vec![];\n+        let mut clobbers = vec![];\n         let mut output_types = vec![];\n         let mut op_idx = FxHashMap::default();\n         for (idx, op) in operands.iter().enumerate() {\n             match *op {\n                 InlineAsmOperandRef::Out { reg, late, place } => {\n+                    let is_target_supported = |reg_class: InlineAsmRegClass| {\n+                        for &(_, feature) in reg_class.supported_types(asm_arch) {\n+                            if let Some(feature) = feature {\n+                                if self.tcx.sess.target_features.contains(&Symbol::intern(feature))\n+                                {\n+                                    return true;\n+                                }\n+                            } else {\n+                                // Register class is unconditionally supported\n+                                return true;\n+                            }\n+                        }\n+                        false\n+                    };\n+\n                     let mut layout = None;\n                     let ty = if let Some(ref place) = place {\n                         layout = Some(&place.layout);\n                         llvm_fixup_output_type(self.cx, reg.reg_class(), &place.layout)\n+                    } else if !is_target_supported(reg.reg_class()) {\n+                        // We turn discarded outputs into clobber constraints\n+                        // if the target feature needed by the register class is\n+                        // disabled. This is necessary otherwise LLVM will try\n+                        // to actually allocate a register for the dummy output.\n+                        assert!(matches!(reg, InlineAsmRegOrRegClass::Reg(_)));\n+                        clobbers.push(format!(\"~{}\", reg_to_llvm(reg, None)));\n+                        continue;\n                     } else {\n                         // If the output is discarded, we don't really care what\n                         // type is used. We're just using this to tell LLVM to\n@@ -244,6 +268,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n         }\n \n+        constraints.append(&mut clobbers);\n         if !options.contains(InlineAsmOptions::PRESERVES_FLAGS) {\n             match asm_arch {\n                 InlineAsmArch::AArch64 | InlineAsmArch::Arm => {"}, {"sha": "25d8629a38f1b177d64448ac3cb7ed48eb62587f", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8709ec96211b821c9fe8516d73d512eb718a15e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8709ec96211b821c9fe8516d73d512eb718a15e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=f8709ec96211b821c9fe8516d73d512eb718a15e", "patch": "@@ -306,13 +306,19 @@ fn call_foo(arg: i32) {\n             sym foo,\n             // 1st argument in rdi, which is caller-saved\n             inout(\"rdi\") arg => _,\n-            // All caller-saved registers must be marked as clobberred\n+            // All caller-saved registers must be marked as clobbered\n             out(\"rax\") _, out(\"rcx\") _, out(\"rdx\") _, out(\"rsi\") _,\n             out(\"r8\") _, out(\"r9\") _, out(\"r10\") _, out(\"r11\") _,\n             out(\"xmm0\") _, out(\"xmm1\") _, out(\"xmm2\") _, out(\"xmm3\") _,\n             out(\"xmm4\") _, out(\"xmm5\") _, out(\"xmm6\") _, out(\"xmm7\") _,\n             out(\"xmm8\") _, out(\"xmm9\") _, out(\"xmm10\") _, out(\"xmm11\") _,\n             out(\"xmm12\") _, out(\"xmm13\") _, out(\"xmm14\") _, out(\"xmm15\") _,\n+            // Also mark AVX-512 registers as clobbered. This is accepted by the\n+            // compiler even if AVX-512 is not enabled on the current target.\n+            out(\"xmm16\") _, out(\"xmm17\") _, out(\"xmm18\") _, out(\"xmm19\") _,\n+            out(\"xmm20\") _, out(\"xmm21\") _, out(\"xmm22\") _, out(\"xmm13\") _,\n+            out(\"xmm24\") _, out(\"xmm25\") _, out(\"xmm26\") _, out(\"xmm27\") _,\n+            out(\"xmm28\") _, out(\"xmm29\") _, out(\"xmm30\") _, out(\"xmm31\") _,\n         )\n     }\n }"}, {"sha": "f637cdcd2344057c1c6b62edfee93befc38a2098", "filename": "src/test/codegen/asm-target-clobbers.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8709ec96211b821c9fe8516d73d512eb718a15e/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8709ec96211b821c9fe8516d73d512eb718a15e/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-target-clobbers.rs?ref=f8709ec96211b821c9fe8516d73d512eb718a15e", "patch": "@@ -0,0 +1,21 @@\n+// only-x86_64\n+// revisions: base avx512\n+// [avx512]compile-flags: -C target-feature=+avx512f\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm)]\n+\n+// CHECK-LABEL: @avx512_clobber\n+// base: call void asm sideeffect inteldialect \"\", \"~{xmm31}\"()\n+// avx512: call float asm sideeffect inteldialect \"\", \"=&{xmm31}\"()\n+#[no_mangle]\n+pub unsafe fn avx512_clobber() {\n+    asm!(\"\", out(\"zmm31\") _, options(nostack, nomem, preserves_flags));\n+}\n+\n+// CHECK-LABEL: @eax_clobber\n+// CHECK: call i32 asm sideeffect inteldialect \"\", \"=&{ax}\"()\n+#[no_mangle]\n+pub unsafe fn eax_clobber() {\n+    asm!(\"\", out(\"eax\") _, options(nostack, nomem, preserves_flags));\n+}"}]}