{"sha": "3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNDZiODJkMjlhYzZhYjliZGI2YTQ4OGU1NWRjZjY1ODFiZjdkMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T09:49:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T09:49:12Z"}, "message": "Auto merge of #85332 - RalfJung:ptr-in-str, r=oli-obk\n\nCTFE validation: handle pointers in str\n\nI also finally learned how I can match *some* NOTEs in a ui test without matching all of them, and applied that to some const tests in the 2nd commit where I added NOTE because I did not know what I was doing. I can separate this into its own PR if you prefer.\n\nFixes https://github.com/rust-lang/rust/issues/83182\nr? `@oli-obk`", "tree": {"sha": "8a510e96aba8e04cc8370f63d16b550d12a0c370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a510e96aba8e04cc8370f63d16b550d12a0c370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "html_url": "https://github.com/rust-lang/rust/commit/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ecdfd115a353f65d4b21056b23c7074339be6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ecdfd115a353f65d4b21056b23c7074339be6e", "html_url": "https://github.com/rust-lang/rust/commit/94ecdfd115a353f65d4b21056b23c7074339be6e"}, {"sha": "70c1cf151e47c8a94086012f4d04aef3954a2f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c1cf151e47c8a94086012f4d04aef3954a2f85", "html_url": "https://github.com/rust-lang/rust/commit/70c1cf151e47c8a94086012f4d04aef3954a2f85"}], "stats": {"total": 230, "additions": 111, "deletions": 119}, "files": [{"sha": "83b0d0528f7714f3120b6abe8cfcc866f65ae834", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -833,6 +833,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     self.ecx.memory.read_bytes(mplace.ptr, Size::from_bytes(len)),\n                     self.path,\n                     err_ub!(InvalidUninitBytes(..)) => { \"uninitialized data in `str`\" },\n+                    err_unsup!(ReadPointerAsBytes) => { \"a pointer in `str`\" },\n                 );\n             }\n             ty::Array(tys, ..) | ty::Slice(tys)"}, {"sha": "45c429c7eb0d50831381a5e4312707e2ae2c2a9c", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -3,13 +3,11 @@\n use std::mem;\n \n // Make sure we error with the right kind of error on a too large slice.\n-const TEST: () = { unsafe { //~ NOTE\n+const TEST: () = { unsafe {\n     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n     let _val = &*slice; //~ ERROR: any use of this value will cause an error\n-    //~| NOTE: slice is bigger than largest supported object\n-    //~| on by default\n+    //~| slice is bigger than largest supported object\n     //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE\n } };\n \n fn main() {}"}, {"sha": "224fbb62a46492d89d1d376e69b4e5e450fc26b3", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -6,7 +6,6 @@ LL | |     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n LL | |     let _val = &*slice;\n    | |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object\n LL | |\n-...  |\n LL | |\n LL | | } };\n    | |____-"}, {"sha": "ca825a1f5ed658eeaf0d09afe07afbe8c90b1d43", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -5,9 +5,7 @@\n \n const TEST: &u8 = &MY_STATIC;\n //~^ ERROR it is undefined behavior to use this value\n-//~| NOTE  encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "3352f0e1724bda54f20d417e4e4ef51544bb418c", "filename": "src/test/ui/consts/issue-83182.32bit.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.32bit.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-83182.rs:5:1\n+   |\n+LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[&()]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer in `str` at .<deref>.0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257e\u2500alloc3\u2500\u2500\u257c 01 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+           }\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "b75707207488d4bb24a134ecad24b7de80ce68c2", "filename": "src/test/ui/consts/issue-83182.64bit.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.64bit.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-83182.rs:5:1\n+   |\n+LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[&()]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer in `str` at .<deref>.0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+           }\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "55a0722e5ddd4a23c5cf8c3b8201e0ed802a23ed", "filename": "src/test/ui/consts/issue-83182.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-83182.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -0,0 +1,8 @@\n+// stderr-per-bitwidth\n+\n+use std::mem;\n+struct MyStr(str);\n+const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[&()]) };\n+//~^ ERROR: it is undefined behavior to use this value\n+//~| type validation failed: encountered a pointer in `str`\n+fn main() {}"}, {"sha": "64ebd0122673101521fd0ec9d09fbcd90dd6fbb0", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.32bit.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -3,8 +3,6 @@ error[E0080]: it is undefined behavior to use this value\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n-LL | |\n-LL | |\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n LL | | };\n@@ -16,12 +14,10 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:20:1\n+  --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n-LL | |\n-LL | |\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n LL | | };\n@@ -35,17 +31,17 @@ LL | | };\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:16:18\n+  --> $DIR/const_refers_to_static2.rs:14:18\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static2.rs:16:14\n+  --> $DIR/const_refers_to_static2.rs:14:14\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:25:6\n+  --> $DIR/const_refers_to_static2.rs:21:6\n    |\n LL |     &FOO\n    |      ^^^"}, {"sha": "4157b313f9f55f282599b335e3f1c3e0bf02864e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -3,8 +3,6 @@ error[E0080]: it is undefined behavior to use this value\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n-LL | |\n-LL | |\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n LL | | };\n@@ -16,12 +14,10 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:20:1\n+  --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n-LL | |\n-LL | |\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n LL | | };\n@@ -35,17 +31,17 @@ LL | | };\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:16:18\n+  --> $DIR/const_refers_to_static2.rs:14:18\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static2.rs:16:14\n+  --> $DIR/const_refers_to_static2.rs:14:14\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:25:6\n+  --> $DIR/const_refers_to_static2.rs:21:6\n    |\n LL |     &FOO\n    |      ^^^"}, {"sha": "8b8e262fb9dcaeb047941cae9a66f7aeabd7ce17", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -9,18 +9,14 @@ use std::sync::atomic::Ordering;\n // so they cause an immediate error when *defining* the const.\n \n const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { &*(&FOO as *const _ as *const usize) }\n };\n \n // ok some day perhaps\n const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     static FOO: usize = 0;\n     &FOO\n };"}, {"sha": "583b2ef6725107f94010bce6303f3852006db67b", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -3,8 +3,6 @@ error[E0080]: it is undefined behavior to use this value\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n-LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n@@ -15,18 +13,16 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n-LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO[0] }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n@@ -37,143 +33,141 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:27:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-...  |\n LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b381a25a63df29545750a96cd463443ca107e939", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -3,8 +3,6 @@ error[E0080]: it is undefined behavior to use this value\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n-LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n@@ -15,18 +13,16 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n-LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO[0] }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n@@ -37,143 +33,141 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:27:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-...  |\n LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4638d73fcbfc5ba4a3d3a3593e1f866f2e1996e5", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -10,36 +10,29 @@ extern crate static_cross_crate;\n // Sneaky: reference to a mutable static.\n // Allowing this would be a disaster for pattern matching, we could violate exhaustiveness checking!\n const SLICE_MUT: &[u8; 1] = { //~ ERROR undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     unsafe { &static_cross_crate::ZERO }\n };\n \n const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     unsafe { &static_cross_crate::ZERO[0] }\n };\n \n // Also test indirection that reads from other static. This causes a const_err.\n-#[warn(const_err)] //~ NOTE\n-const U8_MUT2: &u8 = { //~ NOTE\n+#[warn(const_err)]\n+const U8_MUT2: &u8 = {\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n     //~^ WARN [const_err]\n-    //~| NOTE constant accesses static\n+    //~| constant accesses static\n     //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE\n };\n-#[warn(const_err)] //~ NOTE\n-const U8_MUT3: &u8 = { //~ NOTE\n+#[warn(const_err)]\n+const U8_MUT3: &u8 = {\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN [const_err]\n-    //~| NOTE constant accesses static\n-    //~| NOTE in this expansion of panic!\n+    //~| constant accesses static\n     //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE\n };\n \n pub fn test(x: &[u8; 1]) -> bool {"}, {"sha": "0306a55af4e09bfa4139d67809d109e545e0229f", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -59,26 +59,18 @@ check!(!eq, unsafe { (FOO as *const usize as *const u8).offset(3) }, 0);\n // at runtime it would be zero and at compile-time it would not be zero.\n \n const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-//~^ NOTE\n \n const _: *const u8 =\n-//~^ NOTE\n     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE\n //~| WARN this was previously accepted by the compiler but is being phased out\n-//~| NOTE\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE cannot cast pointer to integer\n-//~| NOTE\n+//~| cannot cast pointer to integer\n //~| WARN this was previously accepted by the compiler but is being phased out\n-//~| NOTE\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE cannot cast pointer to integer\n-//~| NOTE\n+//~| cannot cast pointer to integer\n //~| WARN this was previously accepted by the compiler but is being phased out\n-//~| NOTE"}, {"sha": "943de47879b5369aa4409037efefd4eaf84b4b6b", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=3f46b82d29ac6ab9bdb6a488e55dcf6581bf7d26", "patch": "@@ -18,10 +18,9 @@ LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:66:33\n+  --> $DIR/ptr_comparisons.rs:64:33\n    |\n LL | / const _: *const u8 =\n-LL | |\n LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n    |                                   |\n@@ -31,7 +30,7 @@ LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 100\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:72:27\n+  --> $DIR/ptr_comparisons.rs:68:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -42,7 +41,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:79:27\n+  --> $DIR/ptr_comparisons.rs:73:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}