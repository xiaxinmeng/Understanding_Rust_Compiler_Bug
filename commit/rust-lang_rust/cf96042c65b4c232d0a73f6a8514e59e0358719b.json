{"sha": "cf96042c65b4c232d0a73f6a8514e59e0358719b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOTYwNDJjNjViNGMyMzJkMGE3M2Y2YTg1MTRlNTllMDM1ODcxOWI=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T18:57:21Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T19:16:10Z"}, "message": "move walk_ty() to utils module and rename to walk_ptrs_ty", "tree": {"sha": "7d4155d963ead92838fae9fb6cc4f5adeee076d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4155d963ead92838fae9fb6cc4f5adeee076d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf96042c65b4c232d0a73f6a8514e59e0358719b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf96042c65b4c232d0a73f6a8514e59e0358719b", "html_url": "https://github.com/rust-lang/rust/commit/cf96042c65b4c232d0a73f6a8514e59e0358719b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf96042c65b4c232d0a73f6a8514e59e0358719b/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc69fa342630e72dd5afecc7d24b2aa8f7e6043", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc69fa342630e72dd5afecc7d24b2aa8f7e6043", "html_url": "https://github.com/rust-lang/rust/commit/6bc69fa342630e72dd5afecc7d24b2aa8f7e6043"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "8aa4c6267607c05635db5095d68033163e6f6929", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=cf96042c65b4c232d0a73f6a8514e59e0358719b", "patch": "@@ -9,8 +9,7 @@ use rustc::middle::ty::{self, TypeVariants, TypeAndMut, MethodTraitItemId, ImplO\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n use syntax::ast::*;\n-use misc::walk_ty;\n-use utils::span_lint;\n+use utils::{span_lint, walk_ptrs_ty};\n \n declare_lint!(pub LEN_ZERO, Warn,\n               \"Warn when .is_empty() could be used instead of checking .len()\");\n@@ -136,7 +135,7 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n                 |iids| iids.iter().any(|i| is_is_empty(cx, i)))))\n     }\n \n-    let ty = &walk_ty(&cx.tcx.expr_ty(expr));\n+    let ty = &walk_ptrs_ty(&cx.tcx.expr_ty(expr));\n     match ty.sty {\n         ty::TyTrait(_) => cx.tcx.trait_item_def_ids.borrow().get(\n             &ty.ty_to_def_id().expect(\"trait impl not found\")).map_or(false,"}, {"sha": "a1b3dcb32b8aaf54b2999fde1f0bafa3f386054a", "filename": "src/misc.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=cf96042c65b4c232d0a73f6a8514e59e0358719b", "patch": "@@ -7,14 +7,7 @@ use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use rustc::middle::ty;\n use syntax::codemap::{Span, Spanned};\n \n-use utils::{match_path, snippet, span_lint, span_help_and_lint};\n-\n-pub fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n-    match ty.sty {\n-        ty::TyRef(_, ref tm) | ty::TyRawPtr(ref tm) => walk_ty(tm.ty),\n-        _ => ty\n-    }\n-}\n+use utils::{match_path, snippet, span_lint, span_help_and_lint, walk_ptrs_ty};\n \n /// Handles uncategorized lints\n /// Currently handles linting of if-let-able matches\n@@ -87,7 +80,7 @@ impl LintPass for StrToStringPass {\n         }\n \n         fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n-            match walk_ty(cx.tcx.expr_ty(expr)).sty {\n+            match walk_ptrs_ty(cx.tcx.expr_ty(expr)).sty {\n                 ty::TyStr => true,\n                 _ => false\n             }\n@@ -175,7 +168,7 @@ impl LintPass for FloatCmp {\n }\n \n fn is_float(cx: &Context, expr: &Expr) -> bool {\n-    if let ty::TyFloat(_) = walk_ty(cx.tcx.expr_ty(expr)).sty {\n+    if let ty::TyFloat(_) = walk_ptrs_ty(cx.tcx.expr_ty(expr)).sty {\n         true\n     } else {\n         false\n@@ -274,7 +267,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \n fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n     args.len() == 1 && if let ty::TyStr =\n-        walk_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n+        walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }\n \n declare_lint!(pub NEEDLESS_RETURN, Warn,"}, {"sha": "b6bc7654e4792453e8475f32c0cba7fe723f1b05", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=cf96042c65b4c232d0a73f6a8514e59e0358719b", "patch": "@@ -8,9 +8,8 @@ use rustc::middle::ty::TypeVariants::TyStruct;\n use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use eq_op::is_exp_equal;\n-use misc::walk_ty;\n use types::match_ty_unwrap;\n-use utils::{match_def_path, span_lint};\n+use utils::{match_def_path, span_lint, walk_ptrs_ty};\n \n declare_lint! {\n     pub STRING_ADD_ASSIGN,\n@@ -38,7 +37,7 @@ impl LintPass for StringAdd {\n }\n \n fn is_string(cx: &Context, e: &Expr) -> bool {\n-    if let TyStruct(did, _) = walk_ty(cx.tcx.expr_ty(e)).sty {\n+    if let TyStruct(did, _) = walk_ptrs_ty(cx.tcx.expr_ty(e)).sty {\n         match_def_path(cx, did.did, &[\"std\", \"string\", \"String\"])\n     } else { false }\n }"}, {"sha": "107f5c6f99b6ec05540a1810ba390be93b5a952b", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf96042c65b4c232d0a73f6a8514e59e0358719b/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=cf96042c65b4c232d0a73f6a8514e59e0358719b", "patch": "@@ -84,3 +84,11 @@ pub fn span_help_and_lint(cx: &Context, lint: &'static Lint, span: Span,\n         cx.sess().fileline_help(span, help);\n     }\n }\n+\n+/// return the base type for references and raw pointers\n+pub fn walk_ptrs_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n+    match ty.sty {\n+        ty::TyRef(_, ref tm) | ty::TyRawPtr(ref tm) => walk_ptrs_ty(tm.ty),\n+        _ => ty\n+    }\n+}"}]}