{"sha": "85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "node_id": "C_kwDOAAsO6NoAKDg1ZGQ3YjIyYjRmN2MyNWI1YmU0OGRjNDc3Zjg1Zjg0NTc1Y2Y2YjU", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-04T06:48:59Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:49:23Z"}, "message": "Use nohash_hasher, rm comment", "tree": {"sha": "e23e3c7b969e3b6e79cb5b7c33a75902078edda0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23e3c7b969e3b6e79cb5b7c33a75902078edda0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "html_url": "https://github.com/rust-lang/rust/commit/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1992a0d9004d9bdbb2a73942789831e9554dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1992a0d9004d9bdbb2a73942789831e9554dba", "html_url": "https://github.com/rust-lang/rust/commit/7e1992a0d9004d9bdbb2a73942789831e9554dba"}], "stats": {"total": 144, "additions": 21, "deletions": 123}, "files": [{"sha": "f7179e942424c9a052995fa5b1af1ce57146948c", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -917,7 +917,7 @@ version = \"0.0.0\"\n name = \"line-index\"\n version = \"0.1.0\"\n dependencies = [\n- \"non-hash\",\n+ \"nohash-hasher\",\n  \"text-size\",\n ]\n \n@@ -1064,8 +1064,10 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"non-hash\"\n-version = \"0.1.0\"\n+name = \"nohash-hasher\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451\"\n \n [[package]]\n name = \"notify\"\n@@ -1706,7 +1708,7 @@ dependencies = [\n  \"backtrace\",\n  \"libc\",\n  \"miow\",\n- \"non-hash\",\n+ \"nohash-hasher\",\n  \"winapi\",\n ]\n "}, {"sha": "a37b05f1211d30f7676f5c6101e2d2b24796ee49", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -74,10 +74,12 @@ toolchain = { path = \"./crates/toolchain\", version = \"0.0.0\" }\n tt = { path = \"./crates/tt\", version = \"0.0.0\" }\n vfs-notify = { path = \"./crates/vfs-notify\", version = \"0.0.0\" }\n vfs = { path = \"./crates/vfs\", version = \"0.0.0\" }\n+line-index = { version = \"0.1.0\", path = \"./lib/line-index\" }\n \n # non-local crates\n smallvec = { version = \"1.10.0\", features = [\"const_new\", \"union\", \"const_generics\"] }\n smol_str = \"0.2.0\"\n+nohash-hasher = \"0.2.0\"\n # the following crates are pinned to prevent us from pulling in syn 2 until all our dependencies have moved\n serde = { version = \"=1.0.156\", features = [\"derive\"] }\n serde_json = \"1.0.94\""}, {"sha": "a0b79d17646c7204ad2c2b24ba167d666ce2ff6b", "filename": "crates/ide-db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fide-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fide-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2FCargo.toml?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -37,8 +37,7 @@ text-edit.workspace = true\n # something from some `hir-xxx` subpackage, reexport the API via `hir`.\n hir.workspace = true\n \n-# used to be a module, turned into its own library\n-line-index = { version = \"0.1.0\", path = \"../../lib/line-index\" }\n+line-index.workspace = true\n \n [dev-dependencies]\n expect-test = \"1.4.0\""}, {"sha": "3933a1f8c960147586ea28b11af59429d0de2120", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -15,7 +15,7 @@ doctest = false\n libc = \"0.2.135\"\n backtrace = { version = \"0.3.65\", optional = true }\n always-assert = { version = \"0.1.2\", features = [\"log\"] }\n-non-hash = { version = \"0.1.0\", path = \"../../lib/non-hash\" }\n+nohash-hasher.workspace = true\n # Think twice before adding anything here\n \n [target.'cfg(windows)'.dependencies]"}, {"sha": "66e6c9462b6af72d07d632e8d23092ff718e5f62", "filename": "crates/stdx/src/hash.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fstdx%2Fsrc%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fstdx%2Fsrc%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fhash.rs?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -0,0 +1,5 @@\n+//! Re-exports from [`nohash_hasher`].\n+\n+pub use nohash_hasher::IntMap as NoHashHashMap;\n+pub use nohash_hasher::IntSet as NoHashHashSet;\n+pub use nohash_hasher::IsEnabled;"}, {"sha": "5ec6e0751a4abb9086d74c4cf958658d4f731a23", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -11,9 +11,9 @@ pub mod process;\n pub mod panic_context;\n pub mod non_empty_vec;\n pub mod rand;\n+pub mod hash;\n \n pub use always_assert::{always, never};\n-pub use non_hash as hash;\n \n #[inline(always)]\n pub fn is_ci() -> bool {"}, {"sha": "caddd4e4810b9eb09923ba9e87bac7c95f3b0bc1", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -62,7 +62,8 @@ pub use paths::{AbsPath, AbsPathBuf};\n #[derive(Copy, Clone, Debug, Ord, PartialOrd, Eq, PartialEq, Hash)]\n pub struct FileId(pub u32);\n \n-impl stdx::hash::NoHashHashable for FileId {}\n+/// safe because `FileId` is a newtype of `u32`\n+impl stdx::hash::IsEnabled for FileId {}\n \n /// Storage for all files read by rust-analyzer.\n ///"}, {"sha": "bea9242ea6ce74309b559ccf71c8182e8039fcb2", "filename": "lib/line-index/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/lib%2Fline-index%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/lib%2Fline-index%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2FCargo.toml?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -3,9 +3,9 @@ name = \"line-index\"\n version = \"0.1.0\"\n description = \"Maps flat `TextSize` offsets into `(line, column)` representation.\"\n license = \"MIT OR Apache-2.0\"\n-repository = \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/non-hash\"\n+repository = \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/line-index\"\n edition = \"2021\"\n \n [dependencies]\n text-size = \"1\"\n-non-hash = { version = \"0.1.0\", path = \"../non-hash\" }\n+nohash-hasher.workspace = true"}, {"sha": "64a094c63e1a5a7f1635570efa03117823d5f6b2", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85dd7b22b4f7c25b5be48dc477f85f84575cf6b5/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=85dd7b22b4f7c25b5be48dc477f85f84575cf6b5", "patch": "@@ -7,7 +7,7 @@ mod tests;\n \n use std::{iter, mem};\n \n-use non_hash::NoHashHashMap;\n+use nohash_hasher::IntMap as NoHashHashMap;\n use text_size::{TextRange, TextSize};\n \n /// Maps flat [`TextSize`] offsets into `(line, column)` representation."}, {"sha": "27b35a76295224d8d4de13c9e22d4d777ed10f86", "filename": "lib/non-hash/Cargo.toml", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e1992a0d9004d9bdbb2a73942789831e9554dba/lib%2Fnon-hash%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7e1992a0d9004d9bdbb2a73942789831e9554dba/lib%2Fnon-hash%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fnon-hash%2FCargo.toml?ref=7e1992a0d9004d9bdbb2a73942789831e9554dba", "patch": "@@ -1,7 +0,0 @@\n-[package]\n-name = \"non-hash\"\n-version = \"0.1.0\"\n-description = \"A non-hashing `Hasher` implementation.\"\n-license = \"MIT OR Apache-2.0\"\n-repository = \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/non-hash\"\n-edition = \"2021\""}, {"sha": "af03f3d7920c57ddeb1f7921e137a143ddbb47b6", "filename": "lib/non-hash/src/lib.rs", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7e1992a0d9004d9bdbb2a73942789831e9554dba/lib%2Fnon-hash%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1992a0d9004d9bdbb2a73942789831e9554dba/lib%2Fnon-hash%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fnon-hash%2Fsrc%2Flib.rs?ref=7e1992a0d9004d9bdbb2a73942789831e9554dba", "patch": "@@ -1,104 +0,0 @@\n-//! A non-hashing [`Hasher`] implementation.\n-\n-#![deny(clippy::pedantic, missing_debug_implementations, missing_docs, rust_2018_idioms)]\n-\n-use std::{\n-    hash::{BuildHasher, Hasher},\n-    marker::PhantomData,\n-};\n-\n-/// A [`std::collections::HashMap`] with [`NoHashHasherBuilder`].\n-pub type NoHashHashMap<K, V> = std::collections::HashMap<K, V, NoHashHasherBuilder<K>>;\n-\n-/// A [`std::collections::HashSet`] with [`NoHashHasherBuilder`].\n-pub type NoHashHashSet<K> = std::collections::HashSet<K, NoHashHasherBuilder<K>>;\n-\n-/// A hasher builder for [`NoHashHasher`].\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub struct NoHashHasherBuilder<T>(PhantomData<T>);\n-\n-impl<T> Default for NoHashHasherBuilder<T> {\n-    fn default() -> Self {\n-        Self(PhantomData)\n-    }\n-}\n-\n-/// Types for which an acceptable hash function is to return itself.\n-///\n-/// This trait is implemented by sufficiently-small integer types. It should only be implemented for\n-/// foreign types that are newtypes of these types. If it is implemented on more complex types,\n-/// hashing will panic.\n-pub trait NoHashHashable {}\n-\n-impl NoHashHashable for u8 {}\n-impl NoHashHashable for u16 {}\n-impl NoHashHashable for u32 {}\n-impl NoHashHashable for u64 {}\n-impl NoHashHashable for usize {}\n-\n-impl NoHashHashable for i8 {}\n-impl NoHashHashable for i16 {}\n-impl NoHashHashable for i32 {}\n-impl NoHashHashable for i64 {}\n-impl NoHashHashable for isize {}\n-\n-/// A hasher for [`NoHashHashable`] types.\n-#[derive(Debug)]\n-pub struct NoHashHasher(u64);\n-\n-impl<T: NoHashHashable> BuildHasher for NoHashHasherBuilder<T> {\n-    type Hasher = NoHashHasher;\n-    fn build_hasher(&self) -> Self::Hasher {\n-        NoHashHasher(0)\n-    }\n-}\n-\n-impl Hasher for NoHashHasher {\n-    fn finish(&self) -> u64 {\n-        self.0\n-    }\n-\n-    fn write(&mut self, _: &[u8]) {\n-        unimplemented!(\"NoHashHasher should only be used for hashing sufficiently-small integer types and their newtypes\")\n-    }\n-\n-    fn write_u8(&mut self, i: u8) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_u16(&mut self, i: u16) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_u32(&mut self, i: u32) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_u64(&mut self, i: u64) {\n-        self.0 = i;\n-    }\n-\n-    fn write_usize(&mut self, i: usize) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_i8(&mut self, i: i8) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_i16(&mut self, i: i16) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_i32(&mut self, i: i32) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_i64(&mut self, i: i64) {\n-        self.0 = i as u64;\n-    }\n-\n-    fn write_isize(&mut self, i: isize) {\n-        self.0 = i as u64;\n-    }\n-}"}]}