{"sha": "74d24ad6afc03476c671657ada598450e9a178b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDI0YWQ2YWZjMDM0NzZjNjcxNjU3YWRhNTk4NDUwZTlhMTc4Yjk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-07T10:21:01Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-07T10:21:01Z"}, "message": "Rollup merge of #24966 - ruud-v-a:explain, r=pnkfelix\n\nThe error message was misleading, so I adjusted it, and I also added the long diagnostics for this error (resolves one point in #24407).\r\n\r\nI was unsure about how to phrase the error message. Is \u201cgeneric parameter binding\u201d the correct term for this?", "tree": {"sha": "3d7a9d5e82b8de8898308c7ff364b93e96a26156", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7a9d5e82b8de8898308c7ff364b93e96a26156"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d24ad6afc03476c671657ada598450e9a178b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d24ad6afc03476c671657ada598450e9a178b9", "html_url": "https://github.com/rust-lang/rust/commit/74d24ad6afc03476c671657ada598450e9a178b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d24ad6afc03476c671657ada598450e9a178b9/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52174305a0d8c8fcaa87756de4049ade4b8d097b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52174305a0d8c8fcaa87756de4049ade4b8d097b", "html_url": "https://github.com/rust-lang/rust/commit/52174305a0d8c8fcaa87756de4049ade4b8d097b"}, {"sha": "4b8098bb193d82d18183a8223507f5908adeeb4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8098bb193d82d18183a8223507f5908adeeb4c", "html_url": "https://github.com/rust-lang/rust/commit/4b8098bb193d82d18183a8223507f5908adeeb4c"}], "stats": {"total": 127, "additions": 99, "deletions": 28}, "files": [{"sha": "88112b4b90cbe690a03e6480987cdad769c11981", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -419,6 +419,74 @@ of a loop. Without a loop to break out of or continue in, no sensible action can\n be taken.\n \"##,\n \n+E0282: r##\"\n+This error indicates that type inference did not result in one unique possible\n+type, and extra information is required. In most cases this can be provided\n+by adding a type annotation. Sometimes you need to specify a generic type\n+parameter manually.\n+\n+A common example is the `collect` method on `Iterator`. It has a generic type\n+parameter with a `FromIterator` bound, which for a `char` iterator is\n+implemented by `Vec` and `String` among others. Consider the following snippet\n+that reverses the characters of a string:\n+\n+```\n+let x = \"hello\".chars().rev().collect();\n+```\n+\n+In this case, the compiler cannot infer what the type of `x` should be:\n+`Vec<char>` and `String` are both suitable candidates. To specify which type to\n+use, you can use a type annotation on `x`:\n+\n+```\n+let x: Vec<char> = \"hello\".chars().rev().collect();\n+```\n+\n+It is not necessary to annotate the full type. Once the ambiguity is resolved,\n+the compiler can infer the rest:\n+\n+```\n+let x: Vec<_> = \"hello\".chars().rev().collect();\n+```\n+\n+Another way to provide the compiler with enough information, is to specify the\n+generic type parameter:\n+\n+```\n+let x = \"hello\".chars().rev().collect::<Vec<char>>();\n+```\n+\n+Again, you need not specify the full type if the compiler can infer it:\n+\n+```\n+let x = \"hello\".chars().rev().collect::<Vec<_>>();\n+```\n+\n+Apart from a method or function with a generic type parameter, this error can\n+occur when a type parameter of a struct or trait cannot be inferred. In that\n+case it is not always possible to use a type annotation, because all candidates\n+have the same return type. For instance:\n+\n+```\n+struct Foo<T> {\n+    // Some fields omitted.\n+}\n+\n+impl<T> Foo<T> {\n+    fn bar() -> i32 {\n+        0\n+    }\n+\n+    fn baz() {\n+        let number = Foo::bar();\n+    }\n+}\n+```\n+\n+This will fail because the compiler does not know which instance of `Foo` to\n+call `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n+\"##,\n+\n E0296: r##\"\n This error indicates that the given recursion limit could not be parsed. Ensure\n that the value provided is a positive integer between quotes, like so:\n@@ -617,7 +685,6 @@ register_diagnostics! {\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n     E0281, // type implements trait but other trait is required\n-    E0282, // unable to infer enough type information about\n     E0283, // cannot resolve type\n     E0284, // cannot resolve type\n     E0285, // overflow evaluation builtin bounds"}, {"sha": "c2c4d60a4ff6eaa69d06d15d3c662a5b1e199b33", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -290,7 +290,7 @@ pub fn maybe_report_ambiguity<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                     {\n                         span_err!(infcx.tcx.sess, obligation.cause.span, E0282,\n                                 \"unable to infer enough type information about `{}`; \\\n-                                 type annotations required\",\n+                                 type annotations or generic parameter binding required\",\n                                 self_ty.user_string(infcx.tcx));\n                     } else {\n                         span_err!(infcx.tcx.sess, obligation.cause.span, E0283,"}, {"sha": "5322966ae2ea0544a78d19a242c8d592a74187d2", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,5 +14,5 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "dabc0acba370e07a4344f577306d9752f6fcbf22", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,5 +14,5 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "392d38a6144f19d5364d12ec0363d41881d8d44e", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required"}, {"sha": "acf1d766b6a11a65107d768ba7ee1e094b32e1e7", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "3f81e51efe2ef40badd39877f31a4780da6a7b9a", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,5 +12,5 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "7f408be9c02d4c77dc3c9da9b97371b254748c1a", "filename": "src/test/compile-fail/issue-6458-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n fn foo(b: bool) -> Result<bool,String> {\n     Err(\"bar\".to_string());\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }\n \n fn main() {"}, {"sha": "c1f9dd6a4b8935a501acc71b898a311694592130", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -16,7 +16,8 @@ pub struct MyState;\n pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n-   foo(TypeWithState(marker::PhantomData));  //~ ERROR type annotations required\n+   foo(TypeWithState(marker::PhantomData));\n+   //~^ ERROR type annotations or generic parameter binding required\n }\n \n fn main() {"}, {"sha": "327fb6adf1d54f20374bff64a5e94c733c316003", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,5 +10,5 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR type annotations required\n+    let it = v.iter(); //~ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "59d75c5a787a6ec3815c66ee7473c8b776349f54", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -31,7 +31,8 @@ impl foo for Vec<isize> {\n \n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n-    let mut x = Vec::new(); //~ ERROR type annotations required\n+    let mut x = Vec::new();\n+    //~^ ERROR type annotations or generic parameter binding required\n     x.foo();\n }\n "}, {"sha": "c77494912bc751fc1715fb9de7544bffe274131b", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -33,7 +33,8 @@ where T : Convert<U>\n }\n \n fn a() {\n-    test(22, std::default::Default::default()); //~ ERROR type annotations required\n+    test(22, std::default::Default::default());\n+    //~^ ERROR type annotations or generic parameter binding required\n }\n \n fn main() {}"}, {"sha": "c14de98e03f14ab6b7bfc3539c8888cb06e750d2", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,5 +11,5 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR type annotations required\n+    None; //~ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "02a3f2b9ab8d28ad31faceed2344b574ade04563", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -13,5 +13,5 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR type annotations required\n+    S { o: &None }; //~ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "419b8c4e1b0151847753672e2b21eba3ee067309", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d24ad6afc03476c671657ada598450e9a178b9/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=74d24ad6afc03476c671657ada598450e9a178b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,5 +10,6 @@\n \n \n fn main() {\n-    let _foo = Vec::new(); //~ ERROR type annotations required\n+    let _foo = Vec::new();\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}]}