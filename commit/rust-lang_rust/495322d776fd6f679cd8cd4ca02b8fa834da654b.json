{"sha": "495322d776fd6f679cd8cd4ca02b8fa834da654b", "node_id": "C_kwDOAAsO6NoAKDQ5NTMyMmQ3NzZmZDZmNjc5Y2Q4Y2Q0Y2EwMmI4ZmE4MzRkYTY1NGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-08T13:38:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-08T13:38:08Z"}, "message": "Auto merge of #90361 - Mark-Simulacrum:always-verify, r=michaelwoerister\n\nEnable verification for 1/32th of queries loaded from disk\n\nThis is a limited enabling of incremental verification for query results loaded from disk, which previously did not run without -Zincremental-verify-ich. If enabled for all queries, we see a probably unacceptable hit of ~50% in the worst case, so this pairs back the verification to a more limited set based on the hash key.\n\nPer collected [perf results](https://github.com/rust-lang/rust/pull/84227#issuecomment-953350582), this is a regression of at most 7% on coercions opt incr-unchanged, and typically less than 0.5% on other benchmarks (largely limited to incr-unchanged). I believe this is acceptable performance to land, and we can either ratchet it up or down fairly easily.\n\nWe have no real sense of whether this will lead to a large amount of assertions in the wild, but since those assertions may lead to miscompilations today, it seems potentially warranted. We have a good bit of lead time until the next stable release, though the holiday season will also start soon; we may wish to discuss the timing of enabling this and weigh the desire to prevent (possible) miscompilations against assertions.\n\ncc `@rust-lang/wg-incr-comp`", "tree": {"sha": "f74962afead566a9cdafeb4da75619a3f829ae9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74962afead566a9cdafeb4da75619a3f829ae9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/495322d776fd6f679cd8cd4ca02b8fa834da654b", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/495322d776fd6f679cd8cd4ca02b8fa834da654b", "html_url": "https://github.com/rust-lang/rust/commit/495322d776fd6f679cd8cd4ca02b8fa834da654b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/495322d776fd6f679cd8cd4ca02b8fa834da654b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e3890c9d4064253aaa8c51f5d5458d2dc6dab77", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3890c9d4064253aaa8c51f5d5458d2dc6dab77", "html_url": "https://github.com/rust-lang/rust/commit/3e3890c9d4064253aaa8c51f5d5458d2dc6dab77"}, {"sha": "49e7c993ee4ab98f53898685394e9c2b3fa954dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e7c993ee4ab98f53898685394e9c2b3fa954dc", "html_url": "https://github.com/rust-lang/rust/commit/49e7c993ee4ab98f53898685394e9c2b3fa954dc"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "9703f0c3d9605269089498686272447cc188bb9e", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495322d776fd6f679cd8cd4ca02b8fa834da654b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=495322d776fd6f679cd8cd4ca02b8fa834da654b", "patch": "@@ -518,9 +518,22 @@ where\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         if let Some(result) = result {\n+            let prev_fingerprint = tcx\n+                .dep_context()\n+                .dep_graph()\n+                .prev_fingerprint_of(dep_node)\n+                .unwrap_or(Fingerprint::ZERO);\n             // If `-Zincremental-verify-ich` is specified, re-hash results from\n             // the cache and make sure that they have the expected fingerprint.\n-            if unlikely!(tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich) {\n+            //\n+            // If not, we still seek to verify a subset of fingerprints loaded\n+            // from disk. Re-hashing results is fairly expensive, so we can't\n+            // currently afford to verify every hash. This subset should still\n+            // give us some coverage of potential bugs though.\n+            let try_verify = prev_fingerprint.as_value().1 % 32 == 0;\n+            if unlikely!(\n+                try_verify || tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich\n+            ) {\n                 incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n             }\n "}]}