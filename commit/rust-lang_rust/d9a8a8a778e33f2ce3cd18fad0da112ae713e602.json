{"sha": "d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YThhOGE3NzhlMzNmMmNlM2NkMThmYWQwZGExMTJhZTcxM2U2MDI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-05-16T05:31:56Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-05-16T19:18:32Z"}, "message": "Add a stderr file length check to clippy_dev\n\nThis adds a check to `clippy_dev` that enforces a maximum line count for\n`stderr` files. CI will fail if the line count is exceeded. It's\ncurrently set to `320` lines.\n\nIdeally this would be implemented in `compiletest-rs` but there are\nplans to move Rust's `compiletest` into the `compiletest-rs` repository\nand I don't want to do the work in `compiletest` twice. However, I also\ndon't want to wait until the move is done, so I added the check to\n`clippy_dev` until it makes sense to add it to compiletest-rs.\n\ncc #2038", "tree": {"sha": "4a063ea2de96e819d071fafb190ba95a4f4a0e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a063ea2de96e819d071fafb190ba95a4f4a0e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlzdt4gQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5l2ZD/4yzdDnotMM6ZLX/iYdP1LXL7C6BgvZHHtp\nG+6qr4YxfvuJKdnBf6B9l2sCacv4NiH0nA/nwN2O5+cJEZIcWXgUGflQBWm66IMF\ndrJGlRjytbrOsHwQmLU+cWmOeRQslvGWQjwsZdzAYfDNM7y2iNUNhUn4Ex7duKMj\nK+DsGpj7u3MftmBSU9U33sgBsVpCYLFZX/k4CW7Z72VPkCQO6scU4XWOe64PXKoR\nrd7VuSeeDcvk8P3ZkOWFsMTJVfgOWse14fnLzg/v+0iJGCj7VCdbZLnzEIfXQ9j6\nLBgINbrIxQJunVzaD84E6LaIO8REBV3c6l5+1hRi/yCwpkFZq4SUFOdGtSxQxdyC\nfhJPoKY0SWTtUf6TGD28XbHX9WD7QDH3PEk6MdR1WZ0y1/GyOsW8vtEwQ3OKBHGt\n473Weimodde62PbY+3sV77DjYm56t+SWWI4uTkrEaqBOmm4Nv/fMBAWHCGqg0uYS\nGJ1+81tbE6HaRhYvJy9JLfsMfbihzuYT2l6RTGQNcgO5qpzSMTgsQASXcOvAjy0q\noGkE670YxSfnGhdzwKDFJN/JbXam0epSVSYQbRZ6VUAIyWWFUUTS8cI2vg/TiBdI\nHfcdpmsWsBzpdfWrwb0RQ9/iNFBZdIrWRF2l3E06jSHOVy66HC/VLab8EYZuqWdg\ngWOtdLbZJg==\n=QOQ2\n-----END PGP SIGNATURE-----", "payload": "tree 4a063ea2de96e819d071fafb190ba95a4f4a0e8c\nparent 82b2dfb9f6113b074746c7702d9e28162770b52f\nauthor Philipp Hansch <dev@phansch.net> 1557984716 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1558034312 +0200\n\nAdd a stderr file length check to clippy_dev\n\nThis adds a check to `clippy_dev` that enforces a maximum line count for\n`stderr` files. CI will fail if the line count is exceeded. It's\ncurrently set to `320` lines.\n\nIdeally this would be implemented in `compiletest-rs` but there are\nplans to move Rust's `compiletest` into the `compiletest-rs` repository\nand I don't want to do the work in `compiletest` twice. However, I also\ndon't want to wait until the move is done, so I added the check to\n`clippy_dev` until it makes sense to add it to compiletest-rs.\n\ncc #2038\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "html_url": "https://github.com/rust-lang/rust/commit/d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b2dfb9f6113b074746c7702d9e28162770b52f", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b2dfb9f6113b074746c7702d9e28162770b52f", "html_url": "https://github.com/rust-lang/rust/commit/82b2dfb9f6113b074746c7702d9e28162770b52f"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "d67541f7df05c44aadd20c2cdab59afbc017e80f", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "patch": "@@ -23,6 +23,7 @@ export CARGO_TARGET_DIR=`pwd`/target/\n \n # Perform various checks for lint registration\n ./util/dev update_lints --check\n+./util/dev --limit-stderr-length\n cargo +nightly fmt --all -- --check\n \n # Check running clippy-driver without cargo"}, {"sha": "45d4d13ed86a829d14a6abd8b89fa02e8290260c", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "patch": "@@ -2,8 +2,9 @@ extern crate clap;\n extern crate clippy_dev;\n extern crate regex;\n \n-use clap::{App, AppSettings, Arg, SubCommand};\n+use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n+mod stderr_length_check;\n \n #[derive(PartialEq)]\n enum UpdateMode {\n@@ -13,7 +14,6 @@ enum UpdateMode {\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n-        .setting(AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(\n             SubCommand::with_name(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n@@ -36,8 +36,16 @@ fn main() {\n                         .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n                 ),\n         )\n+        .arg(\n+            Arg::with_name(\"limit-stderr-length\")\n+                .long(\"limit-stderr-length\")\n+                .help(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n+        )\n         .get_matches();\n \n+    if matches.is_present(\"limit-stderr-length\") {\n+        stderr_length_check::check();\n+    }\n     if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n         if matches.is_present(\"print-only\") {\n             print_lints();"}, {"sha": "9222ed84167bb76d0517af9f80de75e666582e70", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a8a8a778e33f2ce3cd18fad0da112ae713e602/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=d9a8a8a778e33f2ce3cd18fad0da112ae713e602", "patch": "@@ -0,0 +1,55 @@\n+use std::ffi::OsStr;\n+use walkdir::WalkDir;\n+\n+use std::fs::File;\n+use std::io::prelude::*;\n+\n+// The maximum length allowed for stderr files.\n+//\n+// We limit this because small files are easier to deal with than bigger files.\n+const LIMIT: usize = 320;\n+\n+pub fn check() {\n+    let stderr_files = stderr_files();\n+    let exceeding_files = exceeding_stderr_files(stderr_files);\n+\n+    if !exceeding_files.is_empty() {\n+        println!(\"Error: stderr files exceeding limit of {} lines:\", LIMIT);\n+        for path in exceeding_files {\n+            println!(\"{}\", path);\n+        }\n+        std::process::exit(1);\n+    }\n+}\n+\n+fn exceeding_stderr_files(files: impl Iterator<Item = walkdir::DirEntry>) -> Vec<String> {\n+    files\n+        .filter_map(|file| {\n+            let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n+            let linecount = count_linenumbers(&path);\n+            if linecount > LIMIT {\n+                Some(path)\n+            } else {\n+                None\n+            }\n+        })\n+        .collect()\n+}\n+\n+fn stderr_files() -> impl Iterator<Item = walkdir::DirEntry> {\n+    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n+    WalkDir::new(\"../tests/ui\")\n+        .into_iter()\n+        .filter_map(std::result::Result::ok)\n+        .filter(|f| f.path().extension() == Some(OsStr::new(\"stderr\")))\n+}\n+\n+fn count_linenumbers(filepath: &str) -> usize {\n+    if let Ok(mut file) = File::open(filepath) {\n+        let mut content = String::new();\n+        file.read_to_string(&mut content).expect(\"Failed to read file?\");\n+        content.lines().count()\n+    } else {\n+        0\n+    }\n+}"}]}