{"sha": "94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "node_id": "C_kwDOAAsO6NoAKDk0YWQwODRhYzYxMWI3YzIxZDRmMDhiMWViMzA2MjNmMDlkYjJjZDA", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-04-28T00:19:16Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-05-24T21:52:19Z"}, "message": "Safe Transmute: Fix propagation of errors\n\n- Make sure that the most specific Reason is the one that bubbles up when we\n  are folding over the `Answer` tree. `Reason::DstIsBitIncompatible` is the\n  least specific, so that should be used only when there isn't anything else\n  available.\n- Small fixes where we used the wrong Reason variant.\n- Tiny cleanups", "tree": {"sha": "10214d71cf1548ea8426c626b514c41908ccc256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10214d71cf1548ea8426c626b514c41908ccc256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "html_url": "https://github.com/rust-lang/rust/commit/94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263a4f2cb6b455f9c4ae46493d59369c378a85ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/263a4f2cb6b455f9c4ae46493d59369c378a85ea", "html_url": "https://github.com/rust-lang/rust/commit/263a4f2cb6b455f9c4ae46493d59369c378a85ea"}], "stats": {"total": 119, "additions": 67, "deletions": 52}, "files": [{"sha": "8224fdf591afbb3019e2a90c5f77c2a0da29be6f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -2751,7 +2751,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.substs.const_at(3)) else {\n                 span_bug!(span, \"Unable to construct rustc_transmute::Assume where it was previously possible\");\n             };\n-        // FIXME(bryangarza): Need to flatten here too\n+        // FIXME(bryangarza): Is this enough, or should we resolve all nested\n+        // obligations like we do for `confirm_transmutability_candidate(...)?`\n         match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n             obligation.cause,\n             src_and_dst,\n@@ -2780,7 +2781,6 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     rustc_transmute::Reason::DstIsPrivate => format!(\n                         \"`{dst}` is or contains a type or field that is not visible in that scope\"\n                     ),\n-                    // FIXME(bryangarza): Include the number of bytes of src and dst\n                     rustc_transmute::Reason::DstIsTooBig => {\n                         format!(\"The size of `{src}` is smaller than the size of `{dst}`\")\n                     }"}, {"sha": "e3d982b5c3f8ba7173fb9484c679f26b891dea47", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -329,7 +329,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         )\n                     };\n \n-                    // // FIXME(bryangarza): Check src.mutability or dst.mutability to know whether dst -> src obligation is needed\n+                    // FIXME(bryangarza): Check src.mutability or dst.mutability to know whether dst -> src obligation is needed\n                     Ok(vec![make_obl(src.ty, dst.ty), make_obl(dst.ty, src.ty)])\n                 }\n             }"}, {"sha": "60adbc1b470c8dd26b1daa9bdd74392421f89ac9", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type)]\n+#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type, let_chains)]\n #![allow(dead_code, unused_variables)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "47f61a808403be874036a375c08bec3f04484b30", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -78,11 +78,12 @@ mod rustc {\n                 match (src, dst) {\n                     // Answer `Ok(None)` here, because 'unknown layout' and type errors will already\n                     // be reported by rustc. No need to spam the user with more errors.\n-                    (Err(Err::TypeError(_)), _) | (_, Err(Err::TypeError(_))) => Err(Ok(None)),\n-                    (Err(Err::Unknown), _) | (_, Err(Err::Unknown)) => Err(Ok(None)),\n-                    (Err(Err::Unspecified), _) | (_, Err(Err::Unspecified)) => {\n-                        Err(Err(Reason::SrcIsUnspecified))\n-                    }\n+                    (Err(Err::TypeError(_)), _)\n+                    | (_, Err(Err::TypeError(_)))\n+                    | (Err(Err::Unknown), _)\n+                    | (_, Err(Err::Unknown)) => Err(Ok(None)),\n+                    (Err(Err::Unspecified), _) => Err(Err(Reason::SrcIsUnspecified)),\n+                    (_, Err(Err::Unspecified)) => Err(Err(Reason::DstIsUnspecified)),\n                     (Ok(src), Ok(dst)) => Ok((src, dst)),\n                 }\n             });\n@@ -316,12 +317,19 @@ where\n     }\n }\n \n-fn and<R>(lhs: Answer<R>, rhs: Answer<R>) -> Answer<R> {\n-    // Should propagate errors on the right side, because the initial value\n-    // used in `apply` is on the left side.\n-    let rhs = rhs?;\n-    let lhs = lhs?;\n-    Ok(match (lhs, rhs) {\n+fn and<R>(lhs: Answer<R>, rhs: Answer<R>) -> Answer<R>\n+where\n+    R: PartialEq,\n+{\n+    // If both are errors, then we should return the more specific one\n+    if lhs.is_err() && rhs.is_err() {\n+        if lhs == Err(Reason::DstIsBitIncompatible) {\n+            return rhs;\n+        } else {\n+            return lhs;\n+        }\n+    }\n+    Ok(match (lhs?, rhs?) {\n         // If only one side has a condition, pass it along\n         (None, other) | (other, None) => other,\n         // If both sides have IfAll conditions, merge them\n@@ -340,10 +348,17 @@ fn and<R>(lhs: Answer<R>, rhs: Answer<R>) -> Answer<R> {\n     })\n }\n \n-fn or<R>(lhs: Answer<R>, rhs: Answer<R>) -> Answer<R> {\n-    // If both are errors, then we should return the one on the right\n+fn or<R>(lhs: Answer<R>, rhs: Answer<R>) -> Answer<R>\n+where\n+    R: PartialEq,\n+{\n+    // If both are errors, then we should return the more specific one\n     if lhs.is_err() && rhs.is_err() {\n-        return rhs;\n+        if lhs == Err(Reason::DstIsBitIncompatible) {\n+            return rhs;\n+        } else {\n+            return lhs;\n+        }\n     }\n     // Otherwise, errors can be ignored for the rest of the pattern matching\n     let lhs = lhs.unwrap_or(None);"}, {"sha": "1a0a5d3ae9462c2444ade582dbed183760a7cada", "filename": "tests/ui/transmutability/arrays/should_require_well_defined_layout.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -23,7 +23,7 @@ error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defin\n   --> $DIR/should_require_well_defined_layout.rs:27:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `[String; 0]` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -65,7 +65,7 @@ error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defin\n   --> $DIR/should_require_well_defined_layout.rs:33:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `[String; 1]` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -107,7 +107,7 @@ error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defin\n   --> $DIR/should_require_well_defined_layout.rs:39:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `[String; 2]` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14"}, {"sha": "46cdaa925630ac119fb5bf752b34a8cc060b0a6e", "filename": "tests/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -24,7 +24,7 @@ error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scop\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:50:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0i8` isn't a bit-valid value of `u16`\n+   |                                            ^^^^^^ The size of `V0i8` is smaller than the size of `u16`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -68,7 +68,7 @@ error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scop\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:58:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0u8` isn't a bit-valid value of `u16`\n+   |                                            ^^^^^^ The size of `V0u8` is smaller than the size of `u16`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -90,7 +90,7 @@ error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scop\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:72:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0i16`\n+   |                                            ^^^^^^^ The size of `u8` is smaller than the size of `V0i16`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -112,7 +112,7 @@ error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:74:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0i16` isn't a bit-valid value of `u32`\n+   |                                            ^^^^^^ The size of `V0i16` is smaller than the size of `u32`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -134,7 +134,7 @@ error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scop\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:80:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0u16`\n+   |                                            ^^^^^^^ The size of `u8` is smaller than the size of `V0u16`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -156,7 +156,7 @@ error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:82:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0u16` isn't a bit-valid value of `u32`\n+   |                                            ^^^^^^ The size of `V0u16` is smaller than the size of `u32`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -178,7 +178,7 @@ error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:96:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u16` isn't a bit-valid value of `V0i32`\n+   |                                            ^^^^^^^ The size of `u16` is smaller than the size of `V0i32`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -200,7 +200,7 @@ error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:98:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0i32` isn't a bit-valid value of `u64`\n+   |                                            ^^^^^^ The size of `V0i32` is smaller than the size of `u64`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -222,7 +222,7 @@ error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:104:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u16` isn't a bit-valid value of `V0u32`\n+   |                                            ^^^^^^^ The size of `u16` is smaller than the size of `V0u32`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -244,7 +244,7 @@ error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:106:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0u32` isn't a bit-valid value of `u64`\n+   |                                            ^^^^^^ The size of `V0u32` is smaller than the size of `u64`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -266,7 +266,7 @@ error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:120:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u32` isn't a bit-valid value of `V0i64`\n+   |                                            ^^^^^^^ The size of `u32` is smaller than the size of `V0i64`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -288,7 +288,7 @@ error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining sc\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:122:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0i64` isn't a bit-valid value of `u128`\n+   |                                            ^^^^^^ The size of `V0i64` is smaller than the size of `u128`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -310,7 +310,7 @@ error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining sco\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:128:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u32` isn't a bit-valid value of `V0u64`\n+   |                                            ^^^^^^^ The size of `u32` is smaller than the size of `V0u64`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -332,7 +332,7 @@ error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining sc\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:130:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0u64` isn't a bit-valid value of `u128`\n+   |                                            ^^^^^^ The size of `V0u64` is smaller than the size of `u128`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -354,7 +354,7 @@ error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining sc\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:144:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0isize`\n+   |                                            ^^^^^^^ The size of `u8` is smaller than the size of `V0isize`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -376,7 +376,7 @@ error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the def\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:146:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0isize` isn't a bit-valid value of `[usize; 2]`\n+   |                                            ^^^^^^ The size of `V0isize` is smaller than the size of `[usize; 2]`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -398,7 +398,7 @@ error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining sc\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:152:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0usize`\n+   |                                            ^^^^^^^ The size of `u8` is smaller than the size of `V0usize`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n@@ -420,7 +420,7 @@ error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the def\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:154:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ At least one value of `V0usize` isn't a bit-valid value of `[usize; 2]`\n+   |                                            ^^^^^^ The size of `V0usize` is smaller than the size of `[usize; 2]`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14"}, {"sha": "1612b6b3661ef057feaa5f5ab3706621573f8ceb", "filename": "tests/ui/transmutability/enums/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -24,7 +24,7 @@ error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the d\n   --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `void::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n@@ -68,7 +68,7 @@ error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in\n   --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `singleton::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n@@ -112,7 +112,7 @@ error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the\n   --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `duplex::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14"}, {"sha": "bfbef8b25fcf486f11d85e737c93264cb796e634", "filename": "tests/ui/transmutability/enums/should_pad_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope\n   --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ At least one value of `Src` isn't a bit-valid value of `Dst`\n+   |                                    ^^^ The size of `Src` is smaller than the size of `Dst`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14"}, {"sha": "4c5062cd3b303f055e6fdafe9c64bfaad4ab1378", "filename": "tests/ui/transmutability/structs/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -24,7 +24,7 @@ error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::\n   --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::unit::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -68,7 +68,7 @@ error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::\n   --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::tuple::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -112,7 +112,7 @@ error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::\n   --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::braces::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -156,7 +156,7 @@ error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in th\n   --> $DIR/should_require_well_defined_layout.rs:47:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `aligned::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -200,7 +200,7 @@ error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the\n   --> $DIR/should_require_well_defined_layout.rs:53:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^^^^ `packed::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n@@ -244,7 +244,7 @@ error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the de\n   --> $DIR/should_require_well_defined_layout.rs:60:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_c>();\n-   |                                               ^^^^^^ `u128` does not have a well-specified layout\n+   |                                               ^^^^^^ `nested::repr_c` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14"}, {"sha": "4293d34f47b23aa4cdfab37b8209ff53e93ae405", "filename": "tests/ui/transmutability/unions/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -24,7 +24,7 @@ error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::\n   --> $DIR/should_require_well_defined_layout.rs:31:43\n    |\n LL |     assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                           ^^^^^^^^^ `u128` does not have a well-specified layout\n+   |                                           ^^^^^^^^^ `should_reject_repr_rust::repr_rust` does not have a well-specified layout\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14"}, {"sha": "bfbef8b25fcf486f11d85e737c93264cb796e634", "filename": "tests/ui/transmutability/unions/should_pad_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope\n   --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ At least one value of `Src` isn't a bit-valid value of `Dst`\n+   |                                    ^^^ The size of `Src` is smaller than the size of `Dst`\n    |\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14"}, {"sha": "f5480e0b9fb8217c3ee254a6e02b9ffce042e7b8", "filename": "tests/ui/transmute/transmute-padding-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94ad084ac611b7c21d4f08b1eb30623f09db2cd0/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr?ref=94ad084ac611b7c21d4f08b1eb30623f09db2cd0", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of\n   --> $DIR/transmute-padding-ice.rs:27:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n-   |                                        ^ At least one value of `B` isn't a bit-valid value of `A`\n+   |                                        ^ The size of `B` is smaller than the size of `A`\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/transmute-padding-ice.rs:11:14"}]}