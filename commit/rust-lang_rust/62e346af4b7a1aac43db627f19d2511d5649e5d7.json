{"sha": "62e346af4b7a1aac43db627f19d2511d5649e5d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZTM0NmFmNGI3YTFhYWM0M2RiNjI3ZjE5ZDI1MTFkNTY0OWU1ZDc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-02T23:55:28Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-04T16:14:13Z"}, "message": "Support void in platform intrinsic generator.", "tree": {"sha": "088fe1e8a4d0783a7eb6d4cf549411263ed2f215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088fe1e8a4d0783a7eb6d4cf549411263ed2f215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62e346af4b7a1aac43db627f19d2511d5649e5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62e346af4b7a1aac43db627f19d2511d5649e5d7", "html_url": "https://github.com/rust-lang/rust/commit/62e346af4b7a1aac43db627f19d2511d5649e5d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62e346af4b7a1aac43db627f19d2511d5649e5d7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add04307f9b627992914b31dca82530f7886ef9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/add04307f9b627992914b31dca82530f7886ef9a", "html_url": "https://github.com/rust-lang/rust/commit/add04307f9b627992914b31dca82530f7886ef9a"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "b62c35246cab8d661abbc642ce477944ef6d8270", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=62e346af4b7a1aac43db627f19d2511d5649e5d7", "patch": "@@ -17,7 +17,7 @@\n import itertools\n \n SPEC = re.compile(\n-    r'^(?:(?P<id>[iusfIUSF])(?:\\((?P<start>\\d+)-(?P<end>\\d+)\\)|'\n+    r'^(?:(?P<void>V)|(?P<id>[iusfIUSF])(?:\\((?P<start>\\d+)-(?P<end>\\d+)\\)|'\n     r'(?P<width>\\d+)(:?/(?P<llvm_width>\\d+))?)'\n     r'|(?P<reference>\\d+)(?P<modifiers>[vShdnwusDMC]*)(?P<force_width>x\\d+)?)'\n     r'(?:(?P<pointer>Pm|Pc)(?P<llvm_pointer>/.*)?)?$'\n@@ -97,6 +97,19 @@ def bitwidth(self):\n     def modify(self, spec, width):\n         raise NotImplementedError()\n \n+class Void(Type):\n+    def __init__(self):\n+        Type.__init__(self, 0)\n+\n+    def compiler_ctor(self):\n+        return 'void()'\n+\n+    def rust_name(self):\n+        return '()'\n+\n+    def type_info(self, platform_info):\n+        return None\n+\n class Number(Type):\n     def __init__(self, bitwidth):\n         Type.__init__(self, bitwidth)\n@@ -289,7 +302,10 @@ def enumerate(self, width, previous):\n                 id = match.group('id')\n                 reference = match.group('reference')\n \n-                if id is not None:\n+                if match.group('void') is not None:\n+                    assert spec == 'V'\n+                    yield Void()\n+                elif id is not None:\n                     is_vector = id.islower()\n                     type_ctors = TYPE_ID_LOOKUP[id.lower()]\n \n@@ -436,11 +452,15 @@ def parse_args():\n         ## Type specifier grammar\n \n         ```\n-        type := ( vector | scalar | aggregate | reference ) pointer?\n+        type := core_type pointer?\n+\n+        core_type := void | vector | scalar | aggregate | reference\n \n         pointer := 'Pm' llvm_pointer? | 'Pc' llvm_pointer?\n         llvm_pointer := '/' type\n \n+        void := 'V'\n+\n         vector := vector_elem width |\n         vector_elem := 'i' | 'u' | 's' | 'f'\n \n@@ -472,6 +492,11 @@ def parse_args():\n         in Rust, but is `i8*` in LLVM. (This defaults to the main\n         type).\n \n+        ## Void\n+\n+        The `V` type corresponds to `void` in LLVM (`()` in\n+        Rust). It's likely to only work in return position.\n+\n         ## Vectors\n \n         The vector grammar is a pattern describing many possibilities\n@@ -586,7 +611,7 @@ def open(self, platform):\n \n #![allow(unused_imports)]\n \n-use {{Intrinsic, i, i_, u, u_, f, v, agg, p}};\n+use {{Intrinsic, i, i_, u, u_, f, v, agg, p, void}};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "95da12a237829dd06f41152be2efafb9c9f8be86", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=62e346af4b7a1aac43db627f19d2511d5649e5d7", "patch": "@@ -30,6 +30,7 @@ pub struct Intrinsic {\n \n #[derive(Clone, Hash, Eq, PartialEq)]\n pub enum Type {\n+    Void,\n     Integer(/* signed */ bool, u8, /* llvm width */ u8),\n     Float(u8),\n     Pointer(Box<Type>, Option<Box<Type>>, /* const */ bool),\n@@ -54,6 +55,9 @@ fn agg(flatten: bool, types: Vec<Type>) -> Type {\n fn p(const_: bool, elem: Type, llvm_elem: Option<Type>) -> Type {\n     Type::Pointer(Box::new(elem), llvm_elem.map(Box::new), const_)\n }\n+fn void() -> Type {\n+    Type::Void\n+}\n \n mod x86;\n mod arm;"}, {"sha": "26421cb3e80ee001c23e8178234555d8cae9ac31", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=62e346af4b7a1aac43db627f19d2511d5649e5d7", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(unused_imports)]\n \n-use {Intrinsic, i, i_, u, u_, f, v, agg, p};\n+use {Intrinsic, i, i_, u, u_, f, v, agg, p, void};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "a6816a99d28aea410810097b3660cec3bbdb2032", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=62e346af4b7a1aac43db627f19d2511d5649e5d7", "patch": "@@ -936,6 +936,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                           any_changes_needed: &mut bool) -> Vec<Type> {\n                 use intrinsics::Type::*;\n                 match *t {\n+                    Void => vec![Type::void(ccx)],\n                     Integer(_signed, width, llvm_width) => {\n                         *any_changes_needed |= width != llvm_width;\n                         vec![Type::ix(ccx, llvm_width as u64)]"}, {"sha": "4501d1c618a72f7e1afa39485f1bb7663cd78002", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e346af4b7a1aac43db627f19d2511d5649e5d7/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=62e346af4b7a1aac43db627f19d2511d5649e5d7", "patch": "@@ -464,6 +464,10 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n     };\n \n     match *expected {\n+        Void => match t.sty {\n+            ty::TyTuple(ref v) if v.is_empty() => {},\n+            _ => simple_error(&format!(\"`{}`\", t), \"()\"),\n+        },\n         // (The width we pass to LLVM doesn't concern the type checker.)\n         Integer(signed, bits, _llvm_width) => match (signed, bits, &t.sty) {\n             (true,  8,  &ty::TyInt(hir::IntTy::TyI8)) |"}]}