{"sha": "6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "node_id": "C_kwDOAAsO6NoAKDZiZTI3YjE5YTZjY2Q3YWRlOTBlNDE4OTVhNmZlMjBhMjQ5MGU5YjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-29T04:02:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T04:02:42Z"}, "message": "Rollup merge of #109548 - pommicket:better-column-numbers-with-hard-tabs, r=petrochenkov\n\nAnnotationColumn struct to fix hard tab column numbers in errors\n\nFixes #109537\n\ni don't know if this is the best way of fixing this but it works", "tree": {"sha": "8ca977dec879ac05200af7ed59a3da48e5489d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ca977dec879ac05200af7ed59a3da48e5489d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkI7hiCRBK7hj4Ov3rIwAAx+AIACSO3tHsF7CE1VaMUK5ACjww\nF0bn9QBsDbd343XKIcnhsSpzbEG7Iw6pe5/J5nplU9mq0kA0ahf4XHsjgd5J0O7s\nL9Q5+qA21yhPYw0g3fnCOpcr/ajY0GmiRt3GfDTv+xojsYn7798PyfS+Mu7ZDpkM\nwebuLbpjr8ZK6piWO+bJXJCl5ND2qdWJwHJosfnqv11ezC+9VgPCJce1dOJcEeIJ\n+sTWlI2d8RgKHyPWLRSCo+iQWrJwQXeW87ogGNYeeR7PRapAPAMzw2MZsmrjsw/c\nwn4XKkk1kT6n1RH6U+ml7VUwuQD4dK76hxokrl3JF9qvd5/t7Wp+6LH0deEtjuI=\n=umk5\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ca977dec879ac05200af7ed59a3da48e5489d27\nparent ba2164306add2bc1d96960f3f29d8c9910e9902d\nparent b82608aa56b1e56dbebe5d5d94977d8d28f609bc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680062562 +0200\ncommitter GitHub <noreply@github.com> 1680062562 +0200\n\nRollup merge of #109548 - pommicket:better-column-numbers-with-hard-tabs, r=petrochenkov\n\nAnnotationColumn struct to fix hard tab column numbers in errors\n\nFixes #109537\n\ni don't know if this is the best way of fixing this but it works\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "html_url": "https://github.com/rust-lang/rust/commit/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2164306add2bc1d96960f3f29d8c9910e9902d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2164306add2bc1d96960f3f29d8c9910e9902d", "html_url": "https://github.com/rust-lang/rust/commit/ba2164306add2bc1d96960f3f29d8c9910e9902d"}, {"sha": "b82608aa56b1e56dbebe5d5d94977d8d28f609bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82608aa56b1e56dbebe5d5d94977d8d28f609bc", "html_url": "https://github.com/rust-lang/rust/commit/b82608aa56b1e56dbebe5d5d94977d8d28f609bc"}], "stats": {"total": 153, "additions": 117, "deletions": 36}, "files": [{"sha": "9872b3bda1e065f4361f03cd722a70876c6e3778", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "patch": "@@ -202,7 +202,10 @@ impl AnnotateSnippetEmitterWriter {\n                             annotations: annotations\n                                 .iter()\n                                 .map(|annotation| SourceAnnotation {\n-                                    range: (annotation.start_col, annotation.end_col),\n+                                    range: (\n+                                        annotation.start_col.display,\n+                                        annotation.end_col.display,\n+                                    ),\n                                     label: annotation.label.as_deref().unwrap_or_default(),\n                                     annotation_type: annotation_type_for_level(*level),\n                                 })"}, {"sha": "d6fd057c5a4763fadcb2a6c62615b9a502647c9a", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "patch": "@@ -12,7 +12,9 @@ use Destination::*;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{FileLines, SourceFile, Span};\n \n-use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n+use crate::snippet::{\n+    Annotation, AnnotationColumn, AnnotationType, Line, MultilineAnnotation, Style, StyledString,\n+};\n use crate::styled_buffer::StyledBuffer;\n use crate::translation::{to_fluent_args, Translate};\n use crate::{\n@@ -858,7 +860,7 @@ impl EmitterWriter {\n         let mut short_start = true;\n         for ann in &line.annotations {\n             if let AnnotationType::MultilineStart(depth) = ann.annotation_type {\n-                if source_string.chars().take(ann.start_col).all(|c| c.is_whitespace()) {\n+                if source_string.chars().take(ann.start_col.display).all(|c| c.is_whitespace()) {\n                     let style = if ann.is_primary {\n                         Style::UnderlinePrimary\n                     } else {\n@@ -1093,15 +1095,15 @@ impl EmitterWriter {\n                         '_',\n                         line_offset + pos,\n                         width_offset + depth,\n-                        (code_offset + annotation.start_col).saturating_sub(left),\n+                        (code_offset + annotation.start_col.display).saturating_sub(left),\n                         style,\n                     );\n                 }\n                 _ if self.teach => {\n                     buffer.set_style_range(\n                         line_offset,\n-                        (code_offset + annotation.start_col).saturating_sub(left),\n-                        (code_offset + annotation.end_col).saturating_sub(left),\n+                        (code_offset + annotation.start_col.display).saturating_sub(left),\n+                        (code_offset + annotation.end_col.display).saturating_sub(left),\n                         style,\n                         annotation.is_primary,\n                     );\n@@ -1133,7 +1135,7 @@ impl EmitterWriter {\n                 for p in line_offset + 1..=line_offset + pos {\n                     buffer.putc(\n                         p,\n-                        (code_offset + annotation.start_col).saturating_sub(left),\n+                        (code_offset + annotation.start_col.display).saturating_sub(left),\n                         '|',\n                         style,\n                     );\n@@ -1169,9 +1171,9 @@ impl EmitterWriter {\n             let style =\n                 if annotation.is_primary { Style::LabelPrimary } else { Style::LabelSecondary };\n             let (pos, col) = if pos == 0 {\n-                (pos + 1, (annotation.end_col + 1).saturating_sub(left))\n+                (pos + 1, (annotation.end_col.display + 1).saturating_sub(left))\n             } else {\n-                (pos + 2, annotation.start_col.saturating_sub(left))\n+                (pos + 2, annotation.start_col.display.saturating_sub(left))\n             };\n             if let Some(ref label) = annotation.label {\n                 buffer.puts(line_offset + pos, code_offset + col, label, style);\n@@ -1208,7 +1210,7 @@ impl EmitterWriter {\n             } else {\n                 ('-', Style::UnderlineSecondary)\n             };\n-            for p in annotation.start_col..annotation.end_col {\n+            for p in annotation.start_col.display..annotation.end_col.display {\n                 buffer.putc(\n                     line_offset + 1,\n                     (code_offset + p).saturating_sub(left),\n@@ -1459,7 +1461,7 @@ impl EmitterWriter {\n                                         &annotated_file.file.name,\n                                         line.line_index\n                                     ),\n-                                    annotations[0].start_col + 1,\n+                                    annotations[0].start_col.file + 1,\n                                 ),\n                                 Style::LineAndColumn,\n                             );\n@@ -1546,7 +1548,7 @@ impl EmitterWriter {\n                 buffer.prepend(buffer_msg_line_offset + 1, \"::: \", Style::LineNumber);\n                 let loc = if let Some(first_line) = annotated_file.lines.first() {\n                     let col = if let Some(first_annotation) = first_line.annotations.first() {\n-                        format!(\":{}\", first_annotation.start_col + 1)\n+                        format!(\":{}\", first_annotation.start_col.file + 1)\n                     } else {\n                         String::new()\n                     };\n@@ -1607,8 +1609,8 @@ impl EmitterWriter {\n                 let mut span_left_margin = usize::MAX;\n                 for line in &annotated_file.lines {\n                     for ann in &line.annotations {\n-                        span_left_margin = min(span_left_margin, ann.start_col);\n-                        span_left_margin = min(span_left_margin, ann.end_col);\n+                        span_left_margin = min(span_left_margin, ann.start_col.display);\n+                        span_left_margin = min(span_left_margin, ann.end_col.display);\n                     }\n                 }\n                 if span_left_margin == usize::MAX {\n@@ -1625,11 +1627,12 @@ impl EmitterWriter {\n                         annotated_file.file.get_line(line.line_index - 1).map_or(0, |s| s.len()),\n                     );\n                     for ann in &line.annotations {\n-                        span_right_margin = max(span_right_margin, ann.start_col);\n-                        span_right_margin = max(span_right_margin, ann.end_col);\n+                        span_right_margin = max(span_right_margin, ann.start_col.display);\n+                        span_right_margin = max(span_right_margin, ann.end_col.display);\n                         // FIXME: account for labels not in the same line\n                         let label_right = ann.label.as_ref().map_or(0, |l| l.len() + 1);\n-                        label_right_margin = max(label_right_margin, ann.end_col + label_right);\n+                        label_right_margin =\n+                            max(label_right_margin, ann.end_col.display + label_right);\n                     }\n                 }\n \n@@ -2352,17 +2355,17 @@ impl FileWithAnnotatedLines {\n                         depth: 1,\n                         line_start: lo.line,\n                         line_end: hi.line,\n-                        start_col: lo.col_display,\n-                        end_col: hi.col_display,\n+                        start_col: AnnotationColumn::from_loc(&lo),\n+                        end_col: AnnotationColumn::from_loc(&hi),\n                         is_primary,\n                         label,\n                         overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file, ml));\n                 } else {\n                     let ann = Annotation {\n-                        start_col: lo.col_display,\n-                        end_col: hi.col_display,\n+                        start_col: AnnotationColumn::from_loc(&lo),\n+                        end_col: AnnotationColumn::from_loc(&hi),\n                         is_primary,\n                         label,\n                         annotation_type: AnnotationType::Singleline,\n@@ -2551,7 +2554,13 @@ fn num_overlap(\n     (b_start..b_end + extra).contains(&a_start) || (a_start..a_end + extra).contains(&b_start)\n }\n fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n-    num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)\n+    num_overlap(\n+        a1.start_col.display,\n+        a1.end_col.display + padding,\n+        a2.start_col.display,\n+        a2.end_col.display,\n+        false,\n+    )\n }\n \n fn emit_to_destination("}, {"sha": "98eb70b5fceeeaf70a5af67bc85b3fba5ee91a91", "filename": "compiler/rustc_errors/src/snippet.rs", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fsnippet.rs?ref=6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "patch": "@@ -1,20 +1,46 @@\n // Code for annotating snippets.\n \n-use crate::Level;\n+use crate::{Level, Loc};\n \n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Line {\n     pub line_index: usize,\n     pub annotations: Vec<Annotation>,\n }\n \n+#[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Default)]\n+pub struct AnnotationColumn {\n+    /// the (0-indexed) column for *display* purposes, counted in characters, not utf-8 bytes\n+    pub display: usize,\n+    /// the (0-indexed) column in the file, counted in characters, not utf-8 bytes.\n+    ///\n+    /// this may be different from `self.display`,\n+    /// e.g. if the file contains hard tabs, because we convert tabs to spaces for error messages.\n+    ///\n+    /// for example:\n+    /// ```text\n+    /// (hard tab)hello\n+    ///           ^ this is display column 4, but file column 1\n+    /// ```\n+    ///\n+    /// we want to keep around the correct file offset so that column numbers in error messages\n+    /// are correct. (motivated by <https://github.com/rust-lang/rust/issues/109537>)\n+    pub file: usize,\n+}\n+\n+impl AnnotationColumn {\n+    pub fn from_loc(loc: &Loc) -> AnnotationColumn {\n+        AnnotationColumn { display: loc.col_display, file: loc.col.0 }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct MultilineAnnotation {\n     pub depth: usize,\n     pub line_start: usize,\n     pub line_end: usize,\n-    pub start_col: usize,\n-    pub end_col: usize,\n+    pub start_col: AnnotationColumn,\n+    pub end_col: AnnotationColumn,\n     pub is_primary: bool,\n     pub label: Option<String>,\n     pub overlaps_exactly: bool,\n@@ -36,7 +62,12 @@ impl MultilineAnnotation {\n     pub fn as_start(&self) -> Annotation {\n         Annotation {\n             start_col: self.start_col,\n-            end_col: self.start_col + 1,\n+            end_col: AnnotationColumn {\n+                // these might not correspond to the same place anymore,\n+                // but that's okay for our purposes\n+                display: self.start_col.display + 1,\n+                file: self.start_col.file + 1,\n+            },\n             is_primary: self.is_primary,\n             label: None,\n             annotation_type: AnnotationType::MultilineStart(self.depth),\n@@ -45,7 +76,12 @@ impl MultilineAnnotation {\n \n     pub fn as_end(&self) -> Annotation {\n         Annotation {\n-            start_col: self.end_col.saturating_sub(1),\n+            start_col: AnnotationColumn {\n+                // these might not correspond to the same place anymore,\n+                // but that's okay for our purposes\n+                display: self.end_col.display.saturating_sub(1),\n+                file: self.end_col.file.saturating_sub(1),\n+            },\n             end_col: self.end_col,\n             is_primary: self.is_primary,\n             label: self.label.clone(),\n@@ -55,8 +91,8 @@ impl MultilineAnnotation {\n \n     pub fn as_line(&self) -> Annotation {\n         Annotation {\n-            start_col: 0,\n-            end_col: 0,\n+            start_col: Default::default(),\n+            end_col: Default::default(),\n             is_primary: self.is_primary,\n             label: None,\n             annotation_type: AnnotationType::MultilineLine(self.depth),\n@@ -92,14 +128,14 @@ pub enum AnnotationType {\n \n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Annotation {\n-    /// Start column, 0-based indexing -- counting *characters*, not\n-    /// utf-8 bytes. Note that it is important that this field goes\n+    /// Start column.\n+    /// Note that it is important that this field goes\n     /// first, so that when we sort, we sort orderings by start\n     /// column.\n-    pub start_col: usize,\n+    pub start_col: AnnotationColumn,\n \n     /// End column within the line (exclusive)\n-    pub end_col: usize,\n+    pub end_col: AnnotationColumn,\n \n     /// Is this annotation derived from primary span\n     pub is_primary: bool,\n@@ -118,12 +154,13 @@ impl Annotation {\n         matches!(self.annotation_type, AnnotationType::MultilineLine(_))\n     }\n \n+    /// Length of this annotation as displayed in the stderr output\n     pub fn len(&self) -> usize {\n         // Account for usize underflows\n-        if self.end_col > self.start_col {\n-            self.end_col - self.start_col\n+        if self.end_col.display > self.start_col.display {\n+            self.end_col.display - self.start_col.display\n         } else {\n-            self.start_col - self.end_col\n+            self.start_col.display - self.end_col.display\n         }\n     }\n "}, {"sha": "93418b7651c8bbe55fc761aa5307c6af3c7ef381", "filename": "tests/ui/diagnostic-width/auxiliary/tab_column_numbers.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/tests%2Fui%2Fdiagnostic-width%2Fauxiliary%2Ftab_column_numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/tests%2Fui%2Fdiagnostic-width%2Fauxiliary%2Ftab_column_numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Fauxiliary%2Ftab_column_numbers.rs?ref=6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-tab\n+\n+pub struct S;\n+impl S {\n+\t\tfn method(&self) {}\n+}"}, {"sha": "2abb0bcde95e31ca6a783f71ee8e99eebaacf62d", "filename": "tests/ui/diagnostic-width/tab-column-numbers.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.rs?ref=6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "patch": "@@ -0,0 +1,12 @@\n+// Test for #109537: ensure that column numbers are correctly generated when using hard tabs.\n+// aux-build:tab_column_numbers.rs\n+\n+// ignore-tidy-tab\n+\n+extern crate tab_column_numbers;\n+\n+fn main() {\n+\tlet s = tab_column_numbers::S;\n+\ts.method();\n+\t//~^ ERROR method `method` is private\n+}"}, {"sha": "ea4e1ff52a9e9c4d32aee4675b75264608d798b7", "filename": "tests/ui/diagnostic-width/tab-column-numbers.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be27b19a6ccd7ade90e41895a6fe20a2490e9b0/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Ftab-column-numbers.stderr?ref=6be27b19a6ccd7ade90e41895a6fe20a2490e9b0", "patch": "@@ -0,0 +1,14 @@\n+error[E0624]: method `method` is private\n+  --> $DIR/tab-column-numbers.rs:10:4\n+   |\n+LL |     s.method();\n+   |       ^^^^^^ private method\n+   |\n+  ::: $DIR/auxiliary/tab_column_numbers.rs:5:3\n+   |\n+LL |         fn method(&self) {}\n+   |         ---------------- private method defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0624`."}]}