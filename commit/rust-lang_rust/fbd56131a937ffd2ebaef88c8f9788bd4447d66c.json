{"sha": "fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDU2MTMxYTkzN2ZmZDJlYmFlZjg4YzhmOTc4OGJkNDQ0N2Q2NmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-07T06:43:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-11T10:04:49Z"}, "message": "fix a comment", "tree": {"sha": "f14f0055364506f7aca03c7b154d354fe4009eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14f0055364506f7aca03c7b154d354fe4009eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "html_url": "https://github.com/rust-lang/rust/commit/fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd56131a937ffd2ebaef88c8f9788bd4447d66c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1e94b131eec4795f1a8dcacdb12f574e7a4a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e94b131eec4795f1a8dcacdb12f574e7a4a74", "html_url": "https://github.com/rust-lang/rust/commit/ca1e94b131eec4795f1a8dcacdb12f574e7a4a74"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "da7f894e84d0aad492cfd156fec46606a926a555", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbd56131a937ffd2ebaef88c8f9788bd4447d66c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd56131a937ffd2ebaef88c8f9788bd4447d66c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "patch": "@@ -1949,7 +1949,7 @@ pub struct FieldDef {\n pub struct AdtDef {\n     /// `DefId` of the struct, enum or union item.\n     pub did: DefId,\n-    /// Variants of the ADT. If this is a struct or enum, then there will be a single variant.\n+    /// Variants of the ADT. If this is a struct or union, then there will be a single variant.\n     pub variants: IndexVec<self::layout::VariantIdx, VariantDef>,\n     /// Flags of the ADT (e.g. is this a struct? is this non-exhaustive?)\n     flags: AdtFlags,"}]}