{"sha": "8290c950a8b4cdc70038736abcf29f41dede6e0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTBjOTUwYThiNGNkYzcwMDM4NzM2YWJjZjI5ZjQxZGVkZTZlMGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T16:23:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't pub export ast::Stmt_ variants", "tree": {"sha": "7b027cdb71d631399b70d968e6e88d9028195916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b027cdb71d631399b70d968e6e88d9028195916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8290c950a8b4cdc70038736abcf29f41dede6e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8290c950a8b4cdc70038736abcf29f41dede6e0c", "html_url": "https://github.com/rust-lang/rust/commit/8290c950a8b4cdc70038736abcf29f41dede6e0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8290c950a8b4cdc70038736abcf29f41dede6e0c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498a2e416e693fa22042d3ae81c5c969fc87fe5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/498a2e416e693fa22042d3ae81c5c969fc87fe5c", "html_url": "https://github.com/rust-lang/rust/commit/498a2e416e693fa22042d3ae81c5c969fc87fe5c"}], "stats": {"total": 179, "additions": 87, "deletions": 92}, "files": [{"sha": "55f37759892ffa173ef935d69eba597cf973b79a", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -1534,25 +1534,25 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n \n pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> hir::Stmt {\n     match s.node {\n-        StmtDecl(ref d, id) => {\n+        StmtKind::Decl(ref d, id) => {\n             Spanned {\n                 node: hir::StmtDecl(lower_decl(lctx, d), id),\n                 span: s.span,\n             }\n         }\n-        StmtExpr(ref e, id) => {\n+        StmtKind::Expr(ref e, id) => {\n             Spanned {\n                 node: hir::StmtExpr(lower_expr(lctx, e), id),\n                 span: s.span,\n             }\n         }\n-        StmtSemi(ref e, id) => {\n+        StmtKind::Semi(ref e, id) => {\n             Spanned {\n                 node: hir::StmtSemi(lower_expr(lctx, e), id),\n                 span: s.span,\n             }\n         }\n-        StmtMac(..) => panic!(\"Shouldn't exist here\"),\n+        StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n     }\n }\n "}, {"sha": "f18b68a5b73d82c20c76dd2b924c63bf2b0a1704", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -365,7 +365,7 @@ impl EarlyLintPass for UnusedParens {\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         let (value, msg) = match s.node {\n-            ast::StmtDecl(ref decl, _) => match decl.node {\n+            ast::StmtKind::Decl(ref decl, _) => match decl.node {\n                 ast::DeclKind::Local(ref local) => match local.init {\n                     Some(ref value) => (value, \"assigned value\"),\n                     None => return"}, {"sha": "ec9fa1afb55f229e35baecd984c42ad15e302d3f", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -57,17 +57,17 @@ fn check_block(sess: &Session, b: &ast::Block, kind: &'static str) {\n     // Check all statements in the block\n     for stmt in &b.stmts {\n         let span = match stmt.node {\n-            ast::StmtDecl(ref decl, _) => {\n+            ast::StmtKind::Decl(ref decl, _) => {\n                 match decl.node {\n                     ast::DeclKind::Local(_) => decl.span,\n \n                     // Item statements are allowed\n                     ast::DeclKind::Item(_) => continue,\n                 }\n             }\n-            ast::StmtExpr(ref expr, _) => expr.span,\n-            ast::StmtSemi(ref semi, _) => semi.span,\n-            ast::StmtMac(..) => unreachable!(),\n+            ast::StmtKind::Expr(ref expr, _) => expr.span,\n+            ast::StmtKind::Semi(ref semi, _) => semi.span,\n+            ast::StmtKind::Mac(..) => unreachable!(),\n         };\n         span_err!(sess, span, E0016,\n                   \"blocks in {}s are limited to items and tail expressions\", kind);"}, {"sha": "b677941291bc92fbd7d2d2a33492a1578833359b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -18,7 +18,6 @@ pub use self::MetaItem_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n-pub use self::Stmt_::*;\n pub use self::StrStyle::*;\n pub use self::StructFieldKind::*;\n pub use self::TraitItem_::*;\n@@ -735,7 +734,7 @@ impl UnOp {\n }\n \n /// A statement\n-pub type Stmt = Spanned<Stmt_>;\n+pub type Stmt = Spanned<StmtKind>;\n \n impl fmt::Debug for Stmt {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -748,36 +747,36 @@ impl fmt::Debug for Stmt {\n \n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n-pub enum Stmt_ {\n+pub enum StmtKind {\n     /// Could be an item or a local (let) binding:\n-    StmtDecl(P<Decl>, NodeId),\n+    Decl(P<Decl>, NodeId),\n \n     /// Expr without trailing semi-colon (must have unit type):\n-    StmtExpr(P<Expr>, NodeId),\n+    Expr(P<Expr>, NodeId),\n \n     /// Expr with trailing semi-colon (may have any type):\n-    StmtSemi(P<Expr>, NodeId),\n+    Semi(P<Expr>, NodeId),\n \n-    StmtMac(P<Mac>, MacStmtStyle, ThinAttributes),\n+    Mac(P<Mac>, MacStmtStyle, ThinAttributes),\n }\n \n-impl Stmt_ {\n+impl StmtKind {\n     pub fn id(&self) -> Option<NodeId> {\n         match *self {\n-            StmtDecl(_, id) => Some(id),\n-            StmtExpr(_, id) => Some(id),\n-            StmtSemi(_, id) => Some(id),\n-            StmtMac(..) => None,\n+            StmtKind::Decl(_, id) => Some(id),\n+            StmtKind::Expr(_, id) => Some(id),\n+            StmtKind::Semi(_, id) => Some(id),\n+            StmtKind::Mac(..) => None,\n         }\n     }\n \n     pub fn attrs(&self) -> &[Attribute] {\n         match *self {\n-            StmtDecl(ref d, _) => d.attrs(),\n-            StmtExpr(ref e, _) |\n-            StmtSemi(ref e, _) => e.attrs(),\n-            StmtMac(_, _, Some(ref b)) => b,\n-            StmtMac(_, _, None) => &[],\n+            StmtKind::Decl(ref d, _) => d.attrs(),\n+            StmtKind::Expr(ref e, _) |\n+            StmtKind::Semi(ref e, _) => e.attrs(),\n+            StmtKind::Mac(_, _, Some(ref b)) => b,\n+            StmtKind::Mac(_, _, None) => &[],\n         }\n     }\n }"}, {"sha": "f9c41ee43ddd4b79ddfa16f83345738f36a100a1", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -16,7 +16,7 @@ pub use self::IntType::*;\n \n use ast;\n use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n-use ast::{Stmt, StmtDecl, StmtExpr, StmtMac, StmtSemi, DeclKind};\n+use ast::{Stmt, StmtKind, DeclKind};\n use ast::{Expr, Item, Local, Decl};\n use codemap::{Span, Spanned, spanned, dummy_spanned};\n use codemap::BytePos;\n@@ -947,12 +947,12 @@ impl WithAttrs for P<Stmt> {\n             Spanned {\n                 span: span,\n                 node: match node {\n-                    StmtDecl(decl, id) => StmtDecl(decl.with_attrs(attrs), id),\n-                    StmtExpr(expr, id) => StmtExpr(expr.with_attrs(attrs), id),\n-                    StmtSemi(expr, id) => StmtSemi(expr.with_attrs(attrs), id),\n-                    StmtMac(mac, style, mut ats) => {\n+                    StmtKind::Decl(decl, id) => StmtKind::Decl(decl.with_attrs(attrs), id),\n+                    StmtKind::Expr(expr, id) => StmtKind::Expr(expr.with_attrs(attrs), id),\n+                    StmtKind::Semi(expr, id) => StmtKind::Semi(expr.with_attrs(attrs), id),\n+                    StmtKind::Mac(mac, style, mut ats) => {\n                         ats.update(|a| a.append(attrs));\n-                        StmtMac(mac, style, ats)\n+                        StmtKind::Mac(mac, style, ats)\n                     }\n                 },\n             }"}, {"sha": "840acff73ada49a5921b62b589a5111b5c7ba1d0", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -372,7 +372,7 @@ impl<'v, 'a, 'b> visit::Visitor<'v> for StmtExprAttrFeatureVisitor<'a, 'b> {\n         let stmt_attrs = s.node.attrs();\n         if stmt_attrs.len() > 0 {\n             // attributes on items are fine\n-            if let ast::StmtDecl(ref decl, _) = s.node {\n+            if let ast::StmtKind::Decl(ref decl, _) = s.node {\n                 if let ast::DeclKind::Item(_) = decl.node {\n                     visit::walk_stmt(self, s);\n                     return;"}, {"sha": "ceb7cf69680bd9967875a1c931be8c030f9481ed", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -205,7 +205,7 @@ macro_rules! make_stmts_default {\n     ($me:expr) => {\n         $me.make_expr().map(|e| {\n             SmallVector::one(P(codemap::respan(\n-                e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID))))\n+                e.span, ast::StmtKind::Expr(e, ast::DUMMY_NODE_ID))))\n         })\n     }\n }\n@@ -402,8 +402,8 @@ impl MacResult for DummyResult {\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Stmt>>> {\n         Some(SmallVector::one(P(\n             codemap::respan(self.span,\n-                            ast::StmtExpr(DummyResult::raw_expr(self.span),\n-                                          ast::DUMMY_NODE_ID)))))\n+                            ast::StmtKind::Expr(DummyResult::raw_expr(self.span),\n+                                                ast::DUMMY_NODE_ID)))))\n     }\n }\n "}, {"sha": "76071cc71e6cd2be5d693c8d255c597b13637f95", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -506,7 +506,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn stmt_expr(&self, expr: P<ast::Expr>) -> P<ast::Stmt> {\n-        P(respan(expr.span, ast::StmtSemi(expr, ast::DUMMY_NODE_ID)))\n+        P(respan(expr.span, ast::StmtKind::Semi(expr, ast::DUMMY_NODE_ID)))\n     }\n \n     fn stmt_let(&self, sp: Span, mutbl: bool, ident: ast::Ident,\n@@ -525,7 +525,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs: None,\n         });\n         let decl = respan(sp, ast::DeclKind::Local(local));\n-        P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n+        P(respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n \n     fn stmt_let_typed(&self,\n@@ -549,7 +549,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs: None,\n         });\n         let decl = respan(sp, ast::DeclKind::Local(local));\n-        P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n+        P(respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n \n     fn block(&self, span: Span, stmts: Vec<P<ast::Stmt>>,\n@@ -559,7 +559,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> P<ast::Stmt> {\n         let decl = respan(sp, ast::DeclKind::Item(item));\n-        P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n+        P(respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n \n     fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> {"}, {"sha": "78bc4e2c73520dfd4a25e266413baecd83dd3b22", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -10,8 +10,7 @@\n \n use ast::{Block, Crate, DeclKind, PatMac};\n use ast::{Local, Ident, Mac_, Name};\n-use ast::{ItemMac, MacStmtWithSemicolon, Mrk, Stmt, StmtDecl, StmtMac};\n-use ast::{StmtExpr, StmtSemi};\n+use ast::{ItemMac, MacStmtWithSemicolon, Mrk, Stmt, StmtKind};\n use ast::TokenTree;\n use ast;\n use ext::mtwt;\n@@ -507,7 +506,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n fn expand_stmt(stmt: P<Stmt>, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> {\n     let stmt = stmt.and_then(|stmt| stmt);\n     let (mac, style, attrs) = match stmt.node {\n-        StmtMac(mac, style, attrs) => (mac, style, attrs),\n+        StmtKind::Mac(mac, style, attrs) => (mac, style, attrs),\n         _ => return expand_non_macro_stmt(stmt, fld)\n     };\n \n@@ -539,7 +538,7 @@ fn expand_stmt(stmt: P<Stmt>, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> {\n             let new_stmt = stmt.map(|Spanned {node, span}| {\n                 Spanned {\n                     node: match node {\n-                        StmtExpr(e, stmt_id) => StmtSemi(e, stmt_id),\n+                        StmtKind::Expr(e, stmt_id) => StmtKind::Semi(e, stmt_id),\n                         _ => node /* might already have a semi */\n                     },\n                     span: span\n@@ -558,7 +557,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n                          -> SmallVector<P<Stmt>> {\n     // is it a let?\n     match node {\n-        StmtDecl(decl, node_id) => decl.and_then(|Spanned {node: decl, span}| match decl {\n+        StmtKind::Decl(decl, node_id) => decl.and_then(|Spanned {node: decl, span}| match decl {\n             DeclKind::Local(local) => {\n                 // take it apart:\n                 let rewritten_local = local.map(|Local {id, pat, ty, init, span, attrs}| {\n@@ -596,7 +595,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n                     }\n                 });\n                 SmallVector::one(P(Spanned {\n-                    node: StmtDecl(P(Spanned {\n+                    node: StmtKind::Decl(P(Spanned {\n                             node: DeclKind::Local(rewritten_local),\n                             span: span\n                         }),\n@@ -606,7 +605,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n             }\n             _ => {\n                 noop_fold_stmt(Spanned {\n-                    node: StmtDecl(P(Spanned {\n+                    node: StmtKind::Decl(P(Spanned {\n                             node: decl,\n                             span: span\n                         }),"}, {"sha": "9819dc6220a4713e6114ee55e8606db99c5ebf19", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -1347,39 +1347,39 @@ pub fn noop_fold_stmt<T: Folder>(Spanned {node, span}: Stmt, folder: &mut T)\n                                  -> SmallVector<P<Stmt>> {\n     let span = folder.new_span(span);\n     match node {\n-        StmtDecl(d, id) => {\n+        StmtKind::Decl(d, id) => {\n             let id = folder.new_id(id);\n             folder.fold_decl(d).into_iter().map(|d| P(Spanned {\n-                node: StmtDecl(d, id),\n+                node: StmtKind::Decl(d, id),\n                 span: span\n             })).collect()\n         }\n-        StmtExpr(e, id) => {\n+        StmtKind::Expr(e, id) => {\n             let id = folder.new_id(id);\n             if let Some(e) = folder.fold_opt_expr(e) {\n                 SmallVector::one(P(Spanned {\n-                    node: StmtExpr(e, id),\n+                    node: StmtKind::Expr(e, id),\n                     span: span\n                 }))\n             } else {\n                 SmallVector::zero()\n             }\n         }\n-        StmtSemi(e, id) => {\n+        StmtKind::Semi(e, id) => {\n             let id = folder.new_id(id);\n             if let Some(e) = folder.fold_opt_expr(e) {\n                 SmallVector::one(P(Spanned {\n-                    node: StmtSemi(e, id),\n+                    node: StmtKind::Semi(e, id),\n                     span: span\n                 }))\n             } else {\n                 SmallVector::zero()\n             }\n         }\n-        StmtMac(mac, semi, attrs) => SmallVector::one(P(Spanned {\n-            node: StmtMac(mac.map(|m| folder.fold_mac(m)),\n-                          semi,\n-                          attrs.map_thin_attrs(|v| fold_attrs(v, folder))),\n+        StmtKind::Mac(mac, semi, attrs) => SmallVector::one(P(Spanned {\n+            node: StmtKind::Mac(mac.map(|m| folder.fold_mac(m)),\n+                                semi,\n+                                attrs.map_thin_attrs(|v| fold_attrs(v, folder))),\n             span: span\n         }))\n     }"}, {"sha": "89110f3160fc9343fe24acafd6b003bc243e0faf", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -45,16 +45,16 @@ pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n /// this statement requires a semicolon after it.\n /// note that in one case (stmt_semi), we've already\n /// seen the semicolon, and thus don't need another.\n-pub fn stmt_ends_with_semi(stmt: &ast::Stmt_) -> bool {\n+pub fn stmt_ends_with_semi(stmt: &ast::StmtKind) -> bool {\n     match *stmt {\n-        ast::StmtDecl(ref d, _) => {\n+        ast::StmtKind::Decl(ref d, _) => {\n             match d.node {\n                 ast::DeclKind::Local(_) => true,\n                 ast::DeclKind::Item(_) => false,\n             }\n         }\n-        ast::StmtExpr(ref e, _) => expr_requires_semi_to_be_stmt(e),\n-        ast::StmtSemi(..) => false,\n-        ast::StmtMac(..) => false,\n+        ast::StmtKind::Expr(ref e, _) => expr_requires_semi_to_be_stmt(e),\n+        ast::StmtKind::Semi(..) => false,\n+        ast::StmtKind::Mac(..) => false,\n     }\n }"}, {"sha": "2bbf1699662f870a94480ad4abcb75640c2f1c0a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -867,7 +867,7 @@ mod tests {\n     #[test] fn parse_stmt_1 () {\n         assert!(string_to_stmt(\"b;\".to_string()) ==\n                    Some(P(Spanned{\n-                       node: ast::StmtExpr(P(ast::Expr {\n+                       node: ast::StmtKind::Expr(P(ast::Expr {\n                            id: ast::DUMMY_NODE_ID,\n                            node: ast::ExprKind::Path(None, ast::Path {\n                                span:sp(0,1),\n@@ -958,7 +958,7 @@ mod tests {\n                                     },\n                                     P(ast::Block {\n                                         stmts: vec!(P(Spanned{\n-                                            node: ast::StmtSemi(P(ast::Expr{\n+                                            node: ast::StmtKind::Semi(P(ast::Expr{\n                                                 id: ast::DUMMY_NODE_ID,\n                                                 node: ast::ExprKind::Path(None,\n                                                       ast::Path{"}, {"sha": "93088648e932b3d4afdf2f7bc9939dac3a317e52", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -36,8 +36,8 @@ use ast::NamedField;\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild};\n use ast::{PolyTraitRef, QSelf};\n-use ast::{Stmt, StmtDecl};\n-use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField};\n+use ast::{Stmt, StmtKind};\n+use ast::{VariantData, StructField};\n use ast::StrStyle;\n use ast::SelfKind;\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n@@ -3678,7 +3678,7 @@ impl<'a> Parser<'a> {\n             try!(self.expect_keyword(keywords::Let));\n             let decl = try!(self.parse_let(attrs.into_thin_attrs()));\n             let hi = decl.span.hi;\n-            let stmt = StmtDecl(decl, ast::DUMMY_NODE_ID);\n+            let stmt = StmtKind::Decl(decl, ast::DUMMY_NODE_ID);\n             spanned(lo, hi, stmt)\n         } else if self.token.is_ident()\n             && !self.token.is_any_keyword()\n@@ -3730,11 +3730,8 @@ impl<'a> Parser<'a> {\n             };\n \n             if id.name == token::special_idents::invalid.name {\n-                let stmt = StmtMac(P(spanned(lo,\n-                                             hi,\n-                                             Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT })),\n-                                   style,\n-                                   attrs.into_thin_attrs());\n+                let mac = P(spanned(lo, hi, Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT }));\n+                let stmt = StmtKind::Mac(mac, style, attrs.into_thin_attrs());\n                 spanned(lo, hi, stmt)\n             } else {\n                 // if it has a special ident, it's definitely an item\n@@ -3749,7 +3746,7 @@ impl<'a> Parser<'a> {\n                                        followed by a semicolon\");\n                     }\n                 }\n-                spanned(lo, hi, StmtDecl(\n+                spanned(lo, hi, StmtKind::Decl(\n                     P(spanned(lo, hi, DeclKind::Item(\n                         self.mk_item(\n                             lo, hi, id /*id is good here*/,\n@@ -3764,7 +3761,7 @@ impl<'a> Parser<'a> {\n                 Some(i) => {\n                     let hi = i.span.hi;\n                     let decl = P(spanned(lo, hi, DeclKind::Item(i)));\n-                    spanned(lo, hi, StmtDecl(decl, ast::DUMMY_NODE_ID))\n+                    spanned(lo, hi, StmtKind::Decl(decl, ast::DUMMY_NODE_ID))\n                 }\n                 None => {\n                     let unused_attrs = |attrs: &[_], s: &mut Self| {\n@@ -3790,7 +3787,7 @@ impl<'a> Parser<'a> {\n                     let e = try!(self.parse_expr_res(\n                         Restrictions::RESTRICTION_STMT_EXPR, Some(attrs.into_thin_attrs())));\n                     let hi = e.span.hi;\n-                    let stmt = StmtExpr(e, ast::DUMMY_NODE_ID);\n+                    let stmt = StmtKind::Expr(e, ast::DUMMY_NODE_ID);\n                     spanned(lo, hi, stmt)\n                 }\n             }\n@@ -3844,16 +3841,16 @@ impl<'a> Parser<'a> {\n                 continue;\n             };\n             match node {\n-                StmtExpr(e, _) => {\n+                StmtKind::Expr(e, _) => {\n                     try!(self.handle_expression_like_statement(e, span, &mut stmts, &mut expr));\n                 }\n-                StmtMac(mac, MacStmtWithoutBraces, attrs) => {\n+                StmtKind::Mac(mac, MacStmtWithoutBraces, attrs) => {\n                     // statement macro without braces; might be an\n                     // expr depending on whether a semicolon follows\n                     match self.token {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n-                                node: StmtMac(mac, MacStmtWithSemicolon, attrs),\n+                                node: StmtKind::Mac(mac, MacStmtWithSemicolon, attrs),\n                                 span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             self.bump();\n@@ -3873,12 +3870,12 @@ impl<'a> Parser<'a> {\n                         }\n                     }\n                 }\n-                StmtMac(m, style, attrs) => {\n+                StmtKind::Mac(m, style, attrs) => {\n                     // statement macro; might be an expr\n                     match self.token {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n-                                node: StmtMac(m, MacStmtWithSemicolon, attrs),\n+                                node: StmtKind::Mac(m, MacStmtWithSemicolon, attrs),\n                                 span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             self.bump();\n@@ -3892,7 +3889,7 @@ impl<'a> Parser<'a> {\n                         }\n                         _ => {\n                             stmts.push(P(Spanned {\n-                                node: StmtMac(m, style, attrs),\n+                                node: StmtKind::Mac(m, style, attrs),\n                                 span: span\n                             }));\n                         }\n@@ -3944,14 +3941,14 @@ impl<'a> Parser<'a> {\n                     expn_id: span.expn_id,\n                 };\n                 stmts.push(P(Spanned {\n-                    node: StmtSemi(e, ast::DUMMY_NODE_ID),\n+                    node: StmtKind::Semi(e, ast::DUMMY_NODE_ID),\n                     span: span_with_semi,\n                 }));\n             }\n             token::CloseDelim(token::Brace) => *last_block_expr = Some(e),\n             _ => {\n                 stmts.push(P(Spanned {\n-                    node: StmtExpr(e, ast::DUMMY_NODE_ID),\n+                    node: StmtKind::Expr(e, ast::DUMMY_NODE_ID),\n                     span: span\n                 }));\n             }"}, {"sha": "a880e0dca804954b4c2dbc63c8eb9a6f4492e20f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -1613,19 +1613,19 @@ impl<'a> State<'a> {\n     pub fn print_stmt(&mut self, st: &ast::Stmt) -> io::Result<()> {\n         try!(self.maybe_print_comment(st.span.lo));\n         match st.node {\n-            ast::StmtDecl(ref decl, _) => {\n+            ast::StmtKind::Decl(ref decl, _) => {\n                 try!(self.print_decl(&**decl));\n             }\n-            ast::StmtExpr(ref expr, _) => {\n+            ast::StmtKind::Expr(ref expr, _) => {\n                 try!(self.space_if_not_bol());\n                 try!(self.print_expr_outer_attr_style(&**expr, false));\n             }\n-            ast::StmtSemi(ref expr, _) => {\n+            ast::StmtKind::Semi(ref expr, _) => {\n                 try!(self.space_if_not_bol());\n                 try!(self.print_expr_outer_attr_style(&**expr, false));\n                 try!(word(&mut self.s, \";\"));\n             }\n-            ast::StmtMac(ref mac, style, ref attrs) => {\n+            ast::StmtKind::Mac(ref mac, style, ref attrs) => {\n                 try!(self.space_if_not_bol());\n                 try!(self.print_outer_attributes(attrs.as_attr_slice()));\n                 let delim = match style {"}, {"sha": "369efcd051ed218fe3fbf4247222a158103520f4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -625,11 +625,11 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     match statement.node {\n-        StmtDecl(ref declaration, _) => visitor.visit_decl(declaration),\n-        StmtExpr(ref expression, _) | StmtSemi(ref expression, _) => {\n+        StmtKind::Decl(ref declaration, _) => visitor.visit_decl(declaration),\n+        StmtKind::Expr(ref expression, _) | StmtKind::Semi(ref expression, _) => {\n             visitor.visit_expr(expression)\n         }\n-        StmtMac(ref mac, _, ref attrs) => {\n+        StmtKind::Mac(ref mac, _, ref attrs) => {\n             visitor.visit_mac(mac);\n             for attr in attrs.as_attr_slice() {\n                 visitor.visit_attribute(attr);"}, {"sha": "917c6b1ab8905c7e91929ba14361ea44c96d02dc", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -152,5 +152,5 @@ fn stmt_let_undescore(cx: &mut ExtCtxt,\n         attrs: None,\n     });\n     let decl = respan(sp, ast::DeclKind::Local(local));\n-    P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n+    P(respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID)))\n }"}, {"sha": "831a6250c9fccff2b1457910d14f373a972294b3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8290c950a8b4cdc70038736abcf29f41dede6e0c/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=8290c950a8b4cdc70038736abcf29f41dede6e0c", "patch": "@@ -461,7 +461,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // Wrap the declaration in a block so that it forms a single expression.\n         ecx.expr_block(ecx.block(sp,\n-            vec![P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))],\n+            vec![P(respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID)))],\n             Some(ecx.expr_ident(sp, name))))\n     }\n "}]}