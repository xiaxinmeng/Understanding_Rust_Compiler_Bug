{"sha": "bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNmU2NmViM2FhNDMyZjQyMmJjNjFjZGI2ZjBlOWM2MTAyNWE2ZDU=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-11-10T21:11:25Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-06T05:08:35Z"}, "message": "Implement core::panic::Location::caller using #[track_caller].", "tree": {"sha": "254b04e97979c62d5725ce3e3f7d7816829bb627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254b04e97979c62d5725ce3e3f7d7816829bb627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "html_url": "https://github.com/rust-lang/rust/commit/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaebd987f38227fe17cdc3eb23be819e4070429", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaebd987f38227fe17cdc3eb23be819e4070429", "html_url": "https://github.com/rust-lang/rust/commit/ebaebd987f38227fe17cdc3eb23be819e4070429"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "8a514f1e78e807d6efe5889931709ba6a241b52e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "patch": "@@ -102,6 +102,7 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n+#![cfg_attr(not(bootstrap), feature(track_caller))]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]"}, {"sha": "e924ee2036988781481131303e75f4fa1ae18330", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "patch": "@@ -176,6 +176,60 @@ pub struct Location<'a> {\n     col: u32,\n }\n \n+impl<'a> Location<'a> {\n+    /// Returns the source location of the caller of this function. If that function's caller is\n+    /// annotated then its call location will be returned, and so on up the stack to the first call\n+    /// within a non-tracked function body.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(track_caller)]\n+    /// use core::panic::Location;\n+    ///\n+    /// /// Returns the [`Location`] at which it is called.\n+    /// #[track_caller]\n+    /// fn get_caller_location() -> &'static Location<'static> {\n+    ///     Location::caller()\n+    /// }\n+    ///\n+    /// /// Returns a [`Location`] from within this function's definition.\n+    /// fn get_just_one_location() -> &'static Location<'static> {\n+    ///     get_caller_location()\n+    /// }\n+    ///\n+    /// let fixed_location = get_just_one_location();\n+    /// assert_eq!(fixed_location.file(), file!());\n+    /// assert_eq!(fixed_location.line(), 15);\n+    /// assert_eq!(fixed_location.column(), 5);\n+    ///\n+    /// // running the same untracked function in a different location gives us the same result\n+    /// let second_fixed_location = get_just_one_location();\n+    /// assert_eq!(fixed_location.file(), second_fixed_location.file());\n+    /// assert_eq!(fixed_location.line(), second_fixed_location.line());\n+    /// assert_eq!(fixed_location.column(), second_fixed_location.column());\n+    ///\n+    /// let this_location = get_caller_location();\n+    /// assert_eq!(this_location.file(), file!());\n+    /// assert_eq!(this_location.line(), 29);\n+    /// assert_eq!(this_location.column(), 21);\n+    ///\n+    /// // running the tracked function in a different location produces a different value\n+    /// let another_location = get_caller_location();\n+    /// assert_eq!(this_location.file(), another_location.file());\n+    /// assert_ne!(this_location.line(), another_location.line());\n+    /// assert_ne!(this_location.column(), another_location.column());\n+    /// ```\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"track_caller\",\n+               reason = \"uses #[track_caller] which is not yet stable\",\n+               issue = \"47809\")]\n+    #[track_caller]\n+    pub const fn caller() -> &'static Location<'static> {\n+        crate::intrinsics::caller_location()\n+    }\n+}\n+\n impl<'a> Location<'a> {\n     #![unstable(feature = \"panic_internals\",\n                 reason = \"internal details of the implementation of the `panic!` \\"}, {"sha": "76e62b89ab818d34f5d85a4ee50530aa2530c1fa", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs?ref=bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "patch": "@@ -1,18 +1,18 @@\n // run-pass\n \n-#![feature(core_intrinsics)]\n+#![feature(track_caller)]\n \n macro_rules! caller_location_from_macro {\n-    () => (core::intrinsics::caller_location());\n+    () => (core::panic::Location::caller());\n }\n \n fn main() {\n-    let loc = core::intrinsics::caller_location();\n+    let loc = core::panic::Location::caller();\n     assert_eq!(loc.file(), file!());\n     assert_eq!(loc.line(), 10);\n     assert_eq!(loc.column(), 15);\n \n-    // `caller_location()` in a macro should behave similarly to `file!` and `line!`,\n+    // `Location::caller()` in a macro should behave similarly to `file!` and `line!`,\n     // i.e. point to where the macro was invoked, instead of the macro itself.\n     let loc2 = caller_location_from_macro!();\n     assert_eq!(loc2.file(), file!());"}, {"sha": "0614c52c66036a1de278e427c33e71590488ab27", "filename": "src/test/ui/rfc-2091-track-caller/const-caller-location.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs?ref=bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "patch": "@@ -1,20 +1,20 @@\n // run-pass\n \n-#![feature(const_fn, core_intrinsics, track_caller)]\n+#![feature(const_fn, track_caller)]\n \n-use std::{intrinsics::caller_location, panic::Location};\n+use std::panic::Location;\n \n-const LOCATION: &Location = caller_location();\n+const LOCATION: &Location = Location::caller();\n \n const TRACKED: &Location = tracked();\n #[track_caller]\n const fn tracked() -> &'static Location <'static> {\n-    caller_location()\n+    Location::caller()\n }\n \n const NESTED: &Location = nested_location();\n const fn nested_location() -> &'static Location<'static> {\n-    caller_location()\n+    Location::caller()\n }\n \n const CONTAINED: &Location = contained();"}, {"sha": "8436ee510a5bcc12aaac9ddc07b0ba3556dc19ac", "filename": "src/test/ui/rfc-2091-track-caller/track-caller-attribute.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-attribute.rs?ref=bc6e66eb3aa432f422bc61cdb6f0e9c61025a6d5", "patch": "@@ -1,24 +1,24 @@\n // run-pass\n \n-#![feature(const_fn, core_intrinsics, track_caller)]\n+#![feature(const_fn, track_caller)]\n \n-use std::{intrinsics::caller_location, panic::Location};\n+use std::panic::Location;\n \n #[track_caller]\n-fn tracked() -> &'static Location <'static> {\n-    caller_location()\n+fn tracked() -> &'static Location<'static> {\n+    Location::caller()\n }\n \n fn nested_intrinsic() -> &'static Location<'static> {\n-    caller_location()\n+    Location::caller()\n }\n \n fn nested_tracked() -> &'static Location<'static> {\n     tracked()\n }\n \n fn main() {\n-    let location = caller_location();\n+    let location = Location::caller();\n     assert_eq!(location.file(), file!());\n     assert_eq!(location.line(), 21);\n     assert_eq!(location.column(), 20);"}]}