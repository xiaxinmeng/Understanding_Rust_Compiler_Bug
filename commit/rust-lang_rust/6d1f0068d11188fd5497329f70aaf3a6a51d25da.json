{"sha": "6d1f0068d11188fd5497329f70aaf3a6a51d25da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMWYwMDY4ZDExMTg4ZmQ1NDk3MzI5ZjcwYWFmM2E2YTUxZDI1ZGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T17:02:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T17:02:42Z"}, "message": "Implement nested and mutable statics (fixes #9)", "tree": {"sha": "c348b40ec22235aab105cb5a7665396d28a80645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c348b40ec22235aab105cb5a7665396d28a80645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1f0068d11188fd5497329f70aaf3a6a51d25da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1f0068d11188fd5497329f70aaf3a6a51d25da", "html_url": "https://github.com/rust-lang/rust/commit/6d1f0068d11188fd5497329f70aaf3a6a51d25da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1f0068d11188fd5497329f70aaf3a6a51d25da/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "html_url": "https://github.com/rust-lang/rust/commit/7f62fedeb8ba2e76176ec01a9474be5f319dcf29"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "d2a205856a9c4e58c0f8516dc844aaf614e25fcb", "filename": "examples/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d1f0068d11188fd5497329f70aaf3a6a51d25da/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1f0068d11188fd5497329f70aaf3a6a51d25da/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=6d1f0068d11188fd5497329f70aaf3a6a51d25da", "patch": "@@ -44,6 +44,7 @@ unsafe impl Sync for i16 {}\n unsafe impl Sync for i32 {}\n unsafe impl Sync for isize {}\n unsafe impl Sync for char {}\n+unsafe impl<'a, T: ?Sized> Sync for &'a T {}\n \n #[lang = \"freeze\"]\n trait Freeze {}"}, {"sha": "ffda837fac2b5192883c240fec85aa8a6aba96f8", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d1f0068d11188fd5497329f70aaf3a6a51d25da/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1f0068d11188fd5497329f70aaf3a6a51d25da/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=6d1f0068d11188fd5497329f70aaf3a6a51d25da", "patch": "@@ -16,7 +16,8 @@ extern \"C\" {\n     fn puts(s: *const u8);\n }\n \n-static NUM: u8 = 6 * 7;\n+static mut NUM: u8 = 6 * 7;\n+static NUM_REF: &'static u8 = unsafe { &NUM };\n \n #[lang = \"start\"]\n fn start(_main: *const u8, i: isize, _: *const *const u8) -> isize {\n@@ -25,5 +26,8 @@ fn start(_main: *const u8, i: isize, _: *const *const u8) -> isize {\n         puts(ptr);\n     }\n \n-    NUM as isize\n+    unsafe {\n+        NUM = 43;\n+        *NUM_REF as isize\n+    }\n }"}, {"sha": "7a88b78af05a184942effe51ce7934aa7b92b260", "filename": "src/constant.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d1f0068d11188fd5497329f70aaf3a6a51d25da/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1f0068d11188fd5497329f70aaf3a6a51d25da/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=6d1f0068d11188fd5497329f70aaf3a6a51d25da", "patch": "@@ -1,6 +1,7 @@\n use cranelift_module::*;\n use crate::prelude::*;\n-use rustc::mir::interpret::{read_target_uint, AllocId, ConstValue, GlobalId};\n+use syntax::ast::Mutability as AstMutability;\n+use rustc::mir::interpret::{read_target_uint, AllocId, AllocType, ConstValue, GlobalId};\n use rustc::ty::Const;\n use rustc_mir::interpret::{CompileTimeEvaluator, Memory};\n \n@@ -191,12 +192,24 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n \n         data_ctx.define(\n             alloc.bytes.to_vec().into_boxed_slice(),\n-            Writability::Readonly,\n+            match alloc.runtime_mutability {\n+                AstMutability::Mutable => Writability::Writable,\n+                AstMutability::Immutable => Writability::Readonly,\n+            },\n         );\n \n         for &(offset, reloc) in alloc.relocations.iter() {\n-            cx.todo.insert(TodoItem::Alloc(reloc));\n-            let data_id = data_id_for_alloc_id(module, reloc);\n+            let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n+                AllocType::Memory(_) => {\n+                    cx.todo.insert(TodoItem::Alloc(reloc));\n+                    data_id_for_alloc_id(module, reloc)\n+                }\n+                AllocType::Function(_) => unimplemented!(\"function static reference\"),\n+                AllocType::Static(def_id) => {\n+                    cx.todo.insert(TodoItem::Static(def_id));\n+                    data_id_for_static(tcx, module, def_id)\n+                }\n+            };\n \n             let reloc_offset = {\n                 let endianness = memory.endianness();"}]}