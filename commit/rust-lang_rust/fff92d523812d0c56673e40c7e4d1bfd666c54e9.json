{"sha": "fff92d523812d0c56673e40c7e4d1bfd666c54e9", "node_id": "C_kwDOAAsO6NoAKGZmZjkyZDUyMzgxMmQwYzU2NjczZTQwYzdlNGQxYmZkNjY2YzU0ZTk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-04T16:45:29Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-04T16:45:29Z"}, "message": "remove some integer casts from slice iter", "tree": {"sha": "ba23211e263d75cc82c9e51f1bddb65a5b3734b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba23211e263d75cc82c9e51f1bddb65a5b3734b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff92d523812d0c56673e40c7e4d1bfd666c54e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff92d523812d0c56673e40c7e4d1bfd666c54e9", "html_url": "https://github.com/rust-lang/rust/commit/fff92d523812d0c56673e40c7e4d1bfd666c54e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff92d523812d0c56673e40c7e4d1bfd666c54e9/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b11bf65e4aaa125952b6479a63f36e9e83efc32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b11bf65e4aaa125952b6479a63f36e9e83efc32c", "html_url": "https://github.com/rust-lang/rust/commit/b11bf65e4aaa125952b6479a63f36e9e83efc32c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "6c9e7574e1746bd781cca59aa921fe68bc82d983", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fff92d523812d0c56673e40c7e4d1bfd666c54e9/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff92d523812d0c56673e40c7e4d1bfd666c54e9/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=fff92d523812d0c56673e40c7e4d1bfd666c54e9", "patch": "@@ -64,7 +64,7 @@ macro_rules! iterator {\n         // backwards by `n`. `n` must not exceed `self.len()`.\n         macro_rules! zst_shrink {\n             ($self: ident, $n: ident) => {\n-                $self.end = $self.end.wrapping_byte_offset(-$n);\n+                $self.end = $self.end.wrapping_byte_sub($n);\n             }\n         }\n \n@@ -82,15 +82,15 @@ macro_rules! iterator {\n             // returning the old start.\n             // Unsafe because the offset must not exceed `self.len()`.\n             #[inline(always)]\n-            unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {\n+            unsafe fn post_inc_start(&mut self, offset: usize) -> * $raw_mut T {\n                 if mem::size_of::<T>() == 0 {\n                     zst_shrink!(self, offset);\n                     self.ptr.as_ptr()\n                 } else {\n                     let old = self.ptr.as_ptr();\n                     // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,\n                     // so this new pointer is inside `self` and thus guaranteed to be non-null.\n-                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };\n+                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().add(offset)) };\n                     old\n                 }\n             }\n@@ -99,15 +99,15 @@ macro_rules! iterator {\n             // returning the new end.\n             // Unsafe because the offset must not exceed `self.len()`.\n             #[inline(always)]\n-            unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {\n+            unsafe fn pre_dec_end(&mut self, offset: usize) -> * $raw_mut T {\n                 if mem::size_of::<T>() == 0 {\n                     zst_shrink!(self, offset);\n                     self.ptr.as_ptr()\n                 } else {\n                     // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,\n                     // which is guaranteed to not overflow an `isize`. Also, the resulting pointer\n                     // is in bounds of `slice`, which fulfills the other requirements for `offset`.\n-                    self.end = unsafe { self.end.offset(-offset) };\n+                    self.end = unsafe { self.end.sub(offset) };\n                     self.end\n                 }\n             }\n@@ -180,7 +180,7 @@ macro_rules! iterator {\n                 }\n                 // SAFETY: We are in bounds. `post_inc_start` does the right thing even for ZSTs.\n                 unsafe {\n-                    self.post_inc_start(n as isize);\n+                    self.post_inc_start(n);\n                     Some(next_unchecked!(self))\n                 }\n             }\n@@ -189,7 +189,7 @@ macro_rules! iterator {\n             fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n-                unsafe { self.post_inc_start(advance as isize) };\n+                unsafe { self.post_inc_start(advance) };\n                 if advance == n { Ok(()) } else { Err(advance) }\n             }\n \n@@ -375,7 +375,7 @@ macro_rules! iterator {\n                 }\n                 // SAFETY: We are in bounds. `pre_dec_end` does the right thing even for ZSTs.\n                 unsafe {\n-                    self.pre_dec_end(n as isize);\n+                    self.pre_dec_end(n);\n                     Some(next_back_unchecked!(self))\n                 }\n             }\n@@ -384,7 +384,7 @@ macro_rules! iterator {\n             fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n-                unsafe { self.pre_dec_end(advance as isize) };\n+                unsafe { self.pre_dec_end(advance) };\n                 if advance == n { Ok(()) } else { Err(advance) }\n             }\n         }"}]}