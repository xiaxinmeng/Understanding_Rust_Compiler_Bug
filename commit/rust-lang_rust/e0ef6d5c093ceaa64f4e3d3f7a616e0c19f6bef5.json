{"sha": "e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWY2ZDVjMDkzY2VhYTY0ZjRlM2QzZjdhNjE2ZTBjMTlmNmJlZjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-15T13:54:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T13:54:04Z"}, "message": "Merge #5394\n\n5394: Add missing cancellation point r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "19a00b2f7c8be828452a6857cd28038da64057c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a00b2f7c8be828452a6857cd28038da64057c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDwp9CRBK7hj4Ov3rIwAAdHIIAEkZf2qet+cX3ghg70n3xQi6\n68iftMXuMRUbz6cjTjNAimCgd5ONj558YQ1XtHRbQxFHHrlpIfC2Jd/l338oU/a1\ndBJYO/7n1zg1x605SNlMeYBXQZ8AB20xgU/4vSTtspMS8l9fJ7Q5whcquLXEFcJi\nPmkpFDv3/UkrI4OJV0BbF0Zyzhta2pgETND4TPkpvG+gWjqMwM+YgSKEEs147XS6\n7j8CIJBEKC84j4lzWO7IcK0b/LTRt6LhmBkz3hRRwC/2MfFqZalwuGDKnUaTs2zt\nCVjhlbGf8RzF9IgXPvjSbrumyHTtooOWz+MWqtTS/2YhnsS32iz/clB1iPTpzLo=\n=0/bO\n-----END PGP SIGNATURE-----\n", "payload": "tree 19a00b2f7c8be828452a6857cd28038da64057c2\nparent fbdc3c78494dfd2127638feb1de2ebd157667d6d\nparent 4c08fc9be3f7b79e3040a154aa97c29c97ee5a49\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594821244 +0000\ncommitter GitHub <noreply@github.com> 1594821244 +0000\n\nMerge #5394\n\n5394: Add missing cancellation point r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5", "html_url": "https://github.com/rust-lang/rust/commit/e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbdc3c78494dfd2127638feb1de2ebd157667d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdc3c78494dfd2127638feb1de2ebd157667d6d", "html_url": "https://github.com/rust-lang/rust/commit/fbdc3c78494dfd2127638feb1de2ebd157667d6d"}, {"sha": "4c08fc9be3f7b79e3040a154aa97c29c97ee5a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c08fc9be3f7b79e3040a154aa97c29c97ee5a49", "html_url": "https://github.com/rust-lang/rust/commit/4c08fc9be3f7b79e3040a154aa97c29c97ee5a49"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "d85a86c0a3ed72621eaa4c9bb18c3dce0a04d035", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e0ef6d5c093ceaa64f4e3d3f7a616e0c19f6bef5", "patch": "@@ -36,6 +36,10 @@ use crate::{\n     TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n+const GLOB_RECURSION_LIMIT: usize = 100;\n+const EXPANSION_DEPTH_LIMIT: usize = 128;\n+const FIXED_POINT_LIMIT: usize = 8192;\n+\n pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     let crate_graph = db.crate_graph();\n \n@@ -217,7 +221,7 @@ impl DefCollector<'_> {\n                 ReachedFixedPoint::Yes => break,\n                 ReachedFixedPoint::No => i += 1,\n             }\n-            if i == 10000 {\n+            if i == FIXED_POINT_LIMIT {\n                 log::error!(\"name resolution is stuck\");\n                 break;\n             }\n@@ -573,6 +577,7 @@ impl DefCollector<'_> {\n         vis: Visibility,\n         import_type: ImportType,\n     ) {\n+        self.db.check_canceled();\n         self.update_recursive(module_id, resolutions, vis, import_type, 0)\n     }\n \n@@ -586,7 +591,7 @@ impl DefCollector<'_> {\n         import_type: ImportType,\n         depth: usize,\n     ) {\n-        if depth > 100 {\n+        if depth > GLOB_RECURSION_LIMIT {\n             // prevent stack overflows (but this shouldn't be possible)\n             panic!(\"infinite recursion in glob imports!\");\n         }\n@@ -609,14 +614,15 @@ impl DefCollector<'_> {\n             .get(&module_id)\n             .into_iter()\n             .flat_map(|v| v.iter())\n+            .filter(|(glob_importing_module, _)| {\n+                // we know all resolutions have the same visibility (`vis`), so we\n+                // just need to check that once\n+                vis.is_visible_from_def_map(&self.def_map, *glob_importing_module)\n+            })\n             .cloned()\n             .collect::<Vec<_>>();\n+\n         for (glob_importing_module, glob_import_vis) in glob_imports {\n-            // we know all resolutions have the same visibility (`vis`), so we\n-            // just need to check that once\n-            if !vis.is_visible_from_def_map(&self.def_map, glob_importing_module) {\n-                continue;\n-            }\n             self.update_recursive(\n                 glob_importing_module,\n                 resolutions,\n@@ -677,10 +683,6 @@ impl DefCollector<'_> {\n         self.unexpanded_attribute_macros = attribute_macros;\n \n         for (module_id, macro_call_id, depth) in resolved {\n-            if depth > 1024 {\n-                log::debug!(\"Max macro expansion depth reached\");\n-                continue;\n-            }\n             self.collect_macro_expansion(module_id, macro_call_id, depth);\n         }\n \n@@ -717,7 +719,7 @@ impl DefCollector<'_> {\n         macro_call_id: MacroCallId,\n         depth: usize,\n     ) {\n-        if depth > 100 {\n+        if depth > EXPANSION_DEPTH_LIMIT {\n             mark::hit!(macro_expansion_overflow);\n             log::warn!(\"macro expansion is too deep\");\n             return;"}]}