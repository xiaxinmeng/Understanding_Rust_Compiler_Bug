{"sha": "8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNmZiYmVjODM3MDdmZTQ2YzlmNDA2ZjZjY2QwY2E3NTgxN2RkNWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-07T07:01:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-11T10:04:49Z"}, "message": "add tuple_fields convenience method and use it in a few places", "tree": {"sha": "c9f0023b54025cd7aa49feb40cd9d066beed2666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9f0023b54025cd7aa49feb40cd9d066beed2666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "html_url": "https://github.com/rust-lang/rust/commit/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd56131a937ffd2ebaef88c8f9788bd4447d66c", "html_url": "https://github.com/rust-lang/rust/commit/fbd56131a937ffd2ebaef88c8f9788bd4447d66c"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "f653f0561776c7d8fbe91148e5a77bf4807ecb27", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -2565,6 +2565,8 @@ impl<'tcx> AdtDef {\n }\n \n impl<'tcx> FieldDef {\n+    /// Returns the type of this field. The `subst` is typically obtained\n+    /// via the second field of `TyKind::AdtDef`.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }"}, {"sha": "129ea9b5b674a8737a701c8239d8538e1f7aecc2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -171,6 +171,7 @@ pub enum TyKind<'tcx> {\n     Never,\n \n     /// A tuple type. For example, `(i32, bool)`.\n+    /// Use `TyS::tuple_fields` to iterate over the field types.\n     Tuple(SubstsRef<'tcx>),\n \n     /// The projection of an associated type. For example,\n@@ -1723,8 +1724,8 @@ impl<'tcx> TyS<'tcx> {\n                     })\n                 })\n             }\n-            ty::Tuple(tys) => tys.iter().any(|ty| {\n-                ty.expect_ty().conservative_is_privately_uninhabited(tcx)\n+            ty::Tuple(..) => self.tuple_fields().any(|ty| {\n+                ty.conservative_is_privately_uninhabited(tcx)\n             }),\n             ty::Array(ty, len) => {\n                 match len.try_eval_usize(tcx, ParamEnv::empty()) {\n@@ -2103,6 +2104,15 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// Iterates over tuple fields.\n+    /// Panics when called on anything but a tuple.\n+    pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> {\n+        match self.sty {\n+            Tuple(substs) => substs.iter().map(|field| field.expect_ty()),\n+            _ => bug!(\"tuple_fields called on non-tuple\"),\n+        }\n+    }\n+\n     /// If the type contains variants, returns the valid range of variant indices.\n     /// FIXME This requires the optimized MIR in the case of generators.\n     #[inline]"}, {"sha": "96e16efd1300af0a144ab9a10681cfe13cbe2b4a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -845,15 +845,15 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty: Ty<'tcx>,\n         ) -> Representability {\n             match ty.sty {\n-                Tuple(ref ts) => {\n+                Tuple(..) => {\n                     // Find non representable\n-                    fold_repr(ts.iter().map(|ty| {\n+                    fold_repr(ty.tuple_fields().map(|ty| {\n                         is_type_structurally_recursive(\n                             tcx,\n                             sp,\n                             seen,\n                             representable_cache,\n-                            ty.expect_ty(),\n+                            ty,\n                         )\n                     }))\n                 }\n@@ -1095,7 +1095,7 @@ fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>\n         // state transformation pass\n         ty::Generator(..) => true,\n \n-        ty::Tuple(ref tys) => tys.iter().map(|k| k.expect_ty()).any(needs_drop),\n+        ty::Tuple(..) => ty.tuple_fields().any(needs_drop),\n \n         // unions don't have destructors because of the child types,\n         // only if they manually implement `Drop` (handled above)."}, {"sha": "8c3110792a8b4152b3b64314ee0c78fcaf161dce", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -119,8 +119,8 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::GeneratorWitness(ts) => {\n             stack.extend(ts.skip_binder().iter().cloned().rev());\n         }\n-        ty::Tuple(ts) => {\n-            stack.extend(ts.iter().map(|k| k.expect_ty()).rev());\n+        ty::Tuple(..) => {\n+            stack.extend(parent_ty.tuple_fields().rev());\n         }\n         ty::FnDef(_, substs) => {\n             stack.extend(substs.types().rev());"}, {"sha": "5c2a86f8f3feb18f3216c467c4196c0e23ab6a90", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -1903,14 +1903,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                         _ => true, // Conservative fallback for multi-variant enum.\n                     }\n                 }\n-                Tuple(substs) => {\n+                Tuple(..) => {\n                     // Proceed recursively, check all fields.\n-                    substs.iter().all(|field| {\n-                        ty_maybe_allows_zero_init(\n-                            tcx,\n-                            field.expect_ty(),\n-                        )\n-                    })\n+                    ty.tuple_fields().all(|field| ty_maybe_allows_zero_init(tcx, field))\n                 }\n                 // FIXME: Would be nice to also warn for `NonNull`/`NonZero*`.\n                 // Conservative fallback."}, {"sha": "33447eba7492a03418ac96b55db9e826f6acd9f6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -324,7 +324,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n                 substs.upvar_tys(def_id, tcx)\n             )\n         }\n-        ty::Tuple(tys) => builder.tuple_like_shim(dest, src, tys.iter().map(|k| k.expect_ty())),\n+        ty::Tuple(..) => builder.tuple_like_shim(dest, src, self_ty.tuple_fields()),\n         _ => {\n             bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty)\n         }"}, {"sha": "52fd645e38e2248421ecad3ca54f5efde6b6d2bb", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=8e6fbbec83707fe46c9f406f6ccd0ca75817dd5e", "patch": "@@ -804,8 +804,8 @@ where\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n-            ty::Tuple(tys) => {\n-                let tys: Vec<_> = tys.iter().map(|k| k.expect_ty()).collect();\n+            ty::Tuple(..) => {\n+                let tys: Vec<_> = ty.tuple_fields().collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             ty::Adt(def, substs) => {"}]}