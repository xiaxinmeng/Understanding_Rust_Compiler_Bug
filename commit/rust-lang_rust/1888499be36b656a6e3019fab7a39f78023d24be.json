{"sha": "1888499be36b656a6e3019fab7a39f78023d24be", "node_id": "C_kwDOAAsO6NoAKDE4ODg0OTliZTM2YjY1NmE2ZTMwMTlmYWI3YTM5Zjc4MDIzZDI0YmU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-20T07:41:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T07:41:49Z"}, "message": "Rollup merge of #98274 - compiler-errors:self-type-error, r=cjgillot\n\nMinor improvements on error for `Self` type in items that don't allow it\n\nFixes #93796", "tree": {"sha": "2b66d560ab316d793437bf7e18b02ef9dcab8c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b66d560ab316d793437bf7e18b02ef9dcab8c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1888499be36b656a6e3019fab7a39f78023d24be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisCS9CRBK7hj4Ov3rIwAAWdYIAJrBpm14CZYSFyRQvINJZVBi\nZ4BPcJMFUzJRzfP9ftozk2G9th6rcuHnrYKY5MSi9nNoydDISCDt9FQ57Nkw20+5\ndAvL2M5rleRef8FQ1a8dY4EepgLV6VUBMinYsxmusKjs2Iq8lunSOl490d4D/JAW\nqMmENynFwgAtwbQB6KiAY/it34GChZJO8XpS+2pxOMf5HnTcWMGPpjyzeC/AjK1R\nGLmiOpC2wOXYKkU6zCLxFQceCCNT15iQgugwXazhPY73u825wWi8Gi2o7NeTMkcv\njA1SjzB+44bJEQx0OEhBMA9tvCettOIsTpyZT6P6xOD7EfRTplzYUmXLdiKfoCk=\n=3eU2\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b66d560ab316d793437bf7e18b02ef9dcab8c5d\nparent f459d8d6b9d8b07fd0bfb3d2a1031918a09583ec\nparent 047de83e028f50f21560a5805baaef3f697837f4\nauthor Yuki Okushi <jtitor@2k36.org> 1655710909 +0900\ncommitter GitHub <noreply@github.com> 1655710909 +0900\n\nRollup merge of #98274 - compiler-errors:self-type-error, r=cjgillot\n\nMinor improvements on error for `Self` type in items that don't allow it\n\nFixes #93796\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1888499be36b656a6e3019fab7a39f78023d24be", "html_url": "https://github.com/rust-lang/rust/commit/1888499be36b656a6e3019fab7a39f78023d24be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1888499be36b656a6e3019fab7a39f78023d24be/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f459d8d6b9d8b07fd0bfb3d2a1031918a09583ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f459d8d6b9d8b07fd0bfb3d2a1031918a09583ec", "html_url": "https://github.com/rust-lang/rust/commit/f459d8d6b9d8b07fd0bfb3d2a1031918a09583ec"}, {"sha": "047de83e028f50f21560a5805baaef3f697837f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/047de83e028f50f21560a5805baaef3f697837f4", "html_url": "https://github.com/rust-lang/rust/commit/047de83e028f50f21560a5805baaef3f697837f4"}], "stats": {"total": 138, "additions": 117, "deletions": 21}, "files": [{"sha": "86dbcba6c0d51226349ee4e886cab919dadb0933", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1914,6 +1914,8 @@ impl<'a> Resolver<'a> {\n                 };\n             }\n             (msg, None)\n+        } else if ident.name == kw::SelfUpper {\n+            (\"`Self` is only available in impls, traits, and type definitions\".to_string(), None)\n         } else if ident.name.as_str().chars().next().map_or(false, |c| c.is_ascii_uppercase()) {\n             // Check whether the name refers to an item in the value namespace.\n             let binding = if let Some(ribs) = ribs {"}, {"sha": "27bce60df2b9b7e19244931208b6286778739f57", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -332,6 +332,16 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 span,\n                 \"`Self` is only available in impls, traits, and type definitions\".to_string(),\n             );\n+            if let Some(item_kind) = self.diagnostic_metadata.current_item {\n+                err.span_label(\n+                    item_kind.ident.span,\n+                    format!(\n+                        \"`Self` not allowed in {} {}\",\n+                        item_kind.kind.article(),\n+                        item_kind.kind.descr()\n+                    ),\n+                );\n+            }\n             return (err, Vec::new());\n         }\n         if is_self_value(path, ns) {\n@@ -389,6 +399,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         );\n                     }\n                 }\n+            } else if let Some(item_kind) = self.diagnostic_metadata.current_item {\n+                err.span_label(\n+                    item_kind.ident.span,\n+                    format!(\n+                        \"`self` not allowed in {} {}\",\n+                        item_kind.kind.article(),\n+                        item_kind.kind.descr()\n+                    ),\n+                );\n             }\n             return (err, Vec::new());\n         }\n@@ -1788,7 +1807,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let (ident, span) = match path {\n-            [segment] if !segment.has_generic_args => {\n+            [segment] if !segment.has_generic_args && segment.ident.name != kw::SelfUpper => {\n                 (segment.ident.to_string(), segment.ident.span)\n             }\n             _ => return None,"}, {"sha": "4c99f9fcbf1dedbd72f5afc0538863b1bf392384", "filename": "src/test/ui/error-codes/E0411.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,6 +1,8 @@\n error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/E0411.rs:2:6\n    |\n+LL | fn main() {\n+   |    ---- `Self` not allowed in a function\n LL |     <Self>::foo;\n    |      ^^^^ `Self` is only available in impls, traits, and type definitions\n "}, {"sha": "5f3560dbe946edacfde1c25de35846bbfdf6e9d2", "filename": "src/test/ui/lifetimes/issue-97194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -2,7 +2,7 @@ extern \"C\" {\n     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n         //~^ ERROR incorrect function inside `extern` block\n         //~| ERROR `self` parameter is only allowed in associated functions\n-        //~| ERROR use of undeclared type `Self`\n+        //~| ERROR failed to resolve: `Self`\n         type T<'a> = &'a str;\n     }\n }"}, {"sha": "93bde285a9901d197ec095ce365871e64f6e249f", "filename": "src/test/ui/lifetimes/issue-97194.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -25,11 +25,11 @@ LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n    |\n    = note: associated functions are those in `impl` or `trait` definitions\n \n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/issue-97194.rs:2:35\n    |\n LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n-   |                                   ^^^^ use of undeclared type `Self`\n+   |                                   ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to 3 previous errors\n "}, {"sha": "19e16abcee3cbef2919eddd44aa9c376b8506c35", "filename": "src/test/ui/resolve/issue-24968.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,5 +1,30 @@\n+// Also includes more Self usages per #93796\n+\n fn foo(_: Self) {\n //~^ ERROR cannot find type `Self`\n }\n \n+fn foo2() {\n+    let x: Self;\n+    //~^ ERROR cannot find type `Self`\n+}\n+\n+type Foo<T>\n+where\n+    Self: Clone,\n+//~^ ERROR cannot find type `Self`\n+= Vec<T>;\n+\n+const FOO: Self = 0;\n+//~^ ERROR cannot find type `Self`\n+\n+const FOO2: u32 = Self::bar();\n+//~^ ERROR failed to resolve: `Self`\n+\n+static FOO_S: Self = 0;\n+//~^ ERROR cannot find type `Self`\n+\n+static FOO_S2: u32 = Self::bar();\n+//~^ ERROR failed to resolve: `Self`\n+\n fn main() {}"}, {"sha": "7e539d258048e03989eb25fa94c9fbfac73baada", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,9 +1,57 @@\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n+  --> $DIR/issue-24968.rs:21:19\n+   |\n+LL | const FOO2: u32 = Self::bar();\n+   |                   ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n+  --> $DIR/issue-24968.rs:27:22\n+   |\n+LL | static FOO_S2: u32 = Self::bar();\n+   |                      ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n error[E0411]: cannot find type `Self` in this scope\n-  --> $DIR/issue-24968.rs:1:11\n+  --> $DIR/issue-24968.rs:3:11\n    |\n LL | fn foo(_: Self) {\n-   |           ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |    ---    ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |    |\n+   |    `Self` not allowed in a function\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:8:12\n+   |\n+LL | fn foo2() {\n+   |    ---- `Self` not allowed in a function\n+LL |     let x: Self;\n+   |            ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:14:5\n+   |\n+LL | type Foo<T>\n+   |      --- `Self` not allowed in a type alias\n+LL | where\n+LL |     Self: Clone,\n+   |     ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:18:12\n+   |\n+LL | const FOO: Self = 0;\n+   |       ---  ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |       |\n+   |       `Self` not allowed in a constant item\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:24:15\n+   |\n+LL | static FOO_S: Self = 0;\n+   |        -----  ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |        |\n+   |        `Self` not allowed in a static item\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0411`.\n+Some errors have detailed explanations: E0411, E0433.\n+For more information about an error, try `rustc --explain E0411`."}, {"sha": "91522d8912f79713fa52281366d66a7f12b4e4ab", "filename": "src/test/ui/type-alias/issue-62263-self-in-atb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -3,6 +3,6 @@ pub trait Trait {\n }\n \n pub type Alias = dyn Trait<A = Self::A>;\n-//~^ ERROR failed to resolve: use of undeclared type `Self` [E0433]\n+//~^ ERROR failed to resolve: `Self`\n \n fn main() {}"}, {"sha": "c20074dc27ce77dae61f390ba8f1855dbdf0bbf5", "filename": "src/test/ui/type-alias/issue-62263-self-in-atb.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/issue-62263-self-in-atb.rs:5:32\n    |\n LL | pub type Alias = dyn Trait<A = Self::A>;\n-   |                                ^^^^ use of undeclared type `Self`\n+   |                                ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "a4d9a285485e7eadaa4f5f5dedf13b16a60c525b", "filename": "src/test/ui/type-alias/issue-62305-self-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,4 +1,4 @@\n type Alias = Self::Target;\n-//~^ ERROR failed to resolve: use of undeclared type `Self` [E0433]\n+//~^ ERROR failed to resolve: `Self`\n \n fn main() {}"}, {"sha": "f3da50df9269b30b01f78713e35da8528d1fc42e", "filename": "src/test/ui/type-alias/issue-62305-self-assoc-ty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/issue-62305-self-assoc-ty.rs:1:14\n    |\n LL | type Alias = Self::Target;\n-   |              ^^^^ use of undeclared type `Self`\n+   |              ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "7e15e42e3ccd9bc466a38a00ab99e70f42fdb029", "filename": "src/test/ui/type-alias/issue-62364-self-ty-arg.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -2,9 +2,9 @@ error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-62364-self-ty-arg.rs:5:29\n    |\n LL | type Alias<'a> = Struct<&'a Self>;\n-   |              -              ^^^^ `Self` is only available in impls, traits, and type definitions\n-   |              |\n-   |              help: you might be missing a type parameter: `, Self`\n+   |      -----                  ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |      |\n+   |      `Self` not allowed in a type alias\n \n error: aborting due to previous error\n "}, {"sha": "3b4ce429701977b3ffb896d1c13d92ac686b2920", "filename": "src/test/ui/use/use-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.rs?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -4,7 +4,7 @@ impl S {\n     fn f() {}\n     fn g() {\n         use Self::f; //~ ERROR unresolved import\n-        pub(in Self::f) struct Z; //~ ERROR use of undeclared type `Self`\n+        pub(in Self::f) struct Z; //~ ERROR failed to resolve: `Self`\n     }\n }\n "}, {"sha": "e615394115119d16928267421e27b29b62c64993", "filename": "src/test/ui/use/use-self-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1888499be36b656a6e3019fab7a39f78023d24be/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.stderr?ref=1888499be36b656a6e3019fab7a39f78023d24be", "patch": "@@ -1,14 +1,14 @@\n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/use-self-type.rs:7:16\n    |\n LL |         pub(in Self::f) struct Z;\n-   |                ^^^^ use of undeclared type `Self`\n+   |                ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error[E0432]: unresolved import `Self`\n   --> $DIR/use-self-type.rs:6:13\n    |\n LL |         use Self::f;\n-   |             ^^^^ use of undeclared type `Self`\n+   |             ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to 2 previous errors\n "}]}