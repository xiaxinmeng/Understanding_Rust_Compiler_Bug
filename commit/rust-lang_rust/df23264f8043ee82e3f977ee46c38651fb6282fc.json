{"sha": "df23264f8043ee82e3f977ee46c38651fb6282fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjMyNjRmODA0M2VlODJlM2Y5NzdlZTQ2YzM4NjUxZmI2MjgyZmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-08-12T17:04:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-12T17:04:07Z"}, "message": "Rollup merge of #87916 - nbdd0121:black_box, r=nagisa\n\nImplement `black_box` using intrinsic\n\nIntroduce `black_box` intrinsic, as suggested in https://github.com/rust-lang/rust/pull/87590#discussion_r680468700.\n\nThis is still codegenned as empty inline assembly for LLVM. For MIR interpretation and cranelift it's treated as identity.\n\ncc `@Amanieu` as this is related to inline assembly\ncc `@bjorn3` for rustc_codegen_cranelift changes\ncc `@RalfJung` as this affects MIRI\n\nr? `@nagisa` I suppose", "tree": {"sha": "1ed846f5e8239540857fbda3563714cf24cd9c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed846f5e8239540857fbda3563714cf24cd9c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df23264f8043ee82e3f977ee46c38651fb6282fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhFVSHCRBK7hj4Ov3rIwAAV6wIAF2sSbzTDpisfSC+EuBazSdH\nHDW6eLPGJMiflWvk6eNOgovdZlZmMoIEUKi8VU9oLXt0J7PN0DHllo4L7OSkSkl/\nWgxmOnXVd1dlAIByp61tHLwYre7ViisbC3iMNvzCGBM6iSy1hMuSUCCtjnXex9tP\n6704GO1pebASUuoTiY3b0yRIDpYrSLycnfxwzND99rkiHUi113i0SE+9YvdWn5N3\npEvHYgWEMdUsyxuNQhZ+PT5Sj9UZMGNqYOtyPCI6hA66ehZrXIsre/7xDx7XlfXr\nu8Zq8U4vvjj0lzunxi7RR9eXLf9di3m/9PRlYn5sM4N2d6PHSRv413urduBhnNY=\n=5IdK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ed846f5e8239540857fbda3563714cf24cd9c92\nparent 4498e300e41f47c75abe4e49ec91ae949aaeea5f\nparent 1fb1643129f9ac6a63bddf04d69e28632615c0df\nauthor Manish Goregaokar <manishsmail@gmail.com> 1628787847 -0700\ncommitter GitHub <noreply@github.com> 1628787847 -0700\n\nRollup merge of #87916 - nbdd0121:black_box, r=nagisa\n\nImplement `black_box` using intrinsic\n\nIntroduce `black_box` intrinsic, as suggested in https://github.com/rust-lang/rust/pull/87590#discussion_r680468700.\n\nThis is still codegenned as empty inline assembly for LLVM. For MIR interpretation and cranelift it's treated as identity.\n\ncc `@Amanieu` as this is related to inline assembly\ncc `@bjorn3` for rustc_codegen_cranelift changes\ncc `@RalfJung` as this affects MIRI\n\nr? `@nagisa` I suppose\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df23264f8043ee82e3f977ee46c38651fb6282fc", "html_url": "https://github.com/rust-lang/rust/commit/df23264f8043ee82e3f977ee46c38651fb6282fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df23264f8043ee82e3f977ee46c38651fb6282fc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4498e300e41f47c75abe4e49ec91ae949aaeea5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4498e300e41f47c75abe4e49ec91ae949aaeea5f", "html_url": "https://github.com/rust-lang/rust/commit/4498e300e41f47c75abe4e49ec91ae949aaeea5f"}, {"sha": "1fb1643129f9ac6a63bddf04d69e28632615c0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb1643129f9ac6a63bddf04d69e28632615c0df", "html_url": "https://github.com/rust-lang/rust/commit/1fb1643129f9ac6a63bddf04d69e28632615c0df"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "1c4d307fc50e14c4281b5bd487b83137e7342a33", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -1136,6 +1136,11 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 };\n             ret.write_cvalue(fx, CValue::by_val(is_eq_value, ret.layout()));\n         };\n+\n+        black_box, (c a) {\n+            // FIXME implement black_box semantics\n+            ret.write_cvalue(fx, a);\n+        };\n     }\n \n     if let Some((_, dest)) = destination {"}, {"sha": "4790b44bd19ef0c3672ea3a9367dafee8a9efe6d", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -425,7 +425,7 @@ impl AsmMethods for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n-fn inline_asm_call(\n+pub(crate) fn inline_asm_call(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n     asm: &str,\n     cons: &str,"}, {"sha": "fe2ed21c1e3b02287533cb5237b9a19ce2c294e8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -7,6 +7,7 @@ use crate::type_of::LayoutLlvmExt;\n use crate::va_arg::emit_va_arg;\n use crate::value::Value;\n \n+use rustc_ast as ast;\n use rustc_codegen_ssa::base::{compare_simd_types, wants_msvc_seh};\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n@@ -327,6 +328,31 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 }\n             }\n \n+            sym::black_box => {\n+                args[0].val.store(self, result);\n+\n+                // We need to \"use\" the argument in some way LLVM can't introspect, and on\n+                // targets that support it we can typically leverage inline assembly to do\n+                // this. LLVM's interpretation of inline assembly is that it's, well, a black\n+                // box. This isn't the greatest implementation since it probably deoptimizes\n+                // more than we want, but it's so far good enough.\n+                crate::asm::inline_asm_call(\n+                    self,\n+                    \"\",\n+                    \"r,~{memory}\",\n+                    &[result.llval],\n+                    self.type_void(),\n+                    true,\n+                    false,\n+                    ast::LlvmAsmDialect::Att,\n+                    &[span],\n+                )\n+                .unwrap_or_else(|| bug!(\"failed to generate inline asm call for `black_box`\"));\n+\n+                // We have copied the value to `result` already.\n+                return;\n+            }\n+\n             _ if name_str.starts_with(\"simd_\") => {\n                 match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                     Ok(llval) => llval,"}, {"sha": "bfab886b6ee4f9fd2ab9c40b62099c287170884f", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -465,7 +465,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 );\n                 self.copy_op(&self.operand_index(&args[0], index)?, dest)?;\n             }\n-            sym::likely | sym::unlikely => {\n+            sym::likely | sym::unlikely | sym::black_box => {\n                 // These just return their argument\n                 self.copy_op(&args[0], dest)?;\n             }"}, {"sha": "6d03f1a37329e0d50fdfe9e41e40e058e484f905", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -335,6 +335,7 @@ symbols! {\n         bitreverse,\n         bitxor,\n         bitxor_assign,\n+        black_box,\n         block,\n         bool,\n         borrowck_graphviz_format,"}, {"sha": "664954b0eb7a229673d8ad715b1545689f8a48b3", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -102,6 +102,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n         | sym::maxnumf64\n         | sym::type_name\n         | sym::forget\n+        | sym::black_box\n         | sym::variant_count => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n@@ -387,6 +388,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (1, vec![param_ty; 2], tcx.types.bool)\n             }\n \n+            sym::black_box => (1, vec![param(0)], param(0)),\n+\n             other => {\n                 tcx.sess.emit_err(UnrecognizedIntrinsicFunction { span: it.span, name: other });\n                 return;"}, {"sha": "a4924554919b07217af17ae101ad38e555aa32f4", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -152,23 +152,19 @@ pub fn spin_loop() {\n /// backend used. Programs cannot rely on `black_box` for *correctness* in any way.\n ///\n /// [`std::convert::identity`]: crate::convert::identity\n-#[cfg_attr(not(miri), inline)]\n-#[cfg_attr(miri, inline(never))]\n+#[inline]\n #[unstable(feature = \"bench_black_box\", issue = \"64102\")]\n-#[cfg_attr(miri, allow(unused_mut))]\n+#[cfg_attr(not(bootstrap), allow(unused_mut))]\n pub fn black_box<T>(mut dummy: T) -> T {\n-    // We need to \"use\" the argument in some way LLVM can't introspect, and on\n-    // targets that support it we can typically leverage inline assembly to do\n-    // this. LLVM's interpretation of inline assembly is that it's, well, a black\n-    // box. This isn't the greatest implementation since it probably deoptimizes\n-    // more than we want, but it's so far good enough.\n-\n-    #[cfg(not(miri))] // This is just a hint, so it is fine to skip in Miri.\n+    #[cfg(bootstrap)]\n     // SAFETY: the inline assembly is a no-op.\n     unsafe {\n-        // FIXME: Cannot use `asm!` because it doesn't support MIPS and other architectures.\n         llvm_asm!(\"\" : : \"r\"(&mut dummy) : \"memory\" : \"volatile\");\n+        dummy\n     }\n \n-    dummy\n+    #[cfg(not(bootstrap))]\n+    {\n+        crate::intrinsics::black_box(dummy)\n+    }\n }"}, {"sha": "272b1e3a1d75ee9549fc9903a36aba90c284b339", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -1933,6 +1933,12 @@ extern \"rust-intrinsic\" {\n     /// which is UB if any of their inputs are `undef`.)\n     #[rustc_const_unstable(feature = \"const_intrinsic_raw_eq\", issue = \"none\")]\n     pub fn raw_eq<T>(a: &T, b: &T) -> bool;\n+\n+    /// See documentation of [`std::hint::black_box`] for details.\n+    ///\n+    /// [`std::hint::black_box`]: crate::hint::black_box\n+    #[cfg(not(bootstrap))]\n+    pub fn black_box<T>(dummy: T) -> T;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "b53f19a5b01aa6d2e2024990ef35a3b37b3d9f4b", "filename": "src/test/ui/sanitize/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df23264f8043ee82e3f977ee46c38651fb6282fc/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df23264f8043ee82e3f977ee46c38651fb6282fc/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs?ref=df23264f8043ee82e3f977ee46c38651fb6282fc", "patch": "@@ -6,7 +6,7 @@\n // run-fail\n // error-pattern: MemorySanitizer: use-of-uninitialized-value\n // error-pattern: Uninitialized value was created by an allocation\n-// error-pattern: in the stack frame of function 'random'\n+// error-pattern: in the stack frame of function 'main'\n //\n // This test case intentionally limits the usage of the std,\n // since it will be linked with an uninstrumented version of it."}]}