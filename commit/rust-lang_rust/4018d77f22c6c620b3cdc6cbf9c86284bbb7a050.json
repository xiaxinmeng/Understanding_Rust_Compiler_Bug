{"sha": "4018d77f22c6c620b3cdc6cbf9c86284bbb7a050", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMThkNzdmMjJjNmM2MjBiM2NkYzZjYmY5Yzg2Mjg0YmJiN2EwNTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-01T00:14:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "libsyntax: Remove an `@str` in pretty printing", "tree": {"sha": "6a841c674e57d358c8a9fe001fb3ed62d400473d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a841c674e57d358c8a9fe001fb3ed62d400473d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4018d77f22c6c620b3cdc6cbf9c86284bbb7a050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4018d77f22c6c620b3cdc6cbf9c86284bbb7a050", "html_url": "https://github.com/rust-lang/rust/commit/4018d77f22c6c620b3cdc6cbf9c86284bbb7a050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4018d77f22c6c620b3cdc6cbf9c86284bbb7a050/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "html_url": "https://github.com/rust-lang/rust/commit/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "3e1f5b4cfb353ec89f66329341f1ce1d6d850edf", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4018d77f22c6c620b3cdc6cbf9c86284bbb7a050/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018d77f22c6c620b3cdc6cbf9c86284bbb7a050/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=4018d77f22c6c620b3cdc6cbf9c86284bbb7a050", "patch": "@@ -84,7 +84,7 @@ pub struct BeginToken {\n \n #[deriving(Clone)]\n pub enum Token {\n-    String(@str, int),\n+    String(~str, int),\n     Break(BreakToken),\n     Begin(BeginToken),\n     End,\n@@ -131,7 +131,7 @@ pub fn buf_str(toks: ~[Token], szs: ~[int], left: uint, right: uint,\n         if i != left {\n             s.push_str(\", \");\n         }\n-        s.push_str(format!(\"{}={}\", szs[i], tok_str(toks[i])));\n+        s.push_str(format!(\"{}={}\", szs[i], tok_str(toks[i].clone())));\n         i += 1u;\n         i %= n;\n     }\n@@ -285,7 +285,9 @@ pub struct Printer {\n }\n \n impl Printer {\n-    pub fn last_token(&mut self) -> Token { self.token[self.right] }\n+    pub fn last_token(&mut self) -> Token {\n+        self.token[self.right].clone()\n+    }\n     // be very careful with this!\n     pub fn replace_last_token(&mut self, t: Token) {\n         self.token[self.right] = t;\n@@ -296,8 +298,8 @@ impl Printer {\n           Eof => {\n             if !self.scan_stack_empty {\n                 self.check_stack(0);\n-                self.advance_left(self.token[self.left],\n-                                  self.size[self.left]);\n+                let left = self.token[self.left].clone();\n+                self.advance_left(left, self.size[self.left]);\n             }\n             self.indent(0);\n           }\n@@ -341,16 +343,16 @@ impl Printer {\n             self.size[self.right] = -self.right_total;\n             self.right_total += b.blank_space;\n           }\n-          String(s, len) => {\n+          String(ref s, len) => {\n             if self.scan_stack_empty {\n                 debug!(\"pp String('{}')/print ~[{},{}]\",\n-                       s, self.left, self.right);\n-                self.print(t, len);\n+                       *s, self.left, self.right);\n+                self.print(t.clone(), len);\n             } else {\n                 debug!(\"pp String('{}')/buffer ~[{},{}]\",\n-                       s, self.left, self.right);\n+                       *s, self.left, self.right);\n                 self.advance_right();\n-                self.token[self.right] = t;\n+                self.token[self.right] = t.clone();\n                 self.size[self.right] = len;\n                 self.right_total += len;\n                 self.check_stream();\n@@ -370,7 +372,8 @@ impl Printer {\n                     self.size[self.scan_pop_bottom()] = SIZE_INFINITY;\n                 }\n             }\n-            self.advance_left(self.token[self.left], self.size[self.left]);\n+            let left = self.token[self.left].clone();\n+            self.advance_left(left, self.size[self.left]);\n             if self.left != self.right { self.check_stream(); }\n         }\n     }\n@@ -414,7 +417,7 @@ impl Printer {\n         debug!(\"advnce_left ~[{},{}], sizeof({})={}\", self.left, self.right,\n                self.left, L);\n         if L >= 0 {\n-            self.print(x, L);\n+            self.print(x.clone(), L);\n             match x {\n               Break(b) => self.left_total += b.blank_space,\n               String(_, len) => {\n@@ -425,8 +428,8 @@ impl Printer {\n             if self.left != self.right {\n                 self.left += 1u;\n                 self.left %= self.buf_len;\n-                self.advance_left(self.token[self.left],\n-                                  self.size[self.left]);\n+                let left = self.token[self.left].clone();\n+                self.advance_left(left, self.size[self.left]);\n             }\n         }\n     }\n@@ -483,7 +486,7 @@ impl Printer {\n         write!(self.out, \"{}\", s);\n     }\n     pub fn print(&mut self, x: Token, L: int) {\n-        debug!(\"print {} {} (remaining line space={})\", tok_str(x), L,\n+        debug!(\"print {} {} (remaining line space={})\", tok_str(x.clone()), L,\n                self.space);\n         debug!(\"{}\", buf_str(self.token.clone(),\n                              self.size.clone(),\n@@ -583,15 +586,15 @@ pub fn end(p: &mut Printer) { p.pretty_print(End); }\n pub fn eof(p: &mut Printer) { p.pretty_print(Eof); }\n \n pub fn word(p: &mut Printer, wrd: &str) {\n-    p.pretty_print(String(/* bad */ wrd.to_managed(), wrd.len() as int));\n+    p.pretty_print(String(/* bad */ wrd.to_str(), wrd.len() as int));\n }\n \n pub fn huge_word(p: &mut Printer, wrd: &str) {\n-    p.pretty_print(String(/* bad */ wrd.to_managed(), SIZE_INFINITY));\n+    p.pretty_print(String(/* bad */ wrd.to_str(), SIZE_INFINITY));\n }\n \n pub fn zero_word(p: &mut Printer, wrd: &str) {\n-    p.pretty_print(String(/* bad */ wrd.to_managed(), 0));\n+    p.pretty_print(String(/* bad */ wrd.to_str(), 0));\n }\n \n pub fn spaces(p: &mut Printer, n: uint) { break_offset(p, n, 0); }"}]}