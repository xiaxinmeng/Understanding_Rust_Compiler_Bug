{"sha": "1bbac9053decfe235949acf33f9bc574b0ad1575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYmFjOTA1M2RlY2ZlMjM1OTQ5YWNmMzNmOWJjNTc0YjBhZDE1NzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-26T18:33:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-26T18:33:45Z"}, "message": "Add TokenText", "tree": {"sha": "3b33ed158d1a3d520a4ed85e2eab0213c9dd41b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b33ed158d1a3d520a4ed85e2eab0213c9dd41b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbac9053decfe235949acf33f9bc574b0ad1575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbac9053decfe235949acf33f9bc574b0ad1575", "html_url": "https://github.com/rust-lang/rust/commit/1bbac9053decfe235949acf33f9bc574b0ad1575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbac9053decfe235949acf33f9bc574b0ad1575/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a447dcda82a9f0eb6e1f04bd4b1dd53a226c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a447dcda82a9f0eb6e1f04bd4b1dd53a226c65", "html_url": "https://github.com/rust-lang/rust/commit/77a447dcda82a9f0eb6e1f04bd4b1dd53a226c65"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "2772d7364442d033a91510fdd5e6cc7c74a2dc13", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1bbac9053decfe235949acf33f9bc574b0ad1575/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbac9053decfe235949acf33f9bc574b0ad1575/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=1bbac9053decfe235949acf33f9bc574b0ad1575", "patch": "@@ -8,23 +8,23 @@ use parser::SyntaxKind;\n \n use crate::{\n     ast::{self, support, AstNode, AstToken, AttrsOwner, NameOwner, SyntaxNode},\n-    SmolStr, SyntaxElement, SyntaxToken, T,\n+    SmolStr, SyntaxElement, SyntaxToken, TokenText, T,\n };\n \n impl ast::Lifetime {\n-    pub fn text(&self) -> SmolStr {\n+    pub fn text(&self) -> TokenText {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::Name {\n-    pub fn text(&self) -> SmolStr {\n+    pub fn text(&self) -> TokenText {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::NameRef {\n-    pub fn text(&self) -> SmolStr {\n+    pub fn text(&self) -> TokenText {\n         text_of_first_token(self.syntax())\n     }\n \n@@ -33,8 +33,11 @@ impl ast::NameRef {\n     }\n }\n \n-fn text_of_first_token(node: &SyntaxNode) -> SmolStr {\n-    node.green().children().next().and_then(|it| it.into_token()).unwrap().text().into()\n+fn text_of_first_token(node: &SyntaxNode) -> TokenText {\n+    let first_token =\n+        node.green().children().next().and_then(|it| it.into_token()).unwrap().to_owned();\n+\n+    TokenText(first_token)\n }\n \n pub enum Macro {\n@@ -376,7 +379,7 @@ impl fmt::Display for NameOrNameRef {\n }\n \n impl NameOrNameRef {\n-    pub fn text(&self) -> SmolStr {\n+    pub fn text(&self) -> TokenText {\n         match self {\n             NameOrNameRef::Name(name) => name.text(),\n             NameOrNameRef::NameRef(name_ref) => name_ref.text(),"}, {"sha": "90de6bef6f6f5559bcba5432342759ebffc8a3db", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbac9053decfe235949acf33f9bc574b0ad1575/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbac9053decfe235949acf33f9bc574b0ad1575/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=1bbac9053decfe235949acf33f9bc574b0ad1575", "patch": "@@ -29,6 +29,7 @@ mod syntax_error;\n mod parsing;\n mod validation;\n mod ptr;\n+mod token_text;\n #[cfg(test)]\n mod tests;\n \n@@ -55,6 +56,7 @@ pub use crate::{\n         SyntaxElement, SyntaxElementChildren, SyntaxNode, SyntaxNodeChildren, SyntaxToken,\n         SyntaxTreeBuilder,\n     },\n+    token_text::TokenText,\n };\n pub use parser::{SyntaxKind, T};\n pub use rowan::{"}, {"sha": "d2ed0a12a468ac6f730cdbbf6f5702eaa4147432", "filename": "crates/syntax/src/token_text.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1bbac9053decfe235949acf33f9bc574b0ad1575/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbac9053decfe235949acf33f9bc574b0ad1575/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs?ref=1bbac9053decfe235949acf33f9bc574b0ad1575", "patch": "@@ -0,0 +1,77 @@\n+//! Yet another version of owned string, backed by a syntax tree token.\n+\n+use std::{cmp::Ordering, fmt, ops};\n+\n+pub struct TokenText(pub(crate) rowan::GreenToken);\n+\n+impl TokenText {\n+    pub fn as_str(&self) -> &str {\n+        self.0.text()\n+    }\n+}\n+\n+impl ops::Deref for TokenText {\n+    type Target = str;\n+\n+    fn deref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+impl AsRef<str> for TokenText {\n+    fn as_ref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+\n+impl From<TokenText> for String {\n+    fn from(token_text: TokenText) -> Self {\n+        token_text.as_str().into()\n+    }\n+}\n+\n+impl PartialEq<&'_ str> for TokenText {\n+    fn eq(&self, other: &&str) -> bool {\n+        self.as_str() == *other\n+    }\n+}\n+impl PartialEq<TokenText> for &'_ str {\n+    fn eq(&self, other: &TokenText) -> bool {\n+        other == self\n+    }\n+}\n+impl PartialEq<String> for TokenText {\n+    fn eq(&self, other: &String) -> bool {\n+        self.as_str() == other.as_str()\n+    }\n+}\n+impl PartialEq<TokenText> for String {\n+    fn eq(&self, other: &TokenText) -> bool {\n+        other == self\n+    }\n+}\n+impl PartialEq for TokenText {\n+    fn eq(&self, other: &TokenText) -> bool {\n+        self.as_str() == other.as_str()\n+    }\n+}\n+impl Eq for TokenText {}\n+impl Ord for TokenText {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.as_str().cmp(other.as_str())\n+    }\n+}\n+impl PartialOrd for TokenText {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+impl fmt::Display for TokenText {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self.as_str(), f)\n+    }\n+}\n+impl fmt::Debug for TokenText {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(self.as_str(), f)\n+    }\n+}"}]}