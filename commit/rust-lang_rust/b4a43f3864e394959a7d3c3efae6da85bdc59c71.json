{"sha": "b4a43f3864e394959a7d3c3efae6da85bdc59c71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTQzZjM4NjRlMzk0OTU5YTdkM2MzZWZhZTZkYTg1YmRjNTljNzE=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-01-31T16:23:42Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-01-31T16:40:40Z"}, "message": "Kill more `isize`s", "tree": {"sha": "90ce64d37d1e616c4916281f5e1eb338d54ff7a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90ce64d37d1e616c4916281f5e1eb338d54ff7a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a43f3864e394959a7d3c3efae6da85bdc59c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a43f3864e394959a7d3c3efae6da85bdc59c71", "html_url": "https://github.com/rust-lang/rust/commit/b4a43f3864e394959a7d3c3efae6da85bdc59c71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a43f3864e394959a7d3c3efae6da85bdc59c71/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105bfd30012a7d4278117e973b56c170a59fc20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/105bfd30012a7d4278117e973b56c170a59fc20d", "html_url": "https://github.com/rust-lang/rust/commit/105bfd30012a7d4278117e973b56c170a59fc20d"}], "stats": {"total": 1613, "additions": 806, "deletions": 807}, "files": [{"sha": "1e343b593df2d5b7f069b41ec8d35cc5e48538fd", "filename": "src/doc/intro.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -424,7 +424,7 @@ Let's see an example. This Rust code will not compile:\n use std::thread::Thread;\n \n fn main() {\n-    let mut numbers = vec![1is, 2, 3];\n+    let mut numbers = vec![1, 2, 3];\n \n     for i in 0..3 {\n         Thread::spawn(move || {\n@@ -478,7 +478,7 @@ use std::thread::Thread;\n use std::sync::{Arc,Mutex};\n \n fn main() {\n-    let numbers = Arc::new(Mutex::new(vec![1is, 2, 3]));\n+    let numbers = Arc::new(Mutex::new(vec![1, 2, 3]));\n \n     for i in 0us..3 {\n         let number = numbers.clone();\n@@ -539,7 +539,7 @@ safety check that makes this an error about moved values:\n use std::thread::Thread;\n \n fn main() {\n-    let vec = vec![1is, 2, 3];\n+    let vec = vec![1, 2, 3];\n \n     for i in 0us..3 {\n         Thread::spawn(move || {"}, {"sha": "beb2973febc6a65b97c533b1ee6be13c548a9559", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -333,7 +333,7 @@ impl<T> DList<T> {\n     ///\n     /// let mut dl = DList::new();\n     ///\n-    /// dl.push_front(2is);\n+    /// dl.push_front(2);\n     /// assert_eq!(dl.len(), 1);\n     ///\n     /// dl.push_front(1);\n@@ -360,10 +360,10 @@ impl<T> DList<T> {\n     ///\n     /// let mut dl = DList::new();\n     ///\n-    /// dl.push_front(2is);\n+    /// dl.push_front(2);\n     /// dl.push_front(1);\n     /// assert_eq!(dl.len(), 2);\n-    /// assert_eq!(dl.front(), Some(&1is));\n+    /// assert_eq!(dl.front(), Some(&1));\n     ///\n     /// dl.clear();\n     /// assert_eq!(dl.len(), 0);\n@@ -388,7 +388,7 @@ impl<T> DList<T> {\n     /// assert_eq!(dl.front(), None);\n     ///\n     /// dl.push_front(1);\n-    /// assert_eq!(dl.front(), Some(&1is));\n+    /// assert_eq!(dl.front(), Some(&1));\n     ///\n     /// ```\n     #[inline]\n@@ -409,13 +409,13 @@ impl<T> DList<T> {\n     /// assert_eq!(dl.front(), None);\n     ///\n     /// dl.push_front(1);\n-    /// assert_eq!(dl.front(), Some(&1is));\n+    /// assert_eq!(dl.front(), Some(&1));\n     ///\n     /// match dl.front_mut() {\n     ///     None => {},\n-    ///     Some(x) => *x = 5is,\n+    ///     Some(x) => *x = 5,\n     /// }\n-    /// assert_eq!(dl.front(), Some(&5is));\n+    /// assert_eq!(dl.front(), Some(&5));\n     ///\n     /// ```\n     #[inline]\n@@ -436,7 +436,7 @@ impl<T> DList<T> {\n     /// assert_eq!(dl.back(), None);\n     ///\n     /// dl.push_back(1);\n-    /// assert_eq!(dl.back(), Some(&1is));\n+    /// assert_eq!(dl.back(), Some(&1));\n     ///\n     /// ```\n     #[inline]\n@@ -457,13 +457,13 @@ impl<T> DList<T> {\n     /// assert_eq!(dl.back(), None);\n     ///\n     /// dl.push_back(1);\n-    /// assert_eq!(dl.back(), Some(&1is));\n+    /// assert_eq!(dl.back(), Some(&1));\n     ///\n     /// match dl.back_mut() {\n     ///     None => {},\n-    ///     Some(x) => *x = 5is,\n+    ///     Some(x) => *x = 5,\n     /// }\n-    /// assert_eq!(dl.back(), Some(&5is));\n+    /// assert_eq!(dl.back(), Some(&5));\n     ///\n     /// ```\n     #[inline]\n@@ -483,8 +483,8 @@ impl<T> DList<T> {\n     ///\n     /// let mut dl = DList::new();\n     ///\n-    /// dl.push_front(2is);\n-    /// assert_eq!(dl.front().unwrap(), &2is);\n+    /// dl.push_front(2);\n+    /// assert_eq!(dl.front().unwrap(), &2);\n     ///\n     /// dl.push_front(1);\n     /// assert_eq!(dl.front().unwrap(), &1);\n@@ -508,7 +508,7 @@ impl<T> DList<T> {\n     /// let mut d = DList::new();\n     /// assert_eq!(d.pop_front(), None);\n     ///\n-    /// d.push_front(1is);\n+    /// d.push_front(1);\n     /// d.push_front(3);\n     /// assert_eq!(d.pop_front(), Some(3));\n     /// assert_eq!(d.pop_front(), Some(1));\n@@ -568,7 +568,7 @@ impl<T> DList<T> {\n     ///\n     /// let mut d = DList::new();\n     ///\n-    /// d.push_front(1is);\n+    /// d.push_front(1);\n     /// d.push_front(2);\n     /// d.push_front(3);\n     ///"}, {"sha": "07f3ab4a5a726f2fc713f485c6819760eefa66e5", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -50,13 +50,13 @@ fn test_writer_hasher() {\n     assert_eq!(hash(&5u16), 5);\n     assert_eq!(hash(&5u32), 5);\n     assert_eq!(hash(&5u64), 5);\n-    assert_eq!(hash(&5u), 5);\n+    assert_eq!(hash(&5us), 5);\n \n     assert_eq!(hash(&5i8), 5);\n     assert_eq!(hash(&5i16), 5);\n     assert_eq!(hash(&5i32), 5);\n     assert_eq!(hash(&5i64), 5);\n-    assert_eq!(hash(&5), 5);\n+    assert_eq!(hash(&5is), 5);\n \n     assert_eq!(hash(&false), 0);\n     assert_eq!(hash(&true), 1);\n@@ -76,12 +76,12 @@ fn test_writer_hasher() {\n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>\n \n     unsafe {\n-        let ptr: *const i32 = mem::transmute(5is);\n+        let ptr: *const i32 = mem::transmute(5us);\n         assert_eq!(hash(&ptr), 5);\n     }\n \n     unsafe {\n-        let ptr: *mut i32 = mem::transmute(5is);\n+        let ptr: *mut i32 = mem::transmute(5us);\n         assert_eq!(hash(&ptr), 5);\n     }\n }"}, {"sha": "c9cdf50fdbd085df979e2fae0c6fc51244399891", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -375,7 +375,7 @@ fn test_iterator_size_hint() {\n     assert_eq!(c.clone().enumerate().size_hint(), (uint::MAX, None));\n     assert_eq!(c.clone().chain(vi.clone().map(|&i| i)).size_hint(), (uint::MAX, None));\n     assert_eq!(c.clone().zip(vi.clone()).size_hint(), (10, Some(10)));\n-    assert_eq!(c.clone().scan(0i, |_,_| Some(0)).size_hint(), (0, None));\n+    assert_eq!(c.clone().scan(0, |_,_| Some(0)).size_hint(), (0, None));\n     assert_eq!(c.clone().filter(|_| false).size_hint(), (0, None));\n     assert_eq!(c.clone().map(|_| 0).size_hint(), (uint::MAX, None));\n     assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n@@ -389,7 +389,7 @@ fn test_iterator_size_hint() {\n     assert_eq!(vi.clone().enumerate().size_hint(), (10, Some(10)));\n     assert_eq!(vi.clone().chain(v2.iter()).size_hint(), (13, Some(13)));\n     assert_eq!(vi.clone().zip(v2.iter()).size_hint(), (3, Some(3)));\n-    assert_eq!(vi.clone().scan(0i, |_,_| Some(0)).size_hint(), (0, Some(10)));\n+    assert_eq!(vi.clone().scan(0, |_,_| Some(0)).size_hint(), (0, Some(10)));\n     assert_eq!(vi.clone().filter(|_| false).size_hint(), (0, Some(10)));\n     assert_eq!(vi.clone().map(|&i| i+1).size_hint(), (10, Some(10)));\n     assert_eq!(vi.filter_map(|_| Some(0)).size_hint(), (0, Some(10)));"}, {"sha": "860bd40e21eeed7dcda76a520887bd87e4e14818", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -223,7 +223,7 @@ fn test_ord() {\n /* FIXME(#20575)\n #[test]\n fn test_collect() {\n-    let v: Option<Vec<int>> = (0..0).map(|_| Some(0i)).collect();\n+    let v: Option<Vec<int>> = (0..0).map(|_| Some(0)).collect();\n     assert!(v == Some(vec![]));\n \n     let v: Option<Vec<int>> = (0..3).map(|x| Some(x)).collect();"}, {"sha": "c6dcb0d230ff7cd54783ef4ce482f5a65bbf80ec", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1198,7 +1198,7 @@ mod test_set {\n \n     #[test]\n     fn test_drain() {\n-        let mut s: HashSet<int> = (1is..100).collect();\n+        let mut s: HashSet<i32> = (1..100).collect();\n \n         // try this a bunch of times to make sure we don't screw up internal state.\n         for _ in 0..20 {\n@@ -1217,7 +1217,7 @@ mod test_set {\n             for _ in s.iter() { panic!(\"s should be empty!\"); }\n \n             // reset to try again.\n-            s.extend(1is..100);\n+            s.extend(1..100);\n         }\n     }\n }"}, {"sha": "0a9aeb849be4b296bbb76ffbdf330941772eaa48", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1101,7 +1101,7 @@ mod test {\n         let dir = &tmpdir.join(\"di_readdir\");\n         check!(mkdir(dir, old_io::USER_RWX));\n         let prefix = \"foo\";\n-        for n in 0is..3 {\n+        for n in 0..3 {\n             let f = dir.join(format!(\"{}.txt\", n));\n             let mut w = check!(File::create(&f));\n             let msg_str = format!(\"{}{}\", prefix, n);"}, {"sha": "ebf7f6cc0f2a9e6b4d256033ef1669e755827cfc", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1160,7 +1160,7 @@ mod test {\n                 tx.send(TcpStream::connect(addr).unwrap()).unwrap();\n             });\n             let _l = rx.recv().unwrap();\n-            for i in 0is..1001 {\n+            for i in 0i32..1001 {\n                 match a.accept() {\n                     Ok(..) => break,\n                     Err(ref e) if e.kind == TimedOut => {}\n@@ -1260,7 +1260,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in 0is..1001 {\n+        for i in 0i32..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1318,7 +1318,7 @@ mod test {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in 0is..1001 {\n+        for i in 0i32..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "8ac5b6e52747a32e28d251b912ddfc25ea40ef40", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -573,7 +573,7 @@ pub fn byte_lit(lit: &str) -> (u8, usize) {\n     if lit.len() == 1 {\n         (lit.as_bytes()[0], 1)\n     } else {\n-        assert!(lit.as_bytes()[0] == b'\\\\', err(0is));\n+        assert!(lit.as_bytes()[0] == b'\\\\', err(0));\n         let b = match lit.as_bytes()[1] {\n             b'\"' => b'\"',\n             b'n' => b'\\n',"}, {"sha": "70d6a5f695a8de9dedb47b3a9a041adacf893497", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -167,7 +167,7 @@ pub fn mk_printer(out: Box<old_io::Writer+'static>, linewidth: usize) -> Printer\n     let n: usize = 3 * linewidth;\n     debug!(\"mk_printer {}\", linewidth);\n     let token: Vec<Token> = repeat(Token::Eof).take(n).collect();\n-    let size: Vec<isize> = repeat(0is).take(n).collect();\n+    let size: Vec<isize> = repeat(0).take(n).collect();\n     let scan_stack: Vec<usize> = repeat(0us).take(n).collect();\n     Printer {\n         out: out,"}, {"sha": "12f871b27829e9a9f8dd0e61f533fe774cff674b", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -195,14 +195,14 @@ mod test {\n         let v: SmallVector<isize> = SmallVector::zero();\n         assert_eq!(0, v.len());\n \n-        assert_eq!(1, SmallVector::one(1is).len());\n-        assert_eq!(5, SmallVector::many(vec!(1is, 2, 3, 4, 5)).len());\n+        assert_eq!(1, SmallVector::one(1).len());\n+        assert_eq!(5, SmallVector::many(vec![1, 2, 3, 4, 5]).len());\n     }\n \n     #[test]\n     fn test_push_get() {\n         let mut v = SmallVector::zero();\n-        v.push(1is);\n+        v.push(1);\n         assert_eq!(1, v.len());\n         assert_eq!(&1, v.get(0));\n         v.push(2);\n@@ -215,7 +215,7 @@ mod test {\n \n     #[test]\n     fn test_from_iter() {\n-        let v: SmallVector<isize> = (vec![1is, 2, 3]).into_iter().collect();\n+        let v: SmallVector<isize> = (vec![1, 2, 3]).into_iter().collect();\n         assert_eq!(3, v.len());\n         assert_eq!(&1, v.get(0));\n         assert_eq!(&2, v.get(1));\n@@ -228,11 +228,11 @@ mod test {\n         let v: Vec<isize> = v.into_iter().collect();\n         assert_eq!(Vec::new(), v);\n \n-        let v = SmallVector::one(1is);\n-        assert_eq!(vec!(1is), v.into_iter().collect::<Vec<_>>());\n+        let v = SmallVector::one(1);\n+        assert_eq!(vec![1], v.into_iter().collect::<Vec<_>>());\n \n-        let v = SmallVector::many(vec!(1is, 2is, 3is));\n-        assert_eq!(vec!(1is, 2is, 3is), v.into_iter().collect::<Vec<_>>());\n+        let v = SmallVector::many(vec![1, 2, 3]);\n+        assert_eq!(vec!(1, 2, 3), v.into_iter().collect::<Vec<_>>());\n     }\n \n     #[test]\n@@ -244,12 +244,12 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_expect_one_many() {\n-        SmallVector::many(vec!(1is, 2)).expect_one(\"\");\n+        SmallVector::many(vec!(1, 2)).expect_one(\"\");\n     }\n \n     #[test]\n     fn test_expect_one_one() {\n-        assert_eq!(1is, SmallVector::one(1is).expect_one(\"\"));\n-        assert_eq!(1is, SmallVector::many(vec!(1is)).expect_one(\"\"));\n+        assert_eq!(1, SmallVector::one(1).expect_one(\"\"));\n+        assert_eq!(1, SmallVector::many(vec!(1)).expect_one(\"\"));\n     }\n }"}, {"sha": "d44948e4ed2775a6cde77067cf6963c3dc2a81e0", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -104,8 +104,8 @@ impl<'a, T> Iterator for ListIterator<'a, T> {\n // corresponding mirrored piece), with, as minimum coordinates, (0,\n // 0).  If all is false, only generate half of the possibilities (used\n // to break the symmetry of the board).\n-fn transform(piece: Vec<(isize, isize)> , all: bool) -> Vec<Vec<(isize, isize)>> {\n-    let mut res: Vec<Vec<(isize, isize)>> =\n+fn transform(piece: Vec<(i32, i32)> , all: bool) -> Vec<Vec<(i32, i32)>> {\n+    let mut res: Vec<Vec<(i32, i32)>> =\n         // rotations\n         iterate(piece, |rot| rot.iter().map(|&(y, x)| (x + y, -y)).collect())\n         .take(if all {6} else {3})\n@@ -133,7 +133,7 @@ fn transform(piece: Vec<(isize, isize)> , all: bool) -> Vec<Vec<(isize, isize)>>\n // Takes a piece with minimum coordinate (0, 0) (as generated by\n // transform).  Returns the corresponding mask if p translated by (dy,\n // dx) is on the board.\n-fn mask(dy: isize, dx: isize, id: usize, p: &Vec<(isize, isize)>) -> Option<u64> {\n+fn mask(dy: i32, dx: i32, id: usize, p: &Vec<(i32, i32)>) -> Option<u64> {\n     let mut m = 1 << (50 + id);\n     for &(y, x) in p.iter() {\n         let x = x + dx + (y + (dy % 2)) / 2;\n@@ -164,12 +164,12 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n     // To break the central symmetry of the problem, every\n     // transformation must be taken except for one piece (piece 3\n     // here).\n-    let transforms: Vec<Vec<Vec<(isize, isize)>>> =\n+    let transforms: Vec<Vec<Vec<(i32, i32)>>> =\n         pieces.into_iter().enumerate()\n         .map(|(id, p)| transform(p, id != 3))\n         .collect();\n \n-    (0is..50).map(|yx| {\n+    (0i32..50).map(|yx| {\n         transforms.iter().enumerate().map(|(id, t)| {\n             t.iter().filter_map(|p| mask(yx / 5, yx % 5, id, p)).collect()\n         }).collect()"}, {"sha": "7111c00d1246aa32dfa7ad3edbcd787f1e4b4f0f", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n fn main() {\n-    let _x: isize = [1is, 2, 3];\n+    let _x: i32 = [1i32, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected `isize`\n-    //~| found `[isize; 3]`\n-    //~| expected isize\n+    //~| expected `i32`\n+    //~| found `[i32; 3]`\n+    //~| expected i32\n     //~| found array of 3 elements\n \n-    let x: &[isize] = &[1, 2, 3];\n-    let _y: &isize = x;\n+    let x: &[i32] = &[1i32, 2, 3];\n+    let _y: &i32 = x;\n     //~^ ERROR mismatched types\n-    //~| expected `&isize`\n-    //~| found `&[isize]`\n-    //~| expected isize\n+    //~| expected `&i32`\n+    //~| found `&[i32]`\n+    //~| expected i32\n     //~| found slice\n }"}, {"sha": "71c57fefc2e266a7288b089f62747d69241ed744", "filename": "src/test/compile-fail/array-old-syntax-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,5 +11,5 @@\n // Test that the old fixed length array syntax is a parsing error.\n \n fn main() {\n-    let _x: [isize, ..3] = [0is, 1, 2]; //~ ERROR\n+    let _x: [isize, ..3] = [0, 1, 2]; //~ ERROR\n }"}, {"sha": "99ff3ae29f16f48d044810c2d2ffc3e775eaaad5", "filename": "src/test/compile-fail/array-old-syntax-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,5 +11,5 @@\n // Test that the old repeating array syntax gives an error.\n \n fn main() {\n-    let _ = [0is, ..3]; //~ ERROR\n+    let _ = [0, ..3]; //~ ERROR\n }"}, {"sha": "f01f2b111c5c15c6d261e2fd4cdacfe8a6216ef1", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -45,7 +45,7 @@ pub fn baz(x: &Foo<A=Bar>) {\n \n \n pub fn main() {\n-    let a = 42is;\n+    let a = 42;\n     foo1(a);\n     //~^ ERROR type mismatch resolving\n     //~| expected usize"}, {"sha": "1c708da30a70707194ef6891c708475f1e04f119", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -28,15 +28,15 @@ impl Foo for isize {\n }\n \n pub fn main() {\n-    let a = &42is as &Foo<A=usize, B=char>;\n+    let a = &42 as &Foo<A=usize, B=char>;\n \n-    let b = &42is as &Foo<A=usize>;\n+    let b = &42 as &Foo<A=usize>;\n     //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n \n-    let c = &42is as &Foo<B=char>;\n+    let c = &42 as &Foo<B=char>;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n-    let d = &42is as &Foo;\n+    let d = &42 as &Foo;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n     //~| ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n }"}, {"sha": "51a37b517ddebfb120ec63147dfa19829aaa3a79", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,8 +14,8 @@ pub trait Foo {\n     type A;\n }\n \n-impl Foo for isize {\n-    type A = usize;\n+impl Foo for i32 {\n+    type A = u32;\n }\n \n pub fn f1<T: Foo>(a: T, x: T::A) {}\n@@ -24,33 +24,33 @@ pub fn f2<T: Foo>(a: T) -> T::A {\n }\n \n pub fn f1_int_int() {\n-    f1(2is, 4is);\n+    f1(2i32, 4i32);\n     //~^ ERROR mismatched types\n-    //~| expected usize\n-    //~| found isize\n+    //~| expected u32\n+    //~| found i32\n }\n \n pub fn f1_int_uint() {\n-    f1(2is, 4us);\n+    f1(2i32, 4u32);\n }\n \n pub fn f1_uint_uint() {\n-    f1(2us, 4us);\n+    f1(2u32, 4u32);\n     //~^ ERROR the trait `Foo` is not implemented\n     //~| ERROR the trait `Foo` is not implemented\n }\n \n pub fn f1_uint_int() {\n-    f1(2us, 4is);\n+    f1(2u32, 4i32);\n     //~^ ERROR the trait `Foo` is not implemented\n     //~| ERROR the trait `Foo` is not implemented\n }\n \n pub fn f2_int() {\n-    let _: isize = f2(2is);\n+    let _: i32 = f2(2i32);\n     //~^ ERROR mismatched types\n-    //~| expected `isize`\n-    //~| found `usize`\n+    //~| expected `i32`\n+    //~| found `u32`\n }\n \n pub fn main() { }"}, {"sha": "7e3c356b87029d0fc7f3169b22ee2160f796a4aa", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static i: String = 10is;\n+static i: String = 10i32;\n //~^ ERROR mismatched types\n //~| expected `collections::string::String`\n-//~| found `isize`\n+//~| found `i32`\n //~| expected struct `collections::string::String`\n-//~| found isize\n+//~| found i32\n fn main() { println!(\"{}\", i); }"}, {"sha": "7d79ea03c02453cb3380d4ab6dc57dcba905dcc1", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn f() -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    3is\n+    3\n }\n fn main() { }"}, {"sha": "2217cf5e4dacb3ba867db23d7e470020c01644b9", "filename": "src/test/compile-fail/binop-logic-int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:`&&` cannot be applied to type `isize`\n+// error-pattern:`&&` cannot be applied to type `i32`\n \n-fn main() { let x = 1is && 2is; }\n+fn main() { let x = 1i32 && 2i32; }"}, {"sha": "40e077bd1b55d5fa17df67aa2937f8e97211765a", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -16,28 +16,28 @@ struct Foo(Box<isize>, isize);\n struct Bar(isize, isize);\n \n fn main() {\n-    let x = (box 1is, 2is);\n+    let x = (box 1, 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n-    let mut x = (1is, 2is);\n+    let mut x = (1, 2);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n \n-    let mut x = (1is, 2is);\n+    let mut x = (1, 2);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n \n \n-    let x = Foo(box 1is, 2is);\n+    let x = Foo(box 1, 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n-    let mut x = Bar(1is, 2is);\n+    let mut x = Bar(1, 2);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n \n-    let mut x = Bar(1is, 2is);\n+    let mut x = Bar(1, 2);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n }"}, {"sha": "ebaed01756fb227911f4a92092f7b9bc212b5eb7", "filename": "src/test/compile-fail/borrowck-anon-fields-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@\n // anonymous fields of a tuple vs the same anonymous field.\n \n fn distinct_variant() {\n-    let mut y = (1is, 2is);\n+    let mut y = (1, 2);\n \n     let a = match y {\n         (ref mut a, _) => a\n@@ -27,7 +27,7 @@ fn distinct_variant() {\n }\n \n fn same_variant() {\n-    let mut y = (1is, 2is);\n+    let mut y = (1, 2);\n \n     let a = match y {\n         (ref mut a, _) => a"}, {"sha": "3fb42b38e842c91056a874cc9d7df25780cd179e", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,9 +12,9 @@\n #![feature(box_syntax)]\n \n fn f() {\n-    let mut a = [box 0is, box 1is];\n+    let mut a = [box 0, box 1];\n     drop(a[0]);\n-    a[1] = box 2is;\n+    a[1] = box 2;\n     drop(a[0]); //~ ERROR use of moved value: `a[..]`\n }\n "}, {"sha": "82a6c92abafcf40f554836f71389177154d19456", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,14 +11,14 @@\n fn foo() -> isize {\n     let x: isize;\n \n-    while 1is != 2  {\n+    while 1 != 2  {\n         break;\n         x = 0;\n     }\n \n     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n-    return 17is;\n+    return 17;\n }\n \n fn main() { println!(\"{}\", foo()); }"}, {"sha": "9d73ad319a61c864b45b7ccd2a19c78090849045", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -22,37 +22,37 @@ fn set(x: &mut isize) {\n }\n \n fn a() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| x = 4;\n     let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c2 = |&mut:| x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n-    let mut x = box 3is;\n+    let mut x = box 3;\n     let c1 = |&mut:| get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }"}, {"sha": "48a9dccfef0baaf39c11130e168a8a77bb941cc5", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -15,7 +15,7 @@\n #![feature(box_syntax)]\n \n fn a() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| x = 4;\n     let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n@@ -25,19 +25,19 @@ fn set(x: &mut isize) {\n }\n \n fn b() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| x = 5;\n     let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let c1 = |&mut:| x = 5;\n     let c2 = |&mut:| { let _y = |&mut:| set(&mut x); }; // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "ad77953bdd8d00068263cc273fb72828e96db41d", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n }\n \n fn main() {\n-    let mut y = 1is;\n+    let mut y = 1;\n     let x = Some(&mut y);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n@@ -28,7 +28,7 @@ fn main() {\n     for &a in f.a.iter() {  //~ ERROR cannot move out\n     }\n \n-    let x = Some(box 1is);\n+    let x = Some(box 1);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n }"}, {"sha": "74b542800b9e947e7d03d4ae3644448ec3892b10", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,6 +11,6 @@\n fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: isize; if 1is > 2 { x = 10; }\n+    let x: isize; if 1 > 2 { x = 10; }\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "f3b02d12854a8ad5dd801691c6b13c9a4401de60", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n     let x: isize;\n-    if 1is > 2 {\n+    if 1 > 2 {\n         println!(\"whoops\");\n     } else {\n         x = 10;"}, {"sha": "8af10231921aaac5a5774be33bd53ad7c65161e1", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut _a = 3is;\n+    let mut _a = 3;\n     let _b = &mut _a;\n     {\n         let _c = &*_b;"}, {"sha": "0c717d2ee5ffff4a9a194c1cdcbed3187aef57b3", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1is);\n+    let x = Some(box 1);\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move"}, {"sha": "b4e5ae1c25bf799b13c00d3048d52e17c96a341c", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1is);\n+    let x = Some(box 1);\n     match x {\n       Some(ref y) => {\n         let _b = *y; //~ ERROR cannot move out"}, {"sha": "5418a531fe68a19dd7e74652ddba41f46cb19331", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -41,7 +41,7 @@ fn block_overarching_alias_mut() {\n \n     let mut v = box 3;\n     let mut x = &mut v;\n-    for _ in 0is..3 {\n+    for _ in 0..3 {\n         borrow(&*v); //~ ERROR cannot borrow\n     }\n     *x = box 5;"}, {"sha": "30ec993ed5e0511b6ad470b6a95a3a43b2716f17", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -19,10 +19,10 @@ fn separate_arms() {\n         None => {\n             // It is ok to reassign x here, because there is in\n             // fact no outstanding loan of x!\n-            x = Some(0is);\n+            x = Some(0);\n         }\n         Some(ref _i) => {\n-            x = Some(1is); //~ ERROR cannot assign\n+            x = Some(1); //~ ERROR cannot assign\n         }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "5729f8c56179e42da911512974effd9cc474ab6b", "filename": "src/test/compile-fail/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    let x = [1is].iter(); //~ ERROR borrowed value does not live long enough\n+    let x = [1].iter(); //~ ERROR borrowed value does not live long enough\n                          //~^ NOTE reference must be valid for the block suffix following statement\n                          //~^^ HELP consider using a `let` binding to increase its lifetime\n }"}, {"sha": "980c498e39b471c1f02cbfd658733759e7c448ee", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -17,7 +17,7 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n }\n \n fn box_imm() {\n-    let v = box 3is;\n+    let v = box 3;\n     let _w = &v;\n     Thread::spawn(move|| {\n         println!(\"v={}\", *v);\n@@ -26,7 +26,7 @@ fn box_imm() {\n }\n \n fn box_imm_explicit() {\n-    let v = box 3is;\n+    let v = box 3;\n     let _w = &v;\n     Thread::spawn(move|| {\n         println!(\"v={}\", *v);"}, {"sha": "38593d31842eb2c5291fea494c0dd19c44f60e32", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -19,7 +19,7 @@ struct S {\n }\n \n pub fn main() {\n-    match 1is {\n+    match 1 {\n         x => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n@@ -37,13 +37,13 @@ pub fn main() {\n         }\n     }\n \n-    match (1is,) {\n+    match (1,) {\n         (x,) => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n     }\n \n-    match [1is,2,3] {\n+    match [1,2,3] {\n         [x,_,_] => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }"}, {"sha": "3d8d599970f2c57715347b74d249b8e1134ec7fe", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let a = box box 2is;\n+    let a = box box 2;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "27cef1f3c606804dcd60a3e43eb02e46b71292b9", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n pub fn main() {\n-    let _x = Rc::new(vec!(1is, 2)).into_iter();\n+    let _x = Rc::new(vec!(1, 2)).into_iter();\n     //~^ ERROR cannot move out of borrowed content\n }"}, {"sha": "94e213ae1ae5b00b60af7ffa038b7e8ea44aeb27", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -15,9 +15,9 @@ use std::thread::Thread;\n fn borrow<T>(_: &T) { }\n \n fn different_vars_after_borrows() {\n-    let x1 = box 1is;\n+    let x1 = box 1;\n     let p1 = &x1;\n-    let x2 = box 2is;\n+    let x2 = box 2;\n     let p2 = &x2;\n     Thread::spawn(move|| {\n         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n@@ -28,9 +28,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1 = box 1is;\n+    let x1 = box 1;\n     drop(x1);\n-    let x2 = box 2is;\n+    let x2 = box 2;\n     drop(x2);\n     Thread::spawn(move|| {\n         drop(x1); //~ ERROR capture of moved value: `x1`\n@@ -39,7 +39,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x = box 1is;\n+    let x = box 1;\n     let p = &x;\n     Thread::spawn(move|| {\n         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n@@ -49,7 +49,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x = box 1is;\n+    let x = box 1;\n     drop(x);\n     Thread::spawn(move|| {\n         drop(x); //~ ERROR capture of moved value: `x`"}, {"sha": "e9d8544a06a90e3247ed00eced1c778bf52dabfc", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -25,7 +25,7 @@ impl<T> Index<usize> for MyVec<T> {\n }\n \n fn main() {\n-    let v = MyVec { data: vec!(box 1is, box 2, box 3) };\n+    let v = MyVec { data: vec!(box 1, box 2, box 3) };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of indexed content"}, {"sha": "49a1b782a3db443aeff1c72640ea17e74c722f2c", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,7 +13,7 @@\n fn borrow(_v: &isize) {}\n \n fn local() {\n-    let mut v = box 3is;\n+    let mut v = box 3;\n     borrow(&*v);\n }\n \n@@ -32,27 +32,27 @@ fn local_recs() {\n }\n \n fn aliased_imm() {\n-    let mut v = box 3is;\n+    let mut v = box 3;\n     let _w = &v;\n     borrow(&*v);\n }\n \n fn aliased_mut() {\n-    let mut v = box 3is;\n+    let mut v = box 3;\n     let _w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n-    let mut v = box 3is;\n-    let mut w = box 4is;\n+    let mut v = box 3;\n+    let mut w = box 4;\n     let _x = &mut w;\n     borrow(&*v);\n }\n \n fn aliased_other_reassign() {\n-    let mut v = box 3is;\n-    let mut w = box 4is;\n+    let mut v = box 3;\n+    let mut w = box 4;\n     let mut _x = &mut w;\n     _x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`"}, {"sha": "5f58027af5337c367ed92372ec5cba1a6ee8b3b5", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut a = [1is, 2, 3, 4];\n+    let mut a = [1, 2, 3, 4];\n     let t = match a {\n         [1, 2, tail..] => tail,\n         _ => unreachable!()"}, {"sha": "e125d777371c8dbaad20946459507c716984352d", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn a() {\n-    let mut vec = [box 1is, box 2, box 3];\n+    let mut vec = [box 1, box 2, box 3];\n     match vec {\n         [box ref _a, _, _] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n@@ -21,7 +21,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = vec!(box 1is, box 2, box 3);\n+    let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_b..] => {\n@@ -31,7 +31,7 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = vec!(box 1is, box 2, box 3);\n+    let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a,         //~ ERROR cannot move out\n@@ -49,7 +49,7 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = vec!(box 1is, box 2, box 3);\n+    let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a..,     //~ ERROR cannot move out\n@@ -60,7 +60,7 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = vec!(box 1is, box 2, box 3);\n+    let mut vec = vec!(box 1, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out"}, {"sha": "8cdf1da5c934ce9dd4d7a1e09ded446f794e5ab9", "filename": "src/test/compile-fail/borrowck-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n fn test(cond: bool) {\n     let v;\n     while cond {\n-        v = 3is;\n+        v = 3;\n         break;\n     }\n     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`"}, {"sha": "e3566e9bb920d4c887db38c7615cd66205c76ff5", "filename": "src/test/compile-fail/borrowck-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,7 +10,7 @@\n \n fn f() -> isize {\n     let mut x: isize;\n-    while 1is == 1 { x = 10; }\n+    while 1 == 1 { x = 10; }\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n "}, {"sha": "a6d55ad3991f393e142c3872aacaef4d186e55e4", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -22,6 +22,6 @@ impl <T: Sync> Foo for T { }\n \n fn main() {\n     let (tx, rx) = channel();\n-    1193182is.foo(tx);\n-    assert!(rx.recv() == 1193182is);\n+    1193182.foo(tx);\n+    assert!(rx.recv() == 1193182);\n }"}, {"sha": "2951c63828d5c3d34774237a85c616d64120ae84", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = 1is;\n+    let x = 1;\n     move|:| { x = 2; };\n     //~^ ERROR: cannot assign to immutable captured outer variable\n "}, {"sha": "aac180f9ad7bf63ca00a2c5f560d5bd1bbed0723", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,10 +11,10 @@\n // Tests that we forbid coercion from `[T; n]` to `&[T]`\n \n fn main() {\n-    let _: &[isize] = [0is];\n+    let _: &[i32] = [0i32];\n     //~^ ERROR mismatched types\n-    //~| expected `&[isize]`\n-    //~| found `[isize; 1]`\n+    //~| expected `&[i32]`\n+    //~| found `[i32; 1]`\n     //~| expected &-ptr\n     //~| found array of 1 elements\n }"}, {"sha": "21098f9283e7fb04ef9e2e6c5a28c7dedaaa5bc7", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -27,29 +27,29 @@ fn main() {\n     // if n > m, it's a type mismatch error.\n \n     // n < m\n-    let &x = &(&1is as &T);\n-    let &x = &&(&1is as &T);\n-    let &&x = &&(&1is as &T);\n+    let &x = &(&1 as &T);\n+    let &x = &&(&1 as &T);\n+    let &&x = &&(&1 as &T);\n \n     // n == m\n-    let &x = &1is as &T;      //~ ERROR type `&T` cannot be dereferenced\n-    let &&x = &(&1is as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1is as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n+    let &x = &1 as &T;      //~ ERROR type `&T` cannot be dereferenced\n+    let &&x = &(&1 as &T);  //~ ERROR type `&T` cannot be dereferenced\n+    let box x = box 1 as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n \n     // n > m\n-    let &&x = &1is as &T;\n+    let &&x = &1 as &T;\n     //~^ ERROR mismatched types\n     //~| expected `T`\n     //~| found `&_`\n     //~| expected trait T\n     //~| found &-ptr\n-    let &&&x = &(&1is as &T);\n+    let &&&x = &(&1 as &T);\n     //~^ ERROR mismatched types\n     //~| expected `T`\n     //~| found `&_`\n     //~| expected trait T\n     //~| found &-ptr\n-    let box box x = box 1is as Box<T>;\n+    let box box x = box 1 as Box<T>;\n     //~^ ERROR mismatched types\n     //~| expected `T`\n     //~| found `Box<_>`"}, {"sha": "f90baafef3ffad3d7f6c8abbccf1b43964b04a43", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -18,7 +18,7 @@ struct Fat<T: ?Sized> {\n }\n \n pub fn main() {\n-    let f: Fat<[isize; 3]> = Fat { ptr: [5is, 6, 7] };\n+    let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n     //~^ ERROR the trait `core::marker::Sized` is not implemented"}, {"sha": "d5841e1e77e4020ed3fa6711ec006e77c0cf4fad", "filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = [ 1is, 2, 3, 4, 5 ];\n+    let x = [ 1, 2, 3, 4, 5 ];\n     match x {\n         [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n         [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches"}, {"sha": "f8e7dc11828ff4f304a0bcef0ccbdacb728e6b7f", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -34,7 +34,7 @@ fn main() {\n     //~| expected ()\n     //~| found box\n \n-    needs_fn(1is);\n+    needs_fn(1);\n     //~^ ERROR `core::ops::Fn<(isize,)>`\n     //~| ERROR `core::ops::Fn<(isize,)>`\n }"}, {"sha": "ab6dc2bab3ecbf98c4b864d4752393f238995e91", "filename": "src/test/compile-fail/for-loop-refutable-pattern-error-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     for\n-        &1is //~ ERROR refutable pattern in `for` loop binding\n-        in [1is].iter() {}\n+        &1 //~ ERROR refutable pattern in `for` loop binding\n+        in [1].iter() {}\n }"}, {"sha": "9cf145a1ff387d78d992ac84b1b16940d8886f08", "filename": "src/test/compile-fail/hashmap-iter-value-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n-    my_stuff.insert(0is, 42is);\n+    my_stuff.insert(0, 42);\n \n     let (_, thing) = my_stuff.iter().next().unwrap();\n "}, {"sha": "6858599f63a8a40fda433e51bbeb10657c57793c", "filename": "src/test/compile-fail/hashmap-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n-    my_stuff.insert(0is, 42is);\n+    my_stuff.insert(0, 42);\n \n     let mut it = my_stuff.iter();\n     my_stuff.insert(1, 43); //~ ERROR cannot borrow"}, {"sha": "b7a5b991c6d561be4460ccc99ec16da95b7f7a7e", "filename": "src/test/compile-fail/if-branch-types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn main() {\n-    let x = if true { 10is } else { 10us };\n+    let x = if true { 10i32 } else { 10u32 };\n     //~^ ERROR if and else have incompatible types\n-    //~| expected `isize`\n-    //~| found `usize`\n-    //~| expected isize\n-    //~| found usize\n+    //~| expected `i32`\n+    //~| found `u32`\n+    //~| expected i32\n+    //~| found u32\n }"}, {"sha": "1e9144910b05312fb1a68156fc61cd3e1ab11c8f", "filename": "src/test/compile-fail/if-let.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -20,36 +20,36 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1is, { //~ ERROR irrefutable if-let\n+    foo!(a, 1, { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1is, { //~ ERROR irrefutable if-let\n+    bar!(a, 1, { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    if let a = 1is { //~ ERROR irrefutable if-let\n+    if let a = 1 { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n-    if let a = 1is { //~ ERROR irrefutable if-let\n+    if let a = 1 { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     } else if true {\n         println!(\"else-if in irrefutable if-let\");\n     } else {\n         println!(\"else in irrefutable if-let\");\n     }\n \n-    if let 1is = 2is {\n+    if let 1 = 2 {\n         println!(\"refutable pattern\");\n-    } else if let a = 1is { //~ ERROR irrefutable if-let\n+    } else if let a = 1 { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n     if true {\n         println!(\"if\");\n-    } else if let a = 1is { //~ ERROR irrefutable if-let\n+    } else if let a = 1 { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "6a9c30480527470f6f6e20c018822761bf9ca44f", "filename": "src/test/compile-fail/implicit-method-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,5 +11,5 @@\n use std::num::SignedInt;\n \n fn main() {\n-    let _f = 10is.abs; //~ ERROR attempted to take value of method\n+    let _f = 10.abs; //~ ERROR attempted to take value of method\n }"}, {"sha": "8a496c934b9c9e7687c16c67518918c996e9bebe", "filename": "src/test/compile-fail/int-literal-too-large-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n // issue #17123\n \n fn main() {\n-    100000000000000000000000000000000is //~ ERROR int literal is too large\n+    100000000000000000000000000000000 //~ ERROR int literal is too large\n \n         ; // the span shouldn't point to this.\n }"}, {"sha": "5ee693d97a878febbd8d97a53ba579ec0eb64526", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1is;\n+    let x = box 1;\n     let f = move|:| {\n         let _a = x;\n         drop(x);"}, {"sha": "333ff7118d45b4b2b7d33275341cdd6d95a6a33d", "filename": "src/test/compile-fail/issue-11493.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,6 +11,6 @@\n // This file must never have a trailing newline\n \n fn main() {\n-    let x = Some(3is);\n-    let y = x.as_ref().unwrap_or(&5is); //~ ERROR: borrowed value does not live long enough\n+    let x = Some(3);\n+    let y = x.as_ref().unwrap_or(&5); //~ ERROR: borrowed value does not live long enough\n }"}, {"sha": "d307352517feaf5e95c51d8cbb268c0e74c2fcde", "filename": "src/test/compile-fail/issue-11714.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn blah() -> isize { //~ ERROR not all control paths return a value\n-    1is\n+fn blah() -> i32 { //~ ERROR not all control paths return a value\n+    1i32\n \n     ; //~ HELP consider removing this semicolon:\n }"}, {"sha": "f9a523641e41e1dbef4377388c1fa82fc5aab0cd", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let mut v = vec!(1is);\n-    let mut f = |&mut:| v.push(2is);\n+    let mut v = vec!(1);\n+    let mut f = |&mut:| v.push(2);\n     let _w = v; //~ ERROR: cannot move out of `v`\n \n     f();"}, {"sha": "69f7b46009c38db438ad2c4829353ef590ef2dcf", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     let r = {\n-        let x = box 42is;\n+        let x = box 42;\n         let f = move|:| &x; //~ ERROR: `x` does not live long enough\n         f()\n     };"}, {"sha": "236142a69192171de4547379e037439f6aa12e76", "filename": "src/test/compile-fail/issue-12041.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         loop {\n             let tx = tx;\n             //~^ ERROR: use of moved value: `tx`\n-            tx.send(1is);\n+            tx.send(1);\n         }\n     });\n }"}, {"sha": "d51db4795998b0fcd54ebb9235d4a92d9b9cac09", "filename": "src/test/compile-fail/issue-1362.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #1362 - without that fix the span will be bogus\n // no-reformat\n fn main() {\n-  let x: usize = 20is; //~ ERROR mismatched types\n+  let x: u32 = 20i32; //~ ERROR mismatched types\n }\n // NOTE: Do not add any extra lines as the line number the error is\n // on is significant; an error later in the source file might not"}, {"sha": "ddfed3647c2e0b15a411d76e298368af42dd4b34", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,8 +10,8 @@\n \n // Regression test for issue #1448 and #1386\n \n-fn foo(a: usize) -> usize { a }\n+fn foo(a: u32) -> u32 { a }\n \n fn main() {\n-    println!(\"{}\", foo(10is)); //~ ERROR mismatched types\n+    println!(\"{}\", foo(10i32)); //~ ERROR mismatched types\n }"}, {"sha": "8f79022405ebe40139c5784530c59061018c5bfe", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -30,6 +30,6 @@ fn make_shower<T>(x: T) -> Debuger<T> {\n }\n \n pub fn main() {\n-    let show3 = make_shower(3is);\n+    let show3 = make_shower(3);\n     show3();\n }"}, {"sha": "7da1b9efd3942c043d5176dfa8a0e6988541ae0c", "filename": "src/test/compile-fail/issue-15167.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -18,7 +18,7 @@\n macro_rules! f { () => (n) }\n \n fn main() -> (){\n-    for n in 0is..1 {\n+    for n in 0..1 {\n         println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n     }\n }"}, {"sha": "1e4476e563b0411a56356f6496e7eef5fd1ba632", "filename": "src/test/compile-fail/issue-15480.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-15480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-15480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15480.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let v = vec![\n-        &3is\n+        &3\n //~^ ERROR borrowed value does not live long enough\n     ];\n "}, {"sha": "eb293c79247053d384422a59df52f8a36b176a2e", "filename": "src/test/compile-fail/issue-17385.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -23,10 +23,10 @@ impl Drop for Enum {\n }\n \n fn main() {\n-    let foo = X(1is);\n+    let foo = X(1);\n     drop(foo);\n     match foo { //~ ERROR use of moved value\n-        X(1is) => (),\n+        X(1) => (),\n         _ => unreachable!()\n     }\n "}, {"sha": "de8a4f63476dc027baf07cd6450dcad62bccd427", "filename": "src/test/compile-fail/issue-17405.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,7 +13,7 @@ enum Foo {\n }\n \n fn main() {\n-    match Foo::Bar(1is) {\n+    match Foo::Bar(1) {\n         Foo { i } => () //~ ERROR `Foo` does not name a struct or a struct variant\n     }\n }"}, {"sha": "5196b6ea877f887d553e86b306ddba680ed70d3f", "filename": "src/test/compile-fail/issue-17800.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,8 +14,8 @@ enum MyOption<T> {\n }\n \n fn main() {\n-    match MyOption::MySome(42is) {\n-        MyOption::MySome { x: 42is } => (),\n+    match MyOption::MySome(42) {\n+        MyOption::MySome { x: 42 } => (),\n         //~^ ERROR `MyOption::MySome` does not name a struct or a struct variant\n         _ => (),\n     }"}, {"sha": "eabdb36a7efc6989eee874982a150201a5bc08ed", "filename": "src/test/compile-fail/issue-17905.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -25,6 +25,6 @@ impl Pair<\n }\n \n fn main() {\n-    let result = &Pair(\"shane\", 1is);\n+    let result = &Pair(\"shane\", 1);\n     result.say();\n }"}, {"sha": "f4c0a9c38c3fc6171337ee047616eec9e4cac7e4", "filename": "src/test/compile-fail/issue-17999.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@\n #![feature(core)]\n \n fn main() {\n-    for _ in 1is..101 {\n+    for _ in 1..101 {\n         let x = (); //~ ERROR: unused variable: `x`\n         match () {\n             a => {} //~ ERROR: unused variable: `a`"}, {"sha": "90d2acbe5816a712932660d56edd14b59541f2da", "filename": "src/test/compile-fail/issue-19096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let t = (42is, 42is);\n+    let t = (42, 42);\n     t.0::<isize>; //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `::`\n }"}, {"sha": "db3e9c23b76217ab8927770b5baf2bfceefc03cb", "filename": "src/test/compile-fail/issue-1962.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,9 +10,9 @@\n \n // compile-flags: -D while-true\n fn main() {\n-  let mut i = 0is;\n+  let mut i = 0;\n   while true  { //~ ERROR denote infinite loops with loop\n-    i += 1is;\n-    if i == 5is { break; }\n+    i += 1;\n+    if i == 5 { break; }\n   }\n }"}, {"sha": "0d57a8a50cc6ae712165859040ff7fe0aad134af", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,7 +14,7 @@ struct Obj {\n \n impl Obj {\n     pub fn boom() -> bool {\n-        return 1is+1 == 2\n+        return 1+1 == 2\n     }\n     pub fn chirp(&self) {\n         self.boom(); //~ ERROR `&Obj` does not implement any method in scope named `boom`\n@@ -24,5 +24,5 @@ impl Obj {\n fn main() {\n     let o = Obj { member: 0 };\n     o.chirp();\n-    1is + 1;\n+    1 + 1;\n }"}, {"sha": "3d44c1a52d49253fceb0a9476dad591cd465c7d0", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -18,6 +18,6 @@ fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n }\n \n fn main() {\n-    let v = &5is;\n+    let v = &5;\n     println!(\"{}\", f(v).call_mut(()));\n }"}, {"sha": "7bb4aac23d65cebe30bb5c1857b80dd29c0dfd88", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -23,16 +23,16 @@ fn main() {\n         _ => ()\n     }\n \n-    match &Some(42is) {\n+    match &Some(42i32) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected `&core::option::Option<isize>`\n+        //~| expected `&core::option::Option<i32>`\n         //~| found `core::option::Option<_>`\n         //~| expected &-ptr\n         //~| found enum `core::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected `&core::option::Option<isize>`\n+        //~| expected `&core::option::Option<i32>`\n         //~| found `core::option::Option<_>`\n         //~| expected &-ptr\n         //~| found enum `core::option::Option`"}, {"sha": "2731be7308a4a54de5ca5b38ec81be06dc219cbb", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -19,7 +19,7 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn main() {\n-    let x = box 3is;\n+    let x = box 3;\n     take_param(&x);\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "e146cac21a31c46692fb5c8ab48ad19e843c615d", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -23,12 +23,12 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n-    let x = box 3is;\n+    let x = box 3;\n     take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n }\n \n fn b() {\n-    let x = box 3is;\n+    let x = box 3;\n     let y = &x;\n     let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n }"}, {"sha": "519839ae2f4cb723e8413387ce387e46571a321d", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -91,7 +91,7 @@ pub fn pub_fn() {\n     let e = used_enum::foo3;\n     SemiUsedStruct::la_la_la();\n \n-    let i = 1is;\n+    let i = 1;\n     match i {\n         USED_STATIC => (),\n         USED_CONST => (),"}, {"sha": "f60c39ba020852c6d035808bc50eae46ff244ddd", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -86,6 +86,6 @@ mod inner {\n }\n \n pub fn foo() {\n-    let a = &1is as &inner::Trait;\n+    let a = &1 as &inner::Trait;\n     a.f();\n }"}, {"sha": "b5eac73a55d1c84fe3056da1fc8bb6751a64b0b8", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -17,7 +17,7 @@ impl X {\n }\n \n fn foo() -> isize {\n-    return (1is); //~ ERROR unnecessary parentheses around `return` value\n+    return (1); //~ ERROR unnecessary parentheses around `return` value\n }\n fn bar() -> X {\n     return (X { y: true }); //~ ERROR unnecessary parentheses around `return` value\n@@ -32,8 +32,8 @@ fn main() {\n     match (true) { //~ ERROR unnecessary parentheses around `match` head expression\n         _ => {}\n     }\n-    if let 1is = (1is) {} //~ ERROR unnecessary parentheses around `if let` head expression\n-    while let 1is = (2is) {} //~ ERROR unnecessary parentheses around `while let` head expression\n+    if let 1 = (1) {} //~ ERROR unnecessary parentheses around `if let` head expression\n+    while let 1 = (2) {} //~ ERROR unnecessary parentheses around `while let` head expression\n     let v = X { y: false };\n     // struct lits needs parens, so these shouldn't warn.\n     if (v == X { y: true }) {}\n@@ -47,7 +47,7 @@ fn main() {\n         _ => {}\n     }\n \n-    let mut _a = (0is); //~ ERROR unnecessary parentheses around assigned value\n-    _a = (0is); //~ ERROR unnecessary parentheses around assigned value\n-    _a += (1is); //~ ERROR unnecessary parentheses around assigned value\n+    let mut _a = (0); //~ ERROR unnecessary parentheses around assigned value\n+    _a = (0); //~ ERROR unnecessary parentheses around assigned value\n+    _a += (1); //~ ERROR unnecessary parentheses around assigned value\n }"}, {"sha": "1468ae64d9418e52ffe5b92939f6e93b6b3927bd", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -54,7 +54,7 @@ mod bar {\n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n-        pub fn cc(p: Point) -> isize { return 2is * (p.x + p.y); }\n+        pub fn cc(p: Point) -> isize { return 2 * (p.x + p.y); }\n     }\n \n     #[allow(unused_imports)]\n@@ -65,8 +65,8 @@ mod bar {\n \n fn main() {\n     cal(foo::Point{x:3, y:9});\n-    let mut a = 3is;\n-    let mut b = 4is;\n+    let mut a = 3;\n+    let mut b = 4;\n     swap(&mut a, &mut b);\n     test::C.b();\n     let _a = foo();"}, {"sha": "ddba7b58afaab6e5ad68c5acc3a34cb95570c747", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -18,45 +18,45 @@\n \n fn main() {\n     // negative cases\n-    let mut a = 3is; //~ ERROR: variable does not need to be mutable\n-    let mut a = 2is; //~ ERROR: variable does not need to be mutable\n-    let mut b = 3is; //~ ERROR: variable does not need to be mutable\n-    let mut a = vec!(3is); //~ ERROR: variable does not need to be mutable\n-    let (mut a, b) = (1is, 2is); //~ ERROR: variable does not need to be mutable\n+    let mut a = 3; //~ ERROR: variable does not need to be mutable\n+    let mut a = 2; //~ ERROR: variable does not need to be mutable\n+    let mut b = 3; //~ ERROR: variable does not need to be mutable\n+    let mut a = vec!(3); //~ ERROR: variable does not need to be mutable\n+    let (mut a, b) = (1, 2); //~ ERROR: variable does not need to be mutable\n \n-    match 30is {\n+    match 30 {\n         mut x => {} //~ ERROR: variable does not need to be mutable\n     }\n-    match (30is, 2is) {\n+    match (30, 2) {\n       (mut x, 1) | //~ ERROR: variable does not need to be mutable\n       (mut x, 2) |\n       (mut x, 3) => {\n       }\n       _ => {}\n     }\n \n-    let x = |&: mut y: isize| 10is; //~ ERROR: variable does not need to be mutable\n+    let x = |&: mut y: isize| 10; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: isize) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n-    let mut a = 2is;\n-    a = 3is;\n+    let mut a = 2;\n+    a = 3;\n     let mut a = Vec::new();\n-    a.push(3is);\n+    a.push(3);\n     let mut a = Vec::new();\n     callback(|| {\n-        a.push(3is);\n+        a.push(3);\n     });\n-    let (mut a, b) = (1is, 2is);\n+    let (mut a, b) = (1, 2);\n     a = 34;\n \n-    match 30is {\n+    match 30 {\n         mut x => {\n-            x = 21is;\n+            x = 21;\n         }\n     }\n \n-    match (30is, 2is) {\n+    match (30, 2) {\n       (mut x, 1) |\n       (mut x, 2) |\n       (mut x, 3) => {\n@@ -65,19 +65,19 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |&mut: mut y: isize| y = 32is;\n-    fn nothing(mut foo: isize) { foo = 37is; }\n+    let x = |&mut: mut y: isize| y = 32;\n+    fn nothing(mut foo: isize) { foo = 37; }\n \n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n-    let mut _allowed = 1is;\n+    let mut _allowed = 1;\n }\n \n fn callback<F>(f: F) where F: FnOnce() {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]\n fn foo(mut a: isize) {\n-    let mut a = 3is;\n-    let mut b = vec!(2is);\n+    let mut a = 3;\n+    let mut b = vec!(2);\n }"}, {"sha": "181ba124fdd1d33356885b3bc791ea8f3b645261", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    println!(\"{}\", 3is);\n+    println!(\"{}\", 3);\n }\n \n fn main() { bad_bang(5us); }"}, {"sha": "57252dd58d7144a3d46eb407e494208916eb6d5d", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,11 +10,11 @@\n //\n // regression test for #8005\n \n-macro_rules! test { () => { fn foo() -> isize { 1is; } } }\n-                                             //~^ ERROR not all control paths return a value\n-                                             //~^^ HELP consider removing this semicolon\n+macro_rules! test { () => { fn foo() -> i32 { 1i32; } } }\n+                                           //~^ ERROR not all control paths return a value\n+                                           //~^^ HELP consider removing this semicolon\n \n-fn no_return() -> isize {} //~ ERROR  not all control paths return a value\n+fn no_return() -> i32 {} //~ ERROR  not all control paths return a value\n \n fn bar(x: u32) -> u32 { //~ ERROR  not all control paths return a value\n     x * 2; //~ HELP consider removing this semicolon"}, {"sha": "60c4c246552f4298f0d77b55b2f6b583955983de", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -31,40 +31,40 @@ fn f1d() {\n }\n \n fn f2() {\n-    let x = 3is;\n+    let x = 3;\n     //~^ ERROR unused variable: `x`\n }\n \n fn f3() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     //~^ ERROR variable `x` is assigned to, but never used\n-    x += 4is;\n+    x += 4;\n     //~^ ERROR value assigned to `x` is never read\n }\n \n fn f3b() {\n-    let mut z = 3is;\n+    let mut z = 3;\n     //~^ ERROR variable `z` is assigned to, but never used\n     loop {\n-        z += 4is;\n+        z += 4;\n     }\n }\n \n #[allow(unused_variables)]\n fn f3c() {\n-    let mut z = 3is;\n-    loop { z += 4is; }\n+    let mut z = 3;\n+    loop { z += 4; }\n }\n \n #[allow(unused_variables)]\n #[allow(unused_assignments)]\n fn f3d() {\n-    let mut x = 3is;\n-    x += 4is;\n+    let mut x = 3;\n+    x += 4;\n }\n \n fn f4() {\n-    match Some(3is) {\n+    match Some(3) {\n       Some(i) => {\n         //~^ ERROR unused variable: `i`\n       }\n@@ -77,25 +77,25 @@ enum tri {\n }\n \n fn f4b() -> isize {\n-    match tri::a(3is) {\n+    match tri::a(3) {\n       tri::a(i) | tri::b(i) | tri::c(i) => {\n         i\n       }\n     }\n }\n \n fn f5a() {\n-    for x in 1is..10 { }\n+    for x in 1..10 { }\n     //~^ ERROR unused variable: `x`\n }\n \n fn f5b() {\n-    for (x, _) in [1is, 2, 3].iter().enumerate() { }\n+    for (x, _) in [1, 2, 3].iter().enumerate() { }\n     //~^ ERROR unused variable: `x`\n }\n \n fn f5c() {\n-    for (_, x) in [1is, 2, 3].iter().enumerate() {\n+    for (_, x) in [1, 2, 3].iter().enumerate() {\n     //~^ ERROR unused variable: `x`\n         continue;\n         std::os::set_exit_status(*x); //~ WARNING unreachable statement"}, {"sha": "985eb1cd7babcb556487c770e122cb82f1dc83e2", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 5is;\n+    let x = box 5;\n     let y = x;\n     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n     y.clone();"}, {"sha": "12de4a714efc5dc6b6f6cd526b346f5aa5cef21e", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,7 +14,7 @@ fn forever() -> ! {\n   loop {\n     break;\n   }\n-  return 42is; //~ ERROR `return` in a function declared as diverging\n+  return 42; //~ ERROR `return` in a function declared as diverging\n }\n \n fn main() {"}, {"sha": "aa47ea670fd7051c32786a60a3929c3f22d33080", "filename": "src/test/compile-fail/match-ill-type2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    match 1is {\n-        1is => 1is,\n-        2us => 1is, //~ ERROR mismatched types\n-        _ => 2is,\n+    match 1i32 {\n+        1i32 => 1,\n+        2u32 => 1, //~ ERROR mismatched types\n+        _ => 2,\n     };\n }"}, {"sha": "a24d2ed4b7fba3da7eb6491bea94bc61d1c0431a", "filename": "src/test/compile-fail/match-non-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    match 0is { 1is => () } //~ ERROR non-exhaustive patterns\n-    match 0is { 0is if false => () } //~ ERROR non-exhaustive patterns\n+    match 0 { 1 => () } //~ ERROR non-exhaustive patterns\n+    match 0 { 0 if false => () } //~ ERROR non-exhaustive patterns\n }"}, {"sha": "e778dd18e68d3e64ac24d34bacad4d4741371ab7", "filename": "src/test/compile-fail/match-vec-fixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn a() {\n-    let v = [1is, 2, 3];\n+    let v = [1, 2, 3];\n     match v {\n         [_, _, _] => {}\n         [_, _, _] => {} //~ ERROR unreachable pattern"}, {"sha": "6616dcc8e1b032c4b9a9e931b36b224e7e95b0f3", "filename": "src/test/compile-fail/method-missing-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -33,7 +33,7 @@ fn main() {\n                         //~^ HELP maybe a `()` to call it is missing\n \n     // Ensure the span is useful\n-    let ys = &[1is,2,3,4,5,6,7];\n+    let ys = &[1,2,3,4,5,6,7];\n     let a = ys.iter()\n               .map(|x| x)\n               .filter(|&&x| x == 1)"}, {"sha": "7b6868af805e52cea3e31325ae456cee3ce3209a", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -23,9 +23,9 @@ fn main() {\n                  //~| found `Foo`\n                  //~| expected &-ptr\n                  //~| found struct `Foo`\n-    Foo::bar(&42is); //~  ERROR mismatched types\n-                     //~| expected `&Foo`\n-                     //~| found `&isize`\n-                     //~| expected struct `Foo`\n-                     //~| found isize\n+    Foo::bar(&42i32); //~  ERROR mismatched types\n+                      //~| expected `&Foo`\n+                      //~| found `&i32`\n+                      //~| expected struct `Foo`\n+                      //~| found i32\n }"}, {"sha": "7e3a85569d413f5ea39a489fa54df1c095de9434", "filename": "src/test/compile-fail/move-out-of-tuple-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,11 +13,11 @@\n struct Foo(Box<isize>);\n \n fn main() {\n-    let x = (box 1is,);\n+    let x = (box 1,);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n \n-    let x = Foo(box 1is);\n+    let x = Foo(box 1);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n }"}, {"sha": "c9f73e86a2c4609bbdef09487aa198f1f650030c", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -24,13 +24,13 @@ fn f10() {\n \n fn f20() {\n     let x = \"hi\".to_string();\n-    let _y = (x, 3is);\n+    let _y = (x, 3);\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f21() {\n-    let x = vec!(1is, 2, 3);\n-    let _y = (x[0], 3is);\n+    let x = vec!(1, 2, 3);\n+    let _y = (x[0], 3);\n     touch(&x);\n }\n \n@@ -61,9 +61,9 @@ fn f50(cond: bool) {\n     let x = \"hi\".to_string();\n     let y = \"ho\".to_string();\n     let _y = match cond {\n-        _ if guard(x) => 10is,\n-        true => 10is,\n-        false => 20is,\n+        _ if guard(x) => 10,\n+        true => 10,\n+        false => 20,\n     };\n     touch(&x); //~ ERROR use of moved value: `x`\n     touch(&y);"}, {"sha": "99d7258477ace85d1f67529207171b38f986a071", "filename": "src/test/compile-fail/mut-cant-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let m = RefCell::new(0is);\n+    let m = RefCell::new(0);\n     let mut b = m.borrow_mut();\n     let b1 = &mut *b;\n     let b2 = &mut *b; //~ ERROR cannot borrow"}, {"sha": "2cf6e67a90958baa9742be4d6004340c5bf4f774", "filename": "src/test/compile-fail/mut-cross-borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,7 +13,7 @@\n fn f(_: &mut isize) {}\n \n fn main() {\n-    let mut x = box 3is;\n+    let mut x = box 3;\n     f(x)    //~ ERROR mismatched types\n }\n "}, {"sha": "2269c58c97de34cdfdbb556ea54cbb7c88446500", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,7 +13,7 @@ use std::cell::RefCell;\n fn f<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = RefCell::new(0is);\n+    let x = RefCell::new(0);\n     f(x);\n     //~^ ERROR `core::marker::Sync` is not implemented\n     //~^^ ERROR `core::marker::Sync` is not implemented"}, {"sha": "b0d618328dcca33928c188d2590cf85581480ad5", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let foo = &mut 1is;\n+    let foo = &mut 1;\n \n     let &mut x = foo;\n     x += 1; //~ ERROR re-assignment of immutable variable"}, {"sha": "6de69a9adb0c9a3b56d32b3397176a8d2eb201d1", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,21 +9,21 @@\n // except according to those terms.\n \n fn main() {\n-    let foo = &mut 1is;\n+    let foo = &mut 1i32;\n \n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected `&mut isize`\n+            //~| expected `&mut i32`\n             //~| found `&_`\n             //~| values differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n-    let bar = &1is;\n+    let bar = &1i32;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected `&isize`\n+               //~| expected `&i32`\n                //~| found `&mut _`\n                //~| values differ in mutability\n          = bar;"}, {"sha": "8e968d90a2f65750aeb87e9a8551653334cf630f", "filename": "src/test/compile-fail/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let m = RefCell::new(0is);\n+    let m = RefCell::new(0);\n     let p;\n     {\n         let b = m.borrow();"}, {"sha": "939d7c7a5348b84f60d90d0c6fa71a152fbd80ef", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,7 +14,7 @@ use std::sync::Arc;\n use std::thread::Thread;\n \n fn main() {\n-    let v = vec!(1is, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let v = vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n     let arc_v = Arc::new(v);\n \n     Thread::spawn(move|| {"}, {"sha": "730ba9ab9ea71326823536840b62a120c835999a", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@ use std::sync::Arc;\n use std::thread::Thread;\n \n fn main() {\n-    let v = vec!(1is, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let v = vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n     let arc_v = Arc::new(v);\n \n     Thread::spawn(move|| {"}, {"sha": "b5c572b17dd9a1bac7e465b36b92ef8472ced80a", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,7 +13,7 @@ use std::rc::Rc;\n fn bar<T: Send>(_: T) {}\n \n fn main() {\n-    let x = Rc::new(5is);\n+    let x = Rc::new(5);\n     bar(x);\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "4bc3442871f5d749dba9e83d1e297ea1b0a0e281", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = Rc::new(RefCell::new(5is));\n+    let x = Rc::new(RefCell::new(5));\n     bar(x);\n     //~^ ERROR the trait `core::marker::Sync` is not implemented\n }"}, {"sha": "fce72f507b6fc56ba3057978808134358709e7de", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -16,10 +16,10 @@ fn main() {\n     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n       true => {}\n     }\n-    match Some(10is) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n+    match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2is, 3is, 4is) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n+    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n       (_, _, 4) => {}\n     }\n     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n@@ -35,14 +35,14 @@ fn main() {\n       (_, t::a) => {}\n       (t::b, t::b) => {}\n     }\n-    let vec = vec!(Some(42is), None, Some(21is));\n+    let vec = vec!(Some(42), None, Some(21));\n     let vec: &[Option<isize>] = vec.as_slice();\n     match vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n         [Some(..), None, tail..] => {}\n         [Some(..), Some(..), tail..] => {}\n         [None] => {}\n     }\n-    let vec = vec!(1is);\n+    let vec = vec!(1);\n     let vec: &[isize] = vec.as_slice();\n     match vec {\n         [_, tail..] => (),\n@@ -56,7 +56,7 @@ fn main() {\n         [0.1] => (),\n         [] => ()\n     }\n-    let vec = vec!(Some(42is), None, Some(21is));\n+    let vec = vec!(Some(42), None, Some(21));\n     let vec: &[Option<isize>] = vec.as_slice();\n     match vec {\n         [Some(..), None, tail..] => {}"}, {"sha": "b48d3e8871b203b04b4ecb92de42da3c491f0da5", "filename": "src/test/compile-fail/pat-range-bad-dots.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    match 22is {\n+    match 22 {\n         0 .. 3 => {} //~ ERROR expected one of `...`, `=>`, or `|`, found `..`\n         _ => {}\n     }"}, {"sha": "80544099329cffde6c2e918939be02111ee965c6", "filename": "src/test/compile-fail/pattern-bindings-after-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,7 +14,7 @@ enum Option<T> {\n }\n \n fn main() {\n-    match &mut Some(1is) {\n+    match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR pattern bindings are not allowed after an `@`\n             **z = None;"}, {"sha": "ccf82e90b7a1d89fc9b18e4bafb32fa03fb418d1", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,17 +11,17 @@\n fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n \n fn main() {\n-    let_in(3us, |i| { assert!(i == 3is); });\n+    let_in(3u32, |i| { assert!(i == 3i32); });\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `isize`\n-    //~| expected usize\n-    //~| found isize\n+    //~| expected `u32`\n+    //~| found `i32`\n+    //~| expected u32\n+    //~| found i32\n \n-    let_in(3is, |i| { assert!(i == 3us); });\n+    let_in(3i32, |i| { assert!(i == 3u32); });\n     //~^ ERROR mismatched types\n-    //~| expected `isize`\n-    //~| found `usize`\n-    //~| expected isize\n-    //~| found usize\n+    //~| expected `i32`\n+    //~| found `u32`\n+    //~| expected i32\n+    //~| found u32\n }"}, {"sha": "18e210076cb55a561699d8e2a48bcd867a44798b", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,7 +13,7 @@\n \n pub fn main() {\n     // *const -> *mut\n-    let x: *const isize = &42is;\n+    let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n                            //~| expected `*mut isize`\n                            //~| found `*const isize`"}, {"sha": "67b203bec197c5039294c6c432849251e6e75634", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     // Mixed types.\n-    let _ = 0us..10is;\n+    let _ = 0u32..10i32;\n     //~^ ERROR start and end of range have incompatible types\n \n     // Float => does not implement iterator.\n@@ -23,7 +23,7 @@ pub fn main() {\n     // FIXME(#21528) not fulfilled obligation error should be reported once, not thrice\n \n     // Unsized type.\n-    let arr: &[_] = &[1us, 2, 3];\n+    let arr: &[_] = &[1u32, 2, 3];\n     let range = *arr..;\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "c9053328572bcc3b07800255081d6f94ceabcb73", "filename": "src/test/compile-fail/range-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let r = {\n-        &42is..&42\n+        &42..&42\n         //~^ ERROR borrowed value does not live long enough\n         //~^^ ERROR borrowed value does not live long enough\n     };"}, {"sha": "ce93e1875ae5a9ce9761a175a8cfeec4dd1a119c", "filename": "src/test/compile-fail/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,6 +13,6 @@ fn func((1, (Some(1), 2...3)): (isize, (Option<isize>, isize))) { }\n //~^ ERROR refutable pattern in function argument: `(_, _)` not covered\n \n fn main() {\n-    let (1is, (Some(1is), 2is...3is)) = (1is, (None, 2is));\n+    let (1, (Some(1), 2...3)) = (1, (None, 2));\n     //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n }"}, {"sha": "053af49e0684b8b938d2d58a24d09f8b41dd2a38", "filename": "src/test/compile-fail/regions-close-over-type-parameter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     // ~Repeat<&'blk isize> where blk is the lifetime of the block below.\n \n     let _ = {\n-        let tmp0 = 3is;\n+        let tmp0 = 3;\n         let tmp1 = &tmp0; //~ ERROR `tmp0` does not live long enough\n         repeater3(tmp1)\n     };"}, {"sha": "f588655d1afa85af5b19e7fc1af8c8a46594d233", "filename": "src/test/compile-fail/regions-escape-loop-via-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n fn main() {\n-    let x = 3is;\n+    let x = 3;\n \n     // Here, the variable `p` gets inferred to a type with a lifetime\n     // of the loop body.  The regionck then determines that this type\n     // is invalid.\n     let mut p = &x;\n \n     loop {\n-        let x = 1is + *p;\n+        let x = 1 + *p;\n         p = &x; //~ ERROR `x` does not live long enough\n     }\n }"}, {"sha": "89350f16167603f3b9ae01c8409623e2f405feea", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,7 +10,7 @@\n \n // The type of `y` ends up getting inferred to the type of the block.\n fn broken() {\n-    let mut x = 3is;\n+    let mut x = 3;\n     let mut _y = vec!(&mut x);\n     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed"}, {"sha": "ee5d5cad0a3fdd2d59337ecdd78b6ced5423b06e", "filename": "src/test/compile-fail/regions-infer-proc-static-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -16,7 +16,7 @@ fn foo<F:FnOnce()+'static>(_p: F) { }\n static i: isize = 3;\n \n fn capture_local() {\n-    let x = 3is;\n+    let x = 3;\n     let y = &x; //~ ERROR `x` does not live long enough\n     foo(move|| {\n         let _a = *y;"}, {"sha": "97b51fdb3250800ce687bac0731d5f1088e76424", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -21,7 +21,7 @@ fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n \n fn main() {\n     let cl_box = {\n-        let mut i = 3is;\n+        let mut i = 3;\n         box_it(box || i += 1) //~ ERROR cannot infer\n     };\n     cl_box.cl.call_mut(());"}, {"sha": "8955a26de0b93c085014b1bea5ae070d1589fc9a", "filename": "src/test/compile-fail/regions-var-type-out-of-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,8 +14,8 @@ fn foo(cond: bool) {\n     let mut x;\n \n     if cond {\n-        x = &3is; //~ ERROR borrowed value does not live long enough\n-        assert_eq!(*x, 3is);\n+        x = &3; //~ ERROR borrowed value does not live long enough\n+        assert_eq!(*x, 3);\n     }\n }\n "}, {"sha": "d5e70205e9536f5ffa22f71232c8f5d0fc8b256c", "filename": "src/test/compile-fail/static-assert2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,6 +11,6 @@\n #![allow(dead_code)]\n \n #[static_assert]\n-static E: bool = 1is == 2; //~ ERROR static assertion failed\n+static E: bool = 1 == 2; //~ ERROR static assertion failed\n \n fn main() {}"}, {"sha": "76fecea0c3a6ab77a27d9f3708e4d4a05f36dfc0", "filename": "src/test/compile-fail/static-mut-not-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     // name as a variable, hence this should be an unreachable pattern situation\n     // instead of spitting out a custom error about some identifier collisions\n     // (we should allow shadowing)\n-    match 4is {\n+    match 4 {\n         a => {} //~ ERROR static variables cannot be referenced in a pattern\n         _ => {}\n     }"}, {"sha": "200aa9891935a3cee037a9c55cdb39a5392385a5", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -13,8 +13,8 @@\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box 3is;\n+    let x = box 3;\n     f(x);\n-    let x = &3is; //~ ERROR borrowed value does not live long enough\n+    let x = &3; //~ ERROR borrowed value does not live long enough\n     f(x);\n }"}, {"sha": "a82c05c72c303e06c5e2bacf56e382c90adadbe8", "filename": "src/test/compile-fail/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -26,39 +26,39 @@ fn main() {\n     let pt = PointF {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found isize\n-        x: 1is,\n-        y: 2is,\n+        //~| found i32\n+        x: 1i32,\n+        y: 2i32,\n     };\n \n     let pt2 = Point::<f32> {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found isize\n-        x: 3is,\n-        y: 4is,\n+        //~| found i32\n+        x: 3i32,\n+        y: 4i32,\n     };\n \n     let pair = PairF {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found isize\n-        x: 5is,\n-        y: 6is,\n+        //~| found i32\n+        x: 5i32,\n+        y: 6i32,\n     };\n \n-    let pair2 = PairF::<isize> {\n+    let pair2 = PairF::<i32> {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found isize\n-        x: 7is,\n-        y: 8is,\n+        //~| found i32\n+        x: 7i32,\n+        y: 8i32,\n     };\n \n-    let pt3 = PointF::<isize> {\n+    let pt3 = PointF::<i32> {\n         //~^ ERROR wrong number of type arguments\n-        x: 9is,\n-        y: 10is,\n+        x: 9i32,\n+        y: 10i32,\n     };\n }\n "}, {"sha": "e8f9ed4d2cfc8d760da40f213ef332a7043c8552", "filename": "src/test/compile-fail/trailing-plus-in-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrailing-plus-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrailing-plus-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrailing-plus-in-bounds.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n use std::fmt::Show;\n \n fn main() {\n-    let x: Box<Show+> = box 3is as Box<Show+>;\n+    let x: Box<Show+> = box 3 as Box<Show+>;\n     //~^ ERROR at least one type parameter bound must be specified\n     //~^^ ERROR at least one type parameter bound must be specified\n }"}, {"sha": "118dfeb37c2516d7845af0799312bde338eb43f4", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -17,7 +17,7 @@ struct Foo<T:Trait> {\n fn main() {\n     let foo = Foo {\n     //~^ ERROR not implemented\n-        x: 3is\n+        x: 3\n     };\n \n     let baz: Foo<usize> = panic!();"}, {"sha": "8a9732de7fbd79e62d9ee048ae6130b3467779c2", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -17,7 +17,7 @@ use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n fn main() {\n     let foo = Foo {\n     //~^ ERROR not implemented\n-        x: 3is\n+        x: 3\n     };\n     let bar: Bar<f64> = return;\n     //~^ ERROR not implemented"}, {"sha": "dadcbd5bce710291c706ad4a4209374352549d1b", "filename": "src/test/compile-fail/trait-impl-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -18,9 +18,9 @@ impl<'a> T+'a {\n     fn foo(&self) {}\n }\n \n-impl T for isize {}\n+impl T for i32 {}\n \n fn main() {\n-    let x = &42is;\n-    x.foo(); //~ERROR: type `&isize` does not implement any method in scope named `foo`\n+    let x = &42i32;\n+    x.foo(); //~ERROR: type `&i32` does not implement any method in scope named `foo`\n }"}, {"sha": "d8b3176787c040b1f75efdc2b741c05686522092", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,11 +11,11 @@\n #![feature(box_syntax)]\n \n trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-impl bar for isize { fn dup(&self) -> isize { *self } fn blah<X>(&self) {} }\n-impl bar for usize { fn dup(&self) -> usize { *self } fn blah<X>(&self) {} }\n+impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n+impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n-    10is.dup::<isize>(); //~ ERROR does not take type parameters\n-    10is.blah::<isize, isize>(); //~ ERROR incorrect number of type parameters\n-    (box 10is as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n+    10.dup::<i32>(); //~ ERROR does not take type parameters\n+    10.blah::<i32, i32>(); //~ ERROR incorrect number of type parameters\n+    (box 10 as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n }"}, {"sha": "392eccf0f31a36d16f7a52110ff530571275328e", "filename": "src/test/compile-fail/traits-multidispatch-bad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,9 +14,9 @@ trait Convert<Target> {\n     fn convert(&self) -> Target;\n }\n \n-impl Convert<usize> for isize {\n-    fn convert(&self) -> usize {\n-        *self as usize\n+impl Convert<u32> for i32 {\n+    fn convert(&self) -> u32 {\n+        *self as u32\n     }\n }\n \n@@ -26,7 +26,7 @@ where T : Convert<U>\n }\n \n fn a() {\n-    test(22is, 44is); //~ ERROR mismatched types\n+    test(22i32, 44i32); //~ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "54b8d551f202e5fee102e8f95591805b10bcc945", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Point(isize, isize);\n+struct Point(i32, i32);\n \n fn main() {\n-    let origin = Point(0, 0);\n+    let origin = Point(0i32, 0i32);\n     origin.0;\n     origin.1;\n     origin.2;\n     //~^ ERROR attempted out-of-bounds tuple index `2` on type `Point`\n-    let tuple = (0is, 0is);\n+    let tuple = (0i32, 0i32);\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(isize, isize)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(i32, i32)`\n }"}, {"sha": "bb1e199920d5c512165b2436f5086e31a6c274a3", "filename": "src/test/compile-fail/tutorial-suffix-inference-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     //~| expected u16\n     //~| found i32\n \n-    let a = 3is;\n+    let a = 3;\n \n     fn identity_i(n: isize) -> isize { n }\n "}, {"sha": "3bf0896d990af6fdea1ab8521cf65648695cc6ef", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,14 +10,14 @@\n \n // Checking that the compiler reports multiple type errors at once\n \n-fn main() { let a: bool = 1is; let b: isize = true; }\n+fn main() { let a: bool = 1i32; let b: i32 = true; }\n //~^ ERROR mismatched types\n //~| expected `bool`\n-//~| found `isize`\n+//~| found `i32`\n //~| expected bool\n-//~| found isize\n+//~| found i32\n //~| ERROR mismatched types\n-//~| expected `isize`\n+//~| expected `i32`\n //~| found `bool`\n-//~| expected isize\n+//~| expected i32\n //~| found bool"}, {"sha": "1cb6bd048ccc362acbe7901daa9ac76089835211", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -25,7 +25,7 @@ impl !Sync for NoSync {}\n fn test<T: Sync>(s: T) {}\n \n fn main() {\n-    let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0is)});\n+    let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n     //~^ ERROR `core::marker::Sync` is not implemented\n "}, {"sha": "ef6c439aeb89d97e0f0f522b165df59fc8f8a349", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -23,7 +23,7 @@ fn doit<T,F>(val: T, f: &F)\n }\n \n pub fn main() {\n-    doit(0is, &|&: x, y| {\n+    doit(0, &|&: x, y| {\n         x.set(y); //~ ERROR cannot infer\n     });\n }"}, {"sha": "8d3721f28db50ec5cf32b12cfee562e1b30e4066", "filename": "src/test/compile-fail/unboxed-closures-static-call-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     let mut_ = |&mut: x| x;\n-    mut_.call((0is, )); //~ ERROR does not implement any method in scope named `call`\n+    mut_.call((0, )); //~ ERROR does not implement any method in scope named `call`\n }\n "}, {"sha": "d45a31abcb71156f5581c5337eba903fec301fd0", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -16,7 +16,7 @@ fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n-    let i = box Rc::new(100is);\n+    let i = box Rc::new(100);\n     f(i);\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "dd08eed5df91aac0dc3d93c4fdcc1635d2bd0c05", "filename": "src/test/compile-fail/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n   loop{}\n \n-  let a = 3is; //~ ERROR: unreachable statement\n+  let a = 3; //~ ERROR: unreachable statement\n }"}, {"sha": "4fc76c99c60b7ed737ba123696807a7893c4b2b9", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -55,12 +55,12 @@ fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(*x1, 34is));\n+    f5(&(*x1, 34));\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(32is, *x2));\n+    f5(&(32, *x2));\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n "}, {"sha": "217d1f44d84613f9270ef4334b5cd62918c09c5f", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -27,12 +27,12 @@ fn f2<X: ?Sized + T>(x: &X) {\n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1; //~ERROR the trait `core::marker::Sized` is not implemented\n     let y = *x2; //~ERROR the trait `core::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4is); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;         //~ERROR the trait `core::marker::Sized` is not implemented\n     let y = *x2;            //~ERROR the trait `core::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4is); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `core::marker::Sized` is not implemented"}, {"sha": "87ea56c055350da70ec7481e6a826ebf8df43252", "filename": "src/test/compile-fail/unused-mut-warning-captured-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,7 +11,7 @@\n #![forbid(unused_mut)]\n \n fn main() {\n-    let mut x = 1is;\n+    let mut x = 1;\n     //~^ ERROR: variable does not need to be mutable\n     move|:| { println!(\"{}\", x); };\n }"}, {"sha": "7dcedc8ecadd19f9cfc6503d4cfedeabf2db40b5", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     let mut xs: Vec<isize> = vec!();\n \n     for x in xs.iter_mut() {\n-        xs.push(1is) //~ ERROR cannot borrow `xs`\n+        xs.push(1) //~ ERROR cannot borrow `xs`\n     }\n }"}, {"sha": "c21d8274da069686859d05753881cd8e2c0329ea", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -28,6 +28,6 @@ fn call_it<B:TraitB>(b: B)  -> isize {\n }\n \n fn main() {\n-    let x = 3is;\n+    let x = 3;\n     assert_eq!(call_it(x), 22);\n }"}, {"sha": "892d82d09345e10e2f927da4a27df1ab254414a0", "filename": "src/test/compile-fail/warn-path-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -11,6 +11,6 @@\n // compile-flags: -D path-statements\n fn main() {\n \n-    let x = 10is;\n+    let x = 10;\n     x; //~ ERROR path statement with no effect\n }"}, {"sha": "313ae273c07fe94fd58f2affbf98454f0efc3b40", "filename": "src/test/compile-fail/where-clauses-not-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -41,5 +41,5 @@ impl Baz<isize> for isize where isize : Eq {\n }\n \n fn main() {\n-    equal(&0is, &0is);\n+    equal(&0, &0);\n }"}, {"sha": "a70dcccd4e85ebbc3a8435b996d8e9b01debc99f", "filename": "src/test/compile-fail/while-let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -20,16 +20,16 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1is, { //~ ERROR irrefutable while-let\n+    foo!(a, 1, { //~ ERROR irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1is, { //~ ERROR irrefutable while-let\n+    bar!(a, 1, { //~ ERROR irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    while let a = 1is { //~ ERROR irrefutable while-let\n+    while let a = 1 { //~ ERROR irrefutable while-let\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "cc8337027b092e8a8cdbeca7f76bffe41bcb2340", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -19,7 +19,7 @@\n \n // #4264 fixed-length vector types\n \n-pub fn foo(_: [isize; (3 as usize)]) { }\n+pub fn foo(_: [i32; (3 as usize)]) { }\n \n pub fn bar() {\n     const FOO: usize = ((5us as usize) - (4us as usize) as usize);\n@@ -28,9 +28,9 @@\n     let _: [(); (1us as usize)] = ([(() as ())] as [(); 1]);\n \n     let _ =\n-        (((&((([(1is as isize), (2 as isize), (3 as isize)] as [isize; 3])) as\n-                [isize; 3]) as &[isize; 3]) as *const _ as *const [isize; 3])\n-            as *const [isize; (3us as usize)] as *const [isize; 3]);\n+        (((&((([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3])\n+              as &[i32; 3]) as *const _ as *const [i32; 3]) as\n+            *const [i32; (3us as usize)] as *const [i32; 3]);\n \n \n \n@@ -78,19 +78,18 @@\n                                                                                              core::fmt::Arguments<'_>))\n         as collections::string::String);\n }\n-pub type Foo = [isize; (3us as usize)];\n+pub type Foo = [i32; (3us as usize)];\n pub struct Bar {\n-    pub x: [isize; (3us as usize)],\n+    pub x: [i32; (3us as usize)],\n }\n-pub struct TupleBar([isize; (4us as usize)]);\n-pub enum Baz { BazVariant([isize; (5us as usize)]), }\n+pub struct TupleBar([i32; (4us as usize)]);\n+pub enum Baz { BazVariant([i32; (5us as usize)]), }\n pub fn id<T>(x: T) -> T { (x as T) }\n pub fn use_id() {\n     let _ =\n-        ((id::<[isize; (3us as usize)]> as\n-             fn([isize; 3]) -> [isize; 3] {id})(([(1 as isize), (2 as isize),\n-                                                  (3 as isize)] as\n-                                                    [isize; 3])) as\n-            [isize; 3]);\n+        ((id::<[i32; (3us as usize)]> as\n+             fn([i32; 3]) -> [i32; 3] {id})(([(1 as i32), (2 as i32),\n+                                              (3 as i32)] as [i32; 3])) as\n+            [i32; 3]);\n }\n fn main() { }"}, {"sha": "ff30bc6c15780ff17151a6fd2b4706c451117000", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -14,35 +14,35 @@\n \n // #4264 fixed-length vector types\n \n-pub fn foo(_: [isize; 3]) {}\n+pub fn foo(_: [i32; 3]) {}\n \n pub fn bar() {\n     const FOO: usize = 5us - 4us;\n     let _: [(); FOO] = [()];\n \n     let _ : [(); 1us] = [()];\n \n-    let _ = &([1is,2,3]) as *const _ as *const [isize; 3us];\n+    let _ = &([1,2,3]) as *const _ as *const [i32; 3us];\n \n     format!(\"test\");\n }\n \n-pub type Foo = [isize; 3us];\n+pub type Foo = [i32; 3us];\n \n pub struct Bar {\n-    pub x: [isize; 3us]\n+    pub x: [i32; 3us]\n }\n \n-pub struct TupleBar([isize; 4us]);\n+pub struct TupleBar([i32; 4us]);\n \n pub enum Baz {\n-    BazVariant([isize; 5us])\n+    BazVariant([i32; 5us])\n }\n \n pub fn id<T>(x: T) -> T { x }\n \n pub fn use_id() {\n-    let _ = id::<[isize; 3us]>([1,2,3]);\n+    let _ = id::<[i32; 3us]>([1,2,3]);\n }\n \n "}, {"sha": "c52c11b1b91881c68963d854fa45242ebedae8bc", "filename": "src/test/run-fail/assert-as-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:assertion failed: 1is == 2\n+// error-pattern:assertion failed: 1 == 2\n \n fn main() {\n-    assert!(1is == 2);\n+    assert!(1 == 2);\n }"}, {"sha": "7c6473ebfc26d1c7d73dc3f43d895de57ff89be5", "filename": "src/test/run-fail/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:1is == 2\n-fn main() { assert!((1is == 2)); }\n+// error-pattern:1 == 2\n+fn main() { assert!((1 == 2)); }"}, {"sha": "d924890b3118c99a36c18d3d7dff656ed1ada9cb", "filename": "src/test/run-make/graphviz-flowgraph/f01.dot-expected.dot", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,9 +1,9 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 1is\"];\n-    N3[label=\"stmt 1is;\"];\n-    N4[label=\"block { 1is; }\"];\n+    N2[label=\"expr 1\"];\n+    N3[label=\"stmt 1;\"];\n+    N4[label=\"block { 1; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "231aab69e50d95cd17f843f9047e6aab15ffc0c8", "filename": "src/test/run-make/graphviz-flowgraph/f01.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn lit_1() {\n-    1is;\n+    1;\n }"}, {"sha": "8b6500761850fc9fa7a71d66da81f7792a07643b", "filename": "src/test/run-make/graphviz-flowgraph/f03.dot-expected.dot", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,11 +1,11 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 3is\"];\n+    N2[label=\"expr 3\"];\n     N3[label=\"expr 4\"];\n-    N4[label=\"expr 3is + 4\"];\n-    N5[label=\"stmt 3is + 4;\"];\n-    N6[label=\"block { 3is + 4; }\"];\n+    N4[label=\"expr 3 + 4\"];\n+    N5[label=\"stmt 3 + 4;\"];\n+    N6[label=\"block { 3 + 4; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "2dd71b623c24d9e148b73938c626e75256a0d81e", "filename": "src/test/run-make/graphviz-flowgraph/f03.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn expr_add_3() {\n-    3is + 4;\n+    3 + 4;\n }"}, {"sha": "fde6cc29005500ebc4f481cd2aa51ab3ada9ac8f", "filename": "src/test/run-make/graphviz-flowgraph/f04.dot-expected.dot", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,10 +1,10 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 4is\"];\n+    N2[label=\"expr 4\"];\n     N3[label=\"local _x\"];\n-    N4[label=\"stmt let _x = 4is;\"];\n-    N5[label=\"block { let _x = 4is; }\"];\n+    N4[label=\"stmt let _x = 4;\"];\n+    N5[label=\"block { let _x = 4; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "2a0ac8ac9e57080224887d5891db71bc5a6b72c4", "filename": "src/test/run-make/graphviz-flowgraph/f04.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn pat_id_4() {\n-    let _x = 4is;\n+    let _x = 4;\n }"}, {"sha": "efd56cd0c75e49d8a06d7c88df23ea93d77ef65a", "filename": "src/test/run-make/graphviz-flowgraph/f05.dot-expected.dot", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,14 +1,14 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 5is\"];\n-    N3[label=\"expr 55is\"];\n-    N4[label=\"expr (5is, 55is)\"];\n+    N2[label=\"expr 5\"];\n+    N3[label=\"expr 55\"];\n+    N4[label=\"expr (5, 55)\"];\n     N5[label=\"local _x\"];\n     N6[label=\"local _y\"];\n     N7[label=\"pat (_x, _y)\"];\n-    N8[label=\"stmt let (_x, _y) = (5is, 55is);\"];\n-    N9[label=\"block { let (_x, _y) = (5is, 55is); }\"];\n+    N8[label=\"stmt let (_x, _y) = (5, 55);\"];\n+    N9[label=\"block { let (_x, _y) = (5, 55); }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "616d822bed07bf61283be397aff1ba42d61790c7", "filename": "src/test/run-make/graphviz-flowgraph/f05.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn pat_tup_5() {\n-    let (_x, _y) = (5is, 55is);\n+    let (_x, _y) = (5, 55);\n }"}, {"sha": "bee4a120d5909fd2b0f375c81518071f9c986d03", "filename": "src/test/run-make/graphviz-flowgraph/f07.dot-expected.dot", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,12 +1,12 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 7is\"];\n-    N3[label=\"expr 77is\"];\n-    N4[label=\"expr 777is\"];\n-    N5[label=\"expr 7777is\"];\n-    N6[label=\"expr [7is, 77is, 777is, 7777is]\"];\n-    N7[label=\"expr match [7is, 77is, 777is, 7777is] { [x, y, ..] => x + y, }\"];\n+    N2[label=\"expr 7\"];\n+    N3[label=\"expr 77\"];\n+    N4[label=\"expr 777\"];\n+    N5[label=\"expr 7777\"];\n+    N6[label=\"expr [7, 77, 777, 7777]\"];\n+    N7[label=\"expr match [7, 77, 777, 7777] { [x, y, ..] => x + y, }\"];\n     N8[label=\"(dummy_node)\"];\n     N9[label=\"local x\"];\n     N10[label=\"local y\"];\n@@ -15,8 +15,8 @@ digraph block {\n     N13[label=\"expr x\"];\n     N14[label=\"expr y\"];\n     N15[label=\"expr x + y\"];\n-    N16[label=\"stmt match [7is, 77is, 777is, 7777is] { [x, y, ..] => x + y, };\"];\n-    N17[label=\"block { match [7is, 77is, 777is, 7777is] { [x, y, ..] => x + y, }; }\"];\n+    N16[label=\"stmt match [7, 77, 777, 7777] { [x, y, ..] => x + y, };\"];\n+    N17[label=\"block { match [7, 77, 777, 7777] { [x, y, ..] => x + y, }; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "39f71d309fdf9363d55bba93be259e0c8a51878a", "filename": "src/test/run-make/graphviz-flowgraph/f07.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn pat_vec_7() {\n-    match [7is, 77is, 777is, 7777is] {\n+    match [7, 77, 777, 7777] {\n         [x, y, ..] => x + y\n     };\n }"}, {"sha": "da0120b7bdc52bf7a7a30fd6ab593483f6586467", "filename": "src/test/run-make/graphviz-flowgraph/f08.dot-expected.dot", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,21 +1,21 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 8is\"];\n+    N2[label=\"expr 8\"];\n     N3[label=\"local x\"];\n-    N4[label=\"stmt let x = 8is;\"];\n+    N4[label=\"stmt let x = 8;\"];\n     N5[label=\"local _y\"];\n     N6[label=\"stmt let _y;\"];\n     N7[label=\"expr x\"];\n-    N8[label=\"expr 88is\"];\n-    N9[label=\"expr x > 88is\"];\n-    N10[label=\"expr 888is\"];\n+    N8[label=\"expr 88\"];\n+    N9[label=\"expr x > 88\"];\n+    N10[label=\"expr 888\"];\n     N11[label=\"expr _y\"];\n-    N12[label=\"expr _y = 888is\"];\n-    N13[label=\"stmt _y = 888is;\"];\n-    N14[label=\"block { _y = 888is; }\"];\n-    N15[label=\"expr if x > 88is { _y = 888is; }\"];\n-    N16[label=\"block { let x = 8is; let _y; if x > 88is { _y = 888is; } }\"];\n+    N12[label=\"expr _y = 888\"];\n+    N13[label=\"stmt _y = 888;\"];\n+    N14[label=\"block { _y = 888; }\"];\n+    N15[label=\"expr if x > 88 { _y = 888; }\"];\n+    N16[label=\"block { let x = 8; let _y; if x > 88 { _y = 888; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "6ba7b03d54da5f206a715299aee42935965c559b", "filename": "src/test/run-make/graphviz-flowgraph/f08.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn expr_if_onearm_8() {\n-    let x = 8is; let _y;\n-    if x > 88is {\n-        _y = 888is;\n+    let x = 8; let _y;\n+    if x > 88 {\n+        _y = 888;\n     }\n }"}, {"sha": "c98d1b0bed5deb99fcbc455ee5e7e25fe206be4d", "filename": "src/test/run-make/graphviz-flowgraph/f09.dot-expected.dot", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,29 +1,29 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 91is\"];\n+    N2[label=\"expr 91\"];\n     N3[label=\"local x\"];\n-    N4[label=\"stmt let x = 91is;\"];\n+    N4[label=\"stmt let x = 91;\"];\n     N5[label=\"local _y\"];\n     N6[label=\"stmt let _y;\"];\n     N7[label=\"expr x\"];\n-    N8[label=\"expr 92is\"];\n-    N9[label=\"expr x > 92is\"];\n-    N10[label=\"expr 93is\"];\n+    N8[label=\"expr 92\"];\n+    N9[label=\"expr x > 92\"];\n+    N10[label=\"expr 93\"];\n     N11[label=\"expr _y\"];\n-    N12[label=\"expr _y = 93is\"];\n-    N13[label=\"stmt _y = 93is;\"];\n-    N14[label=\"block { _y = 93is; }\"];\n-    N15[label=\"expr 94is\"];\n-    N16[label=\"expr 95is\"];\n-    N17[label=\"expr 94is + 95is\"];\n+    N12[label=\"expr _y = 93\"];\n+    N13[label=\"stmt _y = 93;\"];\n+    N14[label=\"block { _y = 93; }\"];\n+    N15[label=\"expr 94\"];\n+    N16[label=\"expr 95\"];\n+    N17[label=\"expr 94 + 95\"];\n     N18[label=\"expr _y\"];\n-    N19[label=\"expr _y = 94is + 95is\"];\n-    N20[label=\"stmt _y = 94is + 95is;\"];\n-    N21[label=\"block { _y = 94is + 95is; }\"];\n-    N22[label=\"expr { _y = 94is + 95is; }\"];\n-    N23[label=\"expr if x > 92is { _y = 93is; } else { _y = 94is + 95is; }\"];\n-    N24[label=\"block {\\l    let x = 91is;\\l    let _y;\\l    if x > 92is { _y = 93is; } else { _y = 94is + 95is; }\\l}\\l\"];\n+    N19[label=\"expr _y = 94 + 95\"];\n+    N20[label=\"stmt _y = 94 + 95;\"];\n+    N21[label=\"block { _y = 94 + 95; }\"];\n+    N22[label=\"expr { _y = 94 + 95; }\"];\n+    N23[label=\"expr if x > 92 { _y = 93; } else { _y = 94 + 95; }\"];\n+    N24[label=\"block { let x = 91; let _y; if x > 92 { _y = 93; } else { _y = 94 + 95; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "a78ccb8a93741a174368a5df7232510281d7d63a", "filename": "src/test/run-make/graphviz-flowgraph/f09.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn expr_if_twoarm_9() {\n-    let x = 91is; let _y;\n-    if x > 92is {\n-        _y = 93is;\n+    let x = 91; let _y;\n+    if x > 92 {\n+        _y = 93;\n     } else {\n-        _y = 94is+95is;\n+        _y = 94+95;\n     }\n }"}, {"sha": "516c39ef560a2b9201ec41abfdac2937f49c5176", "filename": "src/test/run-make/graphviz-flowgraph/f10.dot-expected.dot", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,20 +1,20 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 10is\"];\n+    N2[label=\"expr 10\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 10is;\"];\n+    N4[label=\"stmt let mut x = 10;\"];\n     N5[label=\"(dummy_node)\"];\n     N6[label=\"expr x\"];\n-    N7[label=\"expr 0is\"];\n-    N8[label=\"expr x > 0is\"];\n-    N9[label=\"expr while x > 0is { x -= 1is; }\"];\n-    N10[label=\"expr 1is\"];\n+    N7[label=\"expr 0\"];\n+    N8[label=\"expr x > 0\"];\n+    N9[label=\"expr while x > 0 { x -= 1; }\"];\n+    N10[label=\"expr 1\"];\n     N11[label=\"expr x\"];\n-    N12[label=\"expr x -= 1is\"];\n-    N13[label=\"stmt x -= 1is;\"];\n-    N14[label=\"block { x -= 1is; }\"];\n-    N15[label=\"block { let mut x = 10is; while x > 0is { x -= 1is; } }\"];\n+    N12[label=\"expr x -= 1\"];\n+    N13[label=\"stmt x -= 1;\"];\n+    N14[label=\"block { x -= 1; }\"];\n+    N15[label=\"block { let mut x = 10; while x > 0 { x -= 1; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "0ca7cc5ee86bd7f31ac6dda1a7c95140feba4e10", "filename": "src/test/run-make/graphviz-flowgraph/f10.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn expr_while_10() {\n-    let mut x = 10is;\n-    while x > 0is {\n-        x -= 1is;\n+    let mut x = 10;\n+    while x > 0 {\n+        x -= 1;\n     }\n }"}, {"sha": "9b66fd581cb43a5f6fca84b9f4eec29f2b7ea233", "filename": "src/test/run-make/graphviz-flowgraph/f11.dot-expected.dot", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,20 +1,20 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 11is\"];\n+    N2[label=\"expr 11\"];\n     N3[label=\"local mut _x\"];\n-    N4[label=\"stmt let mut _x = 11is;\"];\n+    N4[label=\"stmt let mut _x = 11;\"];\n     N5[label=\"(dummy_node)\"];\n-    N6[label=\"expr loop  { _x -= 1is; }\"];\n-    N7[label=\"expr 1is\"];\n+    N6[label=\"expr loop  { _x -= 1; }\"];\n+    N7[label=\"expr 1\"];\n     N8[label=\"expr _x\"];\n-    N9[label=\"expr _x -= 1is\"];\n-    N10[label=\"stmt _x -= 1is;\"];\n-    N11[label=\"block { _x -= 1is; }\"];\n-    N12[label=\"stmt loop  { _x -= 1is; }\"];\n+    N9[label=\"expr _x -= 1\"];\n+    N10[label=\"stmt _x -= 1;\"];\n+    N11[label=\"block { _x -= 1; }\"];\n+    N12[label=\"stmt loop  { _x -= 1; }\"];\n     N13[label=\"expr \\\"unreachable\\\"\"];\n     N14[label=\"stmt \\\"unreachable\\\";\"];\n-    N15[label=\"block { let mut _x = 11is; loop  { _x -= 1is; } \\\"unreachable\\\"; }\"];\n+    N15[label=\"block { let mut _x = 11; loop  { _x -= 1; } \\\"unreachable\\\"; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "d0f3452119e16b512712c5b22673aec811cd9122", "filename": "src/test/run-make/graphviz-flowgraph/f11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,9 +10,9 @@\n \n #[allow(unreachable_code)]\n pub fn expr_loop_11() {\n-    let mut _x = 11is;\n+    let mut _x = 11;\n     loop {\n-        _x -= 1is;\n+        _x -= 1;\n     }\n     \"unreachable\";\n }"}, {"sha": "071af6faf6f96fdcc03c1349901ff1231cb3fa82", "filename": "src/test/run-make/graphviz-flowgraph/f12.dot-expected.dot", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,27 +1,27 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 12is\"];\n+    N2[label=\"expr 12\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 12is;\"];\n+    N4[label=\"stmt let mut x = 12;\"];\n     N5[label=\"(dummy_node)\"];\n-    N6[label=\"expr loop  { x -= 1is; if x == 2is { break ; \\\"unreachable\\\"; } }\"];\n-    N7[label=\"expr 1is\"];\n+    N6[label=\"expr loop  { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n+    N7[label=\"expr 1\"];\n     N8[label=\"expr x\"];\n-    N9[label=\"expr x -= 1is\"];\n-    N10[label=\"stmt x -= 1is;\"];\n+    N9[label=\"expr x -= 1\"];\n+    N10[label=\"stmt x -= 1;\"];\n     N11[label=\"expr x\"];\n-    N12[label=\"expr 2is\"];\n-    N13[label=\"expr x == 2is\"];\n+    N12[label=\"expr 2\"];\n+    N13[label=\"expr x == 2\"];\n     N14[label=\"expr break\"];\n     N15[label=\"(dummy_node)\"];\n     N16[label=\"stmt break ;\"];\n     N17[label=\"expr \\\"unreachable\\\"\"];\n     N18[label=\"stmt \\\"unreachable\\\";\"];\n     N19[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N20[label=\"expr if x == 2is { break ; \\\"unreachable\\\"; }\"];\n-    N21[label=\"block { x -= 1is; if x == 2is { break ; \\\"unreachable\\\"; } }\"];\n-    N22[label=\"block {\\l    let mut x = 12is;\\l    loop  { x -= 1is; if x == 2is { break ; \\\"unreachable\\\"; } }\\l}\\l\"];\n+    N20[label=\"expr if x == 2 { break ; \\\"unreachable\\\"; }\"];\n+    N21[label=\"block { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n+    N22[label=\"block { let mut x = 12; loop  { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "90b146340b6f5ddf53f674e239c0a55ce9f169f4", "filename": "src/test/run-make/graphviz-flowgraph/f12.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,9 +10,9 @@\n \n #[allow(unreachable_code)]\n pub fn expr_loop_12() {\n-    let mut x = 12is;\n+    let mut x = 12;\n     loop {\n-        x -= 1is;\n-        if x == 2is { break; \"unreachable\"; }\n+        x -= 1;\n+        if x == 2 { break; \"unreachable\"; }\n     }\n }"}, {"sha": "66250aa441e43f7493388469465aa663b9d7af60", "filename": "src/test/run-make/graphviz-flowgraph/f14.dot-expected.dot", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,20 +1,20 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 14is\"];\n+    N2[label=\"expr 14\"];\n     N3[label=\"local x\"];\n-    N4[label=\"stmt let x = 14is;\"];\n+    N4[label=\"stmt let x = 14;\"];\n     N5[label=\"expr x\"];\n-    N6[label=\"expr 1is\"];\n-    N7[label=\"expr x > 1is\"];\n+    N6[label=\"expr 1\"];\n+    N7[label=\"expr x > 1\"];\n     N8[label=\"expr return\"];\n     N9[label=\"(dummy_node)\"];\n     N10[label=\"stmt return;\"];\n     N11[label=\"expr \\\"unreachable\\\"\"];\n     N12[label=\"stmt \\\"unreachable\\\";\"];\n     N13[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N14[label=\"expr if x > 1is { return; \\\"unreachable\\\"; }\"];\n-    N15[label=\"block { let x = 14is; if x > 1is { return; \\\"unreachable\\\"; } }\"];\n+    N14[label=\"expr if x > 1 { return; \\\"unreachable\\\"; }\"];\n+    N15[label=\"block { let x = 14; if x > 1 { return; \\\"unreachable\\\"; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "98ff095c8317cf1fc49004f18fb3209fd4bfe0d3", "filename": "src/test/run-make/graphviz-flowgraph/f14.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,8 +10,8 @@\n \n #[allow(unreachable_code)]\n pub fn expr_ret_14() {\n-    let x = 14is;\n-    if x > 1is {\n+    let x = 14;\n+    if x > 1 {\n         return;\n         \"unreachable\";\n     }"}, {"sha": "4c94630f4e1fb88c6665a28efe4223bf6246476e", "filename": "src/test/run-make/graphviz-flowgraph/f15.dot-expected.dot", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,54 +1,54 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 15is\"];\n+    N2[label=\"expr 15\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 15is;\"];\n-    N5[label=\"expr 151is\"];\n+    N4[label=\"stmt let mut x = 15;\"];\n+    N5[label=\"expr 151\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 151is;\"];\n+    N7[label=\"stmt let mut y = 151;\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2is { break ; \\\"unreachable\\\"; }\\l                y -= 3is;\\l            }\\l        y -= 4is;\\l        x -= 5is;\\l    }\\l\"];\n+    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { break ; \\\"unreachable\\\"; }\\l                y -= 3;\\l            }\\l        y -= 4;\\l        x -= 5;\\l    }\\l\"];\n     N10[label=\"(dummy_node)\"];\n-    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2is { break ; \\\"unreachable\\\"; }\\l        y -= 3is;\\l    }\\l\"];\n+    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { break ; \\\"unreachable\\\"; }\\l        y -= 3;\\l    }\\l\"];\n     N12[label=\"expr x\"];\n-    N13[label=\"expr 1is\"];\n-    N14[label=\"expr x == 1is\"];\n+    N13[label=\"expr 1\"];\n+    N14[label=\"expr x == 1\"];\n     N15[label=\"expr break \\'outer\"];\n     N16[label=\"(dummy_node)\"];\n     N17[label=\"stmt break \\'outer ;\"];\n     N18[label=\"expr \\\"unreachable\\\"\"];\n     N19[label=\"stmt \\\"unreachable\\\";\"];\n     N20[label=\"block { break \\'outer ; \\\"unreachable\\\"; }\"];\n-    N21[label=\"expr if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\"];\n-    N22[label=\"stmt if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N21[label=\"expr if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N22[label=\"stmt if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\"];\n     N23[label=\"expr y\"];\n-    N24[label=\"expr 2is\"];\n-    N25[label=\"expr y >= 2is\"];\n+    N24[label=\"expr 2\"];\n+    N25[label=\"expr y >= 2\"];\n     N26[label=\"expr break\"];\n     N27[label=\"(dummy_node)\"];\n     N28[label=\"stmt break ;\"];\n     N29[label=\"expr \\\"unreachable\\\"\"];\n     N30[label=\"stmt \\\"unreachable\\\";\"];\n     N31[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N32[label=\"expr if y >= 2is { break ; \\\"unreachable\\\"; }\"];\n-    N33[label=\"stmt if y >= 2is { break ; \\\"unreachable\\\"; }\"];\n-    N34[label=\"expr 3is\"];\n+    N32[label=\"expr if y >= 2 { break ; \\\"unreachable\\\"; }\"];\n+    N33[label=\"stmt if y >= 2 { break ; \\\"unreachable\\\"; }\"];\n+    N34[label=\"expr 3\"];\n     N35[label=\"expr y\"];\n-    N36[label=\"expr y -= 3is\"];\n-    N37[label=\"stmt y -= 3is;\"];\n-    N38[label=\"block {\\l    if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2is { break ; \\\"unreachable\\\"; }\\l    y -= 3is;\\l}\\l\"];\n-    N39[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2is { break ; \\\"unreachable\\\"; }\\l        y -= 3is;\\l    }\\l\"];\n-    N40[label=\"expr 4is\"];\n+    N36[label=\"expr y -= 3\"];\n+    N37[label=\"stmt y -= 3;\"];\n+    N38[label=\"block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { break ; \\\"unreachable\\\"; }\\l    y -= 3;\\l}\\l\"];\n+    N39[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { break ; \\\"unreachable\\\"; }\\l        y -= 3;\\l    }\\l\"];\n+    N40[label=\"expr 4\"];\n     N41[label=\"expr y\"];\n-    N42[label=\"expr y -= 4is\"];\n-    N43[label=\"stmt y -= 4is;\"];\n-    N44[label=\"expr 5is\"];\n+    N42[label=\"expr y -= 4\"];\n+    N43[label=\"stmt y -= 4;\"];\n+    N44[label=\"expr 5\"];\n     N45[label=\"expr x\"];\n-    N46[label=\"expr x -= 5is\"];\n-    N47[label=\"stmt x -= 5is;\"];\n-    N48[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2is { break ; \\\"unreachable\\\"; }\\l            y -= 3is;\\l        }\\l    y -= 4is;\\l    x -= 5is;\\l}\\l\"];\n-    N49[label=\"block {\\l    let mut x = 15is;\\l    let mut y = 151is;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2is { break ; \\\"unreachable\\\"; }\\l                    y -= 3is;\\l                }\\l            y -= 4is;\\l            x -= 5is;\\l        }\\l}\\l\"];\n+    N46[label=\"expr x -= 5\"];\n+    N47[label=\"stmt x -= 5;\"];\n+    N48[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { break ; \\\"unreachable\\\"; }\\l            y -= 3;\\l        }\\l    y -= 4;\\l    x -= 5;\\l}\\l\"];\n+    N49[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { break ; \\\"unreachable\\\"; }\\l                    y -= 3;\\l                }\\l            y -= 4;\\l            x -= 5;\\l        }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "056458e5558de5d656f4ad9cb7f0cce00a371673", "filename": "src/test/run-make/graphviz-flowgraph/f15.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,21 +10,21 @@\n \n #[allow(unreachable_code)]\n pub fn expr_break_label_15() {\n-    let mut x = 15is;\n-    let mut y = 151is;\n+    let mut x = 15;\n+    let mut y = 151;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1is {\n+            if x == 1 {\n                 break 'outer;\n                 \"unreachable\";\n             }\n-            if y >= 2is {\n+            if y >= 2 {\n                 break;\n                 \"unreachable\";\n             }\n-            y -= 3is;\n+            y -= 3;\n         }\n-        y -= 4is;\n-        x -= 5is;\n+        y -= 4;\n+        x -= 5;\n     }\n }"}, {"sha": "d7d027cefb59bbd3dbae6cc96ca53a6e741bb7d6", "filename": "src/test/run-make/graphviz-flowgraph/f16.dot-expected.dot", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,57 +1,57 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 16is\"];\n+    N2[label=\"expr 16\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 16is;\"];\n-    N5[label=\"expr 16is\"];\n+    N4[label=\"stmt let mut x = 16;\"];\n+    N5[label=\"expr 16\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 16is;\"];\n+    N7[label=\"stmt let mut y = 16;\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 1is { break ; \\\"unreachable\\\"; }\\l                y -= 1is;\\l            }\\l        y -= 1is;\\l        x -= 1is;\\l    }\\l\"];\n+    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 1 { break ; \\\"unreachable\\\"; }\\l                y -= 1;\\l            }\\l        y -= 1;\\l        x -= 1;\\l    }\\l\"];\n     N10[label=\"(dummy_node)\"];\n-    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 1is { break ; \\\"unreachable\\\"; }\\l        y -= 1is;\\l    }\\l\"];\n+    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 1 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l    }\\l\"];\n     N12[label=\"expr x\"];\n-    N13[label=\"expr 1is\"];\n-    N14[label=\"expr x == 1is\"];\n+    N13[label=\"expr 1\"];\n+    N14[label=\"expr x == 1\"];\n     N15[label=\"expr continue \\'outer\"];\n     N16[label=\"(dummy_node)\"];\n     N17[label=\"stmt continue \\'outer ;\"];\n     N18[label=\"expr \\\"unreachable\\\"\"];\n     N19[label=\"stmt \\\"unreachable\\\";\"];\n     N20[label=\"block { continue \\'outer ; \\\"unreachable\\\"; }\"];\n-    N21[label=\"expr if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\"];\n-    N22[label=\"stmt if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N21[label=\"expr if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N22[label=\"stmt if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\"];\n     N23[label=\"expr y\"];\n-    N24[label=\"expr 1is\"];\n-    N25[label=\"expr y >= 1is\"];\n+    N24[label=\"expr 1\"];\n+    N25[label=\"expr y >= 1\"];\n     N26[label=\"expr break\"];\n     N27[label=\"(dummy_node)\"];\n     N28[label=\"stmt break ;\"];\n     N29[label=\"expr \\\"unreachable\\\"\"];\n     N30[label=\"stmt \\\"unreachable\\\";\"];\n     N31[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N32[label=\"expr if y >= 1is { break ; \\\"unreachable\\\"; }\"];\n-    N33[label=\"stmt if y >= 1is { break ; \\\"unreachable\\\"; }\"];\n-    N34[label=\"expr 1is\"];\n+    N32[label=\"expr if y >= 1 { break ; \\\"unreachable\\\"; }\"];\n+    N33[label=\"stmt if y >= 1 { break ; \\\"unreachable\\\"; }\"];\n+    N34[label=\"expr 1\"];\n     N35[label=\"expr y\"];\n-    N36[label=\"expr y -= 1is\"];\n-    N37[label=\"stmt y -= 1is;\"];\n-    N38[label=\"block {\\l    if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 1is { break ; \\\"unreachable\\\"; }\\l    y -= 1is;\\l}\\l\"];\n-    N39[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 1is { break ; \\\"unreachable\\\"; }\\l        y -= 1is;\\l    }\\l\"];\n-    N40[label=\"expr 1is\"];\n+    N36[label=\"expr y -= 1\"];\n+    N37[label=\"stmt y -= 1;\"];\n+    N38[label=\"block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 1 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l}\\l\"];\n+    N39[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 1 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l    }\\l\"];\n+    N40[label=\"expr 1\"];\n     N41[label=\"expr y\"];\n-    N42[label=\"expr y -= 1is\"];\n-    N43[label=\"stmt y -= 1is;\"];\n-    N44[label=\"expr 1is\"];\n+    N42[label=\"expr y -= 1\"];\n+    N43[label=\"stmt y -= 1;\"];\n+    N44[label=\"expr 1\"];\n     N45[label=\"expr x\"];\n-    N46[label=\"expr x -= 1is\"];\n-    N47[label=\"stmt x -= 1is;\"];\n-    N48[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 1is { break ; \\\"unreachable\\\"; }\\l            y -= 1is;\\l        }\\l    y -= 1is;\\l    x -= 1is;\\l}\\l\"];\n-    N49[label=\"stmt \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 1is { break ; \\\"unreachable\\\"; }\\l                y -= 1is;\\l            }\\l        y -= 1is;\\l        x -= 1is;\\l    }\\l\"];\n+    N46[label=\"expr x -= 1\"];\n+    N47[label=\"stmt x -= 1;\"];\n+    N48[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 1 { break ; \\\"unreachable\\\"; }\\l            y -= 1;\\l        }\\l    y -= 1;\\l    x -= 1;\\l}\\l\"];\n+    N49[label=\"stmt \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 1 { break ; \\\"unreachable\\\"; }\\l                y -= 1;\\l            }\\l        y -= 1;\\l        x -= 1;\\l    }\\l\"];\n     N50[label=\"expr \\\"unreachable\\\"\"];\n     N51[label=\"stmt \\\"unreachable\\\";\"];\n-    N52[label=\"block {\\l    let mut x = 16is;\\l    let mut y = 16is;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 1is { break ; \\\"unreachable\\\"; }\\l                    y -= 1is;\\l                }\\l            y -= 1is;\\l            x -= 1is;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N52[label=\"block {\\l    let mut x = 16;\\l    let mut y = 16;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 1 { break ; \\\"unreachable\\\"; }\\l                    y -= 1;\\l                }\\l            y -= 1;\\l            x -= 1;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "e225b0080e59abdb399cfe3f9129bdb57204e3ed", "filename": "src/test/run-make/graphviz-flowgraph/f16.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,22 +10,22 @@\n \n #[allow(unreachable_code)]\n pub fn expr_continue_label_16() {\n-    let mut x = 16is;\n-    let mut y = 16is;\n+    let mut x = 16;\n+    let mut y = 16;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1is {\n+            if x == 1 {\n                 continue 'outer;\n                 \"unreachable\";\n             }\n-            if y >= 1is {\n+            if y >= 1 {\n                 break;\n                 \"unreachable\";\n             }\n-            y -= 1is;\n+            y -= 1;\n         }\n-        y -= 1is;\n-        x -= 1is;\n+        y -= 1;\n+        x -= 1;\n     }\n     \"unreachable\";\n }"}, {"sha": "f87b70a71caea39c6c4ec18ad4f983ba214565af", "filename": "src/test/run-make/graphviz-flowgraph/f17.dot-expected.dot", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,13 +1,13 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 1is\"];\n-    N3[label=\"expr 7is\"];\n-    N4[label=\"expr 17is\"];\n-    N5[label=\"expr [1is, 7is, 17is]\"];\n+    N2[label=\"expr 1\"];\n+    N3[label=\"expr 7\"];\n+    N4[label=\"expr 17\"];\n+    N5[label=\"expr [1, 7, 17]\"];\n     N6[label=\"local _v\"];\n-    N7[label=\"stmt let _v = [1is, 7is, 17is];\"];\n-    N8[label=\"block { let _v = [1is, 7is, 17is]; }\"];\n+    N7[label=\"stmt let _v = [1, 7, 17];\"];\n+    N8[label=\"block { let _v = [1, 7, 17]; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "23f5bb8a1eb17b993fe026cc2c11f63f85f52fd8", "filename": "src/test/run-make/graphviz-flowgraph/f17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn expr_vec_17() {\n-    let _v = [1is, 7is, 17is];\n+    let _v = [1, 7, 17];\n }"}, {"sha": "796bf4910c9e2c6f1fb821b13b9564f294c0c54b", "filename": "src/test/run-make/graphviz-flowgraph/f21.dot-expected.dot", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,52 +1,52 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 15is\"];\n+    N2[label=\"expr 15\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 15is;\"];\n-    N5[label=\"expr 151is\"];\n+    N4[label=\"stmt let mut x = 15;\"];\n+    N5[label=\"expr 151\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 151is;\"];\n+    N7[label=\"stmt let mut y = 151;\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2is { return; \\\"unreachable\\\"; }\\l                y -= 3is;\\l                x -= 5is;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                y -= 3;\\l                x -= 5;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N10[label=\"(dummy_node)\"];\n-    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2is { return; \\\"unreachable\\\"; }\\l        y -= 3is;\\l        x -= 5is;\\l    }\\l\"];\n+    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l\"];\n     N12[label=\"expr x\"];\n-    N13[label=\"expr 1is\"];\n-    N14[label=\"expr x == 1is\"];\n+    N13[label=\"expr 1\"];\n+    N14[label=\"expr x == 1\"];\n     N15[label=\"expr break \\'outer\"];\n     N16[label=\"(dummy_node)\"];\n     N17[label=\"stmt break \\'outer ;\"];\n     N18[label=\"expr \\\"unreachable\\\"\"];\n     N19[label=\"stmt \\\"unreachable\\\";\"];\n     N20[label=\"block { break \\'outer ; \\\"unreachable\\\"; }\"];\n-    N21[label=\"expr if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\"];\n-    N22[label=\"stmt if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N21[label=\"expr if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N22[label=\"stmt if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\"];\n     N23[label=\"expr y\"];\n-    N24[label=\"expr 2is\"];\n-    N25[label=\"expr y >= 2is\"];\n+    N24[label=\"expr 2\"];\n+    N25[label=\"expr y >= 2\"];\n     N26[label=\"expr return\"];\n     N27[label=\"(dummy_node)\"];\n     N28[label=\"stmt return;\"];\n     N29[label=\"expr \\\"unreachable\\\"\"];\n     N30[label=\"stmt \\\"unreachable\\\";\"];\n     N31[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N32[label=\"expr if y >= 2is { return; \\\"unreachable\\\"; }\"];\n-    N33[label=\"stmt if y >= 2is { return; \\\"unreachable\\\"; }\"];\n-    N34[label=\"expr 3is\"];\n+    N32[label=\"expr if y >= 2 { return; \\\"unreachable\\\"; }\"];\n+    N33[label=\"stmt if y >= 2 { return; \\\"unreachable\\\"; }\"];\n+    N34[label=\"expr 3\"];\n     N35[label=\"expr y\"];\n-    N36[label=\"expr y -= 3is\"];\n-    N37[label=\"stmt y -= 3is;\"];\n-    N38[label=\"expr 5is\"];\n+    N36[label=\"expr y -= 3\"];\n+    N37[label=\"stmt y -= 3;\"];\n+    N38[label=\"expr 5\"];\n     N39[label=\"expr x\"];\n-    N40[label=\"expr x -= 5is\"];\n-    N41[label=\"stmt x -= 5is;\"];\n-    N42[label=\"block {\\l    if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2is { return; \\\"unreachable\\\"; }\\l    y -= 3is;\\l    x -= 5is;\\l}\\l\"];\n-    N43[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2is { return; \\\"unreachable\\\"; }\\l        y -= 3is;\\l        x -= 5is;\\l    }\\l\"];\n+    N40[label=\"expr x -= 5\"];\n+    N41[label=\"stmt x -= 5;\"];\n+    N42[label=\"block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    y -= 3;\\l    x -= 5;\\l}\\l\"];\n+    N43[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l\"];\n     N44[label=\"expr \\\"unreachable\\\"\"];\n     N45[label=\"stmt \\\"unreachable\\\";\"];\n-    N46[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2is { return; \\\"unreachable\\\"; }\\l            y -= 3is;\\l            x -= 5is;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n-    N47[label=\"block {\\l    let mut x = 15is;\\l    let mut y = 151is;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1is { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2is { return; \\\"unreachable\\\"; }\\l                    y -= 3is;\\l                    x -= 5is;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l}\\l\"];\n+    N46[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            y -= 3;\\l            x -= 5;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N47[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { return; \\\"unreachable\\\"; }\\l                    y -= 3;\\l                    x -= 5;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "70083ed8312cbbb181e5d5652f8150646e496dc3", "filename": "src/test/run-make/graphviz-flowgraph/f21.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,20 +10,20 @@\n \n #[allow(unreachable_code)]\n pub fn expr_break_label_21() {\n-    let mut x = 15is;\n-    let mut y = 151is;\n+    let mut x = 15;\n+    let mut y = 151;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1is {\n+            if x == 1 {\n                 break 'outer;\n                 \"unreachable\";\n             }\n-            if y >= 2is {\n+            if y >= 2 {\n                 return;\n                 \"unreachable\";\n             }\n-            y -= 3is;\n-            x -= 5is;\n+            y -= 3;\n+            x -= 5;\n         }\n         \"unreachable\";\n     }"}, {"sha": "9e8049f07415ac9dc34e55500b4f5037f0ef1be9", "filename": "src/test/run-make/graphviz-flowgraph/f22.dot-expected.dot", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,55 +1,55 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 15is\"];\n+    N2[label=\"expr 15\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 15is;\"];\n-    N5[label=\"expr 151is\"];\n+    N4[label=\"stmt let mut x = 15;\"];\n+    N5[label=\"expr 151\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 151is;\"];\n+    N7[label=\"stmt let mut y = 151;\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2is { return; \\\"unreachable\\\"; }\\l                x -= 1is;\\l                y -= 3is;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N9[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                x -= 1;\\l                y -= 3;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N10[label=\"(dummy_node)\"];\n-    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2is { return; \\\"unreachable\\\"; }\\l        x -= 1is;\\l        y -= 3is;\\l    }\\l\"];\n+    N11[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l\"];\n     N12[label=\"expr x\"];\n-    N13[label=\"expr 1is\"];\n-    N14[label=\"expr x == 1is\"];\n+    N13[label=\"expr 1\"];\n+    N14[label=\"expr x == 1\"];\n     N15[label=\"expr continue \\'outer\"];\n     N16[label=\"(dummy_node)\"];\n     N17[label=\"stmt continue \\'outer ;\"];\n     N18[label=\"expr \\\"unreachable\\\"\"];\n     N19[label=\"stmt \\\"unreachable\\\";\"];\n     N20[label=\"block { continue \\'outer ; \\\"unreachable\\\"; }\"];\n-    N21[label=\"expr if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\"];\n-    N22[label=\"stmt if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N21[label=\"expr if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N22[label=\"stmt if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\"];\n     N23[label=\"expr y\"];\n-    N24[label=\"expr 2is\"];\n-    N25[label=\"expr y >= 2is\"];\n+    N24[label=\"expr 2\"];\n+    N25[label=\"expr y >= 2\"];\n     N26[label=\"expr return\"];\n     N27[label=\"(dummy_node)\"];\n     N28[label=\"stmt return;\"];\n     N29[label=\"expr \\\"unreachable\\\"\"];\n     N30[label=\"stmt \\\"unreachable\\\";\"];\n     N31[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N32[label=\"expr if y >= 2is { return; \\\"unreachable\\\"; }\"];\n-    N33[label=\"stmt if y >= 2is { return; \\\"unreachable\\\"; }\"];\n-    N34[label=\"expr 1is\"];\n+    N32[label=\"expr if y >= 2 { return; \\\"unreachable\\\"; }\"];\n+    N33[label=\"stmt if y >= 2 { return; \\\"unreachable\\\"; }\"];\n+    N34[label=\"expr 1\"];\n     N35[label=\"expr x\"];\n-    N36[label=\"expr x -= 1is\"];\n-    N37[label=\"stmt x -= 1is;\"];\n-    N38[label=\"expr 3is\"];\n+    N36[label=\"expr x -= 1\"];\n+    N37[label=\"stmt x -= 1;\"];\n+    N38[label=\"expr 3\"];\n     N39[label=\"expr y\"];\n-    N40[label=\"expr y -= 3is\"];\n-    N41[label=\"stmt y -= 3is;\"];\n-    N42[label=\"block {\\l    if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2is { return; \\\"unreachable\\\"; }\\l    x -= 1is;\\l    y -= 3is;\\l}\\l\"];\n-    N43[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2is { return; \\\"unreachable\\\"; }\\l        x -= 1is;\\l        y -= 3is;\\l    }\\l\"];\n+    N40[label=\"expr y -= 3\"];\n+    N41[label=\"stmt y -= 3;\"];\n+    N42[label=\"block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    x -= 1;\\l    y -= 3;\\l}\\l\"];\n+    N43[label=\"stmt \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l\"];\n     N44[label=\"expr \\\"unreachable\\\"\"];\n     N45[label=\"stmt \\\"unreachable\\\";\"];\n-    N46[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2is { return; \\\"unreachable\\\"; }\\l            x -= 1is;\\l            y -= 3is;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n-    N47[label=\"stmt \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2is { return; \\\"unreachable\\\"; }\\l                x -= 1is;\\l                y -= 3is;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N46[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            x -= 1;\\l            y -= 3;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N47[label=\"stmt \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                x -= 1;\\l                y -= 3;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N48[label=\"expr \\\"unreachable\\\"\"];\n     N49[label=\"stmt \\\"unreachable\\\";\"];\n-    N50[label=\"block {\\l    let mut x = 15is;\\l    let mut y = 151is;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1is { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2is { return; \\\"unreachable\\\"; }\\l                    x -= 1is;\\l                    y -= 3is;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N50[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { return; \\\"unreachable\\\"; }\\l                    x -= 1;\\l                    y -= 3;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "b35aac9ec422e924e3f4d167ae0ba0ab080de24b", "filename": "src/test/run-make/graphviz-flowgraph/f22.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,20 +10,20 @@\n \n #[allow(unreachable_code)]\n pub fn expr_break_label_21() {\n-    let mut x = 15is;\n-    let mut y = 151is;\n+    let mut x = 15;\n+    let mut y = 151;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1is {\n+            if x == 1 {\n                 continue 'outer;\n                 \"unreachable\";\n             }\n-            if y >= 2is {\n+            if y >= 2 {\n                 return;\n                 \"unreachable\";\n             }\n-            x -= 1is;\n-            y -= 3is;\n+            x -= 1;\n+            y -= 3;\n         }\n         \"unreachable\";\n     }"}, {"sha": "b3f285049c57637981014dfa4cd6c1d2ffd6e990", "filename": "src/test/run-make/graphviz-flowgraph/f23.dot-expected.dot", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,57 +1,57 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 23is\"];\n+    N2[label=\"expr 23\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 23is;\"];\n-    N5[label=\"expr 23is\"];\n+    N4[label=\"stmt let mut x = 23;\"];\n+    N5[label=\"expr 23\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 23is;\"];\n-    N8[label=\"expr 23is\"];\n+    N7[label=\"stmt let mut y = 23;\"];\n+    N8[label=\"expr 23\"];\n     N9[label=\"local mut z\"];\n-    N10[label=\"stmt let mut z = 23is;\"];\n+    N10[label=\"stmt let mut z = 23;\"];\n     N11[label=\"(dummy_node)\"];\n     N12[label=\"expr x\"];\n-    N13[label=\"expr 0is\"];\n-    N14[label=\"expr x > 0is\"];\n-    N15[label=\"expr while x > 0is {\\l    x -= 1is;\\l    while y > 0is {\\l        y -= 1is;\\l        while z > 0is { z -= 1is; }\\l        if x > 10is { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n-    N16[label=\"expr 1is\"];\n+    N13[label=\"expr 0\"];\n+    N14[label=\"expr x > 0\"];\n+    N15[label=\"expr while x > 0 {\\l    x -= 1;\\l    while y > 0 {\\l        y -= 1;\\l        while z > 0 { z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N16[label=\"expr 1\"];\n     N17[label=\"expr x\"];\n-    N18[label=\"expr x -= 1is\"];\n-    N19[label=\"stmt x -= 1is;\"];\n+    N18[label=\"expr x -= 1\"];\n+    N19[label=\"stmt x -= 1;\"];\n     N20[label=\"(dummy_node)\"];\n     N21[label=\"expr y\"];\n-    N22[label=\"expr 0is\"];\n-    N23[label=\"expr y > 0is\"];\n-    N24[label=\"expr while y > 0is {\\l    y -= 1is;\\l    while z > 0is { z -= 1is; }\\l    if x > 10is { return; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N25[label=\"expr 1is\"];\n+    N22[label=\"expr 0\"];\n+    N23[label=\"expr y > 0\"];\n+    N24[label=\"expr while y > 0 {\\l    y -= 1;\\l    while z > 0 { z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N25[label=\"expr 1\"];\n     N26[label=\"expr y\"];\n-    N27[label=\"expr y -= 1is\"];\n-    N28[label=\"stmt y -= 1is;\"];\n+    N27[label=\"expr y -= 1\"];\n+    N28[label=\"stmt y -= 1;\"];\n     N29[label=\"(dummy_node)\"];\n     N30[label=\"expr z\"];\n-    N31[label=\"expr 0is\"];\n-    N32[label=\"expr z > 0is\"];\n-    N33[label=\"expr while z > 0is { z -= 1is; }\"];\n-    N34[label=\"expr 1is\"];\n+    N31[label=\"expr 0\"];\n+    N32[label=\"expr z > 0\"];\n+    N33[label=\"expr while z > 0 { z -= 1; }\"];\n+    N34[label=\"expr 1\"];\n     N35[label=\"expr z\"];\n-    N36[label=\"expr z -= 1is\"];\n-    N37[label=\"stmt z -= 1is;\"];\n-    N38[label=\"block { z -= 1is; }\"];\n-    N39[label=\"stmt while z > 0is { z -= 1is; }\"];\n+    N36[label=\"expr z -= 1\"];\n+    N37[label=\"stmt z -= 1;\"];\n+    N38[label=\"block { z -= 1; }\"];\n+    N39[label=\"stmt while z > 0 { z -= 1; }\"];\n     N40[label=\"expr x\"];\n-    N41[label=\"expr 10is\"];\n-    N42[label=\"expr x > 10is\"];\n+    N41[label=\"expr 10\"];\n+    N42[label=\"expr x > 10\"];\n     N43[label=\"expr return\"];\n     N44[label=\"(dummy_node)\"];\n     N45[label=\"stmt return;\"];\n     N46[label=\"expr \\\"unreachable\\\"\"];\n     N47[label=\"stmt \\\"unreachable\\\";\"];\n     N48[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N49[label=\"expr if x > 10is { return; \\\"unreachable\\\"; }\"];\n-    N50[label=\"block {\\l    y -= 1is;\\l    while z > 0is { z -= 1is; }\\l    if x > 10is { return; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N51[label=\"block {\\l    x -= 1is;\\l    while y > 0is {\\l        y -= 1is;\\l        while z > 0is { z -= 1is; }\\l        if x > 10is { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n-    N52[label=\"block {\\l    let mut x = 23is;\\l    let mut y = 23is;\\l    let mut z = 23is;\\l    while x > 0is {\\l        x -= 1is;\\l        while y > 0is {\\l            y -= 1is;\\l            while z > 0is { z -= 1is; }\\l            if x > 10is { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n+    N49[label=\"expr if x > 10 { return; \\\"unreachable\\\"; }\"];\n+    N50[label=\"block { y -= 1; while z > 0 { z -= 1; } if x > 10 { return; \\\"unreachable\\\"; } }\"];\n+    N51[label=\"block {\\l    x -= 1;\\l    while y > 0 {\\l        y -= 1;\\l        while z > 0 { z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N52[label=\"block {\\l    let mut x = 23;\\l    let mut y = 23;\\l    let mut z = 23;\\l    while x > 0 {\\l        x -= 1;\\l        while y > 0 {\\l            y -= 1;\\l            while z > 0 { z -= 1; }\\l            if x > 10 { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "52341a3fbd4080fde2487a85d1bc52f25ccb3f19", "filename": "src/test/run-make/graphviz-flowgraph/f23.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,19 +10,19 @@\n \n #[allow(unreachable_code)]\n pub fn expr_while_23() {\n-    let mut x = 23is;\n-    let mut y = 23is;\n-    let mut z = 23is;\n+    let mut x = 23;\n+    let mut y = 23;\n+    let mut z = 23;\n \n-    while x > 0is {\n-        x -= 1is;\n+    while x > 0 {\n+        x -= 1;\n \n-        while y > 0is {\n-            y -= 1is;\n+        while y > 0 {\n+            y -= 1;\n \n-            while z > 0is { z -= 1is; }\n+            while z > 0 { z -= 1; }\n \n-            if x > 10is {\n+            if x > 10 {\n                 return;\n                 \"unreachable\";\n             }"}, {"sha": "43b3295bf3be9a0fab3f4bc749328f3152957de2", "filename": "src/test/run-make/graphviz-flowgraph/f24.dot-expected.dot", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,81 +1,81 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 24is\"];\n+    N2[label=\"expr 24\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 24is;\"];\n-    N5[label=\"expr 24is\"];\n+    N4[label=\"stmt let mut x = 24;\"];\n+    N5[label=\"expr 24\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 24is;\"];\n-    N8[label=\"expr 24is\"];\n+    N7[label=\"stmt let mut y = 24;\"];\n+    N8[label=\"expr 24\"];\n     N9[label=\"local mut z\"];\n-    N10[label=\"stmt let mut z = 24is;\"];\n+    N10[label=\"stmt let mut z = 24;\"];\n     N11[label=\"(dummy_node)\"];\n-    N12[label=\"expr loop  {\\l    if x == 0is { break ; \\\"unreachable\\\"; }\\l    x -= 1is;\\l    loop  {\\l        if y == 0is { break ; \\\"unreachable\\\"; }\\l        y -= 1is;\\l        loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l        if x > 10is { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N12[label=\"expr loop  {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n     N13[label=\"expr x\"];\n-    N14[label=\"expr 0is\"];\n-    N15[label=\"expr x == 0is\"];\n+    N14[label=\"expr 0\"];\n+    N15[label=\"expr x == 0\"];\n     N16[label=\"expr break\"];\n     N17[label=\"(dummy_node)\"];\n     N18[label=\"stmt break ;\"];\n     N19[label=\"expr \\\"unreachable\\\"\"];\n     N20[label=\"stmt \\\"unreachable\\\";\"];\n     N21[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N22[label=\"expr if x == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N23[label=\"stmt if x == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N24[label=\"expr 1is\"];\n+    N22[label=\"expr if x == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N23[label=\"stmt if x == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N24[label=\"expr 1\"];\n     N25[label=\"expr x\"];\n-    N26[label=\"expr x -= 1is\"];\n-    N27[label=\"stmt x -= 1is;\"];\n+    N26[label=\"expr x -= 1\"];\n+    N27[label=\"stmt x -= 1;\"];\n     N28[label=\"(dummy_node)\"];\n-    N29[label=\"expr loop  {\\l    if y == 0is { break ; \\\"unreachable\\\"; }\\l    y -= 1is;\\l    loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l    if x > 10is { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N29[label=\"expr loop  {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n     N30[label=\"expr y\"];\n-    N31[label=\"expr 0is\"];\n-    N32[label=\"expr y == 0is\"];\n+    N31[label=\"expr 0\"];\n+    N32[label=\"expr y == 0\"];\n     N33[label=\"expr break\"];\n     N34[label=\"(dummy_node)\"];\n     N35[label=\"stmt break ;\"];\n     N36[label=\"expr \\\"unreachable\\\"\"];\n     N37[label=\"stmt \\\"unreachable\\\";\"];\n     N38[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N39[label=\"expr if y == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N40[label=\"stmt if y == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N41[label=\"expr 1is\"];\n+    N39[label=\"expr if y == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N40[label=\"stmt if y == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N41[label=\"expr 1\"];\n     N42[label=\"expr y\"];\n-    N43[label=\"expr y -= 1is\"];\n-    N44[label=\"stmt y -= 1is;\"];\n+    N43[label=\"expr y -= 1\"];\n+    N44[label=\"stmt y -= 1;\"];\n     N45[label=\"(dummy_node)\"];\n-    N46[label=\"expr loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\"];\n+    N46[label=\"expr loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n     N47[label=\"expr z\"];\n-    N48[label=\"expr 0is\"];\n-    N49[label=\"expr z == 0is\"];\n+    N48[label=\"expr 0\"];\n+    N49[label=\"expr z == 0\"];\n     N50[label=\"expr break\"];\n     N51[label=\"(dummy_node)\"];\n     N52[label=\"stmt break ;\"];\n     N53[label=\"expr \\\"unreachable\\\"\"];\n     N54[label=\"stmt \\\"unreachable\\\";\"];\n     N55[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N56[label=\"expr if z == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N57[label=\"stmt if z == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N58[label=\"expr 1is\"];\n+    N56[label=\"expr if z == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N57[label=\"stmt if z == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N58[label=\"expr 1\"];\n     N59[label=\"expr z\"];\n-    N60[label=\"expr z -= 1is\"];\n-    N61[label=\"stmt z -= 1is;\"];\n-    N62[label=\"block { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\"];\n-    N63[label=\"stmt loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\"];\n+    N60[label=\"expr z -= 1\"];\n+    N61[label=\"stmt z -= 1;\"];\n+    N62[label=\"block { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N63[label=\"stmt loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n     N64[label=\"expr x\"];\n-    N65[label=\"expr 10is\"];\n-    N66[label=\"expr x > 10is\"];\n+    N65[label=\"expr 10\"];\n+    N66[label=\"expr x > 10\"];\n     N67[label=\"expr return\"];\n     N68[label=\"(dummy_node)\"];\n     N69[label=\"stmt return;\"];\n     N70[label=\"expr \\\"unreachable\\\"\"];\n     N71[label=\"stmt \\\"unreachable\\\";\"];\n     N72[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N73[label=\"expr if x > 10is { return; \\\"unreachable\\\"; }\"];\n-    N74[label=\"block {\\l    if y == 0is { break ; \\\"unreachable\\\"; }\\l    y -= 1is;\\l    loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l    if x > 10is { return; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N75[label=\"block {\\l    if x == 0is { break ; \\\"unreachable\\\"; }\\l    x -= 1is;\\l    loop  {\\l        if y == 0is { break ; \\\"unreachable\\\"; }\\l        y -= 1is;\\l        loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l        if x > 10is { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n-    N76[label=\"block {\\l    let mut x = 24is;\\l    let mut y = 24is;\\l    let mut z = 24is;\\l    loop  {\\l        if x == 0is { break ; \\\"unreachable\\\"; }\\l        x -= 1is;\\l        loop  {\\l            if y == 0is { break ; \\\"unreachable\\\"; }\\l            y -= 1is;\\l            loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l            if x > 10is { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n+    N73[label=\"expr if x > 10 { return; \\\"unreachable\\\"; }\"];\n+    N74[label=\"block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N75[label=\"block {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N76[label=\"block {\\l    let mut x = 24;\\l    let mut y = 24;\\l    let mut z = 24;\\l    loop  {\\l        if x == 0 { break ; \\\"unreachable\\\"; }\\l        x -= 1;\\l        loop  {\\l            if y == 0 { break ; \\\"unreachable\\\"; }\\l            y -= 1;\\l            loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l            if x > 10 { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "f796d660a185634d3cb033241752fefe39eb6e3c", "filename": "src/test/run-make/graphviz-flowgraph/f24.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,24 +10,24 @@\n \n #[allow(unreachable_code)]\n pub fn expr_while_24() {\n-    let mut x = 24is;\n-    let mut y = 24is;\n-    let mut z = 24is;\n+    let mut x = 24;\n+    let mut y = 24;\n+    let mut z = 24;\n \n     loop {\n-        if x == 0is { break; \"unreachable\"; }\n-        x -= 1is;\n+        if x == 0 { break; \"unreachable\"; }\n+        x -= 1;\n \n         loop {\n-            if y == 0is { break; \"unreachable\"; }\n-            y -= 1is;\n+            if y == 0 { break; \"unreachable\"; }\n+            y -= 1;\n \n             loop {\n-                if z == 0is { break; \"unreachable\"; }\n-                z -= 1is;\n+                if z == 0 { break; \"unreachable\"; }\n+                z -= 1;\n             }\n \n-            if x > 10is {\n+            if x > 10 {\n                 return;\n                 \"unreachable\";\n             }"}, {"sha": "50fdffb781d1124fbac2da7840ba411a5b5dcac1", "filename": "src/test/run-make/graphviz-flowgraph/f25.dot-expected.dot", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.dot-expected.dot?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -1,81 +1,81 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 25is\"];\n+    N2[label=\"expr 25\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"stmt let mut x = 25is;\"];\n-    N5[label=\"expr 25is\"];\n+    N4[label=\"stmt let mut x = 25;\"];\n+    N5[label=\"expr 25\"];\n     N6[label=\"local mut y\"];\n-    N7[label=\"stmt let mut y = 25is;\"];\n-    N8[label=\"expr 25is\"];\n+    N7[label=\"stmt let mut y = 25;\"];\n+    N8[label=\"expr 25\"];\n     N9[label=\"local mut z\"];\n-    N10[label=\"stmt let mut z = 25is;\"];\n+    N10[label=\"stmt let mut z = 25;\"];\n     N11[label=\"(dummy_node)\"];\n-    N12[label=\"expr \\'a:\\l    loop  {\\l        if x == 0is { break ; \\\"unreachable\\\"; }\\l        x -= 1is;\\l        \\'a:\\l            loop  {\\l                if y == 0is { break ; \\\"unreachable\\\"; }\\l                y -= 1is;\\l                \\'a: loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l                if x > 10is { continue \\'a ; \\\"unreachable\\\"; }\\l            }\\l    }\\l\"];\n+    N12[label=\"expr \\'a:\\l    loop  {\\l        if x == 0 { break ; \\\"unreachable\\\"; }\\l        x -= 1;\\l        \\'a:\\l            loop  {\\l                if y == 0 { break ; \\\"unreachable\\\"; }\\l                y -= 1;\\l                \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l                if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l            }\\l    }\\l\"];\n     N13[label=\"expr x\"];\n-    N14[label=\"expr 0is\"];\n-    N15[label=\"expr x == 0is\"];\n+    N14[label=\"expr 0\"];\n+    N15[label=\"expr x == 0\"];\n     N16[label=\"expr break\"];\n     N17[label=\"(dummy_node)\"];\n     N18[label=\"stmt break ;\"];\n     N19[label=\"expr \\\"unreachable\\\"\"];\n     N20[label=\"stmt \\\"unreachable\\\";\"];\n     N21[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N22[label=\"expr if x == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N23[label=\"stmt if x == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N24[label=\"expr 1is\"];\n+    N22[label=\"expr if x == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N23[label=\"stmt if x == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N24[label=\"expr 1\"];\n     N25[label=\"expr x\"];\n-    N26[label=\"expr x -= 1is\"];\n-    N27[label=\"stmt x -= 1is;\"];\n+    N26[label=\"expr x -= 1\"];\n+    N27[label=\"stmt x -= 1;\"];\n     N28[label=\"(dummy_node)\"];\n-    N29[label=\"expr \\'a:\\l    loop  {\\l        if y == 0is { break ; \\\"unreachable\\\"; }\\l        y -= 1is;\\l        \\'a: loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l        if x > 10is { continue \\'a ; \\\"unreachable\\\"; }\\l    }\\l\"];\n+    N29[label=\"expr \\'a:\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l    }\\l\"];\n     N30[label=\"expr y\"];\n-    N31[label=\"expr 0is\"];\n-    N32[label=\"expr y == 0is\"];\n+    N31[label=\"expr 0\"];\n+    N32[label=\"expr y == 0\"];\n     N33[label=\"expr break\"];\n     N34[label=\"(dummy_node)\"];\n     N35[label=\"stmt break ;\"];\n     N36[label=\"expr \\\"unreachable\\\"\"];\n     N37[label=\"stmt \\\"unreachable\\\";\"];\n     N38[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N39[label=\"expr if y == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N40[label=\"stmt if y == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N41[label=\"expr 1is\"];\n+    N39[label=\"expr if y == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N40[label=\"stmt if y == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N41[label=\"expr 1\"];\n     N42[label=\"expr y\"];\n-    N43[label=\"expr y -= 1is\"];\n-    N44[label=\"stmt y -= 1is;\"];\n+    N43[label=\"expr y -= 1\"];\n+    N44[label=\"stmt y -= 1;\"];\n     N45[label=\"(dummy_node)\"];\n-    N46[label=\"expr \\'a: loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\"];\n+    N46[label=\"expr \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n     N47[label=\"expr z\"];\n-    N48[label=\"expr 0is\"];\n-    N49[label=\"expr z == 0is\"];\n+    N48[label=\"expr 0\"];\n+    N49[label=\"expr z == 0\"];\n     N50[label=\"expr break\"];\n     N51[label=\"(dummy_node)\"];\n     N52[label=\"stmt break ;\"];\n     N53[label=\"expr \\\"unreachable\\\"\"];\n     N54[label=\"stmt \\\"unreachable\\\";\"];\n     N55[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N56[label=\"expr if z == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N57[label=\"stmt if z == 0is { break ; \\\"unreachable\\\"; }\"];\n-    N58[label=\"expr 1is\"];\n+    N56[label=\"expr if z == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N57[label=\"stmt if z == 0 { break ; \\\"unreachable\\\"; }\"];\n+    N58[label=\"expr 1\"];\n     N59[label=\"expr z\"];\n-    N60[label=\"expr z -= 1is\"];\n-    N61[label=\"stmt z -= 1is;\"];\n-    N62[label=\"block { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\"];\n-    N63[label=\"stmt \\'a: loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\"];\n+    N60[label=\"expr z -= 1\"];\n+    N61[label=\"stmt z -= 1;\"];\n+    N62[label=\"block { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N63[label=\"stmt \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n     N64[label=\"expr x\"];\n-    N65[label=\"expr 10is\"];\n-    N66[label=\"expr x > 10is\"];\n+    N65[label=\"expr 10\"];\n+    N66[label=\"expr x > 10\"];\n     N67[label=\"expr continue \\'a\"];\n     N68[label=\"(dummy_node)\"];\n     N69[label=\"stmt continue \\'a ;\"];\n     N70[label=\"expr \\\"unreachable\\\"\"];\n     N71[label=\"stmt \\\"unreachable\\\";\"];\n     N72[label=\"block { continue \\'a ; \\\"unreachable\\\"; }\"];\n-    N73[label=\"expr if x > 10is { continue \\'a ; \\\"unreachable\\\"; }\"];\n-    N74[label=\"block {\\l    if y == 0is { break ; \\\"unreachable\\\"; }\\l    y -= 1is;\\l    \\'a: loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l    if x > 10is { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N75[label=\"block {\\l    if x == 0is { break ; \\\"unreachable\\\"; }\\l    x -= 1is;\\l    \\'a:\\l        loop  {\\l            if y == 0is { break ; \\\"unreachable\\\"; }\\l            y -= 1is;\\l            \\'a: loop  { if z == 0is { break ; \\\"unreachable\\\"; } z -= 1is; }\\l            if x > 10is { continue \\'a ; \\\"unreachable\\\"; }\\l        }\\l}\\l\"];\n-    N76[label=\"block {\\l    let mut x = 25is;\\l    let mut y = 25is;\\l    let mut z = 25is;\\l    \\'a:\\l        loop  {\\l            if x == 0is { break ; \\\"unreachable\\\"; }\\l            x -= 1is;\\l            \\'a:\\l                loop  {\\l                    if y == 0is { break ; \\\"unreachable\\\"; }\\l                    y -= 1is;\\l                    \\'a:\\l                        loop  {\\l                            if z == 0is { break ; \\\"unreachable\\\"; }\\l                            z -= 1is;\\l                        }\\l                    if x > 10is { continue \\'a ; \\\"unreachable\\\"; }\\l                }\\l        }\\l}\\l\"];\n+    N73[label=\"expr if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\"];\n+    N74[label=\"block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N75[label=\"block {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    \\'a:\\l        loop  {\\l            if y == 0 { break ; \\\"unreachable\\\"; }\\l            y -= 1;\\l            \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l            if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l        }\\l}\\l\"];\n+    N76[label=\"block {\\l    let mut x = 25;\\l    let mut y = 25;\\l    let mut z = 25;\\l    \\'a:\\l        loop  {\\l            if x == 0 { break ; \\\"unreachable\\\"; }\\l            x -= 1;\\l            \\'a:\\l                loop  {\\l                    if y == 0 { break ; \\\"unreachable\\\"; }\\l                    y -= 1;\\l                    \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l                    if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l                }\\l        }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "2ee2e48fd10e0d2a451644cc6575623f574184e2", "filename": "src/test/run-make/graphviz-flowgraph/f25.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -10,24 +10,24 @@\n \n #[allow(unreachable_code)]\n pub fn expr_while_25() {\n-    let mut x = 25is;\n-    let mut y = 25is;\n-    let mut z = 25is;\n+    let mut x = 25;\n+    let mut y = 25;\n+    let mut z = 25;\n \n     'a: loop {\n-        if x == 0is { break; \"unreachable\"; }\n-        x -= 1is;\n+        if x == 0 { break; \"unreachable\"; }\n+        x -= 1;\n \n         'a: loop {\n-            if y == 0is { break; \"unreachable\"; }\n-            y -= 1is;\n+            if y == 0 { break; \"unreachable\"; }\n+            y -= 1;\n \n             'a: loop {\n-                if z == 0is { break; \"unreachable\"; }\n-                z -= 1is;\n+                if z == 0 { break; \"unreachable\"; }\n+                z -= 1;\n             }\n \n-            if x > 10is {\n+            if x > 10 {\n                 continue 'a;\n                 \"unreachable\";\n             }"}, {"sha": "cb3b3d9af38b2064500c0726aebfab1dd59b3239", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -50,7 +50,7 @@ fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n \n     myflate::deflate_bytes(&[]);\n \n-    let x = (3is, 4us);\n+    let x = (3, 4us);\n     let y = x.1;\n }\n "}, {"sha": "ce628668996b7566ab68a40174fc1fc4e045b9ba", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -77,8 +77,8 @@ pub fn main() {\n     t!(format!(\"{:X}\", B), \"adios\");\n     t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n     t!(format!(\"{1} {0}\", 0, 1), \"1 0\");\n-    t!(format!(\"{foo} {bar}\", foo=0, bar=1is), \"0 1\");\n-    t!(format!(\"{foo} {1} {bar} {0}\", 0is, 1is, foo=2is, bar=3is), \"2 1 3 0\");\n+    t!(format!(\"{foo} {bar}\", foo=0, bar=1), \"0 1\");\n+    t!(format!(\"{foo} {1} {bar} {0}\", 0, 1, foo=2, bar=3), \"2 1 3 0\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n     t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n     t!(format!(\"{}\", 5 + 5), \"10\");"}, {"sha": "95562d75c3ea476ab3e6e8f2972b1a056095d48e", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     let _t = Thread::spawn(move|| { helper(rx) });\n     let (snd, rcv) = channel::<int>();\n     for _ in 1..100000 {\n-        snd.send(1i).unwrap();\n+        snd.send(1).unwrap();\n         let (tx2, rx2) = channel();\n         tx.send(tx2).unwrap();\n         select! {"}, {"sha": "fec4a806b43890b24b4a7897acd785849c922e6e", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a43f3864e394959a7d3c3efae6da85bdc59c71/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=b4a43f3864e394959a7d3c3efae6da85bdc59c71", "patch": "@@ -29,14 +29,14 @@ pub fn main() {\n \n // uints\n     // num\n-    assert_eq!(15u.add(6us), 21us);\n+    assert_eq!(15us.add(6us), 21us);\n     assert_eq!(15u8.add(6u8), 21u8);\n     assert_eq!(15u16.add(6u16), 21u16);\n     assert_eq!(15u32.add(6u32), 21u32);\n     assert_eq!(15u64.add(6u64), 21u64);\n \n // floats\n     // num\n-    assert_eq!(10f32.to_int().unwrap(), 10);\n-    assert_eq!(10f64.to_int().unwrap(), 10);\n+    assert_eq!(10f32.to_i32().unwrap(), 10);\n+    assert_eq!(10f64.to_i32().unwrap(), 10);\n }"}]}