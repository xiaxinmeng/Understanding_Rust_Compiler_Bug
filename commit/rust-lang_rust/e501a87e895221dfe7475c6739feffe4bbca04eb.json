{"sha": "e501a87e895221dfe7475c6739feffe4bbca04eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MDFhODdlODk1MjIxZGZlNzQ3NWM2NzM5ZmVmZmU0YmJjYTA0ZWI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-02T20:47:41Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-04T23:36:24Z"}, "message": "Bootstrap changes", "tree": {"sha": "37bbca32d36c6234eedf8009653533d503821053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37bbca32d36c6234eedf8009653533d503821053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e501a87e895221dfe7475c6739feffe4bbca04eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e501a87e895221dfe7475c6739feffe4bbca04eb", "html_url": "https://github.com/rust-lang/rust/commit/e501a87e895221dfe7475c6739feffe4bbca04eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e501a87e895221dfe7475c6739feffe4bbca04eb/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c1c8d4e0f01c869f8381e70fbd4d103534493f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c1c8d4e0f01c869f8381e70fbd4d103534493f", "html_url": "https://github.com/rust-lang/rust/commit/c3c1c8d4e0f01c869f8381e70fbd4d103534493f"}], "stats": {"total": 132, "additions": 96, "deletions": 36}, "files": [{"sha": "ca86aeb8100a9e6a52e44e313355163e55b5f649", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -109,6 +109,12 @@ fn main() {\n \n         cmd.arg(\"-Zexternal-macro-backtrace\");\n \n+        // Link crates to the proc macro crate for the target, but use a host proc macro crate\n+        // to actually run the macros\n+        if env::var_os(\"RUST_DUAL_PROC_MACROS\").is_some() {\n+            cmd.arg(\"-Zdual-proc-macros\");\n+        }\n+\n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n         // linking all deps statically into the dylib.\n@@ -258,13 +264,6 @@ fn main() {\n             }\n         }\n \n-        // Force all crates compiled by this compiler to (a) be unstable and (b)\n-        // allow the `rustc_private` feature to link to other unstable crates\n-        // also in the sysroot.\n-        if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n-            cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n-        }\n-\n         if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {\n             cmd.arg(\"--remap-path-prefix\").arg(&map);\n         }\n@@ -284,6 +283,14 @@ fn main() {\n         }\n     }\n \n+    // Force all crates compiled by this compiler to (a) be unstable and (b)\n+    // allow the `rustc_private` feature to link to other unstable crates\n+    // also in the sysroot. We also do this for host crates, since those\n+    // may be proc macros, in which case we might ship them.\n+    if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() && (stage != \"0\" || target.is_some()) {\n+        cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n+    }\n+\n     if env::var_os(\"RUSTC_PARALLEL_COMPILER\").is_some() {\n         cmd.arg(\"--cfg\").arg(\"parallel_compiler\");\n     }"}, {"sha": "eb1a2a59fa3c52590de053f125b07b86f1904476", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -812,6 +812,17 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUST_CHECK\", \"1\");\n         }\n \n+        match mode {\n+            Mode::Std | Mode::Test | Mode::ToolBootstrap | Mode::ToolStd | Mode::ToolTest=> {},\n+            Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {\n+                // Build proc macros both for the host and the target\n+                if target != compiler.host && cmd != \"check\" {\n+                    cargo.arg(\"-Zdual-proc-macros\");\n+                    cargo.env(\"RUST_DUAL_PROC_MACROS\", \"1\");\n+                }\n+            },\n+        }\n+\n         cargo.arg(\"-j\").arg(self.jobs().to_string());\n         // Remove make-related flags to ensure Cargo can correctly set things up\n         cargo.env_remove(\"MAKEFLAGS\");"}, {"sha": "a30b465698e2a263b40b10f7ef6b7a33dd3442a4", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -42,7 +42,8 @@ impl Step for Std {\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n-        add_to_sysroot(&builder, &libdir, &libstd_stamp(builder, compiler, target));\n+        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+        add_to_sysroot(&builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n     }\n }\n \n@@ -88,7 +89,8 @@ impl Step for Rustc {\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n-        add_to_sysroot(&builder, &libdir, &librustc_stamp(builder, compiler, target));\n+        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+        add_to_sysroot(&builder, &libdir, &hostdir, &librustc_stamp(builder, compiler, target));\n     }\n }\n \n@@ -175,7 +177,8 @@ impl Step for Test {\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n-        add_to_sysroot(builder, &libdir, &libtest_stamp(builder, compiler, target));\n+        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+        add_to_sysroot(builder, &libdir, &hostdir, &libtest_stamp(builder, compiler, target));\n     }\n }\n \n@@ -222,7 +225,8 @@ impl Step for Rustdoc {\n                   true);\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n-        add_to_sysroot(&builder, &libdir, &rustdoc_stamp(builder, compiler, target));\n+        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+        add_to_sysroot(&builder, &libdir, &hostdir, &rustdoc_stamp(builder, compiler, target));\n         builder.cargo(compiler, Mode::ToolRustc, target, \"clean\");\n     }\n }"}, {"sha": "9498dbb59523294c9a1ec26fca48757fb4245939", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -224,7 +224,8 @@ impl Step for StdLink {\n                 target_compiler.host,\n                 target));\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n-        add_to_sysroot(builder, &libdir, &libstd_stamp(builder, compiler, target));\n+        let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n+        add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n \n         if builder.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n             // The sanitizers are only built in stage1 or above, so the dylibs will\n@@ -431,8 +432,12 @@ impl Step for TestLink {\n                 &compiler.host,\n                 target_compiler.host,\n                 target));\n-        add_to_sysroot(builder, &builder.sysroot_libdir(target_compiler, target),\n-                    &libtest_stamp(builder, compiler, target));\n+        add_to_sysroot(\n+            builder,\n+            &builder.sysroot_libdir(target_compiler, target),\n+            &builder.sysroot_libdir(target_compiler, compiler.host),\n+            &libtest_stamp(builder, compiler, target)\n+        );\n \n         builder.cargo(target_compiler, Mode::ToolTest, target, \"clean\");\n     }\n@@ -496,8 +501,8 @@ impl Step for Rustc {\n             return;\n         }\n \n-        // Ensure that build scripts have a std to link against.\n-        builder.ensure(Std {\n+        // Ensure that build scripts and proc macros have a std / libproc_macro to link against.\n+        builder.ensure(Test {\n             compiler: builder.compiler(self.compiler.stage, builder.config.build),\n             target: builder.config.build,\n         });\n@@ -592,8 +597,12 @@ impl Step for RustcLink {\n                  &compiler.host,\n                  target_compiler.host,\n                  target));\n-        add_to_sysroot(builder, &builder.sysroot_libdir(target_compiler, target),\n-                       &librustc_stamp(builder, compiler, target));\n+        add_to_sysroot(\n+            builder,\n+            &builder.sysroot_libdir(target_compiler, target),\n+            &builder.sysroot_libdir(target_compiler, compiler.host),\n+            &librustc_stamp(builder, compiler, target)\n+        );\n         builder.cargo(target_compiler, Mode::ToolRustc, target, \"clean\");\n     }\n }\n@@ -1015,10 +1024,20 @@ impl Step for Assemble {\n ///\n /// For a particular stage this will link the file listed in `stamp` into the\n /// `sysroot_dst` provided.\n-pub fn add_to_sysroot(builder: &Builder<'_>, sysroot_dst: &Path, stamp: &Path) {\n+pub fn add_to_sysroot(\n+    builder: &Builder<'_>,\n+    sysroot_dst: &Path,\n+    sysroot_host_dst: &Path,\n+    stamp: &Path\n+) {\n     t!(fs::create_dir_all(&sysroot_dst));\n-    for path in builder.read_stamp_file(stamp) {\n-        builder.copy(&path, &sysroot_dst.join(path.file_name().unwrap()));\n+    t!(fs::create_dir_all(&sysroot_host_dst));\n+    for (path, host) in builder.read_stamp_file(stamp) {\n+        if host {\n+            builder.copy(&path, &sysroot_host_dst.join(path.file_name().unwrap()));\n+        } else {\n+            builder.copy(&path, &sysroot_dst.join(path.file_name().unwrap()));\n+        }\n     }\n }\n \n@@ -1047,8 +1066,14 @@ pub fn run_cargo(builder: &Builder<'_>,\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n     let ok = stream_cargo(builder, cargo, &mut |msg| {\n-        let filenames = match msg {\n-            CargoMessage::CompilerArtifact { filenames, .. } => filenames,\n+        let (filenames, crate_types) = match msg {\n+            CargoMessage::CompilerArtifact {\n+                filenames,\n+                target: CargoTarget {\n+                    crate_types,\n+                },\n+                ..\n+            } => (filenames, crate_types),\n             _ => return,\n         };\n         for filename in filenames {\n@@ -1063,15 +1088,19 @@ pub fn run_cargo(builder: &Builder<'_>,\n             let filename = Path::new(&*filename);\n \n             // If this was an output file in the \"host dir\" we don't actually\n-            // worry about it, it's not relevant for us.\n+            // worry about it, it's not relevant for us\n             if filename.starts_with(&host_root_dir) {\n+                // Unless it's a proc macro used in the compiler\n+                if crate_types.iter().any(|t| t == \"proc-macro\") {\n+                    deps.push((filename.to_path_buf(), true));\n+                }\n                 continue;\n             }\n \n             // If this was output in the `deps` dir then this is a precise file\n             // name (hash included) so we start tracking it.\n             if filename.starts_with(&target_deps_dir) {\n-                deps.push(filename.to_path_buf());\n+                deps.push((filename.to_path_buf(), false));\n                 continue;\n             }\n \n@@ -1124,10 +1153,10 @@ pub fn run_cargo(builder: &Builder<'_>,\n             let candidate = format!(\"{}.lib\", path_to_add);\n             let candidate = PathBuf::from(candidate);\n             if candidate.exists() {\n-                deps.push(candidate);\n+                deps.push((candidate, false));\n             }\n         }\n-        deps.push(path_to_add.into());\n+        deps.push((path_to_add.into(), false));\n     }\n \n     // Now we want to update the contents of the stamp file, if necessary. First\n@@ -1140,12 +1169,13 @@ pub fn run_cargo(builder: &Builder<'_>,\n     let mut new_contents = Vec::new();\n     let mut max = None;\n     let mut max_path = None;\n-    for dep in deps.iter() {\n+    for (dep, proc_macro) in deps.iter() {\n         let mtime = mtime(dep);\n         if Some(mtime) > max {\n             max = Some(mtime);\n             max_path = Some(dep.clone());\n         }\n+        new_contents.extend(if *proc_macro { b\"h\" } else { b\"t\" });\n         new_contents.extend(dep.to_str().unwrap().as_bytes());\n         new_contents.extend(b\"\\0\");\n     }\n@@ -1157,15 +1187,15 @@ pub fn run_cargo(builder: &Builder<'_>,\n     if contents_equal && max <= stamp_mtime {\n         builder.verbose(&format!(\"not updating {:?}; contents equal and {:?} <= {:?}\",\n                 stamp, max, stamp_mtime));\n-        return deps\n+        return deps.into_iter().map(|(d, _)| d).collect()\n     }\n     if max > stamp_mtime {\n         builder.verbose(&format!(\"updating {:?} as {:?} changed\", stamp, max_path));\n     } else {\n         builder.verbose(&format!(\"updating {:?} as deps changed\", stamp));\n     }\n     t!(fs::write(&stamp, &new_contents));\n-    deps\n+    deps.into_iter().map(|(d, _)| d).collect()\n }\n \n pub fn stream_cargo(\n@@ -1211,13 +1241,19 @@ pub fn stream_cargo(\n     status.success()\n }\n \n+#[derive(Deserialize)]\n+pub struct CargoTarget<'a> {\n+    crate_types: Vec<Cow<'a, str>>,\n+}\n+\n #[derive(Deserialize)]\n #[serde(tag = \"reason\", rename_all = \"kebab-case\")]\n pub enum CargoMessage<'a> {\n     CompilerArtifact {\n         package_id: Cow<'a, str>,\n         features: Vec<Cow<'a, str>>,\n         filenames: Vec<Cow<'a, str>>,\n+        target: CargoTarget<'a>,\n     },\n     BuildScriptExecuted {\n         package_id: Cow<'a, str>,"}, {"sha": "9317a40545eac9f2b4c208223bc92c31c0227e1b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -1129,7 +1129,7 @@ impl Build {\n         ret\n     }\n \n-    fn read_stamp_file(&self, stamp: &Path) -> Vec<PathBuf> {\n+    fn read_stamp_file(&self, stamp: &Path) -> Vec<(PathBuf, bool)> {\n         if self.config.dry_run {\n             return Vec::new();\n         }\n@@ -1142,8 +1142,9 @@ impl Build {\n             if part.is_empty() {\n                 continue\n             }\n-            let path = PathBuf::from(t!(str::from_utf8(part)));\n-            paths.push(path);\n+            let host = part[0] as char == 'h';\n+            let path = PathBuf::from(t!(str::from_utf8(&part[1..])));\n+            paths.push((path, host));\n         }\n         paths\n     }"}, {"sha": "6e37bf334526a7755a6456988763f6fdec7eb7bd", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -213,7 +213,7 @@ impl Step for Cargo {\n         });\n         let mut cargo = tool::prepare_tool_cargo(builder,\n                                                  compiler,\n-                                                 Mode::ToolRustc,\n+                                                 Mode::ToolStd,\n                                                  self.host,\n                                                  \"test\",\n                                                  \"src/tools/cargo\","}, {"sha": "b12ccc4f39d8d2066e0eed11c0e3569ecc97ceac", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e501a87e895221dfe7475c6739feffe4bbca04eb/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e501a87e895221dfe7475c6739feffe4bbca04eb", "patch": "@@ -91,7 +91,8 @@ impl Step for ToolBuild {\n                 compile::CargoMessage::CompilerArtifact {\n                     package_id,\n                     features,\n-                    filenames\n+                    filenames,\n+                    target: _,\n                 } => {\n                     (package_id, features, filenames)\n                 }\n@@ -513,7 +514,7 @@ impl Step for Cargo {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"cargo\",\n-            mode: Mode::ToolRustc,\n+            mode: Mode::ToolStd,\n             path: \"src/tools/cargo\",\n             is_optional_tool: false,\n             source_type: SourceType::Submodule,"}]}