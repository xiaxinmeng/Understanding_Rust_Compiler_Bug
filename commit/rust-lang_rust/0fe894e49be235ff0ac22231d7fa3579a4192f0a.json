{"sha": "0fe894e49be235ff0ac22231d7fa3579a4192f0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZTg5NGU0OWJlMjM1ZmYwYWMyMjIzMWQ3ZmEzNTc5YTQxOTJmMGE=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-21T18:44:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:25:43Z"}, "message": "Deprecated `String::from_raw_parts`\n\nReplaced by `string::raw::from_parts`\n\n[breaking-change]", "tree": {"sha": "a79643e1374bffaeee99d386d80372a7d8ab2652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79643e1374bffaeee99d386d80372a7d8ab2652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fe894e49be235ff0ac22231d7fa3579a4192f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe894e49be235ff0ac22231d7fa3579a4192f0a", "html_url": "https://github.com/rust-lang/rust/commit/0fe894e49be235ff0ac22231d7fa3579a4192f0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fe894e49be235ff0ac22231d7fa3579a4192f0a/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e509d3462d20b696a1b5d18f14884b4e391a6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e509d3462d20b696a1b5d18f14884b4e391a6ba", "html_url": "https://github.com/rust-lang/rust/commit/6e509d3462d20b696a1b5d18f14884b4e391a6ba"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "db859bbf5bf382f027b0133e2eb3cc74d6312ec7", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fe894e49be235ff0ac22231d7fa3579a4192f0a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe894e49be235ff0ac22231d7fa3579a4192f0a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=0fe894e49be235ff0ac22231d7fa3579a4192f0a", "patch": "@@ -558,7 +558,8 @@ pub mod raw {\n     use core::mem;\n     use core::raw::Slice;\n     use core::ptr::RawPtr;\n-    use string::{mod, String};\n+    use string;\n+    use string::String;\n     use vec::Vec;\n \n     use MutableSeq;"}, {"sha": "aeb323a9caf906c193a4e2319c9e9feff171f5cf", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0fe894e49be235ff0ac22231d7fa3579a4192f0a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe894e49be235ff0ac22231d7fa3579a4192f0a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=0fe894e49be235ff0ac22231d7fa3579a4192f0a", "patch": "@@ -49,14 +49,6 @@ impl String {\n         }\n     }\n \n-    /// Creates a new string buffer from length, capacity, and a pointer.\n-    #[inline]\n-    pub unsafe fn from_raw_parts(length: uint, capacity: uint, ptr: *mut u8) -> String {\n-        String {\n-            vec: Vec::from_raw_parts(length, capacity, ptr),\n-        }\n-    }\n-\n     /// Creates a new string buffer from the given string.\n     #[inline]\n     pub fn from_str(string: &str) -> String {\n@@ -65,6 +57,13 @@ impl String {\n         }\n     }\n \n+    /// Deprecated. Replaced by `string::raw::from_parts`\n+    #[inline]\n+    #[deprecated = \"Replaced by string::raw::from_parts\"]\n+    pub unsafe fn from_raw_parts(length: uint, capacity: uint, ptr: *mut u8) -> String {\n+        raw::from_parts(length, capacity, ptr)\n+    }\n+\n     #[allow(missing_doc)]\n     #[deprecated = \"obsoleted by the removal of ~str\"]\n     #[inline]\n@@ -577,6 +576,18 @@ pub mod raw {\n     use super::String;\n     use vec::Vec;\n \n+    /// Creates a new `String` from length, capacity, and a pointer.\n+    ///\n+    /// This is unsafe because:\n+    /// * We call `Vec::from_raw_parts` to get a `Vec<u8>`\n+    /// * We assume that the `Vec` contains valid UTF-8\n+    #[inline]\n+    pub unsafe fn from_parts(length: uint, capacity: uint, ptr: *mut u8) -> String {\n+        String {\n+            vec: Vec::from_raw_parts(length, capacity, ptr),\n+        }\n+    }\n+\n     /// Converts a vector of bytes to a new `String` without checking if\n     /// it contains valid UTF-8. This is unsafe because it assumes that\n     /// the utf-8-ness of the vector has already been validated."}]}