{"sha": "2fd5516272e44b08ec01fc48bf6987e9a3409b71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDU1MTYyNzJlNDRiMDhlYzAxZmM0OGJmNjk4N2U5YTM0MDliNzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-13T18:59:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-13T18:59:01Z"}, "message": "expose `evaluate_obligation` that captures overflow, use in rustdoc", "tree": {"sha": "328d2e215a9525d44b47aaabaf713878c996f875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/328d2e215a9525d44b47aaabaf713878c996f875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd5516272e44b08ec01fc48bf6987e9a3409b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd5516272e44b08ec01fc48bf6987e9a3409b71", "html_url": "https://github.com/rust-lang/rust/commit/2fd5516272e44b08ec01fc48bf6987e9a3409b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd5516272e44b08ec01fc48bf6987e9a3409b71/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58f2c8efad4708f649e1b88622e1f89df0571f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58f2c8efad4708f649e1b88622e1f89df0571f6", "html_url": "https://github.com/rust-lang/rust/commit/f58f2c8efad4708f649e1b88622e1f89df0571f6"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "f573b1ef45e9c677238982d3867de5f8a63c333c", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fd5516272e44b08ec01fc48bf6987e9a3409b71/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd5516272e44b08ec01fc48bf6987e9a3409b71/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=2fd5516272e44b08ec01fc48bf6987e9a3409b71", "patch": "@@ -20,7 +20,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n-        self.evaluate_obligation(obligation).may_apply()\n+        self.evaluate_obligation_no_overflow(obligation).may_apply()\n     }\n \n     /// Evaluates whether the predicate can be satisfied in the given\n@@ -30,22 +30,31 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n-        self.evaluate_obligation(obligation) == EvaluationResult::EvaluatedToOk\n+        self.evaluate_obligation_no_overflow(obligation) == EvaluationResult::EvaluatedToOk\n     }\n \n-    // Helper function that canonicalizes and runs the query, as well as handles\n-    // overflow.\n-    fn evaluate_obligation(\n+    /// Evaluate a given predicate, capturing overflow and propagating it back.\n+    pub fn evaluate_obligation(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-    ) -> EvaluationResult {\n+    ) -> Result<EvaluationResult, OverflowError> {\n         let mut _orig_values = SmallVec::new();\n         let c_pred = self.canonicalize_query(&obligation.param_env.and(obligation.predicate),\n                                              &mut _orig_values);\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`.\n-        match self.tcx.global_tcx().evaluate_obligation(c_pred) {\n+        self.tcx.global_tcx().evaluate_obligation(c_pred)\n+    }\n+\n+    // Helper function that canonicalizes and runs the query. If an\n+    // overflow results, we re-run it in the local context so we can\n+    // report a nice error.\n+    fn evaluate_obligation_no_overflow(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> EvaluationResult {\n+        match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n             Err(OverflowError) => {\n                 let mut selcx ="}, {"sha": "3d591a702aaa9134542374a965c9534665d36589", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fd5516272e44b08ec01fc48bf6987e9a3409b71/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd5516272e44b08ec01fc48bf6987e9a3409b71/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=2fd5516272e44b08ec01fc48bf6987e9a3409b71", "patch": "@@ -103,11 +103,20 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n                         // FIXME(eddyb) ignoring `obligations` might cause false positives.\n                         drop(obligations);\n \n-                        let may_apply = infcx.predicate_may_hold(&traits::Obligation::new(\n-                            cause.clone(),\n-                            param_env,\n-                            trait_ref.to_predicate(),\n-                        ));\n+                        debug!(\n+                            \"invoking predicate_may_hold: {:?}\",\n+                            trait_ref,\n+                        );\n+                        let may_apply = match infcx.evaluate_obligation(\n+                            &traits::Obligation::new(\n+                                cause.clone(),\n+                                param_env,\n+                                trait_ref.to_predicate(),\n+                            ),\n+                        ) {\n+                            Ok(eval_result) => eval_result.may_apply(),\n+                            Err(traits::OverflowError) => true, // overflow doesn't mean yes *or* no\n+                        };\n                         if !may_apply {\n                             return\n                         }"}]}