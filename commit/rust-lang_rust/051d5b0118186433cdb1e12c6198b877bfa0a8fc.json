{"sha": "051d5b0118186433cdb1e12c6198b877bfa0a8fc", "node_id": "C_kwDOAAsO6NoAKDA1MWQ1YjAxMTgxODY0MzNjZGIxZTEyYzYxOThiODc3YmZhMGE4ZmM", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-09-30T20:42:41Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-09-30T20:42:41Z"}, "message": "Fix standard library for min_specialization changes", "tree": {"sha": "42e1f4256ebedd1792b20be4c9c8f26cc48dec51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42e1f4256ebedd1792b20be4c9c8f26cc48dec51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051d5b0118186433cdb1e12c6198b877bfa0a8fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051d5b0118186433cdb1e12c6198b877bfa0a8fc", "html_url": "https://github.com/rust-lang/rust/commit/051d5b0118186433cdb1e12c6198b877bfa0a8fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051d5b0118186433cdb1e12c6198b877bfa0a8fc/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f86cad2dda3181bfedc165d3dd4bf452770228", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f86cad2dda3181bfedc165d3dd4bf452770228", "html_url": "https://github.com/rust-lang/rust/commit/c8f86cad2dda3181bfedc165d3dd4bf452770228"}], "stats": {"total": 154, "additions": 71, "deletions": 83}, "files": [{"sha": "096262b41d717ae7c9093a722a29b32acc5ab2f7", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -220,14 +220,21 @@ unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n #[doc(hidden)]\n #[unstable(issue = \"none\", feature = \"std_internals\")]\n+#[rustc_unsafe_specialization_marker]\n+pub trait NonDrop {}\n+\n // T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n // and thus we can't implement drop-handling\n-//\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+impl<T: Copy> NonDrop for T {}\n+\n+#[doc(hidden)]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n // TrustedRandomAccess (without NoCoerce) must not be implemented because\n-// subtypes/supertypes of `T` might not be `Copy`\n+// subtypes/supertypes of `T` might not be `NonDrop`\n unsafe impl<T, A: Allocator> TrustedRandomAccessNoCoerce for IntoIter<T, A>\n where\n-    T: Copy,\n+    T: NonDrop,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "6e78534cf5b10d3a515134d933bdc9508fddab12", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -6,24 +6,14 @@ use super::{AsIntoIter, InPlaceDrop, SpecFromIter, SpecFromIterNested, Vec};\n \n /// Specialization marker for collecting an iterator pipeline into a Vec while reusing the\n /// source allocation, i.e. executing the pipeline in place.\n-///\n-/// The SourceIter parent trait is necessary for the specializing function to access the allocation\n-/// which is to be reused. But it is not sufficient for the specialization to be valid. See\n-/// additional bounds on the impl.\n #[rustc_unsafe_specialization_marker]\n-pub(super) trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n+pub(super) trait InPlaceIterableMarker {}\n \n-// The std-internal SourceIter/InPlaceIterable traits are only implemented by chains of\n-// Adapter<Adapter<Adapter<IntoIter>>> (all owned by core/std). Additional bounds\n-// on the adapter implementations (beyond `impl<I: Trait> Trait for Adapter<I>`) only depend on other\n-// traits already marked as specialization traits (Copy, TrustedRandomAccess, FusedIterator).\n-// I.e. the marker does not depend on lifetimes of user-supplied types. Modulo the Copy hole, which\n-// several other specializations already depend on.\n-impl<T> SourceIterMarker for T where T: SourceIter<Source: AsIntoIter> + InPlaceIterable {}\n+impl<T> InPlaceIterableMarker for T where T: InPlaceIterable {}\n \n impl<T, I> SpecFromIter<T, I> for Vec<T>\n where\n-    I: Iterator<Item = T> + SourceIterMarker,\n+    I: Iterator<Item = T> + SourceIter<Source: AsIntoIter> + InPlaceIterableMarker,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // Additional requirements which cannot expressed via trait bounds. We rely on const eval"}, {"sha": "f0143cf0c3d0f8a007b6300bf87568ca41ff7100", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -227,14 +227,14 @@ impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n unsafe impl<I> TrustedLen for Enumerate<I> where I: TrustedLen {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n+unsafe impl<I> SourceIter for Enumerate<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "a0afaa326ad633b9b9dbc01ebf7f35b65e94cd47", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -135,15 +135,14 @@ where\n impl<I: FusedIterator, P> FusedIterator for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P>\n+unsafe impl<P, I> SourceIter for Filter<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "e0d665c9e12ba0e2465197f0f642d01e1ea23710", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -129,15 +129,14 @@ where\n impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F> where F: FnMut(I::Item) -> Option<B> {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F>\n+unsafe impl<I, F> SourceIter for FilterMap<I, F>\n where\n-    F: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "19839fdfe5bc35dd549246f59ce2b650d15c0317", "filename": "library/core/src/iter/adapters/inspect.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -149,15 +149,14 @@ where\n impl<I: FusedIterator, F> FusedIterator for Inspect<I, F> where F: FnMut(&I::Item) {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F>\n+unsafe impl<I, F> SourceIter for Inspect<I, F>\n where\n-    F: FnMut(&I::Item),\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "449650a22f4353b0981e1d82cc9f069db0ed36c4", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -201,15 +201,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n+unsafe impl<I, F> SourceIter for Map<I, F>\n where\n-    F: FnMut(I::Item) -> B,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "1e8d6bf3e00e17acca6fb2209eb56e3c794780ab", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -80,15 +80,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, P> SourceIter for MapWhile<I, P>\n+unsafe impl<I, P> SourceIter for MapWhile<I, P>\n where\n-    P: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "1e1ce866ff3f29083eb7d15fab2e40c94d8ab2ed", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -92,9 +92,10 @@ pub use self::zip::zip;\n /// [`as_inner`]: SourceIter::as_inner\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n+#[rustc_specialization_trait]\n pub unsafe trait SourceIter {\n     /// A source stage in an iterator pipeline.\n-    type Source: Iterator;\n+    type Source;\n \n     /// Retrieve the source of an iterator pipeline.\n     ///\n@@ -200,14 +201,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I, E> SourceIter for ResultShunt<'_, I, E>\n+unsafe impl<I, E> SourceIter for ResultShunt<'_, I, E>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut Self::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "20aca323bab79e9cb5761bd8795f891caaef3fe9", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -321,14 +321,14 @@ impl<I: Iterator> Peekable<I> {\n unsafe impl<I> TrustedLen for Peekable<I> where I: TrustedLen {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n+unsafe impl<I: Iterator> SourceIter for Peekable<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "80bfd2231241b3da7d066d894f1cf67020188bd7", "filename": "library/core/src/iter/adapters/scan.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -90,15 +90,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n+unsafe impl<St, F, I> SourceIter for Scan<I, St, F>\n where\n-    I: SourceIter<Source = S>,\n-    F: FnMut(&mut St, I::Item) -> Option<B>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "bb3480008700a81fd78c3a6a08bd3c1905b4ca5a", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -180,14 +180,14 @@ where\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n+unsafe impl<I> SourceIter for Skip<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "f29661779c05650e2ae26444d08bfe0b873577dd", "filename": "library/core/src/iter/adapters/skip_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -105,15 +105,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P>\n+unsafe impl<P, I> SourceIter for SkipWhile<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "38d43e070b64fd3ab78276ebd6095844f403e824", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -114,14 +114,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I>\n+unsafe impl<I> SourceIter for Take<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "ded216da952a3f406c885a3c7660dbcbd8d61a81", "filename": "library/core/src/iter/adapters/take_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -118,15 +118,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P>\n+unsafe impl<P, I> SourceIter for TakeWhile<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "2b7287a413376bf53e2796cc8b25b0dcb1a8722a", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d5b0118186433cdb1e12c6198b877bfa0a8fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=051d5b0118186433cdb1e12c6198b877bfa0a8fc", "patch": "@@ -414,16 +414,14 @@ where\n // Arbitrarily selects the left side of the zip iteration as extractable \"source\"\n // it would require negative trait bounds to be able to try both\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S, A, B> SourceIter for Zip<A, B>\n+unsafe impl<A, B> SourceIter for Zip<A, B>\n where\n-    A: SourceIter<Source = S>,\n-    B: Iterator,\n-    S: Iterator,\n+    A: SourceIter,\n {\n-    type Source = S;\n+    type Source = A::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut A::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.a) }\n     }"}]}