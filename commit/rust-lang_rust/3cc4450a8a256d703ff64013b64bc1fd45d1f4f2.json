{"sha": "3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYzQ0NTBhOGEyNTZkNzAzZmY2NDAxM2I2NGJjMWZkNDVkMWY0ZjI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T18:22:10Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:54:36Z"}, "message": "Simplify some handling of target_pointer_width", "tree": {"sha": "e2441ab012c191c8e41833da0fc645844877fe15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2441ab012c191c8e41833da0fc645844877fe15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "html_url": "https://github.com/rust-lang/rust/commit/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc71971e5d91834d165b80b16858a49c9e00aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc71971e5d91834d165b80b16858a49c9e00aba", "html_url": "https://github.com/rust-lang/rust/commit/2bc71971e5d91834d165b80b16858a49c9e00aba"}], "stats": {"total": 41, "additions": 6, "deletions": 35}, "files": [{"sha": "0b5a6757333f252c2c32b4b993c7bd5322b5c477", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "patch": "@@ -1778,29 +1778,15 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n     match ty.sty {\n         ty::TyInt(t) => Some((match t {\n-            ast::IntTy::Isize => {\n-                match &cx.tcx.sess.target.target.target_pointer_width[..] {\n-                    \"16\" => 16,\n-                    \"32\" => 32,\n-                    \"64\" => 64,\n-                    tws => bug!(\"Unsupported target word size for isize: {}\", tws),\n-                }\n-            },\n+            ast::IntTy::Isize => cx.tcx.sess.target.isize_ty.bit_width().unwrap() as u64,\n             ast::IntTy::I8 => 8,\n             ast::IntTy::I16 => 16,\n             ast::IntTy::I32 => 32,\n             ast::IntTy::I64 => 64,\n             ast::IntTy::I128 => 128,\n         }, true)),\n         ty::TyUint(t) => Some((match t {\n-            ast::UintTy::Usize => {\n-                match &cx.tcx.sess.target.target.target_pointer_width[..] {\n-                    \"16\" => 16,\n-                    \"32\" => 32,\n-                    \"64\" => 64,\n-                    tws => bug!(\"Unsupported target word size for usize: {}\", tws),\n-                }\n-            },\n+            ast::UintTy::Usize => cx.tcx.sess.target.usize_ty.bit_width().unwrap() as u64,\n             ast::UintTy::U8 => 8,\n             ast::UintTy::U16 => 16,\n             ast::UintTy::U32 => 32,\n@@ -1813,14 +1799,9 @@ fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n \n // Returns the width of a float TypeVariant\n // Returns None if the type is not a float\n-fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>)\n-        -> Option<u64> {\n-    use rustc::ty::TyFloat;\n+fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>) -> Option<u64> {\n     match *sty {\n-        TyFloat(t) => Some(match t {\n-            ast::FloatTy::F32 => 32,\n-            ast::FloatTy::F64 => 64,\n-        }),\n+        ty::TyFloat(t) => Some(t.bit_width() as u64),\n         _ => None,\n     }\n }"}, {"sha": "dda33ae3fecdfde329941b07cc606f34322b9a85", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc4450a8a256d703ff64013b64bc1fd45d1f4f2/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=3cc4450a8a256d703ff64013b64bc1fd45d1f4f2", "patch": "@@ -733,18 +733,8 @@ fn get_overflow_intrinsic(oop: OverflowOp, bx: &Builder<'_, 'll, '_>, ty: Ty) ->\n     let tcx = bx.tcx();\n \n     let new_sty = match ty.sty {\n-        TyInt(Isize) => match &tcx.sess.target.target.target_pointer_width[..] {\n-            \"16\" => TyInt(I16),\n-            \"32\" => TyInt(I32),\n-            \"64\" => TyInt(I64),\n-            _ => panic!(\"unsupported target word size\")\n-        },\n-        TyUint(Usize) => match &tcx.sess.target.target.target_pointer_width[..] {\n-            \"16\" => TyUint(U16),\n-            \"32\" => TyUint(U32),\n-            \"64\" => TyUint(U64),\n-            _ => panic!(\"unsupported target word size\")\n-        },\n+        TyInt(Isize) => TyInt(tcx.sess.target.isize_ty),\n+        TyUint(Usize) => TyUint(tcx.sess.target.usize_ty),\n         ref t @ TyUint(_) | ref t @ TyInt(_) => t.clone(),\n         _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n     };"}]}