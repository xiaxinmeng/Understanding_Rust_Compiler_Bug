{"sha": "27871389365b64c547acdd26f93a79f172532cbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODcxMzg5MzY1YjY0YzU0N2FjZGQyNmY5M2E3OWYxNzI1MzJjYmU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-05-21T21:58:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-21T21:58:39Z"}, "message": "Merge pull request #3569 from sphynx/master\n\nUse structopt for command line arguments parsing in cargo-fmt", "tree": {"sha": "c5d53028eaa54b40678157e0719044b88d10f647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d53028eaa54b40678157e0719044b88d10f647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27871389365b64c547acdd26f93a79f172532cbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5HSPCRBK7hj4Ov3rIwAAdHIIAJztyp7B3Vi/eMzsNc6wKWTf\n4A3mQUFJuORrSOO/RuvGBAG1vJH2MJRBmNqQrrVkkS7MR6kfr7MCFqG9u4xe5Fnt\nqosYZv25dugoeT71N3cTFkC80vPPDDBbsXVdgD6zWOep63ejIm6pzu1cn3w/K1ym\nJO8ZCvchpgAW0w9vFtzPyZHrf2w2DCAGY/LRiqj7nRkST3b4ZZRjCTkwyS4x2NhE\nKnhrDEFYxI7QkGUN9ch1v8ipfSmPqJe0hJcVS2cMhUVVhBcbBN+cSH/eZGnCx8Qj\nie52Rz62zXlCqMQPeyXDCvqJvcDpVkVshBC3iwoa8KLlCBLYfFOaGnUIOx1U1Bg=\n=KQzz\n-----END PGP SIGNATURE-----\n", "payload": "tree c5d53028eaa54b40678157e0719044b88d10f647\nparent 0ef2144c82fbba72411c8cce105a60866e2fa53d\nparent a7afdeb9b841b7007a7ed9d3b45834ef7953772c\nauthor Seiichi Uchida <seuchida@gmail.com> 1558475919 +0900\ncommitter GitHub <noreply@github.com> 1558475919 +0900\n\nMerge pull request #3569 from sphynx/master\n\nUse structopt for command line arguments parsing in cargo-fmt"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27871389365b64c547acdd26f93a79f172532cbe", "html_url": "https://github.com/rust-lang/rust/commit/27871389365b64c547acdd26f93a79f172532cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27871389365b64c547acdd26f93a79f172532cbe/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef2144c82fbba72411c8cce105a60866e2fa53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef2144c82fbba72411c8cce105a60866e2fa53d", "html_url": "https://github.com/rust-lang/rust/commit/0ef2144c82fbba72411c8cce105a60866e2fa53d"}, {"sha": "a7afdeb9b841b7007a7ed9d3b45834ef7953772c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7afdeb9b841b7007a7ed9d3b45834ef7953772c", "html_url": "https://github.com/rust-lang/rust/commit/a7afdeb9b841b7007a7ed9d3b45834ef7953772c"}], "stats": {"total": 338, "additions": 265, "deletions": 73}, "files": [{"sha": "b5eec3599def8250072b978f8bf74c8cd2ff1f9c", "filename": "Cargo.lock", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/27871389365b64c547acdd26f93a79f172532cbe/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27871389365b64c547acdd26f93a79f172532cbe/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=27871389365b64c547acdd26f93a79f172532cbe", "patch": "@@ -135,6 +135,20 @@ name = \"cfg-if\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"clap\"\n+version = \"2.33.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cloudabi\"\n version = \"0.0.3\"\n@@ -314,6 +328,14 @@ dependencies = [\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"heck\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"humantime\"\n version = \"1.2.0\"\n@@ -799,6 +821,7 @@ dependencies = [\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -886,6 +909,31 @@ name = \"stable_deref_trait\"\n version = \"1.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"strsim\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"structopt\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"structopt-derive\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"0.15.32\"\n@@ -935,6 +983,14 @@ dependencies = [\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"textwrap\"\n+version = \"0.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -981,6 +1037,11 @@ name = \"utf8-ranges\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"vec_map\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"walkdir\"\n version = \"2.2.7\"\n@@ -1045,6 +1106,7 @@ dependencies = [\n \"checksum cargo_metadata 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"178d62b240c34223f265a4c1e275e37d62da163d421fc8d7f7e3ee340f803c57\"\n \"checksum cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e5f3fee5eeb60324c2781f1e41286bdee933850fff9b3c672587fed5ec58c83\"\n \"checksum cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d43355396e872eefb45ce6342e4374ed7bc2b3a502d1b28e36d6e23c05d1f4\"\n+\"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f0ed1a4de2235cabda8558ff5840bffb97fcb64c97827f354a451307df5f72b\"\n@@ -1065,6 +1127,7 @@ dependencies = [\n \"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \"checksum getopts 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a7292d30132fb5424b354f5dc02512a86e4c516fe544bb7a25e7f266951b797\"\n \"checksum globset 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef4feaabe24a0a658fd9cf4a9acf6ed284f045c77df0f49020ba3245cfb7b454\"\n+\"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\n \"checksum ignore 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dc57fa12805f367736a38541ac1a9fc6a52812a0ca959b1d4d4b640a89eb002\"\n \"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n@@ -1128,11 +1191,15 @@ dependencies = [\n \"checksum serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5a23aa71d4a4d43fdbfaac00eff68ba8a06a51759a89ac3304323e800c4dd40d\"\n \"checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n+\"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n+\"checksum structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d0760c312538987d363c36c42339b55f5ee176ea8808bbe4543d484a291c8d1\"\n+\"checksum structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"528aeb7351d042e6ffbc2a6fb76a86f9b622fdf7c25932798e7a82cb03bc94c6\"\n \"checksum syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"846620ec526c1599c070eff393bfeeeb88a93afa2513fc3b49f1fea84cf7b0ed\"\n \"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n \"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n \"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n+\"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87c5890a989fa47ecdc7bcb4c63a77a82c18f306714104b1decfd722db17b39e\"\n \"checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86\"\n@@ -1141,6 +1208,7 @@ dependencies = [\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \"checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737\"\n+\"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d9d7ed3431229a144296213105a390676cc49c9b6a72bd19f3176c98e129fa1\"\n \"checksum winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f10e386af2b13e47c89e7236a7a14a086791a2b88ebad6df9bf42040195cf770\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\""}, {"sha": "1321f0e84ef27f684f1001f6573afca1040902c8", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27871389365b64c547acdd26f93a79f172532cbe/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/27871389365b64c547acdd26f93a79f172532cbe/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=27871389365b64c547acdd26f93a79f172532cbe", "patch": "@@ -58,6 +58,7 @@ unicode_categories = \"0.1.1\"\n dirs = \"1.0.4\"\n ignore = \"0.4.6\"\n annotate-snippets = { version = \"0.5.0\", features = [\"ansi_term\"] }\n+structopt = \"0.2.15\"\n \n config_proc_macro = { path = \"config_proc_macro\" }\n "}, {"sha": "3c4d1c08b0867d2103260bdab5862de28f4be9c7", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 196, "deletions": 73, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/27871389365b64c547acdd26f93a79f172532cbe/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27871389365b64c547acdd26f93a79f172532cbe/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=27871389365b64c547acdd26f93a79f172532cbe", "patch": "@@ -1,10 +1,8 @@\n // Inspired by Paul Woolcock's cargo-fmt (https://github.com/pwoolcoc/cargo-fmt/).\n \n-#![cfg(not(test))]\n #![deny(warnings)]\n \n use cargo_metadata;\n-use getopts;\n \n use std::cmp::Ordering;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -17,7 +15,41 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n \n-use getopts::{Matches, Options};\n+use structopt::StructOpt;\n+\n+#[derive(StructOpt, Debug)]\n+#[structopt(\n+    bin_name = \"cargo fmt\",\n+    author = \"\",\n+    about = \"This utility formats all bin and lib files of \\\n+             the current crate using rustfmt.\"\n+)]\n+pub struct Opts {\n+    /// No output printed to stdout\n+    #[structopt(short = \"q\", long = \"quiet\")]\n+    quiet: bool,\n+\n+    /// Use verbose output\n+    #[structopt(short = \"v\", long = \"verbose\")]\n+    verbose: bool,\n+\n+    /// Print rustfmt version and exit\n+    #[structopt(long = \"version\")]\n+    version: bool,\n+\n+    /// Specify package to format (only usable in workspaces)\n+    #[structopt(short = \"p\", long = \"package\", value_name = \"package\")]\n+    packages: Vec<String>,\n+\n+    /// Options passed to rustfmt\n+    // 'raw = true' to make `--` explicit.\n+    #[structopt(name = \"rustfmt_options\", raw(raw = \"true\"))]\n+    rustfmt_options: Vec<String>,\n+\n+    /// Format all packages (only usable in workspaces)\n+    #[structopt(long = \"all\")]\n+    format_all: bool,\n+}\n \n fn main() {\n     let exit_status = execute();\n@@ -29,80 +61,43 @@ const SUCCESS: i32 = 0;\n const FAILURE: i32 = 1;\n \n fn execute() -> i32 {\n-    let mut opts = getopts::Options::new();\n-    opts.optflag(\"h\", \"help\", \"show this message\");\n-    opts.optflag(\"q\", \"quiet\", \"no output printed to stdout\");\n-    opts.optflag(\"v\", \"verbose\", \"use verbose output\");\n-    opts.optmulti(\n-        \"p\",\n-        \"package\",\n-        \"specify package to format (only usable in workspaces)\",\n-        \"<package>\",\n-    );\n-    opts.optflag(\"\", \"version\", \"print rustfmt version and exit\");\n-    opts.optflag(\"\", \"all\", \"format all packages (only usable in workspaces)\");\n-\n-    // If there is any invalid argument passed to `cargo fmt`, return without formatting.\n-    let mut is_package_arg = false;\n-    for arg in env::args().skip(2).take_while(|a| a != \"--\") {\n-        if arg.starts_with('-') {\n-            is_package_arg = arg.starts_with(\"--package\") | arg.starts_with(\"-p\");\n-        } else if !is_package_arg {\n-            print_usage_to_stderr(&opts, &format!(\"Invalid argument: `{}`.\", arg));\n-            return FAILURE;\n+    // Drop extra `fmt` argument provided by `cargo`.\n+    let mut found_fmt = false;\n+    let args = env::args().filter(|x| {\n+        if found_fmt {\n+            true\n         } else {\n-            is_package_arg = false;\n+            found_fmt = x == \"fmt\";\n+            x != \"fmt\"\n         }\n-    }\n+    });\n \n-    let matches = match opts.parse(env::args().skip(1).take_while(|a| a != \"--\")) {\n-        Ok(m) => m,\n-        Err(e) => {\n-            print_usage_to_stderr(&opts, &e.to_string());\n-            return FAILURE;\n-        }\n-    };\n+    let opts = Opts::from_iter(args);\n \n-    let verbosity = match (matches.opt_present(\"v\"), matches.opt_present(\"q\")) {\n+    let verbosity = match (opts.verbose, opts.quiet) {\n         (false, false) => Verbosity::Normal,\n         (false, true) => Verbosity::Quiet,\n         (true, false) => Verbosity::Verbose,\n         (true, true) => {\n-            print_usage_to_stderr(&opts, \"quiet mode and verbose mode are not compatible\");\n+            print_usage_to_stderr(\"quiet mode and verbose mode are not compatible\");\n             return FAILURE;\n         }\n     };\n \n-    if matches.opt_present(\"h\") {\n-        print_usage_to_stdout(&opts, \"\");\n-        return SUCCESS;\n-    }\n-\n-    if matches.opt_present(\"version\") {\n-        return handle_command_status(get_version(), &opts);\n+    if opts.version {\n+        return handle_command_status(get_version());\n     }\n \n-    let strategy = CargoFmtStrategy::from_matches(&matches);\n-    handle_command_status(format_crate(verbosity, &strategy), &opts)\n-}\n-\n-macro_rules! print_usage {\n-    ($print:ident, $opts:ident, $reason:expr) => {{\n-        let msg = format!(\"{}\\nusage: cargo fmt [options]\", $reason);\n-        $print!(\n-            \"{}\\nThis utility formats all bin and lib files of the current crate using rustfmt. \\\n-             Arguments after `--` are passed to rustfmt.\",\n-            $opts.usage(&msg)\n-        );\n-    }};\n-}\n+    let strategy = CargoFmtStrategy::from_opts(&opts);\n \n-fn print_usage_to_stdout(opts: &Options, reason: &str) {\n-    print_usage!(println, opts, reason);\n+    handle_command_status(format_crate(verbosity, &strategy, opts.rustfmt_options))\n }\n \n-fn print_usage_to_stderr(opts: &Options, reason: &str) {\n-    print_usage!(eprintln, opts, reason);\n+fn print_usage_to_stderr(reason: &str) {\n+    eprintln!(\"{}\", reason);\n+    let app = Opts::clap();\n+    app.write_help(&mut io::stderr())\n+        .expect(\"failed to write to stderr\");\n }\n \n #[derive(Debug, Clone, Copy, PartialEq)]\n@@ -112,10 +107,10 @@ pub enum Verbosity {\n     Quiet,\n }\n \n-fn handle_command_status(status: Result<i32, io::Error>, opts: &getopts::Options) -> i32 {\n+fn handle_command_status(status: Result<i32, io::Error>) -> i32 {\n     match status {\n         Err(e) => {\n-            print_usage_to_stderr(opts, &e.to_string());\n+            print_usage_to_stderr(&e.to_string());\n             FAILURE\n         }\n         Ok(status) => status,\n@@ -142,8 +137,11 @@ fn get_version() -> Result<i32, io::Error> {\n     }\n }\n \n-fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32, io::Error> {\n-    let rustfmt_args = get_fmt_args();\n+fn format_crate(\n+    verbosity: Verbosity,\n+    strategy: &CargoFmtStrategy,\n+    rustfmt_args: Vec<String>,\n+) -> Result<i32, io::Error> {\n     let targets = if rustfmt_args\n         .iter()\n         .any(|s| [\"--print-config\", \"-h\", \"--help\", \"-V\", \"--version\"].contains(&s.as_str()))\n@@ -157,11 +155,6 @@ fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32\n     run_rustfmt(&targets, &rustfmt_args, verbosity)\n }\n \n-fn get_fmt_args() -> Vec<String> {\n-    // All arguments after -- are passed to rustfmt.\n-    env::args().skip_while(|a| a != \"--\").skip(1).collect()\n-}\n-\n /// Target uses a `path` field for equality and hashing.\n #[derive(Debug)]\n pub struct Target {\n@@ -223,11 +216,11 @@ pub enum CargoFmtStrategy {\n }\n \n impl CargoFmtStrategy {\n-    pub fn from_matches(matches: &Matches) -> CargoFmtStrategy {\n-        match (matches.opt_present(\"all\"), matches.opt_present(\"p\")) {\n-            (false, false) => CargoFmtStrategy::Root,\n+    pub fn from_opts(opts: &Opts) -> CargoFmtStrategy {\n+        match (opts.format_all, opts.packages.is_empty()) {\n+            (false, true) => CargoFmtStrategy::Root,\n             (true, _) => CargoFmtStrategy::All,\n-            (false, true) => CargoFmtStrategy::Some(matches.opt_strs(\"p\")),\n+            (false, false) => CargoFmtStrategy::Some(opts.packages.clone()),\n         }\n     }\n }\n@@ -403,3 +396,133 @@ fn get_cargo_metadata(manifest_path: Option<&Path>) -> Result<cargo_metadata::Me\n         Err(error) => Err(io::Error::new(io::ErrorKind::Other, error.to_string())),\n     }\n }\n+\n+#[cfg(test)]\n+mod cargo_fmt_tests {\n+    use super::*;\n+\n+    #[test]\n+    fn default_options() {\n+        let empty: Vec<String> = vec![];\n+        let o = Opts::from_iter(&empty);\n+        assert_eq!(false, o.quiet);\n+        assert_eq!(false, o.verbose);\n+        assert_eq!(false, o.version);\n+        assert_eq!(empty, o.packages);\n+        assert_eq!(empty, o.rustfmt_options);\n+        assert_eq!(false, o.format_all);\n+    }\n+\n+    #[test]\n+    fn good_options() {\n+        let o = Opts::from_iter(&[\n+            \"test\",\n+            \"-q\",\n+            \"-p\",\n+            \"p1\",\n+            \"-p\",\n+            \"p2\",\n+            \"--\",\n+            \"--edition\",\n+            \"2018\",\n+        ]);\n+        assert_eq!(true, o.quiet);\n+        assert_eq!(false, o.verbose);\n+        assert_eq!(false, o.version);\n+        assert_eq!(vec![\"p1\", \"p2\"], o.packages);\n+        assert_eq!(vec![\"--edition\", \"2018\"], o.rustfmt_options);\n+        assert_eq!(false, o.format_all);\n+    }\n+\n+    #[test]\n+    fn unexpected_option() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"unexpected\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn unexpected_flag() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"--flag\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn mandatory_separator() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"--check\"])\n+                .is_err()\n+        );\n+        assert!(\n+            !Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"--\", \"--check\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn multiple_packages_one_by_one() {\n+        let o = Opts::from_iter(&[\n+            \"test\",\n+            \"-p\",\n+            \"package1\",\n+            \"--package\",\n+            \"package2\",\n+            \"-p\",\n+            \"package3\",\n+        ]);\n+        assert_eq!(3, o.packages.len());\n+    }\n+\n+    #[test]\n+    fn multiple_packages_grouped() {\n+        let o = Opts::from_iter(&[\n+            \"test\",\n+            \"--package\",\n+            \"package1\",\n+            \"package2\",\n+            \"-p\",\n+            \"package3\",\n+            \"package4\",\n+        ]);\n+        assert_eq!(4, o.packages.len());\n+    }\n+\n+    #[test]\n+    fn empty_packages_1() {\n+        assert!(Opts::clap().get_matches_from_safe(&[\"test\", \"-p\"]).is_err());\n+    }\n+\n+    #[test]\n+    fn empty_packages_2() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"-p\", \"--\", \"--check\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn empty_packages_3() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"-p\", \"--verbose\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn empty_packages_4() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"-p\", \"--check\"])\n+                .is_err()\n+        );\n+    }\n+}"}]}