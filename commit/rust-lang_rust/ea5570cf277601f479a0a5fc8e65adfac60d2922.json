{"sha": "ea5570cf277601f479a0a5fc8e65adfac60d2922", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTU3MGNmMjc3NjAxZjQ3OWEwYTVmYzhlNjVhZGZhYzYwZDI5MjI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-06-16T05:33:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-29T08:10:58Z"}, "message": "Redefine range validity\n\nUses `x.offset(i)` must be valid for all `i` in `0..count`.", "tree": {"sha": "fce43cd836c87fcb38dbc7fdfca7b02ec2d3ea09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce43cd836c87fcb38dbc7fdfca7b02ec2d3ea09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5570cf277601f479a0a5fc8e65adfac60d2922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5570cf277601f479a0a5fc8e65adfac60d2922", "html_url": "https://github.com/rust-lang/rust/commit/ea5570cf277601f479a0a5fc8e65adfac60d2922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5570cf277601f479a0a5fc8e65adfac60d2922/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40585f2483b6aabe0107662727c906839717555", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40585f2483b6aabe0107662727c906839717555", "html_url": "https://github.com/rust-lang/rust/commit/e40585f2483b6aabe0107662727c906839717555"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "43dcc180b862327ec6d86270a7fd0757345b4935", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ea5570cf277601f479a0a5fc8e65adfac60d2922/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5570cf277601f479a0a5fc8e65adfac60d2922/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ea5570cf277601f479a0a5fc8e65adfac60d2922", "patch": "@@ -976,17 +976,17 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n-    /// * Both `src` and `dst` must be [valid].\n-    ///\n     /// * Both `src` and `dst` must be properly aligned.\n     ///\n-    /// * `src.offset(count-1)` must be [valid]. In other words, the region of\n-    ///   memory which begins at `src` and has a length of `count *\n-    ///   size_of::<T>()` bytes must belong to a single, live allocation.\n+    /// * `src.offset(i)` must be [valid] for all `i` in `0..count`. In other\n+    ///   words, the region of memory which begins at `src` and has a length of\n+    ///   `count * size_of::<T>()` bytes must belong to a single, live\n+    ///   allocation.\n     ///\n-    /// * `dst.offset(count-1)` must be [valid]. In other words, the region of\n-    ///   memory which begins at `dst` and has a length of `count *\n-    ///   size_of::<T>()` bytes must belong to a single, live allocation.\n+    /// * `dst.offset(i)` must be [valid] for all `i` in `0..count`. In other\n+    ///   words, the region of memory which begins at `dst` and has a length of\n+    ///   `count * size_of::<T>()` bytes must belong to a single, live\n+    ///   allocation.\n     ///\n     /// * The two regions of memory must *not* overlap.\n     ///\n@@ -1064,17 +1064,17 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n-    /// * Both `src` and `dst` must be [valid].\n-    ///\n     /// * Both `src` and `dst` must be properly aligned.\n     ///\n-    /// * `src.offset(count-1)` must be [valid]. In other words, the region of\n-    ///   memory which begins at `src` and has a length of `count *\n-    ///   size_of::<T>()` bytes must belong to a single, live allocation.\n+    /// * `src.offset(i)` must be [valid] for all `i` in `0..count`. In other\n+    ///   words, the region of memory which begins at `src` and has a length of\n+    ///   `count * size_of::<T>()` bytes must belong to a single, live\n+    ///   allocation.\n     ///\n-    /// * `dst.offset(count-1)` must be [valid]. In other words, the region of\n-    ///   memory which begins at `dst` and has a length of `count *\n-    ///   size_of::<T>()` bytes must belong to a single, live allocation.\n+    /// * `dst.offset(i)` must be [valid] for all `i` in `0..count`. In other\n+    ///   words, the region of memory which begins at `dst` and has a length of\n+    ///   `count * size_of::<T>()` bytes must belong to a single, live\n+    ///   allocation.\n     ///\n     /// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n     /// whether `T` is [`Copy`].  If `T` is not [`Copy`], using both the values\n@@ -1116,14 +1116,13 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n-    /// * `dst` must be [valid].\n-    ///\n-    /// * `dst.offset(count-1)` must be [valid]. In other words, the region of\n-    ///   memory which begins at `dst` and has a length of `count *\n-    ///   size_of::<T>()` bytes must belong to a single, live allocation.\n-    ///\n     /// * `dst` must be properly aligned.\n     ///\n+    /// * `dst.offset(i)` must be [valid] for all `i` in `0..count`. In other\n+    ///   words, the region of memory which begins at `dst` and has a length of\n+    ///   `count * size_of::<T>()` bytes must belong to a single, live\n+    ///   allocation.\n+    ///\n     /// Additionally, the caller must ensure that writing `count *\n     /// size_of::<T>()` bytes to the given region of memory results in a valid\n     /// value of `T`. Creating an invalid value of `T` can result in undefined"}, {"sha": "7cbb4462d06d856de49ef5598b4e5b8a42c1ee64", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea5570cf277601f479a0a5fc8e65adfac60d2922/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5570cf277601f479a0a5fc8e65adfac60d2922/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ea5570cf277601f479a0a5fc8e65adfac60d2922", "patch": "@@ -240,17 +240,15 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * Both `x` and `y` must be [valid].\n-///\n /// * Both `x` and `y` must be properly aligned.\n ///\n-/// * `x.offset(count-1)` must be [valid]. In other words, the region of memory\n-///   which begins at `x` and has a length of `count * size_of::<T>()` bytes\n-///   must belong to a single, live allocation.\n+/// * `x.offset(i)` must be [valid] for all `i` in `0..count`. In other words,\n+///   the region of memory which begins at `x` and has a length of `count *\n+///   size_of::<T>()` bytes must belong to a single, live allocation.\n ///\n-/// * `y.offset(count-1)` must be [valid]. In other words, the region of memory\n-///   which begins at `y` and has a length of `count * size_of::<T>()` bytes\n-///   must belong to a single, live allocation.\n+/// * `y.offset(i)` must be [valid] for all `i` in `0..count`. In other words,\n+///   the region of memory which begins at `y` and has a length of `count *\n+///   size_of::<T>()` bytes must belong to a single, live allocation.\n ///\n /// * The two regions of memory must *not* overlap.\n ///"}]}