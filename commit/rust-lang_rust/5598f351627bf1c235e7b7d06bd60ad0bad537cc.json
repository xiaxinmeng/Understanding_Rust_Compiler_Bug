{"sha": "5598f351627bf1c235e7b7d06bd60ad0bad537cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OThmMzUxNjI3YmYxYzIzNWU3YjdkMDZiZDYwYWQwYmFkNTM3Y2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-25T01:44:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-28T23:25:09Z"}, "message": "Suggest solutions for `fn foo(&foo: Foo)`", "tree": {"sha": "bb8633f216aea1551cfb92209ab7a1072d0f9d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8633f216aea1551cfb92209ab7a1072d0f9d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5598f351627bf1c235e7b7d06bd60ad0bad537cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5598f351627bf1c235e7b7d06bd60ad0bad537cc", "html_url": "https://github.com/rust-lang/rust/commit/5598f351627bf1c235e7b7d06bd60ad0bad537cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5598f351627bf1c235e7b7d06bd60ad0bad537cc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecc85beb339aa8089d936e450b0d800bdf580ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecc85beb339aa8089d936e450b0d800bdf580ae", "html_url": "https://github.com/rust-lang/rust/commit/4ecc85beb339aa8089d936e450b0d800bdf580ae"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "fcd61b3c7c8c952e68cbf9c244b363d3c06f2842", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5598f351627bf1c235e7b7d06bd60ad0bad537cc", "patch": "@@ -27,6 +27,10 @@ use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn check_pat(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>) {\n+        self.check_pat_arg(pat, expected, false);\n+    }\n+\n+    pub fn check_pat_arg(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>, is_arg: bool) {\n         let tcx = self.tcx;\n \n         debug!(\"check_pat(pat={:?},expected={:?})\", pat, expected);\n@@ -212,7 +216,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             let mt = ty::TypeAndMut { ty: inner_ty, mutbl: mutbl };\n                             let region = self.next_region_var(infer::PatternRegion(pat.span));\n                             let rptr_ty = tcx.mk_ref(region, mt);\n-                            self.demand_eqtype(pat.span, expected, rptr_ty);\n+                            let err = self.demand_eqtype_diag(pat.span, expected, rptr_ty);\n+                            if let Some(mut err) = err {\n+                                if is_arg {\n+                                    if let Ok(snippet) = self.sess().codemap()\n+                                        .span_to_snippet(pat.span)\n+                                    {\n+                                        err.help(&format!(\"did you mean `{}: &{}`?\",\n+                                                          snippet,\n+                                                          expected));\n+                                        err.help(&format!(\"did you mean `{}: {}`?\",\n+                                                          &snippet[1..],\n+                                                          expected));\n+                                    }\n+                                }\n+                                err.emit();\n+                            }\n                             (rptr_ty, inner_ty)\n                         }\n                     };"}, {"sha": "8838eb9b1b3ff78b8f5eca14740a1852a5776d4b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5598f351627bf1c235e7b7d06bd60ad0bad537cc", "patch": "@@ -19,6 +19,7 @@ use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::ty::{self, AssociatedItem};\n+use errors::DiagnosticBuilder;\n \n use super::method::probe;\n \n@@ -38,20 +39,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn demand_eqtype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-        self.demand_eqtype_with_origin(&self.misc(sp), expected, actual);\n+        if let Some(mut err) = self.demand_eqtype_diag(sp, expected, actual) {\n+            err.emit();\n+        }\n+    }\n+\n+    pub fn demand_eqtype_diag(&self,\n+                             sp: Span,\n+                             expected: Ty<'tcx>,\n+                             actual: Ty<'tcx>) -> Option<DiagnosticBuilder<'tcx>> {\n+        self.demand_eqtype_with_origin(&self.misc(sp), expected, actual)\n     }\n \n     pub fn demand_eqtype_with_origin(&self,\n                                      cause: &ObligationCause<'tcx>,\n                                      expected: Ty<'tcx>,\n-                                     actual: Ty<'tcx>)\n-    {\n+                                     actual: Ty<'tcx>) -> Option<DiagnosticBuilder<'tcx>> {\n         match self.eq_types(false, cause, actual, expected) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n+                None\n             },\n             Err(e) => {\n-                self.report_mismatched_types(cause, expected, actual, e).emit();\n+                Some(self.report_mismatched_types(cause, expected, actual, e))\n             }\n         }\n     }"}, {"sha": "b89654138dd135624418aacf7ae79972c4c49a3d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5598f351627bf1c235e7b7d06bd60ad0bad537cc", "patch": "@@ -798,7 +798,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fcx.register_old_wf_obligation(arg_ty, arg.pat.span, traits::MiscObligation);\n \n         // Check the pattern.\n-        fcx.check_pat(&arg.pat, arg_ty);\n+        fcx.check_pat_arg(&arg.pat, arg_ty, true);\n         fcx.write_ty(arg.id, arg_ty);\n     }\n "}, {"sha": "4c124cdd60c0fbc34bdf3c2db05cd29425b6f036", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5598f351627bf1c235e7b7d06bd60ad0bad537cc", "patch": "@@ -505,7 +505,9 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n \n         let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n-        fcx.demand_eqtype_with_origin(&cause, rcvr_ty, self_arg_ty);\n+        if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, rcvr_ty, self_arg_ty) {\n+            err.emit();\n+        }\n     }\n \n     fn check_variances_for_type_defn(&self,"}, {"sha": "20998447737d24595e5cb8534735a2562e14ad6f", "filename": "src/test/ui/mismatched_types/issue-38371.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs?ref=5598f351627bf1c235e7b7d06bd60ad0bad537cc", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+}\n+\n+fn foo(&foo: Foo) {  // illegal syntax\n+}\n+\n+fn bar(foo: Foo) {  // legal\n+}\n+\n+fn qux(foo: &Foo) {  // legal\n+}\n+\n+fn zar(&foo: &Foo) {  // legal\n+}\n+\n+fn main() {}"}, {"sha": "8b27218f497d160c558aaa55c3a9c1ffa768cd4c", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5598f351627bf1c235e7b7d06bd60ad0bad537cc/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=5598f351627bf1c235e7b7d06bd60ad0bad537cc", "patch": "@@ -0,0 +1,13 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-38371.rs:14:8\n+   |\n+14 | fn foo(&foo: Foo) {  // illegal syntax\n+   |        ^^^^ expected struct `Foo`, found reference\n+   |\n+   = note: expected type `Foo`\n+   = note:    found type `&_`\n+   = help: did you mean `&foo: &Foo`?\n+   = help: did you mean `foo: Foo`?\n+\n+error: aborting due to previous error\n+"}]}