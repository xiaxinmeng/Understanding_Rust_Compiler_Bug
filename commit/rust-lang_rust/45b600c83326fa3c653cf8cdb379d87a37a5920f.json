{"sha": "45b600c83326fa3c653cf8cdb379d87a37a5920f", "node_id": "C_kwDOAAsO6NoAKDQ1YjYwMGM4MzMyNmZhM2M2NTNjZjhjZGIzNzlkODdhMzdhNTkyMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-22T14:25:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-22T14:25:23Z"}, "message": "Auto merge of #90161 - JohnTitor:rollup-1j2qc8m, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #87537 (Clarify undefined behaviour in binary heap, btree and hashset docs)\n - #88624 (Stabilize feature `saturating_div` for rust 1.58.0)\n - #89257 (Give better error for `macro_rules name`)\n - #89665 (Ensure that pushing empty path works as before on verbatim paths)\n - #89895 (Don't mark for loop iter expression as desugared)\n - #89922 (Update E0637 description to mention `&` w/o an explicit lifetime name)\n - #89944 (Change `Duration::[try_]from_secs_{f32, f64}` underflow error)\n - #89991 (rustc_ast: Turn `MutVisitor::token_visiting_enabled` into a constant)\n - #90028 (Reject closures in patterns)\n - #90069 (Fix const qualification when executed after promotion)\n - #90078 (Add a regression test for issue-83479)\n - #90114 (Add some tests for const_generics_defaults)\n - #90115 (Add test for issue #78561)\n - #90129 (triagebot: Treat `I-*nominated` like `I-nominated`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "809098dcb722acb2b0b01413f0dde039ed788428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/809098dcb722acb2b0b01413f0dde039ed788428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b600c83326fa3c653cf8cdb379d87a37a5920f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b600c83326fa3c653cf8cdb379d87a37a5920f", "html_url": "https://github.com/rust-lang/rust/commit/45b600c83326fa3c653cf8cdb379d87a37a5920f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b600c83326fa3c653cf8cdb379d87a37a5920f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a698baf6bfc61d85ce6e25122a092c60c7f21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a698baf6bfc61d85ce6e25122a092c60c7f21a", "html_url": "https://github.com/rust-lang/rust/commit/68a698baf6bfc61d85ce6e25122a092c60c7f21a"}, {"sha": "ea8a896ee83903bfcdd555b62bbfd19ebc430986", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8a896ee83903bfcdd555b62bbfd19ebc430986", "html_url": "https://github.com/rust-lang/rust/commit/ea8a896ee83903bfcdd555b62bbfd19ebc430986"}], "stats": {"total": 860, "additions": 692, "deletions": 168}, "files": [{"sha": "74def2bab1bfa2a58319e728f6765a2c9dc0f081", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -37,9 +37,7 @@ pub trait MutVisitor: Sized {\n     /// Mutable token visiting only exists for the `macro_rules` token marker and should not be\n     /// used otherwise. Token visitor would be entirely separate from the regular visitor if\n     /// the marker didn't have to visit AST fragments in nonterminal tokens.\n-    fn token_visiting_enabled(&self) -> bool {\n-        false\n-    }\n+    const VISIT_TOKENS: bool = false;\n \n     // Methods in this trait have one of three forms:\n     //\n@@ -363,7 +361,7 @@ pub fn visit_mac_args<T: MutVisitor>(args: &mut MacArgs, vis: &mut T) {\n         }\n         MacArgs::Eq(eq_span, token) => {\n             vis.visit_span(eq_span);\n-            if vis.token_visiting_enabled() {\n+            if T::VISIT_TOKENS {\n                 visit_token(token, vis);\n             } else {\n                 // The value in `#[key = VALUE]` must be visited as an expression for backward\n@@ -682,7 +680,7 @@ pub fn visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n pub fn visit_tts<T: MutVisitor>(TokenStream(tts): &mut TokenStream, vis: &mut T) {\n-    if vis.token_visiting_enabled() && !tts.is_empty() {\n+    if T::VISIT_TOKENS && !tts.is_empty() {\n         let tts = Lrc::make_mut(tts);\n         visit_vec(tts, |(tree, _is_joint)| visit_tt(tree, vis));\n     }\n@@ -692,14 +690,14 @@ pub fn visit_attr_annotated_tts<T: MutVisitor>(\n     AttrAnnotatedTokenStream(tts): &mut AttrAnnotatedTokenStream,\n     vis: &mut T,\n ) {\n-    if vis.token_visiting_enabled() && !tts.is_empty() {\n+    if T::VISIT_TOKENS && !tts.is_empty() {\n         let tts = Lrc::make_mut(tts);\n         visit_vec(tts, |(tree, _is_joint)| visit_attr_annotated_tt(tree, vis));\n     }\n }\n \n pub fn visit_lazy_tts_opt_mut<T: MutVisitor>(lazy_tts: Option<&mut LazyTokenStream>, vis: &mut T) {\n-    if vis.token_visiting_enabled() {\n+    if T::VISIT_TOKENS {\n         if let Some(lazy_tts) = lazy_tts {\n             let mut tts = lazy_tts.create_token_stream();\n             visit_attr_annotated_tts(&mut tts, vis);"}, {"sha": "405e9035c4c1922f392a6b6502ff7d36d6cec885", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1332,15 +1332,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Block,\n         opt_label: Option<Label>,\n     ) -> hir::Expr<'hir> {\n-        let orig_head_span = head.span;\n         // expand <head>\n-        let mut head = self.lower_expr_mut(head);\n-        let desugared_span = self.mark_span_with_reason(\n-            DesugaringKind::ForLoop(ForLoopLoc::Head),\n-            orig_head_span,\n-            None,\n-        );\n-        head.span = self.lower_span(desugared_span);\n+        let head = self.lower_expr_mut(head);\n+        let desugared_span =\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), head.span, None);\n+        let e_span = self.lower_span(e.span);\n \n         let iter = Ident::with_dummy_span(sym::iter);\n \n@@ -1354,23 +1350,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `::std::option::Option::Some(val) => __next = val`\n         let pat_arm = {\n             let val_ident = Ident::with_dummy_span(sym::val);\n-            let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n-            let val_expr = self.expr_ident(pat.span, val_ident, val_pat_hid);\n-            let next_expr = self.expr_ident(pat.span, next_ident, next_pat_hid);\n+            let pat_span = self.lower_span(pat.span);\n+            let (val_pat, val_pat_hid) = self.pat_ident(pat_span, val_ident);\n+            let val_expr = self.expr_ident(pat_span, val_ident, val_pat_hid);\n+            let next_expr = self.expr_ident(pat_span, next_ident, next_pat_hid);\n             let assign = self.arena.alloc(self.expr(\n-                pat.span,\n-                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat.span)),\n+                pat_span,\n+                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat_span)),\n                 ThinVec::new(),\n             ));\n-            let some_pat = self.pat_some(pat.span, val_pat);\n+            let some_pat = self.pat_some(pat_span, val_pat);\n             self.arm(some_pat, assign)\n         };\n \n         // `::std::option::Option::None => break`\n         let break_arm = {\n             let break_expr =\n-                self.with_loop_scope(e.id, |this| this.expr_break_alloc(e.span, ThinVec::new()));\n-            let pat = self.pat_none(e.span);\n+                self.with_loop_scope(e.id, |this| this.expr_break_alloc(e_span, ThinVec::new()));\n+            let pat = self.pat_none(e_span);\n             self.arm(pat, break_expr)\n         };\n \n@@ -1416,10 +1413,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n         let body_expr = self.expr_block(body_block, ThinVec::new());\n-        let body_stmt = self.stmt_expr(body.span, body_expr);\n+        let body_stmt = self.stmt_expr(body_block.span, body_expr);\n \n         let loop_block = self.block_all(\n-            e.span,\n+            e_span,\n             arena_vec![self; next_let, match_stmt, pat_let, body_stmt],\n             None,\n         );\n@@ -1429,7 +1426,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             loop_block,\n             self.lower_label(opt_label),\n             hir::LoopSource::ForLoop,\n-            self.lower_span(e.span.with_hi(orig_head_span.hi())),\n+            self.lower_span(e_span.with_hi(head.span.hi())),\n         );\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: self.lower_node_id(e.id),\n@@ -1442,7 +1439,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let into_iter_span = self.mark_span_with_reason(\n             DesugaringKind::ForLoop(ForLoopLoc::IntoIter),\n-            orig_head_span,\n+            head.span,\n             None,\n         );\n \n@@ -1458,7 +1455,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // #82462: to correctly diagnose borrow errors, the block that contains\n         // the iter expr needs to have a span that covers the loop body.\n         let desugared_full_span =\n-            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e.span, None);\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e_span, None);\n \n         let match_expr = self.arena.alloc(self.expr_match(\n             desugared_full_span,"}, {"sha": "439c728798d3a42b1b8c1717fd61a4a873103820", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n-use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -247,6 +246,36 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         place_name, partially_str, loop_message\n                                     ),\n                                 );\n+                                let sess = self.infcx.tcx.sess;\n+                                let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n+                                // If we have a `&mut` ref, we need to reborrow.\n+                                if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n+                                    // If we are in a loop this will be suggested later.\n+                                    if !is_loop_move {\n+                                        err.span_suggestion_verbose(\n+                                            move_span.shrink_to_lo(),\n+                                            &format!(\n+                                                \"consider creating a fresh reborrow of {} here\",\n+                                                self.describe_place(moved_place.as_ref())\n+                                                    .map(|n| format!(\"`{}`\", n))\n+                                                    .unwrap_or_else(\n+                                                        || \"the mutable reference\".to_string()\n+                                                    ),\n+                                            ),\n+                                            \"&mut *\".to_string(),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                    }\n+                                } else if let Ok(snippet) =\n+                                    sess.source_map().span_to_snippet(move_span)\n+                                {\n+                                    err.span_suggestion(\n+                                        move_span,\n+                                        \"consider borrowing to avoid moving into the for loop\",\n+                                        format!(\"&{}\", snippet),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             } else {\n                                 err.span_label(\n                                     fn_call_span,\n@@ -315,35 +344,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         in_pattern = true;\n                     }\n                 }\n-\n-                if let Some(DesugaringKind::ForLoop(_)) = move_span.desugaring_kind() {\n-                    let sess = self.infcx.tcx.sess;\n-                    let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n-                    // If we have a `&mut` ref, we need to reborrow.\n-                    if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n-                        // If we are in a loop this will be suggested later.\n-                        if !is_loop_move {\n-                            err.span_suggestion_verbose(\n-                                move_span.shrink_to_lo(),\n-                                &format!(\n-                                    \"consider creating a fresh reborrow of {} here\",\n-                                    self.describe_place(moved_place.as_ref())\n-                                        .map(|n| format!(\"`{}`\", n))\n-                                        .unwrap_or_else(|| \"the mutable reference\".to_string()),\n-                                ),\n-                                \"&mut *\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    } else if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n-                        err.span_suggestion(\n-                            move_span,\n-                            \"consider borrowing to avoid moving into the for loop\",\n-                            format!(\"&{}\", snippet),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n             }\n \n             use_spans.var_span_label_path_only("}, {"sha": "692c20d7dfe34ebed24443a863b7966d356528c7", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -5,11 +5,10 @@ use rustc_middle::ty;\n use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n-use rustc_span::source_map::DesugaringKind;\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n-use crate::diagnostics::UseSpans;\n+use crate::diagnostics::{FnSelfUseKind, UseSpans};\n use crate::prefixes::PrefixSet;\n use crate::MirBorrowckCtxt;\n \n@@ -400,19 +399,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             | ty::Opaque(def_id, _) => def_id,\n             _ => return err,\n         };\n-        let is_option = self.infcx.tcx.is_diagnostic_item(sym::Option, def_id);\n-        let is_result = self.infcx.tcx.is_diagnostic_item(sym::Result, def_id);\n-        if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n+        let diag_name = self.infcx.tcx.get_diagnostic_name(def_id);\n+        if matches!(diag_name, Some(sym::Option | sym::Result))\n+            && use_spans.map_or(true, |v| !v.for_closure())\n+        {\n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n-                &format!(\n-                    \"consider borrowing the `{}`'s content\",\n-                    if is_option { \"Option\" } else { \"Result\" }\n-                ),\n+                &format!(\"consider borrowing the `{}`'s content\", diag_name.unwrap()),\n                 \".as_ref()\".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n-        } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_))) {\n+        } else if let Some(UseSpans::FnSelfUse {\n+            kind: FnSelfUseKind::Normal { implicit_into_iter: true, .. },\n+            ..\n+        }) = use_spans\n+        {\n             let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n                 Some(def_id) => self.infcx.tcx.infer_ctxt().enter(|infcx| {\n                     type_known_to_meet_bound_modulo_regions("}, {"sha": "aaeb1eeb04397cdd2ffa0b74797ede607f30b264", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -46,6 +46,9 @@ pub trait Qualif {\n     /// Whether this `Qualif` is cleared when a local is moved from.\n     const IS_CLEARED_ON_MOVE: bool = false;\n \n+    /// Whether this `Qualif` might be evaluated after the promotion and can encounter a promoted.\n+    const ALLOW_PROMOTED: bool = false;\n+\n     /// Extracts the field of `ConstQualifs` that corresponds to this `Qualif`.\n     fn in_qualifs(qualifs: &ConstQualifs) -> bool;\n \n@@ -129,6 +132,7 @@ pub struct NeedsNonConstDrop;\n impl Qualif for NeedsNonConstDrop {\n     const ANALYSIS_NAME: &'static str = \"flow_needs_nonconst_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n+    const ALLOW_PROMOTED: bool = true;\n \n     fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n         qualifs.needs_non_const_drop\n@@ -310,9 +314,12 @@ where\n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n         if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted }) = ct.val {\n-            assert!(promoted.is_none());\n+            // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n+            // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n+            // check performed after the promotion. Verify that with an assertion.\n+            assert!(promoted.is_none() || Q::ALLOW_PROMOTED);\n             // Don't peek inside trait associated constants.\n-            if cx.tcx.trait_of_item(def.did).is_none() {\n+            if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {\n                 let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n                     cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n                 } else {"}, {"sha": "62d5565df27989e3b2fa667b0e701dff7ddaa3c0", "filename": "compiler/rustc_error_codes/src/error_codes/E0637.md", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0637.md", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0637.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0637.md?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1,35 +1,51 @@\n-An underscore `_` character has been used as the identifier for a lifetime.\n+`'_` lifetime name or `&T` without an explicit lifetime name has been used\n+on illegal place.\n \n Erroneous code example:\n \n ```compile_fail,E0106,E0637\n-fn longest<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n-         //^^ `'_` is a reserved lifetime name\n+fn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n+                     //^^ `'_` is a reserved lifetime name\n     if str1.len() > str2.len() {\n         str1\n     } else {\n         str2\n     }\n }\n+\n+fn and_without_explicit_lifetime<T>()\n+where\n+    T: Into<&u32>,\n+          //^ `&` without an explicit lifetime name\n+{\n+}\n ```\n \n-`'_`, cannot be used as a lifetime identifier because it is a reserved for the\n-anonymous lifetime. To fix this, use a lowercase letter such as 'a, or a series\n-of lowercase letters such as `'foo`.  For more information, see [the\n-book][bk-no].  For more information on using the anonymous lifetime in rust\n-nightly, see [the nightly book][bk-al].\n+First, `'_` cannot be used as a lifetime identifier in some places\n+because it is a reserved for the anonymous lifetime. Second, `&T`\n+without an explicit lifetime name cannot also be used in some places.\n+To fix them, use a lowercase letter such as `'a`, or a series\n+of lowercase letters such as `'foo`. For more information about lifetime\n+identifier, see [the book][bk-no]. For more information on using\n+the anonymous lifetime in Rust 2018, see [the Rust 2018 blog post][blog-al].\n \n Corrected example:\n \n ```\n-fn longest<'a>(str1: &'a str, str2: &'a str) -> &'a str {\n+fn underscore_lifetime<'a>(str1: &'a str, str2: &'a str) -> &'a str {\n     if str1.len() > str2.len() {\n         str1\n     } else {\n         str2\n     }\n }\n+\n+fn and_without_explicit_lifetime<'foo, T>()\n+where\n+    T: Into<&'foo u32>,\n+{\n+}\n ```\n \n [bk-no]: https://doc.rust-lang.org/book/appendix-02-operators.html#non-operator-symbols\n-[bk-al]: https://doc.rust-lang.org/nightly/edition-guide/rust-2018/ownership-and-lifetimes/the-anonymous-lifetime.html\n+[blog-al]: https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#more-lifetime-elision-rules"}, {"sha": "88e1623012ba0a43f0b475e828c25e7f99485055", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -19,9 +19,7 @@ use std::mem;\n struct Marker(LocalExpnId, Transparency);\n \n impl MutVisitor for Marker {\n-    fn token_visiting_enabled(&self) -> bool {\n-        true\n-    }\n+    const VISIT_TOKENS: bool = true;\n \n     fn visit_span(&mut self, span: &mut Span) {\n         *span = span.apply_mark(self.0.to_expn_id(), self.1)"}, {"sha": "8974d45b4d8cfeaddced965b4cc7eab4db5ed3ec", "filename": "compiler/rustc_expand/src/mut_visit/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -15,9 +15,8 @@ fn print_crate_items(krate: &ast::Crate) -> String {\n struct ToZzIdentMutVisitor;\n \n impl MutVisitor for ToZzIdentMutVisitor {\n-    fn token_visiting_enabled(&self) -> bool {\n-        true\n-    }\n+    const VISIT_TOKENS: bool = true;\n+\n     fn visit_ident(&mut self, ident: &mut Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }"}, {"sha": "d8883b0e66dba77be936bb086f2197af5d384880", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -134,9 +134,8 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                     Applicability::MachineApplicable,\n                 );\n                 if self.for_expr_span == expr.span {\n-                    let expr_span = expr.span.ctxt().outer_expn_data().call_site;\n                     diag.span_suggestion(\n-                        receiver_arg.span.shrink_to_hi().to(expr_span.shrink_to_hi()),\n+                        receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n                         \"or remove `.into_iter()` to iterate by value\",\n                         String::new(),\n                         Applicability::MaybeIncorrect,"}, {"sha": "dd16e3cde75aeff584ab37c15de47aeb22a94d62", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -130,6 +130,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTy::Opaque => {\n                         \"opaque types cannot be used in patterns\".to_string()\n                     }\n+                    traits::NonStructuralMatchTy::Closure => {\n+                        \"closures cannot be used in patterns\".to_string()\n+                    }\n                     traits::NonStructuralMatchTy::Generator => {\n                         \"generators cannot be used in patterns\".to_string()\n                     }"}, {"sha": "d2167c7a5db0c8f642f61c047f5b3b54b39372eb", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -279,9 +279,9 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Macro) {\n             // MACROS 2.0 ITEM\n             self.parse_item_decl_macro(lo)?\n-        } else if self.is_macro_rules_item() {\n+        } else if let IsMacroRulesItem::Yes { has_bang } = self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n-            self.parse_item_macro_rules(vis)?\n+            self.parse_item_macro_rules(vis, has_bang)?\n         } else if vis.kind.is_pub() && self.isnt_macro_invocation() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n@@ -300,7 +300,7 @@ impl<'a> Parser<'a> {\n         || self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n         || self.check_auto_or_unsafe_trait_item() // no: `auto::b`, yes: `auto trait X { .. }`\n         || self.is_async_fn() // no(2015): `async::b`, yes: `async fn`\n-        || self.is_macro_rules_item() // no: `macro_rules::b`, yes: `macro_rules! mac`\n+        || matches!(self.is_macro_rules_item(), IsMacroRulesItem::Yes{..}) // no: `macro_rules::b`, yes: `macro_rules! mac`\n     }\n \n     /// Are we sure this could not possibly be a macro invocation?\n@@ -1534,18 +1534,43 @@ impl<'a> Parser<'a> {\n         Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, macro_rules: false })))\n     }\n \n-    /// Is this unambiguously the start of a `macro_rules! foo` item definition?\n-    fn is_macro_rules_item(&mut self) -> bool {\n-        self.check_keyword(kw::MacroRules)\n-            && self.look_ahead(1, |t| *t == token::Not)\n-            && self.look_ahead(2, |t| t.is_ident())\n+    /// Is this a possibly malformed start of a `macro_rules! foo` item definition?\n+\n+    fn is_macro_rules_item(&mut self) -> IsMacroRulesItem {\n+        if self.check_keyword(kw::MacroRules) {\n+            let macro_rules_span = self.token.span;\n+\n+            if self.look_ahead(1, |t| *t == token::Not) && self.look_ahead(2, |t| t.is_ident()) {\n+                return IsMacroRulesItem::Yes { has_bang: true };\n+            } else if self.look_ahead(1, |t| (t.is_ident())) {\n+                // macro_rules foo\n+                self.struct_span_err(macro_rules_span, \"expected `!` after `macro_rules`\")\n+                    .span_suggestion(\n+                        macro_rules_span,\n+                        \"add a `!`\",\n+                        \"macro_rules!\".to_owned(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+\n+                return IsMacroRulesItem::Yes { has_bang: false };\n+            }\n+        }\n+\n+        IsMacroRulesItem::No\n     }\n \n     /// Parses a `macro_rules! foo { ... }` declarative macro.\n-    fn parse_item_macro_rules(&mut self, vis: &Visibility) -> PResult<'a, ItemInfo> {\n+    fn parse_item_macro_rules(\n+        &mut self,\n+        vis: &Visibility,\n+        has_bang: bool,\n+    ) -> PResult<'a, ItemInfo> {\n         self.expect_keyword(kw::MacroRules)?; // `macro_rules`\n-        self.expect(&token::Not)?; // `!`\n \n+        if has_bang {\n+            self.expect(&token::Not)?; // `!`\n+        }\n         let ident = self.parse_ident()?;\n \n         if self.eat(&token::Not) {\n@@ -2121,3 +2146,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n }\n+\n+enum IsMacroRulesItem {\n+    Yes { has_bang: bool },\n+    No,\n+}"}, {"sha": "a398e847b935458a003fab06e30ed423802e255c", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -17,6 +17,7 @@ pub enum NonStructuralMatchTy<'tcx> {\n     Dynamic,\n     Foreign,\n     Opaque,\n+    Closure,\n     Generator,\n     Projection,\n }\n@@ -154,6 +155,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             ty::Projection(..) => {\n                 return ControlFlow::Break(NonStructuralMatchTy::Projection);\n             }\n+            ty::Closure(..) => {\n+                return ControlFlow::Break(NonStructuralMatchTy::Closure);\n+            }\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n                 return ControlFlow::Break(NonStructuralMatchTy::Generator);\n             }\n@@ -197,7 +201,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 // First check all contained types and then tell the caller to continue searching.\n                 return ty.super_visit_with(self);\n             }\n-            ty::Closure(..) | ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n+            ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n             ty::Error(_) => {"}, {"sha": "d7620c68f2cae7cb62c8210f27ccc369d577a8b4", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -162,9 +162,9 @@ use super::SpecExtend;\n /// item's ordering relative to any other item, as determined by the [`Ord`]\n /// trait, changes while it is in the heap. This is normally only possible\n /// through [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\n-/// behavior resulting from such a logic error is not specified, but will\n-/// not result in undefined behavior. This could include panics, incorrect\n-/// results, aborts, memory leaks, and non-termination.\n+/// behavior resulting from such a logic error is not specified (it\n+/// could include panics, incorrect results, aborts, memory leaks, or\n+/// non-termination) but will not be undefined behavior.\n ///\n /// # Examples\n ///"}, {"sha": "07920a6dba61978514032192cbe0443b3655d4e2", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -61,9 +61,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n /// any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n-/// The behavior resulting from such a logic error is not specified, but will not result in\n-/// undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and\n-/// non-termination.\n+/// The behavior resulting from such a logic error is not specified (it could include panics,\n+/// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n+/// behavior.\n ///\n /// [B-Tree]: https://en.wikipedia.org/wiki/B-tree\n /// [`Cell`]: core::cell::Cell"}, {"sha": "237e0107f247585c169202c1c6afa5b5d35b174a", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -23,9 +23,9 @@ use super::Recover;\n /// It is a logic error for an item to be modified in such a way that the item's ordering relative\n /// to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n-/// The behavior resulting from such a logic error is not specified, but will not result in\n-/// undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and\n-/// non-termination.\n+/// The behavior resulting from such a logic error is not specified (it could include panics,\n+/// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n+/// behavior.\n ///\n /// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell"}, {"sha": "5ef2558a5fe4bff2fa464e32bac10af17e6a1819", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1055,22 +1055,17 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(saturating_div)]\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".saturating_div(2), 2);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_div(-1), \", stringify!($SelfT), \"::MIN + 1);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_div(-1), \", stringify!($SelfT), \"::MAX);\")]\n         ///\n         /// ```\n         ///\n         /// ```should_panic\n-        /// #![feature(saturating_div)]\n-        ///\n         #[doc = concat!(\"let _ = 1\", stringify!($SelfT), \".saturating_div(0);\")]\n         ///\n         /// ```\n-        #[unstable(feature = \"saturating_div\", issue = \"87920\")]\n-        #[rustc_const_unstable(feature = \"saturating_div\", issue = \"87920\")]\n+        #[stable(feature = \"saturating_div\", since = \"1.58.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "ba81f3f9fd6a0158b00262d5dfb7ad168080f13b", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -273,7 +273,7 @@ macro_rules! saturating_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(saturating_int_impl, saturating_div)]\n+        /// #![feature(saturating_int_impl)]\n         /// use std::num::Saturating;\n         ///\n         #[doc = concat!(\"assert_eq!(Saturating(2\", stringify!($t), \"), Saturating(5\", stringify!($t), \") / Saturating(2));\")]\n@@ -282,7 +282,7 @@ macro_rules! saturating_impl {\n         /// ```\n         ///\n         /// ```should_panic\n-        /// #![feature(saturating_int_impl, saturating_div)]\n+        /// #![feature(saturating_int_impl)]\n         /// use std::num::Saturating;\n         ///\n         #[doc = concat!(\"let _ = Saturating(0\", stringify!($t), \") / Saturating(0);\")]"}, {"sha": "507ff516a8f2813124b924665d6653885549dedd", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1120,20 +1120,15 @@ macro_rules! uint_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(saturating_div)]\n-        ///\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".saturating_div(2), 2);\")]\n         ///\n         /// ```\n         ///\n         /// ```should_panic\n-        /// #![feature(saturating_div)]\n-        ///\n         #[doc = concat!(\"let _ = 1\", stringify!($SelfT), \".saturating_div(0);\")]\n         ///\n         /// ```\n-        #[unstable(feature = \"saturating_div\", issue = \"87920\")]\n-        #[rustc_const_unstable(feature = \"saturating_div\", issue = \"87920\")]\n+        #[stable(feature = \"saturating_div\", since = \"1.58.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "7114f2d652e5407f006bdf6894d614270e79cd60", "filename": "library/core/src/time.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -756,7 +756,7 @@ impl Duration {\n         } else if nanos >= MAX_NANOS_F64 {\n             Err(FromSecsError { kind: FromSecsErrorKind::Overflow })\n         } else if nanos < 0.0 {\n-            Err(FromSecsError { kind: FromSecsErrorKind::Underflow })\n+            Err(FromSecsError { kind: FromSecsErrorKind::Negative })\n         } else {\n             let nanos = nanos as u128;\n             Ok(Duration {\n@@ -818,7 +818,7 @@ impl Duration {\n         } else if nanos >= MAX_NANOS_F32 {\n             Err(FromSecsError { kind: FromSecsErrorKind::Overflow })\n         } else if nanos < 0.0 {\n-            Err(FromSecsError { kind: FromSecsErrorKind::Underflow })\n+            Err(FromSecsError { kind: FromSecsErrorKind::Negative })\n         } else {\n             let nanos = nanos as u128;\n             Ok(Duration {\n@@ -1274,11 +1274,9 @@ pub struct FromSecsError {\n impl FromSecsError {\n     const fn description(&self) -> &'static str {\n         match self.kind {\n-            FromSecsErrorKind::NonFinite => {\n-                \"got non-finite value when converting float to duration\"\n-            }\n+            FromSecsErrorKind::NonFinite => \"non-finite value when converting float to duration\",\n             FromSecsErrorKind::Overflow => \"overflow when converting float to duration\",\n-            FromSecsErrorKind::Underflow => \"underflow when converting float to duration\",\n+            FromSecsErrorKind::Negative => \"negative value when converting float to duration\",\n         }\n     }\n }\n@@ -1292,10 +1290,10 @@ impl fmt::Display for FromSecsError {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n enum FromSecsErrorKind {\n-    // Value is not a finite value (either infinity or NaN).\n+    // Value is not a finite value (either + or - infinity or NaN).\n     NonFinite,\n     // Value is too large to store in a `Duration`.\n     Overflow,\n-    // Value is less than `0.0`.\n-    Underflow,\n+    // Value is negative.\n+    Negative,\n }"}, {"sha": "546c43faecfdc6f5f3bbc5b15d16028bcfdd5361", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -38,8 +38,8 @@ use super::map::{map_try_reserve_error, RandomState};\n /// determined by the [`Eq`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or\n /// unsafe code. The behavior resulting from such a logic error is not\n-/// specified, but will not result in undefined behavior. This could include\n-/// panics, incorrect results, aborts, memory leaks, and non-termination.\n+/// specified (it could include panics, incorrect results, aborts, memory\n+/// leaks, or non-termination) but will not be undefined behavior.\n ///\n /// # Examples\n ///"}, {"sha": "e22748a4c8dc37c7262a6e4e9fcb8476050b9c14", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -324,7 +324,6 @@\n #![feature(ptr_internals)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n-#![feature(saturating_div)]\n #![feature(saturating_int_impl)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]"}, {"sha": "8f00d2260e4c60b42b7827b5a382be20c640c334", "filename": "library/std/src/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1208,6 +1208,9 @@ impl PathBuf {\n     /// * if `path` has a root but no prefix (e.g., `\\windows`), it\n     ///   replaces everything except for the prefix (if any) of `self`.\n     /// * if `path` has a prefix but no root, it replaces `self`.\n+    /// * if `self` has a verbatim prefix (e.g. `\\\\?\\C:\\windows`)\n+    ///   and `path` is not empty, the new path is normalized: all references\n+    ///   to `.` and `..` are removed.\n     ///\n     /// # Examples\n     ///\n@@ -1254,7 +1257,7 @@ impl PathBuf {\n             self.as_mut_vec().truncate(0);\n \n         // verbatim paths need . and .. removed\n-        } else if comps.prefix_verbatim() {\n+        } else if comps.prefix_verbatim() && !path.inner.is_empty() {\n             let mut buf: Vec<_> = comps.collect();\n             for c in path.components() {\n                 match c {"}, {"sha": "0a16ff2a721cefcaaf6be6373303296ffd189d15", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1271,6 +1271,7 @@ pub fn test_push() {\n         tp!(r\"\\\\?\\A:\\x\\y\", \"/foo\", r\"\\\\?\\A:\\foo\");\n         tp!(r\"\\\\?\\A:\", r\"..\\foo\\.\", r\"\\\\?\\A:\\foo\");\n         tp!(r\"\\\\?\\A:\\x\\y\", r\".\\foo\\.\", r\"\\\\?\\A:\\x\\y\\foo\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", r\"\", r\"\\\\?\\A:\\x\\y\\\");\n     }\n }\n "}, {"sha": "1b96cd54c3ed01b4baf623f9a0ab0c506de9f9c3", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -83,7 +83,7 @@ pub fn change_iteration_variable_pattern() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -108,7 +108,7 @@ pub fn change_iterable() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -183,7 +183,7 @@ pub fn add_loop_label_to_break() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn add_loop_label_to_continue() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;"}, {"sha": "5517bf8ac5fb221b7ac816962d84631454ce2612", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -2,7 +2,7 @@\n #![feature(staged_api)]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n-// FIXME(const_generics): It seems like we aren't testing the right thing here,\n+// FIXME(const_generics_defaults): It seems like we aren't testing the right thing here,\n // I would assume that we want the attributes to apply to the const parameter defaults\n // themselves.\n #![stable(feature = \"const_default_test\", since=\"none\")]"}, {"sha": "c7f14e47a9d64980ef15cb85691919c84e3862fd", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics_defaults)]\n+\n+// test that defaulted const params are not used to help type inference\n+\n+struct Foo<const N: u32 = 2>;\n+\n+impl<const N: u32> Foo<N> {\n+    fn foo() -> Self { loop {} }\n+}\n+\n+fn main() {\n+    let foo = Foo::<1>::foo();\n+    let foo = Foo::foo();\n+    //~^ error: type annotations needed for `Foo<{_: u32}>`\n+}"}, {"sha": "b57975e26f290b3667b35a347ef9609dc4f48878", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed for `Foo<{_: u32}>`\n+  --> $DIR/doesnt_infer.rs:13:15\n+   |\n+LL |     let foo = Foo::foo();\n+   |         ---   ^^^^^^^^ cannot infer the value of const parameter `N`\n+   |         |\n+   |         consider giving `foo` the explicit type `Foo<{_: u32}>`, where the type parameter `N` is specified\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "1447ebe5348f61395f756fa7d598e54fe248d9f0", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+\n+struct Uwu<const N: u32 = 1, const M: u32 = N>;\n+\n+trait Trait {}\n+impl<const N: u32> Trait for Uwu<N> {}\n+\n+fn rawr<const N: u32>() -> impl Trait {\n+    Uwu::<N>\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> { }\n+\n+impl<const N: u8> Traitor<N> for u32 {}\n+impl Traitor<1, 1> for u64 {}\n+\n+fn uwu<const N: u8>() -> impl Traitor<N> {\n+    1_u32\n+}\n+\n+fn owo() -> impl Traitor {\n+    1_u64\n+}\n+\n+fn main() {\n+    rawr::<3>();\n+    rawr::<7>();\n+    uwu::<{ u8::MAX }>();\n+    owo();\n+}"}, {"sha": "c989fc8338b902d85d23ba50ed15ee3f1b4f44b3", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,33 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Uwu<const N: u32 = 1, const M: u32 = N>;\n+\n+trait Trait {}\n+impl<const N: u32> Trait for Uwu<N> {}\n+\n+fn rawr() -> impl Trait {\n+    //~^ error: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+    Uwu::<10, 12>\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> { }\n+\n+impl<const N: u8> Traitor<N, 2> for u32 {}\n+impl Traitor<1, 2> for u64 {}\n+\n+\n+fn uwu<const N: u8>() -> impl Traitor<N> {\n+    //~^ error: the trait bound `u32: Traitor<N, N>` is not satisfied\n+    1_u32\n+}\n+\n+fn owo() -> impl Traitor {\n+    //~^ error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+    1_u64\n+}\n+\n+fn main() {\n+    rawr();\n+    uwu();\n+    owo();\n+}"}, {"sha": "cf28932177a7a093d60a7cb156cfefb52235e825", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:8:14\n+   |\n+LL | fn rawr() -> impl Trait {\n+   |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+   |\n+   = help: the following implementations were found:\n+             <Uwu<N> as Trait>\n+\n+error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:19:26\n+   |\n+LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n+   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <u32 as Traitor<N, 2_u8>>\n+\n+error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+  --> $DIR/rp_impl_trait_fail.rs:24:13\n+   |\n+LL | fn owo() -> impl Traitor {\n+   |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n+   |\n+   = help: the following implementations were found:\n+             <u64 as Traitor<1_u8, 2_u8>>\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e36f23fadb2721dacd6962f7014f7878c592afe9", "filename": "src/test/ui/const-generics/defaults/trait_objects.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+\n+trait Trait<const N: u8 = 12> {\n+    fn uwu(&self) -> u8 {\n+        N\n+    }\n+}\n+\n+impl Trait for u32 {}\n+\n+impl Trait<12> for u64 {\n+    fn uwu(&self) -> u8 {\n+        *self as u8\n+    }\n+}\n+\n+fn foo(arg: &dyn Trait) -> u8 {\n+    arg.uwu()\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> {\n+    fn owo(&self) -> u8 {\n+        M\n+    }\n+}\n+\n+impl Traitor<2> for bool { }\n+impl Traitor for u8 {\n+    fn owo(&self) -> u8 {\n+        *self\n+    }\n+}\n+\n+fn bar<const N: u8>(arg: &dyn Traitor<N>) -> u8 {\n+    arg.owo()\n+}\n+\n+fn main() {\n+    assert_eq!(foo(&10_u32), 12);\n+    assert_eq!(foo(&3_u64), 3);\n+\n+    assert_eq!(bar(&true), 2);\n+    assert_eq!(bar(&1_u8), 1);\n+}"}, {"sha": "09e4265a7a0ef9b760100dfb500406c9612e464f", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,32 @@\n+#![feature(const_generics_defaults)]\n+\n+trait Trait<const N: u8 = 12> {\n+    fn uwu(&self) -> u8 {\n+        N\n+    }\n+}\n+\n+impl Trait<2> for u32 {}\n+\n+fn foo(arg: &dyn Trait) -> u8 {\n+    arg.uwu()\n+}\n+\n+trait Traitor<const N: u8 = 1, const M: u8 = N> {\n+    fn owo(&self) -> u8 {\n+        M\n+    }\n+}\n+\n+impl Traitor<2, 3> for bool { }\n+\n+fn bar<const N: u8>(arg: &dyn Traitor<N>) -> u8 {\n+    arg.owo()\n+}\n+\n+fn main() {\n+    foo(&10_u32);\n+    //~^ error: the trait bound `u32: Trait` is not satisfied\n+    bar(&true);\n+    //~^ error: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+}"}, {"sha": "b097c8cd4bae1e2e850e05157757099a17a243cd", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `u32: Trait` is not satisfied\n+  --> $DIR/trait_objects_fail.rs:28:9\n+   |\n+LL |     foo(&10_u32);\n+   |     --- ^^^^^^^ the trait `Trait` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following implementations were found:\n+             <u32 as Trait<2_u8>>\n+   = note: required for the cast to the object type `dyn Trait`\n+\n+error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+  --> $DIR/trait_objects_fail.rs:30:9\n+   |\n+LL |     bar(&true);\n+   |     --- ^^^^^ the trait `Traitor<{_: u8}, {_: u8}>` is not implemented for `bool`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following implementations were found:\n+             <bool as Traitor<2_u8, 3_u8>>\n+   = note: required for the cast to the object type `dyn Traitor<{_: u8}, {_: u8}>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c171f292fd6988b6edfc8f2094e3e714c20574cd", "filename": "src/test/ui/const-generics/defaults/wfness.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,21 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n+//~^ error: evaluation of constant value failed\n+\n+trait Trait<const N: u8> {}\n+impl Trait<3> for () {}\n+struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+//~^ error: the trait bound `(): Trait<2_u8>` is not satisfied\n+\n+trait Traitor<T, const N: u8> {}\n+struct WhereClauseTooGeneric<T = u32, const N: u8 = 2>(T) where (): Traitor<T, N>;\n+\n+// no error on struct def\n+struct DependentDefaultWfness<const N: u8 = 1, T = WhereClause<N>>(T);\n+fn foo() -> DependentDefaultWfness {\n+    //~^ error: the trait bound `(): Trait<1_u8>` is not satisfied\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "9826af8802a27377ca326461dad1ddf409688d1a", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,38 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/wfness.rs:3:33\n+   |\n+LL | struct Ooopsies<const N: u8 = { u8::MAX + 1 }>;\n+   |                                 ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+\n+error[E0277]: the trait bound `(): Trait<2_u8>` is not satisfied\n+  --> $DIR/wfness.rs:8:47\n+   |\n+LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+   |                                               ^^^^^^^^ the trait `Trait<2_u8>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<3_u8>>\n+note: required by `WhereClause`\n+  --> $DIR/wfness.rs:8:1\n+   |\n+LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n+  --> $DIR/wfness.rs:16:13\n+   |\n+LL | fn foo() -> DependentDefaultWfness {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<1_u8>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<3_u8>>\n+note: required by a bound in `WhereClause`\n+  --> $DIR/wfness.rs:8:47\n+   |\n+LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n+   |                                               ^^^^^^^^ required by this bound in `WhereClause`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0080, E0277.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "94e7367b1fb765d9ecfa53aae01883d380046612", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -5,4 +5,7 @@ struct A<T = u32, const N: usize> {\n     arg: T,\n }\n \n+struct Foo<const N: u8 = 3, T>(T);\n+//~^ error: generic parameters with a default must be trailing\n+\n fn main() {}"}, {"sha": "143ce5c4fea7ed7512c58b18bcfcc6fbc6823ef1", "filename": "src/test/ui/const-generics/defaults/wrong-order.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -4,5 +4,11 @@ error: generic parameters with a default must be trailing\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n \n-error: aborting due to previous error\n+error: generic parameters with a default must be trailing\n+  --> $DIR/wrong-order.rs:8:18\n+   |\n+LL | struct Foo<const N: u8 = 3, T>(T);\n+   |                  ^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "7853ee41a90091c9991c942c5a09e0726ffd212b", "filename": "src/test/ui/consts/closure-structural-match-issue-90013.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconsts%2Fclosure-structural-match-issue-90013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconsts%2Fclosure-structural-match-issue-90013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fclosure-structural-match-issue-90013.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for issue 90013.\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+\n+fn main() {\n+    const { || {} };\n+}"}, {"sha": "6f2317a5a27a802aac4580ba0380114c45b6dc10", "filename": "src/test/ui/consts/precise-drop-with-promoted.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconsts%2Fprecise-drop-with-promoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fconsts%2Fprecise-drop-with-promoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprecise-drop-with-promoted.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,9 @@\n+// Regression test for issue #89938.\n+// check-pass\n+// compile-flags: --crate-type=lib\n+#![feature(const_precise_live_drops)]\n+\n+pub const fn f() {\n+    let _: Option<String> = None;\n+    let _: &'static Option<String> = &None;\n+}"}, {"sha": "382ce3ed01f34d4a0c16ded758903db59c287daa", "filename": "src/test/ui/error-codes/E0637.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Ferror-codes%2FE0637.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Ferror-codes%2FE0637.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0637.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1,9 +1,17 @@\n-struct Foo<'a: '_>(&'a u8); //~ ERROR cannot be used here\n-fn foo<'a: '_>(_: &'a u8) {} //~ ERROR cannot be used here\n+fn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n+    //~^ ERROR: `'_` cannot be used here [E0637]\n+    //~| ERROR: missing lifetime specifier\n+    if str1.len() > str2.len() {\n+        str1\n+    } else {\n+        str2\n+    }\n+}\n \n-struct Bar<'a>(&'a u8);\n-impl<'a: '_> Bar<'a> { //~ ERROR cannot be used here\n-  fn bar() {}\n+fn and_without_explicit_lifetime<T>()\n+where\n+    T: Into<&u32>, //~ ERROR: `&` without an explicit lifetime name cannot be used here [E0637]\n+{\n }\n \n fn main() {}"}, {"sha": "87aaba65a73adc431a8f24e3787ddda67edb05b2", "filename": "src/test/ui/error-codes/E0637.stderr", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Ferror-codes%2FE0637.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Ferror-codes%2FE0637.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0637.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -1,21 +1,28 @@\n error[E0637]: `'_` cannot be used here\n-  --> $DIR/E0637.rs:1:16\n+  --> $DIR/E0637.rs:1:24\n    |\n-LL | struct Foo<'a: '_>(&'a u8);\n-   |                ^^ `'_` is a reserved lifetime name\n+LL | fn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n+   |                        ^^ `'_` is a reserved lifetime name\n \n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/E0637.rs:2:12\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/E0637.rs:13:13\n    |\n-LL | fn foo<'a: '_>(_: &'a u8) {}\n-   |            ^^ `'_` is a reserved lifetime name\n+LL |     T: Into<&u32>,\n+   |             ^ explicit lifetime name needed here\n \n-error[E0637]: `'_` cannot be used here\n-  --> $DIR/E0637.rs:5:10\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/E0637.rs:1:62\n+   |\n+LL | fn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n+   |                                  -------        -------      ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `str1` or `str2`\n+help: consider introducing a named lifetime parameter\n    |\n-LL | impl<'a: '_> Bar<'a> {\n-   |          ^^ `'_` is a reserved lifetime name\n+LL | fn underscore_lifetime<'a, '_>(str1: &'a str, str2: &'a str) -> &'a str {\n+   |                        +++            ~~             ~~          ~~\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0637`.\n+Some errors have detailed explanations: E0106, E0637.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "b1aa3298bfa561cb0d5b1f03d1879ef471655466", "filename": "src/test/ui/macros/missing-bang-in-decl.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.fixed?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(unused_macros)]\n+\n+macro_rules! foo {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    () => {};\n+}\n+\n+macro_rules! bar {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    //~^^ ERROR macro names aren't followed by a `!`\n+    () => {};\n+}\n+\n+fn main() {}"}, {"sha": "8393f15fc52f4ae9bac2668476445704fd5659c1", "filename": "src/test/ui/macros/missing-bang-in-decl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(unused_macros)]\n+\n+macro_rules foo {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    () => {};\n+}\n+\n+macro_rules bar! {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    //~^^ ERROR macro names aren't followed by a `!`\n+    () => {};\n+}\n+\n+fn main() {}"}, {"sha": "dfabafb0a7ab8e21b8da95409a7bf1593ca07674", "filename": "src/test/ui/macros/missing-bang-in-decl.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,20 @@\n+error: expected `!` after `macro_rules`\n+  --> $DIR/missing-bang-in-decl.rs:5:1\n+   |\n+LL | macro_rules foo {\n+   | ^^^^^^^^^^^ help: add a `!`: `macro_rules!`\n+\n+error: expected `!` after `macro_rules`\n+  --> $DIR/missing-bang-in-decl.rs:10:1\n+   |\n+LL | macro_rules bar! {\n+   | ^^^^^^^^^^^ help: add a `!`: `macro_rules!`\n+\n+error: macro names aren't followed by a `!`\n+  --> $DIR/missing-bang-in-decl.rs:10:16\n+   |\n+LL | macro_rules bar! {\n+   |                ^ help: remove the `!`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "55147fcd1bd27b88a45ec737372932d8d246d861", "filename": "src/test/ui/nll/issue-78561.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fnll%2Fissue-78561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fnll%2Fissue-78561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-78561.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait Trait {\n+    type A;\n+\n+    fn f() -> Self::A;\n+}\n+\n+pub trait Tr2<'a, 'b> {}\n+\n+pub struct A<T>(T);\n+pub trait Tr {\n+    type B;\n+}\n+\n+impl<'a, 'b, T: Tr<B = dyn Tr2<'a, 'b>>> Trait for A<T> {\n+    type A = impl core::fmt::Debug;\n+\n+    fn f() -> Self::A {}\n+}\n+\n+fn main() {}"}, {"sha": "713418fc5b29a6e5d87d4ec60d62d3129c2e1d87", "filename": "src/test/ui/pattern/non-structural-match-types.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+#![allow(incomplete_features)]\n+#![allow(unreachable_code)]\n+#![feature(const_async_blocks)]\n+#![feature(inline_const)]\n+\n+fn main() {\n+    match loop {} {\n+        const { || {} } => {}, //~ ERROR cannot be used in patterns\n+    }\n+    match loop {} {\n+        const { async {} } => {}, //~ ERROR cannot be used in patterns\n+    }\n+}"}, {"sha": "91fed81eaeff6927e99aada93a1603a4ade43b93", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,14 @@\n+error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used in patterns\n+  --> $DIR/non-structural-match-types.rs:9:9\n+   |\n+LL |         const { || {} } => {},\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: `impl Future` cannot be used in patterns\n+  --> $DIR/non-structural-match-types.rs:12:9\n+   |\n+LL |         const { async {} } => {},\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "32676dfe9c8fa568ae8de1c51ec4ca35aa098628", "filename": "src/test/ui/query-system/issue-83479.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fquery-system%2Fissue-83479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fquery-system%2Fissue-83479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Fissue-83479.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,16 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type PairCoupledTypes: Trait<\n+    //~^ ERROR: bounds on `type`s in this context have no effect\n+    //~| ERROR: cannot find trait `Trait` in this scope\n+    [u32; {\n+        static FOO: usize; //~ ERROR: free static item without body\n+    }],\n+> = impl Trait<\n+    //~^ ERROR: cannot find trait `Trait` in this scope\n+    [u32; {\n+        static FOO: usize; //~ ERROR: free static item without body\n+    }],\n+>;\n+\n+fn main() {}"}, {"sha": "7cb41f5cbe51cdaf688ec741b7d10c7671950b85", "filename": "src/test/ui/query-system/issue-83479.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fquery-system%2Fissue-83479.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftest%2Fui%2Fquery-system%2Fissue-83479.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Fissue-83479.stderr?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -0,0 +1,44 @@\n+error: bounds on `type`s in this context have no effect\n+  --> $DIR/issue-83479.rs:3:24\n+   |\n+LL |   type PairCoupledTypes: Trait<\n+   |  ________________________^\n+LL | |\n+LL | |\n+LL | |     [u32; {\n+LL | |         static FOO: usize;\n+LL | |     }],\n+LL | | > = impl Trait<\n+   | |_^\n+\n+error: free static item without body\n+  --> $DIR/issue-83479.rs:7:9\n+   |\n+LL |         static FOO: usize;\n+   |         ^^^^^^^^^^^^^^^^^-\n+   |                          |\n+   |                          help: provide a definition for the static: `= <expr>;`\n+\n+error: free static item without body\n+  --> $DIR/issue-83479.rs:12:9\n+   |\n+LL |         static FOO: usize;\n+   |         ^^^^^^^^^^^^^^^^^-\n+   |                          |\n+   |                          help: provide a definition for the static: `= <expr>;`\n+\n+error[E0405]: cannot find trait `Trait` in this scope\n+  --> $DIR/issue-83479.rs:3:24\n+   |\n+LL | type PairCoupledTypes: Trait<\n+   |                        ^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `Trait` in this scope\n+  --> $DIR/issue-83479.rs:9:10\n+   |\n+LL | > = impl Trait<\n+   |          ^^^^^ not found in this scope\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "d3234b5758a575b2066f57cb673959ef5420ed3b", "filename": "src/tools/clippy/clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -63,13 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n             if is_copy(cx, vec_type(cx.typeck_results().expr_ty_adjusted(arg)));\n             then {\n                 // report the error around the `vec!` not inside `<std macros>:`\n-                let span = arg.span\n-                    .ctxt()\n-                    .outer_expn_data()\n-                    .call_site\n-                    .ctxt()\n-                    .outer_expn_data()\n-                    .call_site;\n+                let span = arg.span.ctxt().outer_expn_data().call_site;\n                 self.check_vec_macro(cx, &vec_args, Mutability::Not, span);\n             }\n         }"}, {"sha": "4afa36502aca1c063e2caec6a225df919a7e0c5d", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1330;\n+const ROOT_ENTRY_LIMIT: usize = 1331;\n const ISSUES_ENTRY_LIMIT: usize = 2488;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}, {"sha": "48c7a00de7830c83e4659f49f35358049949fea1", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b600c83326fa3c653cf8cdb379d87a37a5920f/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45b600c83326fa3c653cf8cdb379d87a37a5920f/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=45b600c83326fa3c653cf8cdb379d87a37a5920f", "patch": "@@ -5,8 +5,8 @@ allow-unauthenticated = [\n     \"requires-nightly\",\n     \"regression-*\",\n     \"perf-*\",\n-    # I-* without I-nominated\n-    \"I-*\", \"!I-nominated\",\n+    # I-* without I-*nominated\n+    \"I-*\", \"!I-*nominated\",\n     \"AsyncAwait-OnDeck\",\n ]\n "}]}