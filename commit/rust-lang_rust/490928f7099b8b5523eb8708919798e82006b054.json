{"sha": "490928f7099b8b5523eb8708919798e82006b054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDkyOGY3MDk5YjhiNTUyM2ViODcwODkxOTc5OGU4MjAwNmIwNTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-26T11:52:56Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-31T00:31:41Z"}, "message": "remove `region_bound_pairs` from FRR as they are not needed later", "tree": {"sha": "037b277eb782d37028b056f280a67ee4f784462f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037b277eb782d37028b056f280a67ee4f784462f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/490928f7099b8b5523eb8708919798e82006b054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/490928f7099b8b5523eb8708919798e82006b054", "html_url": "https://github.com/rust-lang/rust/commit/490928f7099b8b5523eb8708919798e82006b054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/490928f7099b8b5523eb8708919798e82006b054/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "html_url": "https://github.com/rust-lang/rust/commit/1e1f18ddba20b370d6cdd85d60e7e415a94094b5"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "26a694a30a27f7c90689b48d8a61cf1b798b86cb", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/490928f7099b8b5523eb8708919798e82006b054/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490928f7099b8b5523eb8708919798e82006b054/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=490928f7099b8b5523eb8708919798e82006b054", "patch": "@@ -29,18 +29,6 @@ use syntax::ast;\n crate struct UniversalRegionRelations<'tcx> {\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n \n-    /// Each RBP `('a, GK)` indicates that `GK: 'a` can be assumed to\n-    /// be true. These encode relationships like `T: 'a` that are\n-    /// added via implicit bounds.\n-    ///\n-    /// Each region here is guaranteed to be a key in the `indices`\n-    /// map.  We use the \"original\" regions (i.e., the keys from the\n-    /// map, and not the values) because the code in\n-    /// `process_registered_region_obligations` has some special-cased\n-    /// logic expecting to see (e.g.) `ReStatic`, and if we supplied\n-    /// our special inference variable there, we would mess that up.\n-    crate region_bound_pairs: Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>,\n-\n     /// Stores the outlives relations that are known to hold from the\n     /// implied bounds, in-scope where clauses, and that sort of\n     /// thing.\n@@ -53,6 +41,18 @@ crate struct UniversalRegionRelations<'tcx> {\n     inverse_outlives: TransitiveRelation<RegionVid>,\n }\n \n+/// Each RBP `('a, GK)` indicates that `GK: 'a` can be assumed to\n+/// be true. These encode relationships like `T: 'a` that are\n+/// added via implicit bounds.\n+///\n+/// Each region here is guaranteed to be a key in the `indices`\n+/// map.  We use the \"original\" regions (i.e., the keys from the\n+/// map, and not the values) because the code in\n+/// `process_registered_region_obligations` has some special-cased\n+/// logic expecting to see (e.g.) `ReStatic`, and if we supplied\n+/// our special inference variable there, we would mess that up.\n+type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n+\n crate fn create(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     mir_def_id: DefId,\n@@ -62,7 +62,7 @@ crate fn create(\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n-) -> Rc<UniversalRegionRelations<'tcx>> {\n+) -> (Rc<UniversalRegionRelations<'tcx>>, RegionBoundPairs<'tcx>) {\n     let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id).unwrap();\n     UniversalRegionRelationsBuilder {\n         infcx,\n@@ -74,9 +74,9 @@ crate fn create(\n         location_table,\n         all_facts,\n         universal_regions: universal_regions.clone(),\n+        region_bound_pairs: Vec::new(),\n         relations: UniversalRegionRelations {\n             universal_regions: universal_regions.clone(),\n-            region_bound_pairs: Vec::new(),\n             outlives: TransitiveRelation::new(),\n             inverse_outlives: TransitiveRelation::new(),\n         },\n@@ -205,14 +205,17 @@ struct UniversalRegionRelationsBuilder<'this, 'gcx: 'tcx, 'tcx: 'this> {\n     param_env: ty::ParamEnv<'tcx>,\n     location_table: &'this LocationTable,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n-    relations: UniversalRegionRelations<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     constraints: &'this mut MirTypeckRegionConstraints<'tcx>,\n     all_facts: &'this mut Option<AllFacts>,\n+\n+    // outputs:\n+    relations: UniversalRegionRelations<'tcx>,\n+    region_bound_pairs: RegionBoundPairs<'tcx>,\n }\n \n impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n-    crate fn create(mut self) -> Rc<UniversalRegionRelations<'tcx>> {\n+    crate fn create(mut self) -> (Rc<UniversalRegionRelations<'tcx>>, RegionBoundPairs<'tcx>) {\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -225,7 +228,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n         //   constraints, which we buffer up because we are\n         //   not ready to process them yet.\n         // - Then compute the implied bounds. This will adjust\n-        //   the `relations.region_bound_pairs` and so forth.\n+        //   the `region_bound_pairs` and so forth.\n         // - After this is done, we'll process the constraints, once\n         //   the `relations` is built.\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n@@ -267,7 +270,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n                 self.infcx.tcx,\n                 &self.universal_regions,\n                 &self.location_table,\n-                &self.relations.region_bound_pairs,\n+                &self.region_bound_pairs,\n                 self.implicit_region_bound,\n                 self.param_env,\n                 Locations::All,\n@@ -277,7 +280,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n             ).convert_all(&data);\n         }\n \n-        Rc::new(self.relations)\n+        (Rc::new(self.relations), self.region_bound_pairs)\n     }\n \n     /// Update the type of a single local, which should represent\n@@ -312,14 +315,12 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n                 }\n \n                 OutlivesBound::RegionSubParam(r_a, param_b) => {\n-                    self.relations\n-                        .region_bound_pairs\n+                    self.region_bound_pairs\n                         .push((r_a, GenericKind::Param(param_b)));\n                 }\n \n                 OutlivesBound::RegionSubProjection(r_a, projection_b) => {\n-                    self.relations\n-                        .region_bound_pairs\n+                    self.region_bound_pairs\n                         .push((r_a, GenericKind::Projection(projection_b)));\n                 }\n             }"}, {"sha": "eb18a56523eb6faf82897665d85cf0571cd4739f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490928f7099b8b5523eb8708919798e82006b054/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490928f7099b8b5523eb8708919798e82006b054/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=490928f7099b8b5523eb8708919798e82006b054", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         type_tests: Vec::default(),\n     };\n \n-    let universal_region_relations = free_region_relations::create(\n+    let (universal_region_relations, region_bound_pairs) = free_region_relations::create(\n         infcx,\n         mir_def_id,\n         param_env,\n@@ -157,7 +157,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n             mir_def_id,\n             param_env,\n             mir,\n-            &universal_region_relations.region_bound_pairs,\n+            &region_bound_pairs,\n             Some(implicit_region_bound),\n             Some(&mut borrowck_context),\n             Some(errors_buffer),"}]}