{"sha": "5566e3901c5dffe55cf093e05d8a9bf097958122", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjZlMzkwMWM1ZGZmZTU1Y2YwOTNlMDVkOGE5YmYwOTc5NTgxMjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-05T09:44:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-05T09:44:33Z"}, "message": "deduplicate FD extraction", "tree": {"sha": "eae2a6527214e5b75af1d3ecd11c5358088327f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae2a6527214e5b75af1d3ecd11c5358088327f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5566e3901c5dffe55cf093e05d8a9bf097958122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5566e3901c5dffe55cf093e05d8a9bf097958122", "html_url": "https://github.com/rust-lang/rust/commit/5566e3901c5dffe55cf093e05d8a9bf097958122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5566e3901c5dffe55cf093e05d8a9bf097958122/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f974f6e1f1ceef6e09e84bb23ae7022bab2df1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f974f6e1f1ceef6e09e84bb23ae7022bab2df1a", "html_url": "https://github.com/rust-lang/rust/commit/2f974f6e1f1ceef6e09e84bb23ae7022bab2df1a"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "ba4611373c8a0e14065ca0eed47fd9064473cad3", "filename": "src/shims/fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5566e3901c5dffe55cf093e05d8a9bf097958122/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5566e3901c5dffe55cf093e05d8a9bf097958122/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=5566e3901c5dffe55cf093e05d8a9bf097958122", "patch": "@@ -331,15 +331,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if args.len() < 2 {\n             throw_ub_format!(\"incorrect number of arguments for fcntl: got {}, expected at least 2\", args.len());\n         }\n+        let fd = this.read_scalar(args[0])?.to_i32()?;\n         let cmd = this.read_scalar(args[1])?.to_i32()?;\n         // We only support getting the flags for a descriptor.\n         if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n             // Currently this is the only flag that `F_GETFD` returns. It is OK to just return the\n             // `FD_CLOEXEC` value without checking if the flag is set for the file because `std`\n             // always sets this flag when opening a file. However we still need to check that the\n             // file itself is open.\n-            let &[fd, _] = check_arg_count(args)?;\n-            let fd = this.read_scalar(fd)?.to_i32()?;\n+            let &[_, _] = check_arg_count(args)?;\n             if this.machine.file_handler.handles.contains_key(&fd) {\n                 Ok(this.eval_libc_i32(\"FD_CLOEXEC\")?)\n             } else {\n@@ -352,8 +352,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // because exec() isn't supported. The F_DUPFD and F_DUPFD_CLOEXEC commands only\n             // differ in whether the FD_CLOEXEC flag is pre-set on the new file descriptor,\n             // thus they can share the same implementation here.\n-            let &[fd, _, start] = check_arg_count(args)?;\n-            let fd = this.read_scalar(fd)?.to_i32()?;\n+            let &[_, _, start] = check_arg_count(args)?;\n             let start = this.read_scalar(start)?.to_i32()?;\n             if fd < MIN_NORMAL_FILE_FD {\n                 throw_unsup_format!(\"duplicating file descriptors for stdin, stdout, or stderr is not supported\")"}]}