{"sha": "667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "node_id": "C_kwDOAAsO6NoAKDY2N2IxNWJiMGViYjM2NjgzYTJkZTMxY2ZmNjhhZDJiNWIwZDNmNTc", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-27T06:43:15Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-08T06:10:04Z"}, "message": "fix #103587, Recover from common if let syntax mistakes/typos", "tree": {"sha": "82d85b103a002b71b3d436135ce3df209f2ad482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82d85b103a002b71b3d436135ce3df209f2ad482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "html_url": "https://github.com/rust-lang/rust/commit/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d3c58ed6e0faf89a62411f96c000ffc9fd3937", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d3c58ed6e0faf89a62411f96c000ffc9fd3937", "html_url": "https://github.com/rust-lang/rust/commit/57d3c58ed6e0faf89a62411f96c000ffc9fd3937"}], "stats": {"total": 169, "additions": 165, "deletions": 4}, "files": [{"sha": "6d42b23fb3a213b6db8495663dc23b0e4fb4898e", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -125,6 +125,9 @@ parser_if_expression_missing_condition = missing condition for `if` expression\n \n parser_expected_expression_found_let = expected expression, found `let` statement\n \n+parser_expect_eq_instead_of_eqeq = expected `=`, found `==`\n+    .suggestion = consider using `=` here\n+\n parser_expected_else_block = expected `{\"{\"}`, found {$first_tok}\n     .label = expected an `if` or a block after this `else`\n     .suggestion = add an `if` if this is the condition of a chained `else if` statement"}, {"sha": "ee9e59968be8f61ff50f1371c9a5e69bd0f8347b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n //! Error Reporting Code for the inference engine\n //!\n //! Because of the way inference, and in particular region inference,\n@@ -58,12 +59,14 @@ use crate::traits::{\n     StatementAsExpression,\n };\n \n+use hir::intravisit::{walk_expr, walk_stmt};\n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n@@ -2333,6 +2336,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 }\n                             }\n                         }\n+                        // For code `if Some(..) = expr `, the type mismatch may be expected `bool` but found `()`,\n+                        // we try to suggest to add the missing `let` for `if let Some(..) = expr`\n+                        (ty::Bool, ty::Tuple(list)) => if list.len() == 0 {\n+                            self.suggest_let_for_letchains(&mut err, &trace.cause, span);\n+                        }\n                         _ => {}\n                     }\n                 }\n@@ -2357,6 +2365,72 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         diag\n     }\n \n+    /// Try to find code with pattern `if Some(..) = expr`\n+    /// use a `visitor` to mark the `if` which its span contains given error span,\n+    /// and then try to find a assignment in the `cond` part, which span is equal with error span\n+    fn suggest_let_for_letchains(\n+        &self,\n+        err: &mut Diagnostic,\n+        cause: &ObligationCause<'_>,\n+        span: Span,\n+    ) {\n+        let hir = self.tcx.hir();\n+        let fn_hir_id = hir.get_parent_node(cause.body_id);\n+        if let Some(node) = self.tcx.hir().find(fn_hir_id) &&\n+            let hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Fn(_sig, _, body_id), ..\n+                }) = node {\n+        let body = hir.body(*body_id);\n+\n+        /// Find the if expression with given span\n+        struct IfVisitor {\n+            pub result: bool,\n+            pub found_if: bool,\n+            pub err_span: Span,\n+        }\n+\n+        impl<'v> Visitor<'v> for IfVisitor {\n+            fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+                if self.result { return; }\n+                match ex.kind {\n+                    hir::ExprKind::If(cond, _, _) => {\n+                        self.found_if = true;\n+                        walk_expr(self, cond);\n+                        self.found_if = false;\n+                    }\n+                    _ => walk_expr(self, ex),\n+                }\n+            }\n+\n+            fn visit_stmt(&mut self, ex: &'v hir::Stmt<'v>) {\n+                if let hir::StmtKind::Local(hir::Local {\n+                        span, pat: hir::Pat{..}, ty: None, init: Some(_), ..\n+                    }) = &ex.kind\n+                    && self.found_if\n+                    && span.eq(&self.err_span) {\n+                        self.result = true;\n+                }\n+                walk_stmt(self, ex);\n+            }\n+\n+            fn visit_body(&mut self, body: &'v hir::Body<'v>) {\n+                hir::intravisit::walk_body(self, body);\n+            }\n+        }\n+\n+        let mut visitor = IfVisitor { err_span: span, found_if: false, result: false };\n+        visitor.visit_body(&body);\n+        if visitor.result {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    \"consider adding `let`\",\n+                    \"let \".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+\n     fn emit_tuple_wrap_err(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "89d5fe3d9da1e08fe040459bd761fda0f4faa12a", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -420,6 +420,15 @@ pub(crate) struct ExpectedExpressionFoundLet {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parser_expect_eq_instead_of_eqeq)]\n+pub(crate) struct ExpectedEqForLetExpr {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion_verbose(applicability = \"maybe-incorrect\", code = \"=\")]\n+    pub sugg_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parser_expected_else_block)]\n pub(crate) struct ExpectedElseBlock {"}, {"sha": "565371668a8cd69fd2e14744a7eff31f07d22c44", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -9,9 +9,9 @@ use crate::errors::{\n     ArrayBracketsInsteadOfSpaces, ArrayBracketsInsteadOfSpacesSugg, AsyncMoveOrderIncorrect,\n     BinaryFloatLiteralNotSupported, BracesForStructLiteral, CatchAfterTry, CommaAfterBaseStruct,\n     ComparisonInterpretedAsGeneric, ComparisonOrShiftInterpretedAsGenericSugg,\n-    DoCatchSyntaxRemoved, DotDotDot, EqFieldInit, ExpectedElseBlock, ExpectedExpressionFoundLet,\n-    FieldExpressionWithGeneric, FloatLiteralRequiresIntegerPart, FoundExprWouldBeStmt,\n-    HexadecimalFloatLiteralNotSupported, IfExpressionMissingCondition,\n+    DoCatchSyntaxRemoved, DotDotDot, EqFieldInit, ExpectedElseBlock, ExpectedEqForLetExpr,\n+    ExpectedExpressionFoundLet, FieldExpressionWithGeneric, FloatLiteralRequiresIntegerPart,\n+    FoundExprWouldBeStmt, HexadecimalFloatLiteralNotSupported, IfExpressionMissingCondition,\n     IfExpressionMissingThenBlock, IfExpressionMissingThenBlockSub, IntLiteralTooLarge,\n     InvalidBlockMacroSegment, InvalidComparisonOperator, InvalidComparisonOperatorSub,\n     InvalidFloatLiteralSuffix, InvalidFloatLiteralWidth, InvalidIntLiteralWidth,\n@@ -2334,7 +2334,15 @@ impl<'a> Parser<'a> {\n             RecoverColon::Yes,\n             CommaRecoveryMode::LikelyTuple,\n         )?;\n-        self.expect(&token::Eq)?;\n+        if self.token == token::EqEq {\n+            self.sess.emit_err(ExpectedEqForLetExpr {\n+                span: self.token.span,\n+                sugg_span: self.token.span,\n+            });\n+            self.bump();\n+        } else {\n+            self.expect(&token::Eq)?;\n+        }\n         let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         })?;"}, {"sha": "11536f9f4cc485499e86f226ab92dab72599b6ed", "filename": "src/test/ui/inference/issue-103587.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/src%2Ftest%2Fui%2Finference%2Fissue-103587.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/src%2Ftest%2Fui%2Finference%2Fissue-103587.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-103587.rs?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let x = Some(123);\n+\n+    if let Some(_) == x {}\n+    //~^ ERROR expected `=`, found `==`\n+\n+    if Some(_) = x {}\n+    //~^ ERROR mismatched types\n+\n+    if None = x { }\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "b373fbfbb948cb04448759f1606f44126bf56caf", "filename": "src/test/ui/inference/issue-103587.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/src%2Ftest%2Fui%2Finference%2Fissue-103587.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/src%2Ftest%2Fui%2Finference%2Fissue-103587.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-103587.stderr?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -0,0 +1,40 @@\n+error: expected `=`, found `==`\n+  --> $DIR/issue-103587.rs:4:20\n+   |\n+LL |     if let Some(_) == x {}\n+   |                    ^^\n+   |\n+help: consider using `=` here\n+   |\n+LL |     if let Some(_) = x {}\n+   |                    ~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-103587.rs:7:8\n+   |\n+LL |     if Some(_) = x {}\n+   |        ^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: consider adding `let`\n+   |\n+LL |     if let Some(_) = x {}\n+   |        +++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-103587.rs:10:8\n+   |\n+LL |     if None = x { }\n+   |        ^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let None = x { }\n+   |        +++\n+help: you might have meant to compare for equality\n+   |\n+LL |     if None == x { }\n+   |              +\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "02148b7f7adfd97a68e02a58102a3b28ab0599f8", "filename": "src/test/ui/suggestions/if-let-typo.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/667b15bb0ebb36683a2de31cff68ad2b5b0d3f57/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr?ref=667b15bb0ebb36683a2de31cff68ad2b5b0d3f57", "patch": "@@ -25,12 +25,22 @@ error[E0308]: mismatched types\n    |\n LL |     if Some(x) = foo {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: consider adding `let`\n+   |\n+LL |     if let Some(x) = foo {}\n+   |        +++\n \n error[E0308]: mismatched types\n   --> $DIR/if-let-typo.rs:6:8\n    |\n LL |     if Some(foo) = bar {}\n    |        ^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: consider adding `let`\n+   |\n+LL |     if let Some(foo) = bar {}\n+   |        +++\n \n error[E0308]: mismatched types\n   --> $DIR/if-let-typo.rs:7:8\n@@ -51,6 +61,11 @@ error[E0308]: mismatched types\n    |\n LL |     if Some(3) = foo {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: consider adding `let`\n+   |\n+LL |     if let Some(3) = foo {}\n+   |        +++\n \n error: aborting due to 7 previous errors\n "}]}