{"sha": "3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzViMDFkOGMyMjEyZmJjMmE0ODQwZDNiZWFiMWEyODE5YTdhN2U=", "commit": {"author": {"name": "Tristian Celestin", "email": "tcelesti@redhat.com", "date": "2017-02-26T22:57:56Z"}, "committer": {"name": "Tristian Celestin", "email": "tcelesti@redhat.com", "date": "2017-02-26T22:57:56Z"}, "message": "Stored linter messages in constants.\nUse is_copy() function instead of calling moves_by_default()", "tree": {"sha": "59409c5a7f17f14d25e2190d490302ec86986c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59409c5a7f17f14d25e2190d490302ec86986c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "html_url": "https://github.com/rust-lang/rust/commit/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e/comments", "author": null, "committer": null, "parents": [{"sha": "aa037d1ef0b4b0913afad509a1c841193847366d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa037d1ef0b4b0913afad509a1c841193847366d", "html_url": "https://github.com/rust-lang/rust/commit/aa037d1ef0b4b0913afad509a1c841193847366d"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "8c6f6a2773838cfd4224bdcef5ceb6841a2f4808", "filename": "clippy_lints/src/drop_forget_copy.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075b01d8c2212fbc2a4840d3beab1a2819a7a7e/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs?ref=3075b01d8c2212fbc2a4840d3beab1a2819a7a7e", "patch": "@@ -1,7 +1,9 @@\n use rustc::lint::*;\n-use rustc::ty;\n use rustc::hir::*;\n-use utils::{match_def_path, paths, span_note_and_lint};\n+use utils::{match_def_path, paths, span_note_and_lint, is_copy};\n+\n+const DROP_COPY_SUMMARY:&'static str = \"calls to `std::mem::drop` with a value that implements Copy\";\n+const FORGET_COPY_SUMMARY:&'static str = \"calls to `std::mem::forget` with a value that implements Copy\";\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a value\n /// that derives the Copy trait\n@@ -20,7 +22,7 @@ use utils::{match_def_path, paths, span_note_and_lint};\n declare_lint! {\n     pub DROP_COPY,\n     Warn,\n-    \"calls to `std::mem::drop` with a value that implements Copy\"\n+    DROP_COPY_SUMMARY\n }\n \n /// **What it does:** Checks for calls to `std::mem::forget` with a value that\n@@ -44,7 +46,7 @@ declare_lint! {\n declare_lint! {\n     pub FORGET_COPY,\n     Warn,\n-    \"calls to `std::mem::forget` with a value that implements Copy\"\n+    FORGET_COPY_SUMMARY\n }\n \n #[allow(missing_copy_implementations)]\n@@ -69,25 +71,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n             if match_def_path(cx.tcx, def_id, &paths::DROP) {\n                 lint = DROP_COPY;\n-                msg = \"call to `std::mem::drop` with a value that implements Copy. \\\n-                       Dropping a copy leaves the original intact.\";\n+                msg = DROP_COPY_SUMMARY.to_string() + \". Dropping a copy leaves the original intact.\";\n             } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n                 lint = FORGET_COPY;\n-                msg = \"call to `std::mem::forget` with a value that implements Copy. \\\n-                       Forgetting a copy leaves the original intact.\";\n+                msg = FORGET_COPY_SUMMARY.to_string() + \". Forgetting a copy leaves the original intact.\";\n             } else {\n                 return;\n             }\n \n             let arg = &args[0];\n             let arg_ty = cx.tables.expr_ty(arg);\n-\n-            let parameter_environment = ty::ParameterEnvironment::for_item(cx.tcx, arg.id);\n-            if !arg_ty.moves_by_default(cx.tcx.global_tcx(), &parameter_environment, arg.span) {\n+            if is_copy(cx, arg_ty, cx.tcx.hir.get_parent(arg.id)) {\n                 span_note_and_lint(cx,\n                                    lint,\n                                    expr.span,\n-                                   msg,\n+                                   &msg,\n                                    arg.span,\n                                    &format!(\"argument has type {}\", arg_ty.sty));\n             }"}]}