{"sha": "ed2aad8b4356d24403f86dd9543957367d4fce88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmFhZDhiNDM1NmQyNDQwM2Y4NmRkOTU0Mzk1NzM2N2Q0ZmNlODg=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-07-21T03:27:59Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-29T21:12:04Z"}, "message": "Add lint groups; define built-in lint groups `bad_style` and `unused`\n\nThis adds support for lint groups to the compiler. Lint groups are a way of\ngrouping a number of lints together under one name. For example, this also\ndefines a default lint for naming conventions, named `bad_style`. Writing\n`#[allow(bad_style)]` is equivalent to writing\n`#[allow(non_camel_case_types, non_snake_case, non_uppercase_statics)]`. These\nlint groups can also be defined as a compiler plugin using the new\n`Registry::register_lint_group` method.\n\nThis also adds two built-in lint groups, `bad_style` and `unused`. The contents\nof these groups can be seen by running `rustc -W help`.", "tree": {"sha": "fdf7d93f93b9282ce138b0852038600c8afd231c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf7d93f93b9282ce138b0852038600c8afd231c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2aad8b4356d24403f86dd9543957367d4fce88", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2aad8b4356d24403f86dd9543957367d4fce88", "html_url": "https://github.com/rust-lang/rust/commit/ed2aad8b4356d24403f86dd9543957367d4fce88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2aad8b4356d24403f86dd9543957367d4fce88/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7abd88244a9fe7033cb71e22af0601d1b811b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7abd88244a9fe7033cb71e22af0601d1b811b9", "html_url": "https://github.com/rust-lang/rust/commit/de7abd88244a9fe7033cb71e22af0601d1b811b9"}], "stats": {"total": 368, "additions": 318, "deletions": 50}, "files": [{"sha": "c59de19e822cc518dd1240bdc04ef8c0ce596741", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -157,7 +157,6 @@ macro_rules! impl_hash_tuple(\n \n     ( $($name:ident)+) => (\n         impl<S: Writer, $($name: Hash<S>),*> Hash<S> for ($($name,)*) {\n-            #[allow(uppercase_variables)]\n             #[inline]\n             #[allow(non_snake_case)]\n             fn hash(&self, state: &mut S) {"}, {"sha": "836285bc3135ad8e0bbd1dac18695439d2b89a5b", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -775,7 +775,7 @@ macro_rules! def_fn_mut(\n         FnMut<($($args,)*),Result>\n         for extern \"Rust\" fn($($args: $args,)*) -> Result {\n             #[rust_call_abi_hack]\n-            #[allow(uppercase_variables)]\n+            #[allow(non_snake_case)]\n             fn call_mut(&mut self, args: ($($args,)*)) -> Result {\n                 let ($($args,)*) = args;\n                 (*self)($($args,)*)"}, {"sha": "5ba54a7bfc19fd81655eafc08a192fa7794c461a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -242,13 +242,17 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     });\n \n-    let Registry { syntax_exts, lint_passes, .. } = registry;\n+    let Registry { syntax_exts, lint_passes, lint_groups, .. } = registry;\n \n     {\n         let mut ls = sess.lint_store.borrow_mut();\n         for pass in lint_passes.move_iter() {\n             ls.register_pass(Some(sess), true, pass);\n         }\n+\n+        for (name, to) in lint_groups.move_iter() {\n+            ls.register_group(Some(sess), true, name, to);\n+        }\n     }\n \n     // Lint plugins are registered; now we can process command line flags."}, {"sha": "e6bdf9badc87d76f4201ffac6870c61643e284ba", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -180,14 +180,26 @@ Available lint options:\n         lints\n     }\n \n+    fn sort_lint_groups(lints: Vec<(&'static str, Vec<lint::LintId>, bool)>)\n+                     -> Vec<(&'static str, Vec<lint::LintId>)> {\n+        let mut lints: Vec<_> = lints.move_iter().map(|(x, y, _)| (x, y)).collect();\n+        lints.sort_by(|&(x, _): &(&'static str, Vec<lint::LintId>),\n+                       &(y, _): &(&'static str, Vec<lint::LintId>)| {\n+            x.cmp(&y)\n+        });\n+        lints\n+    }\n+\n     let (plugin, builtin) = lint_store.get_lints().partitioned(|&(_, p)| p);\n     let plugin = sort_lints(plugin);\n     let builtin = sort_lints(builtin);\n \n-    // FIXME (#7043): We should use the width in character cells rather than\n-    // the number of codepoints.\n+    let (plugin_groups, builtin_groups) = lint_store.get_lint_groups().partitioned(|&(_, _, p)| p);\n+    let plugin_groups = sort_lint_groups(plugin_groups);\n+    let builtin_groups = sort_lint_groups(builtin_groups);\n+\n     let max_name_len = plugin.iter().chain(builtin.iter())\n-        .map(|&s| s.name.char_len())\n+        .map(|&s| s.name.width(true))\n         .max().unwrap_or(0);\n     let padded = |x: &str| {\n         \" \".repeat(max_name_len - x.char_len()).append(x)\n@@ -208,16 +220,48 @@ Available lint options:\n \n     print_lints(builtin);\n \n-    match (loaded_plugins, plugin.len()) {\n-        (false, 0) => {\n-            println!(\"Compiler plugins can provide additional lints. To see a listing of these, \\\n-                      re-run `rustc -W help` with a crate filename.\");\n+\n+\n+    let max_name_len = plugin_groups.iter().chain(builtin_groups.iter())\n+        .map(|&(s, _)| s.width(true))\n+        .max().unwrap_or(0);\n+    let padded = |x: &str| {\n+        \" \".repeat(max_name_len - x.char_len()).append(x)\n+    };\n+\n+    println!(\"Lint groups provided by rustc:\\n\");\n+    println!(\"    {}  {}\", padded(\"name\"), \"sub-lints\");\n+    println!(\"    {}  {}\", padded(\"----\"), \"---------\");\n+\n+    let print_lint_groups = |lints: Vec<(&'static str, Vec<lint::LintId>)>| {\n+        for (name, to) in lints.move_iter() {\n+            let name = name.chars().map(|x| x.to_lowercase())\n+                           .collect::<String>().replace(\"_\", \"-\");\n+            let desc = to.move_iter().map(|x| x.as_str()).collect::<Vec<String>>().connect(\", \");\n+            println!(\"    {}  {}\",\n+                     padded(name.as_slice()), desc);\n         }\n-        (false, _) => fail!(\"didn't load lint plugins but got them anyway!\"),\n-        (true, 0) => println!(\"This crate does not load any lint plugins.\"),\n-        (true, _) => {\n-            println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n-            print_lints(plugin);\n+        println!(\"\\n\");\n+    };\n+\n+    print_lint_groups(builtin_groups);\n+\n+    match (loaded_plugins, plugin.len(), plugin_groups.len()) {\n+        (false, 0, _) | (false, _, 0) => {\n+            println!(\"Compiler plugins can provide additional lints and lint groups. To see a \\\n+                      listing of these, re-run `rustc -W help` with a crate filename.\");\n+        }\n+        (false, _, _) => fail!(\"didn't load lint plugins but got them anyway!\"),\n+        (true, 0, 0) => println!(\"This crate does not load any lint plugins or lint groups.\"),\n+        (true, l, g) => {\n+            if l > 0 {\n+                println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n+                print_lints(plugin);\n+            }\n+            if g > 0 {\n+                println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n+                print_lint_groups(plugin_groups);\n+            }\n         }\n     }\n }"}, {"sha": "4f4824a221995e54c5fd22a98b46d370111e60e7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -736,7 +736,7 @@ impl LintPass for UnusedResult {\n     }\n }\n \n-declare_lint!(NON_CAMEL_CASE_TYPES, Warn,\n+declare_lint!(pub NON_CAMEL_CASE_TYPES, Warn,\n               \"types, variants, traits and type parameters should have camel case names\")\n \n pub struct NonCamelCaseTypes;\n@@ -844,7 +844,7 @@ fn method_context(cx: &Context, m: &ast::Method) -> MethodContext {\n     }\n }\n \n-declare_lint!(NON_SNAKE_CASE, Warn,\n+declare_lint!(pub NON_SNAKE_CASE, Warn,\n               \"methods, functions, lifetime parameters and modules should have snake case names\")\n \n pub struct NonSnakeCase;\n@@ -930,8 +930,8 @@ impl LintPass for NonSnakeCase {\n         self.check_snake_case(cx, \"trait method\", t.ident, t.span);\n     }\n \n-    fn check_lifetime_decl(&mut self, cx: &Context, t: &ast::Lifetime) {\n-        self.check_snake_case(cx, \"lifetime\", t.name.ident(), t.span);\n+    fn check_lifetime_decl(&mut self, cx: &Context, t: &ast::LifetimeDef) {\n+        self.check_snake_case(cx, \"lifetime\", t.lifetime.name.ident(), t.lifetime.span);\n     }\n \n     fn check_pat(&mut self, cx: &Context, p: &ast::Pat) {\n@@ -962,7 +962,7 @@ impl LintPass for NonSnakeCase {\n     }\n }\n \n-declare_lint!(NON_UPPERCASE_STATICS, Allow,\n+declare_lint!(pub NON_UPPERCASE_STATICS, Allow,\n               \"static constants should have uppercase identifiers\")\n \n pub struct NonUppercaseStatics;\n@@ -1143,7 +1143,7 @@ impl LintPass for UnsafeBlock {\n     }\n }\n \n-declare_lint!(UNUSED_MUT, Warn,\n+declare_lint!(pub UNUSED_MUT, Warn,\n               \"detect mut variables which don't need to be mutable\")\n \n pub struct UnusedMut;"}, {"sha": "b40916dcc30aaefe3c14dba1d593d15983daebe4", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 82, "deletions": 20, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -66,6 +66,10 @@ pub struct LintStore {\n \n     /// Current levels of each lint, and where they were set.\n     levels: HashMap<LintId, LevelSource>,\n+\n+    /// Map of registered lint groups to what lints they expand to. The bool\n+    /// is true if the lint group was added by a plugin.\n+    lint_groups: HashMap<&'static str, (Vec<LintId>, bool)>,\n }\n \n impl LintStore {\n@@ -90,13 +94,18 @@ impl LintStore {\n             passes: Some(vec!()),\n             by_name: HashMap::new(),\n             levels: HashMap::new(),\n+            lint_groups: HashMap::new(),\n         }\n     }\n \n     pub fn get_lints<'t>(&'t self) -> &'t [(&'static Lint, bool)] {\n         self.lints.as_slice()\n     }\n \n+    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n+        self.lint_groups.iter().map(|(k, &(ref v, b))| (*k, v.clone(), b)).collect()\n+    }\n+\n     pub fn register_pass(&mut self, sess: Option<&Session>,\n                          from_plugin: bool, pass: LintPassObject) {\n         for &lint in pass.get_lints().iter() {\n@@ -123,6 +132,25 @@ impl LintStore {\n         self.passes.get_mut_ref().push(pass);\n     }\n \n+    pub fn register_group(&mut self, sess: Option<&Session>,\n+                          from_plugin: bool, name: &'static str,\n+                          to: Vec<LintId>) {\n+        let new = self.lint_groups.insert(name, (to, from_plugin));\n+\n+        if !new {\n+            let msg = format!(\"duplicate specification of lint group {}\", name);\n+            match (sess, from_plugin) {\n+                // We load builtin lints first, so a duplicate is a compiler bug.\n+                // Use early_error when handling -W help with no crate.\n+                (None, _) => early_error(msg.as_slice()),\n+                (Some(sess), false) => sess.bug(msg.as_slice()),\n+\n+                // A duplicate name from a plugin is a user error.\n+                (Some(sess), true)  => sess.err(msg.as_slice()),\n+            }\n+        }\n+    }\n+\n     pub fn register_builtin(&mut self, sess: Option<&Session>) {\n         macro_rules! add_builtin ( ( $sess:ident, $($name:ident),*, ) => (\n             {$(\n@@ -136,6 +164,10 @@ impl LintStore {\n             )*}\n         ))\n \n+        macro_rules! add_lint_group ( ( $sess:ident, $name:expr, $($lint:ident),* ) => (\n+            self.register_group($sess, false, $name, vec![$(LintId::of(builtin::$lint)),*]);\n+        ))\n+\n         add_builtin!(sess,\n                      HardwiredLints,\n                      WhileTrue,\n@@ -162,6 +194,13 @@ impl LintStore {\n                               MissingDoc,\n         )\n \n+        add_lint_group!(sess, \"bad_style\",\n+                        NON_CAMEL_CASE_TYPES, NON_SNAKE_CASE, NON_UPPERCASE_STATICS)\n+\n+        add_lint_group!(sess, \"unused\",\n+                        UNUSED_IMPORTS, UNUSED_VARIABLE, DEAD_ASSIGNMENT, DEAD_CODE,\n+                        UNUSED_MUT, UNREACHABLE_CODE)\n+\n         // We have one lint pass defined in this module.\n         self.register_pass(sess, false, box GatherNodeLevels as LintPassObject);\n     }\n@@ -170,8 +209,20 @@ impl LintStore {\n         for &(ref lint_name, level) in sess.opts.lint_opts.iter() {\n             match self.by_name.find_equiv(&lint_name.as_slice()) {\n                 Some(&lint_id) => self.set_level(lint_id, (level, CommandLine)),\n-                None => sess.err(format!(\"unknown {} flag: {}\",\n-                                         level.as_str(), lint_name).as_slice()),\n+                None => {\n+                    match self.lint_groups.iter().map(|(&x, &(ref y, _))| (x, y.clone()))\n+                                                 .collect::<HashMap<&'static str, Vec<LintId>>>()\n+                                                 .find_equiv(&lint_name.as_slice()) {\n+                        Some(v) => {\n+                            v.iter()\n+                             .map(|lint_id: &LintId|\n+                                     self.set_level(*lint_id, (level, CommandLine)))\n+                             .collect::<Vec<()>>();\n+                        }\n+                        None => sess.err(format!(\"unknown {} flag: {}\",\n+                                                 level.as_str(), lint_name).as_slice()),\n+                    }\n+                }\n             }\n         }\n     }\n@@ -305,7 +356,7 @@ impl<'a> Context<'a> {\n             krate: krate,\n             exported_items: exported_items,\n             lints: lint_store,\n-            level_stack: vec!(),\n+            level_stack: vec![],\n             node_levels: RefCell::new(HashMap::new()),\n         }\n     }\n@@ -359,35 +410,46 @@ impl<'a> Context<'a> {\n         let mut pushed = 0u;\n \n         for result in gather_attrs(attrs).move_iter() {\n-            let (lint_id, level, span) = match result {\n+            let v = match result {\n                 Err(span) => {\n                     self.tcx.sess.span_err(span, \"malformed lint attribute\");\n                     continue;\n                 }\n                 Ok((lint_name, level, span)) => {\n                     match self.lints.by_name.find_equiv(&lint_name.get()) {\n-                        Some(&lint_id) => (lint_id, level, span),\n+                        Some(&lint_id) => vec![(lint_id, level, span)],\n                         None => {\n-                            self.span_lint(builtin::UNRECOGNIZED_LINT, span,\n-                                           format!(\"unknown `{}` attribute: `{}`\",\n-                                                   level.as_str(), lint_name).as_slice());\n-                            continue;\n+                            match self.lints.lint_groups.find_equiv(&lint_name.get()) {\n+                                Some(&(ref v, _)) => v.iter()\n+                                                      .map(|lint_id: &LintId|\n+                                                           (*lint_id, level, span))\n+                                                      .collect(),\n+                                None => {\n+                                    self.span_lint(builtin::UNRECOGNIZED_LINT, span,\n+                                               format!(\"unknown `{}` attribute: `{}`\",\n+                                                       level.as_str(), lint_name).as_slice());\n+                                    continue;\n+                                }\n+                            }\n                         }\n                     }\n                 }\n             };\n \n-            let now = self.lints.get_level_source(lint_id).val0();\n-            if now == Forbid && level != Forbid {\n-                let lint_name = lint_id.as_str();\n-                self.tcx.sess.span_err(span,\n-                                       format!(\"{}({}) overruled by outer forbid({})\",\n-                                               level.as_str(), lint_name, lint_name).as_slice());\n-            } else if now != level {\n-                let src = self.lints.get_level_source(lint_id).val1();\n-                self.level_stack.push((lint_id, (now, src)));\n-                pushed += 1;\n-                self.lints.set_level(lint_id, (level, Node(span)));\n+            for (lint_id, level, span) in v.move_iter() {\n+                let now = self.lints.get_level_source(lint_id).val0();\n+                if now == Forbid && level != Forbid {\n+                    let lint_name = lint_id.as_str();\n+                    self.tcx.sess.span_err(span,\n+                                           format!(\"{}({}) overruled by outer forbid({})\",\n+                                                   level.as_str(), lint_name,\n+                                                   lint_name).as_slice());\n+                } else if now != level {\n+                    let src = self.lints.get_level_source(lint_id).val1();\n+                    self.level_stack.push((lint_id, (now, src)));\n+                    pushed += 1;\n+                    self.lints.set_level(lint_id, (level, Node(span)));\n+                }\n             }\n         }\n "}, {"sha": "223d37ee1ea62aa5b7e4a14449703222560f7c97", "filename": "src/librustc/middle/typeck/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fequate.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -27,7 +27,7 @@ pub struct Equate<'f> {\n     fields: CombineFields<'f>\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n pub fn Equate<'f>(cf: CombineFields<'f>) -> Equate<'f> {\n     Equate { fields: cf }\n }"}, {"sha": "8ae141ea19cc20d99b2d45ee7fe699962c1c43ed", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -34,7 +34,7 @@ pub struct Glb<'f> {\n     fields: CombineFields<'f>\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n pub fn Glb<'f>(cf: CombineFields<'f>) -> Glb<'f> {\n     Glb { fields: cf }\n }"}, {"sha": "49760ac92bf7df29002ca67fd696130a9dcc18b9", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -33,7 +33,7 @@ pub struct Lub<'f> {\n     fields: CombineFields<'f>\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n pub fn Lub<'f>(cf: CombineFields<'f>) -> Lub<'f> {\n     Lub { fields: cf }\n }"}, {"sha": "be4abb1ad82612157cfdf2b4165579b48311d4d8", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -32,7 +32,7 @@ pub struct Sub<'f> {\n     fields: CombineFields<'f>\n }\n \n-#[allow(non_snake_case_functions)]\n+#[allow(non_snake_case)]\n pub fn Sub<'f>(cf: CombineFields<'f>) -> Sub<'f> {\n     Sub { fields: cf }\n }"}, {"sha": "7fa3ee0ac63ed1cb5e82331dc36d2a463bba3030", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -10,7 +10,7 @@\n \n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n-use lint::LintPassObject;\n+use lint::{LintPassObject, LintId, Lint};\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, LetSyntaxTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n@@ -19,6 +19,8 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast;\n \n+use std::collections::HashMap;\n+\n /// Structure used to register plugins.\n ///\n /// A plugin registrar function takes an `&mut Registry` and should call\n@@ -36,6 +38,9 @@ pub struct Registry {\n \n     #[doc(hidden)]\n     pub lint_passes: Vec<LintPassObject>,\n+\n+    #[doc(hidden)]\n+    pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n }\n \n impl Registry {\n@@ -45,6 +50,7 @@ impl Registry {\n             krate_span: krate.span,\n             syntax_exts: vec!(),\n             lint_passes: vec!(),\n+            lint_groups: HashMap::new(),\n         }\n     }\n \n@@ -80,4 +86,9 @@ impl Registry {\n     pub fn register_lint_pass(&mut self, lint_pass: LintPassObject) {\n         self.lint_passes.push(lint_pass);\n     }\n+\n+    /// Register a lint group.\n+    pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) {\n+        self.lint_groups.insert(name, to.move_iter().map(|x| LintId::of(x)).collect());\n+    }\n }"}, {"sha": "70dc03d06d699c1c1f98a6e6d5a4458ff0fbea7f", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -218,10 +218,10 @@ impl<T: 'static> KeyValue<T> {\n                         // Do nothing.\n                         None\n                     }\n-                    (0, Some(newValue)) => {\n+                    (0, Some(new_value)) => {\n                         // The current value is uninitialized and we're storing a new value.\n                         unsafe {\n-                            ptr::write(&mut (*value_box).value, newValue);\n+                            ptr::write(&mut (*value_box).value, new_value);\n                             *(*value_box).refcount.get() = 1;\n                             None\n                         }\n@@ -234,10 +234,10 @@ impl<T: 'static> KeyValue<T> {\n                             Some(ret)\n                         }\n                     }\n-                    (1, Some(newValue)) => {\n+                    (1, Some(new_value)) => {\n                         // We have an initialized value and we're replacing it.\n                         let value_ref = unsafe { &mut (*value_box).value };\n-                        let ret = mem::replace(value_ref, newValue);\n+                        let ret = mem::replace(value_ref, new_value);\n                         // Refcount is already 1, leave it as that.\n                         Some(ret)\n                     }"}, {"sha": "4790ae11b2107ce8a04dde692206089a3030a2a2", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(phase, plugin_registrar)]\n+\n+extern crate syntax;\n+\n+// Load rustc as a plugin to get macros\n+#[phase(plugin, link)]\n+extern crate rustc;\n+\n+use syntax::ast;\n+use syntax::parse::token;\n+use rustc::lint::{Context, LintPass, LintPassObject, LintArray};\n+use rustc::plugin::Registry;\n+\n+declare_lint!(TEST_LINT, Warn,\n+              \"Warn about items named 'lintme'\")\n+\n+declare_lint!(PLEASE_LINT, Warn,\n+              \"Warn about items named 'pleaselintme'\")\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT, PLEASE_LINT)\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        let name = token::get_ident(it.ident);\n+        if name.get() == \"lintme\" {\n+            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        } else if name.get() == \"pleaselintme\" {\n+            cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\");\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_lint_pass(box Pass as LintPassObject);\n+    reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n+}"}, {"sha": "5edaa78eeea38f184b09992def0bc34d766ae6bc", "filename": "src/test/compile-fail-fulldeps/lint-group-plugin-deny-cmdline.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-group-plugin-deny-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-group-plugin-deny-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-group-plugin-deny-cmdline.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint_group_plugin_test.rs\n+// ignore-stage1\n+// compile-flags: -D lint-me\n+\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate lint_group_plugin_test;\n+\n+fn lintme() { } //~ ERROR item is named 'lintme'\n+\n+fn pleaselintme() { } //~ ERROR item is named 'pleaselintme'\n+\n+pub fn main() {\n+    lintme();\n+    pleaselintme();\n+}"}, {"sha": "63d65fc06aa4c15abf06eb2591c1ec875f684dda", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(bad_style)]\n+//~^ NOTE lint level defined here\n+#![allow(dead_code)]\n+\n+fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n+\n+#[allow(bad_style)]\n+mod test {\n+    fn CamelCase() {}\n+\n+    #[forbid(bad_style)]\n+    //~^ NOTE lint level defined here\n+    //~^^ NOTE lint level defined here\n+    mod bad {\n+        fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n+\n+        static bad: int = 1; //~ ERROR static constant `bad` should have an uppercase name\n+    }\n+\n+    mod warn {\n+        #![warn(bad_style)]\n+        //~^ NOTE lint level defined here\n+\n+        fn CamelCase() {} //~ WARN function `CamelCase` should have a snake case name\n+\n+        struct snake_case; //~ WARN type `snake_case` should have a camel case name\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "726670b5d7f93c76ae6677fb79090a95c20fabe9", "filename": "src/test/run-pass-fulldeps/lint-group-plugin.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Frun-pass-fulldeps%2Flint-group-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2aad8b4356d24403f86dd9543957367d4fce88/src%2Ftest%2Frun-pass-fulldeps%2Flint-group-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flint-group-plugin.rs?ref=ed2aad8b4356d24403f86dd9543957367d4fce88", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lint_group_plugin_test.rs\n+// ignore-stage1\n+// ignore-pretty\n+\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate lint_group_plugin_test;\n+\n+fn lintme() { } //~ WARNING item is named 'lintme'\n+fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n+\n+#[allow(lint_me)]\n+pub fn main() {\n+    fn lintme() { }\n+\n+    fn pleaselintme() { }\n+}"}]}