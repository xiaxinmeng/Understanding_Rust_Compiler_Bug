{"sha": "d9bdc636da951314064d8c3442bc5842a13e5b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmRjNjM2ZGE5NTEzMTQwNjRkOGMzNDQyYmM1ODQyYTEzZTViNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-24T21:31:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-24T21:31:47Z"}, "message": "Auto merge of #37951 - jseyfried:improve_macro_resolution_perf, r=nrc\n\nmacros: improve resolution performance\n\nAvoid quadratic legacy macro name resolution in more cases.\nr? @nrc", "tree": {"sha": "31d7ff97c69f413025678c1420cdfd3a8ddb8b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d7ff97c69f413025678c1420cdfd3a8ddb8b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bdc636da951314064d8c3442bc5842a13e5b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bdc636da951314064d8c3442bc5842a13e5b79", "html_url": "https://github.com/rust-lang/rust/commit/d9bdc636da951314064d8c3442bc5842a13e5b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bdc636da951314064d8c3442bc5842a13e5b79/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a31ad75bdedab55ca290332edda9acbd2d5a0157", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31ad75bdedab55ca290332edda9acbd2d5a0157", "html_url": "https://github.com/rust-lang/rust/commit/a31ad75bdedab55ca290332edda9acbd2d5a0157"}, {"sha": "cbe478766cb1cafed8341de2e7fffd3b1f104e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe478766cb1cafed8341de2e7fffd3b1f104e70", "html_url": "https://github.com/rust-lang/rust/commit/cbe478766cb1cafed8341de2e7fffd3b1f104e70"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "30d25c7ccecdd162a17933e456d7a03bb29fd660", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bdc636da951314064d8c3442bc5842a13e5b79/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bdc636da951314064d8c3442bc5842a13e5b79/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d9bdc636da951314064d8c3442bc5842a13e5b79", "patch": "@@ -1137,7 +1137,7 @@ pub struct Resolver<'a> {\n     crate_loader: &'a mut CrateLoader,\n     macro_names: FxHashSet<Name>,\n     builtin_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n-    lexical_macro_resolutions: Vec<(Name, LegacyScope<'a>)>,\n+    lexical_macro_resolutions: Vec<(Name, &'a Cell<LegacyScope<'a>>)>,\n     macro_map: FxHashMap<DefId, Rc<SyntaxExtension>>,\n     macro_exports: Vec<Export>,\n \n@@ -3419,7 +3419,7 @@ impl<'a> Resolver<'a> {\n \n         let mut reported_errors = FxHashSet();\n         for binding in replace(&mut self.disallowed_shadowing, Vec::new()) {\n-            if self.resolve_legacy_scope(binding.parent, binding.name, false).is_some() &&\n+            if self.resolve_legacy_scope(&binding.parent, binding.name, false).is_some() &&\n                reported_errors.insert((binding.name, binding.span)) {\n                 let msg = format!(\"`{}` is already in scope\", binding.name);\n                 self.session.struct_span_err(binding.span, &msg)"}, {"sha": "cdb51f459e8c29ce965084776dffe583fe936a34", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d9bdc636da951314064d8c3442bc5842a13e5b79/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bdc636da951314064d8c3442bc5842a13e5b79/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d9bdc636da951314064d8c3442bc5842a13e5b79", "patch": "@@ -66,21 +66,8 @@ pub enum LegacyScope<'a> {\n     Binding(&'a LegacyBinding<'a>),\n }\n \n-impl<'a> LegacyScope<'a> {\n-    fn simplify_expansion(mut invoc: &'a InvocationData<'a>) -> Self {\n-        while let LegacyScope::Invocation(_) = invoc.expansion.get() {\n-            match invoc.legacy_scope.get() {\n-                LegacyScope::Expansion(new_invoc) => invoc = new_invoc,\n-                LegacyScope::Binding(_) => break,\n-                scope @ _ => return scope,\n-            }\n-        }\n-        LegacyScope::Expansion(invoc)\n-    }\n-}\n-\n pub struct LegacyBinding<'a> {\n-    pub parent: LegacyScope<'a>,\n+    pub parent: Cell<LegacyScope<'a>>,\n     pub name: ast::Name,\n     ext: Rc<SyntaxExtension>,\n     pub span: Span,\n@@ -157,7 +144,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         let invocation = self.invocations[&scope];\n         let binding = self.arenas.alloc_legacy_binding(LegacyBinding {\n-            parent: invocation.legacy_scope.get(),\n+            parent: Cell::new(invocation.legacy_scope.get()),\n             name: def.ident.name,\n             ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n             span: def.span,\n@@ -228,12 +215,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let name = path.segments[0].identifier.name;\n \n         let invocation = self.invocations[&scope];\n-        if let LegacyScope::Expansion(parent) = invocation.legacy_scope.get() {\n-            invocation.legacy_scope.set(LegacyScope::simplify_expansion(parent));\n-        }\n-\n         self.current_module = invocation.module.get();\n-        let result = match self.resolve_legacy_scope(invocation.legacy_scope.get(), name, false) {\n+        let result = match self.resolve_legacy_scope(&invocation.legacy_scope, name, false) {\n             Some(MacroBinding::Legacy(binding)) => Ok(binding.ext.clone()),\n             Some(MacroBinding::Modern(binding)) => Ok(self.get_macro(binding)),\n             None => match self.resolve_in_item_lexical_scope(name, MacroNS, None) {\n@@ -299,30 +282,34 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn resolve_legacy_scope(&mut self,\n-                                mut scope: LegacyScope<'a>,\n+                                mut scope: &'a Cell<LegacyScope<'a>>,\n                                 name: Name,\n                                 record_used: bool)\n                                 -> Option<MacroBinding<'a>> {\n         let mut possible_time_travel = None;\n         let mut relative_depth: u32 = 0;\n         let mut binding = None;\n         loop {\n-            scope = match scope {\n+            match scope.get() {\n                 LegacyScope::Empty => break,\n                 LegacyScope::Expansion(invocation) => {\n-                    if let LegacyScope::Empty = invocation.expansion.get() {\n-                        if possible_time_travel.is_none() {\n-                            possible_time_travel = Some(scope);\n+                    match invocation.expansion.get() {\n+                        LegacyScope::Invocation(_) => scope.set(invocation.legacy_scope.get()),\n+                        LegacyScope::Empty => {\n+                            if possible_time_travel.is_none() {\n+                                possible_time_travel = Some(scope);\n+                            }\n+                            scope = &invocation.legacy_scope;\n+                        }\n+                        _ => {\n+                            relative_depth += 1;\n+                            scope = &invocation.expansion;\n                         }\n-                        invocation.legacy_scope.get()\n-                    } else {\n-                        relative_depth += 1;\n-                        invocation.expansion.get()\n                     }\n                 }\n                 LegacyScope::Invocation(invocation) => {\n                     relative_depth = relative_depth.saturating_sub(1);\n-                    invocation.legacy_scope.get()\n+                    scope = &invocation.legacy_scope;\n                 }\n                 LegacyScope::Binding(potential_binding) => {\n                     if potential_binding.name == name {\n@@ -332,7 +319,7 @@ impl<'a> Resolver<'a> {\n                         binding = Some(potential_binding);\n                         break\n                     }\n-                    potential_binding.parent\n+                    scope = &potential_binding.parent;\n                 }\n             };\n         }\n@@ -358,7 +345,7 @@ impl<'a> Resolver<'a> {\n     pub fn finalize_current_module_macro_resolutions(&mut self) {\n         let module = self.current_module;\n         for &(mark, name, span) in module.legacy_macro_resolutions.borrow().iter() {\n-            let legacy_scope = self.invocations[&mark].legacy_scope.get();\n+            let legacy_scope = &self.invocations[&mark].legacy_scope;\n             let legacy_resolution = self.resolve_legacy_scope(legacy_scope, name, true);\n             let resolution = self.resolve_in_item_lexical_scope(name, MacroNS, Some(span));\n             let (legacy_resolution, resolution) = match (legacy_resolution, resolution) {"}]}