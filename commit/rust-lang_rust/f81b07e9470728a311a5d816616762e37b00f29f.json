{"sha": "f81b07e9470728a311a5d816616762e37b00f29f", "node_id": "C_kwDOAAsO6NoAKGY4MWIwN2U5NDcwNzI4YTMxMWE1ZDgxNjYxNjc2MmUzN2IwMGYyOWY", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T09:27:21Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-09-10T09:34:23Z"}, "message": "Adapt inplace collection leak test to check for no leaks", "tree": {"sha": "31be3bc1ad87f3321e288ef71c0d51fbad1462e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31be3bc1ad87f3321e288ef71c0d51fbad1462e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81b07e9470728a311a5d816616762e37b00f29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81b07e9470728a311a5d816616762e37b00f29f", "html_url": "https://github.com/rust-lang/rust/commit/f81b07e9470728a311a5d816616762e37b00f29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81b07e9470728a311a5d816616762e37b00f29f/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa61678a7d471cfc8bf166979674d4574a5d3bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa61678a7d471cfc8bf166979674d4574a5d3bec", "html_url": "https://github.com/rust-lang/rust/commit/fa61678a7d471cfc8bf166979674d4574a5d3bec"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "ebf5cbd0e60e014b46df2a8981c2b15fe3822307", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f81b07e9470728a311a5d816616762e37b00f29f/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81b07e9470728a311a5d816616762e37b00f29f/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=f81b07e9470728a311a5d816616762e37b00f29f", "patch": "@@ -1110,23 +1110,31 @@ fn test_from_iter_specialization_panic_during_iteration_drops() {\n }\n \n #[test]\n-fn test_from_iter_specialization_panic_during_drop_leaks() {\n-    static mut DROP_COUNTER: usize = 0;\n+fn test_from_iter_specialization_panic_during_drop_doesnt_leak() {\n+    static mut DROP_COUNTER_SHOULD_BE_DROPPED: usize = 0;\n+    static mut DROP_COUNTER_DROPPED_TWICE: usize = 0;\n \n     #[derive(Debug)]\n     enum Droppable {\n+        ShouldBeDropped,\n         DroppedTwice(Box<i32>),\n         PanicOnDrop,\n     }\n \n     impl Drop for Droppable {\n         fn drop(&mut self) {\n             match self {\n+                Droppable::ShouldBeDropped => {\n+                    unsafe {\n+                        DROP_COUNTER_SHOULD_BE_DROPPED += 1;\n+                    }\n+                    println!(\"Dropping ShouldBeDropped!\")\n+                }\n                 Droppable::DroppedTwice(_) => {\n                     unsafe {\n-                        DROP_COUNTER += 1;\n+                        DROP_COUNTER_DROPPED_TWICE += 1;\n                     }\n-                    println!(\"Dropping!\")\n+                    println!(\"Dropping DroppedTwice!\")\n                 }\n                 Droppable::PanicOnDrop => {\n                     if !std::thread::panicking() {\n@@ -1137,21 +1145,17 @@ fn test_from_iter_specialization_panic_during_drop_leaks() {\n         }\n     }\n \n-    let mut to_free: *mut Droppable = core::ptr::null_mut();\n-    let mut cap = 0;\n-\n     let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n-        let mut v = vec![Droppable::DroppedTwice(Box::new(123)), Droppable::PanicOnDrop];\n-        to_free = v.as_mut_ptr();\n-        cap = v.capacity();\n-        let _ = v.into_iter().take(0).collect::<Vec<_>>();\n+        let v = vec![\n+            Droppable::ShouldBeDropped,\n+            Droppable::DroppedTwice(Box::new(123)),\n+            Droppable::PanicOnDrop,\n+        ];\n+        let _ = v.into_iter().take(1).collect::<Vec<_>>();\n     }));\n \n-    assert_eq!(unsafe { DROP_COUNTER }, 1);\n-    // clean up the leak to keep miri happy\n-    unsafe {\n-        drop(Vec::from_raw_parts(to_free, 0, cap));\n-    }\n+    assert_eq!(unsafe { DROP_COUNTER_SHOULD_BE_DROPPED }, 1);\n+    assert_eq!(unsafe { DROP_COUNTER_DROPPED_TWICE }, 1);\n }\n \n // regression test for issue #85322. Peekable previously implemented InPlaceIterable,"}]}