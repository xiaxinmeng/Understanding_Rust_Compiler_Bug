{"sha": "45b989a03319c6a53bb726ec98dfe7d172035ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Yjk4OWEwMzMxOWM2YTUzYmI3MjZlYzk4ZGZlN2QxNzIwMzVhYzY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-18T21:37:24Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-20T12:45:39Z"}, "message": "Enable 2021 compatibility lints for all in-tree code\n\nThis just applies the suggested fixes from the compatibility warnings,\nleaving any that are in practice spurious in. This is primarily intended to\nprovide a starting point to identify possible fixes to the migrations (e.g., by\navoiding spurious warnings).\n\nA secondary commit cleans these up where they are false positives (as is true in\nmany of the cases).", "tree": {"sha": "072c2bea54d0a91860739ab5aa5e3293a3d9c66a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072c2bea54d0a91860739ab5aa5e3293a3d9c66a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b989a03319c6a53bb726ec98dfe7d172035ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b989a03319c6a53bb726ec98dfe7d172035ac6", "html_url": "https://github.com/rust-lang/rust/commit/45b989a03319c6a53bb726ec98dfe7d172035ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b989a03319c6a53bb726ec98dfe7d172035ac6/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e1a614b5369c430a383beaf1aec04f09740edbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1a614b5369c430a383beaf1aec04f09740edbb", "html_url": "https://github.com/rust-lang/rust/commit/5e1a614b5369c430a383beaf1aec04f09740edbb"}], "stats": {"total": 86, "additions": 52, "deletions": 34}, "files": [{"sha": "fcb79c8332c1e3207e52d4ddd128fbd7aea98860", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -906,8 +906,11 @@ impl ThinLTOKeysMap {\n     ) -> Self {\n         let keys = iter::zip(modules, names)\n             .map(|(module, name)| {\n-                let key = build_string(|rust_str| unsafe {\n-                    llvm::LLVMRustComputeLTOCacheKey(rust_str, module.identifier, data.0);\n+                let key = build_string(|rust_str| {\n+                    let _ = &data;\n+                    unsafe {\n+                        llvm::LLVMRustComputeLTOCacheKey(rust_str, module.identifier, data.0);\n+                    }\n                 })\n                 .expect(\"Invalid ThinLTO module key\");\n                 (name.clone().into_string().unwrap(), key)"}, {"sha": "fc69770bf6a306f68bd89aa3f2ff60005507b4e2", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -77,7 +77,7 @@ macro_rules! throw_validation_failure {\n ///\n macro_rules! try_validation {\n     ($e:expr, $where:expr,\n-    $( $( $p:pat )|+ => { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? ),+ $(,)?\n+    $( $( $p:pat_param )|+ => { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? ),+ $(,)?\n     ) => {{\n         match $e {\n             Ok(x) => x,"}, {"sha": "33ce8f5f97fdfcd9193e0e8a154f7d2bccfe8921", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -195,10 +195,10 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n         let Trace { at, trace, a_is_expected } = self;\n         at.infcx.commit_if_ok(|_| {\n             let mut fields = at.infcx.combine_fields(trace, at.param_env);\n-            fields\n-                .sub(a_is_expected)\n-                .relate(a, b)\n-                .map(move |_| InferOk { value: (), obligations: fields.obligations })\n+            fields.sub(a_is_expected).relate(a, b).map(move |_| {\n+                let _ = &fields;\n+                InferOk { value: (), obligations: fields.obligations }\n+            })\n         })\n     }\n \n@@ -212,10 +212,10 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n         let Trace { at, trace, a_is_expected } = self;\n         at.infcx.commit_if_ok(|_| {\n             let mut fields = at.infcx.combine_fields(trace, at.param_env);\n-            fields\n-                .equate(a_is_expected)\n-                .relate(a, b)\n-                .map(move |_| InferOk { value: (), obligations: fields.obligations })\n+            fields.equate(a_is_expected).relate(a, b).map(move |_| {\n+                let _ = &fields;\n+                InferOk { value: (), obligations: fields.obligations }\n+            })\n         })\n     }\n \n@@ -227,10 +227,10 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n         let Trace { at, trace, a_is_expected } = self;\n         at.infcx.commit_if_ok(|_| {\n             let mut fields = at.infcx.combine_fields(trace, at.param_env);\n-            fields\n-                .lub(a_is_expected)\n-                .relate(a, b)\n-                .map(move |t| InferOk { value: t, obligations: fields.obligations })\n+            fields.lub(a_is_expected).relate(a, b).map(move |t| {\n+                let _ = &fields;\n+                InferOk { value: t, obligations: fields.obligations }\n+            })\n         })\n     }\n \n@@ -242,10 +242,10 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n         let Trace { at, trace, a_is_expected } = self;\n         at.infcx.commit_if_ok(|_| {\n             let mut fields = at.infcx.combine_fields(trace, at.param_env);\n-            fields\n-                .glb(a_is_expected)\n-                .relate(a, b)\n-                .map(move |t| InferOk { value: t, obligations: fields.obligations })\n+            fields.glb(a_is_expected).relate(a, b).map(move |t| {\n+                let _ = &fields;\n+                InferOk { value: t, obligations: fields.obligations }\n+            })\n         })\n     }\n }"}, {"sha": "3d90a6c9345362d5c4875202661d8a813eeee1e5", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -125,6 +125,7 @@ pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f:\n     let result_ptr = Ptr(&mut result as *mut _ as *mut ());\n \n     let thread = cfg.spawn(move || {\n+        let _ = (&run, &result_ptr);\n         let run = unsafe { (*(run.0 as *mut Option<F>)).take().unwrap() };\n         let result = unsafe { &mut *(result_ptr.0 as *mut Option<R>) };\n         *result = Some(run());"}, {"sha": "2d408e577d1675c94ff63baad5d8fc5f2393b196", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -41,6 +41,7 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let sp = tcx.sess.source_map().guess_head_span(tcx.hir().span_with_body(hir_id));\n         tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION, hir_id, sp, |lint| {\n+            let _ = &vis;\n             let mut db = lint.build(\"function cannot return without recursing\");\n             db.span_label(sp, \"cannot return without recursing\");\n             // offer some help to the programmer."}, {"sha": "8ee217655d92d1202e80fa81ca5033ebd29480c7", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -40,7 +40,10 @@ where\n             info!(\"fully_perform({:?})\", self);\n         }\n \n-        scrape_region_constraints(infcx, || (self.closure)(infcx))\n+        scrape_region_constraints(infcx, || {\n+            let _ = &self;\n+            (self.closure)(infcx)\n+        })\n     }\n }\n "}, {"sha": "36fe059498352f0fa2003e2b24a1aa512bd0f1f3", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -394,6 +394,7 @@ fn report_conflicting_impls(\n     // now because the struct_lint methods don't return back the DiagnosticBuilder\n     // that's passed in.\n     let decorate = |err: LintDiagnosticBuilder<'_>| {\n+        let _ = &overlap;\n         let msg = format!(\n             \"conflicting implementations of trait `{}`{}{}\",\n             overlap.trait_desc,"}, {"sha": "c3e5b79c8f468279ce5bba8c7b9a3a09483dbe11", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -104,19 +104,22 @@ impl ChildrenExt for Children {\n                 let self_ty = trait_ref.self_ty();\n \n                 // FIXME: should postpone string formatting until we decide to actually emit.\n-                with_no_trimmed_paths(|| OverlapError {\n-                    with_impl: possible_sibling,\n-                    trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                    // Only report the `Self` type if it has at least\n-                    // some outer concrete shell; otherwise, it's\n-                    // not adding much information.\n-                    self_desc: if self_ty.has_concrete_skeleton() {\n-                        Some(self_ty.to_string())\n-                    } else {\n-                        None\n-                    },\n-                    intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n-                    involves_placeholder: overlap.involves_placeholder,\n+                with_no_trimmed_paths(|| {\n+                    let _ = &overlap;\n+                    OverlapError {\n+                        with_impl: possible_sibling,\n+                        trait_desc: trait_ref.print_only_trait_path().to_string(),\n+                        // Only report the `Self` type if it has at least\n+                        // some outer concrete shell; otherwise, it's\n+                        // not adding much information.\n+                        self_desc: if self_ty.has_concrete_skeleton() {\n+                            Some(self_ty.to_string())\n+                        } else {\n+                            None\n+                        },\n+                        intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n+                        involves_placeholder: overlap.involves_placeholder,\n+                    }\n                 })\n             };\n "}, {"sha": "b359e8b2ebe06b5a8259b0419679f3285c3779b8", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -1192,6 +1192,7 @@ fn compare_type_predicate_entailment<'tcx>(\n         normalize_cause.clone(),\n     );\n     tcx.infer_ctxt().enter(|infcx| {\n+        let _ = &impl_ty_own_bounds;\n         let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n         let infcx = &inh.infcx;\n "}, {"sha": "56b1588301343bed413886a0ac3e777b4f549346", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // this creates one big transaction so that all type variables etc\n         // that we create during the probe process are removed later\n         self.probe(|_| {\n+            let _ = &steps;\n             let mut probe_cx = ProbeContext::new(\n                 self,\n                 span,"}, {"sha": "71bdfdd4adefe4d5e0ae48fccba9284758b42840", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -964,6 +964,7 @@ impl Tester for Collector {\n                 test_type: test::TestType::DocTest,\n             },\n             testfn: test::DynTestFn(Box::new(move || {\n+                let _ = &config;\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };"}, {"sha": "5c505f6851afe54923c03c92749fa20b79d98952", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b989a03319c6a53bb726ec98dfe7d172035ac6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b989a03319c6a53bb726ec98dfe7d172035ac6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=45b989a03319c6a53bb726ec98dfe7d172035ac6", "patch": "@@ -990,7 +990,10 @@ pub fn can_move_expr_to_closure(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) ->\n         captures: HirIdMap::default(),\n     };\n     v.visit_expr(expr);\n-    v.allow_closure.then(|| v.captures)\n+    v.allow_closure.then(|| {\n+        let _ = &v;\n+        v.captures\n+    })\n }\n \n /// Returns the method names and argument list of nested method call expressions that make up"}]}