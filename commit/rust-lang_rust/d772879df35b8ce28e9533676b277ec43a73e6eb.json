{"sha": "d772879df35b8ce28e9533676b277ec43a73e6eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzI4NzlkZjM1YjhjZTI4ZTk1MzM2NzZiMjc3ZWM0M2E3M2U2ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T12:11:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T12:11:47Z"}, "message": "Auto merge of #77762 - pietroalbini:dist-build-manifest, r=Mark-Simulacrum\n\nDist build manifest\n\nThis PR makes two changes that should remove a significant chunk of the time spent in our release process: cloning the `rust-lang/rust` monorepo, all its submodules, and building `bootstrap` to then invoke `build-manifest`:\n\n* `build-manifest` doesn't rely on a clone of the monorepo being present anymore. The only remaining bit of information it fetched from it (the Rust version) is instead bundled in the binary.\n* A new \"component\" is added, `build-manifest`. That component includes a prebuilt version of the tool, and it's *not* included in the Rustup manifest. This will allow `promote-release` to directly invoke the tool without interacting with our build system.\n* The Linux x86_64 CI is changed to also build the component mentioned above. It's the only CI builder tasked to do so, and to cleanly support this a new `--include-default-paths` flag was added to `./x.py`.\n* The `BUILD_MANIFEST_NUM_THREADS` environment variable is added to configure the number of threads at runtime.\n\nThis PR is best reviewed commit-by-commit.\nr? `@Mark-Simulacrum`", "tree": {"sha": "2bde1a6f7ba5c94fb88cd2199e7bbb1187ff73a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bde1a6f7ba5c94fb88cd2199e7bbb1187ff73a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d772879df35b8ce28e9533676b277ec43a73e6eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d772879df35b8ce28e9533676b277ec43a73e6eb", "html_url": "https://github.com/rust-lang/rust/commit/d772879df35b8ce28e9533676b277ec43a73e6eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d772879df35b8ce28e9533676b277ec43a73e6eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6eccdb67aef48d0804cb473536b925f61a7f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6eccdb67aef48d0804cb473536b925f61a7f18", "html_url": "https://github.com/rust-lang/rust/commit/2d6eccdb67aef48d0804cb473536b925f61a7f18"}, {"sha": "0b7ee9d522242d6320d1066d3ba9d2314a576e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ee9d522242d6320d1066d3ba9d2314a576e8b", "html_url": "https://github.com/rust-lang/rust/commit/0b7ee9d522242d6320d1066d3ba9d2314a576e8b"}], "stats": {"total": 183, "additions": 127, "deletions": 56}, "files": [{"sha": "83ac8396a16e393d0e9a04c27d0e3ad96a9b498e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -243,6 +243,7 @@ dependencies = [\n  \"anyhow\",\n  \"flate2\",\n  \"hex 0.4.2\",\n+ \"num_cpus\",\n  \"rayon\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "707c1ff3efad93012f7893ebed89731fe52d06f4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -193,37 +193,37 @@ impl StepDescription {\n             );\n         }\n \n-        if paths.is_empty() {\n-            for (desc, should_run) in v.iter().zip(should_runs) {\n+        if paths.is_empty() || builder.config.include_default_paths {\n+            for (desc, should_run) in v.iter().zip(&should_runs) {\n                 if desc.default && should_run.is_really_default {\n                     for pathset in &should_run.paths {\n                         desc.maybe_run(builder, pathset);\n                     }\n                 }\n             }\n-        } else {\n-            for path in paths {\n-                // strip CurDir prefix if present\n-                let path = match path.strip_prefix(\".\") {\n-                    Ok(p) => p,\n-                    Err(_) => path,\n-                };\n+        }\n \n-                let mut attempted_run = false;\n-                for (desc, should_run) in v.iter().zip(&should_runs) {\n-                    if let Some(suite) = should_run.is_suite_path(path) {\n-                        attempted_run = true;\n-                        desc.maybe_run(builder, suite);\n-                    } else if let Some(pathset) = should_run.pathset_for_path(path) {\n-                        attempted_run = true;\n-                        desc.maybe_run(builder, pathset);\n-                    }\n-                }\n+        for path in paths {\n+            // strip CurDir prefix if present\n+            let path = match path.strip_prefix(\".\") {\n+                Ok(p) => p,\n+                Err(_) => path,\n+            };\n \n-                if !attempted_run {\n-                    panic!(\"error: no rules matched {}\", path.display());\n+            let mut attempted_run = false;\n+            for (desc, should_run) in v.iter().zip(&should_runs) {\n+                if let Some(suite) = should_run.is_suite_path(path) {\n+                    attempted_run = true;\n+                    desc.maybe_run(builder, suite);\n+                } else if let Some(pathset) = should_run.pathset_for_path(path) {\n+                    attempted_run = true;\n+                    desc.maybe_run(builder, pathset);\n                 }\n             }\n+\n+            if !attempted_run {\n+                panic!(\"error: no rules matched {}\", path.display());\n+            }\n         }\n     }\n }\n@@ -462,6 +462,7 @@ impl<'a> Builder<'a> {\n                 dist::LlvmTools,\n                 dist::RustDev,\n                 dist::Extended,\n+                dist::BuildManifest,\n                 dist::HashSign\n             ),\n             Kind::Install => describe!("}, {"sha": "db82155bd6ad2172b71b0b3315f78f39a043467d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -61,6 +61,7 @@ pub struct Config {\n     pub profiler: bool,\n     pub ignore_git: bool,\n     pub exclude: Vec<PathBuf>,\n+    pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n@@ -532,6 +533,7 @@ impl Config {\n \n         let mut config = Config::default_opts();\n         config.exclude = flags.exclude;\n+        config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;\n         config.on_fail = flags.on_fail;"}, {"sha": "dd4cf9d5953230ea19306ffaf446d1af3ff3a6f6", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -2353,7 +2353,6 @@ impl Step for HashSign {\n         cmd.arg(today.trim());\n         cmd.arg(addr);\n         cmd.arg(&builder.config.channel);\n-        cmd.arg(&builder.src);\n         cmd.env(\"BUILD_MANIFEST_LEGACY\", \"1\");\n \n         builder.create_dir(&distdir(builder));\n@@ -2584,3 +2583,70 @@ impl Step for RustDev {\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple)))\n     }\n }\n+\n+/// Tarball containing a prebuilt version of the build-manifest tool, intented to be used by the\n+/// release process to avoid cloning the monorepo and building stuff.\n+///\n+/// Should not be considered stable by end users.\n+#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n+pub struct BuildManifest {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for BuildManifest {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = false;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/build-manifest\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(BuildManifest { target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let build_manifest = builder.tool_exe(Tool::BuildManifest);\n+\n+        let name = pkgname(builder, \"build-manifest\");\n+        let tmp = tmpdir(builder);\n+\n+        // Prepare the image.\n+        let image = tmp.join(\"build-manifest-image\");\n+        let image_bin = image.join(\"bin\");\n+        let _ = fs::remove_dir_all(&image);\n+        t!(fs::create_dir_all(&image_bin));\n+        builder.install(&build_manifest, &image_bin.join(\"build-manifest\"), 0o755);\n+\n+        // Prepare the overlay.\n+        let overlay = tmp.join(\"build-manifest-overlay\");\n+        let _ = fs::remove_dir_all(&overlay);\n+        builder.create_dir(&overlay);\n+        builder.create(&overlay.join(\"version\"), &builder.rust_version());\n+        for file in &[\"COPYRIGHT\", \"LICENSE-APACHE\", \"LICENSE-MIT\", \"README.md\"] {\n+            builder.install(&builder.src.join(file), &overlay, 0o644);\n+        }\n+\n+        // Create the final tarball.\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--success-message=build-manifest installed.\")\n+            .arg(\"--image-dir\")\n+            .arg(&image)\n+            .arg(\"--work-dir\")\n+            .arg(&tmpdir(builder))\n+            .arg(\"--output-dir\")\n+            .arg(&distdir(builder))\n+            .arg(\"--non-installed-overlay\")\n+            .arg(&overlay)\n+            .arg(format!(\"--package-name={}-{}\", name, self.target.triple))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(\"--component-name=build-manifest\");\n+\n+        builder.run(&mut cmd);\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, self.target.triple))\n+    }\n+}"}, {"sha": "c10188875fbc4a46779200a8c48f1190c0d4b1f3", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -30,6 +30,7 @@ pub struct Flags {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub exclude: Vec<PathBuf>,\n+    pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub dry_run: bool,\n@@ -137,6 +138,11 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n         opts.optmulti(\"\", \"exclude\", \"build paths to exclude\", \"PATH\");\n+        opts.optflag(\n+            \"\",\n+            \"include-default-paths\",\n+            \"include default paths in addition to the provided ones\",\n+        );\n         opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optflag(\"\", \"dry-run\", \"dry run; don't build anything\");\n         opts.optopt(\n@@ -618,6 +624,7 @@ Arguments:\n                 .into_iter()\n                 .map(|p| p.into())\n                 .collect::<Vec<_>>(),\n+            include_default_paths: matches.opt_present(\"include-default-paths\"),\n             deny_warnings: parse_deny_warnings(&matches),\n             llvm_skip_rebuild: matches.opt_str(\"llvm-skip-rebuild\").map(|s| s.to_lowercase()).map(\n                 |s| s.parse::<bool>().expect(\"`llvm-skip-rebuild` should be either true or false\"),"}, {"sha": "7c64e5a0aadc8e3624dfc6900a268115eb40a931", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -77,7 +77,6 @@ impl Step for BuildManifest {\n         cmd.arg(today.trim());\n         cmd.arg(addr);\n         cmd.arg(&builder.config.channel);\n-        cmd.arg(&builder.src);\n \n         builder.create_dir(&distdir(builder));\n         builder.run(&mut cmd);"}, {"sha": "14700aeea05afa86b1612abd3c4588bb3e14a85e", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -98,7 +98,9 @@ ENV RUST_CONFIGURE_ARGS \\\n       --set llvm.thin-lto=true \\\n       --set llvm.ninja=false \\\n       --set rust.jemalloc\n-ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS \\\n+        --include-default-paths \\\n+        src/tools/build-manifest\n ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang\n \n # This is the only builder which will create source tarballs"}, {"sha": "4a2c710811f617e54654edf7761d6e174981209b", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -14,3 +14,4 @@ tar = \"0.4.29\"\n sha2 = \"0.9.1\"\n rayon = \"1.3.1\"\n hex = \"0.4.2\"\n+num_cpus = \"1.13.0\""}, {"sha": "b77c5a907c11893444d58290456046edb4173d6f", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -21,8 +21,8 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n \n ```\n $ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com \\\n-    CHANNEL path/to/rust/repo\n+    CHANNEL VERSION\n ```\n \n Remember to replace `CHANNEL` with the channel you produced dist artifacts of\n-and `path/to/rust/repo` with the path to your checkout of the Rust repository.\n+and `VERSION` with the current Rust version."}, {"sha": "cb04900c737e07ecf99ee9f2badea0c1ca5c60b9", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -205,23 +205,27 @@ fn main() {\n     //\n     // Once the old release process is fully decommissioned, the environment variable, all the\n     // related code in this tool and ./x.py dist hash-and-sign can be removed.\n-    let legacy = env::var(\"BUILD_MANIFEST_LEGACY\").is_ok();\n-\n-    // Avoid overloading the old server in legacy mode.\n-    if legacy {\n-        rayon::ThreadPoolBuilder::new()\n-            .num_threads(1)\n-            .build_global()\n-            .expect(\"failed to initialize Rayon\");\n-    }\n+    let legacy = env::var_os(\"BUILD_MANIFEST_LEGACY\").is_some();\n+\n+    let num_threads = if legacy {\n+        // Avoid overloading the old server in legacy mode.\n+        1\n+    } else if let Some(num) = env::var_os(\"BUILD_MANIFEST_NUM_THREADS\") {\n+        num.to_str().unwrap().parse().expect(\"invalid number for BUILD_MANIFEST_NUM_THREADS\")\n+    } else {\n+        num_cpus::get()\n+    };\n+    rayon::ThreadPoolBuilder::new()\n+        .num_threads(num_threads)\n+        .build_global()\n+        .expect(\"failed to initialize Rayon\");\n \n     let mut args = env::args().skip(1);\n     let input = PathBuf::from(args.next().unwrap());\n     let output = PathBuf::from(args.next().unwrap());\n     let date = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let channel = args.next().unwrap();\n-    let monorepo_path = args.next().unwrap();\n \n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n@@ -231,7 +235,7 @@ fn main() {\n     }\n \n     Builder {\n-        versions: Versions::new(&channel, &input, Path::new(&monorepo_path)).unwrap(),\n+        versions: Versions::new(&channel, &input).unwrap(),\n \n         input,\n         output,"}, {"sha": "79f2ef8dfc450cff1196bf1c03982560317cd9c7", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d772879df35b8ce28e9533676b277ec43a73e6eb/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=d772879df35b8ce28e9533676b277ec43a73e6eb", "patch": "@@ -1,4 +1,4 @@\n-use anyhow::{Context, Error};\n+use anyhow::Error;\n use flate2::read::GzDecoder;\n use std::collections::HashMap;\n use std::fs::File;\n@@ -7,6 +7,7 @@ use std::path::{Path, PathBuf};\n use tar::Archive;\n \n const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n+const RUSTC_VERSION: &str = include_str!(\"../../../version\");\n \n #[derive(Debug, Hash, Eq, PartialEq, Clone)]\n pub(crate) enum PkgType {\n@@ -87,26 +88,13 @@ pub(crate) struct VersionInfo {\n \n pub(crate) struct Versions {\n     channel: String,\n-    rustc_version: String,\n     dist_path: PathBuf,\n     versions: HashMap<PkgType, VersionInfo>,\n }\n \n impl Versions {\n-    pub(crate) fn new(\n-        channel: &str,\n-        dist_path: &Path,\n-        monorepo_root: &Path,\n-    ) -> Result<Self, Error> {\n-        Ok(Self {\n-            channel: channel.into(),\n-            rustc_version: std::fs::read_to_string(monorepo_root.join(\"src\").join(\"version\"))\n-                .context(\"failed to read the rustc version from src/version\")?\n-                .trim()\n-                .to_string(),\n-            dist_path: dist_path.into(),\n-            versions: HashMap::new(),\n-        })\n+    pub(crate) fn new(channel: &str, dist_path: &Path) -> Result<Self, Error> {\n+        Ok(Self { channel: channel.into(), dist_path: dist_path.into(), versions: HashMap::new() })\n     }\n \n     pub(crate) fn channel(&self) -> &str {\n@@ -184,10 +172,10 @@ impl Versions {\n     ) -> Result<String, Error> {\n         let component_name = package.tarball_component_name();\n         let version = match self.channel.as_str() {\n-            \"stable\" => self.rustc_version.clone(),\n+            \"stable\" => RUSTC_VERSION.into(),\n             \"beta\" => \"beta\".into(),\n             \"nightly\" => \"nightly\".into(),\n-            _ => format!(\"{}-dev\", self.rustc_version),\n+            _ => format!(\"{}-dev\", RUSTC_VERSION),\n         };\n \n         if package.target_independent() {\n@@ -198,6 +186,6 @@ impl Versions {\n     }\n \n     pub(crate) fn rustc_version(&self) -> &str {\n-        &self.rustc_version\n+        RUSTC_VERSION\n     }\n }"}]}