{"sha": "41a0ccbc57902e488e62ed8ca9a1ebb565129c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYTBjY2JjNTc5MDJlNDg4ZTYyZWQ4Y2E5YTFlYmI1NjUxMjljMDk=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T08:19:14Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T08:38:50Z"}, "message": "add comments around `loop_counters`", "tree": {"sha": "e794bb810a8d69bf36248e5551457c2c2be08b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e794bb810a8d69bf36248e5551457c2c2be08b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a0ccbc57902e488e62ed8ca9a1ebb565129c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a0ccbc57902e488e62ed8ca9a1ebb565129c09", "html_url": "https://github.com/rust-lang/rust/commit/41a0ccbc57902e488e62ed8ca9a1ebb565129c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a0ccbc57902e488e62ed8ca9a1ebb565129c09/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1402d8ae4f0c07ac48bd8297ec07901346c32d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/1402d8ae4f0c07ac48bd8297ec07901346c32d32", "html_url": "https://github.com/rust-lang/rust/commit/1402d8ae4f0c07ac48bd8297ec07901346c32d32"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "4f279cc5ef7bca6d76b9aef69172de78ac53b729", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41a0ccbc57902e488e62ed8ca9a1ebb565129c09/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a0ccbc57902e488e62ed8ca9a1ebb565129c09/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=41a0ccbc57902e488e62ed8ca9a1ebb565129c09", "patch": "@@ -1005,6 +1005,10 @@ fn get_assignment<'tcx>(e: &'tcx Expr<'tcx>) -> Option<(&'tcx Expr<'tcx>, &'tcx\n     }\n }\n \n+/// Get assignments from the given block.\n+/// The returned iterator yields `None` if no assignment expressions are there,\n+/// filtering out the increments of the given whitelisted loop counters;\n+/// because its job is to make sure there's nothing other than assignments and the increments.\n fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n     cx: &'a LateContext<'tcx>,\n     Block { stmts, expr, .. }: &'tcx Block<'tcx>,\n@@ -1021,7 +1025,8 @@ fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n             if let ExprKind::AssignOp(_, place, _) = e.kind {\n                 !loop_counters\n                     .iter()\n-                    // skip StartKind::Range\n+                    // skip the first item which should be `StartKind::Range`\n+                    // this makes it possible to use the slice with `StartKind::Range` in the same iterator loop.\n                     .skip(1)\n                     .any(|counter| same_var(cx, place, counter.id))\n             } else {\n@@ -1191,11 +1196,11 @@ fn detect_manual_memcpy<'tcx>(\n                 iter_b = Some(get_assignment(body));\n             }\n \n-            // The only statements in the for loops can be indexed assignments from\n-            // indexed retrievals.\n             let assignments = iter_a.into_iter().flatten().chain(iter_b.into_iter());\n \n             let big_sugg = assignments\n+                // The only statements in the for loops can be indexed assignments from\n+                // indexed retrievals (except increments of loop counters).\n                 .map(|o| {\n                     o.and_then(|(lhs, rhs)| {\n                         let rhs = fetch_cloned_expr(rhs);"}]}