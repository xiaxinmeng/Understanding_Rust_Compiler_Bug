{"sha": "f5a100e5fd753580a6b909f0d45198f0c5593c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTEwMGU1ZmQ3NTM1ODBhNmI5MDlmMGQ0NTE5OGYwYzU1OTNjNDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-06T18:31:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-06T18:31:51Z"}, "message": "Merge #9514\n\n9514: internal: Invert boolean literals in assist negation logic r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "02dfa01024b91ee8eab97f2e82f3f4813e3fcb01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02dfa01024b91ee8eab97f2e82f3f4813e3fcb01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a100e5fd753580a6b909f0d45198f0c5593c41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5KGXCRBK7hj4Ov3rIwAAAUAIAF09bQ80I3Dhr7Rr8O1z8n/J\n7Bh6iTltRPNqEjadlb8/yju7MQQ8Cc2U5n67ZFW5S2gPUQWKA8aI5eIcQXw3t7bV\nXRrvkCEo62YM+N1jN0izH6PsBeFckfmROk6ZMdiV7dTDrR7tFcunnZ+OiTGHIilQ\n7LLG87vycSERm734dbeFTluu6uSaZZOnMNBJLeDARgzKabQgLcHyjExudnBLi79V\nRBimlaqE/UTD3+MViEDSOEPq5O0LO/wRVTfLt1wFi5YVdOP+t8QQ5kfftELwIK+q\nTNiilUBkgP1ESEJWhC6FSejpE1hZeotiwR9RshckeROdvOMnHyJWHyuyrzDXTWg=\n=a7ND\n-----END PGP SIGNATURE-----\n", "payload": "tree 02dfa01024b91ee8eab97f2e82f3f4813e3fcb01\nparent 112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2\nparent d91704cac59671e9d92b277dce37b9f9b1a316c9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625596311 +0000\ncommitter GitHub <noreply@github.com> 1625596311 +0000\n\nMerge #9514\n\n9514: internal: Invert boolean literals in assist negation logic r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a100e5fd753580a6b909f0d45198f0c5593c41", "html_url": "https://github.com/rust-lang/rust/commit/f5a100e5fd753580a6b909f0d45198f0c5593c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a100e5fd753580a6b909f0d45198f0c5593c41/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "html_url": "https://github.com/rust-lang/rust/commit/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2"}, {"sha": "d91704cac59671e9d92b277dce37b9f9b1a316c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91704cac59671e9d92b277dce37b9f9b1a316c9", "html_url": "https://github.com/rust-lang/rust/commit/d91704cac59671e9d92b277dce37b9f9b1a316c9"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "b220a4ba41839a5407f0acffd237d1fa951160a5", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=f5a100e5fd753580a6b909f0d45198f0c5593c41", "patch": "@@ -144,6 +144,7 @@ fn group_label(import_candidate: &ImportCandidate) -> GroupLabel {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     #[test]"}, {"sha": "a8e451e7eea715186f2b6a79825018324c38b9c1", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=f5a100e5fd753580a6b909f0d45198f0c5593c41", "patch": "@@ -211,7 +211,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 bar();\n-                if !true {\n+                if false {\n                     return;\n                 }\n                 foo();\n@@ -387,7 +387,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 while true {\n-                    if !true {\n+                    if false {\n                         continue;\n                     }\n                     foo();\n@@ -444,7 +444,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 loop {\n-                    if !true {\n+                    if false {\n                         continue;\n                     }\n                     foo();"}, {"sha": "f78099adf6ead1f65dc6a5c45a9c780c693ddd33", "filename": "crates/ide_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=f5a100e5fd753580a6b909f0d45198f0c5593c41", "patch": "@@ -65,35 +65,35 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n                         Some(u) => u,\n                         None => return Some(false),\n                     };\n-                    Some(\n-                        !(matches!(\n-                            initializer_expr,\n-                            ast::Expr::CallExpr(_)\n-                                | ast::Expr::IndexExpr(_)\n-                                | ast::Expr::MethodCallExpr(_)\n-                                | ast::Expr::FieldExpr(_)\n-                                | ast::Expr::TryExpr(_)\n-                                | ast::Expr::RefExpr(_)\n-                                | ast::Expr::Literal(_)\n-                                | ast::Expr::TupleExpr(_)\n-                                | ast::Expr::ArrayExpr(_)\n-                                | ast::Expr::ParenExpr(_)\n-                                | ast::Expr::PathExpr(_)\n-                                | ast::Expr::BlockExpr(_)\n-                                | ast::Expr::EffectExpr(_),\n-                        ) || matches!(\n-                            usage_parent,\n-                            ast::Expr::CallExpr(_)\n-                                | ast::Expr::TupleExpr(_)\n-                                | ast::Expr::ArrayExpr(_)\n-                                | ast::Expr::ParenExpr(_)\n-                                | ast::Expr::ForExpr(_)\n-                                | ast::Expr::WhileExpr(_)\n-                                | ast::Expr::BreakExpr(_)\n-                                | ast::Expr::ReturnExpr(_)\n-                                | ast::Expr::MatchExpr(_)\n-                        )),\n-                    )\n+                    let initializer = matches!(\n+                        initializer_expr,\n+                        ast::Expr::CallExpr(_)\n+                            | ast::Expr::IndexExpr(_)\n+                            | ast::Expr::MethodCallExpr(_)\n+                            | ast::Expr::FieldExpr(_)\n+                            | ast::Expr::TryExpr(_)\n+                            | ast::Expr::RefExpr(_)\n+                            | ast::Expr::Literal(_)\n+                            | ast::Expr::TupleExpr(_)\n+                            | ast::Expr::ArrayExpr(_)\n+                            | ast::Expr::ParenExpr(_)\n+                            | ast::Expr::PathExpr(_)\n+                            | ast::Expr::BlockExpr(_)\n+                            | ast::Expr::EffectExpr(_),\n+                    );\n+                    let parent = matches!(\n+                        usage_parent,\n+                        ast::Expr::CallExpr(_)\n+                            | ast::Expr::TupleExpr(_)\n+                            | ast::Expr::ArrayExpr(_)\n+                            | ast::Expr::ParenExpr(_)\n+                            | ast::Expr::ForExpr(_)\n+                            | ast::Expr::WhileExpr(_)\n+                            | ast::Expr::BreakExpr(_)\n+                            | ast::Expr::ReturnExpr(_)\n+                            | ast::Expr::MatchExpr(_)\n+                    );\n+                    Some(!(initializer || parent))\n                 })\n                 .collect::<Option<_>>()\n                 .map(|b| (file_id, b))"}, {"sha": "6204942fc7b689d36e4a6774ea361367efcb38f4", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=f5a100e5fd753580a6b909f0d45198f0c5593c41", "patch": "@@ -11,7 +11,6 @@ use crate::{\n \n // Assist: invert_if\n //\n-// Apply invert_if\n // This transforms if expressions of the form `if !x {A} else {B}` into `if x {B} else {A}`\n // This also works with `!=`. This assist can only be applied with the cursor\n // on `if`."}, {"sha": "00d12713e8811511c68c87a935662666ecc71464", "filename": "crates/ide_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=f5a100e5fd753580a6b909f0d45198f0c5593c41", "patch": "@@ -41,15 +41,16 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n     let let_stmt = let_kw.ancestors().find_map(ast::LetStmt::cast)?;\n     let init = let_stmt.initializer()?;\n     let original_pat = let_stmt.pat()?;\n-    let ty = ctx.sema.type_of_expr(&init)?;\n-    let happy_variant = TryEnum::from_ty(&ctx.sema, &ty).map(|it| it.happy_case());\n \n     let target = let_kw.text_range();\n     acc.add(\n         AssistId(\"replace_let_with_if_let\", AssistKind::RefactorRewrite),\n         \"Replace with if-let\",\n         target,\n         |edit| {\n+            let ty = ctx.sema.type_of_expr(&init);\n+            let happy_variant =\n+                ty.and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty)).map(|it| it.happy_case());\n             let pat = match happy_variant {\n                 None => original_pat,\n                 Some(var_name) => {"}, {"sha": "99c91463b98c7aacf04157ea7346a3726f406244", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a100e5fd753580a6b909f0d45198f0c5593c41/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=f5a100e5fd753580a6b909f0d45198f0c5593c41", "patch": "@@ -4,7 +4,6 @@ pub(crate) mod suggest_name;\n \n use std::ops;\n \n-use ast::TypeBoundsOwner;\n use hir::{Adt, HasSource, Semantics};\n use ide_db::{\n     helpers::{FamousDefs, SnippetCap},\n@@ -14,10 +13,11 @@ use ide_db::{\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    ast::edit::AstNodeEdit,\n-    ast::AttrsOwner,\n-    ast::NameOwner,\n-    ast::{self, edit, make, ArgListOwner, GenericParamsOwner},\n+    ast::{\n+        self,\n+        edit::{self, AstNodeEdit},\n+        make, ArgListOwner, AttrsOwner, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n+    },\n     ted, AstNode, Direction, SmolStr,\n     SyntaxKind::*,\n     SyntaxNode, TextSize, T,\n@@ -70,11 +70,7 @@ pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n pub fn test_related_attribute(fn_def: &ast::Fn) -> Option<ast::Attr> {\n     fn_def.attrs().find_map(|attr| {\n         let path = attr.path()?;\n-        if path.syntax().text().to_string().contains(\"test\") {\n-            Some(attr)\n-        } else {\n-            None\n-        }\n+        path.syntax().text().to_string().contains(\"test\").then(|| attr)\n     })\n }\n \n@@ -216,10 +212,7 @@ pub(crate) fn invert_boolean_expression(\n     sema: &Semantics<RootDatabase>,\n     expr: ast::Expr,\n ) -> ast::Expr {\n-    if let Some(expr) = invert_special_case(sema, &expr) {\n-        return expr;\n-    }\n-    make::expr_prefix(T![!], expr)\n+    invert_special_case(sema, &expr).unwrap_or_else(|| make::expr_prefix(T![!], expr))\n }\n \n fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<ast::Expr> {\n@@ -264,8 +257,13 @@ fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Opti\n                 pe.expr()\n             }\n         }\n-        // FIXME:\n-        // ast::Expr::Literal(true | false )\n+        ast::Expr::Literal(lit) => match lit.kind() {\n+            ast::LiteralKind::Bool(b) => match b {\n+                true => Some(ast::Expr::Literal(make::expr_literal(\"false\"))),\n+                false => Some(ast::Expr::Literal(make::expr_literal(\"true\"))),\n+            },\n+            _ => None,\n+        },\n         _ => None,\n     }\n }"}]}