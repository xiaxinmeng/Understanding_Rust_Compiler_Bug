{"sha": "92fecfbd6066c84d6cfbae2db77f8fd0c7235893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZmVjZmJkNjA2NmM4NGQ2Y2ZiYWUyZGI3N2Y4ZmQwYzcyMzU4OTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-19T13:21:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-19T13:21:24Z"}, "message": "Rollup merge of #57719 - nnethercote:expand_node-FIDDLING, r=nikomatsakis\n\nTweak `expand_node`\n\nThese commits speed up the `unicode_normalization` benchmark a little.", "tree": {"sha": "9d4568ecc88127c8fa7eb3ef61d689d81f5721a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4568ecc88127c8fa7eb3ef61d689d81f5721a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92fecfbd6066c84d6cfbae2db77f8fd0c7235893", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQyRUCRBK7hj4Ov3rIwAAdHIIADfm7h0orzgZK267BbiF0Tm9\n0vHxsAgQuBfcgk+7BW7ijJA2OIWmaUn9o99mAaxYO+6+lmGVSIdZKIbNPVvhhjSo\nronQphg45d5lzrGwRESZq21fZIakWc67FfwG+XnbW/e2hfw6Q6twn2HEbfirmdHJ\nSyLkYznFawnFLcEiAgk1McpCdGzV7oeS2mzSss+FbNRVTR7cuxa1QuVoeZjFng+A\nc4eu++GJs2FBp7nuNVQJeCDC46UsUdlIIUm16uVSXfUZ+rtAEfWfu+cWkc/zayK6\nzI56AkeEF2sao97m4dTClHXlDAaAVC+BvSDvfCnNgc5w1J/W1Pf68cbfEZATka8=\n=qB/c\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d4568ecc88127c8fa7eb3ef61d689d81f5721a7\nparent e78bde401524a430290dd5e5f1fc404422f8be2e\nparent 92fd6f9d30d0b6b4ecbcf01534809fb66393f139\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547904084 +0100\ncommitter GitHub <noreply@github.com> 1547904084 +0100\n\nRollup merge of #57719 - nnethercote:expand_node-FIDDLING, r=nikomatsakis\n\nTweak `expand_node`\n\nThese commits speed up the `unicode_normalization` benchmark a little.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92fecfbd6066c84d6cfbae2db77f8fd0c7235893", "html_url": "https://github.com/rust-lang/rust/commit/92fecfbd6066c84d6cfbae2db77f8fd0c7235893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92fecfbd6066c84d6cfbae2db77f8fd0c7235893/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78bde401524a430290dd5e5f1fc404422f8be2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78bde401524a430290dd5e5f1fc404422f8be2e", "html_url": "https://github.com/rust-lang/rust/commit/e78bde401524a430290dd5e5f1fc404422f8be2e"}, {"sha": "92fd6f9d30d0b6b4ecbcf01534809fb66393f139", "url": "https://api.github.com/repos/rust-lang/rust/commits/92fd6f9d30d0b6b4ecbcf01534809fb66393f139", "html_url": "https://github.com/rust-lang/rust/commit/92fd6f9d30d0b6b4ecbcf01534809fb66393f139"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "545192a1f211355135b2ddf9189791bc6a9fa027", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/92fecfbd6066c84d6cfbae2db77f8fd0c7235893/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fecfbd6066c84d6cfbae2db77f8fd0c7235893/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=92fecfbd6066c84d6cfbae2db77f8fd0c7235893", "patch": "@@ -186,34 +186,39 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        self.iterate_until_fixed_point(\"Expansion\", |constraint, origin| {\n-            debug!(\"expansion: constraint={:?} origin={:?}\", constraint, origin);\n-            match *constraint {\n+        self.iterate_until_fixed_point(\"Expansion\", |constraint| {\n+            debug!(\"expansion: constraint={:?}\", constraint);\n+            let (a_region, b_vid, b_data, retain) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n-                    (self.expand_node(a_region, b_vid, b_data), false)\n+                    (a_region, b_vid, b_data, false)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => (false, false),\n+                    VarValue::ErrorValue => return (false, false),\n                     VarValue::Value(a_region) => {\n-                        let b_node = var_values.value_mut(b_vid);\n-                        let changed = self.expand_node(a_region, b_vid, b_node);\n-                        let retain = match *b_node {\n+                        let b_data = var_values.value_mut(b_vid);\n+                        let retain = match *b_data {\n                             VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n                             _ => true\n                         };\n-                        (changed, retain)\n+                        (a_region, b_vid, b_data, retain)\n                     }\n                 },\n                 Constraint::RegSubReg(..) | Constraint::VarSubReg(..) => {\n                     // These constraints are checked after expansion\n                     // is done, in `collect_errors`.\n-                    (false, false)\n+                    return (false, false)\n                 }\n-            }\n+            };\n+\n+            let changed = self.expand_node(a_region, b_vid, b_data);\n+            (changed, retain)\n         })\n     }\n \n+    // This function is very hot in some workloads. There's a single callsite\n+    // so always inlining is ok even though it's large.\n+    #[inline(always)]\n     fn expand_node(\n         &self,\n         a_region: Region<'tcx>,\n@@ -722,18 +727,17 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     }\n \n     fn iterate_until_fixed_point<F>(&self, tag: &str, mut body: F)\n-    where\n-        F: FnMut(&Constraint<'tcx>, &SubregionOrigin<'tcx>) -> (bool, bool),\n+        where F: FnMut(&Constraint<'tcx>) -> (bool, bool),\n     {\n-        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.iter().collect();\n+        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.keys().collect();\n         let mut iteration = 0;\n         let mut changed = true;\n         while changed {\n             changed = false;\n             iteration += 1;\n             debug!(\"---- {} Iteration {}{}\", \"#\", tag, iteration);\n-            constraints.retain(|(constraint, origin)| {\n-                let (edge_changed, retain) = body(constraint, origin);\n+            constraints.retain(|constraint| {\n+                let (edge_changed, retain) = body(constraint);\n                 if edge_changed {\n                     debug!(\"Updated due to constraint {:?}\", constraint);\n                     changed = true;"}]}