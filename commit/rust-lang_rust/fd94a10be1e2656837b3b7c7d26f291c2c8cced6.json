{"sha": "fd94a10be1e2656837b3b7c7d26f291c2c8cced6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOTRhMTBiZTFlMjY1NjgzN2IzYjdjN2QyNmYyOTFjMmM4Y2NlZDY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-03T13:01:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T13:01:13Z"}, "message": "Add docs", "tree": {"sha": "d7a37fe8fdda5844b122ae307f254420b36fca9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7a37fe8fdda5844b122ae307f254420b36fca9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd94a10be1e2656837b3b7c7d26f291c2c8cced6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/ywZCRBK7hj4Ov3rIwAAdHIIAIq0Y6Y2p7aY4ZTOHq/fV3ln\nhU+bcO4v5Oo7vAMiGbXbaVufo858LQ5oo807GazzoMIrU7tKvATsQh7SxPNmjyqJ\nh7eLjcTPRgxxEBt1JAkbGvMrNC2E0gxohokT2qM3ndAAwurp/9utFJJquWwnDaMN\n+f1EtAczmd7AwCJK56DnXzQoRFyjIgh6jZntflyjT7OrnrUqcOcXSrsL9h6NFpEA\njKXWoEpDZ4RkOU/CxUT/AeOPrTSJ6Ilh7H0DkFVbAB5AlK4JpQnqhEcC0tAlxbtU\nNHBwcasqqASORri/7QR041fvpNSpj8kva6E93BsBbeA0SsPqTNT6IRquDsjvMCA=\n=RHV5\n-----END PGP SIGNATURE-----\n", "payload": "tree d7a37fe8fdda5844b122ae307f254420b36fca9b\nparent bebbfa1a29062a3e9304c80080316d8c4937e5bc\nauthor vsrs <vit@conrlab.com> 1593781273 +0300\ncommitter GitHub <noreply@github.com> 1593781273 +0300\n\nAdd docs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd94a10be1e2656837b3b7c7d26f291c2c8cced6", "html_url": "https://github.com/rust-lang/rust/commit/fd94a10be1e2656837b3b7c7d26f291c2c8cced6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd94a10be1e2656837b3b7c7d26f291c2c8cced6/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bebbfa1a29062a3e9304c80080316d8c4937e5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bebbfa1a29062a3e9304c80080316d8c4937e5bc", "html_url": "https://github.com/rust-lang/rust/commit/bebbfa1a29062a3e9304c80080316d8c4937e5bc"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "ede21ed9b237b270686da9f1017dadc548f282d0", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fd94a10be1e2656837b3b7c7d26f291c2c8cced6/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/fd94a10be1e2656837b3b7c7d26f291c2c8cced6/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=fd94a10be1e2656837b3b7c7d26f291c2c8cced6", "patch": "@@ -109,18 +109,6 @@ Here are some useful self-diagnostic commands:\n * To log all LSP requests, add `\"rust-analyzer.trace.server\": \"verbose\"` to the settings and look for `Server Trace` in the panel.\n * To enable client-side logging, add `\"rust-analyzer.trace.extension\": true` to the settings and open the `Console` tab of VS Code developer tools.\n \n-==== Special `when` clause context for keybindings.\n-You may use `inRustProject` context to configure keybindings for rust projects only. For example:\n-[source,json]\n-----\n-{\n-  \"key\": \"ctrl+i\",\n-  \"command\": \"rust-analyzer.toggleInlayHints\",\n-  \"when\": \"inRustProject\"\n-}\n-----\n-More about `when` clause contexts https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts[here].\n-\n === rust-analyzer Language Server Binary\n \n Other editors generally require the `rust-analyzer` binary to be in `$PATH`.\n@@ -337,3 +325,49 @@ They are usually triggered by a shortcut or by clicking a light bulb icon in the\n Cursor position or selection is signified by `\u2503` character.\n \n include::./generated_assists.adoc[]\n+\n+== Editor Features\n+=== VS Code\n+==== Special `when` clause context for keybindings.\n+You may use `inRustProject` context to configure keybindings for rust projects only. For example:\n+[source,json]\n+----\n+{\n+  \"key\": \"ctrl+i\",\n+  \"command\": \"rust-analyzer.toggleInlayHints\",\n+  \"when\": \"inRustProject\"\n+}\n+----\n+More about `when` clause contexts https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts[here].\n+\n+=== Setting runnable environment variables\n+You can use \"rust-analyzer.runnableEnv\" setting to define runnable environment-specific substitution variables.\n+The simplest way for all runnables in a bunch:\n+[source,jsonc]\n+---\n+\"rust-analyzer.runnableEnv\": {\n+    \"RUN_SLOW_TESTS\": \"1\"\n+}\n+---\n+\n+Or it is possible to specify vars more granularly:\n+[source,jsonc]\n+---\n+\"rust-analyzer.runnableEnv\": [\n+    {\n+        // \"mask\": null, // null mask means that this rule will be applied for all runnables\n+        env: {\n+             \"APP_ID\": \"1\",\n+             \"APP_DATA\": \"asdf\"\n+        }\n+    },\n+    {\n+        \"mask\": \"test_name\",\n+        \"env\": {\n+             \"APP_ID\": \"2\", // overwrites only APP_ID\n+        }\n+    }\n+]\n+---\n+\n+You can use any valid RegExp as a mask. Also note that a full runnable name is something like *run bin_or_example_name*, *test some::mod::test_name* or *test-mod some::mod*, so it is possible to distinguish binaries, single tests, and test modules with this masks: `\"^run\"`, `\"^test \"` (the trailing space matters!), and `\"^test-mod\"` respectively."}]}