{"sha": "e7119a0300b87a3d670408ee8e847c6821b3ae80", "node_id": "C_kwDOAAsO6NoAKGU3MTE5YTAzMDBiODdhM2Q2NzA0MDhlZThlODQ3YzY4MjFiM2FlODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T17:59:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T17:59:27Z"}, "message": "Auto merge of #98840 - cjgillot:span-inline-ctxt, r=wesleywiser\n\nInline SyntaxContext in both encoded span representation.\n\nThe current interned representation for spans does not use the `ctxt_or_zero: u16` field.  This PR proposes to use this field to store the `SyntaxContext` of the interned span instead.  When `ctxt_or_zero` and the interned span's `ctxt` don't match, the inlined one takes precedence.\n\nThis allows to implement `Span::ctxt` and `Span::with_ctxt` with much less probability to access the interner.  Those functions are used a lot for hygiene, so this may be worth it.", "tree": {"sha": "bae47aa3e1eec74fef25a79925fb11fc9a812ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bae47aa3e1eec74fef25a79925fb11fc9a812ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7119a0300b87a3d670408ee8e847c6821b3ae80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7119a0300b87a3d670408ee8e847c6821b3ae80", "html_url": "https://github.com/rust-lang/rust/commit/e7119a0300b87a3d670408ee8e847c6821b3ae80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7119a0300b87a3d670408ee8e847c6821b3ae80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e4e1f1b32e2a88cf696337f77e10273142c1a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e4e1f1b32e2a88cf696337f77e10273142c1a0", "html_url": "https://github.com/rust-lang/rust/commit/89e4e1f1b32e2a88cf696337f77e10273142c1a0"}, {"sha": "3e67bded92b389dfdb56f7a9a40e85b8be4d4d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e67bded92b389dfdb56f7a9a40e85b8be4d4d4c", "html_url": "https://github.com/rust-lang/rust/commit/3e67bded92b389dfdb56f7a9a40e85b8be4d4d4c"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "366fd9d2cd1c3887473ee1c2fe554abb6c215907", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7119a0300b87a3d670408ee8e847c6821b3ae80/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7119a0300b87a3d670408ee8e847c6821b3ae80/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=e7119a0300b87a3d670408ee8e847c6821b3ae80", "patch": "@@ -533,9 +533,6 @@ impl Span {\n         self.data().with_hi(hi)\n     }\n     #[inline]\n-    pub fn ctxt(self) -> SyntaxContext {\n-        self.data_untracked().ctxt\n-    }\n     pub fn eq_ctxt(self, other: Span) -> bool {\n         self.data_untracked().ctxt == other.data_untracked().ctxt\n     }"}, {"sha": "b3de6741594097b8595bfa39277dbc5382e38405", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e7119a0300b87a3d670408ee8e847c6821b3ae80/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7119a0300b87a3d670408ee8e847c6821b3ae80/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=e7119a0300b87a3d670408ee8e847c6821b3ae80", "patch": "@@ -28,12 +28,17 @@ use rustc_data_structures::fx::FxIndexSet;\n /// Inline (compressed) format:\n /// - `span.base_or_index == span_data.lo`\n /// - `span.len_or_tag == len == span_data.hi - span_data.lo` (must be `<= MAX_LEN`)\n-/// - `span.ctxt == span_data.ctxt` (must be `<= MAX_CTXT`)\n+/// - `span.ctxt_or_tag == span_data.ctxt` (must be `<= MAX_CTXT`)\n+///\n+/// Interned format with inline `SyntaxContext`:\n+/// - `span.base_or_index == index` (indexes into the interner table)\n+/// - `span.len_or_tag == LEN_TAG` (high bit set, all other bits are zero)\n+/// - `span.ctxt_or_tag == span_data.ctxt` (must be `<= MAX_CTXT`)\n ///\n /// Interned format:\n /// - `span.base_or_index == index` (indexes into the interner table)\n /// - `span.len_or_tag == LEN_TAG` (high bit set, all other bits are zero)\n-/// - `span.ctxt == 0`\n+/// - `span.ctxt_or_tag == CTXT_TAG`\n ///\n /// The inline form uses 0 for the tag value (rather than 1) so that we don't\n /// need to mask out the tag bit when getting the length, and so that the\n@@ -50,10 +55,10 @@ use rustc_data_structures::fx::FxIndexSet;\n ///   at 3 or 4, and then it drops off quickly from 8 onwards. 15 bits is enough\n ///   for 99.99%+ of cases, but larger values (sometimes 20+ bits) might occur\n ///   dozens of times in a typical crate.\n-/// - `ctxt` is 16 bits in `Span` and 32 bits in `SpanData`, which means that\n+/// - `ctxt_or_tag` is 16 bits in `Span` and 32 bits in `SpanData`, which means that\n ///   large `ctxt` values will cause interning. The number of bits needed for\n ///   `ctxt` values depend partly on the crate size and partly on the form of\n-///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,\n+///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt_or_tag`,\n ///   but larger crates might need more than 16 bits.\n ///\n /// In order to reliably use parented spans in incremental compilation,\n@@ -65,15 +70,16 @@ use rustc_data_structures::fx::FxIndexSet;\n pub struct Span {\n     base_or_index: u32,\n     len_or_tag: u16,\n-    ctxt_or_zero: u16,\n+    ctxt_or_tag: u16,\n }\n \n const LEN_TAG: u16 = 0b1000_0000_0000_0000;\n const MAX_LEN: u32 = 0b0111_1111_1111_1111;\n-const MAX_CTXT: u32 = 0b1111_1111_1111_1111;\n+const CTXT_TAG: u32 = 0b1111_1111_1111_1111;\n+const MAX_CTXT: u32 = CTXT_TAG - 1;\n \n /// Dummy span, both position and length are zero, syntax context is zero as well.\n-pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };\n+pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_tag: 0 };\n \n impl Span {\n     #[inline]\n@@ -91,12 +97,13 @@ impl Span {\n \n         if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {\n             // Inline format.\n-            Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }\n+            Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_tag: ctxt2 as u16 }\n         } else {\n             // Interned format.\n             let index =\n                 with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));\n-            Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }\n+            let ctxt_or_tag = if ctxt2 <= MAX_CTXT { ctxt2 } else { CTXT_TAG } as u16;\n+            Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_tag }\n         }\n     }\n \n@@ -119,16 +126,29 @@ impl Span {\n             SpanData {\n                 lo: BytePos(self.base_or_index),\n                 hi: BytePos(self.base_or_index + self.len_or_tag as u32),\n-                ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),\n+                ctxt: SyntaxContext::from_u32(self.ctxt_or_tag as u32),\n                 parent: None,\n             }\n         } else {\n             // Interned format.\n-            debug_assert!(self.ctxt_or_zero == 0);\n             let index = self.base_or_index;\n             with_span_interner(|interner| interner.spans[index as usize])\n         }\n     }\n+\n+    /// This function is used as a fast path when decoding the full `SpanData` is not necessary.\n+    #[inline]\n+    pub fn ctxt(self) -> SyntaxContext {\n+        let ctxt_or_tag = self.ctxt_or_tag as u32;\n+        if ctxt_or_tag <= MAX_CTXT {\n+            // Inline format or interned format with inline ctxt.\n+            SyntaxContext::from_u32(ctxt_or_tag)\n+        } else {\n+            // Interned format.\n+            let index = self.base_or_index;\n+            with_span_interner(|interner| interner.spans[index as usize].ctxt)\n+        }\n+    }\n }\n \n #[derive(Default)]"}]}