{"sha": "22d0546aed2f0c8545f939fe756ababae7a5020b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDA1NDZhZWQyZjBjODU0NWY5MzlmZTc1NmFiYWJhZTdhNTAyMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-02T10:53:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-02T10:53:37Z"}, "message": "Auto merge of #1028 - RalfJung:place-apis, r=RalfJung\n\nuse Place API instead of Allocation API", "tree": {"sha": "a644085e768ee00a83cf193eaa383ee9c79d86de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a644085e768ee00a83cf193eaa383ee9c79d86de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d0546aed2f0c8545f939fe756ababae7a5020b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d0546aed2f0c8545f939fe756ababae7a5020b", "html_url": "https://github.com/rust-lang/rust/commit/22d0546aed2f0c8545f939fe756ababae7a5020b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d0546aed2f0c8545f939fe756ababae7a5020b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e4fe71e6a9568f5d081d99f1c621c5a4ddd7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e4fe71e6a9568f5d081d99f1c621c5a4ddd7db", "html_url": "https://github.com/rust-lang/rust/commit/d4e4fe71e6a9568f5d081d99f1c621c5a4ddd7db"}, {"sha": "ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77", "html_url": "https://github.com/rust-lang/rust/commit/ddb1fc9205586ccd4f71bb7de583769f9fd3fa77"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "b87d735ce525d56ddcebfdf3a2c7177fb8a5bc09", "filename": "src/eval.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/22d0546aed2f0c8545f939fe756ababae7a5020b/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d0546aed2f0c8545f939fe756ababae7a5020b/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=22d0546aed2f0c8545f939fe756ababae7a5020b", "patch": "@@ -4,7 +4,7 @@ use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n use rustc::hir::def_id::DefId;\n-use rustc::ty::layout::{Align, LayoutOf, Size};\n+use rustc::ty::layout::{LayoutOf, Size};\n use rustc::ty::{self, TyCtxt};\n use syntax::source_map::DUMMY_SP;\n \n@@ -48,7 +48,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     EnvVars::init(&mut ecx, config.excluded_env_vars);\n \n     // Setup first stack-frame\n-    let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n+    let main_instance = ty::Instance::mono(tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def, None)?;\n \n     if !main_mir.return_ty().is_unit() || main_mir.arg_count != 0 {\n@@ -59,11 +59,10 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let main_ret_ty = tcx.fn_sig(main_id).output();\n     let main_ret_ty = main_ret_ty.no_bound_vars().unwrap();\n     let start_instance = ty::Instance::resolve(\n-        ecx.tcx.tcx,\n+        tcx,\n         ty::ParamEnv::reveal_all(),\n         start_id,\n-        ecx.tcx\n-            .mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n+        tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n     )\n     .unwrap();\n     let start_mir = ecx.load_mir(start_instance.def, None)?;\n@@ -106,7 +105,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     {\n         let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argc, argc_place.into())?;\n-        ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n+        ecx.machine.argc = Some(argc_place.ptr);\n     }\n \n     // Third argument (`argv`): created from `config.args`.\n@@ -134,8 +133,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     }\n     // Make an array with all these pointers, in the Miri memory.\n     let argvs_layout = ecx.layout_of(\n-        ecx.tcx\n-            .mk_array(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8), argvs.len() as u64),\n+        tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), argvs.len() as u64),\n     )?;\n     let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n     for (idx, arg) in argvs.into_iter().enumerate() {\n@@ -151,36 +149,26 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     {\n         let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argv, argv_place.into())?;\n-        ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n+        ecx.machine.argv = Some(argv_place.ptr);\n     }\n     // Store command line as UTF-16 for Windows `GetCommandLineW`.\n     {\n         let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n-        let cmd_ptr = ecx.memory.allocate(\n-            Size::from_bytes(cmd_utf16.len() as u64 * 2),\n-            Align::from_bytes(2).unwrap(),\n-            MiriMemoryKind::Env.into(),\n-        );\n-        ecx.machine.cmd_line = Some(cmd_ptr);\n+        let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n+        let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Env.into());\n+        ecx.machine.cmd_line = Some(cmd_place.ptr);\n         // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n         let char_size = Size::from_bytes(2);\n-        let cmd_alloc = ecx.memory.get_mut(cmd_ptr.alloc_id)?;\n-        let mut cur_ptr = cmd_ptr;\n-        for &c in cmd_utf16.iter() {\n-            cmd_alloc.write_scalar(\n-                &*ecx.tcx,\n-                cur_ptr,\n-                Scalar::from_uint(c, char_size).into(),\n-                char_size,\n-            )?;\n-            cur_ptr = cur_ptr.offset(char_size, &*ecx.tcx)?;\n+        for (idx, &c) in cmd_utf16.iter().enumerate() {\n+            let place = ecx.mplace_field(cmd_place, idx as u64)?;\n+            ecx.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n         }\n     }\n \n     args.next().expect_none(\"start lang item has more arguments than expected\");\n \n     // Set the last_error to 0\n-    let errno_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n+    let errno_layout = ecx.layout_of(tcx.types.u32)?;\n     let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Static.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);"}, {"sha": "c76cc2e568f4f35465a014534b444c41344c8cad", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22d0546aed2f0c8545f939fe756ababae7a5020b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d0546aed2f0c8545f939fe756ababae7a5020b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=22d0546aed2f0c8545f939fe756ababae7a5020b", "patch": "@@ -86,9 +86,9 @@ pub struct Evaluator<'tcx> {\n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n     /// We also need the full command line as one string because of Windows.\n-    pub(crate) argc: Option<Pointer<Tag>>,\n-    pub(crate) argv: Option<Pointer<Tag>>,\n-    pub(crate) cmd_line: Option<Pointer<Tag>>,\n+    pub(crate) argc: Option<Scalar<Tag>>,\n+    pub(crate) argv: Option<Scalar<Tag>>,\n+    pub(crate) cmd_line: Option<Scalar<Tag>>,\n \n     /// Last OS error location in memory. It is a 32-bit integer.\n     pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,"}, {"sha": "74ce477b8e357e4ba75f6b5d55831ca55563df84", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22d0546aed2f0c8545f939fe756ababae7a5020b/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d0546aed2f0c8545f939fe756ababae7a5020b/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=22d0546aed2f0c8545f939fe756ababae7a5020b", "patch": "@@ -765,10 +765,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: register the destructor.\n             }\n             \"_NSGetArgc\" => {\n-                this.write_scalar(Scalar::Ptr(this.machine.argc.unwrap()), dest)?;\n+                this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;\n             }\n             \"_NSGetArgv\" => {\n-                this.write_scalar(Scalar::Ptr(this.machine.argv.unwrap()), dest)?;\n+                this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n             }\n             \"SecRandomCopyBytes\" => {\n                 let len = this.read_scalar(args[1])?.to_usize(this)?;\n@@ -927,7 +927,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"GetCommandLineW\" => {\n-                this.write_scalar(Scalar::Ptr(this.machine.cmd_line.unwrap()), dest)?;\n+                this.write_scalar(this.machine.cmd_line.expect(\"machine must be initialized\"), dest)?;\n             }\n             // The actual name of 'RtlGenRandom'\n             \"SystemFunction036\" => {"}]}