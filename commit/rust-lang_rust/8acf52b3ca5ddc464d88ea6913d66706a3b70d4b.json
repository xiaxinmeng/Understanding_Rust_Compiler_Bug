{"sha": "8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhY2Y1MmIzY2E1ZGRjNDY0ZDg4ZWE2OTEzZDY2NzA2YTNiNzBkNGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-16T13:01:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-16T13:01:00Z"}, "message": "fix compile-fail tests to avoid libstd debug assertions", "tree": {"sha": "6fd26ebf0feb6ef9fdb7ca8c327d3c6fbdda9e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd26ebf0feb6ef9fdb7ca8c327d3c6fbdda9e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "html_url": "https://github.com/rust-lang/rust/commit/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ff5b3fcf94e5d0e58a9b2f7432b1f564bae9f46", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff5b3fcf94e5d0e58a9b2f7432b1f564bae9f46", "html_url": "https://github.com/rust-lang/rust/commit/6ff5b3fcf94e5d0e58a9b2f7432b1f564bae9f46"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "ce2fbe170e45da50966ec4dc3729cdb36f17ef6d", "filename": "tests/compile-fail/copy_null.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/tests%2Fcompile-fail%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/tests%2Fcompile-fail%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_null.rs?ref=8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "patch": "@@ -1,8 +1,14 @@\n //error-pattern: invalid use of NULL pointer\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n-    unsafe { ptr.copy_from(std::ptr::null(), 0); }\n+    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); }\n }"}, {"sha": "76e1e20d2177fba97529d4f467fe8dd8cab3146f", "filename": "tests/compile-fail/copy_overlapping.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/tests%2Fcompile-fail%2Fcopy_overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/tests%2Fcompile-fail%2Fcopy_overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_overlapping.rs?ref=8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "patch": "@@ -1,12 +1,16 @@\n-#![feature(core_intrinsics)]\n-\n //error-pattern: copy_nonoverlapping called on overlapping ranges\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n fn main() {\n     let mut data = [0u8; 16];\n     unsafe {\n         let a = data.as_mut_ptr();\n         let b = a.wrapping_offset(1) as *mut _;\n-        std::ptr::copy_nonoverlapping(a, b, 2);\n+        copy_nonoverlapping(a, b, 2);\n     }\n }"}, {"sha": "1a2692978f7974d7a16ad6448a373cbf9941ca7f", "filename": "tests/compile-fail/copy_unaligned.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acf52b3ca5ddc464d88ea6913d66706a3b70d4b/tests%2Fcompile-fail%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_unaligned.rs?ref=8acf52b3ca5ddc464d88ea6913d66706a3b70d4b", "patch": "@@ -1,8 +1,14 @@\n //error-pattern: tried to access memory with alignment 1, but alignment 2 is required\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n \n fn main() {\n     let mut data = [0u16; 8];\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n-    unsafe { ptr.copy_from(&data[5], 0); }\n+    unsafe { copy_nonoverlapping(&data[5], ptr, 0); }\n }"}]}