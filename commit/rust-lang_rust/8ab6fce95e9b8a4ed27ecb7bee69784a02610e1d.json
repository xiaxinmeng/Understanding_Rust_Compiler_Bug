{"sha": "8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjZmY2U5NWU5YjhhNGVkMjdlY2I3YmVlNjk3ODRhMDI2MTBlMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-01T11:27:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-01T11:27:23Z"}, "message": "auto merge of #17653 : kaini/rust/master, r=alexcrichton\n\nFixes that unit-like structs cannot be used if they are re-exported and used in another crate. (ICE)\r\nThe relevant changes are in `rustc::metadata::{decoder, encoder}` and `rustc::middle::ty`.\r\n\r\nA test case is included.\r\n\r\nThe problem is that the expressoin `UnitStruct` is an `ExprPath` to an `DefFn`, which is of expr kind `RvalueDatumExpr`, but for unit-struct ctors the expr kind should be `RvalueDpsExpr`. I fixed this (in a I guess clean way) by introducing `CtorFn` in the metadata and including a `is_ctor` flag in `DefFn`.", "tree": {"sha": "1fba572bb05c2be5fd0dbe66dd74967b1e2958a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fba572bb05c2be5fd0dbe66dd74967b1e2958a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "html_url": "https://github.com/rust-lang/rust/commit/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2616e847ddf913e007d715732b5669b0f22672", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2616e847ddf913e007d715732b5669b0f22672", "html_url": "https://github.com/rust-lang/rust/commit/ff2616e847ddf913e007d715732b5669b0f22672"}, {"sha": "065a5b0424221b246d59fd068d4e6eb5d1ae5be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/065a5b0424221b246d59fd068d4e6eb5d1ae5be1", "html_url": "https://github.com/rust-lang/rust/commit/065a5b0424221b246d59fd068d4e6eb5d1ae5be1"}], "stats": {"total": 113, "additions": 81, "deletions": 32}, "files": [{"sha": "6d4407f96a7a444bc4c7fd6867e864b3bf59c9c1", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -112,6 +112,7 @@ enum Family {\n     MutStatic,             // b\n     Fn,                    // f\n     UnsafeFn,              // u\n+    CtorFn,                // o\n     StaticMethod,          // F\n     UnsafeStaticMethod,    // U\n     Type,                  // y\n@@ -135,6 +136,7 @@ fn item_family(item: rbml::Doc) -> Family {\n       'b' => MutStatic,\n       'f' => Fn,\n       'u' => UnsafeFn,\n+      'o' => CtorFn,\n       'F' => StaticMethod,\n       'U' => UnsafeStaticMethod,\n       'y' => Type,\n@@ -304,8 +306,9 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         ImmStatic => DlDef(def::DefStatic(did, false)),\n         MutStatic => DlDef(def::DefStatic(did, true)),\n         Struct    => DlDef(def::DefStruct(did)),\n-        UnsafeFn  => DlDef(def::DefFn(did, ast::UnsafeFn)),\n-        Fn        => DlDef(def::DefFn(did, ast::NormalFn)),\n+        UnsafeFn  => DlDef(def::DefFn(did, ast::UnsafeFn, false)),\n+        Fn        => DlDef(def::DefFn(did, ast::NormalFn, false)),\n+        CtorFn    => DlDef(def::DefFn(did, ast::NormalFn, true)),\n         StaticMethod | UnsafeStaticMethod => {\n             let fn_style = if fam == UnsafeStaticMethod {\n                 ast::UnsafeFn"}, {"sha": "6bcad25f4b1a12102a0b02dbf73483a5a7b1556b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -761,7 +761,7 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n \n     rbml_w.start_tag(tag_items_data_item);\n     encode_def_id(rbml_w, local_def(ctor_id));\n-    encode_family(rbml_w, 'f');\n+    encode_family(rbml_w, 'o');\n     encode_bounds_and_type(rbml_w, ecx,\n                            &lookup_item_type(ecx.tcx, local_def(ctor_id)));\n     encode_name(rbml_w, name.name);"}, {"sha": "2bd145706aaad09c917eb0e3a46e092016196bbb", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -440,7 +440,7 @@ fn decode_def(dcx: &DecodeContext, doc: rbml::Doc) -> def::Def {\n impl tr for def::Def {\n     fn tr(&self, dcx: &DecodeContext) -> def::Def {\n         match *self {\n-          def::DefFn(did, p) => def::DefFn(did.tr(dcx), p),\n+          def::DefFn(did, p, is_ctor) => def::DefFn(did.tr(dcx), p, is_ctor),\n           def::DefStaticMethod(did, wrapped_did2, p) => {\n             def::DefStaticMethod(did.tr(dcx),\n                                    match wrapped_did2 {"}, {"sha": "cc3679ec31deb3059924acfb8b7faca264759739", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -133,7 +133,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr) {\n             }\n             match v.tcx.def_map.borrow().find(&e.id) {\n               Some(&DefStatic(..)) |\n-              Some(&DefFn(_, _)) |\n+              Some(&DefFn(..)) |\n               Some(&DefVariant(_, _, _)) |\n               Some(&DefStruct(_)) => { }\n "}, {"sha": "bd42586435f26aca56db1cb94a7a58ab81346cb8", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -14,7 +14,7 @@ use syntax::ast_util::local_def;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Def {\n-    DefFn(ast::DefId, ast::FnStyle),\n+    DefFn(ast::DefId, ast::FnStyle, bool /* is_ctor */),\n     DefStaticMethod(/* method */ ast::DefId, MethodProvenance, ast::FnStyle),\n     DefSelfTy(/* trait id */ ast::NodeId),\n     DefMod(ast::DefId),\n@@ -57,7 +57,7 @@ pub enum MethodProvenance {\n impl Def {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {\n-            DefFn(id, _) | DefStaticMethod(id, _, _) | DefMod(id) |\n+            DefFn(id, _, _) | DefStaticMethod(id, _, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n             DefTyParam(_, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |"}, {"sha": "dccb93f58cc8de148043f936af6a933804c20310", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n         match expr.node {\n             ast::ExprPath(..) => {\n                 match ty::resolve_expr(self.tcx, expr) {\n-                    DefFn(did, _) if self.def_id_is_transmute(did) => {\n+                    DefFn(did, _, _) if self.def_id_is_transmute(did) => {\n                         let typ = ty::node_id_to_type(self.tcx, expr.id);\n                         match ty::get(typ).sty {\n                             ty_bare_fn(ref bare_fn_ty)"}, {"sha": "6c69d64a1eed312d1e25f796c58bc4982204394a", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -934,7 +934,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                     }\n                     // Tuple struct constructors across crates are identified as\n                     // DefFn types, so we explicitly handle that case here.\n-                    Some(&def::DefFn(did, _)) if !is_local(did) => {\n+                    Some(&def::DefFn(did, _, _)) if !is_local(did) => {\n                         match csearch::get_tuple_struct_definition_if_ctor(\n                                     &self.tcx.sess.cstore, did) {\n                             Some(did) => guard(did),"}, {"sha": "e1bed359ffedf121e8cb7b40f46f7c56f5f31fc7", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -1247,7 +1247,7 @@ impl<'a> Resolver<'a> {\n                 let name_bindings =\n                     self.add_child(ident, parent.clone(), ForbidDuplicateValues, sp);\n \n-                let def = DefFn(local_def(item.id), fn_style);\n+                let def = DefFn(local_def(item.id), fn_style, false);\n                 name_bindings.define_value(def, sp, is_public);\n                 parent\n             }\n@@ -1705,7 +1705,7 @@ impl<'a> Resolver<'a> {\n \n         match foreign_item.node {\n             ForeignItemFn(_, ref generics) => {\n-                let def = DefFn(local_def(foreign_item.id), UnsafeFn);\n+                let def = DefFn(local_def(foreign_item.id), UnsafeFn, false);\n                 name_bindings.define_value(def, foreign_item.span, is_public);\n \n                 self.with_type_parameter_rib(\n@@ -2022,7 +2022,8 @@ impl<'a> Resolver<'a> {\n                                                        DUMMY_SP);\n                                     let def = DefFn(\n                                         static_method_info.def_id,\n-                                        static_method_info.fn_style);\n+                                        static_method_info.fn_style,\n+                                        false);\n \n                                     method_name_bindings.define_value(\n                                         def, DUMMY_SP,\n@@ -2591,7 +2592,8 @@ impl<'a> Resolver<'a> {\n \n         match value_result {\n             BoundResult(ref target_module, ref name_bindings) => {\n-                debug!(\"(resolving single import) found value target\");\n+                debug!(\"(resolving single import) found value target: {:?}\",\n+                       { name_bindings.value_def.borrow().clone().unwrap().def });\n                 self.check_for_conflicting_import(\n                     &import_resolution.value_target,\n                     directive.span,"}, {"sha": "c956c2d2b006b9bd6a26a0ec72e8a9dcd454ebec", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -234,7 +234,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefVariant(_, _, _) |\n             def::DefUpvar(..) => Some(recorder::VarRef),\n \n-            def::DefFn(_, _) => Some(recorder::FnRef),\n+            def::DefFn(..) => Some(recorder::FnRef),\n \n             def::DefSelfTy(_) |\n             def::DefRegion(_) |\n@@ -792,10 +792,10 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                        Some(declid),\n                                        self.cur_scope);\n             },\n-            def::DefFn(def_id, _) => self.fmt.fn_call_str(ex.span,\n-                                                          sub_span,\n-                                                          def_id,\n-                                                          self.cur_scope),\n+            def::DefFn(def_id, _, _) => self.fmt.fn_call_str(ex.span,\n+                                                             sub_span,\n+                                                             def_id,\n+                                                             self.cur_scope),\n             _ => self.sess.span_bug(ex.span,\n                                     format!(\"Unexpected def kind while looking up path in '{}'\",\n                                             self.span.snippet(ex.span)).as_slice()),\n@@ -808,7 +808,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefLocal(_) |\n             def::DefStatic(_,_) |\n             def::DefStruct(_) |\n-            def::DefFn(_, _) => self.write_sub_paths_truncated(path),\n+            def::DefFn(..) => self.write_sub_paths_truncated(path),\n             _ => {},\n         }\n "}, {"sha": "7942a0211e4e694ffcd128dcac694c15d79fb5b6", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -142,7 +142,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n         debug!(\"trans_def(def={}, ref_expr={})\", def.repr(bcx.tcx()), ref_expr.repr(bcx.tcx()));\n         let expr_ty = node_id_type(bcx, ref_expr.id);\n         match def {\n-            def::DefFn(did, _) if {\n+            def::DefFn(did, _, _) if {\n                 let maybe_def_id = inline::get_local_instance(bcx.ccx(), did);\n                 let maybe_ast_node = maybe_def_id.and_then(|def_id| bcx.tcx().map\n                                                                              .find(def_id.node));\n@@ -157,15 +157,15 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                     data: NamedTupleConstructor(substs, 0)\n                 }\n             }\n-            def::DefFn(did, _) if match ty::get(expr_ty).sty {\n+            def::DefFn(did, _, _) if match ty::get(expr_ty).sty {\n                 ty::ty_bare_fn(ref f) => f.abi == synabi::RustIntrinsic,\n                 _ => false\n             } => {\n                 let substs = node_id_substs(bcx, ExprId(ref_expr.id));\n                 let def_id = inline::maybe_instantiate_inline(bcx.ccx(), did);\n                 Callee { bcx: bcx, data: Intrinsic(def_id.node, substs) }\n             }\n-            def::DefFn(did, _) |\n+            def::DefFn(did, _, _) |\n             def::DefStaticMethod(did, def::FromImpl(_), _) => {\n                 fn_callee(bcx, trans_fn_ref(bcx, did, ExprId(ref_expr.id)))\n             }"}, {"sha": "f08736335c37d4a784de6ab99557e40cf3869755", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -532,7 +532,7 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n                                is_local: bool) -> ValueRef {\n \n     let def_id = match def {\n-        def::DefFn(did, _) | def::DefStaticMethod(did, _, _) |\n+        def::DefFn(did, _, _) | def::DefStaticMethod(did, _, _) |\n         def::DefVariant(_, did, _) | def::DefStruct(did) => did,\n         _ => {\n             ccx.sess().bug(format!(\"get_wrapper_for_bare_fn: \\"}, {"sha": "c499fcf4bf8dfd2a89009aa52aec18b21e69942d", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -623,7 +623,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n \n             let opt_def = cx.tcx().def_map.borrow().find_copy(&e.id);\n             match opt_def {\n-                Some(def::DefFn(def_id, _fn_style)) => {\n+                Some(def::DefFn(def_id, _fn_style, _)) => {\n                     if !ast_util::is_local(def_id) {\n                         let ty = csearch::get_type(cx.tcx(), def_id).ty;\n                         (base::trans_external_path(cx, def_id, ty), true)"}, {"sha": "37a39ef8e3bef37b245ff3c3c46d34cbabce11d0", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -1194,7 +1194,7 @@ fn trans_def_fn_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_def_datum_unadjusted\");\n \n     let llfn = match def {\n-        def::DefFn(did, _) |\n+        def::DefFn(did, _, _) |\n         def::DefStruct(did) | def::DefVariant(_, did, _) |\n         def::DefStaticMethod(did, def::FromImpl(_), _) => {\n             callee::trans_fn_ref(bcx, did, ExprId(ref_expr.id))"}, {"sha": "b38f362dcf18d815f764c7265415fb31893d2c84", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -3592,6 +3592,12 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n                     }\n                 }\n \n+                // Special case: A unit like struct's constructor must be called without () at the\n+                // end (like `UnitStruct`) which means this is an ExprPath to a DefFn. But in case\n+                // of unit structs this is should not be interpretet as function pointer but as\n+                // call to the constructor.\n+                def::DefFn(_, _, true) => RvalueDpsExpr,\n+\n                 // Fn pointers are just scalar values.\n                 def::DefFn(..) | def::DefStaticMethod(..) => RvalueDatumExpr,\n "}, {"sha": "b0c0a8a571bd0d1f3bb036a8f70acdf8711bb08e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -5086,7 +5086,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }\n-      def::DefFn(id, _) | def::DefStaticMethod(id, _, _) |\n+      def::DefFn(id, _, _) | def::DefStaticMethod(id, _, _) |\n       def::DefStatic(id, _) | def::DefVariant(_, id, _) |\n       def::DefStruct(id) => {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);"}, {"sha": "b86f4d8cfb54195d0771814bb438afd8497dc596", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -73,12 +73,8 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n             record_extern_fqn(cx, did, clean::TypeTrait);\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n-        def::DefFn(did, style) => {\n+        def::DefFn(did, style, false) => {\n             // If this function is a tuple struct constructor, we just skip it\n-            if csearch::get_tuple_struct_definition_if_ctor(&tcx.sess.cstore,\n-                                                            did).is_some() {\n-                return None\n-            }\n             record_extern_fqn(cx, did, clean::TypeFunction);\n             clean::FunctionItem(build_external_function(cx, tcx, did, style))\n         }"}, {"sha": "054fbda73379c2b7c9bc421eeb8c62aafa4cf716", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -2078,7 +2078,7 @@ fn resolve_type(cx: &DocContext, path: Path,\n \n fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n     let (did, kind) = match def {\n-        def::DefFn(i, _) => (i, TypeFunction),\n+        def::DefFn(i, _, _) => (i, TypeFunction),\n         def::DefTy(i, false) => (i, TypeTypedef),\n         def::DefTy(i, true) => (i, TypeEnum),\n         def::DefTrait(i) => (i, TypeTrait),"}, {"sha": "9f2bd5d0e93927317ad3c25c21c1572a0b1ad548", "filename": "src/test/auxiliary/issue-12660-aux.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Ftest%2Fauxiliary%2Fissue-12660-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Ftest%2Fauxiliary%2Fissue-12660-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-12660-aux.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+#![crate_name=\"issue12660aux\"]\n+\n+pub use my_mod::{MyStruct, my_fn};\n+\n+mod my_mod {\n+    pub struct MyStruct;\n+\n+    pub fn my_fn(my_struct: MyStruct) {\n+    }\n+}"}, {"sha": "6b3fa587bc55b5560d54984f4996289cc2b60780", "filename": "src/test/run-pass/issue-12660.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Ftest%2Frun-pass%2Fissue-12660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d/src%2Ftest%2Frun-pass%2Fissue-12660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12660.rs?ref=8ab6fce95e9b8a4ed27ecb7bee69784a02610e1d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-12660-aux.rs\n+\n+extern crate issue12660aux;\n+\n+use issue12660aux::{my_fn, MyStruct};\n+\n+#[allow(path_statement)]\n+fn main() {\n+    my_fn(MyStruct);\n+    MyStruct;\n+}"}]}