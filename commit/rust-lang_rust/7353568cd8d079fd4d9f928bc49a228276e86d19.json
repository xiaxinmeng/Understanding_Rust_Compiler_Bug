{"sha": "7353568cd8d079fd4d9f928bc49a228276e86d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTM1NjhjZDhkMDc5ZmQ0ZDlmOTI4YmM0OWEyMjgyNzZlODZkMTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-09T00:13:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:36:00Z"}, "message": "librustc: Remove old-style operator overloading", "tree": {"sha": "210aa5c275f2faf3e8995af7e1370487dd08f79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210aa5c275f2faf3e8995af7e1370487dd08f79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7353568cd8d079fd4d9f928bc49a228276e86d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7353568cd8d079fd4d9f928bc49a228276e86d19", "html_url": "https://github.com/rust-lang/rust/commit/7353568cd8d079fd4d9f928bc49a228276e86d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7353568cd8d079fd4d9f928bc49a228276e86d19/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "html_url": "https://github.com/rust-lang/rust/commit/1274d4a0063fbb0ae5feaa277caf08c3230b46a9"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "d6060c1ae316dec5329b5896c2dd0546d3498eb4", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=7353568cd8d079fd4d9f928bc49a228276e86d19", "patch": "@@ -105,17 +105,24 @@ use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n use syntax::ast_map;\n \n+#[deriving_eq]\n+pub enum CheckTraitsFlag {\n+    CheckTraitsOnly,\n+    CheckTraitsAndInherentMethods,\n+}\n+\n pub fn lookup(\n     fcx: @mut FnCtxt,\n \n     // In a call `a.b::<X, Y, ...>(...)`:\n-    expr: @ast::expr,        // The expression `a.b`.\n-    self_expr: @ast::expr,   // The expression `a`.\n-    callee_id: node_id, // Where to store the type of `a.b`\n-    m_name: ast::ident,      // The ident `b`.\n-    self_ty: ty::t,          // The type of `a`.\n-    supplied_tps: &[ty::t],  // The list of types X, Y, ... .\n-    deref_args: check::DerefArgs)   // Whether we autopointer first.\n+    expr: @ast::expr,                   // The expression `a.b`.\n+    self_expr: @ast::expr,              // The expression `a`.\n+    callee_id: node_id,                 // Where to store the type of `a.b`\n+    m_name: ast::ident,                 // The ident `b`.\n+    self_ty: ty::t,                     // The type of `a`.\n+    supplied_tps: &[ty::t],             // The list of types X, Y, ... .\n+    deref_args: check::DerefArgs,       // Whether we autopointer first.\n+    check_traits: CheckTraitsFlag)      // Whether we check traits only.\n     -> Option<method_map_entry>\n {\n     let lcx = LookupContext {\n@@ -129,6 +136,7 @@ pub fn lookup(\n         inherent_candidates: @mut ~[],\n         extension_candidates: @mut ~[],\n         deref_args: deref_args,\n+        check_traits: check_traits,\n     };\n     let mme = lcx.do_lookup(self_ty);\n     debug!(\"method lookup for %s yielded %?\",\n@@ -147,6 +155,7 @@ pub struct LookupContext {\n     inherent_candidates: @mut ~[Candidate],\n     extension_candidates: @mut ~[Candidate],\n     deref_args: check::DerefArgs,\n+    check_traits: CheckTraitsFlag,\n }\n \n /**\n@@ -299,7 +308,9 @@ pub impl LookupContext/&self {\n                         self_ty, self_did, &substs);\n                 }\n                 ty_enum(did, _) | ty_struct(did, _) => {\n-                    self.push_inherent_impl_candidates_for_type(did);\n+                    if self.check_traits == CheckTraitsAndInherentMethods {\n+                        self.push_inherent_impl_candidates_for_type(did);\n+                    }\n                 }\n                 _ => { /* No inherent methods in these types */ }\n             }"}, {"sha": "6617fa3b27c91653aee24434766e2beb24db795f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7353568cd8d079fd4d9f928bc49a228276e86d19/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7353568cd8d079fd4d9f928bc49a228276e86d19", "patch": "@@ -89,7 +89,8 @@ use middle::typeck::astconv::{AstConv, ast_path_to_ty};\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n use middle::typeck::astconv;\n use middle::typeck::check::_match::pat_ctxt;\n-use middle::typeck::check::method::TransformTypeNormally;\n+use middle::typeck::check::method::{CheckTraitsAndInherentMethods};\n+use middle::typeck::check::method::{CheckTraitsOnly, TransformTypeNormally};\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::CrateCtxt;\n@@ -1371,7 +1372,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              method_name,\n                              expr_t,\n                              tps,\n-                             DontDerefArgs) {\n+                             DontDerefArgs,\n+                             CheckTraitsAndInherentMethods) {\n             Some(ref entry) => {\n                 let method_map = fcx.ccx.method_map;\n                 method_map.insert(expr.id, (*entry));\n@@ -1453,9 +1455,15 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                         +args: ~[@ast::expr],\n                         +deref_args: DerefArgs)\n                      -> Option<(ty::t, bool)> {\n-        match method::lookup(fcx, op_ex, self_ex,\n-                             op_ex.callee_id, opname, self_t, ~[],\n-                             deref_args) {\n+        match method::lookup(fcx,\n+                             op_ex,\n+                             self_ex,\n+                             op_ex.callee_id,\n+                             opname,\n+                             self_t,\n+                             ~[],\n+                             deref_args,\n+                             CheckTraitsOnly) {\n           Some(ref origin) => {\n               let method_ty = fcx.node_ty(op_ex.callee_id);\n               let method_map = fcx.ccx.method_map;\n@@ -1732,7 +1740,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                              field,\n                              expr_t,\n                              tps,\n-                             DontDerefArgs) {\n+                             DontDerefArgs,\n+                             CheckTraitsAndInherentMethods) {\n             Some(ref entry) => {\n                 let method_map = fcx.ccx.method_map;\n                 method_map.insert(expr.id, (*entry));"}]}