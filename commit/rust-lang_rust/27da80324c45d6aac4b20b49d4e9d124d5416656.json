{"sha": "27da80324c45d6aac4b20b49d4e9d124d5416656", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZGE4MDMyNGM0NWQ2YWFjNGIyMGI0OWQ0ZTlkMTI0ZDU0MTY2NTY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-12T22:28:48Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-06-06T05:32:06Z"}, "message": "Implement catch", "tree": {"sha": "9cf54ba01fb9a74b93ea65336274a46f973af70d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf54ba01fb9a74b93ea65336274a46f973af70d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27da80324c45d6aac4b20b49d4e9d124d5416656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27da80324c45d6aac4b20b49d4e9d124d5416656", "html_url": "https://github.com/rust-lang/rust/commit/27da80324c45d6aac4b20b49d4e9d124d5416656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27da80324c45d6aac4b20b49d4e9d124d5416656/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647fd4ff772bea43589359cd5fcf5a18c93d04b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/647fd4ff772bea43589359cd5fcf5a18c93d04b7", "html_url": "https://github.com/rust-lang/rust/commit/647fd4ff772bea43589359cd5fcf5a18c93d04b7"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "aa5913e5f0fa9bb613558f67400b2de9f49eb99c", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/27da80324c45d6aac4b20b49d4e9d124d5416656/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27da80324c45d6aac4b20b49d4e9d124d5416656/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=27da80324c45d6aac4b20b49d4e9d124d5416656", "patch": "@@ -253,8 +253,16 @@ fn format_expr(expr: &ast::Expr,\n                      context.config.max_width(),\n                      shape)\n         }\n-        // FIXME(#1537)\n-        ast::ExprKind::Catch(..) => unimplemented!(),\n+        ast::ExprKind::Catch(ref block) => {\n+            if let rewrite @ Some(_) = try_one_line_block(context, shape, \"do catch \", block) {\n+                return rewrite;\n+            }\n+            // 9 = `do catch `\n+            let budget = shape.width.checked_sub(9).unwrap_or(0);\n+            Some(format!(\"{}{}\",\n+                         \"do catch \",\n+                         try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))))\n+        }\n     };\n     match (attr_rw, expr_rw) {\n         (Some(attr_str), Some(expr_str)) => {\n@@ -268,6 +276,22 @@ fn format_expr(expr: &ast::Expr,\n     }\n }\n \n+fn try_one_line_block(context: &RewriteContext,\n+                      shape: Shape,\n+                      prefix: &str,\n+                      block: &ast::Block)\n+                      -> Option<String> {\n+    if is_simple_block(block, context.codemap) {\n+        let expr_shape = Shape::legacy(shape.width - prefix.len(), shape.indent);\n+        let expr_str = try_opt!(block.stmts[0].rewrite(context, expr_shape));\n+        let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n+        if result.len() <= shape.width && !result.contains('\\n') {\n+            return Some(result);\n+        }\n+    }\n+    None\n+}\n+\n pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n                               rhs: &RHS,\n                               prefix: &str,\n@@ -622,9 +646,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n         // means we must re-format.\n         let block_shape = shape.block().with_max_width(context.config);\n         let block_str = try_opt!(block.rewrite(&context, block_shape));\n-        Some(format!(\"{} {}\",\n-                     prefix,\n-                     try_opt!(block_str.rewrite(context, block_shape))))\n+        Some(format!(\"{} {}\", prefix, block_str))\n     }\n }\n \n@@ -689,24 +711,13 @@ impl Rewrite for ast::Block {\n                 } else {\n                     \"unsafe \".to_owned()\n                 };\n-\n-                if is_simple_block(self, context.codemap) && prefix.len() < shape.width {\n-                    let expr_str =\n-                        self.stmts[0].rewrite(context,\n-                                              Shape::legacy(shape.width - prefix.len(),\n-                                                            shape.indent));\n-                    let expr_str = try_opt!(expr_str);\n-                    let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n-                    if result.len() <= shape.width && !result.contains('\\n') {\n-                        return Some(result);\n-                    }\n+                if let result @ Some(_) = try_one_line_block(context, shape, &prefix, self) {\n+                    return result;\n                 }\n-\n                 prefix\n             }\n             ast::BlockCheckMode::Default => {\n                 visitor.last_pos = self.span.lo;\n-\n                 String::new()\n             }\n         };"}, {"sha": "64cc9e7a207974fa34d5bc12b4dbbd2218d5a303", "filename": "tests/source/catch.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Fsource%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Fsource%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcatch.rs?ref=27da80324c45d6aac4b20b49d4e9d124d5416656", "patch": "@@ -0,0 +1,27 @@\n+#![feature(catch_expr)]\n+\n+fn main() {\n+    let x = do catch {\n+        foo()?\n+    };\n+\n+    let x = do catch /* Invisible comment */ { foo()? };\n+\n+    let x = do catch {\n+        unsafe { foo()? }\n+    };\n+\n+    let y = match (do catch {\n+        foo()?\n+    }) {\n+        _ => (),\n+    };\n+\n+    do catch {\n+        foo()?;\n+    };\n+\n+    do catch {\n+        // Regular do catch block\n+    };\n+}"}, {"sha": "640f9bade4965be40a3b318af8e97e32b9f72ed8", "filename": "tests/target/catch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Ftarget%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Ftarget%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcatch.rs?ref=27da80324c45d6aac4b20b49d4e9d124d5416656", "patch": "@@ -0,0 +1,21 @@\n+#![feature(catch_expr)]\n+\n+fn main() {\n+    let x = do catch { foo()? };\n+\n+    let x = do catch /* Invisible comment */ { foo()? };\n+\n+    let x = do catch { unsafe { foo()? } };\n+\n+    let y = match (do catch { foo()? }) {\n+        _ => (),\n+    };\n+\n+    do catch {\n+        foo()?;\n+    };\n+\n+    do catch {\n+        // Regular do catch block\n+    };\n+}"}, {"sha": "3d20102bef048ec3d5e2640d648c568dbfb9a1d3", "filename": "tests/target/closure.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=27da80324c45d6aac4b20b49d4e9d124d5416656", "patch": "@@ -109,8 +109,10 @@ fn foo() {\n \n fn issue1405() {\n     open_raw_fd(fd, b'r').and_then(|file| {\n-        Capture::new_raw(None, |_, err| unsafe { raw::pcap_fopen_offline(file, err) })\n-    });\n+                                       Capture::new_raw(None, |_, err| unsafe {\n+            raw::pcap_fopen_offline(file, err)\n+        })\n+                                   });\n }\n \n fn issue1466() {"}, {"sha": "6acab043e67565d00b6d9301e9652c4b47b2c669", "filename": "tests/target/match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27da80324c45d6aac4b20b49d4e9d124d5416656/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=27da80324c45d6aac4b20b49d4e9d124d5416656", "patch": "@@ -326,11 +326,10 @@ fn issue1371() {\n              sfEvtGainedFocus => GainedFocus,\n              sfEvtTextEntered => {\n                  TextEntered {\n-                     unicode:\n-                         unsafe {\n-                             ::std::char::from_u32((*event.text.as_ref()).unicode)\n-                                 .expect(\"Invalid unicode encountered on TextEntered event\")\n-                         },\n+                     unicode: unsafe {\n+                         ::std::char::from_u32((*event.text.as_ref()).unicode)\n+                             .expect(\"Invalid unicode encountered on TextEntered event\")\n+                     },\n                  }\n              }\n              sfEvtKeyPressed => {"}]}