{"sha": "5e449b9adff463455743291b0c1f76feec092992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNDQ5YjlhZGZmNDYzNDU1NzQzMjkxYjBjMWY3NmZlZWMwOTI5OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T08:58:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T08:58:32Z"}, "message": "Auto merge of #74949 - oli-obk:validate_const_eval_raw, r=RalfJung\n\nValidate constants during `const_eval_raw`\n\nThis PR implements the groundwork for https://github.com/rust-lang/rust/issues/72396\n\n* constants are now validated during `const_eval_raw`\n* to prevent cycle errors, we do not validate references to statics anymore beyond the fact that they are not dangling\n* the `const_eval` query ICEs if used on `static` items\n* as a side effect promoteds are now evaluated to `ConstValue::Scalar` again (since they are just a reference to the actual promoted allocation in most cases).", "tree": {"sha": "6323acda84dc9ddccd08796495695d1fa06acb06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6323acda84dc9ddccd08796495695d1fa06acb06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e449b9adff463455743291b0c1f76feec092992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e449b9adff463455743291b0c1f76feec092992", "html_url": "https://github.com/rust-lang/rust/commit/5e449b9adff463455743291b0c1f76feec092992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e449b9adff463455743291b0c1f76feec092992/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b3595ba6a4c658c9dea105488fc562c815e434", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b3595ba6a4c658c9dea105488fc562c815e434", "html_url": "https://github.com/rust-lang/rust/commit/10b3595ba6a4c658c9dea105488fc562c815e434"}, {"sha": "34785fcc4a56c4f705a1f5c9929689e5c46e1fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/34785fcc4a56c4f705a1f5c9929689e5c46e1fbc", "html_url": "https://github.com/rust-lang/rust/commit/34785fcc4a56c4f705a1f5c9929689e5c46e1fbc"}], "stats": {"total": 665, "additions": 296, "deletions": 369}, "files": [{"sha": "dc09790df02952dfe9342ad773dcdea24d7d54e0", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::interpret::{\n-    read_target_uint, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer,\n+    read_target_uint, Allocation, ErrorHandled, GlobalAlloc, Pointer,\n };\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n@@ -85,10 +85,7 @@ pub fn codegen_static_initializer(\n     cx: &CodegenCx<'ll, 'tcx>,\n     def_id: DefId,\n ) -> Result<(&'ll Value, &'tcx Allocation), ErrorHandled> {\n-    let alloc = match cx.tcx.const_eval_poly(def_id)? {\n-        ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => alloc,\n-        val => bug!(\"static const eval returned {:#?}\", val),\n-    };\n+    let alloc = cx.tcx.eval_static_initializer(def_id)?;\n     Ok((const_alloc_to_llvm(cx, alloc), alloc))\n }\n "}, {"sha": "23269f7245da659a7774e0851195730b7327c94b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -13,7 +13,7 @@ use rustc_ast as ast;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -867,24 +867,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let ty = constant.literal.ty;\n                         let size = bx.layout_of(ty).size;\n                         let scalar = match const_value {\n-                            // Promoted constants are evaluated into a ByRef instead of a Scalar,\n-                            // but we want the scalar value here.\n-                            ConstValue::ByRef { alloc, offset } => {\n-                                let ptr = Pointer::new(AllocId(0), offset);\n-                                alloc\n-                                    .read_scalar(&bx, ptr, size)\n-                                    .and_then(|s| s.check_init())\n-                                    .unwrap_or_else(|e| {\n-                                        bx.tcx().sess.span_err(\n-                                            span,\n-                                            &format!(\"Could not evaluate asm const: {}\", e),\n-                                        );\n-\n-                                        // We are erroring out, just emit a dummy constant.\n-                                        Scalar::from_u64(0)\n-                                    })\n-                            }\n-                            _ => span_bug!(span, \"expected ByRef for promoted asm const\"),\n+                            ConstValue::Scalar(s) => s,\n+                            _ => span_bug!(\n+                                span,\n+                                \"expected Scalar for promoted asm const, but got {:#?}\",\n+                                const_value\n+                            ),\n                         };\n                         let value = scalar.assert_bits(size);\n                         let string = match ty.kind() {"}, {"sha": "2cbdc954e2007cc7c6ea28e5621efa83e60ff210", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::ConstEvalResult;\n+use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n@@ -1542,7 +1542,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         let mut original_values = OriginalQueryValues::default();\n         let canonical = self.canonicalize_query(&(param_env, substs), &mut original_values);\n "}, {"sha": "9824ec06db4ede66458e4647ebf0a1ff3ee36cf5", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1474,21 +1474,19 @@ declare_lint_pass!(\n     UnusedBrokenConst => []\n );\n \n-fn check_const(cx: &LateContext<'_>, body_id: hir::BodyId) {\n-    let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n-    // trigger the query once for all constants since that will already report the errors\n-    // FIXME: Use ensure here\n-    let _ = cx.tcx.const_eval_poly(def_id);\n-}\n-\n impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         match it.kind {\n             hir::ItemKind::Const(_, body_id) => {\n-                check_const(cx, body_id);\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+                // trigger the query once for all constants since that will already report the errors\n+                // FIXME: Use ensure here\n+                let _ = cx.tcx.const_eval_poly(def_id);\n             }\n             hir::ItemKind::Static(_, _, body_id) => {\n-                check_const(cx, body_id);\n+                let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n+                // FIXME: Use ensure here\n+                let _ = cx.tcx.eval_static_initializer(def_id);\n             }\n             _ => {}\n         }"}, {"sha": "13333dc45de0c4bbac2b16ce930c590095ee5644", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, Pointer, RawConst, Scalar};\n+use super::{AllocId, ConstAlloc, Pointer, Scalar};\n \n use crate::mir::interpret::ConstValue;\n use crate::ty::{layout, query::TyCtxtAt, tls, FnSig, Ty};\n@@ -27,8 +27,8 @@ CloneTypeFoldableAndLiftImpls! {\n     ErrorHandled,\n }\n \n-pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n-pub type ConstEvalResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n+pub type EvalToAllocationRawResult<'tcx> = Result<ConstAlloc<'tcx>, ErrorHandled>;\n+pub type EvalToConstValueResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n \n pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'tcx> {\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)"}, {"sha": "adf551ee43306f7f39ac856238c9b349b1dc0980", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -118,12 +118,12 @@ use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Instance, Ty, TyCtxt};\n \n pub use self::error::{\n-    struct_error, CheckInAllocMsg, ConstEvalRawResult, ConstEvalResult, ErrorHandled, InterpError,\n-    InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType, ResourceExhaustionInfo,\n-    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n+    struct_error, CheckInAllocMsg, ErrorHandled, EvalToAllocationRawResult, EvalToConstValueResult,\n+    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n+    ResourceExhaustionInfo, UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n-pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUninit};\n+pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar, ScalarMaybeUninit};\n \n pub use self::allocation::{Allocation, AllocationExtra, InitMask, Relocations};\n "}, {"sha": "f366681bc75e9d1ab47d017c47e07632812350bc", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,4 +1,4 @@\n-use super::{ConstEvalResult, ErrorHandled, GlobalId};\n+use super::{ErrorHandled, EvalToConstValueResult, GlobalId};\n \n use crate::mir;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n@@ -10,7 +10,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n     /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n     /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n-    pub fn const_eval_poly(self, def_id: DefId) -> ConstEvalResult<'tcx> {\n+    pub fn const_eval_poly(self, def_id: DefId) -> EvalToConstValueResult<'tcx> {\n         // In some situations def_id will have substitutions within scope, but they aren't allowed\n         // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n         // into `const_eval` which will return `ErrorHandled::ToGeneric` if any of them are\n@@ -38,7 +38,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };\n@@ -54,7 +54,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         instance: ty::Instance<'tcx>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         self.const_eval_global_id(param_env, GlobalId { instance, promoted: None }, span)\n     }\n \n@@ -64,14 +64,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         cid: GlobalId<'tcx>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n         // improve caching of queries.\n         let inputs = self.erase_regions(&param_env.and(cid));\n         if let Some(span) = span {\n-            self.at(span).const_eval_validated(inputs)\n+            self.at(span).eval_to_const_value_raw(inputs)\n         } else {\n-            self.const_eval_validated(inputs)\n+            self.eval_to_const_value_raw(inputs)\n         }\n     }\n \n@@ -94,7 +94,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n         trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n-        let raw_const = self.const_eval_raw(param_env.and(gid))?;\n+        let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n     }\n }"}, {"sha": "1f547d9dc3a43a44b2fe8837a90f9ab754192da4", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -12,9 +12,9 @@ use crate::ty::{ParamEnv, Ty, TyCtxt};\n \n use super::{sign_extend, truncate, AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n \n-/// Represents the result of a raw const operation, pre-validation.\n+/// Represents the result of const evaluation via the `eval_to_allocation` query.\n #[derive(Clone, HashStable)]\n-pub struct RawConst<'tcx> {\n+pub struct ConstAlloc<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`\n     // (so you can use `AllocMap::unwrap_memory`).\n     pub alloc_id: AllocId,"}, {"sha": "c0a606a586b6b5b549a458584b5f5512f88d3085", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -707,32 +707,27 @@ rustc_queries! {\n     }\n \n     Other {\n-        /// Evaluates a constant without running sanity checks.\n+        /// Evaluates a constant and returns the computed allocation.\n         ///\n-        /// **Do not use this** outside const eval. Const eval uses this to break query cycles\n-        /// during validation. Please add a comment to every use site explaining why using\n-        /// `const_eval_validated` isn't sufficient. The returned constant also isn't in a suitable\n-        /// form to be used outside of const eval.\n-        query const_eval_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n-            -> ConstEvalRawResult<'tcx> {\n+        /// **Do not use this** directly, use the `tcx.eval_static_initializer` wrapper.\n+        query eval_to_allocation_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+            -> EvalToAllocationRawResult<'tcx> {\n             desc { |tcx|\n-                \"const-evaluating `{}`\",\n+                \"const-evaluating + checking `{}`\",\n                 key.value.display(tcx)\n             }\n         }\n \n-        /// Results of evaluating const items or constants embedded in\n-        /// other items (such as enum variant explicit discriminants).\n-        ///\n-        /// In contrast to `const_eval_raw` this performs some validation on the constant, and\n-        /// returns a proper constant that is usable by the rest of the compiler.\n+        /// Evaluates const items or anonymous constants\n+        /// (such as enum variant explicit discriminants or array lengths)\n+        /// into a representation suitable for the type system and const generics.\n         ///\n         /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n         /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_global_id`.\n-        query const_eval_validated(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n-            -> ConstEvalResult<'tcx> {\n+        query eval_to_const_value_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+            -> EvalToConstValueResult<'tcx> {\n             desc { |tcx|\n-                \"const-evaluating + checking `{}`\",\n+                \"simplifying constant for the type system `{}`\",\n                 key.value.display(tcx)\n             }\n             cache_on_disk_if(_, opt_result) {"}, {"sha": "d3a7412ef14e777c2d58da3879f38373a1b28c62", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -14,7 +14,7 @@ use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLife\n use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n-use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult, ConstValue};\n+use crate::mir::interpret::{ConstValue, EvalToAllocationRawResult, EvalToConstValueResult};\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::traits::query::{"}, {"sha": "a0ee7fdc072ef3c21209a476bbb5d3a845ae932a", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 71, "deletions": 62, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,8 +1,8 @@\n use super::{CompileTimeEvalContext, CompileTimeInterpreter, ConstEvalErr, MemoryExtra};\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n-    intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, Immediate, InternKind,\n-    InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RawConst, RefTracking, Scalar,\n+    intern_const_alloc_recursive, Allocation, ConstAlloc, ConstValue, GlobalId, Immediate,\n+    InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking, Scalar,\n     ScalarMaybeUninit, StackPopCleanup,\n };\n \n@@ -104,6 +104,8 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n     )\n }\n \n+/// This function converts an interpreter value into a constant that is meant for use in the\n+/// type system.\n pub(super) fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, 'tcx>,\n     op: OpTy<'tcx>,\n@@ -182,63 +184,37 @@ pub(super) fn op_to_const<'tcx>(\n     }\n }\n \n-fn validate_and_turn_into_const<'tcx>(\n+fn turn_into_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    constant: RawConst<'tcx>,\n+    constant: ConstAlloc<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc_middle::mir::interpret::ConstEvalResult<'tcx> {\n+) -> ConstValue<'tcx> {\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n     let is_static = tcx.is_static(def_id);\n     let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env, is_static);\n-    let val = (|| {\n-        let mplace = ecx.raw_const_to_mplace(constant)?;\n \n-        // FIXME do not validate promoteds until a decision on\n-        // https://github.com/rust-lang/rust/issues/67465 is made\n-        if cid.promoted.is_none() {\n-            let mut ref_tracking = RefTracking::new(mplace);\n-            while let Some((mplace, path)) = ref_tracking.todo.pop() {\n-                ecx.const_validate_operand(\n-                    mplace.into(),\n-                    path,\n-                    &mut ref_tracking,\n-                    /*may_ref_to_static*/ ecx.memory.extra.can_access_statics,\n-                )?;\n-            }\n-        }\n-        // Now that we validated, turn this into a proper constant.\n-        // Statics/promoteds are always `ByRef`, for the rest `op_to_const` decides\n-        // whether they become immediates.\n-        if is_static || cid.promoted.is_some() {\n-            let ptr = mplace.ptr.assert_ptr();\n-            Ok(ConstValue::ByRef {\n-                alloc: ecx.tcx.global_alloc(ptr.alloc_id).unwrap_memory(),\n-                offset: ptr.offset,\n-            })\n-        } else {\n-            Ok(op_to_const(&ecx, mplace.into()))\n-        }\n-    })();\n-\n-    val.map_err(|error| {\n-        let err = ConstEvalErr::new(&ecx, error, None);\n-        err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\", |mut diag| {\n-            diag.note(note_on_undefined_behavior_error());\n-            diag.emit();\n-        })\n-    })\n+    let mplace = ecx.raw_const_to_mplace(constant).expect(\n+        \"can only fail if layout computation failed, \\\n+        which should have given a good error before ever invoking this function\",\n+    );\n+    assert!(\n+        !is_static || cid.promoted.is_some(),\n+        \"the `eval_to_const_value_raw` query should not be used for statics, use `eval_to_allocation` instead\"\n+    );\n+    // Turn this into a proper constant.\n+    op_to_const(&ecx, mplace.into())\n }\n \n-pub fn const_eval_validated_provider<'tcx>(\n+pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc_middle::mir::interpret::ConstEvalResult<'tcx> {\n+) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n     // see comment in const_eval_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.const_eval_validated(key) {\n+        match tcx.eval_to_const_value_raw(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls\n@@ -261,13 +237,13 @@ pub fn const_eval_validated_provider<'tcx>(\n         });\n     }\n \n-    tcx.const_eval_raw(key).and_then(|val| validate_and_turn_into_const(tcx, val, key))\n+    tcx.eval_to_allocation_raw(key).map(|val| turn_into_const_value(tcx, val, key))\n }\n \n-pub fn const_eval_raw_provider<'tcx>(\n+pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc_middle::mir::interpret::ConstEvalRawResult<'tcx> {\n+) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was\n@@ -279,7 +255,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.const_eval_raw(key) {\n+        match tcx.eval_to_allocation_raw(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls\n@@ -318,9 +294,8 @@ pub fn const_eval_raw_provider<'tcx>(\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n-    res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body))\n-        .map(|place| RawConst { alloc_id: place.ptr.assert_ptr().alloc_id, ty: place.layout.ty })\n-        .map_err(|error| {\n+    match res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body)) {\n+        Err(error) => {\n             let err = ConstEvalErr::new(&ecx, error, None);\n             // errors in statics are always emitted as fatal errors\n             if is_static {\n@@ -342,7 +317,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     );\n                 }\n \n-                v\n+                Err(v)\n             } else if let Some(def) = def.as_local() {\n                 // constant defined in this crate, we can figure out a lint level!\n                 match tcx.def_kind(def.did.to_def_id()) {\n@@ -356,12 +331,12 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // compatibility hazard\n                     DefKind::Const | DefKind::AssocConst => {\n                         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-                        err.report_as_lint(\n+                        Err(err.report_as_lint(\n                             tcx.at(tcx.def_span(def.did)),\n                             \"any use of this value will cause an error\",\n                             hir_id,\n                             Some(err.span),\n-                        )\n+                        ))\n                     }\n                     // promoting runtime code is only allowed to error if it references broken\n                     // constants any other kind of error will be reported to the user as a\n@@ -370,31 +345,65 @@ pub fn const_eval_raw_provider<'tcx>(\n                         if let Some(p) = cid.promoted {\n                             let span = tcx.promoted_mir_of_opt_const_arg(def.to_global())[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n-                                err.report_as_error(\n+                                Err(err.report_as_error(\n                                     tcx.at(span),\n                                     \"evaluation of constant expression failed\",\n-                                )\n+                                ))\n                             } else {\n-                                err.report_as_lint(\n+                                Err(err.report_as_lint(\n                                     tcx.at(span),\n                                     \"reaching this expression at runtime will panic or abort\",\n                                     tcx.hir().local_def_id_to_hir_id(def.did),\n                                     Some(err.span),\n-                                )\n+                                ))\n                             }\n                         // anything else (array lengths, enum initializers, constant patterns) are\n                         // reported as hard errors\n                         } else {\n-                            err.report_as_error(\n+                            Err(err.report_as_error(\n                                 ecx.tcx.at(ecx.cur_span()),\n                                 \"evaluation of constant value failed\",\n-                            )\n+                            ))\n                         }\n                     }\n                 }\n             } else {\n                 // use of broken constant from other crate\n-                err.report_as_error(ecx.tcx.at(ecx.cur_span()), \"could not evaluate constant\")\n+                Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), \"could not evaluate constant\"))\n             }\n-        })\n+        }\n+        Ok(mplace) => {\n+            // Since evaluation had no errors, valiate the resulting constant:\n+            let validation = try {\n+                // FIXME do not validate promoteds until a decision on\n+                // https://github.com/rust-lang/rust/issues/67465 is made\n+                if cid.promoted.is_none() {\n+                    let mut ref_tracking = RefTracking::new(mplace);\n+                    while let Some((mplace, path)) = ref_tracking.todo.pop() {\n+                        ecx.const_validate_operand(\n+                            mplace.into(),\n+                            path,\n+                            &mut ref_tracking,\n+                            /*may_ref_to_static*/ ecx.memory.extra.can_access_statics,\n+                        )?;\n+                    }\n+                }\n+            };\n+            if let Err(error) = validation {\n+                // Validation failed, report an error\n+                let err = ConstEvalErr::new(&ecx, error, None);\n+                Err(err.struct_error(\n+                    ecx.tcx,\n+                    \"it is undefined behavior to use this value\",\n+                    |mut diag| {\n+                        diag.note(note_on_undefined_behavior_error());\n+                        diag.emit();\n+                    },\n+                ))\n+            } else {\n+                // Convert to raw constant\n+                Ok(ConstAlloc { alloc_id: mplace.ptr.assert_ptr().alloc_id, ty: mplace.layout.ty })\n+            }\n+        }\n+    }\n }"}, {"sha": "73ca7e0d471ca21dadabef1a32b06eec0c8415f4", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -51,7 +51,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n \n         let gid = GlobalId { instance, promoted: None };\n \n-        let place = self.const_eval_raw(gid)?;\n+        let place = self.eval_to_allocation(gid)?;\n \n         self.copy_op(place.into(), dest)?;\n "}, {"sha": "00d6ffb14eaf265928c9c52dbdcedf33c65cb291", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -20,7 +20,7 @@ use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n-    Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n+    Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, Operand, Place, PlaceTy,\n     ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n@@ -875,32 +875,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(super) fn const_eval(\n-        &self,\n-        gid: GlobalId<'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n-        // and thus don't care about the parameter environment. While we could just use\n-        // `self.param_env`, that would mean we invoke the query to evaluate the static\n-        // with different parameter environments, thus causing the static to be evaluated\n-        // multiple times.\n-        let param_env = if self.tcx.is_static(gid.instance.def_id()) {\n-            ty::ParamEnv::reveal_all()\n-        } else {\n-            self.param_env\n-        };\n-        let val = self.tcx.const_eval_global_id(param_env, gid, Some(self.tcx.span))?;\n-\n-        // Even though `ecx.const_eval` is called from `const_to_op` we can never have a\n-        // recursion deeper than one level, because the `tcx.const_eval` above is guaranteed to not\n-        // return `ConstValue::Unevaluated`, which is the only way that `const_to_op` will call\n-        // `ecx.const_eval`.\n-        let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n-        self.const_to_op(&const_, None)\n-    }\n-\n-    pub fn const_eval_raw(\n+    pub fn eval_to_allocation(\n         &self,\n         gid: GlobalId<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n@@ -914,14 +889,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n-        // We use `const_eval_raw` here, and get an unvalidated result.  That is okay:\n-        // Our result will later be validated anyway, and there seems no good reason\n-        // to have to fail early here.  This is also more consistent with\n-        // `Memory::get_static_alloc` which has to use `const_eval_raw` to avoid cycles.\n-        // FIXME: We can hit delay_span_bug if this is an invalid const, interning finds\n-        // that problem, but we never run validation to show an error. Can we ensure\n-        // this does not happen?\n-        let val = self.tcx.const_eval_raw(param_env.and(gid))?;\n+        let val = self.tcx.eval_to_allocation_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }\n "}, {"sha": "0664f25e409dcd3c8765233d1763a786a2fe13d7", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -152,7 +152,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::type_name => self.tcx.mk_static_str(),\n                     _ => bug!(\"already checked for nullary intrinsics\"),\n                 };\n-                let val = self.const_eval(gid, ty)?;\n+                let val =\n+                    self.tcx.const_eval_global_id(self.param_env, gid, Some(self.tcx.span))?;\n+                let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n+                let val = self.const_to_op(&const_, None)?;\n                 self.copy_op(val, dest)?;\n             }\n "}, {"sha": "86e242c67d520439172fba2032f913b4ef920fe5", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -469,7 +469,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Notice that every static has two `AllocId` that will resolve to the same\n                 // thing here: one maps to `GlobalAlloc::Static`, this is the \"lazy\" ID,\n                 // and the other one is maps to `GlobalAlloc::Memory`, this is returned by\n-                // `const_eval_raw` and it is the \"resolved\" ID.\n+                // `eval_static_initializer` and it is the \"resolved\" ID.\n                 // The resolved ID is never used by the interpreted program, it is hidden.\n                 // This is relied upon for soundness of const-patterns; a pointer to the resolved\n                 // ID would \"sidestep\" the checks that make sure consts do not point to statics!"}, {"sha": "8c4bb19866e3f94f30f6c7a8173ab0eee47c2c01", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -553,13 +553,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def.did, substs)?;\n-                // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n-                // The reason we use `const_eval_raw` everywhere else is to prevent cycles during\n-                // validation, because validation automatically reads through any references, thus\n-                // potentially requiring the current static to be evaluated again. This is not a\n-                // problem here, because we are building an operand which means an actual read is\n-                // happening.\n-                return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n+                return Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into());\n             }\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)"}, {"sha": "72551b23370dd3f2124a32a08426b825110d4c07", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -13,9 +13,9 @@ use rustc_target::abi::{Abi, Align, FieldsShape, TagEncoding};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ImmTy,\n-    Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n-    PointerArithmetic, RawConst, Scalar, ScalarMaybeUninit,\n+    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ConstAlloc,\n+    ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand,\n+    Pointer, PointerArithmetic, Scalar, ScalarMaybeUninit,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -1120,7 +1120,7 @@ where\n \n     pub fn raw_const_to_mplace(\n         &self,\n-        raw: RawConst<'tcx>,\n+        raw: ConstAlloc<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         // This must be an allocation in `tcx`\n         let _ = self.tcx.global_alloc(raw.alloc_id);"}, {"sha": "2b83e1c8134efe75508140c3e04fa7f4e4002c13", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -425,26 +425,28 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let alloc_kind = self.ecx.tcx.get_global_alloc(ptr.alloc_id);\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n                     assert!(!self.ecx.tcx.is_thread_local_static(did));\n-                    // See const_eval::machine::MemoryExtra::can_access_statics for why\n-                    // this check is so important.\n-                    // This check is reachable when the const just referenced the static,\n-                    // but never read it (so we never entered `before_access_global`).\n-                    // We also need to do it here instead of going on to avoid running\n-                    // into the `before_access_global` check during validation.\n-                    if !self.may_ref_to_static && self.ecx.tcx.is_static(did) {\n+                    assert!(self.ecx.tcx.is_static(did));\n+                    if self.may_ref_to_static {\n+                        // We skip checking other statics. These statics must be sound by\n+                        // themselves, and the only way to get broken statics here is by using\n+                        // unsafe code.\n+                        // The reasons we don't check other statics is twofold. For one, in all\n+                        // sound cases, the static was already validated on its own, and second, we\n+                        // trigger cycle errors if we try to compute the value of the other static\n+                        // and that static refers back to us.\n+                        // We might miss const-invalid data,\n+                        // but things are still sound otherwise (in particular re: consts\n+                        // referring to statics).\n+                        return Ok(());\n+                    } else {\n+                        // See const_eval::machine::MemoryExtra::can_access_statics for why\n+                        // this check is so important.\n+                        // This check is reachable when the const just referenced the static,\n+                        // but never read it (so we never entered `before_access_global`).\n                         throw_validation_failure!(self.path,\n                             { \"a {} pointing to a static variable\", kind }\n                         );\n                     }\n-                    // `extern static` cannot be validated as they have no body.\n-                    // FIXME: Statics from other crates are also skipped.\n-                    // They might be checked at a different type, but for now we\n-                    // want to avoid recursing too deeply.  We might miss const-invalid data,\n-                    // but things are still sound otherwise (in particular re: consts\n-                    // referring to statics).\n-                    if !did.is_local() || self.ecx.tcx.is_foreign_item(did) {\n-                        return Ok(());\n-                    }\n                 }\n             }\n             // Proceed recursively even for ZST, no reason to skip them!"}, {"sha": "03e6f8414b9a3e2a92595f99884a781614c9dc35", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -53,8 +53,8 @@ pub fn provide(providers: &mut Providers) {\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n     monomorphize::polymorphize::provide(providers);\n-    providers.const_eval_validated = const_eval::const_eval_validated_provider;\n-    providers.const_eval_raw = const_eval::const_eval_raw_provider;\n+    providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n+    providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();"}, {"sha": "4ef871b05f47f3375916fd58c7717ef789a30feb", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -364,8 +364,10 @@ fn collect_items_rec<'tcx>(\n \n             recursion_depth_reset = None;\n \n-            if let Ok(val) = tcx.const_eval_poly(def_id) {\n-                collect_const_value(tcx, val, &mut neighbors);\n+            if let Ok(alloc) = tcx.eval_static_initializer(def_id) {\n+                for &((), id) in alloc.relocations().values() {\n+                    collect_miri(tcx, id, &mut neighbors);\n+                }\n             }\n         }\n         MonoItem::Fn(instance) => {"}, {"sha": "49c644a20bf8248dc427c155567461f45fd1b105", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -631,14 +631,11 @@ pub fn write_allocations<'tcx>(\n             None => write!(w, \" (deallocated)\")?,\n             Some(GlobalAlloc::Function(inst)) => write!(w, \" (fn: {})\", inst)?,\n             Some(GlobalAlloc::Static(did)) if !tcx.is_foreign_item(did) => {\n-                match tcx.const_eval_poly(did) {\n-                    Ok(ConstValue::ByRef { alloc, .. }) => {\n+                match tcx.eval_static_initializer(did) {\n+                    Ok(alloc) => {\n                         write!(w, \" (static: {}, \", tcx.def_path_str(did))?;\n                         write_allocation_track_relocs(w, alloc)?;\n                     }\n-                    Ok(_) => {\n-                        span_bug!(tcx.def_span(did), \" static item without `ByRef` initializer\")\n-                    }\n                     Err(_) => write!(\n                         w,\n                         \" (static: {}, error during initializer evaluation)\","}, {"sha": "e84cc3c9b8684646725f14d0f78a93051a34447a", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -111,7 +111,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{InferCtxt, InferOk, InferResult, RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n@@ -2070,16 +2069,15 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: S\n     // `#[link_section]` may contain arbitrary, or even undefined bytes, but it is\n     // the consumer's responsibility to ensure all bytes that have been read\n     // have defined values.\n-    match tcx.const_eval_poly(id.to_def_id()) {\n-        Ok(ConstValue::ByRef { alloc, .. }) => {\n+    match tcx.eval_static_initializer(id.to_def_id()) {\n+        Ok(alloc) => {\n             if alloc.relocations().len() != 0 {\n                 let msg = \"statics with a custom `#[link_section]` must be a \\\n                            simple list of bytes on the wasm target with no \\\n                            extra levels of indirection such as references\";\n                 tcx.sess.span_err(span, msg);\n             }\n         }\n-        Ok(_) => bug!(\"Matching on non-ByRef static\"),\n         Err(_) => {}\n     }\n }"}, {"sha": "fcb9002986a1c1ab4a833fa4b5a63702afb9c076", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -14,7 +14,7 @@\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @alloc20, i32 0, i32 0, i32 0), {{.*}}\n+// CHECK: [[LOW_HIGH:@alloc[0-9]+]] = {{.*}}, align 4\n \n #[derive(Copy, Clone)]\n // repr(i16) is required for the {low,high}_align_const test\n@@ -43,14 +43,14 @@ pub fn inline_enum_const() -> E<i8, i16> {\n #[no_mangle]\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n     // Check that low_align_const and high_align_const use the same constant\n-    // CHECK: load %\"E<i16, [i16; 3]>\"*, %\"E<i16, [i16; 3]>\"** bitcast (<{ i8*, [0 x i8] }>* [[LOW_HIGH]] to %\"E<i16, [i16; 3]>\"**),\n+    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 2 %1, i8* align 2 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n     *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n pub fn high_align_const() -> E<i16, i32> {\n     // Check that low_align_const and high_align_const use the same constant\n-    // CHECK: load %\"E<i16, i32>\"*, %\"E<i16, i32>\"** bitcast (<{ i8*, [0 x i8] }>* [[LOW_HIGH]] to %\"E<i16, i32>\"**),\n+    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n     *&E::A(0)\n }"}, {"sha": "71e764620d1404d5d1db460791a62010a5457c67", "filename": "src/test/compile-fail/issue-44415.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -4,7 +4,7 @@ use std::intrinsics;\n \n struct Foo {\n     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-    //~^ ERROR cycle detected when const-evaluating + checking\n+    //~^ ERROR cycle detected when simplifying constant for the type system\n     x: usize,\n }\n "}, {"sha": "25dc7cdf129d5037a494425510a107d5df21ed85", "filename": "src/test/incremental/issue-54242.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fincremental%2Fissue-54242.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fincremental%2Fissue-54242.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-54242.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -11,7 +11,7 @@ impl Tr for str {\n     type Arr = [u8; 8];\n     #[cfg(cfail)]\n     type Arr = [u8; Self::C];\n-    //[cfail]~^ ERROR cycle detected when const-evaluating\n+    //[cfail]~^ ERROR cycle detected when simplifying constant\n }\n \n fn main() {}"}, {"sha": "616ac9053fd539af2e3bdde5b3be319843a37a74", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,38 +1,38 @@\n error[E0391]: cycle detected when normalizing `<() as Tr>::A`\n    |\n-note: ...which requires const-evaluating + checking `Tr::A`...\n+note: ...which requires simplifying constant for the type system `Tr::A`...\n   --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Tr::A`...\n+note: ...which requires simplifying constant for the type system `Tr::A`...\n   --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Tr::A`...\n+note: ...which requires const-evaluating + checking `Tr::A`...\n   --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<() as Tr>::B`...\n-note: ...which requires const-evaluating + checking `Tr::B`...\n+note: ...which requires simplifying constant for the type system `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Tr::B`...\n+note: ...which requires simplifying constant for the type system `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Tr::B`...\n+note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n-note: cycle used when const-evaluating `main::promoted[2]`\n+note: cycle used when const-evaluating + checking `main::promoted[2]`\n   --> $DIR/defaults-cyclic-fail.rs:14:1\n    |\n LL | fn main() {"}, {"sha": "d9bb7386565fa83612499055fd0da8b1da85f88f", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,31 +1,31 @@\n-error[E0391]: cycle detected when const-evaluating + checking `IMPL_REF_BAR`\n+error[E0391]: cycle detected when simplifying constant for the type system `IMPL_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n+note: ...which requires simplifying constant for the type system `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `IMPL_REF_BAR`...\n+note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n@@ -36,7 +36,7 @@ note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-cons\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `IMPL_REF_BAR`...\n-   = note: ...which again requires const-evaluating + checking `IMPL_REF_BAR`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `IMPL_REF_BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "d000d8ac097a486f99b580bfaff03ab7e7eeb0b2", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,31 +1,31 @@\n-error[E0391]: cycle detected when const-evaluating + checking `DEFAULT_REF_BAR`\n+error[E0391]: cycle detected when simplifying constant for the type system `DEFAULT_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n+note: ...which requires simplifying constant for the type system `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `DEFAULT_REF_BAR`...\n+note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<GlobalDefaultRef as FooDefault>::BAR`...\n-note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n+note: ...which requires simplifying constant for the type system `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n+note: ...which requires simplifying constant for the type system `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `FooDefault::BAR`...\n+note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n@@ -36,7 +36,7 @@ note: ...which requires optimizing MIR for `FooDefault::BAR`...\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `DEFAULT_REF_BAR`...\n-   = note: ...which again requires const-evaluating + checking `DEFAULT_REF_BAR`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `DEFAULT_REF_BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "62d2051b6c23aab13a3bb8bc697f136ebf86768f", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,31 +1,31 @@\n-error[E0391]: cycle detected when const-evaluating + checking `TRAIT_REF_BAR`\n+error[E0391]: cycle detected when simplifying constant for the type system `TRAIT_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n+note: ...which requires simplifying constant for the type system `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `TRAIT_REF_BAR`...\n+note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `<GlobalTraitRef as Foo>::BAR`...\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n@@ -36,7 +36,7 @@ note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-cons\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `TRAIT_REF_BAR`...\n-   = note: ...which again requires const-evaluating + checking `TRAIT_REF_BAR`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `TRAIT_REF_BAR`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "8c57fd37e88f68c449f151b60f745020d6fe202b", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -9,9 +9,9 @@ LL |     let x: &'static i32 = &(1 / 0);\n    = note: `#[deny(const_err)]` on by default\n \n query stack during panic:\n-#0 [const_eval_raw] const-evaluating `main::promoted[1]`\n-#1 [const_eval_validated] const-evaluating + checking `main::promoted[1]`\n-#2 [const_eval_validated] const-evaluating + checking `main::promoted[1]`\n+#0 [eval_to_allocation_raw] const-evaluating + checking `main::promoted[1]`\n+#1 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n+#2 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n #3 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n #4 [optimized_mir] optimizing MIR for `main`\n #5 [collect_and_partition_mono_items] collect_and_partition_mono_items"}, {"sha": "fb0ed1bd5aa9486399254414edcf246b56adc60a", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -36,7 +36,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:37:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc22, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -76,7 +76,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:52:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc47, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc38, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -100,7 +100,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc62, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc50, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -148,7 +148,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:79:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc71, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -188,7 +188,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:94:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc101, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -212,7 +212,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:103:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc110, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc95, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "81f5dde450b478505413359ee05e6c66b877989c", "filename": "src/test/ui/consts/const-eval/double_check2.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,3 +1,9 @@\n+// check-pass\n+\n+// This test exhibits undefined behavior, but it is very expensive and complex to check for such\n+// UB in constants.\n+// Thus, we do not detect it if you create references to statics in ways that are UB.\n+\n enum Foo {\n     A = 5,\n     B = 42,\n@@ -13,11 +19,14 @@ union Union {\n     u8: &'static u8,\n }\n static BAR: u8 = 5;\n-static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior\n-    Union { u8: &BAR }.foo,\n-    Union { u8: &BAR }.bar,\n-)};\n-static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n-//~^ undefined behavior\n+static FOO: (&Foo, &Bar) = unsafe {\n+    (\n+        // undefined behavior\n+        Union { u8: &BAR }.foo,\n+        Union { u8: &BAR }.bar,\n+    )\n+};\n+static FOO2: (&Foo, &Bar) = unsafe { (std::mem::transmute(&BAR), std::mem::transmute(&BAR)) };\n+//^ undefined behavior\n \n fn main() {}"}, {"sha": "84f60809156d0201d9543c09695b39b8bcb02db7", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/10b3595ba6a4c658c9dea105488fc562c815e434/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b3595ba6a4c658c9dea105488fc562c815e434/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=10b3595ba6a4c658c9dea105488fc562c815e434", "patch": "@@ -1,22 +0,0 @@\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/double_check2.rs:16:1\n-   |\n-LL | / static FOO: (&Foo, &Bar) = unsafe {(\n-LL | |     Union { u8: &BAR }.foo,\n-LL | |     Union { u8: &BAR }.bar,\n-LL | | )};\n-   | |___^ type validation failed: encountered 0x05 at .1.<deref>.<enum-tag>, but expected a valid enum tag\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/double_check2.rs:20:1\n-   |\n-LL | static FOO2: (&Foo, &Bar) = unsafe {(std::mem::transmute(&BAR), std::mem::transmute(&BAR))};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x05 at .1.<deref>.<enum-tag>, but expected a valid enum tag\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "db95b996c18c9981921a2169443d2e1660074f53", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -18,7 +18,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc13 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc12 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -34,15 +34,15 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:44:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc20 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:47:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc25 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc22 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -58,7 +58,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc32 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc28 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "afd8a4b9e59efbd414cd9e8ceca253254e4bd317", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n+   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "429ae69eabfdb0931c93acf885d3ed7e50da310c", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -34,7 +34,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:23:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc16, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc14, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "58d5e9ac58c2eab811a6bbd90df93994890a3ee1", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,32 +1,32 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::bytes::{{constant}}#0`\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Foo::bytes::{{constant}}#0`...\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `std::mem::size_of`...\n+note: ...which requires const-evaluating + checking `std::mem::size_of`...\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `std::intrinsics::size_of`...\n+note: ...which requires simplifying constant for the type system `std::intrinsics::size_of`...\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     pub fn size_of<T>() -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `[u8; _]`...\n-   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/const-size_of-cycle.rs:3:1\n    |"}, {"sha": "03f8f5c5a0e5da7e5c6e37538fbf02d3b707e045", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,20 +1,16 @@\n-error[E0391]: cycle detected when const-evaluating `FOO`\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `FOO`...\n-  --> $DIR/recursive-zst-static.rs:10:1\n-   |\n-LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `FOO`\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "4e61634b349e0596baee98a5dc41e3f412d060b7", "filename": "src/test/ui/consts/recursive-zst-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -7,7 +7,7 @@\n // can depend on this fact and will thus do unsound things when it is violated.\n // See https://github.com/rust-lang/rust/issues/71078 for more details.\n \n-static FOO: () = FOO; //~ cycle detected when const-evaluating `FOO`\n+static FOO: () = FOO; //~ cycle detected when const-evaluating + checking `FOO`\n \n fn main() {\n     FOO"}, {"sha": "03f8f5c5a0e5da7e5c6e37538fbf02d3b707e045", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,20 +1,16 @@\n-error[E0391]: cycle detected when const-evaluating `FOO`\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `FOO`...\n-  --> $DIR/recursive-zst-static.rs:10:1\n-   |\n-LL | static FOO: () = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `FOO`\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "34580407926f18cf12d650e378efd406b903b2d1", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,7 +1,12 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n-const fn a() -> usize { b() } //~ ERROR cycle detected when const-evaluating `a` [E0391]\n-const fn b() -> usize { a() }\n+const fn a() -> usize {\n+    //~^ ERROR cycle detected when const-evaluating + checking `a` [E0391]\n+    b()\n+}\n+const fn b() -> usize {\n+    a()\n+}\n const ARR: [i32; a()] = [5; 6];\n \n-fn main(){}\n+fn main() {}"}, {"sha": "3c106895305dcc41f0ad28962979eed1fa33e4da", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,17 +1,17 @@\n-error[E0391]: cycle detected when const-evaluating `a`\n+error[E0391]: cycle detected when const-evaluating + checking `a`\n   --> $DIR/infinite-recursion-const-fn.rs:3:1\n    |\n-LL | const fn a() -> usize { b() }\n+LL | const fn a() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `b`...\n-  --> $DIR/infinite-recursion-const-fn.rs:4:1\n+note: ...which requires const-evaluating + checking `b`...\n+  --> $DIR/infinite-recursion-const-fn.rs:7:1\n    |\n-LL | const fn b() -> usize { a() }\n+LL | const fn b() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `a`, completing the cycle\n-note: cycle used when const-evaluating `ARR::{{constant}}#0`\n-  --> $DIR/infinite-recursion-const-fn.rs:5:18\n+   = note: ...which again requires const-evaluating + checking `a`, completing the cycle\n+note: cycle used when const-evaluating + checking `ARR::{{constant}}#0`\n+  --> $DIR/infinite-recursion-const-fn.rs:10:18\n    |\n LL | const ARR: [i32; a()] = [5; 6];\n    |                  ^^^"}, {"sha": "0a27848b801c9539bf859faf79b9751a5d3e7911", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,22 +1,22 @@\n error[E0391]: cycle detected when normalizing `FOO`\n    |\n-note: ...which requires const-evaluating + checking `FOO`...\n+note: ...which requires simplifying constant for the type system `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `FOO`...\n+note: ...which requires simplifying constant for the type system `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `FOO`...\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `FOO`, completing the cycle\n-note: cycle used when const-evaluating `main::{{constant}}#0`\n+note: cycle used when const-evaluating + checking `main::{{constant}}#0`\n   --> $DIR/issue-17252.rs:4:18\n    |\n LL |     let _x: [u8; FOO]; // caused stack overflow prior to fix"}, {"sha": "45372c7f53bd4811dca45cc4fe2bb96b0e9d050d", "filename": "src/test/ui/issues/issue-23302-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when const-evaluating + checking `X::A::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `X::A::{{constant}}#0`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `X::A::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `X::A::{{constant}}#0`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `X::A::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `X::A::{{constant}}#0`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    = note: ...which requires normalizing `X::A as isize`...\n-   = note: ...which again requires const-evaluating + checking `X::A::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `X::A::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23302-1.rs:3:1\n    |"}, {"sha": "33bc1f6c48d5e5096549e4bb9ed857432ce2ac55", "filename": "src/test/ui/issues/issue-23302-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Y::A::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Y::A::{{constant}}#0`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `Y::A::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Y::A::{{constant}}#0`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `Y::A::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Y::A::{{constant}}#0`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    = note: ...which requires normalizing `Y::B as isize`...\n-   = note: ...which again requires const-evaluating + checking `Y::A::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Y::A::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23302-2.rs:3:1\n    |"}, {"sha": "5233b832ecc796f1bf351011b9e376e400d521f0", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,37 +1,37 @@\n-error[E0391]: cycle detected when const-evaluating + checking `A`\n+error[E0391]: cycle detected when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `A`...\n+note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `B`...\n-note: ...which requires const-evaluating + checking `B`...\n+note: ...which requires simplifying constant for the type system `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `B`...\n+note: ...which requires simplifying constant for the type system `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `B`...\n+note: ...which requires const-evaluating + checking `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `A`...\n-   = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `A`, completing the cycle\n    = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error"}, {"sha": "3fd1f4b59beca79db78673b9c9ee1ecda4e0ad0b", "filename": "src/test/ui/issues/issue-36163.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,37 +1,37 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::B::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::B::{{constant}}#0`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    |\n-note: ...which requires const-evaluating + checking `Foo::B::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Foo::B::{{constant}}#0`...\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n-note: ...which requires const-evaluating `Foo::B::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Foo::B::{{constant}}#0`...\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    = note: ...which requires normalizing `A`...\n-note: ...which requires const-evaluating + checking `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating `A`...\n+note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `A`...\n-   = note: ...which again requires const-evaluating + checking `Foo::B::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Foo::B::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-36163.rs:1:1\n    |"}, {"sha": "f59ef7316d8905d4aaf1bc0287a45dd47929d12b", "filename": "src/test/ui/recursion/recursive-static-definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,4 +1,4 @@\n pub static FOO: u32 = FOO;\n-//~^ ERROR cycle detected when const-evaluating `FOO`\n+//~^ ERROR cycle detected when const-evaluating + checking `FOO`\n \n fn main() {}"}, {"sha": "ee73b026a0b75b14d9a2356b2df2e3ac34cf7d30", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,20 +1,16 @@\n-error[E0391]: cycle detected when const-evaluating `FOO`\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/recursive-static-definition.rs:1:1\n    |\n LL | pub static FOO: u32 = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `FOO`...\n-  --> $DIR/recursive-static-definition.rs:1:1\n-   |\n-LL | pub static FOO: u32 = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `FOO`\n+note: ...which requires const-evaluating + checking `FOO`...\n   --> $DIR/recursive-static-definition.rs:1:1\n    |\n LL | pub static FOO: u32 = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "8dadd77fc16d5d4bbd1bf7dcbd91306749132d62", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.rs?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,8 +1,8 @@\n #[repr(u8)]\n enum Alpha {\n     V1 = 41,\n-    V2 = Self::V1 as u8 + 1, // OK; See #50072.\n-    V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when const-evaluating\n+    V2 = Self::V1 as u8 + 1,    // OK; See #50072.\n+    V3 = Self::V1 {} as u8 + 2, //~ ERROR cycle detected when simplifying constant\n }\n \n fn main() {}"}, {"sha": "fbe6279ca92267a076c6bc2b82284957d99b2a35", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -1,28 +1,28 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Alpha::V3::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Alpha::V3::{{constant}}#0`\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Alpha::V3::{{constant}}#0`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n-note: ...which requires const-evaluating `Alpha::V3::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    = note: ...which requires computing layout of `Alpha`...\n-   = note: ...which again requires const-evaluating + checking `Alpha::V3::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Alpha::V3::{{constant}}#0`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/self-in-enum-definition.rs:1:1\n    |\n LL | / #[repr(u8)]\n LL | | enum Alpha {\n LL | |     V1 = 41,\n-LL | |     V2 = Self::V1 as u8 + 1, // OK; See #50072.\n+LL | |     V2 = Self::V1 as u8 + 1,    // OK; See #50072.\n ...  |\n LL | |\n LL | | fn main() {}"}, {"sha": "789919bd1668d2949ddf245708434ceebc20ecaa", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b9adff463455743291b0c1f76feec092992/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=5e449b9adff463455743291b0c1f76feec092992", "patch": "@@ -4,23 +4,19 @@ error[E0080]: could not evaluate static initializer\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^ modifying a static's initial value from another static's initializer\n \n-error[E0391]: cycle detected when const-evaluating `C`\n+error[E0391]: cycle detected when const-evaluating + checking `C`\n   --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `C`...\n-  --> $DIR/write-to-static-mut-in-static.rs:5:1\n-   |\n-LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating `C`, completing the cycle\n-note: cycle used when const-evaluating + checking `C`\n+note: ...which requires const-evaluating + checking `C`...\n   --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `C`, completing the cycle\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to 2 previous errors\n "}]}