{"sha": "6d13c9025611cf904c0ef209dfad3d0d29fd7d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTNjOTAyNTYxMWNmOTA0YzBlZjIwOWRmYWQzZDBkMjlmZDdkNWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-06T23:08:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-06T23:08:33Z"}, "message": "librustc: Stop loading enum variant discriminants from memory", "tree": {"sha": "348076ada82df2ea2904aee31a9e5525c2edbf0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348076ada82df2ea2904aee31a9e5525c2edbf0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a", "html_url": "https://github.com/rust-lang/rust/commit/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34f871ddac7bc84366b25c89d0a69926cb069e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34f871ddac7bc84366b25c89d0a69926cb069e0", "html_url": "https://github.com/rust-lang/rust/commit/b34f871ddac7bc84366b25c89d0a69926cb069e0"}], "stats": {"total": 27, "additions": 3, "deletions": 24}, "files": [{"sha": "30004dcfdcad9b209cc60cc12dcf15e720f6f683", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6d13c9025611cf904c0ef209dfad3d0d29fd7d5a", "patch": "@@ -813,27 +813,6 @@ pub fn get_discrim_val(cx: @crate_ctxt, span: span, enum_did: ast::def_id,\n     }\n }\n \n-pub fn lookup_discriminant(ccx: @crate_ctxt, vid: ast::def_id) -> ValueRef {\n-    unsafe {\n-        let _icx = ccx.insn_ctxt(\"lookup_discriminant\");\n-        match ccx.discrims.find(&vid) {\n-            None => {\n-                // It's an external discriminant that we haven't seen yet.\n-                assert (vid.crate != ast::local_crate);\n-                let sym = csearch::get_symbol(ccx.sess.cstore, vid);\n-                let gvar = str::as_c_str(sym, |buf| {\n-                    llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n-                });\n-                lib::llvm::SetLinkage(gvar, lib::llvm::ExternalLinkage);\n-                llvm::LLVMSetGlobalConstant(gvar, True);\n-                ccx.discrims.insert(vid, gvar);\n-                return gvar;\n-            }\n-            Some(llval) => return llval,\n-        }\n-    }\n-}\n-\n pub fn invoke(bcx: block, llfn: ValueRef, +llargs: ~[ValueRef]) -> block {\n     let _icx = bcx.insn_ctxt(\"invoke_\");\n     if bcx.unreachable { return bcx; }"}, {"sha": "56833d373c5cd89b158ce635dffbdba6dea2c214", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d13c9025611cf904c0ef209dfad3d0d29fd7d5a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6d13c9025611cf904c0ef209dfad3d0d29fd7d5a", "patch": "@@ -696,15 +696,15 @@ fn trans_def_dps_unadjusted(bcx: block, ref_expr: @ast::expr,\n             return fn_data_to_datum(bcx, impl_did, fn_data, lldest);\n         }\n         ast::def_variant(tid, vid) => {\n-            if ty::enum_variant_with_id(ccx.tcx, tid, vid).args.len() > 0u {\n+            let variant_info = ty::enum_variant_with_id(ccx.tcx, tid, vid);\n+            if variant_info.args.len() > 0u {\n                 // N-ary variant.\n                 let fn_data = callee::trans_fn_ref(bcx, vid, ref_expr.id);\n                 return fn_data_to_datum(bcx, vid, fn_data, lldest);\n             } else {\n                 // Nullary variant.\n                 let lldiscrimptr = GEPi(bcx, lldest, [0u, 0u]);\n-                let lldiscrim_gv = base::lookup_discriminant(ccx, vid);\n-                let lldiscrim = Load(bcx, lldiscrim_gv);\n+                let lldiscrim = C_int(bcx.ccx(), variant_info.disr_val);\n                 Store(bcx, lldiscrim, lldiscrimptr);\n                 return bcx;\n             }"}]}