{"sha": "93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDE1Yjk0ODA0ZDI2MmJlMjJmMDQzYzNkZDlmNjZlM2NlNWEyZmE=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-04T05:54:19Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:05:04Z"}, "message": "Put lazy normalization behind a feature gate", "tree": {"sha": "07bb1d64873d9a5aadbeddb285becef8e018d09d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07bb1d64873d9a5aadbeddb285becef8e018d09d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "html_url": "https://github.com/rust-lang/rust/commit/93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef831069a7bb249f2ce5bfb8abeaac21a0e9183", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef831069a7bb249f2ce5bfb8abeaac21a0e9183", "html_url": "https://github.com/rust-lang/rust/commit/3ef831069a7bb249f2ce5bfb8abeaac21a0e9183"}], "stats": {"total": 274, "additions": 207, "deletions": 67}, "files": [{"sha": "f075988099b9e0d54c5f0353083c55bb6320922e", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -558,6 +558,9 @@ declare_features! (\n \n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n+    \n+    /// Lazily evaluate constants. Which allows constants to depend on type parameters.\n+    (active, lazy_normalization_consts, \"1.44.0\", Some(60471), None),\n \n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n@@ -581,4 +584,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::raw_dylib,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n+    sym::lazy_normalization_consts,\n ];"}, {"sha": "415e3262c50932852e0452ddf4a06164699c2b50", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -164,11 +164,15 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n-            (ty::ConstKind::Unevaluated(..), _) => {\n+            (ty::ConstKind::Unevaluated(..), _)\n+                if self.tcx.features().lazy_normalization_consts =>\n+            {\n                 relation.const_equate_obligation(a, b);\n                 return Ok(b);\n             }\n-            (_, ty::ConstKind::Unevaluated(..)) => {\n+            (_, ty::ConstKind::Unevaluated(..))\n+                if self.tcx.features().lazy_normalization_consts =>\n+            {\n                 relation.const_equate_obligation(a, b);\n                 return Ok(a);\n             }\n@@ -658,14 +662,16 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) => Ok(c),\n+            ty::ConstKind::Unevaluated(..) if self.tcx().features().lazy_normalization_consts => {\n+                Ok(c)\n+            }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n }\n \n pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n-    /// Register am obligation that both constants must be equal to each other.\n+    /// Register an obligation that both constants must be equal to each other.\n     ///\n     /// If they aren't equal then the relation doesn't hold.\n     fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);"}, {"sha": "e3cafb82719dd4e714dae122c8976b175b03c40f", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,4 +1,4 @@\n-use super::combine::{CombineFields, RelationDir, ConstEquateRelation};\n+use super::combine::{CombineFields, ConstEquateRelation, RelationDir};\n use super::Subtype;\n \n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};"}, {"sha": "58acca7004154d91670eedfa6752d6a5bfdb7e03", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -988,7 +988,9 @@ where\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) => Ok(a),\n+            ty::ConstKind::Unevaluated(..) if self.tcx().features().lazy_normalization_consts => {\n+                Ok(a)\n+            }\n             _ => relate::super_relate_consts(self, a, a),\n         }\n     }"}, {"sha": "914b6d1d29e9c907d5975d0b3d14f27c3686adfe", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -431,18 +431,20 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             let t = relation.relate(&a_t, &b_t)?;\n             match relation.relate(&sz_a, &sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n+                // FIXME(lazy_normalization_consts) Implement improved diagnostics for mismatched array\n+                //  length?\n+                Err(err) if relation.tcx().features().lazy_normalization_consts => Err(err),\n                 Err(err) => {\n-                    //                    // Check whether the lengths are both concrete/known values,\n-                    //                    // but are unequal, for better diagnostics.\n-                    //                    let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n-                    //                    let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n-                    //                    match (sz_a, sz_b) {\n-                    //                        (Some(sz_a_val), Some(sz_b_val)) => Err(TypeError::FixedArraySize(\n-                    //                            expected_found(relation, &sz_a_val, &sz_b_val),\n-                    //                        )),\n-                    //                        _ => Err(err),\n-                    //                    }\n-                    Err(err)\n+                    // Check whether the lengths are both concrete/known values,\n+                    // but are unequal, for better diagnostics.\n+                    let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n+                    let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n+                    match (sz_a, sz_b) {\n+                        (Some(sz_a_val), Some(sz_b_val)) => Err(TypeError::FixedArraySize(\n+                            expected_found(relation, &sz_a_val, &sz_b_val),\n+                        )),\n+                        _ => Err(err),\n+                    }\n                 }\n             }\n         }\n@@ -605,14 +607,14 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         }\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n-        // (\n-        //     ty::ConstKind::Unevaluated(a_def_id, a_substs, a_promoted),\n-        //     ty::ConstKind::Unevaluated(b_def_id, b_substs, b_promoted),\n-        // ) if a_def_id == b_def_id && a_promoted == b_promoted => {\n-        //     let substs =\n-        //         relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n-        //     Ok(ty::ConstKind::Unevaluated(a_def_id, &substs, a_promoted))\n-        // }\n+        (\n+            ty::ConstKind::Unevaluated(a_def_id, a_substs, a_promoted),\n+            ty::ConstKind::Unevaluated(b_def_id, b_substs, b_promoted),\n+        ) if a_def_id == b_def_id && a_promoted == b_promoted => {\n+            let substs =\n+                relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n+            Ok(ty::ConstKind::Unevaluated(a_def_id, &substs, a_promoted))\n+        }\n         _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n     };\n     new_const_val.map(|val| tcx.mk_const(ty::Const { val, ty: a.ty }))"}, {"sha": "f02659cdb994b4b9b2a1ef1fd4203a51acb63fce", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -870,7 +870,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-        \"keep hygiene data after analysis (default: no)\"),\n+        \"lazily evaluate constants (experimental)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n     link_only: bool = (false, parse_bool, [TRACKED],"}, {"sha": "e4318c65050a17aab5c82d22b495f361a225bb15", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -411,6 +411,7 @@ symbols! {\n         label_break_value,\n         lang,\n         lang_items,\n+        lazy_normalization_consts,\n         let_chains,\n         lhs,\n         lib,"}, {"sha": "676cb68f60e2d510f295355b12c54f2d6fd62e69", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -386,6 +386,15 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             _ => ty,\n         }\n     }\n+\n+    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        if self.selcx.tcx().features().lazy_normalization_consts {\n+            constant\n+        } else {\n+            let constant = constant.super_fold_with(self);\n+            constant.eval(self.selcx.tcx(), self.param_env)\n+        }\n+    }\n }\n \n /// The guts of `normalize`: normalize a specific projection like `<T"}, {"sha": "3b985a4b150faa7b447cb7b764d82b28ac805b46", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -201,4 +201,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             _ => ty,\n         }\n     }\n+\n+    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        let constant = constant.super_fold_with(self);\n+        constant.eval(self.infcx.tcx, self.param_env)\n+    }\n }"}, {"sha": "55ba008e35961821d20180b93161739f675c69ec", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1156,8 +1156,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n     let node = tcx.hir().get(hir_id);\n     let parent_def_id = match node {\n-        Node::AnonConst(_)\n-        | Node::ImplItem(_)\n+        Node::ImplItem(_)\n         | Node::TraitItem(_)\n         | Node::Variant(_)\n         | Node::Ctor(..)\n@@ -1166,6 +1165,15 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(tcx.hir().local_def_id(parent_id).to_def_id())\n         }\n \n+        Node::AnonConst(_) => {\n+            if tcx.features().lazy_normalization_consts {\n+                let parent_id = tcx.hir().get_parent_item(hir_id);\n+                Some(tcx.hir().local_def_id(parent_id))\n+            } else {\n+                None\n+            }\n+        }\n+\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n             Some(tcx.closure_base_def_id(def_id))\n         }"}, {"sha": "9e32687787ba6714836fb12bce0a98685156afe6", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,5 +1,6 @@\n-#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete\n \n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);"}, {"sha": "8a1ffe1806237e926919edf0f5ffcaad91849471", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -7,16 +7,22 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/array-size-in-generic-struct-param.rs:3:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:5:38\n+  --> $DIR/array-size-in-generic-struct-param.rs:7:38\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                      ^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:14:5\n+  --> $DIR/array-size-in-generic-struct-param.rs:16:5\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "915781bc0fc40ce26879a9712760575983a56c18", "filename": "src/test/ui/const-generics/issues/issue-61336-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,5 +1,6 @@\n-#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete\n \n // build-pass\n "}, {"sha": "934831f91ad9bebc104be10535a5df7196539eb0", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,5 +1,6 @@\n-#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; { N }]"}, {"sha": "3e169f6592f1684fa5b02c8f43b668a70696a01f", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -7,6 +7,12 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336-2.rs:3:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-61336-2.rs:9:5\n    |"}, {"sha": "6baee0c0a7f181f112cf325a87443ededb0f404d", "filename": "src/test/ui/const-generics/issues/issue-61336.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,5 +1,7 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; N]"}, {"sha": "d619226a854d5811e474b6dc274fd2cad19079f4", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -7,6 +7,12 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336.rs:3:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-61336.rs:9:5\n    |"}, {"sha": "0e185b53c19476f83f37b8a485d9cad2c2cb6b64", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -2,6 +2,8 @@\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete\n \n struct Const<const N: usize>;\n "}, {"sha": "8f4c389bb04e4e2151812e86a25c9ec45dbecf75", "filename": "src/test/ui/const-generics/issues/issue-61747.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -7,5 +7,13 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n+<<<<<<< HEAD\n warning: 1 warning emitted\n+=======\n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61747.rs:5:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+>>>>>>> Added `lazy_normalization_consts` feature, and removed the -Z flag.\n "}, {"sha": "445862cccdd897d84d82ab60ce1d8df3111f6677", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -2,6 +2,8 @@\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n \n trait Foo {}\n "}, {"sha": "0cc620738c7144cb0f9620ab47a6ed4268fe7b0e", "filename": "src/test/ui/const-generics/issues/issue-61935.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -6,3 +6,9 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61935.rs:5:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "76bde1815be18e10ec6e3472099a459a58cc3b56", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,5 +1,6 @@\n #![allow(incomplete_features, dead_code, unconditional_recursion)]\n #![feature(const_generics)]\n+#![feature(lazy_normalization_consts)]\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();"}, {"sha": "664dbaeb0679121cdad711a08227e7447a6152b4", "filename": "src/test/ui/const-generics/issues/issue-67185-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -2,6 +2,8 @@\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n \n trait Baz {\n     type Quaks;"}, {"sha": "257949340d0f081bb9a27e25ca2e9e47eb433fea", "filename": "src/test/ui/const-generics/issues/issue-67185-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -6,3 +6,9 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-67185-1.rs:5:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "52c8a5c9de809aa3d0eba59fad597ce213b44b39", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -1,5 +1,7 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n \n trait Baz {\n     type Quaks;\n@@ -12,7 +14,8 @@ trait Bar {}\n impl Bar for [u16; 4] {}\n impl Bar for [[u16; 3]; 3] {}\n \n-trait Foo  //~ ERROR mismatched types\n+trait Foo  //~ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n+           //~^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n     where\n         [<u8 as Baz>::Quaks; 2]: Bar,\n         <u8 as Baz>::Quaks: Bar,\n@@ -22,12 +25,12 @@ trait Foo  //~ ERROR mismatched types\n struct FooImpl;\n \n impl Foo for FooImpl {}\n-//~^ ERROR mismatched types\n-//~^^ ERROR mismatched types\n+//~^ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n+//~^^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n \n fn f(_: impl Foo) {}\n-//~^ ERROR mismatched types\n-//~^^ ERROR mismatched types\n+//~^ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n+//~^^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n \n fn main() {\n     f(FooImpl)"}, {"sha": "c8620fc268ffb456ecf5fd077c1dd691bf377d20", "filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 79, "deletions": 29, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93d15b94804d262be22f043c3dd9f66e3ce5a2fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "patch": "@@ -6,56 +6,106 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-67185-2.rs:15:1\n+warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-67185-2.rs:3:12\n+   |\n+LL | #![feature(lazy_normalization_consts)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:17:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:17:1\n    |\n LL | / trait Foo\n+LL | |\n LL | |     where\n LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n LL | |         <u8 as Baz>::Quaks: Bar,\n LL | | {\n LL | | }\n-   | |_^ expected `3usize`, found `4usize`\n+   | |_^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n-   = note: expected type `3usize`\n-              found type `4usize`\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-67185-2.rs:24:6\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:27:6\n    |\n LL | impl Foo for FooImpl {}\n-   |      ^^^ expected `3usize`, found `4usize`\n+   |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n-   = note: expected type `3usize`\n-              found type `4usize`\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-67185-2.rs:24:6\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:27:6\n    |\n LL | impl Foo for FooImpl {}\n-   |      ^^^ expected `2usize`, found `3usize`\n+   |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n-   = note: expected type `2usize`\n-              found type `3usize`\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-67185-2.rs:28:1\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:31:14\n    |\n-LL | fn f(_: impl Foo) {}\n-   | ^^^^^^^^^^^^^^^^^^^^ expected `2usize`, found `3usize`\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_- required by `Foo`\n+...\n+LL |   fn f(_: impl Foo) {}\n+   |                ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n-   = note: expected type `2usize`\n-              found type `3usize`\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-67185-2.rs:28:1\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:31:14\n    |\n-LL | fn f(_: impl Foo) {}\n-   | ^^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `4usize`\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_- required by `Foo`\n+...\n+LL |   fn f(_: impl Foo) {}\n+   |                ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n-   = note: expected type `3usize`\n-              found type `4usize`\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0277`."}]}