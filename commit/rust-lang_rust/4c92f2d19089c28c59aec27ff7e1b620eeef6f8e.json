{"sha": "4c92f2d19089c28c59aec27ff7e1b620eeef6f8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTJmMmQxOTA4OWMyOGM1OWFlYzI3ZmY3ZTFiNjIwZWVlZjZmOGU=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T08:12:15Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T08:12:15Z"}, "message": "Add more pattern tests", "tree": {"sha": "37701bc5cbf0ecd59410a7d1bf75080c491eb2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37701bc5cbf0ecd59410a7d1bf75080c491eb2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e", "html_url": "https://github.com/rust-lang/rust/commit/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "396167eadbea168e0d9858b5f45b7db860873f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/396167eadbea168e0d9858b5f45b7db860873f8b", "html_url": "https://github.com/rust-lang/rust/commit/396167eadbea168e0d9858b5f45b7db860873f8b"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "25be0c307f0f9677b3aafd7bcda7ed62bbca8057", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=4c92f2d19089c28c59aec27ff7e1b620eeef6f8e", "patch": "@@ -6,10 +6,6 @@ use ra_syntax::{\n     SyntaxNode, SyntaxToken,\n };\n \n-pub(crate) fn inside_impl(element: SyntaxElement) -> bool {\n-    element.ancestors().find(|it| it.kind() == IMPL_DEF).is_some()\n-}\n-\n pub(crate) fn inside_trait(element: SyntaxElement) -> bool {\n     element.ancestors().find(|it| it.kind() == TRAIT_DEF).is_some()\n }\n@@ -42,10 +38,6 @@ pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n }\n \n-pub(crate) fn has_item_list_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element).filter(|it| it.kind() == ITEM_LIST).is_some()\n-}\n-\n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT_DEF).is_some()\n }\n@@ -122,8 +114,8 @@ fn previous_sibling_or_ancestor_sibling(element: SyntaxElement) -> Option<Syntax\n #[cfg(test)]\n mod tests {\n     use super::{\n-        has_block_expr_parent, has_impl_as_prev_sibling, has_trait_as_prev_sibling, if_is_prev,\n-        inside_trait, unsafe_is_prev,\n+        has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_ref_pat_parent,\n+        has_trait_as_prev_sibling, if_is_prev, inside_trait, unsafe_is_prev,\n     };\n     use crate::completion::test_utils::check_pattern_is_applicable;\n \n@@ -193,4 +185,51 @@ mod tests {\n             has_block_expr_parent,\n         );\n     }\n+\n+    #[test]\n+    fn test_has_ref_pat_parent_in_func_parameters() {\n+        check_pattern_is_applicable(\n+            r\"\n+        fn my_fn(&<|>) {\n+            let a = 2;\n+        }\n+        \",\n+            has_ref_pat_parent,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_has_ref_pat_parent_in_let_statement() {\n+        check_pattern_is_applicable(\n+            r\"\n+        fn my_fn() {\n+            let &<|>\n+        }\n+        \",\n+            has_ref_pat_parent,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_has_bind_pat_parent_in_func_parameters() {\n+        check_pattern_is_applicable(\n+            r\"\n+        fn my_fn(m<|>) {\n+        }\n+        \",\n+            has_bind_pat_parent,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_has_bind_pat_parent_in_let_statement() {\n+        check_pattern_is_applicable(\n+            r\"\n+        fn my_fn() {\n+            let m<|>\n+        }\n+        \",\n+            has_bind_pat_parent,\n+        );\n+    }\n }"}, {"sha": "f439f974d4c2293edb5dac00d4638ce56cc90b76", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c92f2d19089c28c59aec27ff7e1b620eeef6f8e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=4c92f2d19089c28c59aec27ff7e1b620eeef6f8e", "patch": "@@ -6,7 +6,7 @@ use crate::{\n     CompletionItem, FilePosition,\n };\n use hir::Semantics;\n-use ra_syntax::{AstNode, NodeOrToken, SyntaxElement, SyntaxToken};\n+use ra_syntax::{AstNode, NodeOrToken, SyntaxElement};\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n     do_completion_with_options(code, kind, &CompletionConfig::default())"}]}