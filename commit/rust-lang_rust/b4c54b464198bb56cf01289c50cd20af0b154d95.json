{"sha": "b4c54b464198bb56cf01289c50cd20af0b154d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzU0YjQ2NDE5OGJiNTZjZjAxMjg5YzUwY2QyMGFmMGIxNTRkOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-10T17:21:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-10T17:21:12Z"}, "message": "Auto merge of #1143 - christianpoveda:symlink-shim, r=RalfJung\n\nAdd shim for symbolic link creation\n\nr? @RalfJung", "tree": {"sha": "3bd72113b175b35ecaf27f44eb257842e3470d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bd72113b175b35ecaf27f44eb257842e3470d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c54b464198bb56cf01289c50cd20af0b154d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c54b464198bb56cf01289c50cd20af0b154d95", "html_url": "https://github.com/rust-lang/rust/commit/b4c54b464198bb56cf01289c50cd20af0b154d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c54b464198bb56cf01289c50cd20af0b154d95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91f3794be69cf8626cfb1ce3b443f24902929fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91f3794be69cf8626cfb1ce3b443f24902929fb", "html_url": "https://github.com/rust-lang/rust/commit/a91f3794be69cf8626cfb1ce3b443f24902929fb"}, {"sha": "5e71f2debc4df0bd25d29329cd21a7c55c5dc3ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e71f2debc4df0bd25d29329cd21a7c55c5dc3ba", "html_url": "https://github.com/rust-lang/rust/commit/5e71f2debc4df0bd25d29329cd21a7c55c5dc3ba"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "deeb37da44a3f08cebb62b68d73daaa40072ac08", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4c54b464198bb56cf01289c50cd20af0b154d95/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c54b464198bb56cf01289c50cd20af0b154d95/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b4c54b464198bb56cf01289c50cd20af0b154d95", "patch": "@@ -494,11 +494,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"symlink\" => {\n+                let result = this.symlink(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"stat$INODE64\" => {\n                 let result = this.stat(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"lstat$INODE64\" => {\n+                let result = this.lstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "8a7cf9d31c0b67aba38575d1f7dd96207a68d0bb", "filename": "src/shims/fs.rs", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b4c54b464198bb56cf01289c50cd20af0b154d95/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c54b464198bb56cf01289c50cd20af0b154d95/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=b4c54b464198bb56cf01289c50cd20af0b154d95", "patch": "@@ -276,24 +276,76 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.try_unwrap_io_result(result)\n     }\n \n+    fn symlink(\n+        &mut self,\n+        target_op: OpTy<'tcx, Tag>,\n+        linkpath_op: OpTy<'tcx, Tag>\n+    ) -> InterpResult<'tcx, i32> {\n+        #[cfg(target_family = \"unix\")]\n+        fn create_link(src: PathBuf, dst: PathBuf) -> std::io::Result<()> {\n+            std::os::unix::fs::symlink(src, dst)\n+        }\n+\n+        #[cfg(target_family = \"windows\")]\n+        fn create_link(src: PathBuf, dst: PathBuf) -> std::io::Result<()> {\n+            use std::os::windows::fs;\n+            if src.is_dir() {\n+                fs::symlink_dir(src, dst)\n+            } else {\n+                fs::symlink_file(src, dst)\n+            }\n+        }\n+\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"symlink\")?;\n+\n+        let target = this.read_os_str_from_c_str(this.read_scalar(target_op)?.not_undef()?)?.into();\n+        let linkpath = this.read_os_str_from_c_str(this.read_scalar(linkpath_op)?.not_undef()?)?.into();\n+\n+        this.try_unwrap_io_result(create_link(target, linkpath).map(|_| 0))\n+    }\n+\n     fn stat(\n         &mut self,\n         path_op: OpTy<'tcx, Tag>,\n         buf_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n+        this.check_no_isolation(\"stat\")?;\n+        // `stat` always follows symlinks.\n+        this.stat_or_lstat(true, path_op, buf_op)\n+    }\n+\n+    // `lstat` is used to get symlink metadata.\n+    fn lstat(\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+        this.check_no_isolation(\"lstat\")?;\n+        this.stat_or_lstat(false, path_op, buf_op)\n+    }\n+\n+    fn stat_or_lstat(\n+        &mut self,\n+        follow_symlink: bool,\n+        path_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n \n         if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n-            throw_unsup_format!(\"The `stat` shim is only available for `macos` targets.\")\n+            throw_unsup_format!(\"The `stat` and `lstat` shims are only available for `macos` targets.\")\n         }\n \n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n         let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n \n         let buf = this.deref_operand(buf_op)?;\n \n-        // `stat` always follows symlinks. `lstat` is used to get symlink metadata.\n-        let metadata = match FileMetadata::new(this, path, true)? {\n+        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n@@ -545,7 +597,6 @@ impl FileMetadata {\n         let metadata = if follow_symlink {\n             std::fs::metadata(path)\n         } else {\n-            // FIXME: metadata for symlinks need testing.\n             std::fs::symlink_metadata(path)\n         };\n "}, {"sha": "81c56e4aafc7ee594e13a1800a40151f66e7d48d", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4c54b464198bb56cf01289c50cd20af0b154d95/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c54b464198bb56cf01289c50cd20af0b154d95/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=b4c54b464198bb56cf01289c50cd20af0b154d95", "patch": "@@ -19,7 +19,11 @@ fn main() {\n     let tmp = std::env::temp_dir();\n     let filename = PathBuf::from(\"miri_test_fs.txt\");\n     let path = tmp.join(&filename);\n+    let symlink_path = tmp.join(\"miri_test_fs_symlink.txt\");\n     let bytes = b\"Hello, World!\\n\";\n+    // Clean the paths for robustness.\n+    remove_file(&path).ok();\n+    remove_file(&symlink_path).ok();\n \n     // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n     let mut file = File::create(&path).unwrap();\n@@ -39,9 +43,23 @@ fn main() {\n     // Test that metadata of an absolute path is correct.\n     test_metadata(bytes, &path).unwrap();\n     // Test that metadata of a relative path is correct.\n-    std::env::set_current_dir(tmp).unwrap();\n+    std::env::set_current_dir(&tmp).unwrap();\n     test_metadata(bytes, &filename).unwrap();\n \n+    // Creating a symbolic link should succeed.\n+    std::os::unix::fs::symlink(&path, &symlink_path).unwrap();\n+    // Test that the symbolic link has the same contents as the file.\n+    let mut symlink_file = File::open(&symlink_path).unwrap();\n+    let mut contents = Vec::new();\n+    symlink_file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(bytes, contents.as_slice());\n+    // Test that metadata of a symbolic link is correct.\n+    test_metadata(bytes, &symlink_path).unwrap();\n+    // Test that the metadata of a symbolic link is correct when not following it.\n+    assert!(symlink_path.symlink_metadata().unwrap().file_type().is_symlink());\n+    // Removing symbolic link should succeed.\n+    remove_file(&symlink_path).unwrap();\n+\n     // Removing file should succeed.\n     remove_file(&path).unwrap();\n "}]}