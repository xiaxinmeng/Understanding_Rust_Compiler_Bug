{"sha": "f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MTFiMjFkYmFiZmVlNDRmM2Y2OWY0ZTliY2M3OTM5YzBhZTcyZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-04T06:07:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-04T06:07:26Z"}, "message": "Auto merge of #31326 - sdleffler:master, r=nikomatsakis\n\nAfter the truly incredible and embarrassing mess I managed to make in my last pull request, this should be a bit less messy.\n\nFixes #31267 - with this change, the code mentioned in the issue compiles.\n\nFound and fixed another issue as well - constants of zero-size types, when used in ExprRepeats inside associated constants, were causing the compiler to crash at the same place as #31267. An example of this:\n```\n\nstruct Bar;\n\nconst BAZ: Bar = Bar;\n\nstruct Foo([Bar; 1]);\n\nstruct Biz;\n\nimpl Biz {\n    const BAZ: Foo = Foo([BAZ; 1]);\n}\n\nfn main() {\n    let foo = Biz::BAZ;\n    println!(\"{:?}\", foo);\n}\n```\nHowever, I'm fairly certain that my fix for this is not as elegant as it could be. The problem seems to occur only with an associated constant of a tuple struct containing a fixed size array which is initialized using a repeat expression, and when the element to be repeated provided to the repeat expression is another constant which is of a zero-sized type. The fix works by looking for constants and associated constants which are zero-width and consequently contain no data, but for which rustc is still attempting to emit an LLVM value; it simply stops rustc from attempting to emit anything. By my logic, this should work fine since the only values that are emitted in this case (according to the comments) are for closures with side effects, and constants will never have side effects, so it's fine to simply get rid of them. It fixes the error and things compile fine with it, but I have a sneaking suspicion that it could be done in a far better manner.\n\nr? @nikomatsakis", "tree": {"sha": "90e8da93770e1ed37daefa7de8bd953d92ee0d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90e8da93770e1ed37daefa7de8bd953d92ee0d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "html_url": "https://github.com/rust-lang/rust/commit/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1096e7ab7afb14257798da82a1dd6aeadcb30100", "url": "https://api.github.com/repos/rust-lang/rust/commits/1096e7ab7afb14257798da82a1dd6aeadcb30100", "html_url": "https://github.com/rust-lang/rust/commit/1096e7ab7afb14257798da82a1dd6aeadcb30100"}, {"sha": "fb00e60ab1e7d5dac3c750d0e84a70236c40a2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb00e60ab1e7d5dac3c750d0e84a70236c40a2c3", "html_url": "https://github.com/rust-lang/rust/commit/fb00e60ab1e7d5dac3c750d0e84a70236c40a2c3"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "34567c1178f4740b31f1b088e81a67800722c572", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "patch": "@@ -149,6 +149,21 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     },\n                 }\n             }\n+\n+            // If we see a const here, that's because it evaluates to a type with zero size. We\n+            // should be able to just discard it, since const expressions are guaranteed not to\n+            // have side effects. This seems to be reached through tuple struct constructors being\n+            // passed zero-size constants.\n+            if let hir::ExprPath(..) = expr.node {\n+                match bcx.def(expr.id) {\n+                    Def::Const(_) | Def::AssociatedConst(_) => {\n+                        assert!(type_is_zero_size(bcx.ccx(), bcx.tcx().node_id_to_type(expr.id)));\n+                        return bcx;\n+                    }\n+                    _ => {}\n+                }\n+            }\n+\n             // Even if we don't have a value to emit, and the expression\n             // doesn't have any side-effects, we still have to translate the\n             // body of any closures.\n@@ -160,7 +175,7 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             match expr.node {\n                 hir::ExprPath(..) => {\n                     match bcx.def(expr.id) {\n-                        Def::Const(did) => {\n+                        Def::Const(did) | Def::AssociatedConst(did) => {\n                             let empty_substs = bcx.tcx().mk_substs(Substs::trans_empty());\n                             let const_expr = consts::get_const_expr(bcx.ccx(), did, expr,\n                                                                     empty_substs);\n@@ -896,7 +911,7 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let lval = Lvalue::new(\"expr::trans_def\");\n             DatumBlock::new(bcx, Datum::new(val, const_ty, LvalueExpr(lval)))\n         }\n-        Def::Const(_) => {\n+        Def::Const(_) | Def::AssociatedConst(_) => {\n             bcx.sess().span_bug(ref_expr.span,\n                 \"constant expression should not reach expr::trans_def\")\n         }"}, {"sha": "a6b42525887869d207154583c9a753dbf718feda", "filename": "src/test/run-pass/issue-31267-additional.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/src%2Ftest%2Frun-pass%2Fissue-31267-additional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/src%2Ftest%2Frun-pass%2Fissue-31267-additional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31267-additional.rs?ref=f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+#[derive(Clone, Copy, Debug)]\n+struct Bar;\n+\n+const BAZ: Bar = Bar;\n+\n+#[derive(Debug)]\n+struct Foo([Bar; 1]);\n+\n+struct Biz;\n+\n+impl Biz {\n+    const BAZ: Foo = Foo([BAZ; 1]);\n+}\n+\n+fn main() {\n+    let foo = Biz::BAZ;\n+    println!(\"{:?}\", foo);\n+}"}, {"sha": "90eb0f6c841eeacc32699f3b16341f9bfccfc6b6", "filename": "src/test/run-pass/issue-31267.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/src%2Ftest%2Frun-pass%2Fissue-31267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb/src%2Ftest%2Frun-pass%2Fissue-31267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31267.rs?ref=f511b21dbabfee44f3f69f4e9bcc7939c0ae72eb", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #31267\n+\n+#![feature(associated_consts)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    const FOO: [i32; 3] = [0; 3];\n+}\n+\n+pub fn main() {\n+    let foo = Foo::FOO;\n+    assert_eq!(foo, [0i32, 0, 0]);\n+}"}]}