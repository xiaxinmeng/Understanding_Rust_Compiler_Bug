{"sha": "9419e9265950a16f873dbed49c715fd7ea4e08e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MTllOTI2NTk1MGExNmY4NzNkYmVkNDljNzE1ZmQ3ZWE0ZTA4ZTc=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-19T19:20:51Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-20T06:51:22Z"}, "message": "Fix TwoWaySearcher to work when used with periodic needles.\n\nThere is a check in TwoWaySearcher::new to determine whether the needle\nis periodic. This is needed because during searching when a match fails,\nwe cannot advance the position by the entire length of the needle when\nit is periodic, but can only advance by the length of the period.\n\nThe reason \"bananas\".contains(\"nana\") (and similar searches) were\nreturning false was because the periodicity check was wrong.\n\nCloses #16589", "tree": {"sha": "5e0cde488f12bf4c89d7776390977b6a352b2020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e0cde488f12bf4c89d7776390977b6a352b2020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9419e9265950a16f873dbed49c715fd7ea4e08e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9419e9265950a16f873dbed49c715fd7ea4e08e7", "html_url": "https://github.com/rust-lang/rust/commit/9419e9265950a16f873dbed49c715fd7ea4e08e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9419e9265950a16f873dbed49c715fd7ea4e08e7/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5d0b5b6cd4994c719d57a778697124348a4c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5d0b5b6cd4994c719d57a778697124348a4c1c", "html_url": "https://github.com/rust-lang/rust/commit/3f5d0b5b6cd4994c719d57a778697124348a4c1c"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "3c489719496d4d0f1d5f92f46102d6cd86b420e7", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9419e9265950a16f873dbed49c715fd7ea4e08e7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9419e9265950a16f873dbed49c715fd7ea4e08e7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9419e9265950a16f873dbed49c715fd7ea4e08e7", "patch": "@@ -419,6 +419,8 @@ struct TwoWaySearcher {\n     memory: uint\n }\n \n+// This is the Two-Way search algorithm, which was introduced in the paper:\n+// Crochemore, M., Perrin, D., 1991, Two-way string-matching, Journal of the ACM 38(3):651-675.\n impl TwoWaySearcher {\n     fn new(needle: &[u8]) -> TwoWaySearcher {\n         let (critPos1, period1) = TwoWaySearcher::maximal_suffix(needle, false);\n@@ -437,7 +439,10 @@ impl TwoWaySearcher {\n         let byteset = needle.iter()\n                             .fold(0, |a, &b| (1 << ((b & 0x3f) as uint)) | a);\n \n-        if needle.slice_to(critPos) == needle.slice_from(needle.len() - critPos) {\n+        // Check if the needle is periodic. If so, during searching when we\n+        // find a mismatch, we must only advance the position by the length\n+        // of the period, not the length of the entire needle\n+        if needle.slice_to(critPos) == needle.slice(period, period + critPos) {\n             TwoWaySearcher {\n                 critPos: critPos,\n                 period: period,"}, {"sha": "be2275dcd4a0266ba277cf7065347262abacdbac", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9419e9265950a16f873dbed49c715fd7ea4e08e7/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9419e9265950a16f873dbed49c715fd7ea4e08e7/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=9419e9265950a16f873dbed49c715fd7ea4e08e7", "patch": "@@ -8,7 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn check_contains_all_substrings(s: &str) {\n+    assert!(s.contains(\"\"));\n+    for i in range(0, s.len()) {\n+        for j in range(i+1, s.len() + 1) {\n+            assert!(s.contains(s.slice(i, j)));\n+        }\n+    }\n+}\n+\n #[test]\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n+\n+    // prior to the fix for #16589, x.contains(\"abcdabcd\") returned false\n+    // test all substrings for good measure\n+    check_contains_all_substrings(\"012345678901234567890123456789bcdabcdabcd\");\n+}\n+\n+\n+#[test]\n+fn test_strslice_contains() {\n+    let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n+    check_contains_all_substrings(x);\n }"}]}