{"sha": "4ba1928fa2aa73abeb541dad7d72bda94509d113", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTE5MjhmYTJhYTczYWJlYjU0MWRhZDdkNzJiZGE5NDUwOWQxMTM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-12-26T13:03:33Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-02T18:16:27Z"}, "message": "Improve code for DocFragment rework", "tree": {"sha": "c7b58d8fcacc6e4bcfba45cab0b4e1704a63869c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b58d8fcacc6e4bcfba45cab0b4e1704a63869c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba1928fa2aa73abeb541dad7d72bda94509d113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba1928fa2aa73abeb541dad7d72bda94509d113", "html_url": "https://github.com/rust-lang/rust/commit/4ba1928fa2aa73abeb541dad7d72bda94509d113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba1928fa2aa73abeb541dad7d72bda94509d113/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab6c90699e5fc70ee0a9bfe369bc356f05127f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab6c90699e5fc70ee0a9bfe369bc356f05127f9", "html_url": "https://github.com/rust-lang/rust/commit/0ab6c90699e5fc70ee0a9bfe369bc356f05127f9"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "8d5ef1ed28c82abc9b7af6fea3e5e8fd2f0ab88e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4ba1928fa2aa73abeb541dad7d72bda94509d113", "patch": "@@ -486,6 +486,13 @@ crate enum DocFragmentKind {\n     Include { filename: Symbol },\n }\n \n+// The goal of this function is to apply the `DocFragment` transformations that are required when\n+// transforming into the final markdown. So the transformations in here are:\n+//\n+// * Applying the computed indent to each lines in each doc fragment (a `DocFragment` can contain\n+//   multiple lines in case of `#[doc = \"\"]`).\n+// * Adding backlines between `DocFragment`s and adding an extra one if required (stored in the\n+//   `need_backline` field).\n fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\n     let s = frag.doc.as_str();\n     let mut iter = s.lines().peekable();\n@@ -792,11 +799,14 @@ impl Attributes {\n         if out.is_empty() { None } else { Some(out) }\n     }\n \n+    /// Return the doc-comments on this item, grouped by the module they came from.\n+    ///\n+    /// The module can be different if this is a re-export with added documentation.\n     crate fn collapsed_doc_value_by_module_level(&self) -> FxHashMap<Option<DefId>, String> {\n         let mut ret = FxHashMap::default();\n \n         for new_frag in self.doc_strings.iter() {\n-            let out = ret.entry(new_frag.parent_module).or_insert_with(|| String::new());\n+            let out = ret.entry(new_frag.parent_module).or_default();\n             add_doc_fragment(out, &new_frag);\n         }\n         ret\n@@ -805,8 +815,7 @@ impl Attributes {\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n     /// with newlines.\n     crate fn collapsed_doc_value(&self) -> Option<String> {\n-        let s: String = self.doc_strings.iter().collect();\n-        if s.is_empty() { None } else { Some(s) }\n+        if self.doc_strings.is_empty() { None } else { Some(self.doc_strings.iter().collect()) }\n     }\n \n     /// Gets links as a vector"}, {"sha": "c1f8b12cac497315533a109957c2597f14ab9e7a", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=4ba1928fa2aa73abeb541dad7d72bda94509d113", "patch": "@@ -314,10 +314,9 @@ impl DocFolder for Cache {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: item.doc_value().map_or_else(\n-                                || String::new(),\n-                                |x| short_markdown_summary(&x.as_str()),\n-                            ),\n+                            desc: item\n+                                .doc_value()\n+                                .map_or_else(String::new, |x| short_markdown_summary(&x.as_str())),\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),"}, {"sha": "1c713df927637f4f1c5ed5792dc5ccdba345e012", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4ba1928fa2aa73abeb541dad7d72bda94509d113", "patch": "@@ -198,11 +198,7 @@ impl SharedContext<'_> {\n     /// Based on whether the `collapse-docs` pass was run, return either the `doc_value` or the\n     /// `collapsed_doc_value` of the given item.\n     crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n-        if self.collapsed {\n-            item.collapsed_doc_value().map(|s| s.to_string())\n-        } else {\n-            item.doc_value().map(|s| s.to_string())\n-        }\n+        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n     }\n }\n \n@@ -2196,7 +2192,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 let stab = myitem.stability_class(cx.tcx());\n                 let add = if stab.is_some() { \" \" } else { \"\" };\n \n-                let doc_value = myitem.doc_value().unwrap_or_else(String::new);\n+                let doc_value = myitem.doc_value().unwrap_or_default();\n                 write!(\n                     w,\n                     \"<tr class=\\\"{stab}{add}module-item\\\">\\"}, {"sha": "05a3a15adac800f127d2f064ea41af7a1eb1e047", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba1928fa2aa73abeb541dad7d72bda94509d113/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=4ba1928fa2aa73abeb541dad7d72bda94509d113", "patch": "@@ -235,12 +235,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 let mut tests = Tests { found_tests: 0 };\n \n                 find_testable_code(\n-                    &i.attrs\n-                        .doc_strings\n-                        .iter()\n-                        .map(|d| d.doc.to_string())\n-                        .collect::<Vec<_>>()\n-                        .join(\"\\n\"),\n+                    &i.attrs.collapsed_doc_value().unwrap_or_default(),\n                     &mut tests,\n                     ErrorCodes::No,\n                     false,"}]}