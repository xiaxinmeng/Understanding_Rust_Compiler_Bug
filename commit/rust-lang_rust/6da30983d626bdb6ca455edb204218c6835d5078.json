{"sha": "6da30983d626bdb6ca455edb204218c6835d5078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTMwOTgzZDYyNmJkYjZjYTQ1NWVkYjIwNDIxOGM2ODM1ZDUwNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-08T00:40:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-08T00:40:53Z"}, "message": "Rollup merge of #62356 - soc:topic/contains, r=Centril\n\nImplement Option::contains and Result::contains\n\nThis increases consistency with other common data structures.", "tree": {"sha": "18f9b1343c53b9842b1dc3bf22990eb1240c7658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f9b1343c53b9842b1dc3bf22990eb1240c7658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da30983d626bdb6ca455edb204218c6835d5078", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIpEVCRBK7hj4Ov3rIwAAdHIIAGTk0+SSPCcez5yLL0kvanHE\nQAhvAl4V0Dyt3PrNsa7elj1bT0FQaZHAGJ144MSDSByNt8zqV7J8oO9dbHDSweMW\nTI2aCWVcc1Nln9UrERIe5Ou58PbG4LmNYwOopZ2ynsKRUoW9l47BxQ4tQPM8MCV8\nhCHc19YApnWSn+dJJUL05wQ9T4G+qycQl4xg5xXxNVIivpelRkBkiV/E4QnSJVV0\nSJ/Crw9UVNG/Is6LjbIXPpTV8EPj8Bzw+lEf2tfL7ZscD+lqs3l0LyxxrgyaopRi\nHzCm1KRyATgT5p8p8aN0eff8FKERDgfsW2Uhmm6SwCa6o7ah19fyIkBKqVSlhCY=\n=cjoc\n-----END PGP SIGNATURE-----\n", "payload": "tree 18f9b1343c53b9842b1dc3bf22990eb1240c7658\nparent 6e310f2abae97323ca1d5469657b83aa1a9407e0\nparent 6f76da494b4b89839cd9a1a13e725ec5cdd83743\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562546453 +0200\ncommitter GitHub <noreply@github.com> 1562546453 +0200\n\nRollup merge of #62356 - soc:topic/contains, r=Centril\n\nImplement Option::contains and Result::contains\n\nThis increases consistency with other common data structures.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da30983d626bdb6ca455edb204218c6835d5078", "html_url": "https://github.com/rust-lang/rust/commit/6da30983d626bdb6ca455edb204218c6835d5078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da30983d626bdb6ca455edb204218c6835d5078/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e310f2abae97323ca1d5469657b83aa1a9407e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e310f2abae97323ca1d5469657b83aa1a9407e0", "html_url": "https://github.com/rust-lang/rust/commit/6e310f2abae97323ca1d5469657b83aa1a9407e0"}, {"sha": "6f76da494b4b89839cd9a1a13e725ec5cdd83743", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f76da494b4b89839cd9a1a13e725ec5cdd83743", "html_url": "https://github.com/rust-lang/rust/commit/6f76da494b4b89839cd9a1a13e725ec5cdd83743"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "29169951e469d47b569dc5b357bfabbcf342a246", "filename": "src/libcore/option.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6da30983d626bdb6ca455edb204218c6835d5078/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da30983d626bdb6ca455edb204218c6835d5078/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6da30983d626bdb6ca455edb204218c6835d5078", "patch": "@@ -208,6 +208,32 @@ impl<T> Option<T> {\n         !self.is_some()\n     }\n \n+    /// Returns `true` if the option is a [`Some`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Option<u32> = Some(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Option<u32> = Some(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool where U: PartialEq<T> {\n+        match self {\n+            Some(y) => x == y,\n+            None => false,\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "b64ad149cf4db7ceae45dc74821b38877206c862", "filename": "src/libcore/result.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6da30983d626bdb6ca455edb204218c6835d5078/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da30983d626bdb6ca455edb204218c6835d5078/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6da30983d626bdb6ca455edb204218c6835d5078", "patch": "@@ -309,6 +309,58 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n+    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool where U: PartialEq<T> {\n+        match self {\n+            Ok(y) => x == y,\n+            Err(_) => false\n+        }\n+    }\n+\n+    /// Returns `true` if the result is an [`Err`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_contains_err)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n+    pub fn contains_err<F>(&self, f: &F) -> bool where F: PartialEq<E> {\n+        match self {\n+            Ok(_) => false,\n+            Err(e) => f == e\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////"}]}