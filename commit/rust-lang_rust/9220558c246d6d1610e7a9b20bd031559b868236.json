{"sha": "9220558c246d6d1610e7a9b20bd031559b868236", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjA1NThjMjQ2ZDZkMTYxMGU3YTliMjBiZDAzMTU1OWI4NjgyMzY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-22T13:00:19Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-22T14:49:43Z"}, "message": "Fix an issue with const inference variables sticking around under Chalk + NLL", "tree": {"sha": "b33439338549aa5516be948c11f1c741481ac125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33439338549aa5516be948c11f1c741481ac125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9220558c246d6d1610e7a9b20bd031559b868236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9220558c246d6d1610e7a9b20bd031559b868236", "html_url": "https://github.com/rust-lang/rust/commit/9220558c246d6d1610e7a9b20bd031559b868236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9220558c246d6d1610e7a9b20bd031559b868236/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ffa79589600f515ff2710830c23cd2dce7cb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ffa79589600f515ff2710830c23cd2dce7cb76", "html_url": "https://github.com/rust-lang/rust/commit/50ffa79589600f515ff2710830c23cd2dce7cb76"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "2e724ac56eee69ac5b0ff869155252dfef871906", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9220558c246d6d1610e7a9b20bd031559b868236/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9220558c246d6d1610e7a9b20bd031559b868236/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=9220558c246d6d1610e7a9b20bd031559b868236", "patch": "@@ -602,19 +602,15 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n         assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n-        match c {\n-            ty::Const { val: ConstValue::Infer(InferConst::Var(vid)), .. } => {\n+        match c.val {\n+            ConstValue::Infer(InferConst::Var(vid)) => {\n                 let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n-                match variable_table.probe_value(*vid).val.known() {\n-                    Some(u) => {\n-                        self.relate(&u, &u)\n-                    }\n+                match variable_table.probe_value(vid).val.known() {\n+                    Some(u) => self.relate(&u, &u),\n                     None => Ok(c),\n                 }\n             }\n-            _ => {\n-                relate::super_relate_consts(self, c, c)\n-            }\n+            _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n }"}, {"sha": "8d59f455cbb8db8a10ea00a83fdb7c702a5c4d1f", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9220558c246d6d1610e7a9b20bd031559b868236/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9220558c246d6d1610e7a9b20bd031559b868236/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=9220558c246d6d1610e7a9b20bd031559b868236", "patch": "@@ -27,7 +27,7 @@ use crate::ty::error::TypeError;\n use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, InferConst};\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n@@ -616,15 +616,20 @@ where\n     fn consts(\n         &mut self,\n         a: &'tcx ty::Const<'tcx>,\n-        b: &'tcx ty::Const<'tcx>,\n+        mut b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        if let ty::Const { val: ConstValue::Bound(..), .. } = a {\n-            // FIXME(const_generics): I'm unsure how this branch should actually be handled,\n-            // so this is probably not correct.\n-            self.infcx.super_combine_consts(self, a, b)\n-        } else {\n-            debug!(\"consts(a={:?}, b={:?}, variance={:?})\", a, b, self.ambient_variance);\n-            relate::super_relate_consts(self, a, b)\n+        let a = self.infcx.shallow_resolve(a);\n+\n+        if !D::forbid_inference_vars() {\n+            b = self.infcx.shallow_resolve(b);\n+        }\n+\n+        match b.val {\n+            ConstValue::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+                // Forbid inference variables in the RHS.\n+                bug!(\"unexpected inference var {:?}\", b)\n+            }\n+            _ => self.infcx.super_combine_consts(self, a, b)\n         }\n     }\n \n@@ -991,15 +996,15 @@ where\n         a: &'tcx ty::Const<'tcx>,\n         _: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"TypeGeneralizer::consts(a={:?})\", a);\n-\n-        if let ty::Const { val: ConstValue::Bound(..), .. } = a {\n-            bug!(\n-                \"unexpected inference variable encountered in NLL generalization: {:?}\",\n-                a\n-            );\n-        } else {\n-            relate::super_relate_consts(self, a, a)\n+        match a.val {\n+            ConstValue::Infer(InferConst::Var(vid)) => {\n+                let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n+                match variable_table.probe_value(vid).val.known() {\n+                    Some(u) => self.relate(&u, &u),\n+                    None => Ok(a),\n+                }\n+            }\n+            _ => relate::super_relate_consts(self, a, a),\n         }\n     }\n "}]}