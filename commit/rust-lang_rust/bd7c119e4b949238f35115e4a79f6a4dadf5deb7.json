{"sha": "bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkN2MxMTllNGI5NDkyMzhmMzUxMTVlNGE3OWY2YTRkYWRmNWRlYjc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-07T10:35:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-07T10:35:49Z"}, "message": "Rustup to rustc 1.38.0-nightly (6a91782b7 2019-08-06)", "tree": {"sha": "b513fd6402b1a35cc3987abdb8cee98f0e69a276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b513fd6402b1a35cc3987abdb8cee98f0e69a276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "html_url": "https://github.com/rust-lang/rust/commit/bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7602a46bb9421afc4e158326f438b1853503b804", "url": "https://api.github.com/repos/rust-lang/rust/commits/7602a46bb9421afc4e158326f438b1853503b804", "html_url": "https://github.com/rust-lang/rust/commit/7602a46bb9421afc4e158326f438b1853503b804"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "6d2b6ad24e803b021234041fffa3a559d9506c85", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "patch": "@@ -612,7 +612,8 @@ fn codegen_array_len<'a, 'tcx: 'a>(\n ) -> Value {\n     match place.layout().ty.sty {\n         ty::Array(_elem_ty, len) => {\n-            let len = crate::constant::force_eval_const(fx, len).unwrap_usize(fx.tcx) as i64;\n+            let len = crate::constant::force_eval_const(fx, len)\n+                .eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }\n         ty::Slice(_elem_ty) => place\n@@ -1162,7 +1163,8 @@ pub fn trans_place_projection<'a, 'tcx: 'a>(\n                 ty::Array(elem_ty, len) => {\n                     let elem_layout = fx.layout_of(elem_ty);\n                     let ptr = base.to_addr(fx);\n-                    let len = crate::constant::force_eval_const(fx, len).unwrap_usize(fx.tcx);\n+                    let len = crate::constant::force_eval_const(fx, len)\n+                        .eval_usize(fx.tcx, ParamEnv::reveal_all());\n                     CPlace::for_addr(\n                         fx.bcx.ins().iadd_imm(ptr, elem_layout.size.bytes() as i64 * from as i64),\n                         fx.layout_of(fx.tcx.mk_array(elem_ty, len - from as u64 - to as u64)),"}, {"sha": "6e087f8ca5e506b78ef1c21aa1e999249738e4fb", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "patch": "@@ -264,7 +264,7 @@ fn define_all_allocs(\n                 let const_ = tcx.const_eval(ParamEnv::reveal_all().and(cid)).unwrap();\n \n                 let alloc = match const_.val {\n-                    ConstValue::ByRef { align: _, offset, alloc } if offset.bytes() == 0 => alloc,\n+                    ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => alloc,\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n \n@@ -342,6 +342,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     type FrameExtra = ();\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n \n+    const CHECK_ALIGN: bool = true;\n     const STATIC_KIND: Option<!> = None;\n \n     fn enforce_validity(_: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "a5788bd21ac1c3cc1ab45d99569729aa2f03f8bd", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "patch": "@@ -920,7 +920,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n \n                 let idx_bytes = match idx_const.val {\n-                    ConstValue::ByRef { align: _, offset, alloc } => {\n+                    ConstValue::ByRef { alloc, offset } => {\n                         let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n                         let size = Size::from_bytes(4 * u64::from(ret_lane_count) /* size_of([u32; ret_lane_count]) */);\n                         alloc.get_bytes(fx, ptr, size).unwrap()"}, {"sha": "644ca6bc3697a29fc7e39562181429ce4a323422", "filename": "src/unsize.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7c119e4b949238f35115e4a79f6a4dadf5deb7/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=bd7c119e4b949238f35115e4a79f6a4dadf5deb7", "patch": "@@ -20,7 +20,10 @@ pub fn unsized_info<'a, 'tcx: 'a>(\n         (&ty::Array(_, len), &ty::Slice(_)) => fx\n             .bcx\n             .ins()\n-            .iconst(fx.pointer_type, len.unwrap_usize(fx.tcx) as i64),\n+            .iconst(\n+                fx.pointer_type,\n+                len.eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64,\n+            ),\n         (&ty::Dynamic(..), &ty::Dynamic(..)) => {\n             // For now, upcasts are limited to changes in marker\n             // traits, and hence never actually require an actual"}]}