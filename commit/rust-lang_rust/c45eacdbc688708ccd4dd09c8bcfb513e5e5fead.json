{"sha": "c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NWVhY2RiYzY4ODcwOGNjZDRkZDA5YzhiY2ZiNTEzZTVlNWZlYWQ=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T18:00:17Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-14T18:00:17Z"}, "message": "rustc: Add long diagnostics for E0162", "tree": {"sha": "5f6d776cecd2fde6ed87507c72438a8a525e12b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f6d776cecd2fde6ed87507c72438a8a525e12b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "html_url": "https://github.com/rust-lang/rust/commit/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a376da18b27c787818eec18ad26ba96ebdff67", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a376da18b27c787818eec18ad26ba96ebdff67", "html_url": "https://github.com/rust-lang/rust/commit/48a376da18b27c787818eec18ad26ba96ebdff67"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "d4a1dd266607121e7d87a9cf3b79ba7be02878c1", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45eacdbc688708ccd4dd09c8bcfb513e5e5fead/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c45eacdbc688708ccd4dd09c8bcfb513e5e5fead", "patch": "@@ -112,6 +112,25 @@ reference when using guards or refactor the entire expression, perhaps by\n putting the condition inside the body of the arm.\n \"##,\n \n+E0162: r##\"\n+An if-let pattern attempts to match the pattern, and enters the body if the\n+match was succesful. If the match is irrefutable (when it cannot fail to match),\n+use a regular `let`-binding instead. For instance:\n+\n+struct Irrefutable(i32);\n+let irr = Irrefutable(0);\n+\n+// This fails to compile because the match is irrefutable.\n+if let Irrefutable(x) = irr {\n+    // This body will always be executed.\n+    foo(x);\n+}\n+\n+// Try this instead:\n+let Irrefutable(x) = irr;\n+foo(x);\n+\"##,\n+\n E0297: r##\"\n Patterns used to bind names must be irrefutable. That is, they must guarantee\n that a name will be extracted in all cases. Instead of pattern matching the\n@@ -220,7 +239,6 @@ register_diagnostics! {\n     E0152,\n     E0158,\n     E0161,\n-    E0162,\n     E0165,\n     E0170,\n     E0261, // use of undeclared lifetime name"}]}