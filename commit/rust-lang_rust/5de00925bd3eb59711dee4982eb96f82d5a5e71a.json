{"sha": "5de00925bd3eb59711dee4982eb96f82d5a5e71a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTAwOTI1YmQzZWI1OTcxMWRlZTQ5ODJlYjk2ZjgyZDVhNWU3MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T19:31:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-29T19:31:03Z"}, "message": "Auto merge of #42214 - RalfJung:rust-src, r=alexcrichton\n\nrust-src: include everything needed to compile libstd with jemalloc\n\nI am not very happy about all this `Path::new`, but did not find a nice way to avoid it. Also, this shouldn't be very performance-critical.\n\nWith this patch, rust-src-1.19.0-dev.tar.gz grows from 1.4 to 3.1 MiB (new uncompressed size: 15.5 MiB). Not great, but shipping incomplete sources is also not great, and this is still much smaller than pre-#41546. Excluding the entire `src/jemalloc/test` does not work, unfortunately; there is a file in there that is needed to build libstd. (And anyway there's just 190 KiB uncompressed left in that folder.)\n\nIn principle, we could try excluding the Rust test suite directories (that would be `libcore/tests` and `libcollection/tests`). I don't know enough about how this component is used to judge whether that would cause any problems. Anyway this is just 600 KiB uncompressed.\n\nFixes #41952", "tree": {"sha": "30138a60cf957e182f70d50fe89bc35d502b726e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30138a60cf957e182f70d50fe89bc35d502b726e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de00925bd3eb59711dee4982eb96f82d5a5e71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de00925bd3eb59711dee4982eb96f82d5a5e71a", "html_url": "https://github.com/rust-lang/rust/commit/5de00925bd3eb59711dee4982eb96f82d5a5e71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de00925bd3eb59711dee4982eb96f82d5a5e71a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d78c2b483eda9538b55e2f79558032d9ccb286a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d78c2b483eda9538b55e2f79558032d9ccb286a0", "html_url": "https://github.com/rust-lang/rust/commit/d78c2b483eda9538b55e2f79558032d9ccb286a0"}, {"sha": "6620c4b0789834cf4befd47e6ed6e5a3dc224f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/6620c4b0789834cf4befd47e6ed6e5a3dc224f07", "html_url": "https://github.com/rust-lang/rust/commit/6620c4b0789834cf4befd47e6ed6e5a3dc224f07"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "a2be2cad8fbadb636d91d64d7b753bfc2323ec1f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5de00925bd3eb59711dee4982eb96f82d5a5e71a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de00925bd3eb59711dee4982eb96f82d5a5e71a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=5de00925bd3eb59711dee4982eb96f82d5a5e71a", "patch": "@@ -489,8 +489,8 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     t!(fs::remove_dir_all(&image));\n }\n \n-fn copy_src_dirs(build: &Build, src_dirs: &[&str], dst_dir: &Path) {\n-    let filter_fn = move |path: &Path| {\n+fn copy_src_dirs(build: &Build, src_dirs: &[&str], exclude_dirs: &[&str], dst_dir: &Path) {\n+    fn filter_fn(exclude_dirs: &[&str], dir: &str, path: &Path) -> bool {\n         let spath = match path.to_str() {\n             Some(path) => path,\n             None => return false,\n@@ -506,6 +506,11 @@ fn copy_src_dirs(build: &Build, src_dirs: &[&str], dst_dir: &Path) {\n             }\n         }\n \n+        let full_path = Path::new(dir).join(path);\n+        if exclude_dirs.iter().any(|excl| full_path == Path::new(excl)) {\n+            return false;\n+        }\n+\n         let excludes = [\n             \"CVS\", \"RCS\", \"SCCS\", \".git\", \".gitignore\", \".gitmodules\",\n             \".gitattributes\", \".cvsignore\", \".svn\", \".arch-ids\", \"{arch}\",\n@@ -515,13 +520,13 @@ fn copy_src_dirs(build: &Build, src_dirs: &[&str], dst_dir: &Path) {\n         !path.iter()\n              .map(|s| s.to_str().unwrap())\n              .any(|s| excludes.contains(&s))\n-    };\n+    }\n \n     // Copy the directories using our filter\n     for item in src_dirs {\n         let dst = &dst_dir.join(item);\n         t!(fs::create_dir_all(dst));\n-        cp_filtered(&build.src.join(item), dst, &filter_fn);\n+        cp_filtered(&build.src.join(item), dst, &|path| filter_fn(exclude_dirs, item, path));\n     }\n }\n \n@@ -544,6 +549,7 @@ pub fn rust_src(build: &Build) {\n         \"src/liballoc\",\n         \"src/liballoc_jemalloc\",\n         \"src/liballoc_system\",\n+        \"src/libbacktrace\",\n         \"src/libcollections\",\n         \"src/libcompiler_builtins\",\n         \"src/libcore\",\n@@ -559,9 +565,18 @@ pub fn rust_src(build: &Build) {\n         \"src/libstd_unicode\",\n         \"src/libunwind\",\n         \"src/rustc/libc_shim\",\n+        \"src/libtest\",\n+        \"src/libterm\",\n+        \"src/libgetopts\",\n+        \"src/compiler-rt\",\n+        \"src/jemalloc\",\n+    ];\n+    let std_src_dirs_exclude = [\n+        \"src/compiler-rt/test\",\n+        \"src/jemalloc/test/unit\",\n     ];\n \n-    copy_src_dirs(build, &std_src_dirs[..], &dst_src);\n+    copy_src_dirs(build, &std_src_dirs[..], &std_src_dirs_exclude[..], &dst_src);\n \n     // Create source tarball in rust-installer format\n     let mut cmd = rust_installer(build);\n@@ -608,7 +623,7 @@ pub fn plain_source_tarball(build: &Build) {\n         \"src\",\n     ];\n \n-    copy_src_dirs(build, &src_dirs[..], &plain_dst_src);\n+    copy_src_dirs(build, &src_dirs[..], &[], &plain_dst_src);\n \n     // Copy the files normally\n     for item in &src_files {"}]}