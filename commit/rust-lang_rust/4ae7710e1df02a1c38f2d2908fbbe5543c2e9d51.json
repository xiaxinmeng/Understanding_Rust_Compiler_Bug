{"sha": "4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTc3MTBlMWRmMDJhMWMzOGYyZDI5MDhmYmJlNTU0M2MyZTlkNTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-04T13:45:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-04T13:45:33Z"}, "message": "Rollup merge of #77072 - sharnoff:hash-docs, r=LukasKalbertodt\n\nMinor `hash_map` doc adjustments + item attribute orderings\n\nThis PR is really a couple visual changes glued together:\n1. Some of the doc comments for items in `std::collections::hash_map` referenced the names of types without escaping their formatting (e.g. using \"VacantEntry\" instead of \"`VacantEntry`\") - the ones I could find were changed to the latter\n2. The vast majority of pre-item attributes seem to place doc comments as the first attribute (instead of things like `#[feature(...)]`), so the few that had the other order were changed.\n3. Also ordering related: the general trend seems to be that `#[feature]` attributes follow `#[inline]`, so I swapped the two lines in places where that ordering was reversed. This is primarily a change based on stylistic continuity and aesthetics - I'm not sure how important that actually is / should be.\n\nI figured this would be pretty uncontroversial, but some of these might have been intentional for reasons I don't know about - if so, I'd be happy to remove the relevant changes. Of these, the final set of changes is probably the most unnecessary, so it also might be better to leave those out (in favor of reducing code churn).", "tree": {"sha": "69c50749b840c6df521904076221c3b09717f49f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c50749b840c6df521904076221c3b09717f49f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfedH9CRBK7hj4Ov3rIwAAdHIIAGvlJSuKRwRXwvqE8qkZhEEV\nESWlaVZaB2bjg2nLb7/Pv1LVGYD0t8gUDMfv9u0qG5mmtDfihlYHqWBh+Z6W7LVd\nabKkuNIIyh95N1Od9dC+tGE1ZWyuH7PjVHaVXp9joFjbF4FeSsxmwY9wb4mw+qBK\nI05vzj35QdT2v3oPFHWFixFbmFshJYzMjkdtQs8RWexE8GrOi5BhfObDAdD+wVDL\nOK4/BN6aitJvl4UBtML9olMvtgZAY9kl0hGPxj4BA+QKgnRPg7HK1T9ctzMaoH4g\npGBET1G7VGBGcc5eXnGxaB9U/VvGqVN2fkk+ctI5O86clPpgmnokoXSkhJy16xQ=\n=80Qg\n-----END PGP SIGNATURE-----\n", "payload": "tree 69c50749b840c6df521904076221c3b09717f49f\nparent 0d37dca25a51fb900a402c94c8818ad1c2789e30\nparent 8a011b5da2cc289fb7d970492ea4111980676412\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601819133 +0200\ncommitter GitHub <noreply@github.com> 1601819133 +0200\n\nRollup merge of #77072 - sharnoff:hash-docs, r=LukasKalbertodt\n\nMinor `hash_map` doc adjustments + item attribute orderings\n\nThis PR is really a couple visual changes glued together:\n1. Some of the doc comments for items in `std::collections::hash_map` referenced the names of types without escaping their formatting (e.g. using \"VacantEntry\" instead of \"`VacantEntry`\") - the ones I could find were changed to the latter\n2. The vast majority of pre-item attributes seem to place doc comments as the first attribute (instead of things like `#[feature(...)]`), so the few that had the other order were changed.\n3. Also ordering related: the general trend seems to be that `#[feature]` attributes follow `#[inline]`, so I swapped the two lines in places where that ordering was reversed. This is primarily a change based on stylistic continuity and aesthetics - I'm not sure how important that actually is / should be.\n\nI figured this would be pretty uncontroversial, but some of these might have been intentional for reasons I don't know about - if so, I'd be happy to remove the relevant changes. Of these, the final set of changes is probably the most unnecessary, so it also might be better to leave those out (in favor of reducing code churn).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "html_url": "https://github.com/rust-lang/rust/commit/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d37dca25a51fb900a402c94c8818ad1c2789e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d37dca25a51fb900a402c94c8818ad1c2789e30", "html_url": "https://github.com/rust-lang/rust/commit/0d37dca25a51fb900a402c94c8818ad1c2789e30"}, {"sha": "8a011b5da2cc289fb7d970492ea4111980676412", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a011b5da2cc289fb7d970492ea4111980676412", "html_url": "https://github.com/rust-lang/rust/commit/8a011b5da2cc289fb7d970492ea4111980676412"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "114707b639bcede67c771a69857307540f2a4726", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=4ae7710e1df02a1c38f2d2908fbbe5543c2e9d51", "patch": "@@ -554,8 +554,8 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// a.clear();\n     /// assert!(a.is_empty());\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n         self.base.clear();\n     }\n@@ -746,8 +746,8 @@ where\n     /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n     /// assert_eq!(map.get_key_value(&2), None);\n     /// ```\n-    #[stable(feature = \"map_get_key_value\", since = \"1.40.0\")]\n     #[inline]\n+    #[stable(feature = \"map_get_key_value\", since = \"1.40.0\")]\n     pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n     where\n         K: Borrow<Q>,\n@@ -772,8 +772,8 @@ where\n     /// assert_eq!(map.contains_key(&1), true);\n     /// assert_eq!(map.contains_key(&2), false);\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool\n     where\n         K: Borrow<Q>,\n@@ -800,8 +800,8 @@ where\n     /// }\n     /// assert_eq!(map[&1], \"b\");\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n     where\n         K: Borrow<Q>,\n@@ -834,8 +834,8 @@ where\n     /// assert_eq!(map.insert(37, \"c\"), Some(\"b\"));\n     /// assert_eq!(map[&37], \"c\");\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n         self.base.insert(k, v)\n     }\n@@ -857,8 +857,8 @@ where\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n     where\n         K: Borrow<Q>,\n@@ -886,8 +886,8 @@ where\n     /// assert_eq!(map.remove(&1), None);\n     /// # }\n     /// ```\n-    #[stable(feature = \"hash_map_remove_entry\", since = \"1.27.0\")]\n     #[inline]\n+    #[stable(feature = \"hash_map_remove_entry\", since = \"1.27.0\")]\n     pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>\n     where\n         K: Borrow<Q>,\n@@ -909,8 +909,8 @@ where\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     #[inline]\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n         F: FnMut(&K, &mut V) -> bool,\n@@ -1647,7 +1647,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n         self.base.get()\n     }\n \n-    /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n+    /// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n@@ -1676,7 +1676,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n         self.base.get_key_value_mut()\n     }\n \n-    /// Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n+    /// Converts the `OccupiedEntry` into a mutable reference to the key and value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n@@ -1714,7 +1714,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n }\n \n impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n-    /// Sets the value of the entry with the VacantEntry's key,\n+    /// Sets the value of the entry with the `VacantEntry`'s key,\n     /// and returns a mutable reference to it.\n     #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n@@ -2173,7 +2173,6 @@ where\n }\n \n impl<'a, K, V> Entry<'a, K, V> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry.\n     ///\n@@ -2191,14 +2190,14 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 6);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn or_insert(self, default: V) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n             Vacant(entry) => entry.insert(default),\n         }\n     }\n \n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the result of the default function if empty,\n     /// and returns a mutable reference to the value in the entry.\n     ///\n@@ -2215,14 +2214,14 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n             Vacant(entry) => entry.insert(default()),\n         }\n     }\n \n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n     /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n     /// which takes the key as its argument, and returns a mutable reference to the value in the\n     /// entry.\n@@ -2240,6 +2239,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n+    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n@@ -2304,7 +2304,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n-    /// Sets the value of the entry, and returns an OccupiedEntry.\n+    /// Sets the value of the entry, and returns an `OccupiedEntry`.\n     ///\n     /// # Examples\n     ///\n@@ -2331,7 +2331,6 @@ impl<'a, K, V> Entry<'a, K, V> {\n }\n \n impl<'a, K, V: Default> Entry<'a, K, V> {\n-    #[stable(feature = \"entry_or_default\", since = \"1.28.0\")]\n     /// Ensures a value is in the entry by inserting the default value if empty,\n     /// and returns a mutable reference to the value in the entry.\n     ///\n@@ -2348,6 +2347,7 @@ impl<'a, K, V: Default> Entry<'a, K, V> {\n     /// # }\n     /// ```\n     #[inline]\n+    #[stable(feature = \"entry_or_default\", since = \"1.28.0\")]\n     pub fn or_default(self) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n@@ -2452,7 +2452,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.base.get_mut()\n     }\n \n-    /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n+    /// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     ///\n     /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n@@ -2624,7 +2624,7 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n         self.base.into_key()\n     }\n \n-    /// Sets the value of the entry with the VacantEntry's key,\n+    /// Sets the value of the entry with the `VacantEntry`'s key,\n     /// and returns a mutable reference to it.\n     ///\n     /// # Examples\n@@ -2646,8 +2646,8 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n         self.base.insert(value)\n     }\n \n-    /// Sets the value of the entry with the VacantEntry's key,\n-    /// and returns an OccupiedEntry.\n+    /// Sets the value of the entry with the `VacantEntry`'s key,\n+    /// and returns an `OccupiedEntry`.\n     ///\n     /// # Examples\n     ///"}]}