{"sha": "fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "node_id": "C_kwDOAAsO6NoAKGZhZmU5ZTcxZDVjOTQ5YzQxYTVhNTYyZTQ0Y2M0MGQ3MmM1ZjcyNDQ", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-05T14:50:17Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2023-05-05T15:19:18Z"}, "message": "Normalize consistently for specializations", "tree": {"sha": "749a6445e601a5b8b6ee252a91dc23fa95cf0d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749a6445e601a5b8b6ee252a91dc23fa95cf0d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "html_url": "https://github.com/rust-lang/rust/commit/fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7", "html_url": "https://github.com/rust-lang/rust/commit/bd928a0b5e144b0fafb2f4659a83aa362de7e3c7"}], "stats": {"total": 121, "additions": 104, "deletions": 17}, "files": [{"sha": "8bbebadb22aac7ddafa40721e55dfeb4caf95c1a", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "patch": "@@ -99,14 +99,13 @@ pub fn translate_substs<'tcx>(\n                 return source_substs;\n             }\n \n-            fulfill_implication(infcx, param_env, source_trait_ref, target_impl).unwrap_or_else(\n-                |()| {\n+            fulfill_implication(infcx, param_env, source_trait_ref, source_impl, target_impl)\n+                .unwrap_or_else(|()| {\n                     bug!(\n                         \"When translating substitutions from {source_impl:?} to {target_impl:?}, \\\n                         the expected specialization failed to hold\"\n                     )\n-                },\n-            )\n+                })\n         }\n         specialization_graph::Node::Trait(..) => source_trait_ref.substs,\n     };\n@@ -153,20 +152,9 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     let infcx = tcx.infer_ctxt().build();\n-    let impl1_trait_ref =\n-        match traits::fully_normalize(&infcx, ObligationCause::dummy(), penv, impl1_trait_ref) {\n-            Ok(impl1_trait_ref) => impl1_trait_ref,\n-            Err(_errors) => {\n-                tcx.sess.delay_span_bug(\n-                    tcx.def_span(impl1_def_id),\n-                    format!(\"failed to fully normalize {impl1_trait_ref}\"),\n-                );\n-                impl1_trait_ref\n-            }\n-        };\n \n     // Attempt to prove that impl2 applies, given all of the above.\n-    fulfill_implication(&infcx, penv, impl1_trait_ref, impl2_def_id).is_ok()\n+    fulfill_implication(&infcx, penv, impl1_trait_ref, impl1_def_id, impl2_def_id).is_ok()\n }\n \n /// Attempt to fulfill all obligations of `target_impl` after unification with\n@@ -178,13 +166,30 @@ fn fulfill_implication<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     source_trait_ref: ty::TraitRef<'tcx>,\n+    source_impl: DefId,\n     target_impl: DefId,\n ) -> Result<SubstsRef<'tcx>, ()> {\n     debug!(\n         \"fulfill_implication({:?}, trait_ref={:?} |- {:?} applies)\",\n         param_env, source_trait_ref, target_impl\n     );\n \n+    let source_trait_ref = match traits::fully_normalize(\n+        &infcx,\n+        ObligationCause::dummy(),\n+        param_env,\n+        source_trait_ref,\n+    ) {\n+        Ok(source_trait_ref) => source_trait_ref,\n+        Err(_errors) => {\n+            infcx.tcx.sess.delay_span_bug(\n+                infcx.tcx.def_span(source_impl),\n+                format!(\"failed to fully normalize {source_trait_ref}\"),\n+            );\n+            source_trait_ref\n+        }\n+    };\n+\n     let source_trait = ImplSubject::Trait(source_trait_ref);\n \n     let selcx = &mut SelectionContext::new(&infcx);\n@@ -194,7 +199,7 @@ fn fulfill_implication<'tcx>(\n \n     // do the impls unify? If not, no specialization.\n     let Ok(InferOk { obligations: more_obligations, .. }) =\n-        infcx.at(&ObligationCause::dummy(), param_env, ).eq(DefineOpaqueTypes::No,source_trait, target_trait)\n+        infcx.at(&ObligationCause::dummy(), param_env).eq(DefineOpaqueTypes::No, source_trait, target_trait)\n     else {\n         debug!(\n             \"fulfill_implication: {:?} does not unify with {:?}\","}, {"sha": "c4960b0c28e786227d2ff8940216b9ba80f090e3", "filename": "tests/ui/specialization/min_specialization/specialize-associated-type.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize-associated-type.rs?ref=fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "patch": "@@ -0,0 +1,37 @@\n+// Another regression test for #109815.\n+\n+// check-pass\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_specialization_trait]\n+trait X {}\n+trait Z {\n+    type Assoc: X;\n+}\n+struct A<T>(T);\n+\n+impl X for () {}\n+\n+impl<T: X> Z for A<T> {\n+    type Assoc = ();\n+}\n+\n+trait MyFrom<T> {\n+    fn from(other: T) -> Self;\n+}\n+\n+impl<T> MyFrom<()> for T {\n+    default fn from(other: ()) -> T {\n+        panic!();\n+    }\n+}\n+\n+impl<T: X> MyFrom<<A<T> as Z>::Assoc> for T {\n+    fn from(other: ()) -> T {\n+        panic!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "24e92a0abc33ba04914ec83143d79b9e0d6278a7", "filename": "tests/ui/specialization/min_specialization/specialize_on_type_error.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.rs?ref=fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "patch": "@@ -0,0 +1,33 @@\n+// A regression test for #109815.\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_specialization_trait]\n+trait X {}\n+trait Y: X {}\n+trait Z {\n+    type Assoc: Y;\n+}\n+struct A<T>(T);\n+\n+impl<T: X> Z for A<T> {}\n+//~^ ERROR not all trait items implemented\n+\n+trait MyFrom<T> {\n+    fn from(other: T) -> Self;\n+}\n+\n+impl<T> MyFrom<T> for T {\n+    default fn from(other: T) -> T {\n+        other\n+    }\n+}\n+\n+impl<T: X> MyFrom<<A<T> as Z>::Assoc> for T {\n+    fn from(other: <A<T> as Z>::Assoc) -> T {\n+        other\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cc12302bd8cf14b0efb9bd25a3f20cc8d69f8029", "filename": "tests/ui/specialization/min_specialization/specialize_on_type_error.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fafe9e71d5c949c41a5a562e44cc40d72c5f7244/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.stderr?ref=fafe9e71d5c949c41a5a562e44cc40d72c5f7244", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Assoc`\n+  --> $DIR/specialize_on_type_error.rs:14:1\n+   |\n+LL |     type Assoc: Y;\n+   |     ------------- `Assoc` from trait\n+...\n+LL | impl<T: X> Z for A<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `Assoc` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}]}