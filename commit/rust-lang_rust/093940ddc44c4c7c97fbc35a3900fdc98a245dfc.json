{"sha": "093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Mzk0MGRkYzQ0YzRjN2M5N2ZiYzM1YTM5MDBmZGM5OGEyNDVkZmM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-30T20:23:01Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-23T16:51:43Z"}, "message": "Update implementations_of_trait and all_trait_implementations", "tree": {"sha": "6f6acd623be97ac513db3674c57728ae0acc8d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6acd623be97ac513db3674c57728ae0acc8d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "html_url": "https://github.com/rust-lang/rust/commit/093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95dfd826667f52b9b67bfa531169b1a1285bc937", "url": "https://api.github.com/repos/rust-lang/rust/commits/95dfd826667f52b9b67bfa531169b1a1285bc937", "html_url": "https://github.com/rust-lang/rust/commit/95dfd826667f52b9b67bfa531169b1a1285bc937"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "d6dbd49d1739d5fe76da4b7c7d48070748c7a9de", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "patch": "@@ -724,12 +724,12 @@ rustc_queries! {\n \n     TypeChecking {\n         query implementations_of_trait(_: (CrateNum, DefId))\n-            -> Lrc<Vec<DefId>> {\n+            -> &'tcx [DefId] {\n             no_force\n             desc { \"looking up implementations of a trait in a crate\" }\n         }\n         query all_trait_implementations(_: CrateNum)\n-            -> Lrc<Vec<DefId>> {\n+            -> &'tcx [DefId] {\n             desc { \"looking up all (?) trait implementations\" }\n         }\n     }"}, {"sha": "6b06a0712e18ba97c6f4495e5d7d19be6c272521", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "patch": "@@ -208,18 +208,12 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n-\n     implementations_of_trait => {\n-        let mut result = vec![];\n-        let filter = Some(other);\n-        cdata.get_implementations_for_trait(filter, &mut result);\n-        Lrc::new(result)\n+        cdata.get_implementations_for_trait(tcx, Some(other))\n     }\n \n     all_trait_implementations => {\n-        let mut result = vec![];\n-        cdata.get_implementations_for_trait(None, &mut result);\n-        Lrc::new(result)\n+        cdata.get_implementations_for_trait(tcx, None)\n     }\n \n     visibility => { cdata.get_visibility(def_id.index) }"}, {"sha": "c4037dcfac0adb02f006fec9d84678efb310fb1c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093940ddc44c4c7c97fbc35a3900fdc98a245dfc/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=093940ddc44c4c7c97fbc35a3900fdc98a245dfc", "patch": "@@ -1024,31 +1024,34 @@ impl<'a, 'tcx> CrateMetadata {\n                                       .map(|index| self.local_def_id(index)))\n     }\n \n-    pub fn get_implementations_for_trait(&self,\n-                                         filter: Option<DefId>,\n-                                         result: &mut Vec<DefId>) {\n+    pub fn get_implementations_for_trait(\n+        &self,\n+        tcx: TyCtxt<'_, 'tcx, '_>,\n+        filter: Option<DefId>,\n+    ) -> &'tcx [DefId] {\n         if self.proc_macros.is_some() {\n             // proc-macro crates export no trait impls.\n-            return\n+            return &[]\n         }\n \n         // Do a reverse lookup beforehand to avoid touching the crate_num\n         // hash map in the loop below.\n         let filter = match filter.map(|def_id| self.reverse_translate_def_id(def_id)) {\n             Some(Some(def_id)) => Some((def_id.krate.as_u32(), def_id.index)),\n-            Some(None) => return,\n+            Some(None) => return &[],\n             None => None,\n         };\n \n         if let Some(filter) = filter {\n-            if let Some(impls) = self.trait_impls\n-                                     .get(&filter) {\n-                result.extend(impls.decode(self).map(|idx| self.local_def_id(idx)));\n+            if let Some(impls) = self.trait_impls.get(&filter) {\n+                tcx.arena.alloc_from_iter(impls.decode(self).map(|idx| self.local_def_id(idx)))\n+            } else {\n+                &[]\n             }\n         } else {\n-            for impls in self.trait_impls.values() {\n-                result.extend(impls.decode(self).map(|idx| self.local_def_id(idx)));\n-            }\n+            tcx.arena.alloc_from_iter(self.trait_impls.values().flat_map(|impls| {\n+                impls.decode(self).map(|idx| self.local_def_id(idx))\n+            }))\n         }\n     }\n "}]}