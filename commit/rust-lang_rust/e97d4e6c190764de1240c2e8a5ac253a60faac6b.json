{"sha": "e97d4e6c190764de1240c2e8a5ac253a60faac6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5N2Q0ZTZjMTkwNzY0ZGUxMjQwYzJlOGE1YWMyNTNhNjBmYWFjNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-02T06:41:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-02T06:41:46Z"}, "message": "auto merge of #13789 : sfackler/rust/debug-assert, r=pcwalton\n\nI switched the `assert!` calls in `RefCell` over to `debug_assert!`.\r\nThere are probably other instances that should be converted as well, but\r\nI couldn't think of any off the top of my head.\r\n\r\nRFC: 0015-assert", "tree": {"sha": "132dcc092d1d34ffff6c2be5c65952609c0a8298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132dcc092d1d34ffff6c2be5c65952609c0a8298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97d4e6c190764de1240c2e8a5ac253a60faac6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97d4e6c190764de1240c2e8a5ac253a60faac6b", "html_url": "https://github.com/rust-lang/rust/commit/e97d4e6c190764de1240c2e8a5ac253a60faac6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97d4e6c190764de1240c2e8a5ac253a60faac6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adcbf539550eab5ef0b351b1d198d10acecf5301", "url": "https://api.github.com/repos/rust-lang/rust/commits/adcbf539550eab5ef0b351b1d198d10acecf5301", "html_url": "https://github.com/rust-lang/rust/commit/adcbf539550eab5ef0b351b1d198d10acecf5301"}, {"sha": "ca84d79375dd9be35d3cb7fb0d3b2803092c56c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca84d79375dd9be35d3cb7fb0d3b2803092c56c1", "html_url": "https://github.com/rust-lang/rust/commit/ca84d79375dd9be35d3cb7fb0d3b2803092c56c1"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "ce8e1474ee50b94d17be73e03606d1f2c90cbc35", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=e97d4e6c190764de1240c2e8a5ac253a60faac6b", "patch": "@@ -278,8 +278,7 @@ mod table {\n         /// the appropriate types to pass on to most of the other functions in\n         /// this module.\n         pub fn peek(&self, index: uint) -> BucketState {\n-            // FIXME #12049\n-            if cfg!(test) { assert!(index < self.capacity) }\n+            debug_assert!(index < self.capacity);\n \n             let idx  = index as int;\n             let hash = unsafe { *self.hashes.offset(idx) };\n@@ -306,8 +305,7 @@ mod table {\n             let idx = index.idx;\n \n             unsafe {\n-                // FIXME #12049\n-                if cfg!(test) { assert!(*self.hashes.offset(idx) != EMPTY_BUCKET) }\n+                debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n                 (&'a *self.keys.offset(idx),\n                  &'a *self.vals.offset(idx))\n             }\n@@ -319,8 +317,7 @@ mod table {\n             let idx = index.idx;\n \n             unsafe {\n-                // FIXME #12049\n-                if cfg!(test) { assert!(*self.hashes.offset(idx) != EMPTY_BUCKET) }\n+                debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n                 (&'a     *self.keys.offset(idx),\n                  &'a mut *self.vals.offset(idx))\n             }\n@@ -332,8 +329,7 @@ mod table {\n             let idx = index.idx;\n \n             unsafe {\n-                // FIXME #12049\n-                if cfg!(test) { assert!(*self.hashes.offset(idx) != EMPTY_BUCKET) }\n+                debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n                 (transmute(self.hashes.offset(idx)),\n                  &'a mut *self.keys.offset(idx),\n                  &'a mut *self.vals.offset(idx))\n@@ -351,8 +347,7 @@ mod table {\n             let idx = index.idx;\n \n             unsafe {\n-                // FIXME #12049\n-                if cfg!(test) { assert_eq!(*self.hashes.offset(idx), EMPTY_BUCKET) }\n+                debug_assert_eq!(*self.hashes.offset(idx), EMPTY_BUCKET);\n                 *self.hashes.offset(idx) = hash.inspect();\n                 move_val_init(&mut *self.keys.offset(idx), k);\n                 move_val_init(&mut *self.vals.offset(idx), v);\n@@ -371,8 +366,7 @@ mod table {\n             let idx  = index.idx;\n \n             unsafe {\n-                // FIXME #12049\n-                if cfg!(test) { assert!(*self.hashes.offset(idx) != EMPTY_BUCKET) }\n+                debug_assert!(*self.hashes.offset(idx) != EMPTY_BUCKET);\n \n                 *self.hashes.offset(idx) = EMPTY_BUCKET;\n "}, {"sha": "1e4faf1a899e649dd405ea09fe54db9e958b4768", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=e97d4e6c190764de1240c2e8a5ac253a60faac6b", "patch": "@@ -93,7 +93,7 @@ impl<T> RefCell<T> {\n \n     /// Consumes the `RefCell`, returning the wrapped value.\n     pub fn unwrap(self) -> T {\n-        assert!(self.borrow.get() == UNUSED);\n+        debug_assert!(self.borrow.get() == UNUSED);\n         unsafe{self.value.unwrap()}\n     }\n \n@@ -181,7 +181,7 @@ pub struct Ref<'b, T> {\n impl<'b, T> Drop for Ref<'b, T> {\n     fn drop(&mut self) {\n         let borrow = self.parent.borrow.get();\n-        assert!(borrow != WRITING && borrow != UNUSED);\n+        debug_assert!(borrow != WRITING && borrow != UNUSED);\n         self.parent.borrow.set(borrow - 1);\n     }\n }\n@@ -202,7 +202,7 @@ pub struct RefMut<'b, T> {\n impl<'b, T> Drop for RefMut<'b, T> {\n     fn drop(&mut self) {\n         let borrow = self.parent.borrow.get();\n-        assert!(borrow == WRITING);\n+        debug_assert!(borrow == WRITING);\n         self.parent.borrow.set(UNUSED);\n     }\n }"}, {"sha": "b04ca63e55e4d801e126587655551c28dca569bf", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e97d4e6c190764de1240c2e8a5ac253a60faac6b", "patch": "@@ -90,11 +90,6 @@ macro_rules! assert(\n             fail!(\"assertion failed: {:s}\", stringify!($cond))\n         }\n     );\n-    ($cond:expr, $msg:expr) => (\n-        if !$cond {\n-            fail!($msg)\n-        }\n-    );\n     ($cond:expr, $($arg:expr),+) => (\n         if !$cond {\n             fail!($($arg),+)\n@@ -130,6 +125,58 @@ macro_rules! assert_eq(\n     })\n )\n \n+/// Ensure that a boolean expression is `true` at runtime.\n+///\n+/// This will invoke the `fail!` macro if the provided expression cannot be\n+/// evaluated to `true` at runtime.\n+///\n+/// Unlike `assert!`, `debug_assert!` statements can be disabled by passing\n+/// `--cfg ndebug` to the compiler. This makes `debug_assert!` useful for\n+/// checks that are too expensive to be present in a release build but may be\n+/// helpful during development.\n+///\n+/// # Example\n+///\n+/// ```\n+/// // the failure message for these assertions is the stringified value of the\n+/// // expression given.\n+/// debug_assert!(true);\n+/// # fn some_expensive_computation() -> bool { true }\n+/// debug_assert!(some_expensive_computation());\n+///\n+/// // assert with a custom message\n+/// # let x = true;\n+/// debug_assert!(x, \"x wasn't true!\");\n+/// # let a = 3; let b = 27;\n+/// debug_assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n+/// ```\n+#[macro_export]\n+macro_rules! debug_assert(\n+    ($($arg:tt)*) => (if cfg!(not(ndebug)) { assert!($($arg)*); })\n+)\n+\n+/// Asserts that two expressions are equal to each other, testing equality in\n+/// both directions.\n+///\n+/// On failure, this macro will print the values of the expressions.\n+///\n+/// Unlike `assert_eq!`, `debug_assert_eq!` statements can be disabled by\n+/// passing `--cfg ndebug` to the compiler. This makes `debug_assert_eq!`\n+/// useful for checks that are too expensive to be present in a release build\n+/// but may be helpful during development.\n+///\n+/// # Example\n+///\n+/// ```\n+/// let a = 3;\n+/// let b = 1 + 2;\n+/// debug_assert_eq!(a, b);\n+/// ```\n+#[macro_export]\n+macro_rules! debug_assert_eq(\n+    ($($arg:tt)*) => (if cfg!(not(ndebug)) { assert_eq!($($arg)*); })\n+)\n+\n /// A utility macro for indicating unreachable code. It will fail if\n /// executed. This is occasionally useful to put after loops that never\n /// terminate normally, but instead directly return from a function."}, {"sha": "8d6d1c222cf55f1798486b892b9dd64f61ca4664", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97d4e6c190764de1240c2e8a5ac253a60faac6b/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=e97d4e6c190764de1240c2e8a5ac253a60faac6b", "patch": "@@ -86,8 +86,7 @@ impl<T: Send> UnsafeArc<T> {\n     #[inline]\n     pub fn get(&self) -> *mut T {\n         unsafe {\n-            // FIXME(#12049): this needs some sort of debug assertion\n-            if cfg!(test) { assert!((*self.data).count.load(Relaxed) > 0); }\n+            debug_assert!((*self.data).count.load(Relaxed) > 0);\n             return (*self.data).data.get();\n         }\n     }\n@@ -97,8 +96,7 @@ impl<T: Send> UnsafeArc<T> {\n     #[inline]\n     pub fn get_immut(&self) -> *T {\n         unsafe {\n-            // FIXME(#12049): this needs some sort of debug assertion\n-            if cfg!(test) { assert!((*self.data).count.load(Relaxed) > 0); }\n+            debug_assert!((*self.data).count.load(Relaxed) > 0);\n             return (*self.data).data.get() as *T;\n         }\n     }\n@@ -125,8 +123,7 @@ impl<T: Send> Clone for UnsafeArc<T> {\n             //  synchronization.\n             // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n             let old_count = (*self.data).count.fetch_add(1, Relaxed);\n-            // FIXME(#12049): this needs some sort of debug assertion\n-            if cfg!(test) { assert!(old_count >= 1); }\n+            debug_assert!(old_count >= 1);\n             return UnsafeArc { data: self.data };\n         }\n     }\n@@ -144,8 +141,7 @@ impl<T> Drop for UnsafeArc<T>{\n             // Because `fetch_sub` is already atomic, we do not need to synchronize with other\n             // threads unless we are going to delete the object.\n             let old_count = (*self.data).count.fetch_sub(1, Release);\n-            // FIXME(#12049): this needs some sort of debug assertion\n-            if cfg!(test) { assert!(old_count >= 1); }\n+            debug_assert!(old_count >= 1);\n             if old_count == 1 {\n                 // This fence is needed to prevent reordering of use of the data and deletion of\n                 // the data. Because it is marked `Release`, the decreasing of the reference count"}]}