{"sha": "c3375078e5b0303480d7cc34fc93c1c776b94512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMzc1MDc4ZTViMDMwMzQ4MGQ3Y2MzNGZjOTNjMWM3NzZiOTQ1MTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-16T18:57:01Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-16T18:57:01Z"}, "message": "Merge pull request #137 from nrc/struct-lit-opt\n\nOptions for formatting struct literals", "tree": {"sha": "1af5a625185b30777d5a3fe0123bc0bd12e721b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af5a625185b30777d5a3fe0123bc0bd12e721b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3375078e5b0303480d7cc34fc93c1c776b94512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3375078e5b0303480d7cc34fc93c1c776b94512", "html_url": "https://github.com/rust-lang/rust/commit/c3375078e5b0303480d7cc34fc93c1c776b94512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3375078e5b0303480d7cc34fc93c1c776b94512/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "html_url": "https://github.com/rust-lang/rust/commit/fa4ef4d785b00a4880e15da5daa4e82515b55e6e"}, {"sha": "a32b0e7627ea31d1967568aa034f74a082de4bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32b0e7627ea31d1967568aa034f74a082de4bec", "html_url": "https://github.com/rust-lang/rust/commit/a32b0e7627ea31d1967568aa034f74a082de4bec"}], "stats": {"total": 440, "additions": 309, "deletions": 131}, "files": [{"sha": "ab5968dbf76883b098c747beda4672c8c00bfb7b", "filename": "src/changes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -35,9 +35,11 @@ pub struct ChangeSet<'a> {\n impl<'a> ChangeSet<'a> {\n     // Create a new ChangeSet for a given libsyntax CodeMap.\n     pub fn from_codemap(codemap: &'a CodeMap) -> ChangeSet<'a> {\n-        let mut result = ChangeSet { file_map: HashMap::new(),\n-                                     codemap: codemap,\n-                                     file_spans: Vec::with_capacity(codemap.files.borrow().len()), };\n+        let mut result = ChangeSet {\n+            file_map: HashMap::new(),\n+            codemap: codemap,\n+            file_spans: Vec::with_capacity(codemap.files.borrow().len()),\n+        };\n \n         for f in codemap.files.borrow().iter() {\n             // Use the length of the file as a heuristic for how much space we"}, {"sha": "7e4119880c30518afef876ec213a228719cd8aad", "filename": "src/comment.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -24,13 +24,15 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     let max_chars = width.checked_sub(closer.len()).unwrap_or(1)\n                          .checked_sub(opener.len()).unwrap_or(1);\n \n-    let fmt = StringFormat { opener: \"\",\n-                             closer: \"\",\n-                             line_start: line_start,\n-                             line_end: \"\",\n-                             width: max_chars,\n-                             offset: offset + opener.len() - line_start.len(),\n-                             trim_end: true, };\n+    let fmt = StringFormat {\n+        opener: \"\",\n+        closer: \"\",\n+        line_start: line_start,\n+        line_end: \"\",\n+        width: max_chars,\n+        offset: offset + opener.len() - line_start.len(),\n+        trim_end: true,\n+    };\n \n     let indent_str = make_indent(offset);\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();"}, {"sha": "a01d3e64689bf2ac68da319c09277cbb21f3fcb4", "filename": "src/config.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -10,7 +10,7 @@\n \n extern crate toml;\n \n-use {NewlineStyle, BraceStyle, ReturnIndent};\n+use {NewlineStyle, BraceStyle, ReturnIndent, StructLitStyle};\n use lists::SeparatorTactic;\n use issues::ReportTactic;\n \n@@ -26,6 +26,7 @@ pub struct Config {\n     pub fn_args_paren_newline: bool,\n     pub struct_trailing_comma: SeparatorTactic,\n     pub struct_lit_trailing_comma: SeparatorTactic,\n+    pub struct_lit_style: StructLitStyle,\n     pub enum_trailing_comma: bool,\n     pub report_todo: ReportTactic,\n     pub report_fixme: ReportTactic,\n@@ -35,6 +36,14 @@ pub struct Config {\n impl Config {\n     pub fn from_toml(toml: &str) -> Config {\n         let parsed = toml.parse().unwrap();\n-        toml::decode(parsed).unwrap()\n+        match toml::decode(parsed) {\n+            Some(decoded) => decoded,\n+            None => {\n+                println!(\"Decoding config file failed. Config:\\n{}\", toml);\n+                let parsed: toml::Value = toml.parse().unwrap();\n+                println!(\"\\n\\nParsed:\\n{:?}\", parsed);\n+                panic!();\n+            }\n+        }\n     }\n }"}, {"sha": "e31a0f257e9e2eabbcb27987683ecc564c088f01", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -7,6 +7,7 @@ fn_brace_style = \"SameLineWhere\"\n fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n struct_lit_trailing_comma = \"Vertical\"\n enum_trailing_comma = true\n report_todo = \"Always\""}, {"sha": "8dbe5c6d1ddb25d48a153c8b2f85595d2b0ff8bf", "filename": "src/expr.rs", "status": "modified", "additions": 63, "deletions": 38, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -11,6 +11,7 @@\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic};\n use string::{StringFormat, rewrite_string};\n+use StructLitStyle;\n use utils::{span_after, make_indent};\n use visitor::FmtVisitor;\n \n@@ -100,13 +101,15 @@ fn rewrite_string_lit(context: &RewriteContext,\n     if l_loc.line == r_loc.line && r_loc.col.to_usize() <= context.config.max_width {\n         return context.codemap.span_to_snippet(span).ok();\n     }\n-    let fmt = StringFormat { opener: \"\\\"\",\n-                             closer: \"\\\"\",\n-                             line_start: \" \",\n-                             line_end: \"\\\\\",\n-                             width: width,\n-                             offset: offset,\n-                             trim_end: false, };\n+    let fmt = StringFormat {\n+        opener: \"\\\"\",\n+        closer: \"\\\"\",\n+        line_start: \" \",\n+        line_end: \"\\\\\",\n+        width: width,\n+        offset: offset,\n+        trim_end: false,\n+    };\n \n     Some(rewrite_string(&s.escape_default(), &fmt))\n }\n@@ -146,13 +149,15 @@ fn rewrite_call(context: &RewriteContext,\n                              callee.span.hi + BytePos(1),\n                              span.hi);\n \n-    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                               separator: \",\",\n-                               trailing_separator: SeparatorTactic::Never,\n-                               indent: offset,\n-                               h_width: remaining_width,\n-                               v_width: remaining_width,\n-                               ends_with_newline: true, };\n+    let fmt = ListFormatting {\n+        tactic: ListTactic::HorizontalVertical,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        indent: offset,\n+        h_width: remaining_width,\n+        v_width: remaining_width,\n+        ends_with_newline: true,\n+    };\n \n     Some(format!(\"{}({})\", callee_str, write_list(&items, &fmt)))\n }\n@@ -187,9 +192,19 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     }\n \n     let path_str = pprust::path_to_string(path);\n-    // Foo { a: Foo } - indent is +3, width is -5.\n-    let indent = offset + path_str.len() + 3;\n-    let budget = width - (path_str.len() + 5);\n+    let (indent, h_budget, v_budget) = match context.config.struct_lit_style {\n+        StructLitStyle::VisualIndent => {\n+            // Foo { a: Foo } - indent is +3, width is -5.\n+            let budget = width - (path_str.len() + 5);\n+            (offset + path_str.len() + 3, budget, budget)\n+        }\n+        StructLitStyle::BlockIndent => {\n+            // If we are all on one line, then we'll ignore the indent, and we\n+            // have a smaller budget.\n+            let indent = context.block_indent + context.config.tab_spaces;\n+            (indent, width - (path_str.len() + 5), width - indent)\n+        }\n+    };\n \n     let field_iter = fields.into_iter().map(StructLitField::Regular)\n                            .chain(base.into_iter().map(StructLitField::Base));\n@@ -215,13 +230,13 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              |item| {\n                                  match *item {\n                                      StructLitField::Regular(ref field) => {\n-                                         rewrite_field(context, &field, budget, indent)\n+                                         rewrite_field(context, &field, h_budget, indent)\n                                             .unwrap_or(context.codemap.span_to_snippet(field.span)\n                                                                       .unwrap())\n                                      },\n                                      StructLitField::Base(ref expr) => {\n                                          // 2 = ..\n-                                         expr.rewrite(context, budget - 2, indent + 2)\n+                                         expr.rewrite(context, h_budget - 2, indent + 2)\n                                              .map(|s| format!(\"..{}\", s))\n                                              .unwrap_or(context.codemap.span_to_snippet(expr.span)\n                                                                        .unwrap())\n@@ -231,24 +246,32 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              span_after(span, \"{\", context.codemap),\n                              span.hi);\n \n-    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                               separator: \",\",\n-                               trailing_separator: if base.is_some() {\n+    let fmt = ListFormatting {\n+        tactic: ListTactic::HorizontalVertical,\n+        separator: \",\",\n+        trailing_separator: if base.is_some() {\n             SeparatorTactic::Never\n         } else {\n             context.config.struct_lit_trailing_comma\n         },\n-                               indent: indent,\n-                               h_width: budget,\n-                               v_width: budget,\n-                               ends_with_newline: true, };\n+        indent: indent,\n+        h_width: h_budget,\n+        v_width: v_budget,\n+        ends_with_newline: true,\n+    };\n     let fields_str = write_list(&items, &fmt);\n-    Some(format!(\"{} {{ {} }}\", path_str, fields_str))\n \n-    // FIXME if the usual multi-line layout is too wide, we should fall back to\n-    // Foo {\n-    //     a: ...,\n-    // }\n+    match context.config.struct_lit_style {\n+        StructLitStyle::BlockIndent if fields_str.contains('\\n') => {\n+            let inner_indent = make_indent(context.block_indent + context.config.tab_spaces);\n+            let outer_indent = make_indent(context.block_indent);\n+            Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n+        }\n+        _ => Some(format!(\"{} {{ {} }}\", path_str, fields_str)),\n+    }\n+\n+    // FIXME if context.config.struct_lit_style == VisualIndent, but we run out\n+    // of space, we should fall back to BlockIndent.\n }\n \n fn rewrite_field(context: &RewriteContext,\n@@ -291,13 +314,15 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                              span.lo + BytePos(1), // Remove parens\n                              span.hi - BytePos(1));\n \n-    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                               separator: \",\",\n-                               trailing_separator: SeparatorTactic::Never,\n-                               indent: indent,\n-                               h_width: width - 2,\n-                               v_width: width - 2,\n-                               ends_with_newline: true, };\n+    let fmt = ListFormatting {\n+        tactic: ListTactic::HorizontalVertical,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        indent: indent,\n+        h_width: width - 2,\n+        v_width: width - 2,\n+        ends_with_newline: true,\n+    };\n \n     Some(format!(\"({})\", write_list(&items, &fmt)))\n }"}, {"sha": "45a8e94dee587d0b9273842e305f262a77a56151", "filename": "src/imports.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -71,13 +71,15 @@ impl<'a> FmtVisitor<'a> {\n         let remaining_line_budget = one_line_budget.checked_sub(used_width).unwrap_or(0);\n         let remaining_multi_budget = multi_line_budget.checked_sub(used_width).unwrap_or(0);\n \n-        let fmt = ListFormatting { tactic: ListTactic::Mixed,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: block_indent + indent,\n-                                   h_width: remaining_line_budget,\n-                                   v_width: remaining_multi_budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::Mixed,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: block_indent + indent,\n+            h_width: remaining_line_budget,\n+            v_width: remaining_multi_budget,\n+            ends_with_newline: true,\n+        };\n \n         let mut items = itemize_list(self.codemap,\n                                      vec![ListItem::from_str(\"\")], /* Dummy value, explanation"}, {"sha": "31f544605b590a77e0ebf6457003d8e629a1d258", "filename": "src/issues.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -96,9 +96,11 @@ pub struct BadIssueSeeker {\n \n impl BadIssueSeeker {\n     pub fn new(report_todo: ReportTactic, report_fixme: ReportTactic) -> BadIssueSeeker {\n-        BadIssueSeeker { state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n-                         report_todo: report_todo,\n-                         report_fixme: report_fixme, }\n+        BadIssueSeeker {\n+            state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n+            report_todo: report_todo,\n+            report_fixme: report_fixme,\n+        }\n     }\n \n     // Check whether or not the current char is conclusive evidence for an"}, {"sha": "b3f4a0a63a4ca614833e8450c3ea2ece7ea234ee", "filename": "src/items.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -305,13 +305,15 @@ impl<'a> FmtVisitor<'a> {\n             item.item = arg;\n         }\n \n-        let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: arg_indent,\n-                                   h_width: one_line_budget,\n-                                   v_width: multi_line_budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::HorizontalVertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: arg_indent,\n+            h_width: one_line_budget,\n+            v_width: multi_line_budget,\n+            ends_with_newline: true,\n+        };\n \n         write_list(&arg_items, &fmt)\n     }\n@@ -567,13 +569,15 @@ impl<'a> FmtVisitor<'a> {\n \n         // 1 = ,\n         let budget = self.config.ideal_width - offset + self.config.tab_spaces - 1;\n-        let fmt = ListFormatting { tactic: tactic,\n-                                   separator: \",\",\n-                                   trailing_separator: self.config.struct_trailing_comma,\n-                                   indent: offset + self.config.tab_spaces,\n-                                   h_width: self.config.max_width,\n-                                   v_width: budget,\n-                                   ends_with_newline: false, };\n+        let fmt = ListFormatting {\n+            tactic: tactic,\n+            separator: \",\",\n+            trailing_separator: self.config.struct_trailing_comma,\n+            indent: offset + self.config.tab_spaces,\n+            h_width: self.config.max_width,\n+            v_width: budget,\n+            ends_with_newline: false,\n+        };\n \n         result.push_str(&write_list(&items, &fmt));\n \n@@ -708,13 +712,15 @@ impl<'a> FmtVisitor<'a> {\n             item.item = ty;\n         }\n \n-        let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: offset + 1,\n-                                   h_width: budget,\n-                                   v_width: budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::HorizontalVertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: offset + 1,\n+            h_width: budget,\n+            v_width: budget,\n+            ends_with_newline: true,\n+        };\n         result.push_str(&write_list(&items, &fmt));\n \n         result.push('>');\n@@ -749,13 +755,15 @@ impl<'a> FmtVisitor<'a> {\n                                  span_end);\n \n         let budget = self.config.ideal_width + self.config.leeway - indent - 10;\n-        let fmt = ListFormatting { tactic: ListTactic::Vertical,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: indent + 10,\n-                                   h_width: budget,\n-                                   v_width: budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::Vertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: indent + 10,\n+            h_width: budget,\n+            v_width: budget,\n+            ends_with_newline: true,\n+        };\n         result.push_str(&write_list(&items, &fmt));\n \n         result"}, {"sha": "a4100fc53e955129fefa238bfaf8a237c9dccb28", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -111,6 +111,19 @@ pub enum ReturnIndent {\n \n impl_enum_decodable!(ReturnIndent, WithArgs, WithWhereClause);\n \n+// How to stle a struct literal.\n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum StructLitStyle {\n+    // First line on the same line as the opening brace, all lines aligned with\n+    // the first line.\n+    VisualIndent,\n+    // First line is on a new line and all lines align with block indent.\n+    BlockIndent,\n+    // FIXME Maybe we should also have an option to align types.\n+}\n+\n+impl_enum_decodable!(StructLitStyle, VisualIndent, BlockIndent);\n+\n enum ErrorKind {\n     // Line has exceeded character limit\n     LineOverflow,"}, {"sha": "ae5b2083ccc022be4edf22c6239fa14f509d8fb2", "filename": "src/visitor.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -38,9 +38,11 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(ex.span.hi));\n         self.format_missing(ex.span.lo);\n         let offset = self.changes.cur_offset_span(ex.span);\n-        let context = RewriteContext { codemap: self.codemap,\n-                                       config: self.config,\n-                                       block_indent: self.block_indent, };\n+        let context = RewriteContext {\n+            codemap: self.codemap,\n+            config: self.config,\n+            block_indent: self.block_indent,\n+        };\n         let rewrite = ex.rewrite(&context, self.config.max_width - offset, offset);\n \n         if let Some(new_str) = rewrite {\n@@ -284,11 +286,13 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n impl<'a> FmtVisitor<'a> {\n     pub fn from_codemap<'b>(codemap: &'b CodeMap, config: &'b Config) -> FmtVisitor<'b> {\n-        FmtVisitor { codemap: codemap,\n-                     changes: ChangeSet::from_codemap(codemap),\n-                     last_pos: BytePos(0),\n-                     block_indent: 0,\n-                     config: config, }\n+        FmtVisitor {\n+            codemap: codemap,\n+            changes: ChangeSet::from_codemap(codemap),\n+            last_pos: BytePos(0),\n+            block_indent: 0,\n+            config: config,\n+        }\n     }\n \n     pub fn snippet(&self, span: Span) -> String {"}, {"sha": "ddab2479f2ce9cba4f12e567fdde49a092fb3b7e", "filename": "tests/config/reorder_imports.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fconfig%2Freorder_imports.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fconfig%2Freorder_imports.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Freorder_imports.toml?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -8,6 +8,7 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\""}, {"sha": "303433dbcc1e9416eba17115092f569092e21967", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -8,6 +8,7 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\""}, {"sha": "cf601303e9b5501114bea0a69ce7bc9ad0803d95", "filename": "tests/config/visual_struct_lits.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fconfig%2Fvisual_struct_lits.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fconfig%2Fvisual_struct_lits.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fvisual_struct_lits.toml?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -0,0 +1,15 @@\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 4\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\"\n+fn_args_paren_newline = true\n+struct_trailing_comma = \"Vertical\"\n+struct_lit_style = \"VisualIndent\"\n+struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true\n+report_todo = \"Always\"\n+report_fixme = \"Never\"\n+reorder_imports = false"}, {"sha": "f2726821e55652a83bbf1ec9c51bee40164b599d", "filename": "tests/source/struct_lits.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -8,7 +8,9 @@ fn main() {\n \n     Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n \n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n         // Comment"}, {"sha": "b629ffa1263ede7390138f707ff7b7f53202376e", "filename": "tests/source/struct_lits_visual.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -0,0 +1,39 @@\n+// rustfmt-config: visual_struct_lits.toml\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {a: x };\n+\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a:Bar,\n+          b:foo() };\n+\n+    A { \n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+    first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item\n+    };\n+\n+    Diagram { /*                 o        This graph demonstrates how                  \n+               *                / \\       significant whitespace is           \n+               *               o   o      preserved.  \n+               *              /|\\   \\\n+               *             o o o   o */\n+              graph: G, }\n+}"}, {"sha": "293a2a97b7a2a6822e68e1b5d13052e5cab9f906", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -6,45 +6,45 @@ fn main() {\n     // Comment\n     let y = Foo { a: x };\n \n-    Foo { a: foo(), // comment\n-          // comment\n-          b: bar(),\n-          ..something };\n-\n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n-                                                                               b: bar(), };\n-\n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n-                                                                                        a: foo(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */\n-                                                                                        // Comment\n-                                                                                        b: bar(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */ };\n+    Foo {\n+        a: foo(), // comment\n+        // comment\n+        b: bar(),\n+        ..something\n+    };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar() };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        a: foo(),\n+        b: bar(),\n+    };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), /* Comment */\n+    };\n \n     Foo { a: Bar, b: foo() };\n \n-    A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n-        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+    A {\n+        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed\n+        // sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n         // hendrerit. Donec et mollis dolor.\n         first: item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n         // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n-        second: Item, };\n-\n-    Diagram { //                 o        This graph demonstrates how\n-              //                / \\       significant whitespace is\n-              //               o   o      preserved.\n-              //              /|\\   \\\n-              //             o o o   o\n-              graph: G, }\n+        second: Item,\n+    };\n+\n+    Diagram {\n+        //                 o        This graph demonstrates how\n+        //                / \\       significant whitespace is\n+        //               o   o      preserved.\n+        //              /|\\   \\\n+        //             o o o   o\n+        graph: G,\n+    }\n }"}, {"sha": "651cd2b883b10cf1d2cd44c9a5d35b0e7ded2d46", "filename": "tests/target/struct_lits_visual.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3375078e5b0303480d7cc34fc93c1c776b94512/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=c3375078e5b0303480d7cc34fc93c1c776b94512", "patch": "@@ -0,0 +1,52 @@\n+// rustfmt-config: visual_struct_lits.toml\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo { a: x };\n+\n+    Foo { a: foo(), // comment\n+          // comment\n+          b: bar(),\n+          ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                                               b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n+                                                                                        a: foo(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */\n+                                                                                        // Comment\n+                                                                                        b: bar(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */ };\n+\n+    Foo { a: Bar, b: foo() };\n+\n+    A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item, };\n+\n+    Diagram { //                 o        This graph demonstrates how\n+              //                / \\       significant whitespace is\n+              //               o   o      preserved.\n+              //              /|\\   \\\n+              //             o o o   o\n+              graph: G, }\n+}"}]}