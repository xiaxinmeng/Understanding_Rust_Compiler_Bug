{"sha": "65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDA1M2FiNzRkOGM4YzljNTAyYjY3OGFjYzI2NWYzZDdlMmFjNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T05:34:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T05:34:07Z"}, "message": "Auto merge of #79927 - tmandry:rollup-pwn4b1v, r=tmandry\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #77027 (Improve documentation for `std::{f32,f64}::mul_add`)\n - #79375 (Make the kernel_copy tests more robust/concurrent.)\n - #79639 (Add long explanation for E0212)\n - #79698 (Add tracking issue template for library features.)\n - #79809 (Dogfood `str_split_once()`)\n - #79851 (Clarify the 'default is only allowed on...' error)\n - #79858 (Update const-fn doc in unstable-book)\n - #79860 (Clarify that String::split_at takes a byte index.)\n - #79871 (Fix small typo in `wrapping_shl` documentation)\n - #79896 (Make search results tab and help button focusable with keyboard)\n - #79917 (Use Symbol for inline asm register class names)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "52e498243a32317c889ff5fd7d3cb37d3154f564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e498243a32317c889ff5fd7d3cb37d3154f564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "html_url": "https://github.com/rust-lang/rust/commit/65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9ef564a7688dd4a9047342c7f8395aea909333", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9ef564a7688dd4a9047342c7f8395aea909333", "html_url": "https://github.com/rust-lang/rust/commit/0c9ef564a7688dd4a9047342c7f8395aea909333"}, {"sha": "0327b5dac5010e8b64dea9b4535c2d0ed51e0988", "url": "https://api.github.com/repos/rust-lang/rust/commits/0327b5dac5010e8b64dea9b4535c2d0ed51e0988", "html_url": "https://github.com/rust-lang/rust/commit/0327b5dac5010e8b64dea9b4535c2d0ed51e0988"}], "stats": {"total": 728, "additions": 421, "deletions": 307}, "files": [{"sha": "b8544e6a4e0fd57376e05f6a983dd68ec756f71a", "filename": ".github/ISSUE_TEMPLATE/library_tracking_issue.md", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Flibrary_tracking_issue.md?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -0,0 +1,63 @@\n+---\n+name: Library Tracking Issue\n+about: A tracking issue for an unstable library feature.\n+title: Tracking Issue for XXX\n+labels: C-tracking-issue T-libs\n+---\n+<!--\n+Thank you for creating a tracking issue!\n+\n+Tracking issues are for tracking a feature from implementation to stabilization.\n+\n+Make sure to include the relevant RFC for the feature if it has one.\n+\n+If the new feature is small, it may be fine to skip the RFC process. In that\n+case, you can use use `issue = \"none\"` in your initial implementation PR. The\n+reviewer will ask you to open a tracking issue if they agree your feature can be\n+added without an RFC.\n+-->\n+\n+Feature gate: `#![feature(...)]`\n+\n+This is a tracking issue for ...\n+\n+<!--\n+Include a short description of the feature.\n+-->\n+\n+### Public API\n+\n+<!--\n+For most library features, it'd be useful to include a summarized version of the public API.\n+(E.g. just the public function signatures without their doc comments or implementation.)\n+-->\n+\n+```rust\n+...\n+```\n+\n+### Steps / History\n+\n+<!--\n+In the simplest case, this is a PR implementing the feature followed by a PR\n+that stabilises the feature. However it's not uncommon for the feature to be\n+changed before stabilization. For larger features, the implementation could be\n+split up in multiple steps.\n+-->\n+\n+- [ ] Implementation: ...\n+- [ ] Stabilization PR\n+\n+### Unresolved Questions\n+\n+<!--\n+Include any open questions that need to be answered before the feature can be\n+stabilised. If multiple (unrelated) big questions come up, it can be a good idea\n+to open a separate issue for each, to make it easier to keep track of the\n+discussions.\n+\n+It's useful to link any relevant discussions and conclusions (whether on GitHub,\n+Zulip, or the internals forum) here.\n+-->\n+\n+- None yet."}, {"sha": "bf6d332217613e36e799a0ec54febb072785ea43", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -400,7 +400,7 @@ impl<'a> AstValidator<'a> {\n         if let Defaultness::Default(def_span) = defaultness {\n             let span = self.session.source_map().guess_head_span(span);\n             self.err_handler()\n-                .struct_span_err(span, \"`default` is only allowed on items in `impl` definitions\")\n+                .struct_span_err(span, \"`default` is only allowed on items in trait impls\")\n                 .span_label(def_span, \"`default` because of this\")\n                 .emit();\n         }"}, {"sha": "fef6602b9ccbbc44664c343b092dafe3db417b8b", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -111,6 +111,7 @@ E0206: include_str!(\"./error_codes/E0206.md\"),\n E0207: include_str!(\"./error_codes/E0207.md\"),\n E0210: include_str!(\"./error_codes/E0210.md\"),\n E0211: include_str!(\"./error_codes/E0211.md\"),\n+E0212: include_str!(\"./error_codes/E0212.md\"),\n E0214: include_str!(\"./error_codes/E0214.md\"),\n E0220: include_str!(\"./error_codes/E0220.md\"),\n E0221: include_str!(\"./error_codes/E0221.md\"),\n@@ -503,7 +504,6 @@ E0779: include_str!(\"./error_codes/E0779.md\"),\n //  E0196, // cannot determine a type for this closure\n     E0208,\n //  E0209, // builtin traits can only be implemented on structs or enums\n-    E0212, // cannot extract an associated type from a higher-ranked trait bound\n //  E0213, // associated types are not accepted in this context\n //  E0215, // angle-bracket notation is not stable with `Fn`\n //  E0216, // parenthetical notation is only stable with `Fn`"}, {"sha": "17465414650b393f2e714f516a67e237561c18ce", "filename": "compiler/rustc_error_codes/src/error_codes/E0212.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0212.md", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0212.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0212.md?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -0,0 +1,35 @@\n+Cannot use the associated type of\n+a trait with uninferred generic parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0212\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo2<I : for<'x> Foo<&'x isize>>(\n+    field: I::A) {} // error!\n+```\n+\n+In this example, we have to instantiate `'x`, and\n+we don't know what lifetime to instantiate it with.\n+To fix this, spell out the precise lifetimes involved.\n+Example:\n+\n+```\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo3<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A) {} // ok!\n+\n+\n+fn foo4<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A) {} // ok!\n+```"}, {"sha": "e6d822086f52180b0c6d36a93c044c7cdedd3108", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -28,6 +28,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(or_patterns)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n+#![feature(str_split_once)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "af81d9af0e29347f2160024f55f71ea486fc6a6c", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -148,40 +148,46 @@ impl DebugOptions {\n \n         if let Ok(env_debug_options) = std::env::var(RUSTC_COVERAGE_DEBUG_OPTIONS) {\n             for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(',') {\n-                let mut setting = setting_str.splitn(2, '=');\n-                match setting.next() {\n-                    Some(option) if option == \"allow_unused_expressions\" => {\n-                        allow_unused_expressions = bool_option_val(option, setting.next());\n+                let (option, value) = match setting_str.split_once('=') {\n+                    None => (setting_str, None),\n+                    Some((k, v)) => (k, Some(v)),\n+                };\n+                match option {\n+                    \"allow_unused_expressions\" => {\n+                        allow_unused_expressions = bool_option_val(option, value);\n                         debug!(\n                             \"{} env option `allow_unused_expressions` is set to {}\",\n                             RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n                         );\n                     }\n-                    Some(option) if option == \"counter_format\" => {\n-                        if let Some(strval) = setting.next() {\n-                            counter_format = counter_format_option_val(strval);\n-                            debug!(\n-                                \"{} env option `counter_format` is set to {:?}\",\n-                                RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n-                            );\n-                        } else {\n-                            bug!(\n-                                \"`{}` option in environment variable {} requires one or more \\\n-                                plus-separated choices (a non-empty subset of \\\n-                                `id+block+operation`)\",\n-                                option,\n-                                RUSTC_COVERAGE_DEBUG_OPTIONS\n-                            );\n-                        }\n+                    \"counter_format\" => {\n+                        match value {\n+                            None => {\n+                                bug!(\n+                                    \"`{}` option in environment variable {} requires one or more \\\n+                                    plus-separated choices (a non-empty subset of \\\n+                                    `id+block+operation`)\",\n+                                    option,\n+                                    RUSTC_COVERAGE_DEBUG_OPTIONS\n+                                );\n+                            }\n+                            Some(val) => {\n+                                counter_format = counter_format_option_val(val);\n+                                debug!(\n+                                    \"{} env option `counter_format` is set to {:?}\",\n+                                    RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n+                                );\n+                            }\n+                        };\n                     }\n-                    Some(\"\") => {}\n-                    Some(invalid) => bug!(\n-                        \"Unsupported setting `{}` in environment variable {}\",\n-                        invalid,\n-                        RUSTC_COVERAGE_DEBUG_OPTIONS\n-                    ),\n-                    None => {}\n-                }\n+                    _ => {\n+                        bug!(\n+                            \"Unsupported setting `{}` in environment variable {}\",\n+                            option,\n+                            RUSTC_COVERAGE_DEBUG_OPTIONS\n+                        )\n+                    }\n+                };\n             }\n         }\n "}, {"sha": "54abb65dc38834d31879ef112fe237745798415b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 50, "deletions": 59, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1296,8 +1296,10 @@ fn parse_output_types(\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n-                let mut parts = output_type.splitn(2, '=');\n-                let shorthand = parts.next().unwrap();\n+                let (shorthand, path) = match output_type.split_once('=') {\n+                    None => (output_type, None),\n+                    Some((shorthand, path)) => (shorthand, Some(PathBuf::from(path))),\n+                };\n                 let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(|| {\n                     early_error(\n                         error_format,\n@@ -1308,7 +1310,6 @@ fn parse_output_types(\n                         ),\n                     )\n                 });\n-                let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);\n             }\n         }\n@@ -1452,11 +1453,10 @@ fn parse_opt_level(\n     let max_c = matches\n         .opt_strs_pos(\"C\")\n         .into_iter()\n-        .flat_map(\n-            |(i, s)| {\n-                if let Some(\"opt-level\") = s.splitn(2, '=').next() { Some(i) } else { None }\n-            },\n-        )\n+        .flat_map(|(i, s)| {\n+            // NB: This can match a string without `=`.\n+            if let Some(\"opt-level\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+        })\n         .max();\n     if max_o > max_c {\n         OptLevel::Default\n@@ -1491,11 +1491,10 @@ fn select_debuginfo(\n     let max_c = matches\n         .opt_strs_pos(\"C\")\n         .into_iter()\n-        .flat_map(\n-            |(i, s)| {\n-                if let Some(\"debuginfo\") = s.splitn(2, '=').next() { Some(i) } else { None }\n-            },\n-        )\n+        .flat_map(|(i, s)| {\n+            // NB: This can match a string without `=`.\n+            if let Some(\"debuginfo\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+        })\n         .max();\n     if max_g > max_c {\n         DebugInfo::Full\n@@ -1528,23 +1527,26 @@ fn parse_libs(\n         .map(|s| {\n             // Parse string of the form \"[KIND=]lib[:new_name]\",\n             // where KIND is one of \"dylib\", \"framework\", \"static\".\n-            let mut parts = s.splitn(2, '=');\n-            let kind = parts.next().unwrap();\n-            let (name, kind) = match (parts.next(), kind) {\n-                (None, name) => (name, NativeLibKind::Unspecified),\n-                (Some(name), \"dylib\") => (name, NativeLibKind::Dylib),\n-                (Some(name), \"framework\") => (name, NativeLibKind::Framework),\n-                (Some(name), \"static\") => (name, NativeLibKind::StaticBundle),\n-                (Some(name), \"static-nobundle\") => (name, NativeLibKind::StaticNoBundle),\n-                (_, s) => {\n-                    early_error(\n-                        error_format,\n-                        &format!(\n-                            \"unknown library kind `{}`, expected \\\n-                             one of dylib, framework, or static\",\n-                            s\n-                        ),\n-                    );\n+            let (name, kind) = match s.split_once('=') {\n+                None => (s, NativeLibKind::Unspecified),\n+                Some((kind, name)) => {\n+                    let kind = match kind {\n+                        \"dylib\" => NativeLibKind::Dylib,\n+                        \"framework\" => NativeLibKind::Framework,\n+                        \"static\" => NativeLibKind::StaticBundle,\n+                        \"static-nobundle\" => NativeLibKind::StaticNoBundle,\n+                        s => {\n+                            early_error(\n+                                error_format,\n+                                &format!(\n+                                    \"unknown library kind `{}`, expected \\\n+                                     one of dylib, framework, or static\",\n+                                    s\n+                                ),\n+                            );\n+                        }\n+                    };\n+                    (name.to_string(), kind)\n                 }\n             };\n             if kind == NativeLibKind::StaticNoBundle\n@@ -1556,10 +1558,11 @@ fn parse_libs(\n                      accepted on the nightly compiler\",\n                 );\n             }\n-            let mut name_parts = name.splitn(2, ':');\n-            let name = name_parts.next().unwrap();\n-            let new_name = name_parts.next();\n-            (name.to_owned(), new_name.map(|n| n.to_owned()), kind)\n+            let (name, new_name) = match name.split_once(':') {\n+                None => (name, None),\n+                Some((name, new_name)) => (name.to_string(), Some(new_name.to_owned())),\n+            };\n+            (name, new_name, kind)\n         })\n         .collect()\n }\n@@ -1580,20 +1583,13 @@ pub fn parse_externs(\n     let is_unstable_enabled = debugging_opts.unstable_options;\n     let mut externs: BTreeMap<String, ExternEntry> = BTreeMap::new();\n     for arg in matches.opt_strs(\"extern\") {\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts\n-            .next()\n-            .unwrap_or_else(|| early_error(error_format, \"--extern value must not be empty\"));\n-        let path = parts.next().map(|s| s.to_string());\n-\n-        let mut name_parts = name.splitn(2, ':');\n-        let first_part = name_parts.next();\n-        let second_part = name_parts.next();\n-        let (options, name) = match (first_part, second_part) {\n-            (Some(opts), Some(name)) => (Some(opts), name),\n-            (Some(name), None) => (None, name),\n-            (None, None) => early_error(error_format, \"--extern name must not be empty\"),\n-            _ => unreachable!(),\n+        let (name, path) = match arg.split_once('=') {\n+            None => (arg, None),\n+            Some((name, path)) => (name.to_string(), Some(path.to_string())),\n+        };\n+        let (options, name) = match name.split_once(':') {\n+            None => (None, name),\n+            Some((opts, name)) => (Some(opts), name.to_string()),\n         };\n \n         let entry = externs.entry(name.to_owned());\n@@ -1682,17 +1678,12 @@ fn parse_remap_path_prefix(\n     matches\n         .opt_strs(\"remap-path-prefix\")\n         .into_iter()\n-        .map(|remap| {\n-            let mut parts = remap.rsplitn(2, '='); // reverse iterator\n-            let to = parts.next();\n-            let from = parts.next();\n-            match (from, to) {\n-                (Some(from), Some(to)) => (PathBuf::from(from), PathBuf::from(to)),\n-                _ => early_error(\n-                    error_format,\n-                    \"--remap-path-prefix must contain '=' between FROM and TO\",\n-                ),\n-            }\n+        .map(|remap| match remap.rsplit_once('=') {\n+            None => early_error(\n+                error_format,\n+                \"--remap-path-prefix must contain '=' between FROM and TO\",\n+            ),\n+            Some((from, to)) => (PathBuf::from(from), PathBuf::from(to)),\n         })\n         .collect()\n }"}, {"sha": "36bf8634c6eeceff97229d50152f2ffc33ae53ff", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1,6 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(once_cell)]\n #![feature(or_patterns)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "74578f2dc179fee60fed90bac8c82c53afb13df3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -179,9 +179,10 @@ macro_rules! options {\n     {\n         let mut op = $defaultfn();\n         for option in matches.opt_strs($prefix) {\n-            let mut iter = option.splitn(2, '=');\n-            let key = iter.next().unwrap();\n-            let value = iter.next();\n+            let (key, value) = match option.split_once('=') {\n+                None => (option, None),\n+                Some((k, v)) => (k.to_string(), Some(v)),\n+            };\n             let option_to_lookup = key.replace(\"-\", \"_\");\n             let mut found = false;\n             for &(candidate, setter, type_desc, _) in $stat {"}, {"sha": "b60d466c3a79c7ee8d8d16b19640e431711ada99", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -460,6 +460,9 @@ symbols! {\n         document_private_items,\n         dotdot_in_tuple_patterns,\n         dotdoteq_in_patterns,\n+        dreg,\n+        dreg_low16,\n+        dreg_low8,\n         drop,\n         drop_in_place,\n         drop_types_in_const,\n@@ -544,6 +547,7 @@ symbols! {\n         format_args_capture,\n         format_args_nl,\n         freeze,\n+        freg,\n         frem_fast,\n         from,\n         from_desugaring,\n@@ -627,6 +631,7 @@ symbols! {\n         iter,\n         keyword,\n         kind,\n+        kreg,\n         label,\n         label_break_value,\n         lang,\n@@ -652,6 +657,7 @@ symbols! {\n         lint_reasons,\n         literal,\n         llvm_asm,\n+        local,\n         local_inner_macros,\n         log10f32,\n         log10f64,\n@@ -854,6 +860,9 @@ symbols! {\n         pub_restricted,\n         pure,\n         pushpop_unsafe,\n+        qreg,\n+        qreg_low4,\n+        qreg_low8,\n         quad_precision_float,\n         question_mark,\n         quote,\n@@ -875,6 +884,13 @@ symbols! {\n         reexport_test_harness_main,\n         reference,\n         reflect,\n+        reg,\n+        reg16,\n+        reg32,\n+        reg64,\n+        reg_abcd,\n+        reg_byte,\n+        reg_thumb,\n         register_attr,\n         register_tool,\n         relaxed_adts,\n@@ -1060,6 +1076,8 @@ symbols! {\n         spotlight,\n         sqrtf32,\n         sqrtf64,\n+        sreg,\n+        sreg_low16,\n         sse4a_target_feature,\n         stable,\n         staged_api,\n@@ -1215,6 +1233,8 @@ symbols! {\n         volatile_load,\n         volatile_set_memory,\n         volatile_store,\n+        vreg,\n+        vreg_low16,\n         warn,\n         wasm_import_module,\n         wasm_target_feature,\n@@ -1226,6 +1246,9 @@ symbols! {\n         wrapping_mul,\n         wrapping_sub,\n         write_bytes,\n+        xmm_reg,\n+        ymm_reg,\n+        zmm_reg,\n     }\n }\n "}, {"sha": "3c65c84b0de41b7fe0d5198018a1ddf1e699b45f", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -20,16 +20,16 @@ macro_rules! def_reg_class {\n         }\n \n         impl $arch_regclass {\n-            pub fn name(self) -> &'static str {\n+            pub fn name(self) -> rustc_span::Symbol {\n                 match self {\n-                    $(Self::$class => stringify!($class),)*\n+                    $(Self::$class => rustc_span::symbol::sym::$class,)*\n                 }\n             }\n \n-            pub fn parse(_arch: super::InlineAsmArch, name: &str) -> Result<Self, &'static str> {\n+            pub fn parse(_arch: super::InlineAsmArch, name: rustc_span::Symbol) -> Result<Self, &'static str> {\n                 match name {\n                     $(\n-                        stringify!($class) => Ok(Self::$class),\n+                        rustc_span::sym::$class => Ok(Self::$class),\n                     )*\n                     _ => Err(\"unknown register class\"),\n                 }\n@@ -327,7 +327,7 @@ pub enum InlineAsmRegClass {\n }\n \n impl InlineAsmRegClass {\n-    pub fn name(self) -> &'static str {\n+    pub fn name(self) -> Symbol {\n         match self {\n             Self::X86(r) => r.name(),\n             Self::Arm(r) => r.name(),\n@@ -422,29 +422,22 @@ impl InlineAsmRegClass {\n     }\n \n     pub fn parse(arch: InlineAsmArch, name: Symbol) -> Result<Self, &'static str> {\n-        // FIXME: use direct symbol comparison for register class names\n-        name.with(|name| {\n-            Ok(match arch {\n-                InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                    Self::X86(X86InlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::Arm => Self::Arm(ArmInlineAsmRegClass::parse(arch, name)?),\n-                InlineAsmArch::AArch64 => {\n-                    Self::AArch64(AArch64InlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                    Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?),\n-                InlineAsmArch::Hexagon => {\n-                    Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n-                    Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n-                }\n-                InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n-                InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n-            })\n+        Ok(match arch {\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n+                Self::X86(X86InlineAsmRegClass::parse(arch, name)?)\n+            }\n+            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::AArch64 => Self::AArch64(AArch64InlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n+                Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n+            }\n+            InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n+                Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n+            }\n+            InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n         })\n     }\n \n@@ -484,7 +477,7 @@ impl fmt::Display for InlineAsmRegOrRegClass {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Self::Reg(r) => write!(f, \"\\\"{}\\\"\", r.name()),\n-            Self::RegClass(r) => f.write_str(r.name()),\n+            Self::RegClass(r) => write!(f, \"{}\", r.name()),\n         }\n     }\n }"}, {"sha": "1ad57582ebafbbce87fb1a5e126b057dc791e260", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -15,6 +15,7 @@\n #![feature(never_type)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "88422395216437fba0678fcf8dc7d06df5171b8d", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -54,10 +54,7 @@ fn macos_deployment_target() -> (u32, u32) {\n     let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n     let version = deployment_target\n         .as_ref()\n-        .and_then(|s| {\n-            let mut i = s.splitn(2, '.');\n-            i.next().and_then(|a| i.next().map(|b| (a, b)))\n-        })\n+        .and_then(|s| s.split_once('.'))\n         .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok());\n \n     version.unwrap_or((10, 7))"}, {"sha": "38da1e5ea039745d57a6cfd86c604567fb162ada", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -359,8 +359,8 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                 self.tcx().sess,\n                 span,\n                 E0212,\n-                \"cannot extract an associated type from a higher-ranked trait bound \\\n-                 in this context\"\n+                \"cannot use the associated type of a trait \\\n+                 with uninferred generic parameters\"\n             );\n \n             match self.node() {"}, {"sha": "27b32b6950267ad4077b546b0ba6984caa4d5ad5", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1413,7 +1413,7 @@ impl String {\n         self.len() == 0\n     }\n \n-    /// Splits the string into two at the given index.\n+    /// Splits the string into two at the given byte index.\n     ///\n     /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and\n     /// the returned `String` contains bytes `[at, len)`. `at` must be on the"}, {"sha": "4fa48427ec6e6d548cd010af79832fc4788c06a9", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1211,7 +1211,7 @@ any high-order bits of `rhs` that would cause the shift to exceed the bitwidth o\n \n Note that this is *not* the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\n the range of the type, rather than the bits shifted out of the LHS being returned to the other end.\n-The primitive integer types all implement a `[`rotate_left`](#method.rotate_left) function,\n+The primitive integer types all implement a [`rotate_left`](#method.rotate_left) function,\n which may be what you want instead.\n \n # Examples"}, {"sha": "48c77bd13e06e2b0132386ac266d09bbd4baf1cd", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -206,8 +206,10 @@ impl f32 {\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error, yielding a more accurate result than an unfused multiply-add.\n     ///\n-    /// Using `mul_add` can be more performant than an unfused multiply-add if\n-    /// the target architecture has a dedicated `fma` CPU instruction.\n+    /// Using `mul_add` *may* be more performant than an unfused multiply-add if\n+    /// the target architecture has a dedicated `fma` CPU instruction. However,\n+    /// this is not always true, and will be heavily dependant on designing\n+    /// algorithms with specific target hardware in mind.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e823ac43fddd4dba3e448678623af48b5fea7bd7", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -206,8 +206,10 @@ impl f64 {\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error, yielding a more accurate result than an unfused multiply-add.\n     ///\n-    /// Using `mul_add` can be more performant than an unfused multiply-add if\n-    /// the target architecture has a dedicated `fma` CPU instruction.\n+    /// Using `mul_add` *may* be more performant than an unfused multiply-add if\n+    /// the target architecture has a dedicated `fma` CPU instruction. However,\n+    /// this is not always true, and will be heavily dependant on designing\n+    /// algorithms with specific target hardware in mind.\n     ///\n     /// # Examples\n     ///"}, {"sha": "fc48997f1bb2d56b3660fcc05c91968807361203", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -314,6 +314,7 @@\n #![feature(stdsimd)]\n #![feature(stmt_expr_attributes)]\n #![feature(str_internals)]\n+#![feature(str_split_once)]\n #![feature(test)]\n #![feature(thread_local)]\n #![feature(thread_local_internals)]"}, {"sha": "77369cdd35fb63726ed06d178f67fb5d8dffafcd", "filename": "library/std/src/sys/unix/kernel_copy/tests.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1,18 +1,18 @@\n-use crate::env::temp_dir;\n use crate::fs::OpenOptions;\n use crate::io;\n use crate::io::Result;\n use crate::io::SeekFrom;\n use crate::io::{BufRead, Read, Seek, Write};\n use crate::os::unix::io::AsRawFd;\n+use crate::sys_common::io::test::tmpdir;\n \n #[test]\n fn copy_specialization() -> Result<()> {\n     use crate::io::{BufReader, BufWriter};\n \n-    let path = crate::env::temp_dir();\n-    let source_path = path.join(\"copy-spec.source\");\n-    let sink_path = path.join(\"copy-spec.sink\");\n+    let tmp_path = tmpdir();\n+    let source_path = tmp_path.join(\"copy-spec.source\");\n+    let sink_path = tmp_path.join(\"copy-spec.sink\");\n \n     let result: Result<()> = try {\n         let mut source = crate::fs::OpenOptions::new()\n@@ -68,7 +68,8 @@ fn copy_specialization() -> Result<()> {\n #[bench]\n fn bench_file_to_file_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;\n-    let src_path = temp_dir().join(\"file-copy-bench-src\");\n+    let temp_path = tmpdir();\n+    let src_path = temp_path.join(\"file-copy-bench-src\");\n     let mut src = crate::fs::OpenOptions::new()\n         .create(true)\n         .truncate(true)\n@@ -78,7 +79,7 @@ fn bench_file_to_file_copy(b: &mut test::Bencher) {\n         .unwrap();\n     src.write(&vec![0u8; BYTES]).unwrap();\n \n-    let sink_path = temp_dir().join(\"file-copy-bench-sink\");\n+    let sink_path = temp_path.join(\"file-copy-bench-sink\");\n     let mut sink = crate::fs::OpenOptions::new()\n         .create(true)\n         .truncate(true)\n@@ -97,7 +98,8 @@ fn bench_file_to_file_copy(b: &mut test::Bencher) {\n #[bench]\n fn bench_file_to_socket_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;\n-    let src_path = temp_dir().join(\"pipe-copy-bench-src\");\n+    let temp_path = tmpdir();\n+    let src_path = temp_path.join(\"pipe-copy-bench-src\");\n     let mut src = OpenOptions::new()\n         .create(true)\n         .truncate(true)\n@@ -128,7 +130,8 @@ fn bench_file_to_socket_copy(b: &mut test::Bencher) {\n #[bench]\n fn bench_file_to_uds_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;\n-    let src_path = temp_dir().join(\"uds-copy-bench-src\");\n+    let temp_path = tmpdir();\n+    let src_path = temp_path.join(\"uds-copy-bench-src\");\n     let mut src = OpenOptions::new()\n         .create(true)\n         .truncate(true)"}, {"sha": "38ba0d2fbdb6b581dee3049738f1126acaf819dd", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -177,11 +177,8 @@ impl TryFrom<&str> for LookupHost {\n         }\n \n         // split the string by ':' and convert the second part to u16\n-        let mut parts_iter = s.rsplitn(2, ':');\n-        let port_str = try_opt!(parts_iter.next(), \"invalid socket address\");\n-        let host = try_opt!(parts_iter.next(), \"invalid socket address\");\n+        let (host, port_str) = try_opt!(s.rsplit_once(':'), \"invalid socket address\");\n         let port: u16 = try_opt!(port_str.parse().ok(), \"invalid port value\");\n-\n         (host, port).try_into()\n     }\n }"}, {"sha": "656d9669e81d28201b3e206054d89d15c5deaf22", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -30,6 +30,7 @@\n #![feature(termination_trait_lib)]\n #![feature(test)]\n #![feature(total_cmp)]\n+#![feature(str_split_once)]\n \n // Public reexports\n pub use self::bench::{black_box, Bencher};"}, {"sha": "e0b6eadffa119a519a8dbc3c270acd694301756c", "filename": "library/test/src/time.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Ftest%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/library%2Ftest%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftime.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -105,30 +105,24 @@ impl TimeThreshold {\n     /// value.\n     pub fn from_env_var(env_var_name: &str) -> Option<Self> {\n         let durations_str = env::var(env_var_name).ok()?;\n+        let (warn_str, critical_str) = durations_str.split_once(',').unwrap_or_else(|| {\n+            panic!(\n+                \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n+                env_var_name, durations_str\n+            )\n+        });\n \n-        // Split string into 2 substrings by comma and try to parse numbers.\n-        let mut durations = durations_str.splitn(2, ',').map(|v| {\n+        let parse_u64 = |v| {\n             u64::from_str(v).unwrap_or_else(|_| {\n                 panic!(\n                     \"Duration value in variable {} is expected to be a number, but got {}\",\n                     env_var_name, v\n                 )\n             })\n-        });\n-\n-        // Callback to be called if the environment variable has unexpected structure.\n-        let panic_on_incorrect_value = || {\n-            panic!(\n-                \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n-                env_var_name, durations_str\n-            );\n         };\n \n-        let (warn, critical) = (\n-            durations.next().unwrap_or_else(panic_on_incorrect_value),\n-            durations.next().unwrap_or_else(panic_on_incorrect_value),\n-        );\n-\n+        let warn = parse_u64(warn_str);\n+        let critical = parse_u64(critical_str);\n         if warn > critical {\n             panic!(\"Test execution warn time should be less or equal to the critical time\");\n         }"}, {"sha": "bcf7f78b8fe0decd22e26a0134a36b545f36aac9", "filename": "src/doc/unstable-book/src/language-features/const-fn.md", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -6,24 +6,5 @@ The tracking issue for this feature is: [#57563]\n \n ------------------------\n \n-The `const_fn` feature allows marking free functions and inherent methods as\n-`const`, enabling them to be called in constants contexts, with constant\n-arguments.\n-\n-## Examples\n-\n-```rust\n-#![feature(const_fn)]\n-\n-const fn double(x: i32) -> i32 {\n-    x * 2\n-}\n-\n-const FIVE: i32 = 5;\n-const TEN: i32 = double(FIVE);\n-\n-fn main() {\n-    assert_eq!(5, FIVE);\n-    assert_eq!(10, TEN);\n-}\n-```\n+The `const_fn` feature enables additional functionality not stabilized in the\n+[minimal subset of `const_fn`](https://github.com/rust-lang/rust/issues/53555)"}, {"sha": "2d58614b1397e65bffc330236016dc4898c7e2bf", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -397,12 +397,9 @@ impl Options {\n             matches\n                 .opt_strs(\"default-setting\")\n                 .iter()\n-                .map(|s| {\n-                    let mut kv = s.splitn(2, '=');\n-                    // never panics because `splitn` always returns at least one element\n-                    let k = kv.next().unwrap().to_string();\n-                    let v = kv.next().unwrap_or(\"true\").to_string();\n-                    (k, v)\n+                .map(|s| match s.split_once('=') {\n+                    None => (s.clone(), \"true\".to_string()),\n+                    Some((k, v)) => (k.to_string(), v.to_string()),\n                 })\n                 .collect(),\n         ];\n@@ -707,11 +704,9 @@ fn parse_extern_html_roots(\n ) -> Result<BTreeMap<String, String>, &'static str> {\n     let mut externs = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern-html-root-url\") {\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts.next().ok_or(\"--extern-html-root-url must not be empty\")?;\n-        let url = parts.next().ok_or(\"--extern-html-root-url must be of the form name=url\")?;\n+        let (name, url) =\n+            arg.split_once('=').ok_or(\"--extern-html-root-url must be of the form name=url\")?;\n         externs.insert(name.to_string(), url.to_string());\n     }\n-\n     Ok(externs)\n }"}, {"sha": "f2c74c46d7db8febadcc4a199011d00f2fc94287", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -98,7 +98,7 @@ crate fn render<T: Print, S: Print>(\n                            placeholder=\\\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\\\" \\\n                            type=\\\"search\\\">\\\n                 </div>\\\n-                <span class=\\\"help-button\\\">?</span>\n+                <button class=\\\"help-button\\\">?</button>\n                 <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\">\\\n                     <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n                          width=\\\"18\\\" \\"}, {"sha": "efee4c0be06d07ae7a5bde02e335f13da552e5c4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -167,10 +167,8 @@ impl Context {\n         // `style-suffix.min.css`.  Path::extension would just return `css`\n         // which would result in `style.min-suffix.css` which isn't what we\n         // want.\n-        let mut iter = filename.splitn(2, '.');\n-        let base = iter.next().unwrap();\n-        let ext = iter.next().unwrap();\n-        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext,);\n+        let (base, ext) = filename.split_once('.').unwrap();\n+        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n         self.dst.join(&filename)\n     }\n }"}, {"sha": "47847ccb5f615f5ee4a7680e221a6bb0663be7d7", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1633,10 +1633,10 @@ function defocusSearchBar() {\n \n         function makeTabHeader(tabNb, text, nbElems) {\n             if (currentTab === tabNb) {\n-                return \"<div class=\\\"selected\\\">\" + text +\n-                       \" <div class=\\\"count\\\">(\" + nbElems + \")</div></div>\";\n+                return \"<button class=\\\"selected\\\">\" + text +\n+                       \" <div class=\\\"count\\\">(\" + nbElems + \")</div></button>\";\n             }\n-            return \"<div>\" + text + \" <div class=\\\"count\\\">(\" + nbElems + \")</div></div>\";\n+            return \"<button>\" + text + \" <div class=\\\"count\\\">(\" + nbElems + \")</div></button>\";\n         }\n \n         function showResults(results) {"}, {"sha": "61905b8eca8b694dfdc308b1d566149176473563", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1176,21 +1176,22 @@ pre.rust {\n \theight: 35px;\n }\n \n-#titles > div {\n+#titles > button {\n \tfloat: left;\n \twidth: 33.3%;\n \ttext-align: center;\n \tfont-size: 18px;\n \tcursor: pointer;\n+\tborder: 0;\n \tborder-top: 2px solid;\n }\n \n-#titles > div:not(:last-child) {\n+#titles > button:not(:last-child) {\n \tmargin-right: 1px;\n \twidth: calc(33.3% - 1px);\n }\n \n-#titles > div > div.count {\n+#titles > button > div.count {\n \tdisplay: inline-block;\n \tfont-size: 16px;\n }\n@@ -1459,7 +1460,7 @@ h4 > .notable-traits {\n \t\ttop: 24px;\n \t}\n \n-\t#titles > div > div.count {\n+\t#titles > button > div.count {\n \t\tfloat: left;\n \t\twidth: 100%;\n \t}\n@@ -1565,7 +1566,7 @@ h4 > .notable-traits {\n }\n \n @media (max-width: 416px) {\n-\t#titles, #titles > div {\n+\t#titles, #titles > button {\n \t\theight: 73px;\n \t}\n "}, {"sha": "76bbe4f6201939103af39b4124a3195f881cb4f9", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -403,22 +403,22 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: #5c6773;\n }\n \n-#titles > div.selected {\n+#titles > button.selected {\n \tbackground-color: #141920 !important;\n \tborder-bottom: 1px solid #ffb44c !important;\n \tborder-top: none;\n }\n \n-#titles > div:not(.selected) {\n+#titles > button:not(.selected) {\n \tbackground-color: transparent !important;\n \tborder: none;\n }\n \n-#titles > div:hover {\n+#titles > button:hover {\n \tborder-bottom: 1px solid rgba(242, 151, 24, 0.3);\n }\n \n-#titles > div > div.count {\n+#titles > button > div.count {\n \tcolor: #888;\n }\n \n@@ -434,7 +434,7 @@ above the `@media (max-width: 700px)` rules due to a bug in the css checker */\n .block a.current.derive,.content span.macro,.content a.macro,.block a.current.macro {}\n .content .highlighted.trait {}\n .content span.struct,.content a.struct,.block a.current.struct {}\n-#titles>div:hover,#titles>div.selected {}\n+#titles>button:hover,#titles>button.selected {}\n .content .highlighted.traitalias {}\n .content span.type,.content a.type,.block a.current.type {}\n .content span.union,.content a.union,.block a.current.union {}"}, {"sha": "86ce99284eba8e3c9ece3e536639106c3e5d220c", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -352,16 +352,17 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: #777;\n }\n \n-#titles > div:not(.selected) {\n+#titles > button:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;\n }\n \n-#titles > div:hover, #titles > div.selected {\n+#titles > button:hover, #titles > button.selected {\n \tborder-top-color: #0089ff;\n+\tbackground-color: #353535;\n }\n \n-#titles > div > div.count {\n+#titles > button > div.count {\n \tcolor: #888;\n }\n "}, {"sha": "52cfdf6f7a38ac424613a4a3f84a24994843847c", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -343,16 +343,17 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: #999;\n }\n \n-#titles > div:not(.selected) {\n+#titles > button:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;\n }\n \n-#titles > div:hover, #titles > div.selected {\n+#titles > button:hover, #titles > button.selected {\n \tborder-top-color: #0089ff;\n+\tbackground-color: #353535;\n }\n \n-#titles > div > div.count {\n+#titles > button > div.count {\n \tcolor: #888;\n }\n "}, {"sha": "f851d1a2372342967a35f663337d1adc263ed352", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -16,6 +16,7 @@\n #![feature(once_cell)]\n #![feature(type_ascription)]\n #![feature(split_inclusive)]\n+#![feature(str_split_once)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "5ce64c4cd83cd0eb4f9057b075e0654fbb756d4a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -435,8 +435,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         // Try looking for methods and associated items.\n         let mut split = path_str.rsplitn(2, \"::\");\n-        // this can be an `unwrap()` because we ensure the link is never empty\n-        let (item_str, item_name) = split.next().map(|i| (i, Symbol::intern(i))).unwrap();\n+        // NB: `split`'s first element is always defined, even if the delimiter was not present.\n+        let item_str = split.next().unwrap();\n+        assert!(!item_str.is_empty());\n+        let item_name = Symbol::intern(item_str);\n         let path_root = split\n             .next()\n             .map(|f| f.to_owned())"}, {"sha": "bca69a976778275f67a5425f8ff976080e65848b", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: <I as Foo<&isize>>::A)\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n {\n     // This case is illegal because we have to instantiate `'x`, and\n     // we don't know what region to instantiate it with."}, {"sha": "1e23dd8890b9c4bde2da09661b121554c9a2b198", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: I::A)\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n {\n     // This case is illegal because we have to instantiate `'x`, and\n     // we don't know what region to instantiate it with."}, {"sha": "989624bdd93e2dafe4d034f8b5fa7ff6024bcb92", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1,8 +1,9 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-fn.rs:13:8\n    |\n LL |     x: I::A)\n    |        ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "ed30d86cb5b40ee7a43dc6a462380a52ab7f93e2", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -9,14 +9,14 @@ pub trait Foo<T> {\n \n struct SomeStruct<I: for<'x> Foo<&'x isize>> {\n     field: I::A\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n enum SomeEnum<'b, I: for<'a> Foo<&'a isize>> {\n     TupleVariant(I::A),\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n     StructVariant { field: I::A },\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n     OkVariant(&'b usize),\n }\n \n@@ -33,7 +33,7 @@ struct YetAnotherStruct<'a, I: for<'x> Foo<&'x isize>> {\n struct Why<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n     'y, 'z, 'aa, I: for<'l, 'm> Foo<&'l &'m isize>> {\n     field: I::A,\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n pub fn main() {}"}, {"sha": "cadc3e9eab1c93646072cff314a392caabc0c30c", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1,4 +1,4 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:11:12\n    |\n LL |     field: I::A\n@@ -10,7 +10,7 @@ LL | struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n LL |     field: <I as Foo<&'a isize>>::A\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:16:18\n    |\n LL |     TupleVariant(I::A),\n@@ -22,7 +22,7 @@ LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n LL |     TupleVariant(<I as Foo<&'c isize>>::A),\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:18:28\n    |\n LL |     StructVariant { field: I::A },\n@@ -36,7 +36,7 @@ LL |\n LL |     StructVariant { field: <I as Foo<&'c isize>>::A },\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:35:12\n    |\n LL |     field: I::A,\n@@ -51,3 +51,4 @@ LL |     field: <I as Foo<&'bb &'bb isize>>::A,\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "66d8613f184ac120906e7ff0cf66e05b5c42242c", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: <I as Foo<&isize>>::A);\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n@@ -30,7 +30,7 @@ struct Peach<X>(std::marker::PhantomData<X>);\n \n impl<X: for<'a> Banana<'a>> Peach<X> {\n     fn mango(&self) -> <X as Banana<'_>>::Assoc {\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n         Default::default()\n     }\n }"}, {"sha": "0a1b29de19e38335dd11de6ec5395cd131103424", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: I::A);\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n@@ -30,7 +30,7 @@ struct Peach<X>(std::marker::PhantomData<X>);\n \n impl<X: for<'a> Banana<'a>> Peach<X> {\n     fn mango(&self) -> X::Assoc {\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n         Default::default()\n     }\n }"}, {"sha": "d457f9f8468b45f3eab18a0e4c2a8b699e345712", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1,14 +1,15 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:13:32\n    |\n LL |     fn some_method(&self, arg: I::A);\n    |                                ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:32:24\n    |\n LL |     fn mango(&self) -> X::Assoc {\n    |                        ^^^^^^^^ help: use a fully qualified path with inferred lifetimes: `<X as Banana<'_>>::Assoc`\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "f2d97b7bac3ca424bc8f72b66c5a96d5dba50f24", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -3,10 +3,10 @@\n fn main() {}\n \n trait X {\n-    default const A: u8; //~ ERROR `default` is only allowed on items in `impl` definitions\n-    default const B: u8 = 0;  //~ ERROR `default` is only allowed on items in `impl` definitions\n-    default type D; //~ ERROR `default` is only allowed on items in `impl` definitions\n-    default type C: Ord; //~ ERROR `default` is only allowed on items in `impl` definitions\n-    default fn f1(); //~ ERROR `default` is only allowed on items in `impl` definitions\n-    default fn f2() {} //~ ERROR `default` is only allowed on items in `impl` definitions\n+    default const A: u8; //~ ERROR `default` is only allowed on items in trait impls\n+    default const B: u8 = 0;  //~ ERROR `default` is only allowed on items in trait impls\n+    default type D; //~ ERROR `default` is only allowed on items in trait impls\n+    default type C: Ord; //~ ERROR `default` is only allowed on items in trait impls\n+    default fn f1(); //~ ERROR `default` is only allowed on items in trait impls\n+    default fn f2() {} //~ ERROR `default` is only allowed on items in trait impls\n }"}, {"sha": "76fa860334d7346e1d48000d4c2ecaeae0708353", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -1,44 +1,44 @@\n-error: `default` is only allowed on items in `impl` definitions\n+error: `default` is only allowed on items in trait impls\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:6:5\n    |\n LL |     default const A: u8;\n    |     -------^^^^^^^^^^^^^\n    |     |\n    |     `default` because of this\n \n-error: `default` is only allowed on items in `impl` definitions\n+error: `default` is only allowed on items in trait impls\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:7:5\n    |\n LL |     default const B: u8 = 0;\n    |     -------^^^^^^^^^^^^^^^^^\n    |     |\n    |     `default` because of this\n \n-error: `default` is only allowed on items in `impl` definitions\n+error: `default` is only allowed on items in trait impls\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:8:5\n    |\n LL |     default type D;\n    |     -------^^^^^^^^\n    |     |\n    |     `default` because of this\n \n-error: `default` is only allowed on items in `impl` definitions\n+error: `default` is only allowed on items in trait impls\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:9:5\n    |\n LL |     default type C: Ord;\n    |     -------^^^^^^^^^^^^^\n    |     |\n    |     `default` because of this\n \n-error: `default` is only allowed on items in `impl` definitions\n+error: `default` is only allowed on items in trait impls\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:10:5\n    |\n LL |     default fn f1();\n    |     -------^^^^^^^^^\n    |     |\n    |     `default` because of this\n \n-error: `default` is only allowed on items in `impl` definitions\n+error: `default` is only allowed on items in trait impls\n   --> $DIR/trait-item-with-defaultness-fail-semantic.rs:11:5\n    |\n LL |     default fn f2() {}"}, {"sha": "dcfe1bb803fbae13960f68f7b06fd057a8dd36cc", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -14,6 +14,8 @@\n //! A few exceptions are allowed as there's known bugs in rustdoc, but this\n //! should catch the majority of \"broken link\" cases.\n \n+#![feature(str_split_once)]\n+\n use std::collections::hash_map::Entry;\n use std::collections::{HashMap, HashSet};\n use std::env;\n@@ -232,11 +234,12 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n         {\n             return;\n         }\n-        let mut parts = url.splitn(2, '#');\n-        let url = parts.next().unwrap();\n-        let fragment = parts.next();\n-        let mut parts = url.splitn(2, '?');\n-        let url = parts.next().unwrap();\n+        let (url, fragment) = match url.split_once('#') {\n+            None => (url, None),\n+            Some((url, fragment)) => (url, Some(fragment)),\n+        };\n+        // NB: the `splitn` always succeeds, even if the delimiter is not present.\n+        let url = url.splitn(2, '?').next().unwrap();\n \n         // Once we've plucked out the URL, parse it using our base url and\n         // then try to extract a file path."}, {"sha": "e06616a59f38c16becbd95cfbfe5759ef9898034", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -59,11 +59,10 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n             break;\n         }\n \n-        let mut parts = line.splitn(2, '=');\n-        let krate = parts.next().unwrap().trim();\n-        if parts.next().is_none() {\n-            continue;\n-        }\n+        let krate = match line.split_once('=') {\n+            None => continue,\n+            Some((krate, _)) => krate.trim(),\n+        };\n \n         // Don't worry about depending on core/std while not writing `extern crate\n         // core/std` -- that's intentional."}, {"sha": "a7199fdfce66bf9f2e8ddddad99aab276784f65b", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 59, "deletions": 42, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -85,47 +85,61 @@ fn extract_error_codes(\n     for line in f.lines() {\n         let s = line.trim();\n         if !reached_no_explanation && s.starts_with('E') && s.contains(\"include_str!(\\\"\") {\n-            if let Some(err_code) = s.splitn(2, ':').next() {\n-                let err_code = err_code.to_owned();\n-                if !error_codes.contains_key(&err_code) {\n-                    error_codes.insert(err_code.clone(), false);\n-                }\n-                // Now we extract the tests from the markdown file!\n-                let md = some_or_continue!(s.splitn(2, \"include_str!(\\\"\").nth(1));\n-                let md_file_name = some_or_continue!(md.splitn(2, \"\\\")\").next());\n-                let path = some_or_continue!(path.parent())\n-                    .join(md_file_name)\n-                    .canonicalize()\n-                    .expect(\"failed to canonicalize error explanation file path\");\n-                match read_to_string(&path) {\n-                    Ok(content) => {\n-                        if !IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str())\n-                            && !check_if_error_code_is_test_in_explanation(&content, &err_code)\n-                        {\n-                            errors.push(format!(\n-                                \"`{}` doesn't use its own error code in compile_fail example\",\n-                                path.display(),\n-                            ));\n-                        }\n-                        if check_error_code_explanation(&content, error_codes, err_code) {\n-                            errors.push(format!(\n-                                \"`{}` uses invalid tag `compile-fail` instead of `compile_fail`\",\n-                                path.display(),\n-                            ));\n-                        }\n+            let err_code = s\n+                .split_once(':')\n+                .expect(\n+                    format!(\n+                        \"Expected a line with the format `E0xxx: include_str!(\\\"..\\\")`, but got {} without a `:` delimiter\",\n+                        s,\n+                    ).as_str()\n+                )\n+                .0\n+                .to_owned();\n+            if !error_codes.contains_key(&err_code) {\n+                error_codes.insert(err_code.clone(), false);\n+            }\n+            // Now we extract the tests from the markdown file!\n+            let md_file_name = match s.split_once(\"include_str!(\\\"\") {\n+                None => continue,\n+                Some((_, md)) => match md.split_once(\"\\\")\") {\n+                    None => continue,\n+                    Some((file_name, _)) => file_name,\n+                },\n+            };\n+            let path = some_or_continue!(path.parent())\n+                .join(md_file_name)\n+                .canonicalize()\n+                .expect(\"failed to canonicalize error explanation file path\");\n+            match read_to_string(&path) {\n+                Ok(content) => {\n+                    if !IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str())\n+                        && !check_if_error_code_is_test_in_explanation(&content, &err_code)\n+                    {\n+                        errors.push(format!(\n+                            \"`{}` doesn't use its own error code in compile_fail example\",\n+                            path.display(),\n+                        ));\n                     }\n-                    Err(e) => {\n-                        eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n+                    if check_error_code_explanation(&content, error_codes, err_code) {\n+                        errors.push(format!(\n+                            \"`{}` uses invalid tag `compile-fail` instead of `compile_fail`\",\n+                            path.display(),\n+                        ));\n                     }\n                 }\n+                Err(e) => {\n+                    eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n+                }\n             }\n         } else if reached_no_explanation && s.starts_with('E') {\n-            if let Some(err_code) = s.splitn(2, ',').next() {\n-                let err_code = err_code.to_owned();\n-                if !error_codes.contains_key(&err_code) {\n-                    // this check should *never* fail!\n-                    error_codes.insert(err_code, false);\n-                }\n+            let err_code = match s.split_once(',') {\n+                None => s,\n+                Some((err_code, _)) => err_code,\n+            }\n+            .to_string();\n+            if !error_codes.contains_key(&err_code) {\n+                // this check should *never* fail!\n+                error_codes.insert(err_code, false);\n             }\n         } else if s == \";\" {\n             reached_no_explanation = true;\n@@ -137,12 +151,15 @@ fn extract_error_codes_from_tests(f: &str, error_codes: &mut HashMap<String, boo\n     for line in f.lines() {\n         let s = line.trim();\n         if s.starts_with(\"error[E\") || s.starts_with(\"warning[E\") {\n-            if let Some(err_code) = s.splitn(2, ']').next() {\n-                if let Some(err_code) = err_code.splitn(2, '[').nth(1) {\n-                    let nb = error_codes.entry(err_code.to_owned()).or_insert(false);\n-                    *nb = true;\n-                }\n-            }\n+            let err_code = match s.split_once(']') {\n+                None => continue,\n+                Some((err_code, _)) => match err_code.split_once('[') {\n+                    None => continue,\n+                    Some((_, err_code)) => err_code,\n+                },\n+            };\n+            let nb = error_codes.entry(err_code.to_owned()).or_insert(false);\n+            *nb = true;\n         }\n     }\n }"}, {"sha": "93d4d3d8047d82678686876fe0205157288df6a3", "filename": "src/tools/tidy/src/extdeps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -23,7 +23,7 @@ pub fn check(root: &Path, bad: &mut bool) {\n         }\n \n         // Extract source value.\n-        let source = line.splitn(2, '=').nth(1).unwrap().trim();\n+        let source = line.split_once('=').unwrap().1.trim();\n \n         // Ensure source is allowed.\n         if !ALLOWED_SOURCES.contains(&&*source) {"}, {"sha": "3c2880d0d5e261eaeb3063d4617eaf5502688ccc", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -112,6 +112,7 @@ pub fn check(\n                 let gate_test_str = \"gate-test-\";\n \n                 let feature_name = match line.find(gate_test_str) {\n+                    // NB: the `splitn` always succeeds, even if the delimiter is not present.\n                     Some(i) => line[i + gate_test_str.len()..].splitn(2, ' ').next().unwrap(),\n                     None => continue,\n                 };"}, {"sha": "e11d293210b0a97c566e96745c0ce8b30dfe37d5", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -3,6 +3,8 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n+#![feature(str_split_once)]\n+\n use std::fs::File;\n use std::io::Read;\n use walkdir::{DirEntry, WalkDir};"}, {"sha": "03f4efea983bb2a85bf62838708246f082a006f1", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d053ab74d8c8c9c502b678acc265f3d7e2ac49/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=65d053ab74d8c8c9c502b678acc265f3d7e2ac49", "patch": "@@ -19,14 +19,11 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     //\n                     // For now, just make sure that there is a corresponding\n                     // `$testname.rs` file.\n-                    let testname = file_path\n-                        .file_name()\n-                        .unwrap()\n-                        .to_str()\n-                        .unwrap()\n-                        .splitn(2, '.')\n-                        .next()\n-                        .unwrap();\n+                    //\n+                    // NB: We do not use file_stem() as some file names have multiple `.`s and we\n+                    // must strip all of them.\n+                    let testname =\n+                        file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n                     if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n                         println!(\"Stray file with UI testing output: {:?}\", file_path);\n                         *bad = true;"}]}