{"sha": "2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMmNjMzhmNWMwYTI3OGMxMmNiN2UzNjVkYTRiMzhiOTRiNmJlNTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-22T18:46:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T18:46:08Z"}, "message": "Rollup merge of #67299 - christianpoveda:try_immty_from_int, r=RalfJung\n\nAdd `ImmTy::try_from_(u)int` methods\n\nr? @RalfJung", "tree": {"sha": "c6d3f955ee872c44ef5078e7f27327e21b915063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d3f955ee872c44ef5078e7f27327e21b915063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/7nxCRBK7hj4Ov3rIwAAdHIIACqRqzQWAJKonm1UYM7gTSdB\neCybuOyajQ2XKHLA+qeQDwabhC4DmqbenZ/PszSdEBZqFqDxQ1chKrK5WUtNqvgp\nEWUxI+5zKofsM9At3cGJe3zsxe8tmwjTTGyxWi8Fsds62S1WYIsOOS8MaNyIjsDN\ntgbDVSsUsAmUs9Qy8zr8MxvqV0k0Tk5a7ayi4ObkkmhO8ROYAf3hclOw07WgNAF8\nRf/tns3NtDA0PHH2jbJqGmVSg35aFrpMfs+xx+GbTM+jl5TGPQmeWkJYEimkd3TV\nK/vO2aRUMyIvS6ay5LShNfQH/zTIobttHRHrXaKtLdLPOLV1dchHA35yWWafclg=\n=rWJz\n-----END PGP SIGNATURE-----\n", "payload": "tree c6d3f955ee872c44ef5078e7f27327e21b915063\nparent 97bee3a793e287162d8f10635d6769e8d28befab\nparent 683c4c788f36d67fbc873629b431105c7758dd68\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577040368 +0100\ncommitter GitHub <noreply@github.com> 1577040368 +0100\n\nRollup merge of #67299 - christianpoveda:try_immty_from_int, r=RalfJung\n\nAdd `ImmTy::try_from_(u)int` methods\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "html_url": "https://github.com/rust-lang/rust/commit/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97bee3a793e287162d8f10635d6769e8d28befab", "url": "https://api.github.com/repos/rust-lang/rust/commits/97bee3a793e287162d8f10635d6769e8d28befab", "html_url": "https://github.com/rust-lang/rust/commit/97bee3a793e287162d8f10635d6769e8d28befab"}, {"sha": "683c4c788f36d67fbc873629b431105c7758dd68", "url": "https://api.github.com/repos/rust-lang/rust/commits/683c4c788f36d67fbc873629b431105c7758dd68", "html_url": "https://github.com/rust-lang/rust/commit/683c4c788f36d67fbc873629b431105c7758dd68"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "f48d22291c6a4308ecc12aa41934e21d2186fe59", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "patch": "@@ -236,14 +236,22 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Raw { data: c as u128, size: 4 }\n     }\n \n+    #[inline]\n+    pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {\n+        let i = i.into();\n+        if truncate(i, size) == i {\n+            Some(Scalar::Raw { data: i, size: size.bytes() as u8 })\n+        } else {\n+            None\n+        }\n+    }\n+\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n         let i = i.into();\n-        assert_eq!(\n-            truncate(i, size), i,\n-            \"Unsigned value {:#x} does not fit in {} bits\", i, size.bits()\n-        );\n-        Scalar::Raw { data: i, size: size.bytes() as u8 }\n+        Self::try_from_uint(i, size).unwrap_or_else(|| {\n+            bug!(\"Unsigned value {:#x} does not fit in {} bits\", i, size.bits())\n+        })\n     }\n \n     #[inline]\n@@ -267,15 +275,23 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n+    pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {\n         let i = i.into();\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n-        assert_eq!(\n-            sign_extend(truncated, size) as i128, i,\n-            \"Signed value {:#x} does not fit in {} bits\", i, size.bits()\n-        );\n-        Scalar::Raw { data: truncated, size: size.bytes() as u8 }\n+        if sign_extend(truncated, size) as i128 == i {\n+            Some(Scalar::Raw { data: truncated, size: size.bytes() as u8 })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn from_int(i: impl Into<i128>, size: Size) -> Self {\n+        let i = i.into();\n+        Self::try_from_int(i, size).unwrap_or_else(|| {\n+            bug!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits())\n+        })\n     }\n \n     #[inline]"}, {"sha": "0af203079b153dcc820b69ac2da9589765350373", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "patch": "@@ -218,11 +218,20 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n         ImmTy { imm: val.into(), layout }\n     }\n \n+    #[inline]\n+    pub fn try_from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Option<Self> {\n+        Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))\n+    }\n     #[inline]\n     pub fn from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Self {\n         Self::from_scalar(Scalar::from_uint(i, layout.size), layout)\n     }\n \n+    #[inline]\n+    pub fn try_from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Option<Self> {\n+        Some(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))\n+    }\n+\n     #[inline]\n     pub fn from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Self {\n         Self::from_scalar(Scalar::from_int(i, layout.size), layout)"}]}