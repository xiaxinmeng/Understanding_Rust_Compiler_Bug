{"sha": "c8749f045350ef6c729ff22d4069c2ff53ad7111", "node_id": "C_kwDOAAsO6NoAKGM4NzQ5ZjA0NTM1MGVmNmM3MjlmZjIyZDQwNjljMmZmNTNhZDcxMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-02T16:22:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-02T16:22:00Z"}, "message": "Rollup merge of #100814 - gabrielBusta:port_trait_selection_diagnostics, r=davidtwco\n\n Porting 'compiler/rustc_trait_selection' to translatable diagnostics - Part 1\n\n``@rustbot`` label +A-translation\n\nr? rust-lang/diagnostics\ncc #100717", "tree": {"sha": "3d28574c85d01c3e94d4c870763d222d82960e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d28574c85d01c3e94d4c870763d222d82960e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8749f045350ef6c729ff22d4069c2ff53ad7111", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEi2oCRBK7hj4Ov3rIwAAo3QIAKdKS+AkbgMek3kZjg5jBwAB\nK0ALIMEgj/8yjunQPg7XUTgbsnB015VzzMcDiGQRUgJD1pbyudd6WggdjGkqAuss\nTDCsQwI41l2tG7CRvALJMzcdhp4eYTAGwIRNSD6QWlmgE1vRrKQ2ib8r3Cd77sM0\n0iuOpPq0I+Wxc0mZMQRk4Sh98oobBGGoySiJ/sWtESG9I4slGUyeQeFeMnal5fxf\njrt2Ncoo5+gKSW8edvkNco8RP+Pxr3zD0Ht6JJvxgCYdAukm8BUUWzjZTul8MDg7\nDd0j+eXfQ38wfJtCSRhH/QeXnEFWpSXM5F3gPWamh0rGA4T3D4kRPYxzHZ8ykl8=\n=3s+T\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d28574c85d01c3e94d4c870763d222d82960e89\nparent ed3711120500157d7ad93613266e665b0d41b69a\nparent 8e8220027711874f8bf176b14cb8e87b01342081\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662135720 +0200\ncommitter GitHub <noreply@github.com> 1662135720 +0200\n\nRollup merge of #100814 - gabrielBusta:port_trait_selection_diagnostics, r=davidtwco\n\n Porting 'compiler/rustc_trait_selection' to translatable diagnostics - Part 1\n\n``@rustbot`` label +A-translation\n\nr? rust-lang/diagnostics\ncc #100717\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8749f045350ef6c729ff22d4069c2ff53ad7111", "html_url": "https://github.com/rust-lang/rust/commit/c8749f045350ef6c729ff22d4069c2ff53ad7111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8749f045350ef6c729ff22d4069c2ff53ad7111/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed3711120500157d7ad93613266e665b0d41b69a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3711120500157d7ad93613266e665b0d41b69a", "html_url": "https://github.com/rust-lang/rust/commit/ed3711120500157d7ad93613266e665b0d41b69a"}, {"sha": "8e8220027711874f8bf176b14cb8e87b01342081", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8220027711874f8bf176b14cb8e87b01342081", "html_url": "https://github.com/rust-lang/rust/commit/8e8220027711874f8bf176b14cb8e87b01342081"}], "stats": {"total": 267, "additions": 180, "deletions": 87}, "files": [{"sha": "004e0ab18969469f04dd1c91d70dfe70e1bc791f", "filename": "compiler/rustc_error_messages/locales/en-US/trait_selection.ftl", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftrait_selection.ftl?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -0,0 +1,26 @@\n+trait_selection_dump_vtable_entries = vtable entries for `{$trait_ref}`: {$entries}\n+\n+trait_selection_unable_to_construct_constant_value = unable to construct a constant value for the unevaluated constant {$unevaluated}\n+\n+trait_selection_auto_deref_reached_recursion_limit = reached the recursion limit while auto-dereferencing `{$ty}`\n+    .label = deref recursion limit reached\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n+\n+trait_selection_empty_on_clause_in_rustc_on_unimplemented = empty `on`-clause in `#[rustc_on_unimplemented]`\n+    .label = empty on-clause here\n+\n+trait_selection_invalid_on_clause_in_rustc_on_unimplemented = invalid `on`-clause in `#[rustc_on_unimplemented]`\n+    .label = invalid on-clause here\n+\n+trait_selection_no_value_in_rustc_on_unimplemented = this attribute must have a valid value\n+    .label = expected value here\n+    .note = eg `#[rustc_on_unimplemented(message=\"foo\")]`\n+\n+trait_selection_negative_positive_conflict = found both positive and negative implementation of trait `{$trait_desc}`{$self_desc ->\n+        [none] {\"\"}\n+       *[default] {\" \"}for type `{$self_desc}`\n+    }:\n+    .negative_implementation_here = negative implementation here\n+    .negative_implementation_in_crate = negative implementation in crate `{$negative_impl_cname}`\n+    .positive_implementation_here = positive implementation here\n+    .positive_implementation_in_crate = positive implementation in crate `{$positive_impl_cname}`"}, {"sha": "05d0a2ba82cee984758cc5f498edbb5b2b23c148", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -53,6 +53,7 @@ fluent_messages! {\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     query_system => \"../locales/en-US/query_system.ftl\",\n+    trait_selection => \"../locales/en-US/trait_selection.ftl\",\n     save_analysis => \"../locales/en-US/save_analysis.ftl\",\n     ty_utils => \"../locales/en-US/ty_utils.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\","}, {"sha": "3840e79cebd84e8d577b412366a049f552270719", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -20,6 +20,12 @@ pub struct Unevaluated<'tcx, P = Option<Promoted>> {\n     pub promoted: P,\n }\n \n+impl rustc_errors::IntoDiagnosticArg for Unevaluated<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        format!(\"{:?}\", self).into_diagnostic_arg()\n+    }\n+}\n+\n impl<'tcx> Unevaluated<'tcx> {\n     #[inline]\n     pub fn shrink(self) -> Unevaluated<'tcx, ()> {"}, {"sha": "9fb91b5fe8700032585acf97aaf3b88d4a38c116", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -849,6 +849,12 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n }\n \n+impl rustc_errors::IntoDiagnosticArg for PolyTraitRef<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n /// An existential reference to a trait, where `Self` is erased.\n /// For example, the trait object `Trait<'a, 'b, X, Y>` is:\n /// ```ignore (illustrative)"}, {"sha": "a49af23be2316d7ad1a839bd27d115522d3a765e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -110,6 +110,12 @@ impl Mul<usize> for Limit {\n     }\n }\n \n+impl rustc_errors::IntoDiagnosticArg for Limit {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, HashStable_Generic)]\n pub struct Limits {\n     /// The maximum recursion limit for potentially infinitely recursive"}, {"sha": "36ab8f3bd8845f6cf6bc754c1432fafccaf365bd", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -1,6 +1,6 @@\n+use crate::errors::AutoDerefReachedRecursionLimit;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, TraitEngine};\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n@@ -222,19 +222,10 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         Limit(0) => Limit(2),\n         limit => limit * 2,\n     };\n-    struct_span_err!(\n-        tcx.sess,\n+    tcx.sess.emit_err(AutoDerefReachedRecursionLimit {\n         span,\n-        E0055,\n-        \"reached the recursion limit while auto-dereferencing `{:?}`\",\n-        ty\n-    )\n-    .span_label(span, \"deref recursion limit reached\")\n-    .help(&format!(\n-        \"consider increasing the recursion limit by adding a \\\n-             `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n+        ty,\n         suggested_limit,\n-        tcx.crate_name(LOCAL_CRATE),\n-    ))\n-    .emit();\n+        crate_name: tcx.crate_name(LOCAL_CRATE),\n+    });\n }"}, {"sha": "81977f25ca21fa39a3e6255b0c2c9e78547f8078", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -0,0 +1,102 @@\n+use rustc_errors::{fluent, ErrorGuaranteed};\n+use rustc_macros::SessionDiagnostic;\n+use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n+use rustc_session::{parse::ParseSess, Limit, SessionDiagnostic};\n+use rustc_span::{Span, Symbol};\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::dump_vtable_entries)]\n+pub struct DumpVTableEntries<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_ref: PolyTraitRef<'a>,\n+    pub entries: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::unable_to_construct_constant_value)]\n+pub struct UnableToConstructConstantValue<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub unevaluated: Unevaluated<'a>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[help]\n+#[diag(trait_selection::auto_deref_reached_recursion_limit, code = \"E0055\")]\n+pub struct AutoDerefReachedRecursionLimit<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub ty: Ty<'a>,\n+    pub suggested_limit: Limit,\n+    pub crate_name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::empty_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n+pub struct EmptyOnClauseInOnUnimplemented {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::invalid_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n+pub struct InvalidOnClauseInOnUnimplemented {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(trait_selection::no_value_in_rustc_on_unimplemented, code = \"E0232\")]\n+#[note]\n+pub struct NoValueInOnUnimplemented {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+pub struct NegativePositiveConflict<'a> {\n+    pub impl_span: Span,\n+    pub trait_desc: &'a str,\n+    pub self_desc: &'a Option<String>,\n+    pub negative_impl_span: Result<Span, Symbol>,\n+    pub positive_impl_span: Result<Span, Symbol>,\n+}\n+\n+impl SessionDiagnostic<'_> for NegativePositiveConflict<'_> {\n+    fn into_diagnostic(\n+        self,\n+        sess: &ParseSess,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::trait_selection::negative_positive_conflict);\n+        diag.set_arg(\"trait_desc\", self.trait_desc);\n+        diag.set_arg(\n+            \"self_desc\",\n+            self.self_desc.clone().map_or_else(|| String::from(\"none\"), |ty| ty),\n+        );\n+        diag.set_span(self.impl_span);\n+        diag.code(rustc_errors::error_code!(E0751));\n+        match self.negative_impl_span {\n+            Ok(span) => {\n+                diag.span_label(span, fluent::trait_selection::negative_implementation_here);\n+            }\n+            Err(cname) => {\n+                diag.note(fluent::trait_selection::negative_implementation_in_crate);\n+                diag.set_arg(\"negative_impl_cname\", cname.to_string());\n+            }\n+        }\n+        match self.positive_impl_span {\n+            Ok(span) => {\n+                diag.span_label(span, fluent::trait_selection::positive_implementation_here);\n+            }\n+            Err(cname) => {\n+                diag.note(fluent::trait_selection::positive_implementation_in_crate);\n+                diag.set_arg(\"positive_impl_cname\", cname.to_string());\n+            }\n+        }\n+        diag\n+    }\n+}"}, {"sha": "f039b1fca1817d1069e24d0f489bd659c644b259", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -37,5 +37,6 @@ extern crate rustc_middle;\n extern crate smallvec;\n \n pub mod autoderef;\n+pub mod errors;\n pub mod infer;\n pub mod traits;"}, {"sha": "1223c7ced7abcb9e04bdaeb1b879ec240092bcf7", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -3,6 +3,7 @@\n \n use super::*;\n \n+use crate::errors::UnableToConstructConstantValue;\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n@@ -830,8 +831,11 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 Ok(None) => {\n                                     let tcx = self.tcx;\n                                     let def_id = unevaluated.def.did;\n-                                    let reported = tcx.sess.struct_span_err(tcx.def_span(def_id), &format!(\"unable to construct a constant value for the unevaluated constant {:?}\", unevaluated)).emit();\n-\n+                                    let reported =\n+                                        tcx.sess.emit_err(UnableToConstructConstantValue {\n+                                            span: tcx.def_span(def_id),\n+                                            unevaluated,\n+                                        });\n                                     Err(ErrorHandled::Reported(reported))\n                                 }\n                                 Err(err) => Err(err),"}, {"sha": "14e078096783e39239cdb186325910f9df61dd8b", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -23,6 +23,7 @@ mod structural_match;\n mod util;\n pub mod wf;\n \n+use crate::errors::DumpVTableEntries;\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::error_reporting::InferCtxtExt as _;\n@@ -763,8 +764,11 @@ fn dump_vtable_entries<'tcx>(\n     trait_ref: ty::PolyTraitRef<'tcx>,\n     entries: &[VtblEntry<'tcx>],\n ) {\n-    let msg = format!(\"vtable entries for `{}`: {:#?}\", trait_ref, entries);\n-    tcx.sess.struct_span_err(sp, &msg).emit();\n+    tcx.sess.emit_err(DumpVTableEntries {\n+        span: sp,\n+        trait_ref,\n+        entries: format!(\"{:#?}\", entries),\n+    });\n }\n \n fn own_existential_vtable_entries<'tcx>("}, {"sha": "3d8840e9e7421b22de38bffe66d9ebb0a4eec556", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -8,6 +8,10 @@ use rustc_parse_format::{ParseMode, Parser, Piece, Position};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+use crate::errors::{\n+    EmptyOnClauseInOnUnimplemented, InvalidOnClauseInOnUnimplemented, NoValueInOnUnimplemented,\n+};\n+\n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);\n \n@@ -35,21 +39,6 @@ pub struct OnUnimplementedNote {\n     pub append_const_msg: Option<Option<Symbol>>,\n }\n \n-fn parse_error(\n-    tcx: TyCtxt<'_>,\n-    span: Span,\n-    message: &str,\n-    label: &str,\n-    note: Option<&str>,\n-) -> ErrorGuaranteed {\n-    let mut diag = struct_span_err!(tcx.sess, span, E0232, \"{}\", message);\n-    diag.span_label(span, label);\n-    if let Some(note) = note {\n-        diag.note(note);\n-    }\n-    diag.emit()\n-}\n-\n impl<'tcx> OnUnimplementedDirective {\n     fn parse(\n         tcx: TyCtxt<'tcx>,\n@@ -70,25 +59,9 @@ impl<'tcx> OnUnimplementedDirective {\n         } else {\n             let cond = item_iter\n                 .next()\n-                .ok_or_else(|| {\n-                    parse_error(\n-                        tcx,\n-                        span,\n-                        \"empty `on`-clause in `#[rustc_on_unimplemented]`\",\n-                        \"empty on-clause here\",\n-                        None,\n-                    )\n-                })?\n+                .ok_or_else(|| tcx.sess.emit_err(EmptyOnClauseInOnUnimplemented { span }))?\n                 .meta_item()\n-                .ok_or_else(|| {\n-                    parse_error(\n-                        tcx,\n-                        span,\n-                        \"invalid `on`-clause in `#[rustc_on_unimplemented]`\",\n-                        \"invalid on-clause here\",\n-                        None,\n-                    )\n-                })?;\n+                .ok_or_else(|| tcx.sess.emit_err(InvalidOnClauseInOnUnimplemented { span }))?;\n             attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |cfg| {\n                 if let Some(value) = cfg.value && let Err(guar) = parse_value(value) {\n                     errored = Some(guar);\n@@ -150,13 +123,7 @@ impl<'tcx> OnUnimplementedDirective {\n             }\n \n             // nothing found\n-            parse_error(\n-                tcx,\n-                item.span(),\n-                \"this attribute must have a valid value\",\n-                \"expected value here\",\n-                Some(r#\"eg `#[rustc_on_unimplemented(message=\"foo\")]`\"#),\n-            );\n+            tcx.sess.emit_err(NoValueInOnUnimplemented { span: item.span() });\n         }\n \n         if let Some(reported) = errored {"}, {"sha": "7d299e30ae041290a3760f6295a0fff0da46c452", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8749f045350ef6c729ff22d4069c2ff53ad7111/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=c8749f045350ef6c729ff22d4069c2ff53ad7111", "patch": "@@ -12,6 +12,7 @@\n pub mod specialization_graph;\n use specialization_graph::GraphExt;\n \n+use crate::errors::NegativePositiveConflict;\n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n@@ -327,35 +328,13 @@ fn report_negative_positive_conflict(\n     positive_impl_def_id: DefId,\n     sg: &mut specialization_graph::Graph,\n ) {\n-    let impl_span = tcx.def_span(local_impl_def_id);\n-\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        impl_span,\n-        E0751,\n-        \"found both positive and negative implementation of trait `{}`{}:\",\n-        overlap.trait_desc,\n-        overlap.self_desc.clone().map_or_else(String::new, |ty| format!(\" for type `{}`\", ty))\n-    );\n-\n-    match tcx.span_of_impl(negative_impl_def_id) {\n-        Ok(span) => {\n-            err.span_label(span, \"negative implementation here\");\n-        }\n-        Err(cname) => {\n-            err.note(&format!(\"negative implementation in crate `{}`\", cname));\n-        }\n-    }\n-\n-    match tcx.span_of_impl(positive_impl_def_id) {\n-        Ok(span) => {\n-            err.span_label(span, \"positive implementation here\");\n-        }\n-        Err(cname) => {\n-            err.note(&format!(\"positive implementation in crate `{}`\", cname));\n-        }\n-    }\n-\n+    let mut err = tcx.sess.create_err(NegativePositiveConflict {\n+        impl_span: tcx.def_span(local_impl_def_id),\n+        trait_desc: &overlap.trait_desc,\n+        self_desc: &overlap.self_desc,\n+        negative_impl_span: tcx.span_of_impl(negative_impl_def_id),\n+        positive_impl_span: tcx.span_of_impl(positive_impl_def_id),\n+    });\n     sg.has_errored = Some(err.emit());\n }\n "}]}