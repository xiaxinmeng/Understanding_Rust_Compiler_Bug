{"sha": "cebc9b359db16ea0370fb9f9013507a559e33bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYmM5YjM1OWRiMTZlYTAzNzBmYjlmOTAxMzUwN2E1NTllMzNiY2Q=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-18T17:48:57Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-18T17:48:57Z"}, "message": "Remove dead rustboot code.", "tree": {"sha": "2a935143c218ecbbecb3bbbb3ec2a35c9cdd85b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a935143c218ecbbecb3bbbb3ec2a35c9cdd85b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cebc9b359db16ea0370fb9f9013507a559e33bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cebc9b359db16ea0370fb9f9013507a559e33bcd", "html_url": "https://github.com/rust-lang/rust/commit/cebc9b359db16ea0370fb9f9013507a559e33bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cebc9b359db16ea0370fb9f9013507a559e33bcd/comments", "author": null, "committer": null, "parents": [{"sha": "f4e049c41571617de62537aeaadefee9546c6816", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e049c41571617de62537aeaadefee9546c6816", "html_url": "https://github.com/rust-lang/rust/commit/f4e049c41571617de62537aeaadefee9546c6816"}], "stats": {"total": 133, "additions": 3, "deletions": 130}, "files": [{"sha": "efb3d3eab374b5f8aac0883989ff07862b6461ec", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=cebc9b359db16ea0370fb9f9013507a559e33bcd", "patch": "@@ -103,7 +103,7 @@ rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n \n     uintptr_t main_args[4] = {0, 0, 0, (uintptr_t)args->args};\n     dom->root_task->start(crate->get_exit_task_glue(),\n-                          crate->abi_tag, main_fn,\n+                          main_fn,\n                           (uintptr_t)&main_args, sizeof(main_args));\n \n     int ret = dom->start_main_loop();"}, {"sha": "13295f5ae7d2c812f2f61418ad07cc75d2545915", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=cebc9b359db16ea0370fb9f9013507a559e33bcd", "patch": "@@ -137,126 +137,9 @@ rust_task::~rust_task()\n \n void\n rust_task::start(uintptr_t exit_task_glue,\n-                 uintptr_t spawnee_abi,\n                  uintptr_t spawnee_fn,\n                  uintptr_t args,\n                  size_t callsz)\n-{\n-    if (spawnee_abi == ABI_X86_RUSTBOOT_CDECL)\n-        start_rustboot(exit_task_glue, spawnee_fn, args, callsz);\n-    else\n-        start_rustc(exit_task_glue, spawnee_fn, args, callsz);\n-}\n-\n-void\n-rust_task::start_rustboot(uintptr_t exit_task_glue,\n-                          uintptr_t spawnee_fn,\n-                          uintptr_t args,\n-                          size_t callsz)\n-{\n-    LOGPTR(dom, \"exit-task glue\", exit_task_glue);\n-    LOGPTR(dom, \"from spawnee\", spawnee_fn);\n-\n-    // Set sp to last uintptr_t-sized cell of segment\n-    rust_sp -= sizeof(uintptr_t);\n-\n-    // NB: Darwin needs \"16-byte aligned\" stacks *at the point of the call\n-    // instruction in the caller*. This means that the address at which the\n-    // word before retpc is pushed must always be 16-byte aligned.\n-    //\n-    // see: \"Mac OS X ABI Function Call Guide\"\n-\n-\n-    // Begin synthesizing frames. There are two: a \"fully formed\"\n-    // exit-task frame at the top of the stack -- that pretends to be\n-    // mid-execution -- and a just-starting frame beneath it that\n-    // starts executing the first instruction of the spawnee. The\n-    // spawnee *thinks* it was called by the exit-task frame above\n-    // it. It wasn't; we put that fake frame in place here, but the\n-    // illusion is enough for the spawnee to return to the exit-task\n-    // frame when it's done, and exit.\n-    uintptr_t *spp = (uintptr_t *)rust_sp;\n-\n-\n-    // The exit_task_glue frame we synthesize above the frame we activate:\n-    make_aligned_room_for_bytes(spp, 2 * sizeof(uintptr_t));\n-    *spp-- = (uintptr_t) 0;          // closure-or-obj\n-    *spp-- = (uintptr_t) this;       // task\n-    I(dom, spp == align_down(spp));\n-    *spp-- = (uintptr_t) 0x0;        // output\n-    *spp-- = (uintptr_t) 0x0;        // retpc\n-\n-    uintptr_t exit_task_frame_base = 0;\n-\n-    for (size_t j = 0; j < n_callee_saves; ++j) {\n-\n-        // We want 'frame_base' to point to the old fp in this (exit-task)\n-        // frame, because we're going to inject this frame-pointer into\n-        // the callee-save frame pointer value in the *next* (spawnee)\n-        // frame. A cheap trick, but this means the spawnee frame will\n-        // restore the proper frame pointer of the glue frame as it runs\n-        // its epilogue.\n-        if (j == callee_save_fp)\n-            exit_task_frame_base = (uintptr_t)spp;\n-\n-        *spp-- = 0;\n-    }\n-\n-    *spp-- = (uintptr_t) dom->root_crate;  // crate ptr\n-    *spp-- = (uintptr_t) 0;                // frame_glue_fns\n-\n-    I(dom, args);\n-    make_aligned_room_for_bytes(spp, callsz - sizeof(uintptr_t));\n-\n-    // Copy args from spawner to spawnee.\n-    uintptr_t *src = (uintptr_t *)args;\n-    src += 1;                  // spawn-call output slot\n-    src += 1;                  // spawn-call task slot\n-    src += 1;                  // spawn-call closure-or-obj slot\n-\n-    // Undo previous sp-- so we're pointing at the last word pushed.\n-    ++spp;\n-\n-    // Memcpy all but the task, output and env pointers\n-    callsz -= (3 * sizeof(uintptr_t));\n-    spp = (uintptr_t*) (((uintptr_t)spp) - callsz);\n-    memcpy(spp, src, callsz);\n-\n-    // Move sp down to point to last implicit-arg cell (env).\n-    spp--;\n-\n-    // The *implicit* incoming args to the spawnee frame we're\n-    // activating:\n-    *spp-- = (uintptr_t) 0x0;               // closure-or-obj\n-\n-    // in CDECL mode we write the task + outptr to the spawnee stack.\n-    *spp-- = (uintptr_t) this;            // task\n-    *spp-- = (uintptr_t) 0;               // output addr\n-\n-    I(dom, spp+1 == align_down(spp+1));\n-    *spp-- = (uintptr_t) exit_task_glue;  // retpc\n-\n-    // The context the activate_glue needs to switch stack.\n-    *spp-- = (uintptr_t) spawnee_fn;      // instruction to start at\n-    for (size_t j = 0; j < n_callee_saves; ++j) {\n-        // callee-saves to carry in when we activate\n-        if (j == callee_save_fp)\n-            *spp-- = exit_task_frame_base;\n-        else\n-            *spp-- = (uintptr_t)NULL;\n-    }\n-\n-    // Back up one, we overshot where sp should be.\n-    rust_sp = (uintptr_t) (spp+1);\n-\n-    transition(&dom->newborn_tasks, &dom->running_tasks);\n-}\n-\n-void\n-rust_task::start_rustc(uintptr_t exit_task_glue,\n-                       uintptr_t spawnee_fn,\n-                       uintptr_t args,\n-                       size_t callsz)\n {\n     LOGPTR(dom, \"exit-task glue\", exit_task_glue);\n     LOGPTR(dom, \"from spawnee\", spawnee_fn);"}, {"sha": "88d99879ace0ea0705c80914ae9aa56527777b22", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=cebc9b359db16ea0370fb9f9013507a559e33bcd", "patch": "@@ -56,18 +56,9 @@ rust_task : public maybe_proxy<rust_task>,\n     ~rust_task();\n \n     void start(uintptr_t exit_task_glue,\n-               uintptr_t spawnee_abi,\n                uintptr_t spawnee_fn,\n                uintptr_t args,\n                size_t callsz);\n-    void start_rustboot(uintptr_t exit_task_glue,\n-                        uintptr_t spawnee_fn,\n-                        uintptr_t args,\n-                        size_t callsz);\n-    void start_rustc(uintptr_t exit_task_glue,\n-                     uintptr_t spawnee_fn,\n-                     uintptr_t args,\n-                     size_t callsz);\n     void grow(size_t n_frame_bytes);\n     bool running();\n     bool blocked();"}, {"sha": "a1569f07e45042ff8437a21a88402c92dbfddada", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=cebc9b359db16ea0370fb9f9013507a559e33bcd", "patch": "@@ -578,7 +578,7 @@ upcall_start_task(rust_task *spawner,\n              \", spawnee 0x%\" PRIxPTR\n              \", callsz %\" PRIdPTR \")\", task->name, task, exit_task_glue,\n              spawnee_fn, callsz);\n-    task->start(exit_task_glue, spawnee_abi, spawnee_fn,\n+    task->start(exit_task_glue, spawnee_fn,\n                 spawner->rust_sp, callsz);\n     return task;\n }\n@@ -642,7 +642,7 @@ upcall_start_thread(rust_task *task,\n               \", callsz %\" PRIdPTR \")\",\n               exit_task_glue, spawnee_fn, callsz);\n     rust_task *child_task = child_task_handle->referent();\n-    child_task->start(exit_task_glue, spawnee_abi, spawnee_fn,\n+    child_task->start(exit_task_glue, spawnee_fn,\n                       task->rust_sp, callsz);\n #if defined(__WIN32__)\n     HANDLE thread;"}, {"sha": "1cde532e94a51abe7a9934c821037d6e1f9d5f7f", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cebc9b359db16ea0370fb9f9013507a559e33bcd/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=cebc9b359db16ea0370fb9f9013507a559e33bcd", "patch": "@@ -54,7 +54,6 @@ rust_task_test::worker::run() {\n         kernel->create_domain(crate, \"test\");\n     rust_dom *domain = handle->referent();\n     domain->root_task->start(crate->get_exit_task_glue(),\n-                             ABI_X86_RUSTBOOT_CDECL,\n                              (uintptr_t)&task_entry, (uintptr_t)NULL, 0);\n     domain->start_main_loop();\n     kernel->destroy_domain(domain);"}]}