{"sha": "631fa2b8c059ecf22b69941d700d9c9fce0ed47f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMWZhMmI4YzA1OWVjZjIyYjY5OTQxZDcwMGQ5YzlmY2UwZWQ0N2Y=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2016-03-03T06:05:14Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2016-03-03T06:05:14Z"}, "message": "Fix comments and OSX build", "tree": {"sha": "aa02452a17f9fb8df9dd19e4f957d55a5ba0d76c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa02452a17f9fb8df9dd19e4f957d55a5ba0d76c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/631fa2b8c059ecf22b69941d700d9c9fce0ed47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/631fa2b8c059ecf22b69941d700d9c9fce0ed47f", "html_url": "https://github.com/rust-lang/rust/commit/631fa2b8c059ecf22b69941d700d9c9fce0ed47f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/631fa2b8c059ecf22b69941d700d9c9fce0ed47f/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728d9115e894bd3c8fc3ae03230ea46f85467c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/728d9115e894bd3c8fc3ae03230ea46f85467c04", "html_url": "https://github.com/rust-lang/rust/commit/728d9115e894bd3c8fc3ae03230ea46f85467c04"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "f8e3b58bb3e9565f994faca1790966a9fb3e87b0", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/631fa2b8c059ecf22b69941d700d9c9fce0ed47f/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631fa2b8c059ecf22b69941d700d9c9fce0ed47f/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=631fa2b8c059ecf22b69941d700d9c9fce0ed47f", "patch": "@@ -1152,9 +1152,16 @@ mod tests {\n         t!(listener.set_nonblocking(true));\n         t!(listener.set_nonblocking(false));\n \n-        let stream = t!(TcpStream::connect(&(\"localhost\", addr.port())));\n+        let mut stream = t!(TcpStream::connect(&(\"localhost\", addr.port())));\n \n-        t!(stream.set_nonblocking(true));\n         t!(stream.set_nonblocking(false));\n+        t!(stream.set_nonblocking(true));\n+\n+        let mut buf = [0];\n+        match stream.read(&mut buf) {\n+            Ok(_) => panic!(\"expected error\"),\n+            Err(ref e) if e.kind() == ErrorKind::WouldBlock => {}\n+            Err(e) => panic!(\"unexpected error {}\", e),\n+        }\n     }\n }"}, {"sha": "d16380a96b29113b53e0d7ff827076bdbee815b9", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/631fa2b8c059ecf22b69941d700d9c9fce0ed47f/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631fa2b8c059ecf22b69941d700d9c9fce0ed47f/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=631fa2b8c059ecf22b69941d700d9c9fce0ed47f", "patch": "@@ -25,6 +25,23 @@ use sys::net::netc as c;\n use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n+#[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n+          target_os = \"ios\", target_os = \"macos\",\n+          target_os = \"openbsd\"))]\n+use sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n+#[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n+              target_os = \"ios\", target_os = \"macos\",\n+              target_os = \"openbsd\")))]\n+use sys::net::netc::IPV6_ADD_MEMBERSHIP;\n+#[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n+          target_os = \"ios\", target_os = \"macos\",\n+          target_os = \"openbsd\"))]\n+use sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n+#[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n+              target_os = \"ios\", target_os = \"macos\",\n+              target_os = \"openbsd\")))]\n+use sys::net::netc::IPV6_DROP_MEMBERSHIP;\n+\n ////////////////////////////////////////////////////////////////////////////////\n // sockaddr and misc bindings\n ////////////////////////////////////////////////////////////////////////////////\n@@ -40,7 +57,8 @@ pub fn setsockopt<T>(sock: &Socket, opt: c_int, val: c_int,\n }\n \n pub fn getsockopt<T: Copy>(sock: &Socket, opt: c_int,\n-                       val: c_int) -> io::Result<T> { unsafe {\n+                       val: c_int) -> io::Result<T> {\n+    unsafe {\n         let mut slot: T = mem::zeroed();\n         let mut len = mem::size_of::<T>() as c::socklen_t;\n         try!(cvt(c::getsockopt(*sock.as_inner(), opt, val,\n@@ -532,7 +550,7 @@ impl UdpSocket {\n             ipv6mr_multiaddr: *multiaddr.as_inner(),\n             ipv6mr_interface: to_ipv6mr_interface(interface),\n         };\n-        setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_ADD_MEMBERSHIP, mreq)\n+        setsockopt(&self.inner, c::IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, mreq)\n     }\n \n     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr)\n@@ -550,7 +568,7 @@ impl UdpSocket {\n             ipv6mr_multiaddr: *multiaddr.as_inner(),\n             ipv6mr_interface: to_ipv6mr_interface(interface),\n         };\n-        setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_DROP_MEMBERSHIP, mreq)\n+        setsockopt(&self.inner, c::IPPROTO_IPV6, IPV6_DROP_MEMBERSHIP, mreq)\n     }\n \n     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {"}]}