{"sha": "e38b3eb0b56c7314980649d35b21b61e74a41bdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOGIzZWIwYjU2YzczMTQ5ODA2NDlkMzViMjFiNjFlNzRhNDFiZGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-27T20:56:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-27T20:56:24Z"}, "message": "Rollup merge of #82596 - matklad:rwlock, r=sfackler\n\nclarify RW lock's priority gotcha\n\nIn particular, the following program works on Linux, but deadlocks on\nmac:\n\n```rust\n    use std::{\n        sync::{Arc, RwLock},\n        thread,\n        time::Duration,\n    };\n\n    fn main() {\n        let lock = Arc::new(RwLock::new(()));\n\n        let r1 = thread::spawn({\n            let lock = Arc::clone(&lock);\n            move || {\n                let _rg = lock.read();\n                eprintln!(\"r1/1\");\n                sleep(1000);\n\n                let _rg = lock.read();\n                eprintln!(\"r1/2\");\n\n                sleep(5000);\n            }\n        });\n        sleep(100);\n        let w = thread::spawn({\n            let lock = Arc::clone(&lock);\n            move || {\n                let _wg = lock.write();\n                eprintln!(\"w\");\n            }\n        });\n        sleep(100);\n        let r2 = thread::spawn({\n            let lock = Arc::clone(&lock);\n            move || {\n                let _rg = lock.read();\n                eprintln!(\"r2\");\n                sleep(2000);\n            }\n        });\n\n        r1.join().unwrap();\n        r2.join().unwrap();\n        w.join().unwrap();\n    }\n\n    fn sleep(ms: u64) {\n        std::thread::sleep(Duration::from_millis(ms))\n    }\n```\n\nContext: I was completely mystified by a my CI deadlocking on mac ([here](https://github.com/matklad/xshell/pull/7)), until ``@azdavis`` debugged the issue. See a stand-alone reproduciton here: https://github.com/matklad/xshell/pull/15", "tree": {"sha": "9ba99a7fb03b2430b974c862d28192f57d476ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ba99a7fb03b2430b974c862d28192f57d476ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38b3eb0b56c7314980649d35b21b61e74a41bdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOrH5CRBK7hj4Ov3rIwAAdHIIAG4hzyv9enwFN0VADE8m/DEB\nOe+4+byiWcDwe+Aa4OTKlbqv22YldF9Ks9t7UGbWadjq4p4h5zRNc35i0m+wlPar\n/FxPILIXqpx63xbfxAaC8BO2eLLDHJ+p0vniLaOPq4Lulvy/s2Ic6D/nIDzL/rb2\nmy8l+m+ku4weA3KJYpw+F/VE3NhYOh1PhPbxC9X7Gw2Ytl4QE/84Ax+L+73112EM\nDokGmfqUviuFYMGloRCx/mO2yhb6hh3PPLuAymVDyELPSGO1DSJjcEmc8rLK9ppu\naMeMdLAt5tc4901YIGJk97MOEDDdrY8kn5rlhzKBXH05GL7fAD/QWU1Az1M41uA=\n=T22y\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ba99a7fb03b2430b974c862d28192f57d476ece\nparent a70be0bec92d59674348b22790b1b3681415d4e3\nparent 261c952ba66f130096edf530fae50bd0640e09e4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614459384 +0100\ncommitter GitHub <noreply@github.com> 1614459384 +0100\n\nRollup merge of #82596 - matklad:rwlock, r=sfackler\n\nclarify RW lock's priority gotcha\n\nIn particular, the following program works on Linux, but deadlocks on\nmac:\n\n```rust\n    use std::{\n        sync::{Arc, RwLock},\n        thread,\n        time::Duration,\n    };\n\n    fn main() {\n        let lock = Arc::new(RwLock::new(()));\n\n        let r1 = thread::spawn({\n            let lock = Arc::clone(&lock);\n            move || {\n                let _rg = lock.read();\n                eprintln!(\"r1/1\");\n                sleep(1000);\n\n                let _rg = lock.read();\n                eprintln!(\"r1/2\");\n\n                sleep(5000);\n            }\n        });\n        sleep(100);\n        let w = thread::spawn({\n            let lock = Arc::clone(&lock);\n            move || {\n                let _wg = lock.write();\n                eprintln!(\"w\");\n            }\n        });\n        sleep(100);\n        let r2 = thread::spawn({\n            let lock = Arc::clone(&lock);\n            move || {\n                let _rg = lock.read();\n                eprintln!(\"r2\");\n                sleep(2000);\n            }\n        });\n\n        r1.join().unwrap();\n        r2.join().unwrap();\n        w.join().unwrap();\n    }\n\n    fn sleep(ms: u64) {\n        std::thread::sleep(Duration::from_millis(ms))\n    }\n```\n\nContext: I was completely mystified by a my CI deadlocking on mac ([here](https://github.com/matklad/xshell/pull/7)), until ``@azdavis`` debugged the issue. See a stand-alone reproduciton here: https://github.com/matklad/xshell/pull/15\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38b3eb0b56c7314980649d35b21b61e74a41bdc", "html_url": "https://github.com/rust-lang/rust/commit/e38b3eb0b56c7314980649d35b21b61e74a41bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38b3eb0b56c7314980649d35b21b61e74a41bdc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70be0bec92d59674348b22790b1b3681415d4e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70be0bec92d59674348b22790b1b3681415d4e3", "html_url": "https://github.com/rust-lang/rust/commit/a70be0bec92d59674348b22790b1b3681415d4e3"}, {"sha": "261c952ba66f130096edf530fae50bd0640e09e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/261c952ba66f130096edf530fae50bd0640e09e4", "html_url": "https://github.com/rust-lang/rust/commit/261c952ba66f130096edf530fae50bd0640e09e4"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "0298f59228cbeb45420d5a01673f3c32c54d6431", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e38b3eb0b56c7314980649d35b21b61e74a41bdc/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38b3eb0b56c7314980649d35b21b61e74a41bdc/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=e38b3eb0b56c7314980649d35b21b61e74a41bdc", "patch": "@@ -23,7 +23,9 @@ use crate::sys_common::rwlock as sys;\n ///\n /// The priority policy of the lock is dependent on the underlying operating\n /// system's implementation, and this type does not guarantee that any\n-/// particular policy will be used.\n+/// particular policy will be used. In particular, a writer which is waiting to\n+/// acquire the lock in `write` might or might not block concurrent calls to\n+/// `read`.\n ///\n /// The type parameter `T` represents the data that this lock protects. It is\n /// required that `T` satisfies [`Send`] to be shared across threads and"}]}