{"sha": "625375400cdd172877e81c3ce44ce68f2011af2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNTM3NTQwMGNkZDE3Mjg3N2U4MWMzY2U0NGNlNjhmMjAxMWFmMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T03:40:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T03:40:33Z"}, "message": "Auto merge of #67575 - Centril:rollup-feikoir, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #67337 (Ensure that evaluating or validating a constant never reads from a static)\n - #67543 (Add regression tests for fixed ICEs)\n - #67547 (Cleanup err codes)\n - #67551 (Add long error code explanation message for E0627)\n - #67561 (remove `description` from `Error` impls in docs)\n - #67569 (Clean up unsafety in char::encode_utf8)\n - #67572 (Use the chocolatey CDN directly to avoid the flaky API)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2c80e84603e8cc5e868fe94406e6661baca703c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c80e84603e8cc5e868fe94406e6661baca703c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/625375400cdd172877e81c3ce44ce68f2011af2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/625375400cdd172877e81c3ce44ce68f2011af2d", "html_url": "https://github.com/rust-lang/rust/commit/625375400cdd172877e81c3ce44ce68f2011af2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/625375400cdd172877e81c3ce44ce68f2011af2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cd03dee2b57216b5c95084a0b46de130946ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cd03dee2b57216b5c95084a0b46de130946ad7", "html_url": "https://github.com/rust-lang/rust/commit/a4cd03dee2b57216b5c95084a0b46de130946ad7"}, {"sha": "a76d67f22f08abf355a1b6abd22b8e2b7db700eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76d67f22f08abf355a1b6abd22b8e2b7db700eb", "html_url": "https://github.com/rust-lang/rust/commit/a76d67f22f08abf355a1b6abd22b8e2b7db700eb"}], "stats": {"total": 606, "additions": 491, "deletions": 115}, "files": [{"sha": "9e899ba9d89479a6291f38ff9d53e5c1d3147144", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -12,10 +12,14 @@ IFS=$'\\n\\t'\n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n if isWindows; then\n-    for RETRY_COUNT in 1 2 3 4 5 6 7 8 9 10; do\n-        choco install msys2 \\\n-            --params=\"/InstallDir:$(ciCheckoutPath)/msys2 /NoPath\" -y --no-progress \\\n-            && mkdir -p \"$(ciCheckoutPath)/msys2/home/${USERNAME}\" \\\n-            && ciCommandAddPath \"$(ciCheckoutPath)/msys2/usr/bin\" && break\n-    done\n+    # Pre-followed the api/v2 URL to the CDN since the API can be a bit flakey\n+    curl -sSL https://packages.chocolatey.org/msys2.20190524.0.0.20191030.nupkg > \\\n+        msys2.nupkg\n+    curl -sSL https://packages.chocolatey.org/chocolatey-core.extension.1.3.5.1.nupkg > \\\n+        chocolatey-core.extension.nupkg\n+    choco install -s . msys2 \\\n+        --params=\"/InstallDir:$(ciCheckoutPath)/msys2 /NoPath\" -y --no-progress\n+    rm msys2.nupkg chocolatey-core.extension.nupkg\n+    mkdir -p \"$(ciCheckoutPath)/msys2/home/${USERNAME}\"\n+    ciCommandAddPath \"$(ciCheckoutPath)/msys2/usr/bin\"\n fi"}, {"sha": "fe5d16862a6a673e1d9bdf93bd6a4affa49c77d2", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -434,36 +434,35 @@ impl char {\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n         let code = self as u32;\n-        // SAFETY: each arm checks the size of the slice and only uses `get_unchecked` unsafe ops\n-        unsafe {\n-            let len = if code < MAX_ONE_B && !dst.is_empty() {\n-                *dst.get_unchecked_mut(0) = code as u8;\n-                1\n-            } else if code < MAX_TWO_B && dst.len() >= 2 {\n-                *dst.get_unchecked_mut(0) = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *dst.get_unchecked_mut(1) = (code & 0x3F) as u8 | TAG_CONT;\n-                2\n-            } else if code < MAX_THREE_B && dst.len() >= 3 {\n-                *dst.get_unchecked_mut(0) = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *dst.get_unchecked_mut(1) = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code & 0x3F) as u8 | TAG_CONT;\n-                3\n-            } else if dst.len() >= 4 {\n-                *dst.get_unchecked_mut(0) = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *dst.get_unchecked_mut(1) = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(3) = (code & 0x3F) as u8 | TAG_CONT;\n-                4\n-            } else {\n-                panic!(\n-                    \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf8(),\n-                    code,\n-                    dst.len(),\n-                )\n-            };\n-            from_utf8_unchecked_mut(dst.get_unchecked_mut(..len))\n-        }\n+        let len = self.len_utf8();\n+        match (len, &mut dst[..]) {\n+            (1, [a, ..]) => {\n+                *a = code as u8;\n+            }\n+            (2, [a, b, ..]) => {\n+                *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+                *b = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            (3, [a, b, c, ..]) => {\n+                *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+                *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+                *c = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            (4, [a, b, c, d, ..]) => {\n+                *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+                *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+                *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+                *d = (code & 0x3F) as u8 | TAG_CONT;\n+            }\n+            _ => panic!(\n+                \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+                len,\n+                code,\n+                dst.len(),\n+            ),\n+        };\n+        // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n+        unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,"}, {"sha": "7d11dd2800fd4df43dd4925b734afe2661311a9b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -129,6 +129,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n+#![feature(slice_patterns)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "42db64c79151897087d0d18c91b0ed91ac061e61", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -2373,7 +2373,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let span = self.tcx.def_span(generator_did);\n \n         // Do not ICE on closure typeck (#66868).\n-        if let None = self.tcx.hir().as_local_hir_id(generator_did) {\n+        if self.tcx.hir().as_local_hir_id(generator_did).is_none() {\n             return false;\n         }\n "}, {"sha": "fbcc976bd491e98bb8fe8ba3f41b5a95640fcdaa", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -346,6 +346,7 @@ E0622: include_str!(\"./error_codes/E0622.md\"),\n E0623: include_str!(\"./error_codes/E0623.md\"),\n E0624: include_str!(\"./error_codes/E0624.md\"),\n E0626: include_str!(\"./error_codes/E0626.md\"),\n+E0627: include_str!(\"./error_codes/E0627.md\"),\n E0631: include_str!(\"./error_codes/E0631.md\"),\n E0633: include_str!(\"./error_codes/E0633.md\"),\n E0635: include_str!(\"./error_codes/E0635.md\"),\n@@ -574,7 +575,6 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n     E0625, // thread-local statics cannot be accessed at compile-time\n-    E0627, // yield statement outside of generator literal\n     E0628, // generators cannot have explicit parameters\n     E0629, // missing 'feature' (rustc_const_unstable)\n     // rustc_const_unstable attribute must be paired with stable/unstable"}, {"sha": "8af7cb819cfafe9c6341ed3b3dcd9ff208b565b1", "filename": "src/librustc_error_codes/error_codes/E0124.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0124.md", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0124.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0124.md?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,5 +1,6 @@\n-You declared two fields of a struct with the same name. Erroneous code\n-example:\n+A struct was declared with two fields having the same name.\n+\n+Erroneous code example:\n \n ```compile_fail,E0124\n struct Foo {"}, {"sha": "6f8dfe3a73b9e3f01afe7a8dbe5c4c7387351471", "filename": "src/librustc_error_codes/error_codes/E0128.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0128.md", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0128.md?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,4 +1,5 @@\n-Type parameter defaults can only use parameters that occur before them.\n+A type parameter with default value is using forward declared identifier.\n+\n Erroneous code example:\n \n ```compile_fail,E0128\n@@ -7,11 +8,11 @@ struct Foo<T = U, U = ()> {\n     field2: U,\n }\n // error: type parameters with a default cannot use forward declared\n-// identifiers\n+//        identifiers\n ```\n \n-Since type parameters are evaluated in-order, you may be able to fix this issue\n-by doing:\n+Type parameter defaults can only use parameters that occur before them. Since\n+type parameters are evaluated in-order, this issue could be fixed by doing:\n \n ```\n struct Foo<U = (), T = U> {"}, {"sha": "21358e1e567dce08806878c048f9eb8861117197", "filename": "src/librustc_error_codes/error_codes/E0627.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0627.md", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_error_codes%2Ferror_codes%2FE0627.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0627.md?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,30 @@\n+A yield expression was used outside of the generator literal.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0627\n+#![feature(generators, generator_trait)]\n+\n+fn fake_generator() -> &'static str {\n+    yield 1;\n+    return \"foo\"\n+}\n+\n+fn main() {\n+    let mut generator = fake_generator;\n+}\n+```\n+\n+The error occurs because keyword `yield` can only be used inside the generator\n+literal. This can be fixed by constructing the generator correctly.\n+\n+```\n+#![feature(generators, generator_trait)]\n+\n+fn main() {\n+    let mut generator = || {\n+        yield 1;\n+        return \"foo\"\n+    };\n+}\n+```"}, {"sha": "0d136bd7d9cf9a437e5ea7fc7a0727113f01c00f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1424,7 +1424,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// Reports an error if this is a borrow of local data.\n-    /// This is called for all Yield statements on movable generators\n+    /// This is called for all Yield expressions on movable generators\n     fn check_for_local_borrow(&mut self, borrow: &BorrowData<'tcx>, yield_span: Span) {\n         debug!(\"check_for_local_borrow({:?})\", borrow);\n "}, {"sha": "23b4799643a6cfb6282b167ee692cb3c6425c6ab", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -131,7 +131,7 @@ pub(super) fn is_active<'tcx>(\n }\n \n /// Determines if a given borrow is borrowing local data\n-/// This is called for all Yield statements on movable generators\n+/// This is called for all Yield expressions on movable generators\n pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n     match place.base {\n         PlaceBase::Static(_) => false,"}, {"sha": "4fa4e87e0ffb1f56c27d5a7d6d2f82cc162a0a94", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -45,9 +45,15 @@ fn mk_eval_cx<'mir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n+    can_access_statics: bool,\n ) -> CompileTimeEvalContext<'mir, 'tcx> {\n     debug!(\"mk_eval_cx: {:?}\", param_env);\n-    InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), Default::default())\n+    InterpCx::new(\n+        tcx.at(span),\n+        param_env,\n+        CompileTimeInterpreter::new(),\n+        MemoryExtra { can_access_statics },\n+    )\n }\n \n fn op_to_const<'tcx>(\n@@ -176,6 +182,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n #[derive(Clone, Debug)]\n pub enum ConstEvalError {\n     NeedsRfc(String),\n+    ConstAccessesStatic,\n }\n \n impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalError {\n@@ -195,6 +202,7 @@ impl fmt::Display for ConstEvalError {\n                     msg\n                 )\n             }\n+            ConstAccessesStatic => write!(f, \"constant accesses static\"),\n         }\n     }\n }\n@@ -204,6 +212,7 @@ impl Error for ConstEvalError {\n         use self::ConstEvalError::*;\n         match *self {\n             NeedsRfc(_) => \"this feature needs an rfc before being allowed inside constants\",\n+            ConstAccessesStatic => \"constant accesses static\",\n         }\n     }\n \n@@ -224,6 +233,12 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n     pub(super) loop_detector: snapshot::InfiniteLoopDetector<'mir, 'tcx>,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct MemoryExtra {\n+    /// Whether this machine may read from statics\n+    can_access_statics: bool,\n+}\n+\n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n     fn new() -> Self {\n         CompileTimeInterpreter {\n@@ -311,7 +326,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     type ExtraFnVal = !;\n \n     type FrameExtra = ();\n-    type MemoryExtra = ();\n+    type MemoryExtra = MemoryExtra;\n     type AllocExtra = ();\n \n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n@@ -473,7 +488,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     #[inline(always)]\n     fn init_allocation_extra<'b>(\n-        _memory_extra: &(),\n+        _memory_extra: &MemoryExtra,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n@@ -484,7 +499,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     #[inline(always)]\n     fn tag_static_base_pointer(\n-        _memory_extra: &(),\n+        _memory_extra: &MemoryExtra,\n         _id: AllocId,\n     ) -> Self::PointerTag {\n         ()\n@@ -527,6 +542,17 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n+\n+    fn before_access_static(\n+        memory_extra: &MemoryExtra,\n+        _allocation: &Allocation,\n+    ) -> InterpResult<'tcx> {\n+        if memory_extra.can_access_statics {\n+            Ok(())\n+        } else {\n+            Err(ConstEvalError::ConstAccessesStatic.into())\n+        }\n+    }\n }\n \n /// Extracts a field of a (variant of a) const.\n@@ -540,7 +566,7 @@ pub fn const_field<'tcx>(\n     value: &'tcx ty::Const<'tcx>,\n ) -> &'tcx ty::Const<'tcx> {\n     trace!(\"const_field: {:?}, {:?}\", field, value);\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     // get the operand again\n     let op = ecx.eval_const_to_op(value, None).unwrap();\n     // downcast\n@@ -560,7 +586,7 @@ pub fn const_caller_location<'tcx>(\n     (file, line, col): (Symbol, u32, u32),\n ) -> &'tcx ty::Const<'tcx> {\n     trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n-    let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all());\n+    let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);\n \n     let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n@@ -581,7 +607,7 @@ pub fn const_variant_index<'tcx>(\n     val: &'tcx ty::Const<'tcx>,\n ) -> VariantIdx {\n     trace!(\"const_variant_index: {:?}\", val);\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.eval_const_to_op(val, None).unwrap();\n     ecx.read_discriminant(op).unwrap().1\n }\n@@ -610,7 +636,9 @@ fn validate_and_turn_into_const<'tcx>(\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     let cid = key.value;\n-    let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env);\n+    let def_id = cid.instance.def.def_id();\n+    let is_static = tcx.is_static(def_id);\n+    let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env, is_static);\n     let val = (|| {\n         let mplace = ecx.raw_const_to_mplace(constant)?;\n         let mut ref_tracking = RefTracking::new(mplace);\n@@ -624,8 +652,7 @@ fn validate_and_turn_into_const<'tcx>(\n         // Now that we validated, turn this into a proper constant.\n         // Statics/promoteds are always `ByRef`, for the rest `op_to_const` decides\n         // whether they become immediates.\n-        let def_id = cid.instance.def.def_id();\n-        if tcx.is_static(def_id) || cid.promoted.is_some() {\n+        if is_static || cid.promoted.is_some() {\n             let ptr = mplace.ptr.to_ptr()?;\n             Ok(tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Value(ConstValue::ByRef {\n@@ -732,12 +759,14 @@ pub fn const_eval_raw_provider<'tcx>(\n         return Err(ErrorHandled::Reported);\n     }\n \n+    let is_static = tcx.is_static(def_id);\n+\n     let span = tcx.def_span(cid.instance.def_id());\n     let mut ecx = InterpCx::new(\n         tcx.at(span),\n         key.param_env,\n         CompileTimeInterpreter::new(),\n-        Default::default()\n+        MemoryExtra { can_access_statics: is_static },\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n@@ -751,7 +780,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     }).map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n         // errors in statics are always emitted as fatal errors\n-        if tcx.is_static(def_id) {\n+        if is_static {\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n             let v = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");"}, {"sha": "b53741e9e43ff5049afdcd3247c7f7d79ca0de6c", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -20,7 +20,6 @@ pub trait CompileTimeMachine<'mir, 'tcx> = Machine<\n     PointerTag = (),\n     ExtraFnVal = !,\n     FrameExtra = (),\n-    MemoryExtra = (),\n     AllocExtra = (),\n     MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n >;\n@@ -320,12 +319,20 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe\n             // references and a `leftover_allocations` set (where we only have a todo-list here).\n             // So we hand-roll the interning logic here again.\n-            if base_intern_mode != InternMode::Static {\n-                // If it's not a static, it *must* be immutable.\n-                // We cannot have mutable memory inside a constant.\n-                // FIXME: ideally we would assert that they already are immutable, to double-\n-                // check our static checks.\n-                alloc.mutability = Mutability::Not;\n+            match base_intern_mode {\n+                InternMode::Static => {}\n+                InternMode::Const | InternMode::ConstBase => {\n+                    // If it's not a static, it *must* be immutable.\n+                    // We cannot have mutable memory inside a constant.\n+                    // We use `delay_span_bug` here, because this can be reached in the presence\n+                    // of fancy transmutes.\n+                    if alloc.mutability == Mutability::Mut {\n+                        // For better errors later, mark the allocation as immutable\n+                        // (on top of the delayed ICE).\n+                        alloc.mutability = Mutability::Not;\n+                        ecx.tcx.sess.delay_span_bug(ecx.tcx.span, \"mutable allocation in constant\");\n+                    }\n+                }\n             }\n             let alloc = tcx.intern_const_alloc(alloc);\n             tcx.alloc_map.lock().set_alloc_id_memory(alloc_id, alloc);\n@@ -337,6 +344,8 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n+        } else if ecx.tcx.alloc_map.lock().get(alloc_id).is_none() {\n+            span_bug!(ecx.tcx.span, \"encountered unknown alloc id {:?}\", alloc_id);\n         }\n     }\n     Ok(())"}, {"sha": "e77ba9fa4cb0decc6b77bb37658afc3005718f64", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -212,7 +212,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     }\n \n     /// Called before a `StaticKind::Static` value is accessed.\n-    fn before_access_static(_allocation: &Allocation) -> InterpResult<'tcx> {\n+    fn before_access_static(\n+        _memory_extra: &Self::MemoryExtra,\n+        _allocation: &Allocation,\n+    ) -> InterpResult<'tcx> {\n         Ok(())\n     }\n "}, {"sha": "71e6d3e8ca1fc87b783139acc81f0436c929097a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -116,15 +116,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M>\n // carefully copy only the reachable parts.\n impl<'mir, 'tcx, M> Clone for Memory<'mir, 'tcx, M>\n where\n-    M: Machine<'mir, 'tcx, PointerTag = (), AllocExtra = (), MemoryExtra = ()>,\n+    M: Machine<'mir, 'tcx, PointerTag = (), AllocExtra = ()>,\n+    M::MemoryExtra: Copy,\n     M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation)>,\n {\n     fn clone(&self) -> Self {\n         Memory {\n             alloc_map: self.alloc_map.clone(),\n             extra_fn_ptr_map: self.extra_fn_ptr_map.clone(),\n             dead_alloc_map: self.dead_alloc_map.clone(),\n-            extra: (),\n+            extra: self.extra,\n             tcx: self.tcx,\n         }\n     }\n@@ -455,7 +456,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     let id = raw_const.alloc_id;\n                     let allocation = tcx.alloc_map.lock().unwrap_memory(id);\n \n-                    M::before_access_static(allocation)?;\n+                    M::before_access_static(memory_extra, allocation)?;\n                     Cow::Borrowed(allocation)\n                 }\n             }"}, {"sha": "a6b30ab5e68cf6b0ec0e1e3c0c511644b802ee68", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -224,6 +224,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     fn before_access_static(\n+        _memory_extra: &(),\n         allocation: &Allocation<Self::PointerTag, Self::AllocExtra>,\n     ) -> InterpResult<'tcx> {\n         // if the static allocation is mutable or if it has relocations (it may be legal to mutate"}, {"sha": "e862971c9e2b321c025fdfc8cefdc7cb5cae69a2", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1810,7 +1810,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx.sess,\n                     expr.span,\n                     E0627,\n-                    \"yield statement outside of generator literal\"\n+                    \"yield expression outside of generator literal\"\n                 )\n                 .emit();\n             }"}, {"sha": "0992e40121a7b6df2f19770519bcba1b58f1a2e0", "filename": "src/libstd/error.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -91,10 +91,6 @@ pub trait Error: Debug + Display {\n     /// }\n     ///\n     /// impl Error for SuperError {\n-    ///     fn description(&self) -> &str {\n-    ///         \"I'm the superhero of errors\"\n-    ///     }\n-    ///\n     ///     fn cause(&self) -> Option<&dyn Error> {\n     ///         Some(&self.side)\n     ///     }\n@@ -109,11 +105,7 @@ pub trait Error: Debug + Display {\n     ///     }\n     /// }\n     ///\n-    /// impl Error for SuperErrorSideKick {\n-    ///     fn description(&self) -> &str {\n-    ///         \"I'm SuperError side kick\"\n-    ///     }\n-    /// }\n+    /// impl Error for SuperErrorSideKick {}\n     ///\n     /// fn get_super_error() -> Result<(), SuperError> {\n     ///     Err(SuperError { side: SuperErrorSideKick })\n@@ -159,10 +151,6 @@ pub trait Error: Debug + Display {\n     /// }\n     ///\n     /// impl Error for SuperError {\n-    ///     fn description(&self) -> &str {\n-    ///         \"I'm the superhero of errors\"\n-    ///     }\n-    ///\n     ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n     ///         Some(&self.side)\n     ///     }\n@@ -177,11 +165,7 @@ pub trait Error: Debug + Display {\n     ///     }\n     /// }\n     ///\n-    /// impl Error for SuperErrorSideKick {\n-    ///     fn description(&self) -> &str {\n-    ///         \"I'm SuperError side kick\"\n-    ///     }\n-    /// }\n+    /// impl Error for SuperErrorSideKick {}\n     ///\n     /// fn get_super_error() -> Result<(), SuperError> {\n     ///     Err(SuperError { side: SuperErrorSideKick })\n@@ -261,11 +245,7 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     ///     }\n     /// }\n     ///\n-    /// impl Error for AnError {\n-    ///     fn description(&self) -> &str {\n-    ///         \"Description of an error\"\n-    ///     }\n-    /// }\n+    /// impl Error for AnError {}\n     ///\n     /// let an_error = AnError;\n     /// assert!(0 == mem::size_of_val(&an_error));\n@@ -300,11 +280,7 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     ///     }\n     /// }\n     ///\n-    /// impl Error for AnError {\n-    ///     fn description(&self) -> &str {\n-    ///         \"Description of an error\"\n-    ///     }\n-    /// }\n+    /// impl Error for AnError {}\n     ///\n     /// unsafe impl Send for AnError {}\n     ///"}, {"sha": "efe839d1302fe4b6f6955e4b079a8a284d3450c8", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -402,9 +402,7 @@ impl Error {\n     ///     }\n     /// }\n     ///\n-    /// impl error::Error for MyError {\n-    ///     fn description(&self) -> &str { &self.v }\n-    /// }\n+    /// impl error::Error for MyError {}\n     ///\n     /// impl Display for MyError {\n     ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "64674bb894e1f426892adf3b03202ac0e9630c7c", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Const<const N: usize>;\n+\n+impl<const C: usize> Const<{C}> {\n+    fn successor() -> Const<{C + 1}> {\n+        Const\n+    }\n+}\n+\n+fn main() {\n+    let _x: Const::<2> = Const::<1>::successor();\n+}"}, {"sha": "ccf36a7f805ec908f8dc169d9fd890d1a34c268d", "filename": "src/test/ui/const-generics/issues/issue-61747.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61747.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "2e47b4d1882f2286a72192997e781425ad1349c0", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![allow(incomplete_features, dead_code, unconditional_recursion)]\n+#![feature(const_generics)]\n+\n+fn fact<const N: usize>() {\n+    fact::<{ N - 1 }>();\n+}\n+\n+fn main() {}"}, {"sha": "b998b7a97be4e773b43f9a2e2805001fb40d534d", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+\n+#![allow(dead_code)]\n+\n+const TEST: &u8 = &MY_STATIC;\n+//~^ skipping const checks\n+//~| it is undefined behavior to use this value\n+\n+static MY_STATIC: u8 = 4;\n+\n+fn main() {\n+}"}, {"sha": "8949358e2933338ed8797a7ef6caf08ca5f686f9", "filename": "src/test/ui/consts/const-points-to-static.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,17 @@\n+warning: skipping const checks\n+  --> $DIR/const-points-to-static.rs:5:20\n+   |\n+LL | const TEST: &u8 = &MY_STATIC;\n+   |                    ^^^^^^^^^\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const-points-to-static.rs:5:1\n+   |\n+LL | const TEST: &u8 = &MY_STATIC;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "14ec064e4ceef8a60c01a211c75b489121fc7173", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,9 +1,8 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-// run-pass\n \n #![allow(dead_code)]\n \n-const TEST: u8 = MY_STATIC;\n+const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n //~^ skipping const checks\n \n static MY_STATIC: u8 = 4;"}, {"sha": "bfaa0f934ade2ee37a69d2e96dbadb21dc1235be", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,6 +1,18 @@\n warning: skipping const checks\n-  --> $DIR/const-prop-read-static-in-const.rs:6:18\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n LL | const TEST: u8 = MY_STATIC;\n    |                  ^^^^^^^^^\n \n+error: any use of this value will cause an error\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   | -----------------^^^^^^^^^-\n+   |                  |\n+   |                  constant accesses static\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "55f3f1c8488557b932272f265178905f012ab786", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![warn(const_err)]\n+\n+#![feature(const_raw_ptr_deref)]\n+\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::Ordering;\n+\n+const BOO: &usize = { //~ ERROR undefined behavior to use this value\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    unsafe { &*(&FOO as *const _ as *const usize) }\n+    //~^ WARN skipping const checks\n+};\n+\n+const FOO: usize = {\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    FOO.fetch_add(1, Ordering::Relaxed) //~ WARN any use of this value will cause an error\n+    //~^ WARN skipping const checks\n+    //~| WARN skipping const checks\n+};\n+\n+const BAR: usize = {\n+    static FOO: AtomicUsize = AtomicUsize::new(0);\n+    unsafe { *(&FOO as *const _ as *const usize) } //~ WARN any use of this value will cause an err\n+    //~^ WARN skipping const checks\n+};\n+\n+static mut MUTABLE: u32 = 0;\n+const BAD: u32 = unsafe { MUTABLE }; //~ WARN any use of this value will cause an error\n+//~^ WARN skipping const checks\n+\n+// ok some day perhaps\n+const BOO_OK: &usize = { //~ ERROR it is undefined behavior to use this value\n+    static FOO: usize = 0;\n+    &FOO\n+    //~^ WARN skipping const checks\n+};\n+fn main() {}"}, {"sha": "6ae88558d700399b8bd1fb7f016b9552c27b789a", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,100 @@\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:11:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:17:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:17:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:24:17\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |                 ^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:29:27\n+   |\n+LL | const BAD: u32 = unsafe { MUTABLE };\n+   |                           ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:35:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:9:1\n+   |\n+LL | / const BOO: &usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n+LL | |\n+LL | | };\n+   | |__^ constant accesses static\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:17:5\n+   |\n+LL | / const FOO: usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `std::sync::atomic::AtomicUsize::fetch_add`\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: lint level defined here\n+  --> $DIR/const_refers_to_static.rs:2:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:24:14\n+   |\n+LL | / const BAR: usize = {\n+LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n+LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n+   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | | };\n+   | |__-\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static.rs:29:27\n+   |\n+LL | const BAD: u32 = unsafe { MUTABLE };\n+   | --------------------------^^^^^^^---\n+   |                           |\n+   |                           constant accesses static\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/const_refers_to_static.rs:33:1\n+   |\n+LL | / const BOO_OK: &usize = {\n+LL | |     static FOO: usize = 0;\n+LL | |     &FOO\n+LL | |\n+LL | | };\n+   | |__^ constant accesses static\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "97af1f2f993c347510a2aa2b60660fd20fd7d8c3", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n+// normalize-stderr-test \"note: rustc 1.* running on .*\" -> \"note: rustc VERSION running on TARGET\"\n+// normalize-stderr-test \"note: compiler flags: .*\" -> \"note: compiler flags: FLAGS\"\n+// normalize-stderr-test \"interpret/intern.rs:[0-9]*:[0-9]*\" -> \"interpret/intern.rs:LL:CC\"\n+\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+#![deny(const_err)]\n+\n+use std::cell::UnsafeCell;\n+\n+// make sure we do not just intern this as mutable\n+const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+//~^ WARN: skipping const checks\n+//~| ERROR: mutable allocation in constant\n+\n+fn main() {}"}, {"sha": "2b4e23cd46e815a02401c8d286cff2f0d95b5adc", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,25 @@\n+warning: skipping const checks\n+  --> $DIR/mutable_const2.rs:15:38\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error: internal compiler error: mutable allocation in constant\n+  --> $DIR/mutable_const2.rs:15:1\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:349:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc VERSION running on TARGET\n+\n+note: compiler flags: FLAGS\n+"}, {"sha": "931fee13471267771c795ba0908c12b1db17efbf", "filename": "src/test/ui/feature-gates/feature-gate-generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     yield true; //~ ERROR yield syntax is experimental\n-                //~^ ERROR yield statement outside of generator literal\n+                //~^ ERROR yield expression outside of generator literal\n }\n \n #[cfg(FALSE)]"}, {"sha": "4adc21efc6a2125f21fb2bad85244725769e827b", "filename": "src/test/ui/feature-gates/feature-gate-generators.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -25,12 +25,13 @@ LL |     yield 0;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/43122\n    = help: add `#![feature(generators)]` to the crate attributes to enable\n \n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/feature-gate-generators.rs:2:5\n    |\n LL |     yield true;\n    |     ^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0627, E0658.\n+For more information about an error, try `rustc --explain E0627`."}, {"sha": "fe5ca822ceca1ce39e09cb24b9b9a24aa3e34817", "filename": "src/test/ui/generator/yield-in-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,6 +1,6 @@\n #![feature(generators)]\n \n const A: u8 = { yield 3u8; 3u8};\n-//~^ ERROR yield statement outside\n+//~^ ERROR yield expression outside\n \n fn main() {}"}, {"sha": "dcf4fe63e64bcf9622d83a768b8516df262ca495", "filename": "src/test/ui/generator/yield-in-const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,8 +1,9 @@\n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/yield-in-const.rs:3:17\n    |\n LL | const A: u8 = { yield 3u8; 3u8};\n    |                 ^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "29b811621de1efecb5d6472f9b20b7f7a88cb32b", "filename": "src/test/ui/generator/yield-in-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,4 +1,4 @@\n #![feature(generators)]\n \n fn main() { yield; }\n-//~^ ERROR yield statement outside\n+//~^ ERROR yield expression outside"}, {"sha": "51cce198ca3b45a7d4da74f4274639f9a7f97707", "filename": "src/test/ui/generator/yield-in-function.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-function.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,8 +1,9 @@\n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/yield-in-function.rs:3:13\n    |\n LL | fn main() { yield; }\n    |             ^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "d27fbb33ba10acfa67191812fa701543ef4719a3", "filename": "src/test/ui/generator/yield-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,6 +1,6 @@\n #![feature(generators)]\n \n static B: u8 = { yield 3u8; 3u8};\n-//~^ ERROR yield statement outside\n+//~^ ERROR yield expression outside\n \n fn main() {}"}, {"sha": "d867f3ad345288b4fede56c3b6ab7e747650df40", "filename": "src/test/ui/generator/yield-in-static.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,8 +1,9 @@\n-error[E0627]: yield statement outside of generator literal\n+error[E0627]: yield expression outside of generator literal\n   --> $DIR/yield-in-static.rs:3:18\n    |\n LL | static B: u8 = { yield 3u8; 3u8};\n    |                  ^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "9b616b8abc2eec2257d0012303c3095124a980c8", "filename": "src/test/ui/generic-associated-types/issue-67424.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,13 @@\n+// Fixed by #67160\n+\n+trait Trait1 {\n+    type A;\n+}\n+\n+trait Trait2 {\n+    type Type1<B>: Trait1<A=B>;\n+    //~^ ERROR: generic associated types are unstable\n+    //~| ERROR: type-generic associated types are not yet implemented\n+}\n+\n+fn main() {}"}, {"sha": "59ff8ac0a3a701262fe04da912b636aa46ac9339", "filename": "src/test/ui/generic-associated-types/issue-67424.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,20 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/issue-67424.rs:8:5\n+   |\n+LL |     type Type1<B>: Trait1<A=B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/issue-67424.rs:8:5\n+   |\n+LL |     type Type1<B>: Trait1<A=B>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "fed08902c8b9d35def06f90722a25d06b55a4bdc", "filename": "src/test/ui/issues/issue-52060.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -3,5 +3,6 @@\n static A: &'static [u32] = &[1];\n static B: [u32; 1] = [0; A.len()];\n //~^ ERROR [E0013]\n+//~| ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "c69145c1fe8336d22369a6ca551db770cdcf557b", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -4,6 +4,13 @@ error[E0013]: constants cannot refer to statics, use a constant instead\n LL | static B: [u32; 1] = [0; A.len()];\n    |                          ^\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52060.rs:4:26\n+   |\n+LL | static B: [u32; 1] = [0; A.len()];\n+   |                          ^ constant accesses static\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0013`.\n+Some errors have detailed explanations: E0013, E0080.\n+For more information about an error, try `rustc --explain E0013`."}, {"sha": "48a8e04829a0a7d9f3208152da9d0001d9620fff", "filename": "src/test/ui/pattern/issue-66270-pat-struct-parser-recovery.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #66270, fixed by #66246\n+\n+struct Bug {\n+    incorrect_field: 0,\n+    //~^ ERROR expected type\n+}\n+\n+struct Empty {}\n+\n+fn main() {\n+    let Bug {\n+        any_field: Empty {},\n+    } = Bug {};\n+}"}, {"sha": "fef0f3c0e06ef9adb9d9362470fccb14e36dd3e1", "filename": "src/test/ui/pattern/issue-66270-pat-struct-parser-recovery.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-66270-pat-struct-parser-recovery.stderr?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -0,0 +1,8 @@\n+error: expected type, found `0`\n+  --> $DIR/issue-66270-pat-struct-parser-recovery.rs:4:22\n+   |\n+LL |     incorrect_field: 0,\n+   |                      ^ expected type\n+\n+error: aborting due to previous error\n+"}]}