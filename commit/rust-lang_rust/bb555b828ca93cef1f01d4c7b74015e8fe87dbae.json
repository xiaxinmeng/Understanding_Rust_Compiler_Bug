{"sha": "bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "node_id": "C_kwDOAAsO6NoAKGJiNTU1YjgyOGNhOTNjZWYxZjAxZDRjN2I3NDAxNWU4ZmU4N2RiYWU", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-04-12T22:07:48Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-04-23T01:34:34Z"}, "message": "Fix comments for float classify", "tree": {"sha": "975b6429c0fc442364ff53daa7d4e37121037595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975b6429c0fc442364ff53daa7d4e37121037595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "html_url": "https://github.com/rust-lang/rust/commit/bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb555b828ca93cef1f01d4c7b74015e8fe87dbae/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83581796b28d1b792bd394de4280c3910c0e1155", "url": "https://api.github.com/repos/rust-lang/rust/commits/83581796b28d1b792bd394de4280c3910c0e1155", "html_url": "https://github.com/rust-lang/rust/commit/83581796b28d1b792bd394de4280c3910c0e1155"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "5359f02851b068412a6eb25fdbedc993d6208a67", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb555b828ca93cef1f01d4c7b74015e8fe87dbae/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb555b828ca93cef1f01d4c7b74015e8fe87dbae/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "patch": "@@ -594,7 +594,7 @@ impl f32 {\n             // However, std can't simply compare to zero to check for zero, either,\n             // as correctness requires avoiding equality tests that may be Subnormal == -0.0\n             // because it may be wrong under \"denormals are zero\" and \"flush to zero\" modes.\n-            // Most of std's targets don't use those, but they are used for thumbv7neon\".\n+            // Most of std's targets don't use those, but they are used for thumbv7neon.\n             // So, this does use bitpattern matching for the rest.\n \n             // SAFETY: f32 to u32 is fine. Usually.\n@@ -609,6 +609,12 @@ impl f32 {\n     // FIXME(jubilee): This probably could at least answer things correctly for Infinity,\n     // like the f64 version does, but I need to run more checks on how things go on x86.\n     // I fear losing mantissa data that would have answered that differently.\n+    //\n+    // # Safety\n+    // This requires making sure you call this function for values it answers correctly on,\n+    // otherwise it returns a wrong answer. This is not important for memory safety per se,\n+    // but getting floats correct is important for not accidentally leaking const eval\n+    // runtime-deviating logic which may or may not be acceptable.\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     const unsafe fn partial_classify(self) -> FpCategory {\n         const EXP_MASK: u32 = 0x7f800000;\n@@ -992,7 +998,7 @@ impl f32 {\n         // ...sorta.\n         //\n         // It turns out that at runtime, it is possible for a floating point number\n-        // to be subject to a floating point mode that alters nonzero subnormal numbers\n+        // to be subject to floating point modes that alter nonzero subnormal numbers\n         // to zero on reads and writes, aka \"denormals are zero\" and \"flush to zero\".\n         // This is not a problem usually, but at least one tier2 platform for Rust\n         // actually exhibits this behavior by default: thumbv7neon"}, {"sha": "61b040cf0feb1f7d7b1aa8c2165cd48752a340eb", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb555b828ca93cef1f01d4c7b74015e8fe87dbae/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb555b828ca93cef1f01d4c7b74015e8fe87dbae/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "patch": "@@ -593,7 +593,7 @@ impl f64 {\n             // However, std can't simply compare to zero to check for zero, either,\n             // as correctness requires avoiding equality tests that may be Subnormal == -0.0\n             // because it may be wrong under \"denormals are zero\" and \"flush to zero\" modes.\n-            // Most of std's targets don't use those, but they are used for thumbv7neon\".\n+            // Most of std's targets don't use those, but they are used for thumbv7neon.\n             // So, this does use bitpattern matching for the rest.\n \n             // SAFETY: f64 to u64 is fine. Usually.\n@@ -991,10 +991,10 @@ impl f64 {\n         // ...sorta.\n         //\n         // It turns out that at runtime, it is possible for a floating point number\n-        // to be subject to floating point modes that alters nonzero subnormal numbers\n+        // to be subject to floating point modes that alter nonzero subnormal numbers\n         // to zero on reads and writes, aka \"denormals are zero\" and \"flush to zero\".\n         // This is not a problem usually, but at least one tier2 platform for Rust\n-        // actually exhibits an FTZ behavior kby default: thumbv7neon\n+        // actually exhibits an FTZ behavior by default: thumbv7neon\n         // aka \"the Neon FPU in AArch32 state\"\n         //\n         // Even with this, not all instructions exhibit the FTZ behaviors on thumbv7neon,"}]}