{"sha": "e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MGNmNzA2YmI3YzZjMDdlOGMzM2I1MzdhZDI0ZTUzMzNhYTVlNzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-20T19:25:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T19:25:09Z"}, "message": "Merge #6018\n\n6018: Correct project_root path for ProjectJson. r=jonas-schievink a=woody77\n\nIt was already the folder containing the rust-project.json file, not the file itself.  This also removes the Option-ness of it, since it's now an infallible operation to set the member value.\n\nCo-authored-by: Aaron Wood <aaronwood@google.com>", "tree": {"sha": "99290eb9584d766851b6a07f472ca6256bdb9ee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99290eb9584d766851b6a07f472ca6256bdb9ee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ6yVCRBK7hj4Ov3rIwAAdHIIABlc978ACNlT3mXfS4iOf6hI\nESqxawL2RdljVkxPA93XYXKea3xvQHKI+hhANA2CZrTaD96B7JGuk85byKYb2Z1w\nF6lZfBGCmEmzjjW9GYnP7boMjJt/MlX+iZ1H8RTdiGZzjCrikw1XPj5BckWqD5iD\n7r9g+J6HCNmP5lma9WF6GO+gttVaKtUWtgFHMlf0CRE1GRzY8k6KzXO5IHNF5kOC\neSIW4ubhH+HlotJmMYtmzZiD6nDkJvfujLrjVNwVwitGfg95DDmf+o1PQKdfGsoz\nBTRyWwJw7XIC8RTRG51YyALdkrqHb3yl/9H3bRjehCT3UZNv8wsB68fN+ZvPN8I=\n=r0Dc\n-----END PGP SIGNATURE-----\n", "payload": "tree 99290eb9584d766851b6a07f472ca6256bdb9ee9\nparent 59f9fc4cd10b22b887ae42f12cc886793f0b061b\nparent 38f1ce633d78289c71e0f860d82fda5a62db8f7b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1600629909 +0000\ncommitter GitHub <noreply@github.com> 1600629909 +0000\n\nMerge #6018\n\n6018: Correct project_root path for ProjectJson. r=jonas-schievink a=woody77\n\nIt was already the folder containing the rust-project.json file, not the file itself.  This also removes the Option-ness of it, since it's now an infallible operation to set the member value.\n\nCo-authored-by: Aaron Wood <aaronwood@google.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "html_url": "https://github.com/rust-lang/rust/commit/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f9fc4cd10b22b887ae42f12cc886793f0b061b", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f9fc4cd10b22b887ae42f12cc886793f0b061b", "html_url": "https://github.com/rust-lang/rust/commit/59f9fc4cd10b22b887ae42f12cc886793f0b061b"}, {"sha": "38f1ce633d78289c71e0f860d82fda5a62db8f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f1ce633d78289c71e0f860d82fda5a62db8f7b", "html_url": "https://github.com/rust-lang/rust/commit/38f1ce633d78289c71e0f860d82fda5a62db8f7b"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "a6895ecdd5d8d2d24261bc823ab492eedf42f591", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "patch": "@@ -13,7 +13,7 @@ use crate::cfg_flag::CfgFlag;\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n     pub(crate) sysroot_src: Option<AbsPathBuf>,\n-    project_root: Option<AbsPathBuf>,\n+    project_root: AbsPathBuf,\n     crates: Vec<Crate>,\n }\n \n@@ -34,10 +34,17 @@ pub struct Crate {\n }\n \n impl ProjectJson {\n+    /// Create a new ProjectJson instance.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `base` - The path to the workspace root (i.e. the folder containing `rust-project.json`)\n+    /// * `data` - The parsed contents of `rust-project.json`, or project json that's passed via\n+    ///            configuration.\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n             sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n-            project_root: base.parent().map(AbsPath::to_path_buf),\n+            project_root: base.to_path_buf(),\n             crates: data\n                 .crates\n                 .into_iter()\n@@ -85,17 +92,17 @@ impl ProjectJson {\n                 .collect::<Vec<_>>(),\n         }\n     }\n+    /// Returns the number of crates in the project.\n     pub fn n_crates(&self) -> usize {\n         self.crates.len()\n     }\n+    /// Returns an iterator over the crates in the project.\n     pub fn crates(&self) -> impl Iterator<Item = (CrateId, &Crate)> + '_ {\n         self.crates.iter().enumerate().map(|(idx, krate)| (CrateId(idx as u32), krate))\n     }\n-    pub fn path(&self) -> Option<&AbsPath> {\n-        match &self.project_root {\n-            Some(p) => Some(p.as_path()),\n-            None => None,\n-        }\n+    /// Returns the path to the project's root folder.\n+    pub fn path(&self) -> &AbsPath {\n+        &self.project_root\n     }\n }\n "}, {"sha": "b070087a4f169cd440caca0c204b203651ad0b54", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e70cf706bb7c6c07e8c33b537ad24e5333aa5e75/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e70cf706bb7c6c07e8c33b537ad24e5333aa5e75", "patch": "@@ -252,7 +252,7 @@ impl GlobalState {\n                     // Enable flychecks for json projects if a custom flycheck command was supplied\n                     // in the workspace configuration.\n                     match config {\n-                        FlycheckConfig::CustomCommand { .. } => project.path(),\n+                        FlycheckConfig::CustomCommand { .. } => Some(project.path()),\n                         _ => None,\n                     }\n                 }"}]}