{"sha": "06eae300347447545f5d0e8e94c673da69a1d7fd", "node_id": "C_kwDOAAsO6NoAKDA2ZWFlMzAwMzQ3NDQ3NTQ1ZjVkMGU4ZTk0YzY3M2RhNjlhMWQ3ZmQ", "commit": {"author": {"name": "AzureMarker", "email": "mark.drobnak@gmail.com", "date": "2022-02-04T03:29:20Z"}, "committer": {"name": "Mark Drobnak", "email": "mark.drobnak@gmail.com", "date": "2022-06-14T03:44:57Z"}, "message": "Use the right wait_timeout implementation\n\nOur condvar doesn't support setting attributes, like\npthread_condattr_setclock, which the current wait_timeout expects to\nhave configured.\n\nSwitch to a different implementation, following espidf.", "tree": {"sha": "195912d5b1d984b49c1887a2d6842453eda188b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195912d5b1d984b49c1887a2d6842453eda188b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06eae300347447545f5d0e8e94c673da69a1d7fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEJn5ZTY8tfNoIJXFiR6Ez87+dA9MFAmKoBDkACgkQR6Ez87+d\nA9M3FQf+LY5Wz5N/gf3OpMheMdwlMn9jSATdAn8mahxj94yKqMXN2hAUw696Mvbk\nzkIfQCfOPBRJ9IrxGe/rtHo9zS6q1UAvnOmUzIiuhcpihw0Gqtqxnge6Kns+UJn+\nSvRFF0J5aT/u/mKHN5JX542VZWmTe9wNu8a2gBosWxsjxG/NylUZq9JvRb+jlcJV\nFaw7GT3TISRKkWB6Uw5PY+SokyQB1ndF325rRAVivhkgey9Ccy2ofkbaN1IzcNsN\nGwz3f/sJ7SiRHcu8ZJzgPwaERvmjh83hUFddBMm0Ad7crr0NMSs6VxK2otFXOJKT\nOCUIPJs0ol4TcGJFDwWG2X95g/aagQ==\n=rCSy\n-----END PGP SIGNATURE-----", "payload": "tree 195912d5b1d984b49c1887a2d6842453eda188b9\nparent be8b88f2b6929a09e0f147cd1fa027298f19cc5b\nauthor AzureMarker <mark.drobnak@gmail.com> 1643945360 -0800\ncommitter Mark Drobnak <mark.drobnak@gmail.com> 1655178297 -0700\n\nUse the right wait_timeout implementation\n\nOur condvar doesn't support setting attributes, like\npthread_condattr_setclock, which the current wait_timeout expects to\nhave configured.\n\nSwitch to a different implementation, following espidf.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06eae300347447545f5d0e8e94c673da69a1d7fd", "html_url": "https://github.com/rust-lang/rust/commit/06eae300347447545f5d0e8e94c673da69a1d7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06eae300347447545f5d0e8e94c673da69a1d7fd/comments", "author": {"login": "AzureMarker", "id": 4417660, "node_id": "MDQ6VXNlcjQ0MTc2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4417660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AzureMarker", "html_url": "https://github.com/AzureMarker", "followers_url": "https://api.github.com/users/AzureMarker/followers", "following_url": "https://api.github.com/users/AzureMarker/following{/other_user}", "gists_url": "https://api.github.com/users/AzureMarker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AzureMarker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AzureMarker/subscriptions", "organizations_url": "https://api.github.com/users/AzureMarker/orgs", "repos_url": "https://api.github.com/users/AzureMarker/repos", "events_url": "https://api.github.com/users/AzureMarker/events{/privacy}", "received_events_url": "https://api.github.com/users/AzureMarker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AzureMarker", "id": 4417660, "node_id": "MDQ6VXNlcjQ0MTc2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4417660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AzureMarker", "html_url": "https://github.com/AzureMarker", "followers_url": "https://api.github.com/users/AzureMarker/followers", "following_url": "https://api.github.com/users/AzureMarker/following{/other_user}", "gists_url": "https://api.github.com/users/AzureMarker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AzureMarker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AzureMarker/subscriptions", "organizations_url": "https://api.github.com/users/AzureMarker/orgs", "repos_url": "https://api.github.com/users/AzureMarker/repos", "events_url": "https://api.github.com/users/AzureMarker/events{/privacy}", "received_events_url": "https://api.github.com/users/AzureMarker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8b88f2b6929a09e0f147cd1fa027298f19cc5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8b88f2b6929a09e0f147cd1fa027298f19cc5b", "html_url": "https://github.com/rust-lang/rust/commit/be8b88f2b6929a09e0f147cd1fa027298f19cc5b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "78f10f0534c031f8079c7236e9cc1a4f8db72dd2", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06eae300347447545f5d0e8e94c673da69a1d7fd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eae300347447545f5d0e8e94c673da69a1d7fd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=06eae300347447545f5d0e8e94c673da69a1d7fd", "patch": "@@ -16,11 +16,7 @@ const TIMESPEC_MAX: libc::timespec =\n     libc::timespec { tv_sec: <libc::time_t>::MAX, tv_nsec: 1_000_000_000 - 1 };\n \n fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n-    if value > <libc::time_t>::MAX as u64 {\n-        <libc::time_t>::MAX\n-    } else {\n-        value as libc::time_t\n-    }\n+    if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n }\n \n impl LazyInit for Condvar {\n@@ -51,6 +47,8 @@ impl Condvar {\n     // So on that platform, init() should always be called\n     // Moreover, that platform does not have pthread_condattr_setclock support,\n     // hence that initialization should be skipped as well\n+    //\n+    // Similar story for the 3DS (horizon).\n     #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     unsafe fn init(&mut self) {\n         let r = libc::pthread_cond_init(self.inner.get(), crate::ptr::null());\n@@ -105,7 +103,8 @@ impl Condvar {\n         target_os = \"macos\",\n         target_os = \"ios\",\n         target_os = \"android\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     )))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n         use crate::mem;\n@@ -137,7 +136,8 @@ impl Condvar {\n         target_os = \"macos\",\n         target_os = \"ios\",\n         target_os = \"android\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, mut dur: Duration) -> bool {\n         use crate::ptr;"}]}