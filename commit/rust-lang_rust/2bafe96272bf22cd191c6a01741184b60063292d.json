{"sha": "2bafe96272bf22cd191c6a01741184b60063292d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYWZlOTYyNzJiZjIyY2QxOTFjNmEwMTc0MTE4NGI2MDA2MzI5MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T14:08:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T14:08:06Z"}, "message": "Auto merge of #85023 - RalfJung:array-to-raw-elem, r=Mark-Simulacrum\n\narray-to-raw-elem cast: test that Retag covers entire array\n\nMake sure that we `Retag` *before* doing the `ArrayToPointer` cast.", "tree": {"sha": "f4280e69159383ffc179303275979707bb488a46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4280e69159383ffc179303275979707bb488a46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bafe96272bf22cd191c6a01741184b60063292d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bafe96272bf22cd191c6a01741184b60063292d", "html_url": "https://github.com/rust-lang/rust/commit/2bafe96272bf22cd191c6a01741184b60063292d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bafe96272bf22cd191c6a01741184b60063292d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506e75cbf8cb5305e49a41326307004ca3976029", "url": "https://api.github.com/repos/rust-lang/rust/commits/506e75cbf8cb5305e49a41326307004ca3976029", "html_url": "https://github.com/rust-lang/rust/commit/506e75cbf8cb5305e49a41326307004ca3976029"}, {"sha": "2d2ed21615ebcae01ed2671e4b9e0e5f4258e727", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2ed21615ebcae01ed2671e4b9e0e5f4258e727", "html_url": "https://github.com/rust-lang/rust/commit/2d2ed21615ebcae01ed2671e4b9e0e5f4258e727"}], "stats": {"total": 259, "additions": 241, "deletions": 18}, "files": [{"sha": "c6ef403c3c130297d3f4835d13512d09c880e5d4", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2bafe96272bf22cd191c6a01741184b60063292d/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=2bafe96272bf22cd191c6a01741184b60063292d", "patch": "@@ -0,0 +1,199 @@\n+// MIR for `array_casts` after SimplifyCfg-elaborate-drops\n+\n+fn array_casts() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/retag.rs:57:18: 57:18\n+    let mut _1: [usize; 2];              // in scope 0 at $DIR/retag.rs:58:9: 58:14\n+    let mut _3: *mut [usize; 2];         // in scope 0 at $DIR/retag.rs:59:13: 59:19\n+    let mut _4: &mut [usize; 2];         // in scope 0 at $DIR/retag.rs:59:13: 59:19\n+    let _5: ();                          // in scope 0 at $DIR/retag.rs:60:5: 60:30\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/retag.rs:60:15: 60:23\n+    let mut _7: *mut usize;              // in scope 0 at $DIR/retag.rs:60:15: 60:16\n+    let mut _10: *const [usize; 2];      // in scope 0 at $DIR/retag.rs:63:13: 63:15\n+    let _11: &[usize; 2];                // in scope 0 at $DIR/retag.rs:63:13: 63:15\n+    let _12: ();                         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _13: (&usize, &usize);       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _14: &usize;                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _15: usize;                      // in scope 0 at $DIR/retag.rs:64:16: 64:36\n+    let mut _16: *const usize;           // in scope 0 at $DIR/retag.rs:64:26: 64:34\n+    let mut _17: *const usize;           // in scope 0 at $DIR/retag.rs:64:26: 64:27\n+    let mut _18: &usize;                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _19: usize;                      // in scope 0 at $DIR/retag.rs:64:38: 64:39\n+    let mut _22: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _23: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _24: usize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _25: usize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _26: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _28: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _29: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _30: &usize;                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _31: &usize;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _32: &usize;                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let _33: &usize;                     // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _34: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/retag.rs:58:9: 58:14\n+        let _2: *mut usize;              // in scope 1 at $DIR/retag.rs:59:9: 59:10\n+        scope 2 {\n+            debug p => _2;               // in scope 2 at $DIR/retag.rs:59:9: 59:10\n+            let _8: [usize; 2];          // in scope 2 at $DIR/retag.rs:62:9: 62:10\n+            scope 3 {\n+            }\n+            scope 4 {\n+                debug x => _8;           // in scope 4 at $DIR/retag.rs:62:9: 62:10\n+                let _9: *const usize;    // in scope 4 at $DIR/retag.rs:63:9: 63:10\n+                scope 5 {\n+                    debug p => _9;       // in scope 5 at $DIR/retag.rs:63:9: 63:10\n+                    let _20: &usize;     // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                    let _21: &usize;     // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                    let mut _35: &usize; // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                    scope 6 {\n+                    }\n+                    scope 7 {\n+                        debug left_val => _20; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                        debug right_val => _21; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                        let _27: core::panicking::AssertKind; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                        scope 8 {\n+                            debug kind => _27; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/retag.rs:58:9: 58:14\n+        _1 = [const 0_usize, const 0_usize]; // scope 0 at $DIR/retag.rs:58:29: 58:35\n+        StorageLive(_2);                 // scope 1 at $DIR/retag.rs:59:9: 59:10\n+        StorageLive(_3);                 // scope 1 at $DIR/retag.rs:59:13: 59:19\n+        StorageLive(_4);                 // scope 1 at $DIR/retag.rs:59:13: 59:19\n+        _4 = &mut _1;                    // scope 1 at $DIR/retag.rs:59:13: 59:19\n+        Retag(_4);                       // scope 1 at $DIR/retag.rs:59:13: 59:19\n+        _3 = &raw mut (*_4);             // scope 1 at $DIR/retag.rs:59:13: 59:19\n+        Retag([raw] _3);                 // scope 1 at $DIR/retag.rs:59:13: 59:19\n+        _2 = move _3 as *mut usize (Pointer(ArrayToPointer)); // scope 1 at $DIR/retag.rs:59:13: 59:33\n+        StorageDead(_3);                 // scope 1 at $DIR/retag.rs:59:32: 59:33\n+        StorageDead(_4);                 // scope 1 at $DIR/retag.rs:59:33: 59:34\n+        StorageLive(_5);                 // scope 2 at $DIR/retag.rs:60:5: 60:30\n+        StorageLive(_6);                 // scope 3 at $DIR/retag.rs:60:15: 60:23\n+        StorageLive(_7);                 // scope 3 at $DIR/retag.rs:60:15: 60:16\n+        _7 = _2;                         // scope 3 at $DIR/retag.rs:60:15: 60:16\n+        _6 = ptr::mut_ptr::<impl *mut usize>::add(move _7, const 1_usize) -> bb1; // scope 3 at $DIR/retag.rs:60:15: 60:23\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:60:17: 60:20\n+                                         // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {std::ptr::mut_ptr::<impl *mut usize>::add}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_7);                 // scope 3 at $DIR/retag.rs:60:22: 60:23\n+        (*_6) = const 1_usize;           // scope 3 at $DIR/retag.rs:60:14: 60:27\n+        StorageDead(_6);                 // scope 3 at $DIR/retag.rs:60:27: 60:28\n+        _5 = const ();                   // scope 3 at $DIR/retag.rs:60:5: 60:30\n+        StorageDead(_5);                 // scope 2 at $DIR/retag.rs:60:29: 60:30\n+        StorageLive(_8);                 // scope 2 at $DIR/retag.rs:62:9: 62:10\n+        _8 = [const 0_usize, const 1_usize]; // scope 2 at $DIR/retag.rs:62:25: 62:31\n+        StorageLive(_9);                 // scope 4 at $DIR/retag.rs:63:9: 63:10\n+        StorageLive(_10);                // scope 4 at $DIR/retag.rs:63:13: 63:15\n+        StorageLive(_11);                // scope 4 at $DIR/retag.rs:63:13: 63:15\n+        _11 = &_8;                       // scope 4 at $DIR/retag.rs:63:13: 63:15\n+        Retag(_11);                      // scope 4 at $DIR/retag.rs:63:13: 63:15\n+        _10 = &raw const (*_11);         // scope 4 at $DIR/retag.rs:63:13: 63:15\n+        Retag([raw] _10);                // scope 4 at $DIR/retag.rs:63:13: 63:15\n+        _9 = move _10 as *const usize (Pointer(ArrayToPointer)); // scope 4 at $DIR/retag.rs:63:13: 63:31\n+        StorageDead(_10);                // scope 4 at $DIR/retag.rs:63:30: 63:31\n+        StorageDead(_11);                // scope 4 at $DIR/retag.rs:63:31: 63:32\n+        StorageLive(_12);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_15);                // scope 5 at $DIR/retag.rs:64:16: 64:36\n+        StorageLive(_16);                // scope 6 at $DIR/retag.rs:64:26: 64:34\n+        StorageLive(_17);                // scope 6 at $DIR/retag.rs:64:26: 64:27\n+        _17 = _9;                        // scope 6 at $DIR/retag.rs:64:26: 64:27\n+        _16 = ptr::const_ptr::<impl *const usize>::add(move _17, const 1_usize) -> bb2; // scope 6 at $DIR/retag.rs:64:26: 64:34\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:64:28: 64:31\n+                                         // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {std::ptr::const_ptr::<impl *const usize>::add}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_17);                // scope 6 at $DIR/retag.rs:64:33: 64:34\n+        _15 = (*_16);                    // scope 6 at $DIR/retag.rs:64:25: 64:34\n+        _14 = &_15;                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_14);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _35 = const array_casts::promoted[0]; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // ty::Const\n+                                         // + ty: &usize\n+                                         // + val: Unevaluated(array_casts, [], Some(promoted[0]))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[317d]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+        Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _13 = (move _14, move _18);      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _20 = (_13.0: &usize);           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_20);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _21 = (_13.1: &usize);           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_21);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _24 = (*_20);                    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_25);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _25 = (*_21);                    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _23 = Eq(move _24, move _25);    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_25);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _22 = Not(move _23);             // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _22) -> [false: bb4, otherwise: bb3]; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageLive(_27);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _27 = core::panicking::AssertKind::Eq; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_28);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_29);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _29 = move _27;                  // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_30);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_31);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _31 = &(*_20);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_31);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _30 = &(*_31);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_30);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_32);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_33);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _33 = &(*_21);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_33);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _32 = &(*_33);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_32);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_34);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _34 = Option::<Arguments>::None; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb4: {\n+        _12 = const ();                  // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_12);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _0 = const ();                   // scope 0 at $DIR/retag.rs:57:18: 65:2\n+        StorageDead(_9);                 // scope 4 at $DIR/retag.rs:65:1: 65:2\n+        StorageDead(_8);                 // scope 2 at $DIR/retag.rs:65:1: 65:2\n+        StorageDead(_2);                 // scope 1 at $DIR/retag.rs:65:1: 65:2\n+        StorageDead(_1);                 // scope 0 at $DIR/retag.rs:65:1: 65:2\n+        return;                          // scope 0 at $DIR/retag.rs:65:2: 65:2\n+    }\n+}"}, {"sha": "4bab5a974881a6b4f05cd6f7490c26092bd19907", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2bafe96272bf22cd191c6a01741184b60063292d/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=2bafe96272bf22cd191c6a01741184b60063292d", "patch": "@@ -21,6 +21,7 @@ fn main() -> () {\n     let _23: &i32;                       // in scope 0 at $DIR/retag.rs:47:21: 47:23\n     let _24: i32;                        // in scope 0 at $DIR/retag.rs:47:22: 47:23\n     let mut _26: *const i32;             // in scope 0 at $DIR/retag.rs:50:14: 50:28\n+    let _27: ();                         // in scope 0 at $DIR/retag.rs:52:5: 52:18\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/retag.rs:30:9: 30:14\n         let _3: &mut i32;                // in scope 1 at $DIR/retag.rs:32:13: 32:14\n@@ -46,7 +47,7 @@ fn main() -> () {\n             scope 7 {\n                 debug _w => _15;         // in scope 7 at $DIR/retag.rs:44:9: 44:11\n                 let _25: *const i32;     // in scope 7 at $DIR/retag.rs:50:9: 50:11\n-                let mut _27: &i32;       // in scope 7 at $DIR/retag.rs:47:21: 47:23\n+                let mut _28: &i32;       // in scope 7 at $DIR/retag.rs:47:21: 47:23\n                 scope 8 {\n                     debug _w => _25;     // in scope 8 at $DIR/retag.rs:50:9: 50:11\n                 }\n@@ -70,7 +71,7 @@ fn main() -> () {\n         Retag(_7);                       // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb7]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:25: 32:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n@@ -81,7 +82,7 @@ fn main() -> () {\n         StorageDead(_6);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_4);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_7);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb2, unwind: bb9]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n     bb2: {\n@@ -146,19 +147,19 @@ fn main() -> () {\n         Retag(_20);                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n         StorageLive(_22);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _28 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n-        Retag(_27);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _23 = &(*_27);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        Retag(_28);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n+        _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb6]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:13: 47:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n@@ -169,7 +170,7 @@ fn main() -> () {\n         StorageDead(_22);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_20);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_23);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-        drop(_21) -> [return: bb5, unwind: bb8]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb5, unwind: bb9]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n     bb5: {\n@@ -181,23 +182,32 @@ fn main() -> () {\n         Retag([raw] _26);                // scope 7 at $DIR/retag.rs:50:14: 50:16\n         _25 = _26;                       // scope 7 at $DIR/retag.rs:50:14: 50:28\n         StorageDead(_26);                // scope 7 at $DIR/retag.rs:50:28: 50:29\n-        _0 = const ();                   // scope 0 at $DIR/retag.rs:29:11: 51:2\n-        StorageDead(_25);                // scope 7 at $DIR/retag.rs:51:1: 51:2\n-        StorageDead(_15);                // scope 6 at $DIR/retag.rs:51:1: 51:2\n-        StorageDead(_13);                // scope 1 at $DIR/retag.rs:51:1: 51:2\n-        StorageDead(_1);                 // scope 0 at $DIR/retag.rs:51:1: 51:2\n-        return;                          // scope 0 at $DIR/retag.rs:51:2: 51:2\n+        StorageLive(_27);                // scope 8 at $DIR/retag.rs:52:5: 52:18\n+        _27 = array_casts() -> bb6;      // scope 8 at $DIR/retag.rs:52:5: 52:18\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:52:5: 52:16\n+                                         // + literal: Const { ty: fn() {array_casts}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6 (cleanup): {\n-        drop(_21) -> bb8;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+    bb6: {\n+        StorageDead(_27);                // scope 8 at $DIR/retag.rs:52:18: 52:19\n+        _0 = const ();                   // scope 0 at $DIR/retag.rs:29:11: 53:2\n+        StorageDead(_25);                // scope 7 at $DIR/retag.rs:53:1: 53:2\n+        StorageDead(_15);                // scope 6 at $DIR/retag.rs:53:1: 53:2\n+        StorageDead(_13);                // scope 1 at $DIR/retag.rs:53:1: 53:2\n+        StorageDead(_1);                 // scope 0 at $DIR/retag.rs:53:1: 53:2\n+        return;                          // scope 0 at $DIR/retag.rs:53:2: 53:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_5) -> bb8;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_21) -> bb9;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n     bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n+        drop(_5) -> bb9;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/retag.rs:29:1: 53:2\n     }\n }"}, {"sha": "13568b822d4f3c6f1afe163e0d291a2c518288ab", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bafe96272bf22cd191c6a01741184b60063292d/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bafe96272bf22cd191c6a01741184b60063292d/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=2bafe96272bf22cd191c6a01741184b60063292d", "patch": "@@ -48,4 +48,18 @@ fn main() {\n \n     // escape-to-raw (shr)\n     let _w = _w as *const _;\n+\n+    array_casts();\n+}\n+\n+/// Casting directly to an array should also go through `&raw` and thus add appropriate retags.\n+// EMIT_MIR retag.array_casts.SimplifyCfg-elaborate-drops.after.mir\n+fn array_casts() {\n+    let mut x: [usize; 2] = [0, 0];\n+    let p = &mut x as *mut usize;\n+    unsafe { *p.add(1) = 1; }\n+\n+    let x: [usize; 2] = [0, 1];\n+    let p = &x as *const usize;\n+    assert_eq!(unsafe { *p.add(1) }, 1);\n }"}]}