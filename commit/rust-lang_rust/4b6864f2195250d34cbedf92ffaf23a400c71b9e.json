{"sha": "4b6864f2195250d34cbedf92ffaf23a400c71b9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNjg2NGYyMTk1MjUwZDM0Y2JlZGY5MmZmYWYyM2E0MDBjNzFiOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T01:57:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T01:57:40Z"}, "message": "auto merge of #6226 : alexcrichton/rust/issue-6199, r=brson\n\nI just removed `pub mod` from `core.rc` and then got everything to compile again. One thing I'm worried about is an import like this:\r\n\r\n```rust\r\nuse a;\r\nuse a::b;\r\n\r\nmod a {\r\n  pub type b = int;\r\n}\r\nmod b {\r\n  use a;    // bad\r\n  use a::b; // good\r\n}\r\n```\r\n\r\nI'm not sure if `use a::b` being valid is a bug or intended behavior (same question about `use a`). If it's intended behavior, then I got around these modules not being public by only importing the specific members that are necessary. Otherwise that probably needs an open issue.", "tree": {"sha": "ed2b88be974c41bb1ec6d8f6e69bcd4a7f803d54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed2b88be974c41bb1ec6d8f6e69bcd4a7f803d54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b6864f2195250d34cbedf92ffaf23a400c71b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6864f2195250d34cbedf92ffaf23a400c71b9e", "html_url": "https://github.com/rust-lang/rust/commit/4b6864f2195250d34cbedf92ffaf23a400c71b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b6864f2195250d34cbedf92ffaf23a400c71b9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05460fcd5a9b2be5055f55965f768b0aa37119d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/05460fcd5a9b2be5055f55965f768b0aa37119d9", "html_url": "https://github.com/rust-lang/rust/commit/05460fcd5a9b2be5055f55965f768b0aa37119d9"}, {"sha": "24cda9fbc20cad2d7f59a40973a51ff6355ababb", "url": "https://api.github.com/repos/rust-lang/rust/commits/24cda9fbc20cad2d7f59a40973a51ff6355ababb", "html_url": "https://github.com/rust-lang/rust/commit/24cda9fbc20cad2d7f59a40973a51ff6355ababb"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "a96f1a2ff819137abc52387b198426e3c6c379e1", "filename": "src/libcore/char.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4b6864f2195250d34cbedf92ffaf23a400c71b9e/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6864f2195250d34cbedf92ffaf23a400c71b9e/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=4b6864f2195250d34cbedf92ffaf23a400c71b9e", "patch": "@@ -16,7 +16,7 @@ use option::{None, Option, Some};\n use str;\n use u32;\n use uint;\n-use unicode;\n+use unicode::{derived_property, general_category};\n \n #[cfg(notest)] use cmp::Eq;\n \n@@ -53,18 +53,17 @@ use unicode;\n     Cn  Unassigned  a reserved unassigned code point or a noncharacter\n */\n \n-pub use is_alphabetic = unicode::derived_property::Alphabetic;\n-pub use is_XID_start = unicode::derived_property::XID_Start;\n-pub use is_XID_continue = unicode::derived_property::XID_Continue;\n-\n+pub fn is_alphabetic(c: char) -> bool   { derived_property::Alphabetic(c) }\n+pub fn is_XID_start(c: char) -> bool    { derived_property::XID_Start(c) }\n+pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n \n /**\n  * Indicates whether a character is in lower case, defined\n  * in terms of the Unicode General Category 'Ll'\n  */\n #[inline(always)]\n pub fn is_lowercase(c: char) -> bool {\n-    return unicode::general_category::Ll(c);\n+    return general_category::Ll(c);\n }\n \n /**\n@@ -73,7 +72,7 @@ pub fn is_lowercase(c: char) -> bool {\n  */\n #[inline(always)]\n pub fn is_uppercase(c: char) -> bool {\n-    return unicode::general_category::Lu(c);\n+    return general_category::Lu(c);\n }\n \n /**\n@@ -84,9 +83,9 @@ pub fn is_uppercase(c: char) -> bool {\n #[inline(always)]\n pub fn is_whitespace(c: char) -> bool {\n     return ('\\x09' <= c && c <= '\\x0d')\n-        || unicode::general_category::Zs(c)\n-        || unicode::general_category::Zl(c)\n-        || unicode::general_category::Zp(c);\n+        || general_category::Zs(c)\n+        || general_category::Zl(c)\n+        || general_category::Zp(c);\n }\n \n /**\n@@ -96,18 +95,18 @@ pub fn is_whitespace(c: char) -> bool {\n  */\n #[inline(always)]\n pub fn is_alphanumeric(c: char) -> bool {\n-    return unicode::derived_property::Alphabetic(c) ||\n-        unicode::general_category::Nd(c) ||\n-        unicode::general_category::Nl(c) ||\n-        unicode::general_category::No(c);\n+    return derived_property::Alphabetic(c) ||\n+        general_category::Nd(c) ||\n+        general_category::Nl(c) ||\n+        general_category::No(c);\n }\n \n /// Indicates whether the character is numeric (Nd, Nl, or No)\n #[inline(always)]\n pub fn is_digit(c: char) -> bool {\n-    return unicode::general_category::Nd(c) ||\n-        unicode::general_category::Nl(c) ||\n-        unicode::general_category::No(c);\n+    return general_category::Nd(c) ||\n+        general_category::Nl(c) ||\n+        general_category::No(c);\n }\n \n /**"}, {"sha": "127d6dbc774328fc8eda5cfe5aec585e48a7ae41", "filename": "src/libcore/core.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b6864f2195250d34cbedf92ffaf23a400c71b9e/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4b6864f2195250d34cbedf92ffaf23a400c71b9e/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=4b6864f2195250d34cbedf92ffaf23a400c71b9e", "patch": "@@ -244,12 +244,12 @@ pub mod unstable;\n \n /* For internal use, not exported */\n \n-pub mod unicode;\n+mod unicode;\n #[path = \"num/cmath.rs\"]\n-pub mod cmath;\n-pub mod stackwalk;\n+mod cmath;\n+mod stackwalk;\n #[path = \"rt/mod.rs\"]\n-pub mod rt;\n+mod rt;\n \n // A curious inner-module that's not exported that contains the binding\n // 'core' so that macro-expanded references to core::error and such"}, {"sha": "9a7d0056b8245662ccb1a5e81fd18bf3507a6f38", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b6864f2195250d34cbedf92ffaf23a400c71b9e/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6864f2195250d34cbedf92ffaf23a400c71b9e/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=4b6864f2195250d34cbedf92ffaf23a400c71b9e", "patch": "@@ -44,7 +44,7 @@ use libc::{size_t, uintptr_t};\n use option::{None, Option, Some};\n use ptr;\n use hashmap::HashSet;\n-use stackwalk;\n+use stackwalk::walk_stack;\n use sys;\n \n pub use stackwalk::Word;\n@@ -230,7 +230,7 @@ unsafe fn walk_gc_roots(mem: Memory, sentinel: **Word, visitor: Visitor) {\n     // frame is marked by a sentinel, which is a box pointer stored on\n     // the stack.\n     let mut reached_sentinel = ptr::is_null(sentinel);\n-    for stackwalk::walk_stack |frame| {\n+    for walk_stack |frame| {\n         let pc = last_ret;\n         let Segment {segment: next_segment, boundary: boundary} =\n             find_segment_for_frame(frame.fp, segment);"}]}