{"sha": "e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDE2YzJiMTNhN2UxNmI2ZWVkOWUzMGI0YjZiZmUzMDQ3NTA1NjY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-24T22:57:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-28T17:53:13Z"}, "message": "review comments", "tree": {"sha": "67077b1846fc5fae37e23344720ca27b903acb4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67077b1846fc5fae37e23344720ca27b903acb4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "html_url": "https://github.com/rust-lang/rust/commit/e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b0836df6f633eb1a4c02d15a8d942bfe885f172", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0836df6f633eb1a4c02d15a8d942bfe885f172", "html_url": "https://github.com/rust-lang/rust/commit/1b0836df6f633eb1a4c02d15a8d942bfe885f172"}], "stats": {"total": 85, "additions": 41, "deletions": 44}, "files": [{"sha": "ab2b4519cb72a13f5cc577801867040ce310d883", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "patch": "@@ -327,31 +327,27 @@ impl<'a> Parser<'a> {\n         }\n \n         let sm = self.sess.source_map();\n-        match (sm.lookup_line(self.token.span.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                // When the spans are in the same line, it means that the only content between\n-                // them is whitespace, point at the found token in that case:\n-                //\n-                // X |     () => { syntax error };\n-                //   |                    ^^^^^ expected one of 8 possible tokens here\n-                //\n-                // instead of having:\n-                //\n-                // X |     () => { syntax error };\n-                //   |                   -^^^^^ unexpected token\n-                //   |                   |\n-                //   |                   expected one of 8 possible tokens here\n-                err.span_label(self.token.span, label_exp);\n-            }\n-            _ if self.prev_span == syntax_pos::DUMMY_SP => {\n-                // Account for macro context where the previous span might not be\n-                // available to avoid incorrect output (#54841).\n-                err.span_label(self.token.span, \"unexpected token\");\n-            }\n-            _ => {\n-                err.span_label(sp, label_exp);\n-                err.span_label(self.token.span, \"unexpected token\");\n-            }\n+        if self.prev_span == DUMMY_SP {\n+            // Account for macro context where the previous span might not be\n+            // available to avoid incorrect output (#54841).\n+            err.span_label(self.token.span, label_exp);\n+        } else if !sm.is_multiline(self.token.span.shrink_to_hi().until(sp.shrink_to_lo())) {\n+            // When the spans are in the same line, it means that the only content between\n+            // them is whitespace, point at the found token in that case:\n+            //\n+            // X |     () => { syntax error };\n+            //   |                    ^^^^^ expected one of 8 possible tokens here\n+            //\n+            // instead of having:\n+            //\n+            // X |     () => { syntax error };\n+            //   |                   -^^^^^ unexpected token\n+            //   |                   |\n+            //   |                   expected one of 8 possible tokens here\n+            err.span_label(self.token.span, label_exp);\n+        } else {\n+            err.span_label(sp, label_exp);\n+            err.span_label(self.token.span, \"unexpected token\");\n         }\n         self.maybe_annotate_with_ascription(&mut err, false);\n         Err(err)\n@@ -894,7 +890,12 @@ impl<'a> Parser<'a> {\n         let sm = self.sess.source_map();\n         let msg = format!(\"expected `;`, found `{}`\", self.this_token_descr());\n         let appl = Applicability::MachineApplicable;\n-        if self.look_ahead(1, |t| t == &token::CloseDelim(token::Brace)\n+        if self.token.span == DUMMY_SP || self.prev_span == DUMMY_SP {\n+            // Likely inside a macro, can't provide meaninful suggestions.\n+            return self.expect(&token::Semi).map(|_| ());\n+        } else if !sm.is_multiline(self.prev_span.until(self.token.span)) {\n+            // The current token is in the same line as the prior token, not recoverable.\n+        } else if self.look_ahead(1, |t| t == &token::CloseDelim(token::Brace)\n             || token_can_begin_expr(t) && t.kind != token::Colon\n         ) && [token::Comma, token::Colon].contains(&self.token.kind) {\n             // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n@@ -903,14 +904,12 @@ impl<'a> Parser<'a> {\n             //\n             //   let x = 32:\n             //   let y = 42;\n-            if sm.is_multiline(self.prev_span.until(self.token.span)) {\n-                self.bump();\n-                let sp = self.prev_span;\n-                self.struct_span_err(sp, &msg)\n-                    .span_suggestion(sp, \"change this to `;`\", \";\".to_string(), appl)\n-                    .emit();\n-                return Ok(())\n-            }\n+            self.bump();\n+            let sp = self.prev_span;\n+            self.struct_span_err(sp, &msg)\n+                .span_suggestion(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                .emit();\n+            return Ok(())\n         } else if self.look_ahead(0, |t| t == &token::CloseDelim(token::Brace) || (\n                 token_can_begin_expr(t)\n                 && t != &token::Semi\n@@ -921,14 +920,12 @@ impl<'a> Parser<'a> {\n             //\n             //   let x = 32\n             //   let y = 42;\n-            if sm.is_multiline(self.prev_span.until(self.token.span)) {\n-                let sp = self.prev_span.shrink_to_hi();\n-                self.struct_span_err(sp, &msg)\n-                    .span_label(self.token.span, \"unexpected token\")\n-                    .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n-                    .emit();\n-                return Ok(())\n-            }\n+            let sp = self.prev_span.shrink_to_hi();\n+            self.struct_span_err(sp, &msg)\n+                .span_label(self.token.span, \"unexpected token\")\n+                .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n+                .emit();\n+            return Ok(())\n         }\n         self.expect(&token::Semi).map(|_| ()) // Error unconditionally\n     }"}, {"sha": "287d579c76d5f51b42d6c743dbfcded370171c92", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "patch": "@@ -2,7 +2,7 @@ error: expected one of `crate`, `fn`, `pub`, `static`, or `type`, found keyword\n   --> $DIR/issue-54441.rs:3:9\n    |\n LL |         let\n-   |         ^^^ unexpected token\n+   |         ^^^ expected one of `crate`, `fn`, `pub`, `static`, or `type` here\n ...\n LL |     m!();\n    |     ----- in this macro invocation"}, {"sha": "a953e23a710fa9dc22e8e2feb8bc43e4f6b1deeb", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8016c2b13a7e16b6eed9e30b4b6bfe304750566/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=e8016c2b13a7e16b6eed9e30b4b6bfe304750566", "patch": "@@ -2,7 +2,7 @@ error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, fo\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ unexpected token\n+   |                   ^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe` here\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}]}