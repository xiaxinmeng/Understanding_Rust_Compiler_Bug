{"sha": "08504fbb0b05abdd9543f08102b0d6275dde210c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTA0ZmJiMGIwNWFiZGQ5NTQzZjA4MTAyYjBkNjI3NWRkZTIxMGM=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-02T04:50:59Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-02T09:12:22Z"}, "message": "Optimize str::repeat", "tree": {"sha": "efbfce64f5f77b78f255d2e31027bb2198bfa17b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efbfce64f5f77b78f255d2e31027bb2198bfa17b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08504fbb0b05abdd9543f08102b0d6275dde210c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08504fbb0b05abdd9543f08102b0d6275dde210c", "html_url": "https://github.com/rust-lang/rust/commit/08504fbb0b05abdd9543f08102b0d6275dde210c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08504fbb0b05abdd9543f08102b0d6275dde210c/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85417f5938023d1491b44d94da705f539bb8b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85417f5938023d1491b44d94da705f539bb8b17", "html_url": "https://github.com/rust-lang/rust/commit/a85417f5938023d1491b44d94da705f539bb8b17"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "cb43d5bee78ca12883234ded3df912cedfdb2a22", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08504fbb0b05abdd9543f08102b0d6275dde210c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08504fbb0b05abdd9543f08102b0d6275dde210c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=08504fbb0b05abdd9543f08102b0d6275dde210c", "patch": "@@ -124,6 +124,7 @@\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(exact_chunks)]\n+#![feature(pointer_methods)]\n \n #![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test, box_heap))]"}, {"sha": "08ba4a180ed53e0de695a1eff914dcd5e50c1954", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/08504fbb0b05abdd9543f08102b0d6275dde210c/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08504fbb0b05abdd9543f08102b0d6275dde210c/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=08504fbb0b05abdd9543f08102b0d6275dde210c", "patch": "@@ -43,6 +43,7 @@ use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n+use core::ptr;\n use core::iter::FusedIterator;\n use std_unicode::str::{UnicodeStr, Utf16Encoder};\n \n@@ -2066,9 +2067,39 @@ impl str {\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n-        let mut s = String::with_capacity(self.len() * n);\n-        s.extend((0..n).map(|_| self));\n-        s\n+        if n == 0 {\n+            return String::new();\n+        }\n+\n+        // n = 2^j + k (2^j > k)\n+\n+        // 2^j:\n+        let mut s = Vec::with_capacity(self.len() * n);\n+        s.extend(self.as_bytes());\n+        let mut m = n >> 1;\n+        while m > 0 {\n+            let len = s.len();\n+            unsafe {\n+                ptr::copy_nonoverlapping(s.as_ptr(), (s.as_mut_ptr() as *mut u8).add(len), len);\n+                s.set_len(len * 2);\n+            }\n+            m >>= 1;\n+        }\n+\n+        // k:\n+        let res_len = n * self.len();\n+        if res_len > s.len() {\n+            unsafe {\n+                ptr::copy_nonoverlapping(\n+                    s.as_ptr(),\n+                    (s.as_mut_ptr() as *mut u8).add(s.len()),\n+                    res_len - s.len(),\n+                );\n+                s.set_len(res_len);\n+            }\n+        }\n+\n+        unsafe { String::from_utf8_unchecked(s) }\n     }\n \n     /// Checks if all characters in this string are within the ASCII range."}]}