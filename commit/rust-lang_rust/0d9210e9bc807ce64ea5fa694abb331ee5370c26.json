{"sha": "0d9210e9bc807ce64ea5fa694abb331ee5370c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOTIxMGU5YmM4MDdjZTY0ZWE1ZmE2OTRhYmIzMzFlZTUzNzBjMjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T09:03:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T20:23:30Z"}, "message": "handle multibyte tokens", "tree": {"sha": "f3e1df9582a937465bdb1302950bc17bd79606f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3e1df9582a937465bdb1302950bc17bd79606f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d9210e9bc807ce64ea5fa694abb331ee5370c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9210e9bc807ce64ea5fa694abb331ee5370c26", "html_url": "https://github.com/rust-lang/rust/commit/0d9210e9bc807ce64ea5fa694abb331ee5370c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d9210e9bc807ce64ea5fa694abb331ee5370c26/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3489e8111e02bbd4e882d05d2fffe29962aef71", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3489e8111e02bbd4e882d05d2fffe29962aef71", "html_url": "https://github.com/rust-lang/rust/commit/f3489e8111e02bbd4e882d05d2fffe29962aef71"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "0497d2168c259a9c3ed1331c2b15e7d16168c9ba", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0d9210e9bc807ce64ea5fa694abb331ee5370c26/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9210e9bc807ce64ea5fa694abb331ee5370c26/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=0d9210e9bc807ce64ea5fa694abb331ee5370c26", "patch": "@@ -221,27 +221,32 @@ fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n         if child == first_child || child == last_child || child.kind().is_trivia() {\n             continue;\n         }\n-        let child: tt::TokenTree = if child.kind() == TOKEN_TREE {\n-            convert_tt(child)?.into()\n-        } else if child.kind().is_keyword() || child.kind() == IDENT {\n-            let text = child.leaf_text().unwrap().clone();\n-            tt::Leaf::from(tt::Ident { text }).into()\n-        } else if child.kind().is_punct() {\n-            // FIXME: multibyte tokens\n-            tt::Leaf::from(tt::Punct {\n-                char: child.text().char_at(0)?,\n-            })\n-            .into()\n-        } else if child.kind().is_literal() {\n-            tt::Leaf::from(tt::Literal {\n-                text: child.leaf_text().unwrap().clone(),\n-            })\n-            .into()\n+        if child.kind().is_punct() {\n+            let leaves = child\n+                .leaf_text()\n+                .unwrap()\n+                .chars()\n+                .map(|char| tt::Punct { char })\n+                .map(tt::Leaf::from)\n+                .map(tt::TokenTree::from);\n+            token_trees.extend(leaves);\n         } else {\n-            log::error!(\"unknown kind: {:?}\", child);\n-            return None;\n-        };\n-        token_trees.push(child)\n+            let child: tt::TokenTree = if child.kind() == TOKEN_TREE {\n+                convert_tt(child)?.into()\n+            } else if child.kind().is_keyword() || child.kind() == IDENT {\n+                let text = child.leaf_text().unwrap().clone();\n+                tt::Leaf::from(tt::Ident { text }).into()\n+            } else if child.kind().is_literal() {\n+                tt::Leaf::from(tt::Literal {\n+                    text: child.leaf_text().unwrap().clone(),\n+                })\n+                .into()\n+            } else {\n+                log::error!(\"unknown kind: {:?}\", child);\n+                return None;\n+            };\n+            token_trees.push(child)\n+        }\n     }\n \n     let res = tt::Subtree {"}, {"sha": "62b7fa24c98876ce13290f62d25fd37efe39aeda", "filename": "crates/ra_hir/src/macros/mbe.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d9210e9bc807ce64ea5fa694abb331ee5370c26/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9210e9bc807ce64ea5fa694abb331ee5370c26/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros%2Fmbe.rs?ref=0d9210e9bc807ce64ea5fa694abb331ee5370c26", "patch": "@@ -86,14 +86,17 @@ pub(crate) fn parse(tt: &tt::Subtree) -> Option<MacroRules> {\n \n fn parse_rule(p: &mut RulesParser) -> Option<Rule> {\n     let lhs = parse_subtree(p.eat_subtree()?)?;\n-    p.eat_punct('=');\n-    p.eat_punct('>');\n+    p.eat_punct('=')?;\n+    p.eat_punct('>')?;\n     let rhs = parse_subtree(p.eat_subtree()?)?;\n     Some(Rule { lhs, rhs })\n }\n \n fn parse_subtree(tt: &tt::Subtree) -> Option<Subtree> {\n-    None\n+    Some(Subtree {\n+        token_trees: Vec::new(),\n+        delimiter: Delimiter::None,\n+    })\n }\n \n struct RulesParser<'a> {"}]}