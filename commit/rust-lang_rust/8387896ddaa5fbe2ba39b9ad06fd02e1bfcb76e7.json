{"sha": "8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODc4OTZkZGFhNWZiZTJiYTM5YjlhZDA2ZmQwMmUxYmZjYjc2ZTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-10T00:12:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-10T00:12:48Z"}, "message": "Remove proto_sugar and 'lambda' as keyword, commit to fn@.", "tree": {"sha": "d326dd79d45136f7cd2960491e89607d671172e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d326dd79d45136f7cd2960491e89607d671172e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "html_url": "https://github.com/rust-lang/rust/commit/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ecbe88ca67769ccb9def337ada9ae25235e00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ecbe88ca67769ccb9def337ada9ae25235e00e", "html_url": "https://github.com/rust-lang/rust/commit/f6ecbe88ca67769ccb9def337ada9ae25235e00e"}], "stats": {"total": 151, "additions": 72, "deletions": 79}, "files": [{"sha": "eb559f0d5f9f10277bf5f4d2dab0ad2900c345f1", "filename": "doc/keywords.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/doc%2Fkeywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/doc%2Fkeywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fkeywords.txt?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -7,7 +7,7 @@ do\n else export\n f32 f64 fail false float fn for\n i16 i32 i64 i8 if import in int\n-lambda let log\n+let log\n mod mutable\n native note\n obj  "}, {"sha": "fae174ad11398aa1360891df1784e17c20698498", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -234,7 +234,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         ret parse_ty_rust_fn(st, conv, ast::proto_send);\n       }\n       'F' {\n-        ret parse_ty_rust_fn(st, conv, ast::proto_shared(ast::sugar_normal));\n+        ret parse_ty_rust_fn(st, conv, ast::proto_shared);\n       }\n       'f' {\n         ret parse_ty_rust_fn(st, conv, ast::proto_bare);"}, {"sha": "2260ea632065465121e72f4e9eb4c3b2c059ed80", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -203,7 +203,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n fn enc_proto(w: io::writer, proto: proto) {\n     alt proto {\n       proto_send. { w.write_char('s'); }\n-      proto_shared(_) { w.write_char('F'); }\n+      proto_shared. { w.write_char('F'); }\n       proto_block. { w.write_char('B'); }\n       proto_bare. { w.write_char('f'); }\n     }"}, {"sha": "c34450fa5285c00b2370672b9faf6d85a7ae72ca", "filename": "src/comp/middle/capture.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcapture.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -34,7 +34,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n     let seen_defs = map::new_int_hash();\n \n-    let check_capture_item = lambda(&&cap_item: @ast::capture_item) {\n+    let check_capture_item = fn@(&&cap_item: @ast::capture_item) {\n         let cap_def = tcx.def_map.get(cap_item.id);\n         if !vec::any(*freevars, {|fv| fv.def == cap_def}) {\n             tcx.sess.span_warn(\n@@ -52,7 +52,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n         }\n     };\n \n-    let check_not_upvar = lambda(&&cap_item: @ast::capture_item) {\n+    let check_not_upvar = fn@(&&cap_item: @ast::capture_item) {\n         alt tcx.def_map.get(cap_item.id) {\n           ast::def_upvar(_, _, _) {\n             tcx.sess.span_err(\n@@ -64,7 +64,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n         }\n     };\n \n-    let check_block_captures = lambda(v: [@ast::capture_item]) {\n+    let check_block_captures = fn@(v: [@ast::capture_item]) {\n         if check vec::is_not_empty(v) {\n             let cap_item0 = vec::head(v);\n             tcx.sess.span_err(\n@@ -78,7 +78,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n         check_block_captures(cap_clause.copies);\n         check_block_captures(cap_clause.moves);\n       }\n-      ast::proto_bare. | ast::proto_shared(_) | ast::proto_send. {\n+      ast::proto_bare. | ast::proto_shared. | ast::proto_send. {\n         vec::iter(cap_clause.copies, check_capture_item);\n         vec::iter(cap_clause.moves, check_capture_item);\n         vec::iter(cap_clause.moves, check_not_upvar);\n@@ -113,7 +113,7 @@ fn compute_capture_vars(tcx: ty::ctxt,\n \n     let implicit_mode = alt fn_proto {\n       ast::proto_block. { cap_ref }\n-      ast::proto_bare. | ast::proto_shared(_) | ast::proto_send. { cap_copy }\n+      ast::proto_bare. | ast::proto_shared. | ast::proto_send. { cap_copy }\n     };\n \n     vec::iter(*freevars) { |fvar|"}, {"sha": "e1d481ca5c5ae5b680e314383b6d51e5339dd3b3", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -37,7 +37,7 @@ fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n     fn ignore_item(_i: @ast::item, &&_depth: int, _v: visit::vt<int>) { }\n \n     let walk_expr =\n-        lambda (expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n+        fn@ (expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n             alt expr.node {\n               ast::expr_fn(proto, decl, _, captures) {\n                 if proto != ast::proto_bare {\n@@ -89,7 +89,7 @@ fn annotate_freevars(def_map: resolve::def_map, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = new_int_hash();\n \n-    let walk_fn = lambda (_fk: visit::fn_kind, _decl: ast::fn_decl,\n+    let walk_fn = fn@ (_fk: visit::fn_kind, _decl: ast::fn_decl,\n                           blk: ast::blk, _sp: span, nid: ast::node_id) {\n         let vars = collect_freevars(def_map, blk);\n         freevars.insert(nid, vars);"}, {"sha": "85ea75a95ec37e276c9af80e4e86f7ada7d0eca2", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -61,7 +61,7 @@ fn with_appropriate_checker(cx: ctx, id: node_id,\n     let fty = ty::node_id_to_monotype(cx.tcx, id);\n     alt ty::ty_fn_proto(cx.tcx, fty) {\n       proto_send. { b(check_send); }\n-      proto_shared(_) { b(check_copy); }\n+      proto_shared. { b(check_copy); }\n       proto_block. { /* no check needed */ }\n       proto_bare. { b(check_none); }\n     }\n@@ -106,7 +106,7 @@ fn check_fn_cap_clause(cx: ctx,\n     });\n     //log(\"freevar_ids\", freevar_ids);\n     with_appropriate_checker(cx, id) { |checker|\n-        let check_var = lambda(&&cap_item: @capture_item) {\n+        let check_var = fn@(&&cap_item: @capture_item) {\n             let cap_def = cx.tcx.def_map.get(cap_item.id);\n             let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n             if !vec::member(cap_def_id, freevar_ids) {"}, {"sha": "5cbd72c4bef2770bf8ec0300bd6bdaf2d9137bea", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -208,7 +208,7 @@ fn allocate_cbox(bcx: @block_ctxt,\n \n     let ccx = bcx_ccx(bcx);\n \n-    let alloc_in_heap = lambda(bcx: @block_ctxt,\n+    let alloc_in_heap = fn@(bcx: @block_ctxt,\n                                xchgheap: bool,\n                                &temp_cleanups: [ValueRef])\n         -> (@block_ctxt, ValueRef) {\n@@ -520,7 +520,7 @@ fn trans_expr_fn(bcx: @block_ctxt,\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n     register_fn(ccx, sp, sub_cx.path, \"anon fn\", [], id);\n \n-    let trans_closure_env = lambda(ck: ty::closure_kind) -> ValueRef {\n+    let trans_closure_env = fn@(ck: ty::closure_kind) -> ValueRef {\n         let cap_vars = capture::compute_capture_vars(\n             ccx.tcx, id, proto, cap_clause);\n         let {llbox, cboxptr_ty, bcx} = build_closure(bcx, cap_vars, ck);\n@@ -532,7 +532,7 @@ fn trans_expr_fn(bcx: @block_ctxt,\n \n     let closure = alt proto {\n       ast::proto_block. { trans_closure_env(ty::closure_block) }\n-      ast::proto_shared(_) { trans_closure_env(ty::closure_shared) }\n+      ast::proto_shared. { trans_closure_env(ty::closure_shared) }\n       ast::proto_send. { trans_closure_env(ty::closure_send) }\n       ast::proto_bare. {\n         let closure = C_null(T_opaque_cbox_ptr(ccx));\n@@ -660,7 +660,7 @@ fn make_fn_glue(\n     let bcx = cx;\n     let tcx = bcx_tcx(cx);\n \n-    let fn_env = lambda(ck: ty::closure_kind) -> @block_ctxt {\n+    let fn_env = fn@(ck: ty::closure_kind) -> @block_ctxt {\n         let box_cell_v = GEPi(cx, v, [0, abi::fn_field_box]);\n         let box_ptr_v = Load(cx, box_cell_v);\n         make_null_test(cx, box_ptr_v) {|bcx|\n@@ -675,7 +675,7 @@ fn make_fn_glue(\n       ty::ty_fn({proto: ast::proto_send., _}) {\n         fn_env(ty::closure_send)\n       }\n-      ty::ty_fn({proto: ast::proto_shared(_), _}) {\n+      ty::ty_fn({proto: ast::proto_shared., _}) {\n         fn_env(ty::closure_shared)\n       }\n       _ { fail \"make_fn_glue invoked on non-function type\" }"}, {"sha": "e4d00120aacb17d8e84f86537c9014e6f231f222", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -348,7 +348,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n       expr_fn(_, _, _, cap_clause) {\n         find_pre_post_expr_fn_upvars(fcx, e);\n \n-        let use_cap_item = lambda(&&cap_item: @capture_item) {\n+        let use_cap_item = fn@(&&cap_item: @capture_item) {\n             let d = local_node_id_to_local_def_id(fcx, cap_item.id);\n             option::may(d, { |id| use_var(fcx, id) });\n         };"}, {"sha": "f1a1858267aa59c4404d071f61029750ba1864a9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1020,7 +1020,7 @@ pure fn kind_can_be_sent(k: kind) -> bool {\n fn proto_kind(p: proto) -> kind {\n     alt p {\n       ast::proto_block. { kind_noncopyable }\n-      ast::proto_shared(_) { kind_copyable }\n+      ast::proto_shared. { kind_copyable }\n       ast::proto_send. { kind_sendable }\n       ast::proto_bare. { kind_sendable }\n     }\n@@ -1563,7 +1563,7 @@ fn ty_fn_proto(cx: ctxt, fty: t) -> ast::proto {\n       ty::ty_fn(f) { ret f.proto; }\n       ty::ty_native_fn(_, _) {\n         // FIXME: This should probably be proto_bare\n-        ret ast::proto_shared(ast::sugar_normal);\n+        ret ast::proto_shared;\n       }\n       _ { cx.sess.bug(\"ty_fn_proto() called on non-fn type\"); }\n     }\n@@ -1947,8 +1947,7 @@ mod unify {\n               (_, ast::proto_block.) { true }\n               (ast::proto_bare., _) { true }\n \n-              // Equal prototypes (modulo sugar) are always subprotos:\n-              (ast::proto_shared(_), ast::proto_shared(_)) { true }\n+              // Equal prototypes are always subprotos:\n               (_, _) { p_sub == p_sup }\n             };\n         }"}, {"sha": "c55d26ce81ccd960359c516b82d5daa5a4021e90", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -553,7 +553,7 @@ fn ty_of_obj_ctor(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n         let t_field = ast_ty_to_ty(tcx, mode, f.ty);\n         t_inputs += [{mode: ast::by_copy, ty: t_field}];\n     }\n-    let t_fn = ty::mk_fn(tcx, {proto: ast::proto_shared(ast::sugar_normal),\n+    let t_fn = ty::mk_fn(tcx, {proto: ast::proto_shared,\n                                inputs: t_inputs, output: t_obj.ty,\n                                ret_style: ast::return_val, constraints: []});\n     let tpt = {bounds: ty_param_bounds(tcx, mode, ty_params), ty: t_fn};\n@@ -697,7 +697,7 @@ mod collect {\n                 }\n                 // FIXME: this will be different for constrained types\n                 ty::mk_fn(cx.tcx,\n-                          {proto: ast::proto_shared(ast::sugar_normal),\n+                          {proto: ast::proto_shared,\n                            inputs: args, output: tag_ty,\n                            ret_style: ast::return_val, constraints: []})\n             };\n@@ -799,13 +799,13 @@ mod collect {\n             let t_res = ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n                                    params);\n             let t_ctor = ty::mk_fn(cx.tcx, {\n-                proto: ast::proto_shared(ast::sugar_normal),\n+                proto: ast::proto_shared,\n                 inputs: [{mode: ast::by_copy with t_arg}],\n                 output: t_res,\n                 ret_style: ast::return_val, constraints: []\n             });\n             let t_dtor = ty::mk_fn(cx.tcx, {\n-                proto: ast::proto_shared(ast::sugar_normal),\n+                proto: ast::proto_shared,\n                 inputs: [t_arg], output: ty::mk_nil(cx.tcx),\n                 ret_style: ast::return_val, constraints: []\n             });\n@@ -1172,9 +1172,9 @@ fn gather_locals(ccx: @crate_ctxt,\n         };\n     let tcx = ccx.tcx;\n \n-    let next_var_id = lambda () -> int { let rv = *nvi; *nvi += 1; ret rv; };\n+    let next_var_id = fn@ () -> int { let rv = *nvi; *nvi += 1; ret rv; };\n     let assign =\n-        lambda (nid: ast::node_id, ty_opt: option::t<ty::t>) {\n+        fn@ (nid: ast::node_id, ty_opt: option::t<ty::t>) {\n             let var_id = next_var_id();\n             locals.insert(nid, var_id);\n             alt ty_opt {\n@@ -1206,15 +1206,15 @@ fn gather_locals(ccx: @crate_ctxt,\n \n     // Add explicitly-declared locals.\n     let visit_local =\n-        lambda (local: @ast::local, &&e: (), v: visit::vt<()>) {\n+        fn@ (local: @ast::local, &&e: (), v: visit::vt<()>) {\n             let local_ty = ast_ty_to_ty_crate_infer(ccx, local.node.ty);\n             assign(local.node.id, local_ty);\n             visit::visit_local(local, e, v);\n         };\n \n     // Add pattern bindings.\n     let visit_pat =\n-        lambda (p: @ast::pat, &&e: (), v: visit::vt<()>) {\n+        fn@ (p: @ast::pat, &&e: (), v: visit::vt<()>) {\n             alt p.node {\n               ast::pat_bind(_, _) { assign(p.id, none); }\n               _ {/* no-op */ }\n@@ -1726,7 +1726,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         // of arguments when we typecheck the functions. This isn't really the\n         // right way to do this.\n         let check_args =\n-            lambda (check_blocks: bool) -> bool {\n+            fn@ (check_blocks: bool) -> bool {\n                 let i = 0u;\n                 let bot = false;\n                 for a_opt: option::t<@ast::expr> in args {\n@@ -2179,7 +2179,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         fn lower_bound_proto(proto: ast::proto) -> ast::proto {\n             // FIXME: This is right for bare fns, possibly not others\n             alt proto {\n-              ast::proto_bare. { ast::proto_shared(ast::sugar_normal) }\n+              ast::proto_bare. { ast::proto_shared }\n               _ { proto }\n             }\n         }\n@@ -2632,7 +2632,7 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n     let fcx: @fn_ctxt =\n         @{ret_ty: rty,\n           purity: ast::pure_fn,\n-          proto: ast::proto_shared(ast::sugar_normal),\n+          proto: ast::proto_shared,\n           var_bindings: ty::unify::mk_var_bindings(),\n           locals: new_int_hash::<int>(),\n           next_var_id: @mutable 0,"}, {"sha": "1acbabd65f9811d119e0a4d5bf9173646db3967a", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -110,15 +110,10 @@ tag pat_ {\n \n tag mutability { mut; imm; maybe_mut; }\n \n-tag proto_sugar {\n-    sugar_normal;\n-    sugar_sexy;\n-}\n-\n tag proto {\n     proto_bare;\n     proto_send;\n-    proto_shared(proto_sugar);\n+    proto_shared;\n     proto_block;\n }\n "}, {"sha": "2eeb5cbf136ee71c0e7ca1f5928df965de926ff2", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -168,7 +168,7 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     let words = new_str_hash();\n     for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n-                 \"assert\", \"claim\", \"native\", \"fn\", \"lambda\", \"pure\",\n+                 \"assert\", \"claim\", \"native\", \"fn\", \"fn@\", \"pure\",\n                  \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n                  \"log\", \"tag\", \"obj\", \"copy\", \"sendfn\", \"impl\", \"iface\"] {\n         words.insert(word, ());\n@@ -514,8 +514,8 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         t = parse_ty_fn(proto, p);\n     } else if eat_word(p, \"block\") {\n         t = parse_ty_fn(ast::proto_block, p);\n-    } else if eat_word(p, \"lambda\") {\n-        t = parse_ty_fn(ast::proto_shared(ast::sugar_sexy), p);\n+    } else if eat_word(p, \"fn@\") {\n+        t = parse_ty_fn(ast::proto_shared, p);\n     } else if eat_word(p, \"sendfn\") {\n         t = parse_ty_fn(ast::proto_send, p);\n     } else if eat_word(p, \"obj\") {\n@@ -821,8 +821,8 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(parse_fn_expr(p, proto));\n     } else if eat_word(p, \"block\") {\n         ret pexpr(parse_fn_expr(p, ast::proto_block));\n-    } else if eat_word(p, \"lambda\") {\n-        ret pexpr(parse_fn_expr(p, ast::proto_shared(ast::sugar_sexy)));\n+    } else if eat_word(p, \"fn@\") {\n+        ret pexpr(parse_fn_expr(p, ast::proto_shared));\n     } else if eat_word(p, \"sendfn\") {\n         ret pexpr(parse_fn_expr(p, ast::proto_send));\n     } else if eat_word(p, \"unchecked\") {\n@@ -2117,7 +2117,7 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n fn parse_fn_ty_proto(p: parser) -> ast::proto {\n     if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_shared(ast::sugar_normal)\n+        ast::proto_shared\n     } else {\n         ast::proto_bare\n     }"}, {"sha": "fc0a67dee2358b2c7b5050d4bfe9ba1c640ce817", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1685,8 +1685,7 @@ fn proto_to_str(p: ast::proto) -> str {\n           ast::proto_bare. { \"fn\" }\n           ast::proto_block. { \"block\" }\n           ast::proto_send. { \"sendfn\" }\n-          ast::proto_shared(ast::sugar_normal.) { \"fn@\" }\n-          ast::proto_shared(ast::sugar_sexy.) { \"lambda\" }\n+          ast::proto_shared. { \"fn@\" }\n         };\n }\n "}, {"sha": "1c38095d519e4e6f4008140d0d40e1d644e91607", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -19,7 +19,7 @@ tag fn_kind {\n     fk_item_fn(ident, [ty_param]); //< an item declared with fn()\n     fk_method(ident, [ty_param]);\n     fk_res(ident, [ty_param]);\n-    fk_anon(proto);  //< an anonymous function like lambda(...)\n+    fk_anon(proto);  //< an anonymous function like fn@(...)\n     fk_fn_block;     //< a block {||...}\n }\n "}, {"sha": "a7348b26fa207d4c7a3b3070a845582d61c90e67", "filename": "src/test/compile-fail/block-arg-used-as-lambda-with-illegal-cap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-used-as-lambda-with-illegal-cap.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,10 +1,10 @@\n // error-pattern: copying a noncopyable value\n \n-fn to_lambda1(f: lambda(uint) -> uint) -> lambda(uint) -> uint {\n+fn to_lambda1(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n     ret f;\n }\n \n-fn to_lambda2(b: block(uint) -> uint) -> lambda(uint) -> uint {\n+fn to_lambda2(b: block(uint) -> uint) -> fn@(uint) -> uint {\n     ret to_lambda1({|x| b(x)});\n }\n "}, {"sha": "6f4972fdf66e76d9ed78de289fc530a2b41f5279", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,9 +1,9 @@\n // error-pattern: copying a noncopyable value\n \n-fn to_lambda2(b: block(uint) -> uint) -> lambda(uint) -> uint {\n+fn to_lambda2(b: block(uint) -> uint) -> fn@(uint) -> uint {\n     // test case where copy clause specifies a value that is not used\n-    // in lambda body, but value is illegal to copy:\n-    ret lambda[copy b](u: uint) -> uint { 22u };\n+    // in fn@ body, but value is illegal to copy:\n+    ret fn@[copy b](u: uint) -> uint { 22u };\n }\n \n fn main() {"}, {"sha": "cd7800b3780f0a5e8261c4dab0214e66ba3e39bd", "filename": "src/test/compile-fail/fn-expr-type-state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:Unsatisfied precondition\n \n fn main() {\n-    // Typestate should work even in a lambda. we should reject this program.\n+    // Typestate should work even in a fn@. we should reject this program.\n     let f = fn () -> int { let i: int; ret i; };\n     log(error, f());\n }"}, {"sha": "2117eeefe8bc2d4b2d32b6a8caef27fb25357797", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,11 +1,11 @@\n // error-pattern:assigning to upvar\n-// Make sure that nesting a block within a lambda doesn't let us\n-// mutate upvars from a lambda.\n+// Make sure that nesting a block within a fn@ doesn't let us\n+// mutate upvars from a fn@.\n fn f2(x: block()) { x(); }\n \n fn main() {\n     let i = 0;\n-    let ctr = lambda () -> int { f2({|| i = i + 1; }); ret i; };\n+    let ctr = fn@ () -> int { f2({|| i = i + 1; }); ret i; };\n     log(error, ctr());\n     log(error, ctr());\n     log(error, ctr());"}, {"sha": "0c6d8b1e7c53831e9c38283d3b27c4a6e8e3258c", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,8 +1,8 @@\n // error-pattern:assigning to upvar\n-// Make sure we can't write to upvars from lambdas\n+// Make sure we can't write to upvars from fn@s\n fn main() {\n     let i = 0;\n-    let ctr = lambda () -> int { i = i + 1; ret i; };\n+    let ctr = fn@ () -> int { i = i + 1; ret i; };\n     log(error, ctr());\n     log(error, ctr());\n     log(error, ctr());"}, {"sha": "1be97b9465475184ab57ff5dd865266427b49d5a", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,6 +1,6 @@\n-// error-pattern: mismatched types: expected `lambda(++uint) -> uint`\n+// error-pattern: mismatched types: expected `fn@(++uint) -> uint`\n \n-fn test(f: lambda(uint) -> uint) -> uint {\n+fn test(f: fn@(uint) -> uint) -> uint {\n     ret f(22u);\n }\n "}, {"sha": "eeaa7853c3e5ecbd5cc6a3d2d577980532b7ec21", "filename": "src/test/pretty/cap-clause.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fpretty%2Fcap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Fpretty%2Fcap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcap-clause.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -4,9 +4,9 @@ fn main() {\n     let x = 1;\n     let y = 2;\n     let z = 3;\n-    let l1 = lambda[copy x]() -> int { x + y };\n-    let l2 = lambda[copy x; move y]() -> int { x + y };\n-    let l3 = lambda[move z]() -> int { z };\n+    let l1 = fn@[copy x]() -> int { x + y };\n+    let l2 = fn@[copy x; move y]() -> int { x + y };\n+    let l3 = fn@[move z]() -> int { z };\n \n     let x = 1;\n     let y = 2;"}, {"sha": "b9dcabcabbfdbe8503d2bd8a0a1bb0e0082a0640", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -8,7 +8,7 @@ fn main() {\n         macerate(*tasties);\n     } (carrots, { |food|\n         let mush = food + cheese;\n-        lambda() {\n+        let _ = fn@() {\n             let chew = mush + cheese;\n             fail \"so yummy\"\n         } ();"}, {"sha": "87067c50218852e0e4503e9f449a0aa13368fc54", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -4,7 +4,7 @@ fn asSendfn( f : sendfn()->uint ) -> uint {\n    ret f();\n }\n \n-fn asLambda( f : lambda()->uint ) -> uint {\n+fn asLambda( f : fn@()->uint ) -> uint {\n    ret f();\n }\n "}, {"sha": "18e8513b0903b1a4b65e0fc21c3eadc09fb741af", "filename": "src/test/run-pass/block-arg-used-as-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,9 +1,9 @@\n-fn to_lambda(f: lambda(uint) -> uint) -> lambda(uint) -> uint {\n+fn to_lambda(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n     ret f;\n }\n \n fn main() {\n-    let x: lambda(uint) -> uint = to_lambda({ |x| x * 2u });\n+    let x: fn@(uint) -> uint = to_lambda({ |x| x * 2u });\n     let y = to_lambda(x);\n \n     let x_r = x(22u);"}, {"sha": "b484a16b06d4a1df9b84ee08a3a9c4a2e82d9a17", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -2,8 +2,8 @@ fn main() {\n     let x = ~1;\n     let y = ptr::addr_of(*x) as uint;\n \n-    let lam_copy = lambda[copy x]() -> uint { ptr::addr_of(*x) as uint };\n-    let lam_move = lambda[move x]() -> uint { ptr::addr_of(*x) as uint };\n+    let lam_copy = fn@[copy x]() -> uint { ptr::addr_of(*x) as uint };\n+    let lam_move = fn@[move x]() -> uint { ptr::addr_of(*x) as uint };\n     assert lam_copy() != y;\n     assert lam_move() == y;\n "}, {"sha": "8367cbd58a7d77a051b3f426f005f11d3d396d19", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    // We should be able to type infer inside of lambdas.\n+    // We should be able to type infer inside of fn@s.\n     let f = fn () { let i = 10; };\n }"}, {"sha": "d526c00a99814ad456147dbdfde250ba87f40c34", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,7 +1,7 @@\n // This should typecheck even though the type of e is not fully\n-// resolved when we finish typechecking the lambda.\n+// resolved when we finish typechecking the fn@.\n fn main() {\n     let e = @{mutable refs: [], n: 0};\n-    let f = lambda () { log(error, e.n); };\n+    let f = fn@ () { log(error, e.n); };\n     e.refs += [1];\n }"}, {"sha": "171650a426890b39faefd9e320af5825b1e2e218", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,7 +1,7 @@\n-// Make sure we don't leak lambdas in silly ways.\n+// Make sure we don't leak fn@s in silly ways.\n fn force(f: fn@()) { f() }\n fn main() {\n     let x = 7;\n-    lambda () { log(error, x); };\n-    force(lambda () { log(error, x); });\n+    let _ = fn@ () { log(error, x); };\n+    force(fn@ () { log(error, x); });\n }"}, {"sha": "6ac7404c3cebe2993451d07e875e8658444d9c04", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,9 +1,9 @@\n // Make sure #1399 stays fixed\n \n-fn foo() -> lambda() -> int {\n+fn foo() -> fn@() -> int {\n     let k = ~22;\n     let _u = {a: k};\n-    ret lambda[move k]() -> int { 22 };\n+    ret fn@[move k]() -> int { 22 };\n }\n \n fn main() {"}, {"sha": "b238dab30266b5ac2e3bfd8ca4490f4d0df23711", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=8387896ddaa5fbe2ba39b9ad06fd02e1bfcb76e7", "patch": "@@ -1,7 +1,7 @@\n // Make sure #1399 stays fixed\n \n fn main() {\n-    fn invoke(f: lambda()) { f(); }\n+    fn invoke(f: fn@()) { f(); }\n     let k = ~22;\n     let _u = {a: k};\n     invoke {||log(error, k);}"}]}