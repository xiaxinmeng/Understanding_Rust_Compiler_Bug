{"sha": "d6fd7809b016787e8a23f443b1b626840c4ea5c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZmQ3ODA5YjAxNjc4N2U4YTIzZjQ0M2IxYjYyNjg0MGM0ZWE1Yzc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:46:44Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:54:21Z"}, "message": "Clean up and fix inner item collection a bit", "tree": {"sha": "f0fa343b116319ceecc736a9f37f23a429a971f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0fa343b116319ceecc736a9f37f23a429a971f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6fd7809b016787e8a23f443b1b626840c4ea5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fd7809b016787e8a23f443b1b626840c4ea5c7", "html_url": "https://github.com/rust-lang/rust/commit/d6fd7809b016787e8a23f443b1b626840c4ea5c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6fd7809b016787e8a23f443b1b626840c4ea5c7/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b50b0b2b658006c23d21749627e413af5c2aa44", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b50b0b2b658006c23d21749627e413af5c2aa44", "html_url": "https://github.com/rust-lang/rust/commit/3b50b0b2b658006c23d21749627e413af5c2aa44"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "f10ad25f7004a53bcf8cef14850bbbca1262dd45", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d6fd7809b016787e8a23f443b1b626840c4ea5c7/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fd7809b016787e8a23f443b1b626840c4ea5c7/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=d6fd7809b016787e8a23f443b1b626840c4ea5c7", "patch": "@@ -82,7 +82,13 @@ impl Ctx {\n             | ast::ModuleItem::TypeAliasDef(_)\n             | ast::ModuleItem::ConstDef(_)\n             | ast::ModuleItem::StaticDef(_)\n-            | ast::ModuleItem::MacroCall(_) => self.collect_inner_items(item.syntax()),\n+            | ast::ModuleItem::MacroCall(_) => {\n+                // Skip this if we're already collecting inner items. We'll descend into all nodes\n+                // already.\n+                if !inner {\n+                    self.collect_inner_items(item.syntax());\n+                }\n+            }\n \n             // These are handled in their respective `lower_X` method (since we can't just blindly\n             // walk them).\n@@ -403,7 +409,8 @@ impl Ctx {\n     fn lower_trait(&mut self, trait_def: &ast::TraitDef) -> Option<FileItemTreeId<Trait>> {\n         let name = trait_def.name()?.as_name();\n         let visibility = self.lower_visibility(trait_def);\n-        let generic_params = self.lower_generic_params(GenericsOwner::Trait(trait_def), trait_def);\n+        let generic_params =\n+            self.lower_generic_params_and_inner_items(GenericsOwner::Trait(trait_def), trait_def);\n         let auto = trait_def.auto_token().is_some();\n         let items = trait_def.item_list().map(|list| {\n             self.with_inherited_visibility(visibility, |this| {\n@@ -432,7 +439,8 @@ impl Ctx {\n     }\n \n     fn lower_impl(&mut self, impl_def: &ast::ImplDef) -> Option<FileItemTreeId<Impl>> {\n-        let generic_params = self.lower_generic_params(GenericsOwner::Impl, impl_def);\n+        let generic_params =\n+            self.lower_generic_params_and_inner_items(GenericsOwner::Impl, impl_def);\n         let target_trait = impl_def.target_trait().map(|tr| self.lower_type_ref(&tr));\n         let target_type = self.lower_type_ref(&impl_def.target_type()?);\n         let is_negative = impl_def.excl_token().is_some();\n@@ -548,6 +556,23 @@ impl Ctx {\n         })\n     }\n \n+    /// Lowers generics defined on `node` and collects inner items defined within.\n+    fn lower_generic_params_and_inner_items(\n+        &mut self,\n+        owner: GenericsOwner<'_>,\n+        node: &impl ast::TypeParamsOwner,\n+    ) -> GenericParamsId {\n+        // Generics are part of item headers and may contain inner items we need to collect.\n+        if let Some(params) = node.type_param_list() {\n+            self.collect_inner_items(params.syntax());\n+        }\n+        if let Some(clause) = node.where_clause() {\n+            self.collect_inner_items(clause.syntax());\n+        }\n+\n+        self.lower_generic_params(owner, node)\n+    }\n+\n     fn lower_generic_params(\n         &mut self,\n         owner: GenericsOwner<'_>,\n@@ -617,7 +642,7 @@ impl Ctx {\n         TypeRef::from_ast(&self.body_ctx, type_ref.clone())\n     }\n     fn lower_type_ref_opt(&self, type_ref: Option<ast::TypeRef>) -> TypeRef {\n-        TypeRef::from_ast_opt(&self.body_ctx, type_ref)\n+        type_ref.map(|ty| self.lower_type_ref(&ty)).unwrap_or(TypeRef::Error)\n     }\n \n     /// Forces the visibility `vis` to be used for all items lowered during execution of `f`."}, {"sha": "dc035d809ecf7b707d5beecfb37e3737b44ff53c", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6fd7809b016787e8a23f443b1b626840c4ea5c7/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fd7809b016787e8a23f443b1b626840c4ea5c7/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=d6fd7809b016787e8a23f443b1b626840c4ea5c7", "patch": "@@ -374,11 +374,17 @@ fn cursed_inner_items() {\n \n         impl En {\n             fn assoc() {\n-                trait InnerTrait {}\n-                struct InnerStruct {}\n-                impl InnerTrait for InnerStruct {}\n+                trait InnerTrait<T = [u8; { fn f() {} }]> {}\n+                struct InnerStruct<T = [u8; { fn f() {} }]> {}\n+                impl<T = [u8; { fn f() {} }]> InnerTrait for InnerStruct {}\n             }\n         }\n+\n+        trait Tr<T = [u8; { fn f() {} }]> {\n+            type AssocTy = [u8; { fn f() {} }];\n+\n+            const AssocConst: [u8; { fn f() {} }];\n+        }\n     \",\n     );\n }"}]}