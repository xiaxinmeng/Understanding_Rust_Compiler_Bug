{"sha": "51df99f3c2bac3ee7158b115ff6d54b687d018e1", "node_id": "C_kwDOAAsO6NoAKDUxZGY5OWYzYzJiYWMzZWU3MTU4YjExNWZmNmQ1NGI2ODdkMDE4ZTE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-24T22:39:59Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-26T17:51:10Z"}, "message": "rustdoc: use smarter encoding for playground URL\n\nThe old way would compress okay with DEFLATE, but this version makes\nuncompressed docs smaller, which matters for memory usage and stuff\nlike `cargo doc`.\n\nTry it out: <https://play.rust-lang.org/?code=fn+main()+{%0Alet+mut+v+=+Vec::new();%0Av.push(1+/+1);%0Aprintln!(%22{}%22,+v[0]);%0A}>\n\nIn local testing, this change shrinks sample pages by anywhere between\n4.0% and 0.031%\n\n    $ du -b after.dir/std/vec/struct.Vec.html before.dir/std/vec/struct.Vec.html\n    759235  after.dir/std/vec/struct.Vec.html\n    781842  before.dir/std/vec/struct.Vec.html\n\n100*((759235-781842)/781842)=-2.8\n\n    $ du -b after.dir/std/num/struct.Wrapping.html before.dir/std/num/struct.Wrapping.html\n    3194173 after.dir/std/num/struct.Wrapping.html\n    3204351 before.dir/std/num/struct.Wrapping.html\n\n100*((3194173-3204351)/3204351)=-0.031\n\n    $ du -b after.dir/std/keyword.match.html before.dir/std/keyword.match.html\n    8151    after.dir/std/keyword.match.html\n    8495    before.dir/std/keyword.match.html\n\n100*((8151-8495)/8495)=-4.0\n\nGzipped tarball sizes seem shrunk, but not by much.\n\n    du -s before.tar.gz after.tar.gz\n    69600   before.tar.gz\n    69480   after.tar.gz\n\n100*((69480-69600)/69600)=-0.17", "tree": {"sha": "846756fe9cebbb9d96234b6038e8fc4549cd7fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846756fe9cebbb9d96234b6038e8fc4549cd7fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51df99f3c2bac3ee7158b115ff6d54b687d018e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51df99f3c2bac3ee7158b115ff6d54b687d018e1", "html_url": "https://github.com/rust-lang/rust/commit/51df99f3c2bac3ee7158b115ff6d54b687d018e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51df99f3c2bac3ee7158b115ff6d54b687d018e1/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "html_url": "https://github.com/rust-lang/rust/commit/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "b1efbf4bdcaf787eac060c5a1492aa44d130e1ad", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/51df99f3c2bac3ee7158b115ff6d54b687d018e1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51df99f3c2bac3ee7158b115ff6d54b687d018e1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=51df99f3c2bac3ee7158b115ff6d54b687d018e1", "patch": "@@ -296,25 +296,42 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             let channel = if test.contains(\"#![feature(\") { \"&amp;version=nightly\" } else { \"\" };\n \n             // These characters don't need to be escaped in a URI.\n-            // FIXME: use a library function for percent encoding.\n+            // See https://url.spec.whatwg.org/#query-percent-encode-set\n+            // and https://url.spec.whatwg.org/#urlencoded-parsing\n+            // and https://url.spec.whatwg.org/#url-code-points\n             fn dont_escape(c: u8) -> bool {\n                 (b'a' <= c && c <= b'z')\n                     || (b'A' <= c && c <= b'Z')\n                     || (b'0' <= c && c <= b'9')\n                     || c == b'-'\n                     || c == b'_'\n                     || c == b'.'\n+                    || c == b','\n                     || c == b'~'\n                     || c == b'!'\n                     || c == b'\\''\n                     || c == b'('\n                     || c == b')'\n                     || c == b'*'\n+                    || c == b'/'\n+                    || c == b';'\n+                    || c == b':'\n+                    || c == b'?'\n+                    // As described in urlencoded-parsing, the\n+                    // first `=` is the one that separates key from\n+                    // value. Following `=`s are part of the value.\n+                    || c == b'='\n             }\n             let mut test_escaped = String::new();\n             for b in test.bytes() {\n                 if dont_escape(b) {\n                     test_escaped.push(char::from(b));\n+                } else if b == b' ' {\n+                    // URL queries are decoded with + replaced with SP\n+                    test_escaped.push('+');\n+                } else if b == b'%' {\n+                    test_escaped.push('%');\n+                    test_escaped.push('%');\n                 } else {\n                     write!(test_escaped, \"%{:02X}\", b).unwrap();\n                 }"}, {"sha": "f3811fe0b0ad10781e70e9896016763f0e4886af", "filename": "tests/rustdoc/playground-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51df99f3c2bac3ee7158b115ff6d54b687d018e1/tests%2Frustdoc%2Fplayground-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51df99f3c2bac3ee7158b115ff6d54b687d018e1/tests%2Frustdoc%2Fplayground-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fplayground-arg.rs?ref=51df99f3c2bac3ee7158b115ff6d54b687d018e1", "patch": "@@ -10,4 +10,4 @@\n pub fn dummy() {}\n \n // ensure that `extern crate foo;` was inserted into code snips automatically:\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern%20crate%20r%23foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D&edition=2015\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern+crate+r%23foo;%0Afn+main()+%7B%0Ause+foo::dummy;%0Adummy();%0A%7D&edition=2015\"]' \"Run\""}, {"sha": "5c7fa33efc5e586a3be143e52174149497279edb", "filename": "tests/rustdoc/playground.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51df99f3c2bac3ee7158b115ff6d54b687d018e1/tests%2Frustdoc%2Fplayground.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51df99f3c2bac3ee7158b115ff6d54b687d018e1/tests%2Frustdoc%2Fplayground.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fplayground.rs?ref=51df99f3c2bac3ee7158b115ff6d54b687d018e1", "patch": "@@ -22,6 +22,6 @@\n //! }\n //! ```\n \n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D&edition=2015\"]' \"Run\"\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aprintln!(%22Hello%2C%20world!%22)%3B%0A%7D&edition=2015\"]' \"Run\"\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D&version=nightly&edition=2015\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aprintln!(%22Hello,+world!%22);%0A%7D&edition=2015\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++println!(%22Hello,+world!%22);%0A%7D&edition=2015\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn+main()+%7B%0A++++println!(%22Hello,+world!%22);%0A%7D&version=nightly&edition=2015\"]' \"Run\""}]}