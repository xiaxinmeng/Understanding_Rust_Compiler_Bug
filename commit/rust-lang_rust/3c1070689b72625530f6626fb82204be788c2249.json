{"sha": "3c1070689b72625530f6626fb82204be788c2249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMTA3MDY4OWI3MjYyNTUzMGY2NjI2ZmI4MjIwNGJlNzg4YzIyNDk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-30T03:44:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-30T03:44:27Z"}, "message": "Rollup merge of #41509 - froydnj:float-stack-reduction, r=nagisa\n\nreduce stack requirements for floating-point formatting\n\nDoing this speeds up float formatting by ~10% or so, and also makes the formatting code more suitable for embedded environments where stack space is at a premium.", "tree": {"sha": "9b4f928ce6c717d885157dfdd19df8232a19f7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b4f928ce6c717d885157dfdd19df8232a19f7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c1070689b72625530f6626fb82204be788c2249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1070689b72625530f6626fb82204be788c2249", "html_url": "https://github.com/rust-lang/rust/commit/3c1070689b72625530f6626fb82204be788c2249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c1070689b72625530f6626fb82204be788c2249/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab99c9beb54e6853f07f37538aefd9a396f6945f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab99c9beb54e6853f07f37538aefd9a396f6945f", "html_url": "https://github.com/rust-lang/rust/commit/ab99c9beb54e6853f07f37538aefd9a396f6945f"}, {"sha": "b2c3102e625f94a084e357ceb976fc98b42b79bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c3102e625f94a084e357ceb976fc98b42b79bf", "html_url": "https://github.com/rust-lang/rust/commit/b2c3102e625f94a084e357ceb976fc98b42b79bf"}], "stats": {"total": 122, "additions": 104, "deletions": 18}, "files": [{"sha": "7f3b98a1c7614f251452cd72df7dffe78096655e", "filename": "src/libcore/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3c1070689b72625530f6626fb82204be788c2249/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1070689b72625530f6626fb82204be788c2249/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=3c1070689b72625530f6626fb82204be788c2249", "patch": "@@ -13,6 +13,10 @@ mod strategy {\n     mod grisu;\n }\n \n+use std::f64;\n+use std::io::Write;\n+use std::vec::Vec;\n+use test::Bencher;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n use core::num::flt2dec::MAX_SIG_DIGITS;\n \n@@ -22,3 +26,23 @@ pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n         full_decoded => panic!(\"expected finite, got {:?} instead\", full_decoded)\n     }\n }\n+\n+#[bench]\n+fn bench_small_shortest(b: &mut Bencher) {\n+    let mut buf = Vec::with_capacity(20);\n+\n+    b.iter(|| {\n+        buf.clear();\n+        write!(&mut buf, \"{}\", 3.1415926f64).unwrap()\n+    });\n+}\n+\n+#[bench]\n+fn bench_big_shortest(b: &mut Bencher) {\n+    let mut buf = Vec::with_capacity(300);\n+\n+    b.iter(|| {\n+        buf.clear();\n+        write!(&mut buf, \"{}\", f64::MAX).unwrap()\n+    });\n+}"}, {"sha": "87def375b202b17e2e38c85cc62453e911b7992d", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 80, "deletions": 18, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3c1070689b72625530f6626fb82204be788c2249/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1070689b72625530f6626fb82204be788c2249/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=3c1070689b72625530f6626fb82204be788c2249", "patch": "@@ -9,8 +9,43 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n+use mem;\n use num::flt2dec;\n \n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                    sign: flt2dec::Sign, precision: usize) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n+                                                    *num, sign, precision,\n+                                                    false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n+                                       num: &T, sign: flt2dec::Sign) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n+                                                 *num, sign, 0, false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n // Common code of floating point Debug and Display.\n fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n     where T: flt2dec::DecodableFloat\n@@ -23,16 +58,48 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool)\n         (true,  true)  => flt2dec::Sign::MinusPlusRaw,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n-        flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                    precision, false, &mut buf, &mut parts)\n+    if let Some(precision) = fmt.precision {\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n-        flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                 0, false, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_decimal_common_shortest(fmt, num, sign)\n+    }\n+}\n+\n+// Don't inline this so callers don't use the stack space this function\n+// requires unless they have to.\n+#[inline(never)]\n+fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n+                                        sign: flt2dec::Sign, precision: usize,\n+                                        upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n+                                                  *num, sign, precision,\n+                                                  upper, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n+}\n+\n+// Don't inline this so callers that call both this and the above won't wind\n+// up using the combined stack space of both functions in some cases.\n+#[inline(never)]\n+fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n+                                           num: &T, sign: flt2dec::Sign,\n+                                           upper: bool) -> Result\n+    where T: flt2dec::DecodableFloat\n+{\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n+                                                     *num, sign, (0, 0), upper,\n+                                                     &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Common code of floating point LowerExp and UpperExp.\n@@ -45,17 +112,12 @@ fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) ->\n         true  => flt2dec::Sign::MinusPlus,\n     };\n \n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 16];\n-    let formatted = if let Some(precision) = fmt.precision {\n+    if let Some(precision) = fmt.precision {\n         // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n-        flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact, *num, sign,\n-                                  precision + 1, upper, &mut buf, &mut parts)\n+        float_to_exponential_common_exact(fmt, num, sign, precision + 1, upper)\n     } else {\n-        flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num, sign,\n-                                     (0, 0), upper, &mut buf, &mut parts)\n-    };\n-    fmt.pad_formatted_parts(&formatted)\n+        float_to_exponential_common_shortest(fmt, num, sign, upper)\n+    }\n }\n \n macro_rules! floating {"}]}