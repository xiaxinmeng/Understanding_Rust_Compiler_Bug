{"sha": "60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "node_id": "C_kwDOAAsO6NoAKDYwYjQ5NTgxYzRiYmJiOTQ5NjdmNWFjMTcwYmY2MTUyZTRlYmE1Y2Y", "commit": {"author": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-08-26T14:06:27Z"}, "committer": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-08T06:30:57Z"}, "message": "translations(rustc_session): migrates session.rs and config.rs", "tree": {"sha": "9b586398b21bdc8b21539a8ff73c474b68dfb7f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b586398b21bdc8b21539a8ff73c474b68dfb7f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "html_url": "https://github.com/rust-lang/rust/commit/60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/comments", "author": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af35b8e3017cb080630942d1c2b7045c74e450a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af35b8e3017cb080630942d1c2b7045c74e450a", "html_url": "https://github.com/rust-lang/rust/commit/4af35b8e3017cb080630942d1c2b7045c74e450a"}], "stats": {"total": 212, "additions": 174, "deletions": 38}, "files": [{"sha": "998196403e744af0e07b5de67fea4b644984834f", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "patch": "@@ -14,3 +14,29 @@ session_feature_diagnostic_for_issue =\n \n session_feature_diagnostic_help =\n     add `#![feature({$feature})]` to the crate attributes to enable\n+\n+session_target_data_layout_parse_error = {$err}\n+\n+session_not_circumvent_feature = `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n+\n+session_profile_use_file_does_not_exist = File `{$path}` passed to `-C profile-use` does not exist.\n+\n+session_linker_plugin_lto_windows_not_supported = Linker plugin based LTO is not supported together with `-C prefer-dynamic` when targeting Windows-like targets\"\n+\n+session_profile_sample_use_file_does_not_exist = File `{$path}` passed to `-C profile-sample-use` does not exist.\n+\n+session_target_requires_unwind_tables = target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\"\n+\n+session_sanitizer_not_supported = {$us} sanitizer is not supported for this target\n+\n+session_sanitizers_not_supported = {$us} sanitizers are not supported for this target\n+\n+session_cannot_mix_and_match_sanitizers = `-Zsanitizer={$first}` is incompatible with `-Zsanitizer={$second}`\n+\n+session_cannot_enable_crt_static_linux = sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n+\n+session_sanitizer_cfi_enabled = `-Zsanitizer=cfi` requires `-Clto`\n+\n+session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination` requires `-Clto`\n+\n+session_unsupported_dwarf_version = requested DWARF version {$dwarf_version} is greater than 5"}, {"sha": "0018346c72c49c198f1809e915f783b741221963", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "patch": "@@ -1,6 +1,7 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n+use crate::errors::TargetDataLayoutParseError;\n pub use crate::options::*;\n \n use crate::search_paths::SearchPath;\n@@ -898,7 +899,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.fatal(&err);\n+        sess.emit_fatal(TargetDataLayoutParseError { err });\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "7aa8d66824103764a03baa29f531521b199b8cd9", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "patch": "@@ -1,7 +1,7 @@\n use std::num::NonZeroU32;\n \n-use crate as rustc_session;\n use crate::cgu_reuse_tracker::CguReuse;\n+use crate::{self as rustc_session};\n use rustc_errors::MultiSpan;\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n@@ -43,3 +43,70 @@ pub struct FeatureDiagnosticForIssue {\n pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::target_data_layout_parse_error)]\n+pub struct TargetDataLayoutParseError {\n+    pub err: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::not_circumvent_feature)]\n+pub struct NotCircumventFeature;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::linker_plugin_lto_windows_not_supported)]\n+pub struct LinkerPluginToWindowsNotSupported;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::profile_use_file_does_not_exist)]\n+pub struct ProfileUseFileDoesNotExist<'a> {\n+    pub path: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::profile_sample_use_file_does_not_exist)]\n+pub struct ProfileSampleUseFileDoesNotExist<'a> {\n+    pub path: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::target_requires_unwind_tables)]\n+pub struct TargetRequiresUnwindTables;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::sanitizer_not_supported)]\n+pub struct SanitizerNotSupported {\n+    pub us: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::sanitizers_not_supported)]\n+pub struct SanitizersNotSupported {\n+    pub us: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::cannot_mix_and_match_sanitizers)]\n+pub struct CannotMixAndMatchSanitizers {\n+    pub first: String,\n+    pub second: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::cannot_enable_crt_static_linux)]\n+pub struct CannotEnableCrtStaticLinux;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::sanitizer_cfi_enabled)]\n+pub struct SanitizerCfiEnabled;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::unstable_virtual_function_elimination)]\n+pub struct UnstableVirtualFunctionElimination;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::unsupported_dwarf_version)]\n+pub struct UnsupportedDwarfVersion {\n+    pub dwarf_version: u32,\n+}"}, {"sha": "4fe0e1de5b3339aac745bc5eb7e5903c994dfa0f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 78, "deletions": 36, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b49581c4bbbb94967f5ac170bf6152e4eba5cf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "patch": "@@ -2,6 +2,12 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n+use crate::errors::{\n+    CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers, LinkerPluginToWindowsNotSupported,\n+    NotCircumventFeature, ProfileSampleUseFileDoesNotExist, ProfileUseFileDoesNotExist,\n+    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported, TargetRequiresUnwindTables,\n+    UnstableVirtualFunctionElimination, UnsupportedDwarfVersion,\n+};\n use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n use crate::{filesearch, lint};\n@@ -235,6 +241,9 @@ impl Session {\n         if !unleashed_features.is_empty() {\n             let mut must_err = false;\n             // Create a diagnostic pointing at where things got unleashed.\n+            // FIXME: We need to correctly migrate this. I couldn't find a way to migrate this.\n+            #[allow(rustc::untranslatable_diagnostic)]\n+            #[allow(rustc::diagnostic_outside_of_impl)]\n             let mut diag = self.struct_warn(\"skipping const checks\");\n             for &(span, feature_gate) in unleashed_features.iter() {\n                 // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n@@ -250,10 +259,7 @@ impl Session {\n             // If we should err, make sure we did.\n             if must_err && self.has_errors().is_none() {\n                 // We have skipped a feature gate, and not run into other errors... reject.\n-                self.err(\n-                    \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n-                     gates, except when testing error paths in the CTFE engine\",\n-                );\n+                self.emit_err(NotCircumventFeature);\n             }\n         }\n     }\n@@ -290,6 +296,8 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -298,6 +306,8 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -307,6 +317,8 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -316,6 +328,8 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n@@ -328,6 +342,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -336,10 +352,14 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -348,6 +368,8 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -356,6 +378,8 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -366,13 +390,17 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -381,6 +409,8 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -389,6 +419,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -397,6 +429,8 @@ impl Session {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -406,15 +440,21 @@ impl Session {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -424,10 +464,14 @@ impl Session {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -441,6 +485,8 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -449,6 +495,8 @@ impl Session {\n         self.diagnostic().span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -534,9 +582,13 @@ impl Session {\n             Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         }\n     }\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -585,6 +637,8 @@ impl Session {\n     ) {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -1469,40 +1523,28 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         && sess.opts.cg.prefer_dynamic\n         && sess.target.is_like_windows\n     {\n-        sess.err(\n-            \"Linker plugin based LTO is not supported together with \\\n-                  `-C prefer-dynamic` when targeting Windows-like targets\",\n-        );\n+        sess.emit_err(LinkerPluginToWindowsNotSupported);\n     }\n \n     // Make sure that any given profiling data actually exists so LLVM can't\n     // decide to silently skip PGO.\n     if let Some(ref path) = sess.opts.cg.profile_use {\n         if !path.exists() {\n-            sess.err(&format!(\n-                \"File `{}` passed to `-C profile-use` does not exist.\",\n-                path.display()\n-            ));\n+            sess.emit_err(ProfileUseFileDoesNotExist { path });\n         }\n     }\n \n     // Do the same for sample profile data.\n     if let Some(ref path) = sess.opts.unstable_opts.profile_sample_use {\n         if !path.exists() {\n-            sess.err(&format!(\n-                \"File `{}` passed to `-C profile-sample-use` does not exist.\",\n-                path.display()\n-            ));\n+            sess.emit_err(ProfileSampleUseFileDoesNotExist { path });\n         }\n     }\n \n     // Unwind tables cannot be disabled if the target requires them.\n     if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n         if sess.target.requires_uwtable && !include_uwtables {\n-            sess.err(\n-                \"target requires unwind tables, they cannot be disabled with \\\n-                     `-C force-unwind-tables=no`.\",\n-            );\n+            sess.emit_err(TargetRequiresUnwindTables);\n         }\n     }\n \n@@ -1512,39 +1554,33 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     match unsupported_sanitizers.into_iter().count() {\n         0 => {}\n         1 => {\n-            sess.err(&format!(\n-                \"{} sanitizer is not supported for this target\",\n-                unsupported_sanitizers\n-            ));\n+            sess.emit_err(SanitizerNotSupported { us: unsupported_sanitizers.to_string() });\n         }\n         _ => {\n-            sess.err(&format!(\n-                \"{} sanitizers are not supported for this target\",\n-                unsupported_sanitizers\n-            ));\n+            sess.emit_err(SanitizersNotSupported { us: unsupported_sanitizers.to_string() });\n         }\n     }\n     // Cannot mix and match sanitizers.\n     let mut sanitizer_iter = sess.opts.unstable_opts.sanitizer.into_iter();\n     if let (Some(first), Some(second)) = (sanitizer_iter.next(), sanitizer_iter.next()) {\n-        sess.err(&format!(\"`-Zsanitizer={first}` is incompatible with `-Zsanitizer={second}`\"));\n+        sess.emit_err(CannotMixAndMatchSanitizers {\n+            first: first.to_string(),\n+            second: second.to_string(),\n+        });\n     }\n \n     // Cannot enable crt-static with sanitizers on Linux\n     if sess.crt_static(None) && !sess.opts.unstable_opts.sanitizer.is_empty() {\n-        sess.err(\n-            \"sanitizer is incompatible with statically linked libc, \\\n-                                disable it using `-C target-feature=-crt-static`\",\n-        );\n+        sess.emit_err(CannotEnableCrtStaticLinux);\n     }\n \n     // LLVM CFI and VFE both require LTO.\n     if sess.lto() != config::Lto::Fat {\n         if sess.is_sanitizer_cfi_enabled() {\n-            sess.err(\"`-Zsanitizer=cfi` requires `-Clto`\");\n+            sess.emit_err(SanitizerCfiEnabled);\n         }\n         if sess.opts.unstable_opts.virtual_function_elimination {\n-            sess.err(\"`-Zvirtual-function-elimination` requires `-Clto`\");\n+            sess.emit_err(UnstableVirtualFunctionElimination);\n         }\n     }\n \n@@ -1559,7 +1595,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     if let Some(dwarf_version) = sess.opts.unstable_opts.dwarf_version {\n         if dwarf_version > 5 {\n-            sess.err(&format!(\"requested DWARF version {} is greater than 5\", dwarf_version));\n+            sess.emit_err(UnsupportedDwarfVersion { dwarf_version });\n         }\n     }\n \n@@ -1614,14 +1650,20 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n     rustc_errors::Handler::with_emitter(true, None, emitter)\n }\n \n+#[allow(rustc::untranslatable_diagnostic)]\n+#[allow(rustc::diagnostic_outside_of_impl)]\n pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n     early_error_handler(output).struct_err(msg).emit()\n }\n \n+#[allow(rustc::untranslatable_diagnostic)]\n+#[allow(rustc::diagnostic_outside_of_impl)]\n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     early_error_handler(output).struct_fatal(msg).emit()\n }\n \n+#[allow(rustc::untranslatable_diagnostic)]\n+#[allow(rustc::diagnostic_outside_of_impl)]\n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     early_error_handler(output).struct_warn(msg).emit()\n }"}]}