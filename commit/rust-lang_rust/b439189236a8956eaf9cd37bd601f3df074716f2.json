{"sha": "b439189236a8956eaf9cd37bd601f3df074716f2", "node_id": "C_kwDOAAsO6NoAKGI0MzkxODkyMzZhODk1NmVhZjljZDM3YmQ2MDFmM2RmMDc0NzE2ZjI", "commit": {"author": {"name": "bmoxb", "email": "maxoblack@yahoo.com", "date": "2023-03-09T20:44:11Z"}, "committer": {"name": "bmoxb", "email": "maxoblack@yahoo.com", "date": "2023-03-09T20:44:11Z"}, "message": "Add examples section which demonstrates the behaviour (specifically the sign positive aspect)", "tree": {"sha": "7006f8346e35c96fcc94aea916cce56eb5e435b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7006f8346e35c96fcc94aea916cce56eb5e435b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b439189236a8956eaf9cd37bd601f3df074716f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b439189236a8956eaf9cd37bd601f3df074716f2", "html_url": "https://github.com/rust-lang/rust/commit/b439189236a8956eaf9cd37bd601f3df074716f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b439189236a8956eaf9cd37bd601f3df074716f2/comments", "author": {"login": "bmoxb", "id": 42641081, "node_id": "MDQ6VXNlcjQyNjQxMDgx", "avatar_url": "https://avatars.githubusercontent.com/u/42641081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmoxb", "html_url": "https://github.com/bmoxb", "followers_url": "https://api.github.com/users/bmoxb/followers", "following_url": "https://api.github.com/users/bmoxb/following{/other_user}", "gists_url": "https://api.github.com/users/bmoxb/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmoxb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmoxb/subscriptions", "organizations_url": "https://api.github.com/users/bmoxb/orgs", "repos_url": "https://api.github.com/users/bmoxb/repos", "events_url": "https://api.github.com/users/bmoxb/events{/privacy}", "received_events_url": "https://api.github.com/users/bmoxb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bmoxb", "id": 42641081, "node_id": "MDQ6VXNlcjQyNjQxMDgx", "avatar_url": "https://avatars.githubusercontent.com/u/42641081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmoxb", "html_url": "https://github.com/bmoxb", "followers_url": "https://api.github.com/users/bmoxb/followers", "following_url": "https://api.github.com/users/bmoxb/following{/other_user}", "gists_url": "https://api.github.com/users/bmoxb/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmoxb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmoxb/subscriptions", "organizations_url": "https://api.github.com/users/bmoxb/orgs", "repos_url": "https://api.github.com/users/bmoxb/repos", "events_url": "https://api.github.com/users/bmoxb/events{/privacy}", "received_events_url": "https://api.github.com/users/bmoxb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2bdb89c624d58feb0f077de6648787f8e6afbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2bdb89c624d58feb0f077de6648787f8e6afbc", "html_url": "https://github.com/rust-lang/rust/commit/8d2bdb89c624d58feb0f077de6648787f8e6afbc"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "a74a56bc5b2094ba8886009651f0f1711bd09c6a", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b439189236a8956eaf9cd37bd601f3df074716f2/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b439189236a8956eaf9cd37bd601f3df074716f2/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=b439189236a8956eaf9cd37bd601f3df074716f2", "patch": "@@ -174,6 +174,16 @@ impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\"\n impl const From<bool> for f32 {\n     /// Converts `bool` to `f32` losslessly. The resulting value is positive\n     /// `0.0` for `false` and `1.0` for `true` values.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let x: f32 = false.into();\n+    /// assert_eq!(x, 0.0);\n+    /// assert!(x.is_sign_positive());\n+    ///\n+    /// let y: f32 = true.into();\n+    /// assert_eq!(y, 1.0);\n+    /// ```\n     #[inline]\n     fn from(small: bool) -> Self {\n         small as u8 as Self\n@@ -184,6 +194,16 @@ impl const From<bool> for f32 {\n impl const From<bool> for f64 {\n     /// Converts `bool` to `f64` losslessly. The resulting value is positive\n     /// `0.0` for `false` and `1.0` for `true` values.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let x: f64 = false.into();\n+    /// assert_eq!(x, 0.0);\n+    /// assert!(x.is_sign_positive());\n+    ///\n+    /// let y: f64 = true.into();\n+    /// assert_eq!(y, 1.0);\n+    /// ```\n     #[inline]\n     fn from(small: bool) -> Self {\n         small as u8 as Self"}]}