{"sha": "01be0ddacfa84559947d024c6060a99c63c48e29", "node_id": "C_kwDOAAsO6NoAKDAxYmUwZGRhY2ZhODQ1NTk5NDdkMDI0YzYwNjBhOTljNjNjNDhlMjk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T17:17:33Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-18T17:17:33Z"}, "message": "Move FunctionDebugContext creation to codegen_fn", "tree": {"sha": "d9db3afaa16bafa619a130dca9cc1219ed86a4f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9db3afaa16bafa619a130dca9cc1219ed86a4f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01be0ddacfa84559947d024c6060a99c63c48e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01be0ddacfa84559947d024c6060a99c63c48e29", "html_url": "https://github.com/rust-lang/rust/commit/01be0ddacfa84559947d024c6060a99c63c48e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01be0ddacfa84559947d024c6060a99c63c48e29/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf545730849375ce43f593432f2bff5eddd3eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf545730849375ce43f593432f2bff5eddd3eec", "html_url": "https://github.com/rust-lang/rust/commit/dbf545730849375ce43f593432f2bff5eddd3eec"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "34dbf96be7ddbf3cb6c7915d0ff770d650d22644", "filename": "src/base.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01be0ddacfa84559947d024c6060a99c63c48e29/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01be0ddacfa84559947d024c6060a99c63c48e29/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=01be0ddacfa84559947d024c6060a99c63c48e29", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::SymbolName;\n use indexmap::IndexSet;\n \n use crate::constant::ConstantCx;\n+use crate::debuginfo::FunctionDebugContext;\n use crate::prelude::*;\n use crate::pretty_clif::CommentWriter;\n \n@@ -18,6 +19,7 @@ struct CodegenedFunction<'tcx> {\n     func_id: FuncId,\n     func: Function,\n     clif_comments: CommentWriter,\n+    func_debug_cx: Option<FunctionDebugContext>,\n     function_span: Span,\n     source_info_set: IndexSet<SourceInfo>,\n }\n@@ -82,13 +84,20 @@ fn codegen_fn<'tcx>(\n     let pointer_type = target_config.pointer_type();\n     let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n \n+    let func_debug_cx = if let Some(debug_context) = &mut cx.debug_context {\n+        Some(debug_context.define_function(symbol_name.name))\n+    } else {\n+        None\n+    };\n+\n     let mut fx = FunctionCx {\n         cx,\n         module,\n         tcx,\n         target_config,\n         pointer_type,\n         constants_cx: ConstantCx::new(),\n+        func_debug_cx,\n \n         instance,\n         symbol_name,\n@@ -109,6 +118,7 @@ fn codegen_fn<'tcx>(\n \n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n     let clif_comments = fx.clif_comments;\n+    let func_debug_cx = fx.func_debug_cx;\n     let function_span = fx.mir.span;\n     let source_info_set = fx.source_info_set;\n \n@@ -128,7 +138,15 @@ fn codegen_fn<'tcx>(\n     // Verify function\n     verify_func(tcx, &clif_comments, &func);\n \n-    CodegenedFunction { symbol_name, func_id, func, clif_comments, function_span, source_info_set }\n+    CodegenedFunction {\n+        symbol_name,\n+        func_id,\n+        func,\n+        clif_comments,\n+        func_debug_cx,\n+        function_span,\n+        source_info_set,\n+    }\n }\n \n fn compile_fn<'tcx>(\n@@ -214,7 +232,7 @@ fn compile_fn<'tcx>(\n     let unwind_context = &mut cx.unwind_context;\n     cx.profiler.verbose_generic_activity(\"generate debug info\").run(|| {\n         if let Some(debug_context) = debug_context {\n-            debug_context.define_function(codegened_func.symbol_name.name).finalize(\n+            codegened_func.func_debug_cx.unwrap().finalize(\n                 debug_context,\n                 tcx,\n                 codegened_func.func_id,"}, {"sha": "655ceacf729826092f683be3b09554d85261afe0", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01be0ddacfa84559947d024c6060a99c63c48e29/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01be0ddacfa84559947d024c6060a99c63c48e29/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=01be0ddacfa84559947d024c6060a99c63c48e29", "patch": "@@ -9,6 +9,7 @@ use rustc_target::abi::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n \n use crate::constant::ConstantCx;\n+use crate::debuginfo::FunctionDebugContext;\n use crate::prelude::*;\n \n pub(crate) fn pointer_ty(tcx: TyCtxt<'_>) -> types::Type {\n@@ -238,6 +239,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) target_config: TargetFrontendConfig, // Cached from module\n     pub(crate) pointer_type: Type,                  // Cached from module\n     pub(crate) constants_cx: ConstantCx,\n+    pub(crate) func_debug_cx: Option<FunctionDebugContext>,\n \n     pub(crate) instance: Instance<'tcx>,\n     pub(crate) symbol_name: SymbolName<'tcx>,"}]}