{"sha": "b2df61fa9f69554f3a1cdc5e02d1259396f8ff53", "node_id": "C_kwDOAAsO6NoAKGIyZGY2MWZhOWY2OTU1NGYzYTFjZGM1ZTAyZDEyNTkzOTZmOGZmNTM", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:28:54Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:28:54Z"}, "message": "Move Result::into_err", "tree": {"sha": "7c3ded2dc3dcfe9731c3d9a9ab1e6d54486d428b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3ded2dc3dcfe9731c3d9a9ab1e6d54486d428b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2df61fa9f69554f3a1cdc5e02d1259396f8ff53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+mYACgkQ+boUO5X/\nbYI77xAAnMLVSjJxLME5JQdsMUW3hD6uX+wUyV6a8kjGhjbqso2feI4JfaiD1TAT\n/G8CBKKTwrKhhTAsWpaT/BsJbSh3Ee+QUAo8ax8AnyoEx9mwOlEjLgDziSXKL7ry\njRzP4pkuDJd/e0NBNEqAJ9bX3jBTeycvZBAVIltNmQgOc+5IGTYFbovN6aSeBjXL\n2rsdxAk7G9YW/gbL0LFg1jUHgIyiYd+ewhZ68YifbeE57VsSHzrwi/f/0yzmjxoE\nAryQETnZEedT2rFaXFnQo281l8abYGEMd7hYWxzyx1ghJSyELzM2O+PnNU7akyvV\nHYfpNrmco8wUOauW8RTTe3g7o9sPFxbp+oFYmhnBqvHpLkNONdy17A19ibWN37UI\nR8csI1ZhZleFhk7n8aG8WAC8C4qTV6f48nCWhVYCOO/H0vE1KyesGF+SO1X86O8w\nrovpQSKa0WPSarXKLE+/O9v+w/wFiFdGvhB3Tc7Sz4t/25JL+WEGA5L1sNkgv83O\nClkT3jO2axkoTQVR0XV1X0aQPBA/bx0tHChJAaL2fvxve/DNkOpTQOu4ux0odBpi\nBjsLlYi7aDIkJVbWcPyvz6daUXZvgF4x5PqGKyBLydIpY9X3LYicxhR0YRk2B+O/\nYg1Y1xPWCsjIrnVdMSCZnE25hM16IbDjAlH198RkX32/aOVM/sk=\n=JFuo\n-----END PGP SIGNATURE-----", "payload": "tree 7c3ded2dc3dcfe9731c3d9a9ab1e6d54486d428b\nparent 778ca204a6187eb9db99b06d1fa4c759e4e67f05\nauthor David Tolnay <dtolnay@gmail.com> 1640888934 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640888934 -0800\n\nMove Result::into_err\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2df61fa9f69554f3a1cdc5e02d1259396f8ff53", "html_url": "https://github.com/rust-lang/rust/commit/b2df61fa9f69554f3a1cdc5e02d1259396f8ff53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2df61fa9f69554f3a1cdc5e02d1259396f8ff53/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "778ca204a6187eb9db99b06d1fa4c759e4e67f05", "url": "https://api.github.com/repos/rust-lang/rust/commits/778ca204a6187eb9db99b06d1fa4c759e4e67f05", "html_url": "https://github.com/rust-lang/rust/commit/778ca204a6187eb9db99b06d1fa4c759e4e67f05"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "382a571164162ddc93b27f7d71116ea884ca198f", "filename": "library/core/src/result.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b2df61fa9f69554f3a1cdc5e02d1259396f8ff53/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2df61fa9f69554f3a1cdc5e02d1259396f8ff53/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=b2df61fa9f69554f3a1cdc5e02d1259396f8ff53", "patch": "@@ -1211,6 +1211,43 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Returns the contained [`Err`] value, but never panics.\n+    ///\n+    /// Unlike [`unwrap_err`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n+    /// to compile if the ok type of the `Result` is later changed\n+    /// to a type that can actually occur.\n+    ///\n+    /// [`unwrap_err`]: Result::unwrap_err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_bad_news() -> Result<!, String> {\n+    ///     Err(\"Oops, it failed\".into())\n+    /// }\n+    ///\n+    /// let error: String = only_bad_news().into_err();\n+    /// println!(\"{}\", error);\n+    /// ```\n+    #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+    #[inline]\n+    pub fn into_err(self) -> E\n+    where\n+        T: Into<!>,\n+    {\n+        match self {\n+            Ok(x) => x.into(),\n+            Err(e) => e,\n+        }\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -1536,42 +1573,6 @@ impl<T: Clone, E> Result<&mut T, E> {\n     }\n }\n \n-#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n-impl<T: Into<!>, E> Result<T, E> {\n-    /// Returns the contained [`Err`] value, but never panics.\n-    ///\n-    /// Unlike [`unwrap_err`], this method is known to never panic on the\n-    /// result types it is implemented for. Therefore, it can be used\n-    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n-    /// to compile if the ok type of the `Result` is later changed\n-    /// to a type that can actually occur.\n-    ///\n-    /// [`unwrap_err`]: Result::unwrap_err\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// # #![feature(never_type)]\n-    /// # #![feature(unwrap_infallible)]\n-    ///\n-    /// fn only_bad_news() -> Result<!, String> {\n-    ///     Err(\"Oops, it failed\".into())\n-    /// }\n-    ///\n-    /// let error: String = only_bad_news().into_err();\n-    /// println!(\"{}\", error);\n-    /// ```\n-    #[inline]\n-    pub fn into_err(self) -> E {\n-        match self {\n-            Ok(x) => x.into(),\n-            Err(e) => e,\n-        }\n-    }\n-}\n-\n impl<T, E> Result<Option<T>, E> {\n     /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n     ///"}]}