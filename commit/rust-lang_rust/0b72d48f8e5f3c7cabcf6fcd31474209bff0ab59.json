{"sha": "0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzJkNDhmOGU1ZjNjN2NhYmNmNmZjZDMxNDc0MjA5YmZmMGFiNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-10T19:00:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-10T19:00:19Z"}, "message": "Auto merge of #48914 - gaurikholkar:e0389, r=nikomatsakis\n\nModify compile-fail/E0389 error message WIP\n\nThis fixes #47388\n\ncc @nikomatsakis @estebank\n\nr? @nikomatsakis\n\nCertain ui tests were failing locally. I'll check if the same happens here too.", "tree": {"sha": "38b5b237fd08befb2724d7eb705e1933ef5fe228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b5b237fd08befb2724d7eb705e1933ef5fe228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "html_url": "https://github.com/rust-lang/rust/commit/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a7b94b8edf4e6858ee5878c3b9e6b410d00703", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a7b94b8edf4e6858ee5878c3b9e6b410d00703", "html_url": "https://github.com/rust-lang/rust/commit/b2a7b94b8edf4e6858ee5878c3b9e6b410d00703"}, {"sha": "c792d1e0c1a95bdc6505d8012efbede4600985d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c792d1e0c1a95bdc6505d8012efbede4600985d1", "html_url": "https://github.com/rust-lang/rust/commit/c792d1e0c1a95bdc6505d8012efbede4600985d1"}], "stats": {"total": 206, "additions": 182, "deletions": 24}, "files": [{"sha": "62acdf76546248cae0733df9959bd93dfc1bd4c3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 79, "deletions": 22, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -42,6 +42,7 @@ use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::{IllegalMoveOriginKind, MoveError};\n use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MovePathIndex};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n+use util::collect_writes::FindAssignments;\n \n use std::iter;\n \n@@ -1550,6 +1551,36 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn specialized_description(&self, place:&Place<'tcx>) -> Option<String>{\n+        if let Some(_name) = self.describe_place(place) {\n+            Some(format!(\"data in a `&` reference\"))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn get_default_err_msg(&self, place:&Place<'tcx>) -> String{\n+        match self.describe_place(place) {\n+            Some(name) => format!(\"immutable item `{}`\", name),\n+            None => \"immutable item\".to_owned(),\n+        }\n+    }\n+\n+    fn get_secondary_err_msg(&self, place:&Place<'tcx>) -> String{\n+        match self.specialized_description(place) {\n+            Some(_) => format!(\"data in a `&` reference\"),\n+            None => self.get_default_err_msg(place)\n+        }\n+    }\n+\n+    fn get_primary_err_msg(&self, place:&Place<'tcx>) -> String{\n+        if let Some(name) = self.describe_place(place) {\n+            format!(\"`{}` is a `&` reference, so the data it refers to cannot be written\", name)\n+        } else {\n+            format!(\"cannot assign through `&`-reference\")\n+        }\n+    }\n+\n     /// Check the permissions for the given place and read or write kind\n     ///\n     /// Returns true if an error is reported, false otherwise.\n@@ -1576,43 +1607,70 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.is_mutable(place, is_local_mutation_allowed)\n             {\n                 error_reported = true;\n-\n-                let item_msg = match self.describe_place(place) {\n-                    Some(name) => format!(\"immutable item `{}`\", name),\n-                    None => \"immutable item\".to_owned(),\n-                };\n-\n+                let item_msg = self.get_default_err_msg(place);\n                 let mut err = self.tcx\n                     .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n                 err.span_label(span, \"cannot borrow as mutable\");\n \n                 if place != place_err {\n                     if let Some(name) = self.describe_place(place_err) {\n-                        err.note(&format!(\"Value not mutable causing this error: `{}`\", name));\n+                        err.note(&format!(\"the value which is causing this path not to be mutable \\\n+                                           is...: `{}`\", name));\n                     }\n                 }\n \n                 err.emit();\n             },\n             Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {\n+\n                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     error_reported = true;\n+                    let mut err_info = None;\n+                    match *place_err {\n+\n+                        Place::Projection(box Projection {\n+                        ref base, elem:ProjectionElem::Deref}) => {\n+                            match *base {\n+                                Place::Local(local) => {\n+                                    let locations = self.mir.find_assignments(local);\n+                                        if locations.len() > 0 {\n+                                            let item_msg = if error_reported {\n+                                                self.get_secondary_err_msg(base)\n+                                            } else {\n+                                                self.get_default_err_msg(place)\n+                                            };\n+                                            err_info = Some((\n+                                                self.mir.source_info(locations[0]).span,\n+                                                    \"consider changing this to be a \\\n+                                                    mutable reference: `&mut`\", item_msg,\n+                                                    self.get_primary_err_msg(base)));\n+                                        }\n+                                },\n+                            _ => {},\n+                            }\n+                        },\n+                        _ => {},\n+                    }\n \n-                    let item_msg = match self.describe_place(place) {\n-                        Some(name) => format!(\"immutable item `{}`\", name),\n-                        None => \"immutable item\".to_owned(),\n-                    };\n-\n-                    let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir);\n-                    err.span_label(span, \"cannot mutate\");\n-\n-                    if place != place_err {\n-                        if let Some(name) = self.describe_place(place_err) {\n-                            err.note(&format!(\"Value not mutable causing this error: `{}`\", name));\n+                    if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n+                        let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir);\n+                        err.span_suggestion(err_help_span, err_help_stmt, format!(\"\"));\n+                        if place != place_err {\n+                            err.span_label(span, sec_span);\n                         }\n+                        err.emit()\n+                    } else {\n+                        let item_msg_ = self.get_default_err_msg(place);\n+                        let mut err = self.tcx.cannot_assign(span, &item_msg_, Origin::Mir);\n+                        err.span_label(span, \"cannot mutate\");\n+                        if place != place_err {\n+                            if let Some(name) = self.describe_place(place_err) {\n+                                err.note(&format!(\"the value which is causing this path not to be \\\n+                                                   mutable is...: `{}`\", name));\n+                            }\n+                        }\n+                        err.emit();\n                     }\n-\n-                    err.emit();\n                 }\n             }\n             Reservation(WriteKind::Move)\n@@ -1631,9 +1689,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     );\n                 }\n             }\n-\n             Activation(..) => {} // permission checks are done at Reservation point.\n-\n             Read(ReadKind::Borrow(BorrowKind::Unique))\n             | Read(ReadKind::Borrow(BorrowKind::Mut { .. }))\n             | Read(ReadKind::Borrow(BorrowKind::Shared))\n@@ -2255,3 +2311,4 @@ impl ContextKind {\n         }\n     }\n }\n+"}, {"sha": "0fc905443008d0d60eb4aa36963521987192b16d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -32,6 +32,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(rustc_diagnostic_macros)]\n #![feature(nonzero)]\n #![feature(inclusive_range_fields)]\n+#![feature(crate_visibility_modifier)]\n \n extern crate arena;\n #[macro_use]"}, {"sha": "d6b3e674f8f804878c727db063d25736b3f47ae2", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -284,7 +284,8 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n-    fn cannot_assign(self, span: Span, desc: &str, o: Origin) -> DiagnosticBuilder<'cx>\n+    fn cannot_assign(self, span: Span, desc: &str, o: Origin)\n+                     -> DiagnosticBuilder<'cx>\n     {\n         let err = struct_span_err!(self, span, E0594,\n                                   \"cannot assign to {}{OGN}\","}, {"sha": "f04f9233447c3d83761a34836fa913182de3aa0c", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::mir::{Local, Location};\n+use rustc::mir::Mir;\n+use rustc::mir::visit::PlaceContext;\n+use rustc::mir::visit::Visitor;\n+\n+crate trait FindAssignments {\n+    // Finds all statements that assign directly to local (i.e., X = ...)\n+    // and returns their locations.\n+    fn find_assignments(&self, local: Local) -> Vec<Location>;\n+}\n+\n+impl<'tcx> FindAssignments for Mir<'tcx>{\n+    fn find_assignments(&self, local: Local) -> Vec<Location>{\n+            let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n+            visitor.visit_mir(self);\n+            visitor.locations\n+    }\n+}\n+\n+// The Visitor walks the MIR to return the assignment statements corresponding\n+// to a Local.\n+struct FindLocalAssignmentVisitor {\n+    needle: Local,\n+    locations: Vec<Location>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n+    fn visit_local(&mut self,\n+                   local: &Local,\n+                   place_context: PlaceContext<'tcx>,\n+                   location: Location) {\n+        if self.needle != *local {\n+            return;\n+        }\n+\n+        match place_context {\n+            PlaceContext::Store | PlaceContext::Call => {\n+                self.locations.push(location);\n+            }\n+            PlaceContext::AsmOutput |\n+            PlaceContext::Drop |\n+            PlaceContext::Inspect |\n+            PlaceContext::Borrow { .. } |\n+            PlaceContext::Projection(..) |\n+            PlaceContext::Copy |\n+            PlaceContext::Move |\n+            PlaceContext::StorageLive |\n+            PlaceContext::StorageDead |\n+            PlaceContext::Validate => {\n+                // TO-DO\n+                // self.super_local(local)\n+            }\n+        }\n+    }\n+    // TO-DO\n+    // fn super_local()\n+}"}, {"sha": "19cd376688627de9d3fe4e79272f57b3656700e0", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -17,6 +17,7 @@ mod alignment;\n mod graphviz;\n pub(crate) mod pretty;\n pub mod liveness;\n+pub mod collect_writes;\n \n pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};"}, {"sha": "fbdd013024db56d5663960ffada8f7ca5e4d50e7", "filename": "src/test/compile-fail/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -27,7 +27,7 @@ fn indirect_write_to_imm_box() {\n     let y: Box<_> = box &mut x;\n     let p = &y;\n     ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n-              //[mir]~^ ERROR cannot assign to immutable item `***p`\n+              //[mir]~^ ERROR cannot assign to data in a `&` reference\n     drop(p);\n }\n "}, {"sha": "39feea08aa489668db71972c4084c35ab13a283c", "filename": "src/test/ui/nll/issue-47388.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.rs?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(nll)]\n+struct FancyNum {\n+    num: u8,\n+}\n+\n+fn main() {\n+    let mut fancy = FancyNum{ num: 5 };\n+    let fancy_ref = &(&mut fancy);\n+    fancy_ref.num = 6; //~ ERROR E0594\n+    println!(\"{}\", fancy_ref.num);\n+}"}, {"sha": "272cb6510aa3ddc02ab27cf11444b502696ffb74", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=0b72d48f8e5f3c7cabcf6fcd31474209bff0ab59", "patch": "@@ -0,0 +1,11 @@\n+error[E0594]: cannot assign to data in a `&` reference\n+  --> $DIR/issue-47388.rs:18:5\n+   |\n+LL |     let fancy_ref = &(&mut fancy);\n+   |                     ------------- help: consider changing this to be a mutable reference: `&mut`\n+LL |     fancy_ref.num = 6; //~ ERROR E0594\n+   |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}]}