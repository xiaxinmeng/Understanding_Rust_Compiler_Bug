{"sha": "b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTlhODhkZmM0ODRmMDc3ZWM3MjY0YmQ3ZmFlN2Q3YzYwZDlmYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-02T01:03:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:01:33Z"}, "message": "Unify assoc item visitors more.", "tree": {"sha": "1f3f9684c4dc414a6a6bce0541e55515274ab106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3f9684c4dc414a6a6bce0541e55515274ab106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "html_url": "https://github.com/rust-lang/rust/commit/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ccdebe0b07f38e7e371a80424285539811c048", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ccdebe0b07f38e7e371a80424285539811c048", "html_url": "https://github.com/rust-lang/rust/commit/51ccdebe0b07f38e7e371a80424285539811c048"}], "stats": {"total": 109, "additions": 56, "deletions": 53}, "files": [{"sha": "e2c99f456e988dacfb93f221ebdda3dc354a34d6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -484,19 +484,19 @@ impl<'a> LoweringContext<'a> {\n                     TraitItemKind::Method(_, None) => {\n                         // Ignore patterns in trait methods without bodies\n                         self.with_hir_id_owner(None, |this| {\n-                            visit::walk_assoc_item(this, item)\n+                            visit::walk_trait_item(this, item)\n                         });\n                     }\n                     _ => self.with_hir_id_owner(Some(item.id), |this| {\n-                        visit::walk_assoc_item(this, item);\n+                        visit::walk_trait_item(this, item);\n                     })\n                 }\n             }\n \n             fn visit_impl_item(&mut self, item: &'tcx ImplItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 self.with_hir_id_owner(Some(item.id), |this| {\n-                    visit::walk_assoc_item(this, item);\n+                    visit::walk_impl_item(this, item);\n                 });\n             }\n "}, {"sha": "7f72154e42c61eb0f7fcb447d12e04a295a4c33a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1252,15 +1252,15 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) {\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             run_early_pass!(cx, check_trait_item, trait_item);\n-            ast_visit::walk_assoc_item(cx, trait_item);\n+            ast_visit::walk_trait_item(cx, trait_item);\n             run_early_pass!(cx, check_trait_item_post, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'a ast::ImplItem) {\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n             run_early_pass!(cx, check_impl_item, impl_item);\n-            ast_visit::walk_assoc_item(cx, impl_item);\n+            ast_visit::walk_impl_item(cx, impl_item);\n             run_early_pass!(cx, check_impl_item_post, impl_item);\n         });\n     }"}, {"sha": "ad6c99494a60fd28012eec9d66aae02d0bad6daa", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -787,13 +787,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             _ => {}\n         }\n-        visit::walk_assoc_item(self, ii);\n+        visit::walk_impl_item(self, ii);\n     }\n \n     fn visit_trait_item(&mut self, ti: &'a AssocItem) {\n         self.invalid_visibility(&ti.vis, None);\n         self.check_defaultness(ti.span, ti.defaultness);\n-        visit::walk_assoc_item(self, ti);\n+        visit::walk_trait_item(self, ti);\n     }\n }\n "}, {"sha": "a5924efefc2af57db13ff21a4f8bf48d4a4929bf", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -316,12 +316,12 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n         self.record(\"TraitItem\", Id::None, ti);\n-        ast_visit::walk_assoc_item(self, ti)\n+        ast_visit::walk_trait_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n         self.record(\"ImplItem\", Id::None, ii);\n-        ast_visit::walk_assoc_item(self, ii)\n+        ast_visit::walk_impl_item(self, ii)\n     }\n \n     fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound) {"}, {"sha": "d2d5a33ec7aa9d8912fe509d918a16265fd64e87", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1190,15 +1190,15 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = self.parent_scope.expansion;\n         self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));\n \n-        visit::walk_assoc_item(self, item);\n+        visit::walk_trait_item(self, item);\n     }\n \n     fn visit_impl_item(&mut self, item: &'b ast::ImplItem) {\n         if let ast::ImplItemKind::Macro(..) = item.kind {\n             self.visit_invoc(item.id);\n         } else {\n             self.resolve_visibility(&item.vis);\n-            visit::walk_assoc_item(self, item);\n+            visit::walk_impl_item(self, item);\n         }\n     }\n "}, {"sha": "471e2634b8acfd1765c175dab77069ae612ce4d7", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -223,7 +223,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         };\n \n         let def = self.create_def(ti.id, def_data, ti.span);\n-        self.with_parent(def, |this| visit::walk_assoc_item(this, ti));\n+        self.with_parent(def, |this| visit::walk_trait_item(this, ti));\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n@@ -249,7 +249,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         };\n \n         let def = self.create_def(ii.id, def_data, ii.span);\n-        self.with_parent(def, |this| visit::walk_assoc_item(this, ii));\n+        self.with_parent(def, |this| visit::walk_impl_item(this, ii));\n     }\n \n     fn visit_pat(&mut self, pat: &'a Pat) {"}, {"sha": "c27fcb6a68e0fc76a498e53350dfb44d01e989bd", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -577,42 +577,38 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_extern(sig.header.ext);\n                 }\n-                if sig.decl.c_variadic() {\n-                    gate_feature_post!(&self, c_variadic, ti.span,\n-                                       \"C-variadic functions are unstable\");\n-                }\n                 if sig.header.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }\n             }\n             ast::TraitItemKind::TyAlias(_, ref default) => {\n-                if let Some(ty) = default {\n-                    self.check_impl_trait(ty);\n-                    gate_feature_post!(&self, associated_type_defaults, ti.span,\n-                                       \"associated type defaults are unstable\");\n+                if let Some(_) = default {\n+                    gate_feature_post!(\n+                        &self, associated_type_defaults, ti.span,\n+                        \"associated type defaults are unstable\"\n+                    );\n                 }\n-                self.check_gat(&ti.generics, ti.span);\n             }\n             _ => {}\n         }\n-        visit::walk_assoc_item(self, ti)\n+        visit::walk_trait_item(self, ti)\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'a ast::ImplItem) {\n+    fn visit_assoc_item(&mut self, ii: &'a ast::AssocItem) {\n         if ii.defaultness == ast::Defaultness::Default {\n-            gate_feature_post!(&self, specialization,\n-                              ii.span,\n-                              \"specialization is unstable\");\n+            gate_feature_post!(&self, specialization, ii.span, \"specialization is unstable\");\n         }\n \n         match ii.kind {\n-            ast::ImplItemKind::Method(ref sig, _) => {\n+            ast::AssocItemKind::Method(ref sig, _) => {\n                 if sig.decl.c_variadic() {\n-                    gate_feature_post!(&self, c_variadic, ii.span,\n-                                       \"C-variadic functions are unstable\");\n+                    gate_feature_post!(\n+                        &self, c_variadic, ii.span,\n+                        \"C-variadic functions are unstable\"\n+                    );\n                 }\n             }\n-            ast::ImplItemKind::TyAlias(_, ref ty) => {\n+            ast::AssocItemKind::TyAlias(_, ref ty) => {\n                 if let Some(ty) = ty {\n                     self.check_impl_trait(ty);\n                 }"}, {"sha": "3db9955d304a392249a311d069e3c12ff2cbeb2b", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -73,14 +73,10 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_fn(self, fk, fd, s)\n     }\n-    fn visit_trait_item(&mut self, ti: &TraitItem) {\n+    fn visit_assoc_item(&mut self, ti: &AssocItem) {\n         self.count += 1;\n         walk_assoc_item(self, ti)\n     }\n-    fn visit_impl_item(&mut self, ii: &ImplItem) {\n-        self.count += 1;\n-        walk_assoc_item(self, ii)\n-    }\n     fn visit_trait_ref(&mut self, t: &TraitRef) {\n         self.count += 1;\n         walk_trait_ref(self, t)"}, {"sha": "e2c0ee614674139da47e5b2f04baf67eb4917adc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -83,8 +83,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_fn(&mut self, fk: FnKind<'ast>, fd: &'ast FnDecl, s: Span, _: NodeId) {\n         walk_fn(self, fk, fd, s)\n     }\n-    fn visit_trait_item(&mut self, i: &'ast AssocItem) { walk_assoc_item(self, i) }\n-    fn visit_impl_item(&mut self, i: &'ast AssocItem) { walk_assoc_item(self, i) }\n+    fn visit_trait_item(&mut self, i: &'ast AssocItem) { walk_trait_item(self, i) }\n+    fn visit_impl_item(&mut self, i: &'ast AssocItem) { walk_impl_item(self, i) }\n+    fn visit_assoc_item(&mut self, i: &'ast AssocItem) { walk_assoc_item(self, i) }\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) { walk_trait_ref(self, t) }\n     fn visit_param_bound(&mut self, bounds: &'ast GenericBound) {\n         walk_param_bound(self, bounds)\n@@ -581,6 +582,14 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n     }\n }\n \n+pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem) {\n+    visitor.visit_assoc_item(item);\n+}\n+\n+pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem) {\n+    visitor.visit_assoc_item(item);\n+}\n+\n pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.ident);"}, {"sha": "1f61473c9d2f49a90a4ca6cb26da85c05883baba", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -16,15 +16,6 @@ LL |     type Baa = impl Debug;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:18\n-   |\n-LL |     type Assoc = impl Debug;\n-   |                  ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n error[E0658]: associated type defaults are unstable\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:18:5\n    |\n@@ -34,6 +25,15 @@ LL |     type Assoc = impl Debug;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29661\n    = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n \n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:18:18\n+   |\n+LL |     type Assoc = impl Debug;\n+   |                  ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:24:24\n    |"}, {"sha": "09f967f161ede7b2ee5cad3375d6959085292fa5", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,3 +1,5 @@\n+#![feature(specialization)]\n+\n fn main() {}\n \n trait X {"}, {"sha": "54111df342343751c8c303186bd4be5b9b066c2b", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,35 +1,35 @@\n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:4:5\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:6:5\n    |\n LL |     default const A: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:5:5\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:7:5\n    |\n LL |     default const B: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:6:5\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:8:5\n    |\n LL |     default type D;\n    |     ^^^^^^^^^^^^^^^\n \n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:7:5\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:9:5\n    |\n LL |     default type C: Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:8:5\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:10:5\n    |\n LL |     default fn f1();\n    |     ^^^^^^^^^^^^^^^^\n \n error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:9:5\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:11:5\n    |\n LL |     default fn f2() {}\n    |     ^^^^^^^^^^^^^^^^^^"}]}