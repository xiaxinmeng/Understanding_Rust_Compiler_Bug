{"sha": "ced813fec0fb9e883906f18b76d618baf9f5bc08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDgxM2ZlYzBmYjllODgzOTA2ZjE4Yjc2ZDYxOGJhZjlmNWJjMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-05T00:35:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-05T00:35:58Z"}, "message": "Auto merge of #77466 - Aaron1011:reland-drop-tree, r=matthewjasper\n\nRe-land PR #71840 (Rework MIR drop tree lowering)\n\nPR https://github.com/rust-lang/rust/pull/71840 was reverted in https://github.com/rust-lang/rust/pull/72989 to fix an LLVM error (https://github.com/rust-lang/rust/issues/72470). That LLVM error no longer occurs with the recent upgrade to LLVM 11 (https://github.com/rust-lang/rust/pull/73526), so let's try re-landing this PR.\n\nI've cherry-picked the commits from the original PR (with the exception of the commit blessing test output), making as few modifications as possible. I addressed the rebase fallout in separate commits on top of those.\n\nr? `@matthewjasper`", "tree": {"sha": "ef72e01fffb47c9763d863ab85b5777504516fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef72e01fffb47c9763d863ab85b5777504516fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced813fec0fb9e883906f18b76d618baf9f5bc08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced813fec0fb9e883906f18b76d618baf9f5bc08", "html_url": "https://github.com/rust-lang/rust/commit/ced813fec0fb9e883906f18b76d618baf9f5bc08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced813fec0fb9e883906f18b76d618baf9f5bc08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb5ae474d2835962ebdf7416bd1c9ad864fe101", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb5ae474d2835962ebdf7416bd1c9ad864fe101", "html_url": "https://github.com/rust-lang/rust/commit/beb5ae474d2835962ebdf7416bd1c9ad864fe101"}, {"sha": "ce8d75714b78864505f815a79cb5c300a1cf0b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8d75714b78864505f815a79cb5c300a1cf0b48", "html_url": "https://github.com/rust-lang/rust/commit/ce8d75714b78864505f815a79cb5c300a1cf0b48"}], "stats": {"total": 5252, "additions": 2504, "deletions": 2748}, "files": [{"sha": "ab7fadac91e39f892fa5abbd15dd9ae8e784ec3a", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -362,17 +362,18 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n             TerminatorKind::Goto { target: _ }\n+            | TerminatorKind::FalseEdge { .. }\n+            | TerminatorKind::FalseUnwind { .. }\n+            // In some sense returning moves the return place into the current\n+            // call's destination, however, since there are no statements after\n+            // this that could possibly access the return place, this doesn't\n+            // need recording.\n+            | TerminatorKind::Return\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Unreachable => {}\n \n-            TerminatorKind::Return => {\n-                self.gather_move(Place::return_place());\n-            }\n-\n             TerminatorKind::Assert { ref cond, .. } => {\n                 self.gather_operand(cond);\n             }"}, {"sha": "43fa15d7e49123cfcd25984d5eb17462317dd0ce", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -231,8 +231,6 @@ where\n                     .patch_terminator(bb, TerminatorKind::Goto { target: self.succ });\n             }\n             DropStyle::Static => {\n-                let loc = self.terminator_loc(bb);\n-                self.elaborator.clear_drop_flag(loc, self.path, DropFlagMode::Deep);\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n@@ -243,9 +241,7 @@ where\n                 );\n             }\n             DropStyle::Conditional => {\n-                let unwind = self.unwind; // FIXME(#43234)\n-                let succ = self.succ;\n-                let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n+                let drop_bb = self.complete_drop(self.succ, self.unwind);\n                 self.elaborator\n                     .patch()\n                     .patch_terminator(bb, TerminatorKind::Goto { target: drop_bb });\n@@ -317,7 +313,7 @@ where\n                 // our own drop flag.\n                 path: self.path,\n             }\n-            .complete_drop(None, succ, unwind)\n+            .complete_drop(succ, unwind)\n         }\n     }\n \n@@ -346,13 +342,7 @@ where\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n-        (\n-            self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n-            unwind.map(|unwind| {\n-                self.drop_flag_reset_block(DropFlagMode::Shallow, unwind, Unwind::InCleanup)\n-            }),\n-        )\n+        (self.drop_flag_reset_block(DropFlagMode::Shallow, self.succ, self.unwind), self.unwind)\n     }\n \n     /// Creates a full drop ladder, consisting of 2 connected half-drop-ladders\n@@ -884,11 +874,7 @@ where\n                     self.open_drop_for_adt(def, substs)\n                 }\n             }\n-            ty::Dynamic(..) => {\n-                let unwind = self.unwind; // FIXME(#43234)\n-                let succ = self.succ;\n-                self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n-            }\n+            ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n             ty::Array(ety, size) => {\n                 let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(ety, size)\n@@ -899,20 +885,10 @@ where\n         }\n     }\n \n-    fn complete_drop(\n-        &mut self,\n-        drop_mode: Option<DropFlagMode>,\n-        succ: BasicBlock,\n-        unwind: Unwind,\n-    ) -> BasicBlock {\n-        debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n+    fn complete_drop(&mut self, succ: BasicBlock, unwind: Unwind) -> BasicBlock {\n+        debug!(\"complete_drop(succ={:?}, unwind={:?})\", succ, unwind);\n \n         let drop_block = self.drop_block(succ, unwind);\n-        let drop_block = if let Some(mode) = drop_mode {\n-            self.drop_flag_reset_block(mode, drop_block, unwind)\n-        } else {\n-            drop_block\n-        };\n \n         self.drop_flag_test_block(drop_block, succ, unwind)\n     }\n@@ -927,6 +903,11 @@ where\n     ) -> BasicBlock {\n         debug!(\"drop_flag_reset_block({:?},{:?})\", self, mode);\n \n+        if unwind.is_cleanup() {\n+            // The drop flag isn't read again on the unwind path, so don't\n+            // bother setting it.\n+            return succ;\n+        }\n         let block = self.new_block(unwind, TerminatorKind::Goto { target: succ });\n         let block_start = Location { block, statement_index: 0 };\n         self.elaborator.clear_drop_flag(block_start, self.path, mode);\n@@ -1044,11 +1025,6 @@ where\n         self.elaborator.patch().new_temp(ty, self.source_info.span)\n     }\n \n-    fn terminator_loc(&mut self, bb: BasicBlock) -> Location {\n-        let body = self.elaborator.body();\n-        self.elaborator.patch().terminator_loc(body, bb)\n-    }\n-\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,"}, {"sha": "857617e546e0c4db244051f237825100ccd9abc0", "filename": "compiler/rustc_mir/src/util/graphviz.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -111,13 +111,19 @@ where\n     write!(w, r#\"<table border=\"0\" cellborder=\"1\" cellspacing=\"0\">\"#)?;\n \n     // Basic block number at the top.\n+    let (blk, bgcolor) = if data.is_cleanup {\n+        (format!(\"{} (cleanup)\", block.index()), \"lightblue\")\n+    } else {\n+        let color = if dark_mode { \"dimgray\" } else { \"gray\" };\n+        (format!(\"{}\", block.index()), color)\n+    };\n     write!(\n         w,\n         r#\"<tr><td bgcolor=\"{bgcolor}\" {attrs} colspan=\"{colspan}\">{blk}</td></tr>\"#,\n-        bgcolor = if dark_mode { \"dimgray\" } else { \"gray\" },\n         attrs = r#\"align=\"center\"\"#,\n         colspan = num_cols,\n-        blk = block.index()\n+        blk = blk,\n+        bgcolor = bgcolor\n     )?;\n \n     init(w)?;"}, {"sha": "d5f72e6f22dfa29af8a3c5870d9ab593a17428b7", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -28,14 +28,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.in_opt_scope(opt_destruction_scope.map(|de| (de, source_info)), move |this| {\n             this.in_scope((region_scope, source_info), LintLevel::Inherited, move |this| {\n                 if targeted_by_break {\n-                    // This is a `break`-able block\n-                    let exit_block = this.cfg.start_new_block();\n-                    let block_exit =\n-                        this.in_breakable_scope(None, exit_block, destination, |this| {\n-                            this.ast_block_stmts(destination, block, span, stmts, expr, safety_mode)\n-                        });\n-                    this.cfg.goto(unpack!(block_exit), source_info, exit_block);\n-                    exit_block.unit()\n+                    this.in_breakable_scope(None, destination, span, |this| {\n+                        Some(this.ast_block_stmts(\n+                            destination,\n+                            block,\n+                            span,\n+                            stmts,\n+                            expr,\n+                            safety_mode,\n+                        ))\n+                    })\n                 } else {\n                     this.ast_block_stmts(destination, block, span, stmts, expr, safety_mode)\n                 }"}, {"sha": "a12c22fb850e4aa726d4b1f935198265925611c6", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -140,32 +140,30 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // body, even when the exact code in the body cannot unwind\n \n                 let loop_block = this.cfg.start_new_block();\n-                let exit_block = this.cfg.start_new_block();\n \n                 // Start the loop.\n                 this.cfg.goto(block, source_info, loop_block);\n \n-                this.in_breakable_scope(Some(loop_block), exit_block, destination, move |this| {\n+                this.in_breakable_scope(Some(loop_block), destination, expr_span, move |this| {\n                     // conduct the test, if necessary\n                     let body_block = this.cfg.start_new_block();\n-                    let diverge_cleanup = this.diverge_cleanup();\n                     this.cfg.terminate(\n                         loop_block,\n                         source_info,\n-                        TerminatorKind::FalseUnwind {\n-                            real_target: body_block,\n-                            unwind: Some(diverge_cleanup),\n-                        },\n+                        TerminatorKind::FalseUnwind { real_target: body_block, unwind: None },\n                     );\n+                    this.diverge_from(loop_block);\n \n                     // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n                     // introduce a unit temporary as the destination for the loop body.\n                     let tmp = this.get_unit_temp();\n                     // Execute the body, branching back to the test.\n                     let body_block_end = unpack!(this.into(tmp, body_block, body));\n                     this.cfg.goto(body_block_end, source_info, loop_block);\n-                });\n-                exit_block.unit()\n+\n+                    // Loops are only exited by `break` expressions.\n+                    None\n+                })\n             }\n             ExprKind::Call { ty, fun, args, from_hir_call, fn_span } => {\n                 let intrinsic = match *ty.kind() {\n@@ -206,7 +204,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .collect();\n \n                     let success = this.cfg.start_new_block();\n-                    let cleanup = this.diverge_cleanup();\n \n                     this.record_operands_moved(&args);\n \n@@ -218,7 +215,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         TerminatorKind::Call {\n                             func: fun,\n                             args,\n-                            cleanup: Some(cleanup),\n+                            cleanup: None,\n                             // FIXME(varkor): replace this with an uninhabitedness-based check.\n                             // This requires getting access to the current module to call\n                             // `tcx.is_ty_uninhabited_from`, which is currently tricky to do.\n@@ -231,6 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             fn_span,\n                         },\n                     );\n+                    this.diverge_from(block);\n                     success.unit()\n                 }\n             }\n@@ -437,12 +435,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let scope = this.local_scope();\n                 let value = unpack!(block = this.as_operand(block, scope, value));\n                 let resume = this.cfg.start_new_block();\n-                let cleanup = this.generator_drop_cleanup();\n                 this.cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Yield { value, resume, resume_arg: destination, drop: cleanup },\n+                    TerminatorKind::Yield { value, resume, resume_arg: destination, drop: None },\n                 );\n+                this.generator_drop_cleanup(block);\n                 resume.unit()\n             }\n "}, {"sha": "b7bd67fea0679a30b4d130ba5af9584d2d496ac7", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -228,8 +228,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         outer_source_info: SourceInfo,\n         fake_borrow_temps: Vec<(Place<'tcx>, Local)>,\n     ) -> BlockAnd<()> {\n-        let match_scope = self.scopes.topmost();\n-\n         let arm_end_blocks: Vec<_> = arm_candidates\n             .into_iter()\n             .map(|(arm, candidate)| {\n@@ -250,7 +248,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let arm_block = this.bind_pattern(\n                         outer_source_info,\n                         candidate,\n-                        arm.guard.as_ref().map(|g| (g, match_scope)),\n+                        arm.guard.as_ref(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n                         Some(arm.scope),\n@@ -287,7 +285,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         outer_source_info: SourceInfo,\n         candidate: Candidate<'_, 'tcx>,\n-        guard: Option<(&Guard<'tcx>, region::Scope)>,\n+        guard: Option<&Guard<'tcx>>,\n         fake_borrow_temps: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n         arm_scope: Option<region::Scope>,\n@@ -1592,7 +1590,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         candidate: Candidate<'pat, 'tcx>,\n         parent_bindings: &[(Vec<Binding<'tcx>>, Vec<Ascription<'tcx>>)],\n-        guard: Option<(&Guard<'tcx>, region::Scope)>,\n+        guard: Option<&Guard<'tcx>>,\n         fake_borrows: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n         schedule_drops: bool,\n@@ -1704,7 +1702,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         //      the reference that we create for the arm.\n         //    * So we eagerly create the reference for the arm and then take a\n         //      reference to that.\n-        if let Some((guard, region_scope)) = guard {\n+        if let Some(guard) = guard {\n             let tcx = self.hir.tcx();\n             let bindings = parent_bindings\n                 .iter()\n@@ -1748,12 +1746,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 unreachable\n             });\n             let outside_scope = self.cfg.start_new_block();\n-            self.exit_scope(\n-                source_info.span,\n-                region_scope,\n-                otherwise_post_guard_block,\n-                outside_scope,\n-            );\n+            self.exit_top_scope(otherwise_post_guard_block, outside_scope, source_info);\n             self.false_edges(\n                 outside_scope,\n                 otherwise_block,"}, {"sha": "02dcf0394f641067546556e3b77d1ccc42092173", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -418,7 +418,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let bool_ty = self.hir.bool_ty();\n         let eq_result = self.temp(bool_ty, source_info.span);\n         let eq_block = self.cfg.start_new_block();\n-        let cleanup = self.diverge_cleanup();\n         self.cfg.terminate(\n             block,\n             source_info,\n@@ -436,11 +435,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }),\n                 args: vec![val, expect],\n                 destination: Some((eq_result, eq_block)),\n-                cleanup: Some(cleanup),\n+                cleanup: None,\n                 from_hir_call: false,\n                 fn_span: source_info.span,\n             },\n         );\n+        self.diverge_from(block);\n \n         if let [success_block, fail_block] = *make_target_blocks(self) {\n             // check the result"}, {"sha": "2ff369069eba3f5f8cd77ced954d8b4f5c8f41af", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 28, "deletions": 63, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -352,11 +352,6 @@ struct Builder<'a, 'tcx> {\n \n     var_debug_info: Vec<VarDebugInfo<'tcx>>,\n \n-    /// Cached block with the `RESUME` terminator; this is created\n-    /// when first set of cleanups are built.\n-    cached_resume_block: Option<BasicBlock>,\n-    /// Cached block with the `RETURN` terminator.\n-    cached_return_block: Option<BasicBlock>,\n     /// Cached block with the `UNREACHABLE` terminator.\n     cached_unreachable_block: Option<BasicBlock>,\n }\n@@ -617,50 +612,34 @@ where\n         region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::CallSite };\n     let arg_scope =\n         region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::Arguments };\n-    let mut block = START_BLOCK;\n     let source_info = builder.source_info(span);\n     let call_site_s = (call_site_scope, source_info);\n-    unpack!(\n-        block = builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n-            if should_abort_on_panic(tcx, fn_def_id, abi) {\n-                builder.schedule_abort();\n-            }\n-\n-            let arg_scope_s = (arg_scope, source_info);\n-            // `return_block` is called when we evaluate a `return` expression, so\n-            // we just use `START_BLOCK` here.\n-            unpack!(\n-                block = builder.in_breakable_scope(\n-                    None,\n-                    START_BLOCK,\n-                    Place::return_place(),\n-                    |builder| {\n-                        builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n-                            builder.args_and_body(\n-                                block,\n-                                fn_def_id.to_def_id(),\n-                                &arguments,\n-                                arg_scope,\n-                                &body.value,\n-                            )\n-                        })\n-                    },\n-                )\n-            );\n-            // Attribute epilogue to function's closing brace\n-            let fn_end = span_with_body.shrink_to_hi();\n-            let source_info = builder.source_info(fn_end);\n-            let return_block = builder.return_block();\n-            builder.cfg.goto(block, source_info, return_block);\n-            builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n-            // Attribute any unreachable codepaths to the function's closing brace\n-            if let Some(unreachable_block) = builder.cached_unreachable_block {\n-                builder.cfg.terminate(unreachable_block, source_info, TerminatorKind::Unreachable);\n-            }\n-            return_block.unit()\n-        })\n-    );\n-    assert_eq!(block, builder.return_block());\n+    unpack!(builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n+        let arg_scope_s = (arg_scope, source_info);\n+        // Attribute epilogue to function's closing brace\n+        let fn_end = span_with_body.shrink_to_hi();\n+        let return_block =\n+            unpack!(builder.in_breakable_scope(None, Place::return_place(), fn_end, |builder| {\n+                Some(builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n+                    builder.args_and_body(\n+                        START_BLOCK,\n+                        fn_def_id.to_def_id(),\n+                        &arguments,\n+                        arg_scope,\n+                        &body.value,\n+                    )\n+                }))\n+            }));\n+        let source_info = builder.source_info(fn_end);\n+        builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n+        let should_abort = should_abort_on_panic(tcx, fn_def_id, abi);\n+        builder.build_drop_trees(should_abort);\n+        // Attribute any unreachable codepaths to the function's closing brace\n+        if let Some(unreachable_block) = builder.cached_unreachable_block {\n+            builder.cfg.terminate(unreachable_block, source_info, TerminatorKind::Unreachable);\n+        }\n+        return_block.unit()\n+    }));\n \n     let spread_arg = if abi == Abi::RustCall {\n         // RustCall pseudo-ABI untuples the last argument.\n@@ -695,8 +674,7 @@ fn construct_const<'a, 'tcx>(\n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(block, source_info, TerminatorKind::Return);\n \n-    // Constants can't `return` so a return block should not be created.\n-    assert_eq!(builder.cached_return_block, None);\n+    builder.build_drop_trees(false);\n \n     // Constants may be match expressions in which case an unreachable block may\n     // be created, so terminate it properly.\n@@ -766,7 +744,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             fn_span: span,\n             arg_count,\n             generator_kind,\n-            scopes: Default::default(),\n+            scopes: scope::Scopes::new(),\n             block_context: BlockContext::new(),\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n@@ -779,8 +757,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             var_indices: Default::default(),\n             unit_temp: None,\n             var_debug_info: vec![],\n-            cached_resume_block: None,\n-            cached_return_block: None,\n             cached_unreachable_block: None,\n         };\n \n@@ -1016,17 +992,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    fn return_block(&mut self) -> BasicBlock {\n-        match self.cached_return_block {\n-            Some(rb) => rb,\n-            None => {\n-                let rb = self.cfg.start_new_block();\n-                self.cached_return_block = Some(rb);\n-                rb\n-            }\n-        }\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "ad6386ca12d52182165521844aafb16567e22156", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 712, "deletions": 628, "changes": 1340, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,30 +6,31 @@ contents, and then pop it off. Every scope is named by a\n \n ### SEME Regions\n \n-When pushing a new scope, we record the current point in the graph (a\n+When pushing a new [Scope], we record the current point in the graph (a\n basic block); this marks the entry to the scope. We then generate more\n stuff in the control-flow graph. Whenever the scope is exited, either\n via a `break` or `return` or just by fallthrough, that marks an exit\n from the scope. Each lexical scope thus corresponds to a single-entry,\n multiple-exit (SEME) region in the control-flow graph.\n \n-For now, we keep a mapping from each `region::Scope` to its\n-corresponding SEME region for later reference (see caveat in next\n-paragraph). This is because region scopes are tied to\n-them. Eventually, when we shift to non-lexical lifetimes, there should\n-be no need to remember this mapping.\n+For now, we record the `region::Scope` to each SEME region for later reference\n+(see caveat in next paragraph). This is because destruction scopes are tied to\n+them. This may change in the future so that MIR lowering determines its own\n+destruction scopes.\n \n ### Not so SEME Regions\n \n In the course of building matches, it sometimes happens that certain code\n (namely guards) gets executed multiple times. This means that the scope lexical\n scope may in fact correspond to multiple, disjoint SEME regions. So in fact our\n-mapping is from one scope to a vector of SEME regions.\n+mapping is from one scope to a vector of SEME regions. Since the SEME regions\n+are disjoint, the mapping is still one-to-one for the set of SEME regions that\n+we're currently in.\n \n-Also in matches, the scopes assigned to arms are not even SEME regions! Each\n-arm has a single region with one entry for each pattern. We manually\n+Also in matches, the scopes assigned to arms are not always even SEME regions!\n+Each arm has a single region with one entry for each pattern. We manually\n manipulate the scheduled drops in this scope to avoid dropping things multiple\n-times, although drop elaboration would clean this up for value drops.\n+times.\n \n ### Drops\n \n@@ -60,38 +61,48 @@ that for now); any later drops would also drop `y`.\n \n There are numerous \"normal\" ways to early exit a scope: `break`,\n `continue`, `return` (panics are handled separately). Whenever an\n-early exit occurs, the method `exit_scope` is called. It is given the\n+early exit occurs, the method `break_scope` is called. It is given the\n current point in execution where the early exit occurs, as well as the\n scope you want to branch to (note that all early exits from to some\n-other enclosing scope). `exit_scope` will record this exit point and\n-also add all drops.\n+other enclosing scope). `break_scope` will record the set of drops currently\n+scheduled in a [DropTree]. Later, before `in_breakable_scope` exits, the drops\n+will be added to the CFG.\n \n-Panics are handled in a similar fashion, except that a panic always\n-returns out to the `DIVERGE_BLOCK`. To trigger a panic, simply call\n-`panic(p)` with the current point `p`. Or else you can call\n-`diverge_cleanup`, which will produce a block that you can branch to\n-which does the appropriate cleanup and then diverges. `panic(p)`\n-simply calls `diverge_cleanup()` and adds an edge from `p` to the\n-result.\n+Panics are handled in a similar fashion, except that the drops are added to the\n+MIR once the rest of the function has finished being lowered. If a terminator\n+can panic, call `diverge_from(block)` with the block containing the terminator\n+`block`.\n \n-### Loop scopes\n+### Breakable scopes\n \n In addition to the normal scope stack, we track a loop scope stack\n-that contains only loops. It tracks where a `break` and `continue`\n-should go to.\n+that contains only loops and breakable blocks. It tracks where a `break`,\n+`continue` or `return` should go to.\n \n */\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use crate::thir::{Expr, ExprRef, LintLevel};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::GeneratorKind;\n+use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_span::{Span, DUMMY_SP};\n-use std::collections::hash_map::Entry;\n-use std::mem;\n+\n+#[derive(Debug)]\n+pub struct Scopes<'tcx> {\n+    scopes: Vec<Scope>,\n+    /// The current set of breakable scopes. See module comment for more details.\n+    breakable_scopes: Vec<BreakableScope<'tcx>>,\n+\n+    /// Drops that need to be done on unwind paths. See the comment on\n+    /// [DropTree] for more details.\n+    unwind_drops: DropTree,\n+\n+    /// Drops that need to be done on paths to the `GeneratorDrop` terminator.\n+    generator_drops: DropTree,\n+}\n \n #[derive(Debug)]\n struct Scope {\n@@ -112,73 +123,45 @@ struct Scope {\n \n     moved_locals: Vec<Local>,\n \n-    /// The cache for drop chain on \u201cnormal\u201d exit into a particular BasicBlock.\n-    cached_exits: FxHashMap<(BasicBlock, region::Scope), BasicBlock>,\n+    /// The drop index that will drop everything in and below this scope on an\n+    /// unwind path.\n+    cached_unwind_block: Option<DropIdx>,\n \n-    /// The cache for drop chain on \"generator drop\" exit.\n-    cached_generator_drop: Option<BasicBlock>,\n-\n-    /// The cache for drop chain on \"unwind\" exit.\n-    cached_unwind: CachedBlock,\n+    /// The drop index that will drop everything in and below this scope on a\n+    /// generator drop path.\n+    cached_generator_drop_block: Option<DropIdx>,\n }\n \n-#[derive(Debug, Default)]\n-crate struct Scopes<'tcx> {\n-    scopes: Vec<Scope>,\n-    /// The current set of breakable scopes. See module comment for more details.\n-    breakable_scopes: Vec<BreakableScope<'tcx>>,\n-}\n-\n-#[derive(Debug)]\n+#[derive(Clone, Copy, Debug)]\n struct DropData {\n-    /// span where drop obligation was incurred (typically where place was declared)\n-    span: Span,\n+    /// The `Span` where drop obligation was incurred (typically where place was\n+    /// declared)\n+    source_info: SourceInfo,\n \n     /// local to drop\n     local: Local,\n \n     /// Whether this is a value Drop or a StorageDead.\n     kind: DropKind,\n-\n-    /// The cached blocks for unwinds.\n-    cached_block: CachedBlock,\n-}\n-\n-#[derive(Debug, Default, Clone, Copy)]\n-struct CachedBlock {\n-    /// The cached block for the cleanups-on-diverge path. This block\n-    /// contains code to run the current drop and all the preceding\n-    /// drops (i.e., those having lower index in Drop\u2019s Scope drop\n-    /// array)\n-    unwind: Option<BasicBlock>,\n-\n-    /// The cached block for unwinds during cleanups-on-generator-drop path\n-    ///\n-    /// This is split from the standard unwind path here to prevent drop\n-    /// elaboration from creating drop flags that would have to be captured\n-    /// by the generator. I'm not sure how important this optimization is,\n-    /// but it is here.\n-    generator_drop: Option<BasicBlock>,\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub(crate) enum DropKind {\n     Value,\n     Storage,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n struct BreakableScope<'tcx> {\n     /// Region scope of the loop\n     region_scope: region::Scope,\n-    /// Where the body of the loop begins. `None` if block\n-    continue_block: Option<BasicBlock>,\n-    /// Block to branch into when the loop or block terminates (either by being\n-    /// `break`-en out from, or by having its condition to become false)\n-    break_block: BasicBlock,\n     /// The destination of the loop/block expression itself (i.e., where to put\n-    /// the result of a `break` expression)\n+    /// the result of a `break` or `return` expression)\n     break_destination: Place<'tcx>,\n+    /// Drops that happen on the `break`/`return` path.\n+    break_drops: DropTree,\n+    /// Drops that happen on the `continue` path.\n+    continue_drops: Option<DropTree>,\n }\n \n /// The target of an expression that breaks out of a scope\n@@ -189,61 +172,33 @@ crate enum BreakableTarget {\n     Return,\n }\n \n-impl CachedBlock {\n-    fn invalidate(&mut self) {\n-        *self = CachedBlock::default();\n-    }\n+rustc_index::newtype_index! {\n+    struct DropIdx { .. }\n+}\n \n-    fn get(&self, generator_drop: bool) -> Option<BasicBlock> {\n-        if generator_drop { self.generator_drop } else { self.unwind }\n-    }\n+const ROOT_NODE: DropIdx = DropIdx::from_u32(0);\n \n-    fn ref_mut(&mut self, generator_drop: bool) -> &mut Option<BasicBlock> {\n-        if generator_drop { &mut self.generator_drop } else { &mut self.unwind }\n-    }\n+/// A tree of drops that we have deferred lowering. It's used for:\n+///\n+/// * Drops on unwind paths\n+/// * Drops on generator drop paths (when a suspended generator is dropped)\n+/// * Drops on return and loop exit paths\n+///\n+/// Once no more nodes could be added to the tree, we lower it to MIR in one go\n+/// in `build_mir`.\n+#[derive(Debug)]\n+struct DropTree {\n+    /// Drops in the tree.\n+    drops: IndexVec<DropIdx, (DropData, DropIdx)>,\n+    /// Map for finding the inverse of the `next_drop` relation:\n+    ///\n+    /// `previous_drops[(drops[i].1, drops[i].0.local, drops[i].0.kind)] == i`\n+    previous_drops: FxHashMap<(DropIdx, Local, DropKind), DropIdx>,\n+    /// Edges into the `DropTree` that need to be added once it's lowered.\n+    entry_points: Vec<(DropIdx, BasicBlock)>,\n }\n \n impl Scope {\n-    /// Invalidates all the cached blocks in the scope.\n-    ///\n-    /// Should always be run for all inner scopes when a drop is pushed into some scope enclosing a\n-    /// larger extent of code.\n-    ///\n-    /// `storage_only` controls whether to invalidate only drop paths that run `StorageDead`.\n-    /// `this_scope_only` controls whether to invalidate only drop paths that refer to the current\n-    /// top-of-scope (as opposed to dependent scopes).\n-    fn invalidate_cache(\n-        &mut self,\n-        storage_only: bool,\n-        generator_kind: Option<GeneratorKind>,\n-        this_scope_only: bool,\n-    ) {\n-        // FIXME: maybe do shared caching of `cached_exits` etc. to handle functions\n-        // with lots of `try!`?\n-\n-        // cached exits drop storage and refer to the top-of-scope\n-        self.cached_exits.clear();\n-\n-        // the current generator drop and unwind refer to top-of-scope\n-        self.cached_generator_drop = None;\n-\n-        let ignore_unwinds = storage_only && generator_kind.is_none();\n-        if !ignore_unwinds {\n-            self.cached_unwind.invalidate();\n-        }\n-\n-        if !ignore_unwinds && !this_scope_only {\n-            for drop_data in &mut self.drops {\n-                drop_data.cached_block.invalidate();\n-            }\n-        }\n-    }\n-\n-    /// Given a span and this scope's source scope, make a SourceInfo.\n-    fn source_info(&self, span: Span) -> SourceInfo {\n-        SourceInfo { span, scope: self.source_scope }\n-    }\n-\n     /// Whether there's anything to do for the cleanup path, that is,\n     /// when unwinding through this scope. This includes destructors,\n     /// but not StorageDead statements, which don't get emitted at all\n@@ -261,138 +216,273 @@ impl Scope {\n             DropKind::Storage => false,\n         })\n     }\n+\n+    fn invalidate_cache(&mut self) {\n+        self.cached_unwind_block = None;\n+        self.cached_generator_drop_block = None;\n+    }\n }\n \n-impl<'tcx> Scopes<'tcx> {\n-    fn len(&self) -> usize {\n-        self.scopes.len()\n+/// A trait that determined how [DropTree] creates its blocks and\n+/// links to any entry nodes.\n+trait DropTreeBuilder<'tcx> {\n+    /// Create a new block for the tree. This should call either\n+    /// `cfg.start_new_block()` or `cfg.start_new_cleanup_block()`.\n+    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock;\n+\n+    /// Links a block outside the drop tree, `from`, to the block `to` inside\n+    /// the drop tree.\n+    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock);\n+}\n+\n+impl DropTree {\n+    fn new() -> Self {\n+        // The root node of the tree doesn't represent a drop, but instead\n+        // represents the block in the tree that should be jumped to once all\n+        // of the required drops have been performed.\n+        let fake_source_info = SourceInfo::outermost(DUMMY_SP);\n+        let fake_data =\n+            DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };\n+        let drop_idx = DropIdx::MAX;\n+        let drops = IndexVec::from_elem_n((fake_data, drop_idx), 1);\n+        Self { drops, entry_points: Vec::new(), previous_drops: FxHashMap::default() }\n     }\n \n-    fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo), vis_scope: SourceScope) {\n-        debug!(\"push_scope({:?})\", region_scope);\n-        self.scopes.push(Scope {\n-            source_scope: vis_scope,\n-            region_scope: region_scope.0,\n-            region_scope_span: region_scope.1.span,\n-            drops: vec![],\n-            moved_locals: vec![],\n-            cached_generator_drop: None,\n-            cached_exits: Default::default(),\n-            cached_unwind: CachedBlock::default(),\n-        });\n+    fn add_drop(&mut self, drop: DropData, next: DropIdx) -> DropIdx {\n+        let drops = &mut self.drops;\n+        *self\n+            .previous_drops\n+            .entry((next, drop.local, drop.kind))\n+            .or_insert_with(|| drops.push((drop, next)))\n     }\n \n-    fn pop_scope(\n-        &mut self,\n-        region_scope: (region::Scope, SourceInfo),\n-    ) -> (Scope, Option<BasicBlock>) {\n-        let scope = self.scopes.pop().unwrap();\n-        assert_eq!(scope.region_scope, region_scope.0);\n-        let unwind_to =\n-            self.scopes.last().and_then(|next_scope| next_scope.cached_unwind.get(false));\n-        (scope, unwind_to)\n+    fn add_entry(&mut self, from: BasicBlock, to: DropIdx) {\n+        debug_assert!(to < self.drops.next_index());\n+        self.entry_points.push((to, from));\n     }\n \n-    fn may_panic(&self, scope_count: usize) -> bool {\n-        let len = self.len();\n-        self.scopes[(len - scope_count)..].iter().any(|s| s.needs_cleanup())\n+    /// Builds the MIR for a given drop tree.\n+    ///\n+    /// `blocks` should have the same length as `self.drops`, and may have its\n+    /// first value set to some already existing block.\n+    fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(\n+        &mut self,\n+        cfg: &mut CFG<'tcx>,\n+        blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,\n+    ) {\n+        debug!(\"DropTree::build_mir(drops = {:#?})\", self);\n+        assert_eq!(blocks.len(), self.drops.len());\n+\n+        self.assign_blocks::<T>(cfg, blocks);\n+        self.link_blocks(cfg, blocks)\n     }\n \n-    /// Finds the breakable scope for a given label. This is used for\n-    /// resolving `return`, `break` and `continue`.\n-    fn find_breakable_scope(\n-        &self,\n-        span: Span,\n-        target: BreakableTarget,\n-    ) -> (BasicBlock, region::Scope, Option<Place<'tcx>>) {\n-        let get_scope = |scope: region::Scope| {\n-            // find the loop-scope by its `region::Scope`.\n-            self.breakable_scopes\n-                .iter()\n-                .rfind(|breakable_scope| breakable_scope.region_scope == scope)\n-                .unwrap_or_else(|| span_bug!(span, \"no enclosing breakable scope found\"))\n-        };\n-        match target {\n-            BreakableTarget::Return => {\n-                let scope = &self.breakable_scopes[0];\n-                if scope.break_destination != Place::return_place() {\n-                    span_bug!(span, \"`return` in item with no return scope\");\n+    /// Assign blocks for all of the drops in the drop tree that need them.\n+    fn assign_blocks<'tcx, T: DropTreeBuilder<'tcx>>(\n+        &mut self,\n+        cfg: &mut CFG<'tcx>,\n+        blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,\n+    ) {\n+        // StorageDead statements can share blocks with each other and also with\n+        // a Drop terminator. We iterate through the drops to find which drops\n+        // need their own block.\n+        #[derive(Clone, Copy)]\n+        enum Block {\n+            // This drop is unreachable\n+            None,\n+            // This drop is only reachable through the `StorageDead` with the\n+            // specified index.\n+            Shares(DropIdx),\n+            // This drop has more than one way of being reached, or it is\n+            // branched to from outside the tree, or its predecessor is a\n+            // `Value` drop.\n+            Own,\n+        }\n+\n+        let mut needs_block = IndexVec::from_elem(Block::None, &self.drops);\n+        if blocks[ROOT_NODE].is_some() {\n+            // In some cases (such as drops for `continue`) the root node\n+            // already has a block. In this case, make sure that we don't\n+            // override it.\n+            needs_block[ROOT_NODE] = Block::Own;\n+        }\n+\n+        // Sort so that we only need to check the last value.\n+        let entry_points = &mut self.entry_points;\n+        entry_points.sort();\n+\n+        for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {\n+            if entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {\n+                let block = *blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));\n+                needs_block[drop_idx] = Block::Own;\n+                while entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {\n+                    let entry_block = entry_points.pop().unwrap().1;\n+                    T::add_entry(cfg, entry_block, block);\n                 }\n-                (scope.break_block, scope.region_scope, Some(scope.break_destination))\n             }\n-            BreakableTarget::Break(scope) => {\n-                let scope = get_scope(scope);\n-                (scope.break_block, scope.region_scope, Some(scope.break_destination))\n+            match needs_block[drop_idx] {\n+                Block::None => continue,\n+                Block::Own => {\n+                    blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));\n+                }\n+                Block::Shares(pred) => {\n+                    blocks[drop_idx] = blocks[pred];\n+                }\n             }\n-            BreakableTarget::Continue(scope) => {\n-                let scope = get_scope(scope);\n-                let continue_block = scope\n-                    .continue_block\n-                    .unwrap_or_else(|| span_bug!(span, \"missing `continue` block\"));\n-                (continue_block, scope.region_scope, None)\n+            if let DropKind::Value = drop_data.0.kind {\n+                needs_block[drop_data.1] = Block::Own;\n+            } else {\n+                if drop_idx != ROOT_NODE {\n+                    match &mut needs_block[drop_data.1] {\n+                        pred @ Block::None => *pred = Block::Shares(drop_idx),\n+                        pred @ Block::Shares(_) => *pred = Block::Own,\n+                        Block::Own => (),\n+                    }\n+                }\n             }\n         }\n+\n+        debug!(\"assign_blocks: blocks = {:#?}\", blocks);\n+        assert!(entry_points.is_empty());\n     }\n \n-    fn num_scopes_above(&self, region_scope: region::Scope, span: Span) -> usize {\n-        let scope_count = self\n-            .scopes\n-            .iter()\n-            .rev()\n-            .position(|scope| scope.region_scope == region_scope)\n-            .unwrap_or_else(|| span_bug!(span, \"region_scope {:?} does not enclose\", region_scope));\n-        let len = self.len();\n-        assert!(scope_count < len, \"should not use `exit_scope` to pop ALL scopes\");\n-        scope_count\n+    fn link_blocks<'tcx>(\n+        &self,\n+        cfg: &mut CFG<'tcx>,\n+        blocks: &IndexVec<DropIdx, Option<BasicBlock>>,\n+    ) {\n+        for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {\n+            let block = if let Some(block) = blocks[drop_idx] {\n+                block\n+            } else {\n+                continue;\n+            };\n+            match drop_data.0.kind {\n+                DropKind::Value => {\n+                    let terminator = TerminatorKind::Drop {\n+                        target: blocks[drop_data.1].unwrap(),\n+                        // The caller will handle this if needed.\n+                        unwind: None,\n+                        place: drop_data.0.local.into(),\n+                    };\n+                    cfg.terminate(block, drop_data.0.source_info, terminator);\n+                }\n+                // Root nodes don't correspond to a drop.\n+                DropKind::Storage if drop_idx == ROOT_NODE => {}\n+                DropKind::Storage => {\n+                    let stmt = Statement {\n+                        source_info: drop_data.0.source_info,\n+                        kind: StatementKind::StorageDead(drop_data.0.local),\n+                    };\n+                    cfg.push(block, stmt);\n+                    let target = blocks[drop_data.1].unwrap();\n+                    if target != block {\n+                        // Diagnostics don't use this `Span` but debuginfo\n+                        // might. Since we don't want breakpoints to be placed\n+                        // here, especially when this is on an unwind path, we\n+                        // use `DUMMY_SP`.\n+                        let source_info = SourceInfo { span: DUMMY_SP, ..drop_data.0.source_info };\n+                        let terminator = TerminatorKind::Goto { target };\n+                        cfg.terminate(block, source_info, terminator);\n+                    }\n+                }\n+            }\n+        }\n     }\n+}\n \n-    fn iter_mut(&mut self) -> impl DoubleEndedIterator<Item = &mut Scope> + '_ {\n-        self.scopes.iter_mut().rev()\n+impl<'tcx> Scopes<'tcx> {\n+    pub(crate) fn new() -> Self {\n+        Self {\n+            scopes: Vec::new(),\n+            breakable_scopes: Vec::new(),\n+            unwind_drops: DropTree::new(),\n+            generator_drops: DropTree::new(),\n+        }\n     }\n \n-    fn top_scopes(&mut self, count: usize) -> impl DoubleEndedIterator<Item = &mut Scope> + '_ {\n-        let len = self.len();\n-        self.scopes[len - count..].iter_mut()\n+    fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo), vis_scope: SourceScope) {\n+        debug!(\"push_scope({:?})\", region_scope);\n+        self.scopes.push(Scope {\n+            source_scope: vis_scope,\n+            region_scope: region_scope.0,\n+            region_scope_span: region_scope.1.span,\n+            drops: vec![],\n+            moved_locals: vec![],\n+            cached_unwind_block: None,\n+            cached_generator_drop_block: None,\n+        });\n+    }\n+\n+    fn pop_scope(&mut self, region_scope: (region::Scope, SourceInfo)) -> Scope {\n+        let scope = self.scopes.pop().unwrap();\n+        assert_eq!(scope.region_scope, region_scope.0);\n+        scope\n+    }\n+\n+    fn scope_index(&self, region_scope: region::Scope, span: Span) -> usize {\n+        self.scopes\n+            .iter()\n+            .rposition(|scope| scope.region_scope == region_scope)\n+            .unwrap_or_else(|| span_bug!(span, \"region_scope {:?} does not enclose\", region_scope))\n     }\n \n     /// Returns the topmost active scope, which is known to be alive until\n     /// the next scope expression.\n-    pub(super) fn topmost(&self) -> region::Scope {\n+    fn topmost(&self) -> region::Scope {\n         self.scopes.last().expect(\"topmost_scope: no scopes present\").region_scope\n     }\n-\n-    fn source_info(&self, index: usize, span: Span) -> SourceInfo {\n-        self.scopes[self.len() - index].source_info(span)\n-    }\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     // Adding and removing scopes\n     // ==========================\n     //  Start a breakable scope, which tracks where `continue`, `break` and\n     //  `return` should branch to.\n-    crate fn in_breakable_scope<F, R>(\n+    crate fn in_breakable_scope<F>(\n         &mut self,\n         loop_block: Option<BasicBlock>,\n-        break_block: BasicBlock,\n         break_destination: Place<'tcx>,\n+        span: Span,\n         f: F,\n-    ) -> R\n+    ) -> BlockAnd<()>\n     where\n-        F: FnOnce(&mut Builder<'a, 'tcx>) -> R,\n+        F: FnOnce(&mut Builder<'a, 'tcx>) -> Option<BlockAnd<()>>,\n     {\n         let region_scope = self.scopes.topmost();\n         let scope = BreakableScope {\n             region_scope,\n-            continue_block: loop_block,\n-            break_block,\n             break_destination,\n+            break_drops: DropTree::new(),\n+            continue_drops: loop_block.map(|_| DropTree::new()),\n         };\n         self.scopes.breakable_scopes.push(scope);\n-        let res = f(self);\n+        let normal_exit_block = f(self);\n         let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();\n         assert!(breakable_scope.region_scope == region_scope);\n-        res\n+        let break_block = self.build_exit_tree(breakable_scope.break_drops, None);\n+        breakable_scope.continue_drops.map(|drops| {\n+            self.build_exit_tree(drops, loop_block);\n+        });\n+        match (normal_exit_block, break_block) {\n+            (Some(block), None) | (None, Some(block)) => block,\n+            (None, None) => self.cfg.start_new_block().unit(),\n+            (Some(normal_block), Some(exit_block)) => {\n+                let target = self.cfg.start_new_block();\n+                let source_info = self.source_info(span);\n+                self.cfg.terminate(\n+                    unpack!(normal_block),\n+                    source_info,\n+                    TerminatorKind::Goto { target },\n+                );\n+                self.cfg.terminate(\n+                    unpack!(exit_block),\n+                    source_info,\n+                    TerminatorKind::Goto { target },\n+                );\n+                target.unit()\n+            }\n+        }\n     }\n \n     crate fn in_opt_scope<F, R>(\n@@ -476,46 +566,51 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut block: BasicBlock,\n     ) -> BlockAnd<()> {\n         debug!(\"pop_scope({:?}, {:?})\", region_scope, block);\n-        // If we are emitting a `drop` statement, we need to have the cached\n-        // diverge cleanup pads ready in case that drop panics.\n-        if self.scopes.may_panic(1) {\n-            self.diverge_cleanup();\n-        }\n-        let (scope, unwind_to) = self.scopes.pop_scope(region_scope);\n-        let unwind_to = unwind_to.unwrap_or_else(|| self.resume_block());\n \n-        unpack!(\n-            block = build_scope_drops(\n-                &mut self.cfg,\n-                self.generator_kind,\n-                &scope,\n-                block,\n-                unwind_to,\n-                self.arg_count,\n-                false, // not generator\n-                false, // not unwind path\n-            )\n-        );\n+        block = self.leave_top_scope(block);\n+\n+        self.scopes.pop_scope(region_scope);\n \n         block.unit()\n     }\n \n+    /// Sets up the drops for breaking from `block` to `target`.\n     crate fn break_scope(\n         &mut self,\n         mut block: BasicBlock,\n         value: Option<ExprRef<'tcx>>,\n-        scope: BreakableTarget,\n+        target: BreakableTarget,\n         source_info: SourceInfo,\n     ) -> BlockAnd<()> {\n-        let (mut target_block, region_scope, destination) =\n-            self.scopes.find_breakable_scope(source_info.span, scope);\n-        if let BreakableTarget::Return = scope {\n-            // We call this now, rather than when we start lowering the\n-            // function so that the return block doesn't precede the entire\n-            // rest of the CFG. Some passes and LLVM prefer blocks to be in\n-            // approximately CFG order.\n-            target_block = self.return_block();\n-        }\n+        let span = source_info.span;\n+\n+        let get_scope_index = |scope: region::Scope| {\n+            // find the loop-scope by its `region::Scope`.\n+            self.scopes\n+                .breakable_scopes\n+                .iter()\n+                .rposition(|breakable_scope| breakable_scope.region_scope == scope)\n+                .unwrap_or_else(|| span_bug!(span, \"no enclosing breakable scope found\"))\n+        };\n+        let (break_index, destination) = match target {\n+            BreakableTarget::Return => {\n+                let scope = &self.scopes.breakable_scopes[0];\n+                if scope.break_destination != Place::return_place() {\n+                    span_bug!(span, \"`return` in item with no return scope\");\n+                }\n+                (0, Some(scope.break_destination))\n+            }\n+            BreakableTarget::Break(scope) => {\n+                let break_index = get_scope_index(scope);\n+                let scope = &self.scopes.breakable_scopes[break_index];\n+                (break_index, Some(scope.break_destination))\n+            }\n+            BreakableTarget::Continue(scope) => {\n+                let break_index = get_scope_index(scope);\n+                (break_index, None)\n+            }\n+        };\n+\n         if let Some(destination) = destination {\n             if let Some(value) = value {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n@@ -528,131 +623,57 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");\n         }\n-        self.exit_scope(source_info.span, region_scope, block, target_block);\n+\n+        let region_scope = self.scopes.breakable_scopes[break_index].region_scope;\n+        let scope_index = self.scopes.scope_index(region_scope, span);\n+        let drops = if destination.is_some() {\n+            &mut self.scopes.breakable_scopes[break_index].break_drops\n+        } else {\n+            self.scopes.breakable_scopes[break_index].continue_drops.as_mut().unwrap()\n+        };\n+        let mut drop_idx = ROOT_NODE;\n+        for scope in &self.scopes.scopes[scope_index + 1..] {\n+            for drop in &scope.drops {\n+                drop_idx = drops.add_drop(*drop, drop_idx);\n+            }\n+        }\n+        drops.add_entry(block, drop_idx);\n+\n+        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // create a dummy terminator now. `TerminatorKind::Resume` is used\n+        // because MIR type checking will panic if it hasn't been overwritten.\n+        self.cfg.terminate(block, source_info, TerminatorKind::Resume);\n+\n         self.cfg.start_new_block().unit()\n     }\n \n-    /// Branch out of `block` to `target`, exiting all scopes up to\n-    /// and including `region_scope`. This will insert whatever drops are\n-    /// needed. See module comment for details.\n-    crate fn exit_scope(\n+    crate fn exit_top_scope(\n         &mut self,\n-        span: Span,\n-        region_scope: region::Scope,\n         mut block: BasicBlock,\n         target: BasicBlock,\n+        source_info: SourceInfo,\n     ) {\n-        debug!(\n-            \"exit_scope(region_scope={:?}, block={:?}, target={:?})\",\n-            region_scope, block, target\n-        );\n-        let scope_count = self.scopes.num_scopes_above(region_scope, span);\n+        block = self.leave_top_scope(block);\n+        self.cfg.terminate(block, source_info, TerminatorKind::Goto { target });\n+    }\n \n+    fn leave_top_scope(&mut self, block: BasicBlock) -> BasicBlock {\n         // If we are emitting a `drop` statement, we need to have the cached\n         // diverge cleanup pads ready in case that drop panics.\n-        let may_panic = self.scopes.may_panic(scope_count);\n-        if may_panic {\n-            self.diverge_cleanup();\n-        }\n-\n-        let mut scopes = self.scopes.top_scopes(scope_count + 1).rev();\n-        let mut scope = scopes.next().unwrap();\n-        for next_scope in scopes {\n-            if scope.drops.is_empty() {\n-                scope = next_scope;\n-                continue;\n-            }\n-            let source_info = scope.source_info(span);\n-            block = match scope.cached_exits.entry((target, region_scope)) {\n-                Entry::Occupied(e) => {\n-                    self.cfg.goto(block, source_info, *e.get());\n-                    return;\n-                }\n-                Entry::Vacant(v) => {\n-                    let b = self.cfg.start_new_block();\n-                    self.cfg.goto(block, source_info, b);\n-                    v.insert(b);\n-                    b\n-                }\n-            };\n-\n-            let unwind_to = next_scope.cached_unwind.get(false).unwrap_or_else(|| {\n-                debug_assert!(!may_panic, \"cached block not present?\");\n-                START_BLOCK\n-            });\n-\n-            unpack!(\n-                block = build_scope_drops(\n-                    &mut self.cfg,\n-                    self.generator_kind,\n-                    scope,\n-                    block,\n-                    unwind_to,\n-                    self.arg_count,\n-                    false, // not generator\n-                    false, // not unwind path\n-                )\n-            );\n-\n-            scope = next_scope;\n-        }\n-\n-        self.cfg.goto(block, self.scopes.source_info(scope_count, span), target);\n-    }\n-\n-    /// Creates a path that performs all required cleanup for dropping a generator.\n-    ///\n-    /// This path terminates in GeneratorDrop. Returns the start of the path.\n-    /// None indicates there\u2019s no cleanup to do at this point.\n-    crate fn generator_drop_cleanup(&mut self) -> Option<BasicBlock> {\n-        // Fill in the cache for unwinds\n-        self.diverge_cleanup_gen(true);\n-\n-        let src_info = self.scopes.source_info(self.scopes.len(), self.fn_span);\n-        let resume_block = self.resume_block();\n-        let mut scopes = self.scopes.iter_mut().peekable();\n-        let mut block = self.cfg.start_new_block();\n-        let result = block;\n-\n-        while let Some(scope) = scopes.next() {\n-            block = if let Some(b) = scope.cached_generator_drop {\n-                self.cfg.goto(block, src_info, b);\n-                return Some(result);\n-            } else {\n-                let b = self.cfg.start_new_block();\n-                scope.cached_generator_drop = Some(b);\n-                self.cfg.goto(block, src_info, b);\n-                b\n-            };\n-\n-            let unwind_to = scopes\n-                .peek()\n-                .as_ref()\n-                .map(|scope| {\n-                    scope\n-                        .cached_unwind\n-                        .get(true)\n-                        .unwrap_or_else(|| span_bug!(src_info.span, \"cached block not present?\"))\n-                })\n-                .unwrap_or(resume_block);\n-\n-            unpack!(\n-                block = build_scope_drops(\n-                    &mut self.cfg,\n-                    self.generator_kind,\n-                    scope,\n-                    block,\n-                    unwind_to,\n-                    self.arg_count,\n-                    true, // is generator\n-                    true, // is cached path\n-                )\n-            );\n-        }\n-\n-        self.cfg.terminate(block, src_info, TerminatorKind::GeneratorDrop);\n-\n-        Some(result)\n+        let needs_cleanup = self.scopes.scopes.last().map_or(false, |scope| scope.needs_cleanup());\n+        let is_generator = self.generator_kind.is_some();\n+        let unwind_to = if needs_cleanup { self.diverge_cleanup() } else { DropIdx::MAX };\n+\n+        let scope = self.scopes.scopes.last().expect(\"leave_top_scope called with no scopes\");\n+        unpack!(build_scope_drops(\n+            &mut self.cfg,\n+            &mut self.scopes.unwind_drops,\n+            scope,\n+            block,\n+            unwind_to,\n+            is_generator && needs_cleanup,\n+            self.arg_count,\n+        ))\n     }\n \n     /// Creates a new source scope, nested in the current one.\n@@ -728,15 +749,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    // Schedule an abort block - this is used for some ABIs that cannot unwind\n-    crate fn schedule_abort(&mut self) -> BasicBlock {\n-        let source_info = self.scopes.source_info(self.scopes.len(), self.fn_span);\n-        let abortblk = self.cfg.start_new_cleanup_block();\n-        self.cfg.terminate(abortblk, source_info, TerminatorKind::Abort);\n-        self.cached_resume_block = Some(abortblk);\n-        abortblk\n-    }\n-\n     // Scheduling drops\n     // ================\n     crate fn schedule_drop_storage_and_value(\n@@ -749,11 +761,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.schedule_drop(span, region_scope, local, DropKind::Value);\n     }\n \n-    /// Indicates that `place` should be dropped on exit from\n-    /// `region_scope`.\n+    /// Indicates that `place` should be dropped on exit from `region_scope`.\n     ///\n-    /// When called with `DropKind::Storage`, `place` should be a local\n-    /// with an index higher than the current `self.arg_count`.\n+    /// When called with `DropKind::Storage`, `place` shouldn't be the return\n+    /// place, or a function parameter.\n     crate fn schedule_drop(\n         &mut self,\n         span: Span,\n@@ -781,70 +792,74 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         };\n \n-        for scope in self.scopes.iter_mut() {\n-            let this_scope = scope.region_scope == region_scope;\n-            // When building drops, we try to cache chains of drops in such a way so these drops\n-            // could be reused by the drops which would branch into the cached (already built)\n-            // blocks.  This, however, means that whenever we add a drop into a scope which already\n-            // had some blocks built (and thus, cached) for it, we must invalidate all caches which\n-            // might branch into the scope which had a drop just added to it. This is necessary,\n-            // because otherwise some other code might use the cache to branch into already built\n-            // chain of drops, essentially ignoring the newly added drop.\n-            //\n-            // For example consider there\u2019s two scopes with a drop in each. These are built and\n-            // thus the caches are filled:\n-            //\n-            // +--------------------------------------------------------+\n-            // | +---------------------------------+                    |\n-            // | | +--------+     +-------------+  |  +---------------+ |\n-            // | | | return | <-+ | drop(outer) | <-+ |  drop(middle) | |\n-            // | | +--------+     +-------------+  |  +---------------+ |\n-            // | +------------|outer_scope cache|--+                    |\n-            // +------------------------------|middle_scope cache|------+\n-            //\n-            // Now, a new, inner-most scope is added along with a new drop into both inner-most and\n-            // outer-most scopes:\n-            //\n-            // +------------------------------------------------------------+\n-            // | +----------------------------------+                       |\n-            // | | +--------+      +-------------+  |   +---------------+   | +-------------+\n-            // | | | return | <+   | drop(new)   | <-+  |  drop(middle) | <--+| drop(inner) |\n-            // | | +--------+  |   | drop(outer) |  |   +---------------+   | +-------------+\n-            // | |             +-+ +-------------+  |                       |\n-            // | +---|invalid outer_scope cache|----+                       |\n-            // +----=----------------|invalid middle_scope cache|-----------+\n-            //\n-            // If, when adding `drop(new)` we do not invalidate the cached blocks for both\n-            // outer_scope and middle_scope, then, when building drops for the inner (right-most)\n-            // scope, the old, cached blocks, without `drop(new)` will get used, producing the\n-            // wrong results.\n-            //\n-            // The cache and its invalidation for unwind branch is somewhat special. The cache is\n-            // per-drop, rather than per scope, which has a several different implications. Adding\n-            // a new drop into a scope will not invalidate cached blocks of the prior drops in the\n-            // scope. That is true, because none of the already existing drops will have an edge\n-            // into a block with the newly added drop.\n-            //\n-            // Note that this code iterates scopes from the inner-most to the outer-most,\n-            // invalidating caches of each scope visited. This way bare minimum of the\n-            // caches gets invalidated. i.e., if a new drop is added into the middle scope, the\n-            // cache of outer scope stays intact.\n-            scope.invalidate_cache(!needs_drop, self.generator_kind, this_scope);\n-            if this_scope {\n+        // When building drops, we try to cache chains of drops to reduce the\n+        // number of `DropTree::add_drop` calls. This, however, means that\n+        // whenever we add a drop into a scope which already had some entries\n+        // in the drop tree built (and thus, cached) for it, we must invalidate\n+        // all caches which might branch into the scope which had a drop just\n+        // added to it. This is necessary, because otherwise some other code\n+        // might use the cache to branch into already built chain of drops,\n+        // essentially ignoring the newly added drop.\n+        //\n+        // For example consider there\u2019s two scopes with a drop in each. These\n+        // are built and thus the caches are filled:\n+        //\n+        // +--------------------------------------------------------+\n+        // | +---------------------------------+                    |\n+        // | | +--------+     +-------------+  |  +---------------+ |\n+        // | | | return | <-+ | drop(outer) | <-+ |  drop(middle) | |\n+        // | | +--------+     +-------------+  |  +---------------+ |\n+        // | +------------|outer_scope cache|--+                    |\n+        // +------------------------------|middle_scope cache|------+\n+        //\n+        // Now, a new, inner-most scope is added along with a new drop into\n+        // both inner-most and outer-most scopes:\n+        //\n+        // +------------------------------------------------------------+\n+        // | +----------------------------------+                       |\n+        // | | +--------+      +-------------+  |   +---------------+   | +-------------+\n+        // | | | return | <+   | drop(new)   | <-+  |  drop(middle) | <--+| drop(inner) |\n+        // | | +--------+  |   | drop(outer) |  |   +---------------+   | +-------------+\n+        // | |             +-+ +-------------+  |                       |\n+        // | +---|invalid outer_scope cache|----+                       |\n+        // +----=----------------|invalid middle_scope cache|-----------+\n+        //\n+        // If, when adding `drop(new)` we do not invalidate the cached blocks for both\n+        // outer_scope and middle_scope, then, when building drops for the inner (right-most)\n+        // scope, the old, cached blocks, without `drop(new)` will get used, producing the\n+        // wrong results.\n+        //\n+        // Note that this code iterates scopes from the inner-most to the outer-most,\n+        // invalidating caches of each scope visited. This way bare minimum of the\n+        // caches gets invalidated. i.e., if a new drop is added into the middle scope, the\n+        // cache of outer scope stays intact.\n+        //\n+        // Since we only cache drops for the unwind path and the generator drop\n+        // path, we only need to invalidate the cache for drops that happen on\n+        // the unwind or generator drop paths. This means that for\n+        // non-generators we don't need to invalidate caches for `DropKind::Storage`.\n+        let invalidate_caches = needs_drop || self.generator_kind.is_some();\n+        for scope in self.scopes.scopes.iter_mut().rev() {\n+            if invalidate_caches {\n+                scope.invalidate_cache();\n+            }\n+\n+            if scope.region_scope == region_scope {\n                 let region_scope_span =\n                     region_scope.span(self.hir.tcx(), &self.hir.region_scope_tree);\n                 // Attribute scope exit drops to scope's closing brace.\n                 let scope_end = self.hir.tcx().sess.source_map().end_point(region_scope_span);\n \n                 scope.drops.push(DropData {\n-                    span: scope_end,\n+                    source_info: SourceInfo { span: scope_end, scope: scope.source_scope },\n                     local,\n                     kind: drop_kind,\n-                    cached_block: CachedBlock::default(),\n                 });\n+\n                 return;\n             }\n         }\n+\n         span_bug!(span, \"region scope {:?} not in scope to drop {:?}\", region_scope, local);\n     }\n \n@@ -892,9 +907,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             Some(local_scope) => self\n+                .scopes\n                 .scopes\n                 .iter_mut()\n-                .find(|scope| scope.region_scope == local_scope)\n+                .rfind(|scope| scope.region_scope == local_scope)\n                 .unwrap_or_else(|| bug!(\"scope {:?} not found in scope list!\", local_scope)),\n         };\n \n@@ -944,13 +960,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // Manually drop the condition on both branches.\n                     let top_scope = self.scopes.scopes.last_mut().unwrap();\n                     let top_drop_data = top_scope.drops.pop().unwrap();\n+                    if self.generator_kind.is_some() {\n+                        top_scope.invalidate_cache();\n+                    }\n \n                     match top_drop_data.kind {\n                         DropKind::Value { .. } => {\n                             bug!(\"Drop scheduled on top of condition variable\")\n                         }\n                         DropKind::Storage => {\n-                            let source_info = top_scope.source_info(top_drop_data.span);\n+                            let source_info = top_drop_data.source_info;\n                             let local = top_drop_data.local;\n                             assert_eq!(local, cond_temp, \"Drop scheduled on top of condition\");\n                             self.cfg.push(\n@@ -963,8 +982,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             );\n                         }\n                     }\n-\n-                    top_scope.invalidate_cache(true, self.generator_kind, true);\n                 } else {\n                     bug!(\"Expected as_local_operand to produce a temporary\");\n                 }\n@@ -974,62 +991,86 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         (true_block, false_block)\n     }\n \n-    /// Creates a path that performs all required cleanup for unwinding.\n-    ///\n-    /// This path terminates in Resume. Returns the start of the path.\n-    /// See module comment for more details.\n-    crate fn diverge_cleanup(&mut self) -> BasicBlock {\n-        self.diverge_cleanup_gen(false)\n-    }\n-\n-    fn resume_block(&mut self) -> BasicBlock {\n-        if let Some(target) = self.cached_resume_block {\n-            target\n-        } else {\n-            let resumeblk = self.cfg.start_new_cleanup_block();\n-            self.cfg.terminate(\n-                resumeblk,\n-                SourceInfo::outermost(self.fn_span),\n-                TerminatorKind::Resume,\n-            );\n-            self.cached_resume_block = Some(resumeblk);\n-            resumeblk\n+    /// Returns the [DropIdx] for the innermost drop if the function unwound at\n+    /// this point. The `DropIdx` will be created if it doesn't already exist.\n+    fn diverge_cleanup(&mut self) -> DropIdx {\n+        let is_generator = self.generator_kind.is_some();\n+        let (uncached_scope, mut cached_drop) = self\n+            .scopes\n+            .scopes\n+            .iter()\n+            .enumerate()\n+            .rev()\n+            .find_map(|(scope_idx, scope)| {\n+                scope.cached_unwind_block.map(|cached_block| (scope_idx + 1, cached_block))\n+            })\n+            .unwrap_or((0, ROOT_NODE));\n+\n+        for scope in &mut self.scopes.scopes[uncached_scope..] {\n+            for drop in &scope.drops {\n+                if is_generator || drop.kind == DropKind::Value {\n+                    cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);\n+                }\n+            }\n+            scope.cached_unwind_block = Some(cached_drop);\n         }\n+\n+        cached_drop\n     }\n \n-    fn diverge_cleanup_gen(&mut self, generator_drop: bool) -> BasicBlock {\n-        // Build up the drops in **reverse** order. The end result will\n-        // look like:\n-        //\n-        //    scopes[n] -> scopes[n-1] -> ... -> scopes[0]\n-        //\n-        // However, we build this in **reverse order**. That is, we\n-        // process scopes[0], then scopes[1], etc, pointing each one at\n-        // the result generates from the one before. Along the way, we\n-        // store caches. If everything is cached, we'll just walk right\n-        // to left reading the cached results but never created anything.\n-\n-        // Find the last cached block\n-        debug!(\"diverge_cleanup_gen(self.scopes = {:?})\", self.scopes);\n-        let cached_cleanup = self.scopes.iter_mut().enumerate().find_map(|(idx, ref scope)| {\n-            let cached_block = scope.cached_unwind.get(generator_drop)?;\n-            Some((cached_block, idx))\n-        });\n-        let (mut target, first_uncached) =\n-            cached_cleanup.unwrap_or_else(|| (self.resume_block(), self.scopes.len()));\n+    /// Prepares to create a path that performs all required cleanup for a\n+    /// terminator that can unwind at the given basic block.\n+    ///\n+    /// This path terminates in Resume. The path isn't created until after all\n+    /// of the non-unwind paths in this item have been lowered.\n+    crate fn diverge_from(&mut self, start: BasicBlock) {\n+        debug_assert!(\n+            matches!(\n+                self.cfg.block_data(start).terminator().kind,\n+                TerminatorKind::Assert { .. }\n+                | TerminatorKind::Call {..}\n+                | TerminatorKind::DropAndReplace { .. }\n+                | TerminatorKind::FalseUnwind { .. }\n+            ),\n+            \"diverge_from called on block with terminator that cannot unwind.\"\n+        );\n \n-        for scope in self.scopes.top_scopes(first_uncached) {\n-            target = build_diverge_scope(\n-                &mut self.cfg,\n-                scope.region_scope_span,\n-                scope,\n-                target,\n-                generator_drop,\n-                self.generator_kind,\n-            );\n+        let next_drop = self.diverge_cleanup();\n+        self.scopes.unwind_drops.add_entry(start, next_drop);\n+    }\n+\n+    /// Sets up a path that performs all required cleanup for dropping a\n+    /// generator, starting from the given block that ends in\n+    /// [TerminatorKind::Yield].\n+    ///\n+    /// This path terminates in GeneratorDrop.\n+    crate fn generator_drop_cleanup(&mut self, yield_block: BasicBlock) {\n+        debug_assert!(\n+            matches!(\n+                self.cfg.block_data(yield_block).terminator().kind,\n+                TerminatorKind::Yield { .. }\n+            ),\n+            \"generator_drop_cleanup called on block with non-yield terminator.\"\n+        );\n+        let (uncached_scope, mut cached_drop) = self\n+            .scopes\n+            .scopes\n+            .iter()\n+            .enumerate()\n+            .rev()\n+            .find_map(|(scope_idx, scope)| {\n+                scope.cached_generator_drop_block.map(|cached_block| (scope_idx + 1, cached_block))\n+            })\n+            .unwrap_or((0, ROOT_NODE));\n+\n+        for scope in &mut self.scopes.scopes[uncached_scope..] {\n+            for drop in &scope.drops {\n+                cached_drop = self.scopes.generator_drops.add_drop(*drop, cached_drop);\n+            }\n+            scope.cached_generator_drop_block = Some(cached_drop);\n         }\n \n-        target\n+        self.scopes.generator_drops.add_entry(yield_block, cached_drop);\n     }\n \n     /// Utility function for *non*-scope code to build their own drops\n@@ -1042,21 +1083,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup();\n+\n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::DropAndReplace {\n-                place,\n-                value,\n-                target: next_target,\n-                unwind: Some(diverge_target),\n-            },\n+            TerminatorKind::DropAndReplace { place, value, target: next_target, unwind: None },\n         );\n+        self.diverge_from(block);\n+\n         next_target.unit()\n     }\n \n-    /// Creates an Assert terminator and return the success block.\n+    /// Creates an `Assert` terminator and return the success block.\n     /// If the boolean condition operand is not the expected value,\n     /// a runtime panic will be caused with the given message.\n     crate fn assert(\n@@ -1068,51 +1106,41 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         span: Span,\n     ) -> BasicBlock {\n         let source_info = self.source_info(span);\n-\n         let success_block = self.cfg.start_new_block();\n-        let cleanup = self.diverge_cleanup();\n \n         self.cfg.terminate(\n             block,\n             source_info,\n-            TerminatorKind::Assert {\n-                cond,\n-                expected,\n-                msg,\n-                target: success_block,\n-                cleanup: Some(cleanup),\n-            },\n+            TerminatorKind::Assert { cond, expected, msg, target: success_block, cleanup: None },\n         );\n+        self.diverge_from(block);\n \n         success_block\n     }\n \n-    // `match` arm scopes\n-    // ==================\n     /// Unschedules any drops in the top scope.\n     ///\n     /// This is only needed for `match` arm scopes, because they have one\n     /// entrance per pattern, but only one exit.\n-    pub(crate) fn clear_top_scope(&mut self, region_scope: region::Scope) {\n+    crate fn clear_top_scope(&mut self, region_scope: region::Scope) {\n         let top_scope = self.scopes.scopes.last_mut().unwrap();\n \n         assert_eq!(top_scope.region_scope, region_scope);\n \n         top_scope.drops.clear();\n-        top_scope.invalidate_cache(false, self.generator_kind, true);\n+        top_scope.invalidate_cache();\n     }\n }\n \n-/// Builds drops for pop_scope and exit_scope.\n+/// Builds drops for `pop_scope` and `leave_top_scope`.\n fn build_scope_drops<'tcx>(\n     cfg: &mut CFG<'tcx>,\n-    generator_kind: Option<GeneratorKind>,\n+    unwind_drops: &mut DropTree,\n     scope: &Scope,\n     mut block: BasicBlock,\n-    last_unwind_to: BasicBlock,\n+    mut unwind_to: DropIdx,\n+    storage_dead_on_unwind: bool,\n     arg_count: usize,\n-    generator_drop: bool,\n-    is_cached_path: bool,\n ) -> BlockAnd<()> {\n     debug!(\"build_scope_drops({:?} -> {:?})\", block, scope);\n \n@@ -1135,37 +1163,43 @@ fn build_scope_drops<'tcx>(\n     // drops for the unwind path should have already been generated by\n     // `diverge_cleanup_gen`.\n \n-    for drop_idx in (0..scope.drops.len()).rev() {\n-        let drop_data = &scope.drops[drop_idx];\n-        let source_info = scope.source_info(drop_data.span);\n+    for drop_data in scope.drops.iter().rev() {\n+        let source_info = drop_data.source_info;\n         let local = drop_data.local;\n \n         match drop_data.kind {\n             DropKind::Value => {\n+                // `unwind_to` should drop the value that we're about to\n+                // schedule. If dropping this value panics, then we continue\n+                // with the *next* value on the unwind path.\n+                debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);\n+                debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);\n+                unwind_to = unwind_drops.drops[unwind_to].1;\n+\n                 // If the operand has been moved, and we are not on an unwind\n                 // path, then don't generate the drop. (We only take this into\n                 // account for non-unwind paths so as not to disturb the\n                 // caching mechanism.)\n-                if !is_cached_path && scope.moved_locals.iter().any(|&o| o == local) {\n+                if scope.moved_locals.iter().any(|&o| o == local) {\n                     continue;\n                 }\n \n-                let unwind_to = get_unwind_to(scope, generator_kind, drop_idx, generator_drop)\n-                    .unwrap_or(last_unwind_to);\n+                unwind_drops.add_entry(block, unwind_to);\n \n                 let next = cfg.start_new_block();\n                 cfg.terminate(\n                     block,\n                     source_info,\n-                    TerminatorKind::Drop {\n-                        place: local.into(),\n-                        target: next,\n-                        unwind: Some(unwind_to),\n-                    },\n+                    TerminatorKind::Drop { place: local.into(), target: next, unwind: None },\n                 );\n                 block = next;\n             }\n             DropKind::Storage => {\n+                if storage_dead_on_unwind {\n+                    debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);\n+                    debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);\n+                    unwind_to = unwind_drops.drops[unwind_to].1;\n+                }\n                 // Only temps and vars need their storage dead.\n                 assert!(local.index() > arg_count);\n                 cfg.push(block, Statement { source_info, kind: StatementKind::StorageDead(local) });\n@@ -1175,139 +1209,189 @@ fn build_scope_drops<'tcx>(\n     block.unit()\n }\n \n-fn get_unwind_to(\n-    scope: &Scope,\n-    generator_kind: Option<GeneratorKind>,\n-    unwind_from: usize,\n-    generator_drop: bool,\n-) -> Option<BasicBlock> {\n-    for drop_idx in (0..unwind_from).rev() {\n-        let drop_data = &scope.drops[drop_idx];\n-        match (generator_kind, &drop_data.kind) {\n-            (Some(_), DropKind::Storage) => {\n-                return Some(drop_data.cached_block.get(generator_drop).unwrap_or_else(|| {\n-                    span_bug!(drop_data.span, \"cached block not present for {:?}\", drop_data)\n-                }));\n-            }\n-            (None, DropKind::Value) => {\n-                return Some(drop_data.cached_block.get(generator_drop).unwrap_or_else(|| {\n-                    span_bug!(drop_data.span, \"cached block not present for {:?}\", drop_data)\n-                }));\n+impl<'a, 'tcx: 'a> Builder<'a, 'tcx> {\n+    /// Build a drop tree for a breakable scope.\n+    ///\n+    /// If `continue_block` is `Some`, then the tree is for `continue` inside a\n+    /// loop. Otherwise this is for `break` or `return`.\n+    fn build_exit_tree(\n+        &mut self,\n+        mut drops: DropTree,\n+        continue_block: Option<BasicBlock>,\n+    ) -> Option<BlockAnd<()>> {\n+        let mut blocks = IndexVec::from_elem(None, &drops.drops);\n+        blocks[ROOT_NODE] = continue_block;\n+\n+        drops.build_mir::<ExitScopes>(&mut self.cfg, &mut blocks);\n+\n+        // Link the exit drop tree to unwind drop tree.\n+        if drops.drops.iter().any(|(drop, _)| drop.kind == DropKind::Value) {\n+            let unwind_target = self.diverge_cleanup();\n+            let mut unwind_indices = IndexVec::from_elem_n(unwind_target, 1);\n+            for (drop_idx, drop_data) in drops.drops.iter_enumerated().skip(1) {\n+                match drop_data.0.kind {\n+                    DropKind::Storage => {\n+                        if self.generator_kind.is_some() {\n+                            let unwind_drop = self\n+                                .scopes\n+                                .unwind_drops\n+                                .add_drop(drop_data.0, unwind_indices[drop_data.1]);\n+                            unwind_indices.push(unwind_drop);\n+                        } else {\n+                            unwind_indices.push(unwind_indices[drop_data.1]);\n+                        }\n+                    }\n+                    DropKind::Value => {\n+                        let unwind_drop = self\n+                            .scopes\n+                            .unwind_drops\n+                            .add_drop(drop_data.0, unwind_indices[drop_data.1]);\n+                        self.scopes\n+                            .unwind_drops\n+                            .add_entry(blocks[drop_idx].unwrap(), unwind_indices[drop_data.1]);\n+                        unwind_indices.push(unwind_drop);\n+                    }\n+                }\n             }\n-            _ => (),\n         }\n+        blocks[ROOT_NODE].map(BasicBlock::unit)\n     }\n-    None\n-}\n \n-fn build_diverge_scope<'tcx>(\n-    cfg: &mut CFG<'tcx>,\n-    span: Span,\n-    scope: &mut Scope,\n-    mut target: BasicBlock,\n-    generator_drop: bool,\n-    generator_kind: Option<GeneratorKind>,\n-) -> BasicBlock {\n-    // Build up the drops in **reverse** order. The end result will\n-    // look like:\n-    //\n-    //    [drops[n]] -...-> [drops[0]] -> [target]\n-    //\n-    // The code in this function reads from right to left. At each\n-    // point, we check for cached blocks representing the\n-    // remainder. If everything is cached, we'll just walk right to\n-    // left reading the cached results but never create anything.\n-\n-    let source_scope = scope.source_scope;\n-    let source_info = |span| SourceInfo { span, scope: source_scope };\n-\n-    // We keep track of StorageDead statements to prepend to our current block\n-    // and store them here, in reverse order.\n-    let mut storage_deads = vec![];\n-\n-    let mut target_built_by_us = false;\n-\n-    // Build up the drops. Here we iterate the vector in\n-    // *forward* order, so that we generate drops[0] first (right to\n-    // left in diagram above).\n-    debug!(\"build_diverge_scope({:?})\", scope.drops);\n-    for (j, drop_data) in scope.drops.iter_mut().enumerate() {\n-        debug!(\"build_diverge_scope drop_data[{}]: {:?}\", j, drop_data);\n-        // Only full value drops are emitted in the diverging path,\n-        // not StorageDead, except in the case of generators.\n+    /// Build the unwind and generator drop trees.\n+    crate fn build_drop_trees(&mut self, should_abort: bool) {\n+        if self.generator_kind.is_some() {\n+            self.build_generator_drop_trees(should_abort);\n+        } else {\n+            Self::build_unwind_tree(\n+                &mut self.cfg,\n+                &mut self.scopes.unwind_drops,\n+                self.fn_span,\n+                should_abort,\n+                &mut None,\n+            );\n+        }\n+    }\n+\n+    fn build_generator_drop_trees(&mut self, should_abort: bool) {\n+        // Build the drop tree for dropping the generator while it's suspended.\n+        let drops = &mut self.scopes.generator_drops;\n+        let cfg = &mut self.cfg;\n+        let fn_span = self.fn_span;\n+        let mut blocks = IndexVec::from_elem(None, &drops.drops);\n+        drops.build_mir::<GeneratorDrop>(cfg, &mut blocks);\n+        if let Some(root_block) = blocks[ROOT_NODE] {\n+            cfg.terminate(\n+                root_block,\n+                SourceInfo::outermost(fn_span),\n+                TerminatorKind::GeneratorDrop,\n+            );\n+        }\n+\n+        // Build the drop tree for unwinding in the normal control flow paths.\n+        let resume_block = &mut None;\n+        let unwind_drops = &mut self.scopes.unwind_drops;\n+        Self::build_unwind_tree(cfg, unwind_drops, fn_span, should_abort, resume_block);\n+\n+        // Build the drop tree for unwinding when dropping a suspended\n+        // generator.\n         //\n-        // Note: This may not actually be what we desire (are we\n-        // \"freeing\" stack storage as we unwind, or merely observing a\n-        // frozen stack)? In particular, the intent may have been to\n-        // match the behavior of clang, but on inspection eddyb says\n-        // this is not what clang does.\n-        match drop_data.kind {\n-            DropKind::Storage if generator_kind.is_some() => {\n-                storage_deads.push(Statement {\n-                    source_info: source_info(drop_data.span),\n-                    kind: StatementKind::StorageDead(drop_data.local),\n-                });\n-                if !target_built_by_us {\n-                    // We cannot add statements to an existing block, so we create a new\n-                    // block for our StorageDead statements.\n-                    let block = cfg.start_new_cleanup_block();\n-                    let source_info = SourceInfo { span: DUMMY_SP, scope: source_scope };\n-                    cfg.goto(block, source_info, target);\n-                    target = block;\n-                    target_built_by_us = true;\n-                }\n-                *drop_data.cached_block.ref_mut(generator_drop) = Some(target);\n+        // This is a different tree to the standard unwind paths here to\n+        // prevent drop elaboration from creating drop flags that would have\n+        // to be captured by the generator. I'm not sure how important this\n+        // optimization is, but it is here.\n+        for (drop_idx, drop_data) in drops.drops.iter_enumerated() {\n+            if let DropKind::Value = drop_data.0.kind {\n+                debug_assert!(drop_data.1 < drops.drops.next_index());\n+                drops.entry_points.push((drop_data.1, blocks[drop_idx].unwrap()));\n             }\n-            DropKind::Storage => {}\n-            DropKind::Value => {\n-                let cached_block = drop_data.cached_block.ref_mut(generator_drop);\n-                target = if let Some(cached_block) = *cached_block {\n-                    storage_deads.clear();\n-                    target_built_by_us = false;\n-                    cached_block\n-                } else {\n-                    push_storage_deads(cfg, target, &mut storage_deads);\n-                    let block = cfg.start_new_cleanup_block();\n-                    cfg.terminate(\n-                        block,\n-                        source_info(drop_data.span),\n-                        TerminatorKind::Drop {\n-                            place: drop_data.local.into(),\n-                            target,\n-                            unwind: None,\n-                        },\n-                    );\n-                    *cached_block = Some(block);\n-                    target_built_by_us = true;\n-                    block\n-                };\n-            }\n-        };\n+        }\n+        Self::build_unwind_tree(cfg, drops, fn_span, should_abort, resume_block);\n     }\n-    push_storage_deads(cfg, target, &mut storage_deads);\n-    *scope.cached_unwind.ref_mut(generator_drop) = Some(target);\n \n-    assert!(storage_deads.is_empty());\n-    debug!(\"build_diverge_scope({:?}, {:?}) = {:?}\", scope, span, target);\n+    fn build_unwind_tree(\n+        cfg: &mut CFG<'tcx>,\n+        drops: &mut DropTree,\n+        fn_span: Span,\n+        should_abort: bool,\n+        resume_block: &mut Option<BasicBlock>,\n+    ) {\n+        let mut blocks = IndexVec::from_elem(None, &drops.drops);\n+        blocks[ROOT_NODE] = *resume_block;\n+        drops.build_mir::<Unwind>(cfg, &mut blocks);\n+        if let (None, Some(resume)) = (*resume_block, blocks[ROOT_NODE]) {\n+            // `TerminatorKind::Abort` is used for `#[unwind(aborts)]`\n+            // functions.\n+            let terminator =\n+                if should_abort { TerminatorKind::Abort } else { TerminatorKind::Resume };\n+\n+            cfg.terminate(resume, SourceInfo::outermost(fn_span), terminator);\n+\n+            *resume_block = blocks[ROOT_NODE];\n+        }\n+    }\n+}\n \n-    target\n+// DropTreeBuilder implementations.\n+\n+struct ExitScopes;\n+\n+impl<'tcx> DropTreeBuilder<'tcx> for ExitScopes {\n+    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {\n+        cfg.start_new_block()\n+    }\n+    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n+        cfg.block_data_mut(from).terminator_mut().kind = TerminatorKind::Goto { target: to };\n+    }\n }\n \n-fn push_storage_deads<'tcx>(\n-    cfg: &mut CFG<'tcx>,\n-    target: BasicBlock,\n-    storage_deads: &mut Vec<Statement<'tcx>>,\n-) {\n-    if storage_deads.is_empty() {\n-        return;\n+struct GeneratorDrop;\n+\n+impl<'tcx> DropTreeBuilder<'tcx> for GeneratorDrop {\n+    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {\n+        cfg.start_new_block()\n+    }\n+    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n+        let term = cfg.block_data_mut(from).terminator_mut();\n+        if let TerminatorKind::Yield { ref mut drop, .. } = term.kind {\n+            *drop = Some(to);\n+        } else {\n+            span_bug!(\n+                term.source_info.span,\n+                \"cannot enter generator drop tree from {:?}\",\n+                term.kind\n+            )\n+        }\n+    }\n+}\n+\n+struct Unwind;\n+\n+impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n+    fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {\n+        cfg.start_new_cleanup_block()\n+    }\n+    fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n+        let term = &mut cfg.block_data_mut(from).terminator_mut();\n+        match &mut term.kind {\n+            TerminatorKind::Drop { unwind, .. }\n+            | TerminatorKind::DropAndReplace { unwind, .. }\n+            | TerminatorKind::FalseUnwind { unwind, .. }\n+            | TerminatorKind::Call { cleanup: unwind, .. }\n+            | TerminatorKind::Assert { cleanup: unwind, .. } => {\n+                *unwind = Some(to);\n+            }\n+            TerminatorKind::Goto { .. }\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Return\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::Yield { .. }\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::FalseEdge { .. }\n+            | TerminatorKind::InlineAsm {.. } => {\n+                span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n+            }\n+        }\n     }\n-    let statements = &mut cfg.block_data_mut(target).statements;\n-    storage_deads.reverse();\n-    debug!(\n-        \"push_storage_deads({:?}), storage_deads={:?}, statements={:?}\",\n-        target, storage_deads, statements\n-    );\n-    storage_deads.append(statements);\n-    mem::swap(statements, storage_deads);\n-    assert!(storage_deads.is_empty());\n }"}, {"sha": "99a791464ab89c3d475a57ce1d6031aa94bd1e61", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -23,13 +23,13 @@ pub fn droppy() {\n // FIXME(eddyb) the `void @` forces a match on the instruction, instead of the\n // comment, that's `; call core::intrinsics::drop_in_place::<drop::SomeUniqueName>`\n // for the `v0` mangling, should switch to matching on that once `legacy` is gone.\n+// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK-NOT: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n-// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n // CHECK-NOT: {{(call|invoke) void @.*}}drop_in_place{{.*}}SomeUniqueName\n // The next line checks for the } that ends the function definition"}, {"sha": "7e0ca3dea4b71aafe350344b65ab54fe88890b60", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -41,44 +41,44 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n         _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb2, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n+    bb1: {\n+        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n     bb2: {\n-        drop(_6) -> [return: bb6, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n+        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb3 (cleanup): {\n-        drop(_4) -> bb1;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb3: {\n+        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb4 (cleanup): {\n-        drop(_5) -> bb3;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb4: {\n+        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n+        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n+        return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n \n     bb5 (cleanup): {\n-        drop(_6) -> bb4;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n-    bb6: {\n-        StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-        _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n-        drop(_5) -> [return: bb7, unwind: bb3]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb6 (cleanup): {\n+        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb7: {\n-        StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb8, unwind: bb1]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb7 (cleanup): {\n+        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb8: {\n-        StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n-        StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n-        return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n }"}, {"sha": "cfbd3a58637c0edd08c958bf59739c1b9841d761", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -14,53 +14,53 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        (*_2) = S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n-    bb4: {\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n+    bb3: {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n     bb6 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n-    bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n }"}, {"sha": "bbce9c288efa933d59d66c7ec333435ca7a844be", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -33,21 +33,21 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n-      }\n-  \n-      bb2: {\n+      bb1: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+      }\n - }\n - \n - alloc0 (static: Y, size: 4, align: 4) {"}, {"sha": "a392334e0c955062069b61be16a0232868b03630", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -35,21 +35,21 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n-      }\n-  \n-      bb2: {\n+      bb1: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+      }\n   }\n - \n - alloc2 (extern static: X)"}, {"sha": "1412162d78bff5f31bc47095e16bfb6f74b15eb8", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -23,18 +23,18 @@\n           _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          drop(_3) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n-      }\n-  \n-      bb2: {\n+      bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           _0 = const ();                   // scope 0 at $DIR/boxes.rs:11:11: 13:2\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n+      }\n   }\n   "}, {"sha": "9a5a309fd272b72d59572cd60cc66dbf07b0684a", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -109,7 +109,7 @@\n -         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n       }\n   \n +     bb2: {"}, {"sha": "05ef6721e65357d198f4631c37ba7888482bc565", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -89,7 +89,7 @@\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:27: 27:28\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:6: 28:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:1: 29:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:14: 27:28\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:29:2: 29:2\n       }\n   \n -     bb3: {"}, {"sha": "8e8ab08823578d4bb3516935007994a9b37fa253", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -34,60 +34,56 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n \n     bb0: {\n         _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0_u32: bb7, 3_u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    bb1: {\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n-    bb2 (cleanup): {\n+    bb2: {\n         nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n         goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb4: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb5: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    bb5 (cleanup): {\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb6: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb7: {\n-        goto -> bb10;                    // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb8 (cleanup): {\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb8: {\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {\n-        goto -> bb5;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-    }\n-\n-    bb10: {\n         goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n         StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb12: {\n+    bb11: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n }"}, {"sha": "42b95b5c68c4854715eb3abca9df69052339acd3", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -26,86 +26,86 @@ yields ()\n         (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n         StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n         StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n         StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3 (cleanup): {\n+    bb2: {\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb5, unwind: bb3]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n     }\n \n     bb5: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb6, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb6: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb7: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n-                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n     bb8 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n     bb9 (cleanup): {\n         StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n         StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n-    bb10: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+    bb10 (cleanup): {\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb11 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n-    bb12: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n+    bb12 (cleanup): {\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n }"}, {"sha": "8d1da7f1b9651c5224281abf544534966c29f886", "filename": "src/test/mir-opt/graphviz.main.mir_map.0.dot.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fgraphviz.main.mir_map.0.dot.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fgraphviz.main.mir_map.0.dot.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.main.mir_map.0.dot.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -3,8 +3,5 @@ digraph Mir_0_3 {\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n-    bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n-    bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n-    bb0__0_3 -> bb2__0_3 [label=\"\"];\n+    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">return</td></tr></table>>];\n }"}, {"sha": "fac2f6bd1ec1504c4295c0ecf05e4c514bb197df", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // ty::Const\n@@ -27,34 +27,33 @@\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n +                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n-      bb2: {\n--         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--     }\n-- \n--     bb3: {\n+-     bb2: {\n++     bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  \n+-     bb3 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n -     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4535cf290a1da65fbb43958c6fc78941dae80038", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // ty::Const\n@@ -27,34 +27,33 @@\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n +                                          // + span: $SRC_DIR/alloc/src/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-+         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-+         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n-+         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n-      bb2: {\n--         _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--     }\n-- \n--     bb3: {\n+-     bb2: {\n++     bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  \n+-     bb3 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n -     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = alloc::alloc::box_free::<Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "800754542d93675dc9566f32711037b8d57b0c6f", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -9,40 +9,40 @@\n   \n       bb0: {\n +         Coverage::Counter(0) for /the/src/instrument_coverage.rs:10:11 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n-          falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n+          falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n       bb1: {\n           StorageLive(_2);                 // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-          _2 = bar() -> [return: bb3, unwind: bb2]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n+          _2 = bar() -> [return: bb2, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n                                            // mir::Constant\n                                            // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at /the/src/instrument_coverage.rs:10:1: 16:2\n+      bb2: {\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n+          switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb3: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-          switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n+          falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb4: {\n-          falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n-      }\n-  \n-      bb5: {\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n           goto -> bb0;                     // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n-      bb6: {\n+      bb5: {\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at /the/src/instrument_coverage.rs:10:1: 16:2\n+      }\n   }\n   "}, {"sha": "0929ba9d8a266a4be62afdf73e95af727298bcf4", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -15,43 +15,43 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n         _1 = const false;                // scope 0 at $DIR/issue-38669.rs:5:28: 5:33\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n-        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+    bb1: {\n+        falseUnwind -> [real: bb2, cleanup: bb6]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb2: {\n-        falseUnwind -> [real: bb3, cleanup: bb1]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n-    }\n-\n-    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         FakeRead(ForMatchedPlace, _4);   // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(_4) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        switchInt(_4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb4: {\n-        falseEdge -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+    bb3: {\n+        falseEdge -> [real: bb5, imaginary: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb5: {\n+    bb4: {\n         _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         _1 = const true;                 // scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n         _2 = const ();                   // scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n-        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb6: {\n+    bb5: {\n         _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n     }\n+\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n+    }\n }"}, {"sha": "7113c42b9c77f97088ae3ab70be33c53fdb48e96", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -20,56 +20,51 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _3 = S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:23: 8:25\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n-        _1 = S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:15: 8:20\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n     }\n \n+    bb2: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n+    }\n+\n     bb3 (cleanup): {\n-        goto -> bb9;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n     }\n \n     bb5 (cleanup): {\n-        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        goto -> bb8;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n-    bb6: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        drop(_2) -> bb6;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb8 (cleanup): {\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        goto -> bb7;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb9 (cleanup): {\n-        switchInt(_5) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n }"}, {"sha": "c4e852ca3212a5d9eddf51c4476cfcfedf6335e3", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -25,17 +25,13 @@ fn test() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_4);                 // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n         StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n@@ -44,63 +40,62 @@ fn test() -> () {\n         goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb3 (cleanup): {\n-        goto -> bb15;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb2: {\n+        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n-    bb4 (cleanup): {\n-        goto -> bb3;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb3: {\n+        StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n+        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb5 (cleanup): {\n-        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+    bb4: {\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb5: {\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n-    bb6: {\n+    bb6 (cleanup): {\n         goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n     bb7 (cleanup): {\n-        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n     }\n \n-    bb8: {\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n-        drop(_2) -> [return: bb9, unwind: bb3]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb8 (cleanup): {\n+        goto -> bb9;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb9: {\n-        StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb9 (cleanup): {\n+        goto -> bb14;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb10: {\n-        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n     }\n \n     bb11 (cleanup): {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb7;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb12: {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb13 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb14 (cleanup): {\n-        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n-    bb15 (cleanup): {\n-        switchInt(_6) -> [false: bb1, otherwise: bb14]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "db9caf843145bba9aaba0c9fe8ed59e66e2e5220", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,15 +6,15 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n         return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n }"}, {"sha": "db9caf843145bba9aaba0c9fe8ed59e66e2e5220", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,15 +6,15 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n         return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n }"}, {"sha": "d7b4e073cea4c5b209f2afe1527654bf483ebf79", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -26,30 +26,22 @@ fn main() -> () {\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n+    bb1: {\n+        switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb2: {\n-        switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-    }\n-\n-    bb3 (cleanup): {\n-        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-    }\n-\n-    bb4: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n-    bb5: {\n+    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n@@ -58,39 +50,35 @@ fn main() -> () {\n         goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb6: {\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-    }\n-\n-    bb7 (cleanup): {\n-        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    bb4: {\n+        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n-    bb8: {\n+    bb5: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n-    bb9: {\n+    bb6: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb10: {\n+    bb7: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb11: {\n-        goto -> bb21;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb8: {\n+        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb12: {\n+    bb9: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n@@ -99,59 +87,66 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n+    bb10 (cleanup): {\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    }\n+\n+    bb11 (cleanup): {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    }\n+\n+    bb12 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n+    }\n+\n     bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb6;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb16 (cleanup): {\n-        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-    }\n-\n-    bb17 (cleanup): {\n-        goto -> bb16;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18: {\n-        drop(_1) -> [return: bb15, unwind: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb17: {\n+        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19 (cleanup): {\n-        drop(_1) -> bb16;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb20: {\n+    bb19: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0_isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb21: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb20]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb20: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb22 (cleanup): {\n+    bb21 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0_isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb23 (cleanup): {\n-        switchInt(_7) -> [false: bb16, otherwise: bb22]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb22 (cleanup): {\n+        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "79f5495c78828c0f359e4a1b16d0f04000b3fc57", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -17,78 +17,66 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb2: {\n-        goto -> bb14;                    // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n-    }\n-\n-    bb3: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        switchInt(_3) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n-    }\n-\n-    bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb5: {\n-        falseEdge -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+    bb3: {\n+        falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb6: {\n+    bb4: {\n         _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb10;                    // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb7: {\n+    bb5: {\n         _2 = const 4_i32;                // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n-        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n-    }\n-\n-    bb8: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n-        goto -> bb9;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb9: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n-        goto -> bb2;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n-    }\n-\n-    bb10: {\n+    bb6: {\n         unreachable;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb11: {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+    bb7: {\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb12: {\n+    bb8: {\n         FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n-        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        _5 = std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:13:9: 13:13\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb13: {\n+    bb9: {\n         StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n         StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n         _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n         StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n         goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n-    bb14: {\n+    bb10: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n         return;                          // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n     }\n+\n+    bb11 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+    }\n }"}, {"sha": "62bf97a772ead783b641339a0236865277ddb875", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -30,89 +30,89 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0_isize: bb4, 1_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n-    bb4: {\n+    bb2: {\n         StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb12, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb5: {\n+    bb3: {\n         unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n-    bb6: {\n+    bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb8: {\n+    bb5: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb9: {\n+    bb6: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb10: {\n+    bb7: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    }\n+\n+    bb8: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    bb9: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb12: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+    bb10: {\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+\n+    bb11 (cleanup): {\n         drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb13: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    bb12 (cleanup): {\n+        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb13 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "e19cd745279854eba1da447ee9fb628d9c82a715", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.32bit.mir", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -12,14 +12,6 @@ fn bar(_1: [(Never, u32); 1]) -> u32 {\n         _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n         _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n-        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n-    }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n-    }\n-\n-    bb2: {\n         return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n     }\n }"}, {"sha": "e19cd745279854eba1da447ee9fb628d9c82a715", "filename": "src/test/mir-opt/issue_72181.bar.mir_map.0.64bit.mir", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.bar.mir_map.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -12,14 +12,6 @@ fn bar(_1: [(Never, u32); 1]) -> u32 {\n         _2 = (_1[0 of 1].1: u32);        // scope 0 at $DIR/issue-72181.rs:19:13: 19:14\n         _0 = _2;                         // scope 1 at $DIR/issue-72181.rs:19:46: 19:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:19:48: 19:49\n-        goto -> bb2;                     // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n-    }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:19:1: 19:49\n-    }\n-\n-    bb2: {\n         return;                          // scope 0 at $DIR/issue-72181.rs:19:49: 19:49\n     }\n }"}, {"sha": "c9a2b9c0d83a376064d817dc23c6e50d8663f2a2", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -12,20 +12,16 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n-        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n     }\n \n-    bb3: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n     }\n }"}, {"sha": "c9a2b9c0d83a376064d817dc23c6e50d8663f2a2", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.64bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -12,20 +12,16 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n-    }\n-\n-    bb2: {\n+    bb1: {\n         _0 = (_1[_2].1: u32);            // scope 0 at $DIR/issue-72181.rs:16:40: 16:47\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181.rs:16:48: 16:49\n-        goto -> bb3;                     // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n     }\n \n-    bb3: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:16:49: 16:49\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:16:1: 16:49\n     }\n }"}, {"sha": "cf66a501e35eef4a2d0d05de72da1ec5f9da5bf4", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -22,17 +22,13 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n@@ -48,19 +44,19 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n-    bb3: {\n+    bb2: {\n         _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n         StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n         StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n-        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n     }\n \n-    bb4: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    bb3 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n     }\n }"}, {"sha": "cf66a501e35eef4a2d0d05de72da1ec5f9da5bf4", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.64bit.mir", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -22,17 +22,13 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-        _1 = std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n+        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-72181.rs:24:34: 24:35\n         StorageLive(_2);                 // scope 1 at $DIR/issue-72181.rs:26:9: 26:10\n         StorageLive(_3);                 // scope 1 at $DIR/issue-72181.rs:26:14: 26:27\n@@ -48,19 +44,19 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb2, unwind: bb3]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n-    bb3: {\n+    bb2: {\n         _5 = (_2[_6].0: u64);            // scope 4 at $DIR/issue-72181.rs:27:22: 27:28\n         StorageDead(_6);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         StorageDead(_5);                 // scope 2 at $DIR/issue-72181.rs:27:30: 27:31\n         _0 = const ();                   // scope 0 at $DIR/issue-72181.rs:23:11: 28:2\n         StorageDead(_2);                 // scope 1 at $DIR/issue-72181.rs:28:1: 28:2\n-        goto -> bb4;                     // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n     }\n \n-    bb4: {\n-        return;                          // scope 0 at $DIR/issue-72181.rs:28:2: 28:2\n+    bb3 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181.rs:23:1: 28:2\n     }\n }"}, {"sha": "7571d7bb94f92f30d8f9f898306178ce674b0e37", "filename": "src/test/mir-opt/issue_72181_1.f.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.f.mir_map.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -13,25 +13,17 @@ fn f(_1: Void) -> ! {\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:11: 11:12\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181-1.rs:10:1: 12:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:11:5: 11:15\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue-72181-1.rs:11:14: 11:15\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:10:20: 12:2\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:12:1: 12:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n-    }\n-\n-    bb5: {\n         return;                          // scope 0 at $DIR/issue-72181-1.rs:12:2: 12:2\n     }\n }"}, {"sha": "1fd91c2056bf854660cf3145a92292aa2e280cc4", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -21,41 +21,37 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n-        _2 = transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+        _2 = transmute::<(), Void>(move _3) -> [return: bb1, unwind: bb4]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-72181-1.rs:15:1: 21:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:43: 17:44\n         FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/issue-72181-1.rs:16:12: 16:16\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n-        f(move _5) -> bb1;               // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+        f(move _5) -> bb4;               // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n                                          // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:8: 20:9\n         StorageDead(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:9: 20:10\n         StorageDead(_2);                 // scope 0 at $DIR/issue-72181-1.rs:21:1: 21:2\n         unreachable;                     // scope 0 at $DIR/issue-72181-1.rs:15:11: 21:2\n     }\n \n-    bb4: {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    bb3: {\n+        return;                          // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n     }\n \n-    bb5: {\n-        return;                          // scope 0 at $DIR/issue-72181-1.rs:21:2: 21:2\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-72181-1.rs:15:1: 21:2\n     }\n }"}, {"sha": "9039735f6ba382b86265e6825c686c574e181487", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -106,7 +106,7 @@\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   \n       bb2: {"}, {"sha": "9039735f6ba382b86265e6825c686c574e181487", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -106,7 +106,7 @@\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n       }\n   \n       bb2: {"}, {"sha": "05def56e65eb5bf078e358b81c2ab19c34b778a7", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -17,41 +17,41 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(_2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+    bb1: {\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n-    }\n-\n-    bb3: {\n         _1 = const ();                   // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb4: {\n+    bb3: {\n         _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n     }\n \n-    bb5: {\n-        falseUnwind -> [real: bb6, cleanup: bb1]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    bb4: {\n+        falseUnwind -> [real: bb5, cleanup: bb6]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n         FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:15:9: 15:17\n+        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n+    }\n+\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     }\n }"}, {"sha": "4e7cd77035eec70d7d0ec90be3e19d791e07eaa7", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 112, "deletions": 121, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -32,54 +32,50 @@\n   \n       bb0: {\n -         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n--         switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n-+         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n+-         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n++         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n+      bb1: {\n+-         falseEdge -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n++         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n       }\n   \n       bb2: {\n--         falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n-+         switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n+-         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n++         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n       }\n   \n       bb3: {\n--         switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n-+         switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n-      }\n-  \n-      bb4: {\n--         falseEdge -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n+-         falseEdge -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n -     }\n - \n--     bb5: {\n--         switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+-     bb4: {\n+-         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n -     }\n - \n--     bb6: {\n--         falseEdge -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n+-     bb5: {\n+-         falseEdge -> [real: bb22, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n -     }\n - \n--     bb7: {\n+-     bb6: {\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n           StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n           _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n--         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb8: {\n-+     bb5: {\n+-     bb7: {\n++     bb4: {\n           _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-+         drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         drop(_7) -> [return: bb20, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n++         drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n       }\n   \n--     bb9: {\n-+     bb6: {\n+-     bb8: {\n++     bb5: {\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n@@ -90,52 +86,33 @@\n           StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n -         FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(_10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(_10) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb10: {\n--         falseEdge -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-     bb9: {\n+-         falseEdge -> [real: bb11, imaginary: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n -     }\n - \n--     bb11: {\n-+     bb7: {\n+-     bb10: {\n++     bb6: {\n           _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb12: {\n-+     bb8: {\n+-     bb11: {\n++     bb7: {\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n-+         goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n-      }\n-  \n--     bb13: {\n-+     bb9: {\n-          return;                          // scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n-      }\n-  \n--     bb14 (cleanup): {\n--         drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     bb10 (cleanup): {\n-+         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-      }\n-  \n--     bb15: {\n--         drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     bb11: {\n-+         drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n       }\n   \n--     bb16: {\n-+     bb12: {\n+-     bb12: {\n++     bb8: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -145,21 +122,21 @@\n           _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n           StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n           _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n--         goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb17: {\n-+     bb13: {\n+-     bb13: {\n++     bb9: {\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         falseEdge -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         falseEdge -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb18: {\n-+     bb14: {\n+-     bb14: {\n++     bb10: {\n           StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n@@ -170,35 +147,33 @@\n           StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n           _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n -         FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(_13) -> [false: bb16, otherwise: bb15]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(_13) -> [false: bb11, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb19: {\n--         falseEdge -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-     bb15: {\n+-         falseEdge -> [real: bb17, imaginary: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n -     }\n - \n--     bb20: {\n-+     bb15: {\n+-     bb16: {\n++     bb11: {\n           _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n--         switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         switchInt(move _12) -> [false: bb19, otherwise: bb18]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb21: {\n-+     bb16: {\n+-     bb17: {\n++     bb12: {\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n-          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n-+         goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+-         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n       }\n   \n--     bb22: {\n-+     bb17: {\n+-     bb18: {\n++     bb13: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n -         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n@@ -208,82 +183,98 @@\n           _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n           StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n           _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n--         goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb23: {\n-+     bb18: {\n+-     bb19: {\n++     bb14: {\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         falseEdge -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-+         goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-         falseEdge -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n       }\n   \n--     bb24: {\n-+     bb19: {\n+-     bb20: {\n++     bb15: {\n           StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb25: {\n-+     bb20: {\n+-     bb21: {\n++     bb16: {\n           _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n-+         drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+-         drop(_16) -> [return: bb23, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n++         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }\n   \n--     bb26: {\n-+     bb21: {\n+-     bb22: {\n++     bb17: {\n           StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n           StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n           _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n--         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb27: {\n-+     bb22: {\n+-     bb23: {\n++     bb18: {\n           StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n           StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n       }\n   \n--     bb28: {\n--         drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     bb23: {\n-+         goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+-     bb24: {\n+-         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb19: {\n++         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb25: {\n++     bb20: {\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb26: {\n++     bb21: {\n+          return;                          // scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n+      }\n+  \n+-     bb27 (cleanup): {\n+-         drop(_2) -> bb28;                // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb22 (cleanup): {\n++         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb28 (cleanup): {\n++     bb23 (cleanup): {\n+          resume;                          // scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n +     }\n + \n-+     bb24 (cleanup): {\n-+         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb24: {\n++         goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     }\n + \n +     bb25 (cleanup): {\n-+         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     }\n + \n +     bb26: {\n-+         goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n +     }\n + \n +     bb27 (cleanup): {\n-+         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     }\n-+ \n-+     bb28 (cleanup): {\n-+         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n-+     }\n-+ \n-+     bb29: {\n-+         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n       }\n   }\n   "}, {"sha": "2332e5beafe0f38d71a8bbd0d7177e5cd45d8784", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -29,31 +29,27 @@ fn full_tested_match() -> () {\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    bb1: {\n+        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb2: {\n-        _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        falseEdge -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        falseEdge -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n     }\n \n     bb4: {\n-        falseEdge -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n-    }\n-\n-    bb5: {\n         unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n@@ -65,17 +61,17 @@ fn full_tested_match() -> () {\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-        _7 = guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:20: 16:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    bb6: {\n+        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n@@ -87,30 +83,34 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb4;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb10: {\n+    bb9: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n+\n+    bb11 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    }\n }"}, {"sha": "c7b1cce061bc6d797d5ea3bc6e85e7245e1e2840", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -28,52 +28,48 @@ fn full_tested_match2() -> () {\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+    bb1: {\n+        falseEdge -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-    }\n-\n-    bb4: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _10 = _9;                        // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb5: {\n+    bb4: {\n         unreachable;                     // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-        _7 = guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        _7 = guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:27:20: 27:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    bb6: {\n+        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n@@ -85,24 +81,28 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        falseEdge -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        falseEdge -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb10: {\n+    bb9: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n-        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n+\n+    bb11 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n+    }\n }"}, {"sha": "9b8ce2c1ed0473f894a449f996835b9515157ff0", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -39,49 +39,45 @@ fn main() -> () {\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+    bb1: {\n+        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+        falseEdge -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-    }\n-\n-    bb4: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb5: {\n-        falseEdge -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+    bb4: {\n+        falseEdge -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-        _8 = guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        _8 = guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:21: 36:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb7: {\n-        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    bb6: {\n+        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n@@ -90,42 +86,42 @@ fn main() -> () {\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        falseEdge -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb10: {\n+    bb9: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb11: {\n+    bb10: {\n         StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _12 = guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        _12 = guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:38:20: 38:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb12: {\n+    bb11: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb13: {\n+    bb12: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n@@ -134,19 +130,23 @@ fn main() -> () {\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb14: {\n+    bb13: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        falseEdge -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        falseEdge -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb15: {\n+    bb14: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n         return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n+\n+    bb15 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n+    }\n }"}, {"sha": "d8538a5461ed6fbca9489b0c928dc74633dba123", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n-| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n-| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n+| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n+| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#3r live at {bb2[0]}\n-| '_#4r live at {bb2[1..=3]}\n-| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n+| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#3r live at {bb1[0]}\n+| '_#4r live at {bb1[1..=3]}\n+| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -52,66 +52,66 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb1: {\n+        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb2: {\n-        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        falseEdge -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb4: {\n+        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n+    bb5: {\n+        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    }\n+\n     bb6: {\n-        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n-        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n \n-    bb8: {\n-        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+    bb8 (cleanup): {\n+        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n }"}, {"sha": "15aba40f169cd61b4ecd89ac43cef29ff1a7fffe", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n-| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n-| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n+| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n+| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#3r live at {bb2[0]}\n-| '_#4r live at {bb2[1..=3]}\n-| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n+| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n+| '_#3r live at {bb1[0]}\n+| '_#4r live at {bb1[1..=3]}\n+| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -52,66 +52,66 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb1: {\n+        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb2: {\n-        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        falseEdge -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb3: {\n-        falseEdge -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb4: {\n+        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n+    bb5: {\n+        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    }\n+\n     bb6: {\n-        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n-        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n-        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n-        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n \n-    bb8: {\n-        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+    bb8 (cleanup): {\n+        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n }"}, {"sha": "1e4b329830bd54084991ee747c1f96ac5d91430f", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -41,12 +41,12 @@ fn unwrap(_1: Option<T>) -> T {\n         _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n         StorageDead(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n-        _6 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n     }\n \n     bb4 (cleanup): {\n-        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        _7 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n         resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n     }\n }"}, {"sha": "bbb433dbe25c787203525dbe6561d0ff04946023", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -20,33 +20,33 @@ fn main() -> () {\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _2 = <str as ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = std::mem::drop::<String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n         StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         _0 = const ();                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n         return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n \n+    bb3 (cleanup): {\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+    }\n+\n     bb4 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n+        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n     }\n }"}, {"sha": "81f428d607177da336a13b8b12d19c04d08d286b", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -31,25 +31,25 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    }\n+\n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n         StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "81f428d607177da336a13b8b12d19c04d08d286b", "filename": "src/test/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -31,25 +31,25 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    }\n+\n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n         StorageDead(_6);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n         _0 = const ();                   // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n-        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "8c7d79262b242438cc898d7015ddbdbf3cf3ce62", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -70,29 +70,21 @@ fn main() -> () {\n         Retag(_7);                       // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _3 = Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        _3 = Test::foo(move _4, move _6) -> [return: bb1, unwind: bb7]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:25: 32:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         Retag(_3);                       // scope 1 at $DIR/retag.rs:32:17: 32:36\n         StorageDead(_6);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_4);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_7);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-        drop(_5) -> [return: bb4, unwind: bb1]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_5) -> bb1;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n-    bb4: {\n+    bb2: {\n         StorageDead(_5);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n         StorageLive(_8);                 // scope 2 at $DIR/retag.rs:33:13: 33:14\n         StorageLive(_9);                 // scope 2 at $DIR/retag.rs:33:19: 33:20\n@@ -138,10 +130,10 @@ fn main() -> () {\n         Retag(_18);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n         _17 = &(*_18);                   // scope 6 at $DIR/retag.rs:44:16: 44:18\n         Retag(_17);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _15 = move _16(move _17) -> bb5; // scope 6 at $DIR/retag.rs:44:14: 44:19\n+        _15 = move _16(move _17) -> bb3; // scope 6 at $DIR/retag.rs:44:14: 44:19\n     }\n \n-    bb5: {\n+    bb3: {\n         Retag(_15);                      // scope 6 at $DIR/retag.rs:44:14: 44:19\n         StorageDead(_17);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n         StorageDead(_16);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n@@ -166,25 +158,21 @@ fn main() -> () {\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _19 = Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        _19 = Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb6]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:13: 47:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n+    bb4: {\n         Retag(_19);                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageDead(_22);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_20);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_23);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-        drop(_21) -> [return: bb8, unwind: bb1]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_21) -> bb1;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb5, unwind: bb8]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n-    bb8: {\n+    bb5: {\n         StorageDead(_21);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageDead(_19);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageLive(_25);                // scope 7 at $DIR/retag.rs:50:9: 50:11\n@@ -200,4 +188,16 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/retag.rs:51:1: 51:2\n         return;                          // scope 0 at $DIR/retag.rs:51:2: 51:2\n     }\n+\n+    bb6 (cleanup): {\n+        drop(_21) -> bb8;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_5) -> bb8;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n+    }\n }"}, {"sha": "5bcb20ca72a3f021814c412afd03ce182ab44c08", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,32 +6,24 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+    bb1: {\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n-    }\n-\n-    bb3: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb3: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n-    }\n-\n-    bb5: {\n-        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb6: {\n+    bb4: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "5bcb20ca72a3f021814c412afd03ce182ab44c08", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,32 +6,24 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+    bb1: {\n+        falseEdge -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb2: {\n-        falseEdge -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n-    }\n-\n-    bb3: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb3: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n-    }\n-\n-    bb5: {\n-        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb6: {\n+    bb4: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "33245b65e8c42fba438f86608ae485eb9ecfcf0d", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -92,7 +92,7 @@\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   \n       bb4: {"}, {"sha": "eb2521c8ba08ec7cac792ce5d74b0697e20304cf", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -66,7 +66,7 @@\n -         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n -     }\n - \n -     bb4: {"}, {"sha": "62743057048fbf9d88bbc5e8ac61f572a41f1e18", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -13,40 +13,40 @@\n - \n -     bb1: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = bar() -> bb3;               // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = bar() -> bb2;               // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = bar() -> bb1;               // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb2 (cleanup): {\n--         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+-     bb2: {\n+-         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb1: {\n +         switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb3: {\n--         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb5;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb4: {\n--         goto -> bb6;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n--     }\n-- \n--     bb5: {\n +     bb2: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb6: {\n+-     bb5: {\n +     bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-     }\n+- \n+-     bb6 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   }\n   "}, {"sha": "9a6afc58c4e9ddc82d038a737ed739e5054e1329", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -9,78 +9,70 @@\n   \n       bb0: {\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb2: {\n--         goto -> bb13;                    // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n--     }\n-- \n--     bb3: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = bar() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb4 (cleanup): {\n-+     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+-     bb3: {\n++     bb2: {\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n--     bb5: {\n+-     bb4: {\n+-         falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb3: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n--     bb6: {\n--         falseEdge -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb5: {\n +     bb4: {\n-+         falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-      }\n-  \n--     bb7: {\n-+     bb5: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n--         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb8: {\n-+     bb6: {\n+-     bb6: {\n++     bb5: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n--     }\n-- \n--     bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n--         goto -> bb2;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n--     bb10: {\n+-     bb7: {\n -         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n -     }\n - \n--     bb11: {\n--         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb8: {\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n--     bb12: {\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb9: {\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n--     bb13: {\n+-     bb10: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n+  \n+-     bb11 (cleanup): {\n++     bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n+      }\n   }\n   "}, {"sha": "6fa14f1e0d840fae389aeb1771a34d1f25d45adf", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -88,7 +88,7 @@\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "f8ecf1437672395938796f52504836a294a9281a", "filename": "src/test/mir-opt/spanview_block.main.mir_map.0.html.mir", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fspanview_block.main.mir_map.0.html.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fspanview_block.main.mir_map.0.html.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_block.main.mir_map.0.html.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -61,7 +61,6 @@\n <body>\n <div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0: $DIR/spanview-block.rs:5:11: 5:13:\n     5:11-5:13: Assign: _0 = const ()\n-    5:13-5:13: Goto: goto -&gt; bb2\"><span class=\"annotation\">0\u298a</span>{}<span class=\"annotation\">\u29890</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"2: $DIR/spanview-block.rs:5:13: 5:13:\n-    5:13-5:13: Return: return\"><span class=\"annotation\">2\u298a</span>\u2038<span class=\"annotation\">\u29892</span></span></span></span></div>\n+    5:13-5:13: Return: return\"><span class=\"annotation\">0\u298a</span>{}<span class=\"annotation\">\u29890</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "8a34b8b5daecb3406a80017bc6c974a27e84c59d", "filename": "src/test/mir-opt/spanview_statement.main.mir_map.0.html.mir", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.mir_map.0.html.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.mir_map.0.html.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_statement.main.mir_map.0.html.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -60,8 +60,7 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0[0]: $DIR/spanview-statement.rs:5:11: 5:13:\n-    5:11-5:13: Assign: _0 = const ()\"><span class=\"annotation\">0[0]\u298a</span>{}<span class=\"annotation\">\u29890[0]</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"0:Goto: $DIR/spanview-statement.rs:5:13: 5:13:\n-    5:13-5:13: Goto: goto -&gt; bb2\"><span class=\"annotation\">0:Goto\u298a</span>\u2038<span class=\"annotation\">\u29890:Goto</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:Return: $DIR/spanview-statement.rs:5:13: 5:13:\n-    5:13-5:13: Return: return\"><span class=\"annotation\">2:Return\u298a</span>\u2038<span class=\"annotation\">\u29892:Return</span></span></span></span></div>\n+    5:11-5:13: Assign: _0 = const ()\"><span class=\"annotation\">0[0]\u298a</span>{}<span class=\"annotation\">\u29890[0]</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview-statement.rs:5:13: 5:13:\n+    5:13-5:13: Return: return\"><span class=\"annotation\">0:Return\u298a</span>\u2038<span class=\"annotation\">\u29890:Return</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "984b021384b084fe758fcbfb3cc6930201291c5b", "filename": "src/test/mir-opt/spanview_terminator.main.mir_map.0.html.mir", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.mir_map.0.html.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.mir_map.0.html.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fspanview_terminator.main.mir_map.0.html.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -59,8 +59,7 @@\n     </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0:Goto: $DIR/spanview-terminator.rs:5:13: 5:13:\n-    5:13-5:13: Goto: goto -&gt; bb2\"><span class=\"annotation\">0:Goto\u298a</span>\u2038<span class=\"annotation\">\u29890:Goto</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"2:Return: $DIR/spanview-terminator.rs:5:13: 5:13:\n-    5:13-5:13: Return: return\"><span class=\"annotation\">2:Return\u298a</span>\u2038<span class=\"annotation\">\u29892:Return</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"0:Return: $DIR/spanview-terminator.rs:5:13: 5:13:\n+    5:13-5:13: Return: return\"><span class=\"annotation\">0:Return\u298a</span>\u2038<span class=\"annotation\">\u29890:Return</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "6d05e8278ba527b20f047794063017a64a9b35a2", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -159,8 +159,4 @@ static XXX: &Foo = {\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n-    }\n }"}, {"sha": "d18f6308ded84e93308851faf27a822ff1b8e3c3", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -22,78 +22,62 @@ fn move_out_by_subslice() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n-    }\n-\n-    bb2 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-    }\n-\n-    bb4: {\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-    }\n-\n-    bb5 (cleanup): {\n-        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n-    bb7: {\n+    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb8: {\n+    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb9: {\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb5: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb6: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb12: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb7 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb13: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    bb8 (cleanup): {\n+        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb14: {\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n }"}, {"sha": "eda8e5fd3afe7939f056584cb5d88b753a4afc51", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -22,78 +22,62 @@ fn move_out_from_end() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n-    }\n-\n-    bb2 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb3 (cleanup): {\n-        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-    }\n-\n-    bb4: {\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-    }\n-\n-    bb5 (cleanup): {\n-        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n-    bb7: {\n+    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb8: {\n+    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb9: {\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb5: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb6: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb12: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb7 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb13: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    bb8 (cleanup): {\n+        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb14: {\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb10 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n }"}, {"sha": "7c7f03ea6ad3ca96db660d231f8cc3e00d388a1b", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.32bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -7,8 +7,4 @@ E::V::{constant#0}: isize = {\n         _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n-    }\n }"}, {"sha": "7c7f03ea6ad3ca96db660d231f8cc3e00d388a1b", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.64bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -7,8 +7,4 @@ E::V::{constant#0}: isize = {\n         _0 = const 5_isize;              // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n-    }\n }"}, {"sha": "e4af5b3dfabef9c4b5e2b88f56d0f4f6832a7e16", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,7 +6,7 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,20 +22,16 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb2;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n-    bb5 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+    bb5: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-    }\n-\n-    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e4af5b3dfabef9c4b5e2b88f56d0f4f6832a7e16", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -6,7 +6,7 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,20 +22,16 @@ fn drop_in_place(_1: *mut Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb2;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n-    bb5 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+    bb5: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-    }\n-\n-    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a046a89bc8cf216db48b9980e6f64acd6f3c5cfc", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -7,8 +7,4 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n-    }\n }"}, {"sha": "a046a89bc8cf216db48b9980e6f64acd6f3c5cfc", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -7,8 +7,4 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n-    }\n }"}, {"sha": "c27c68d870247ca55ab44392f377f9be6f345982", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -52,7 +52,7 @@ fn while_loop(_1: bool) -> () {\n     bb6: {\n         _0 = const ();                   // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n     }\n \n     bb7: {"}, {"sha": "051250d90a24a8421ea876b03a0b631c1e2c6196", "filename": "src/test/run-make-fulldeps/instrument-coverage-cov-reports-base/expected_export_coverage.coverage_of_if_else.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-base%2Fexpected_export_coverage.coverage_of_if_else.json", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-base%2Fexpected_export_coverage.coverage_of_if_else.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-base%2Fexpected_export_coverage.coverage_of_if_else.json?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 46,\n+              \"count\": 40,\n               \"covered\": 19,\n-              \"percent\": 41.30434782608695\n+              \"percent\": 47.5\n             },\n             \"regions\": {\n-              \"count\": 75,\n+              \"count\": 71,\n               \"covered\": 23,\n-              \"notcovered\": 52,\n-              \"percent\": 30.666666666666664\n+              \"notcovered\": 48,\n+              \"percent\": 32.3943661971831\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 46,\n+          \"count\": 40,\n           \"covered\": 19,\n-          \"percent\": 41.30434782608695\n+          \"percent\": 47.5\n         },\n         \"regions\": {\n-          \"count\": 75,\n+          \"count\": 71,\n           \"covered\": 23,\n-          \"notcovered\": 52,\n-          \"percent\": 30.666666666666664\n+          \"notcovered\": 48,\n+          \"percent\": 32.3943661971831\n         }\n       }\n     }"}, {"sha": "87ce3b4048f2a426bb520ce1679c5dc53f4f9ae2", "filename": "src/test/run-make-fulldeps/instrument-coverage-cov-reports-base/typical_show_coverage.coverage_of_if_else.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-base%2Ftypical_show_coverage.coverage_of_if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-base%2Ftypical_show_coverage.coverage_of_if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-base%2Ftypical_show_coverage.coverage_of_if_else.txt?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -20,13 +20,13 @@\n    16|      0|    } else {\n    17|      0|        return;\n    18|      0|    }\n-   19|      0|\n-   20|      0|    let mut countdown = 0;\n+   19|       |\n+   20|       |    let mut countdown = 0;\n    21|      2|    if true {\n                      ^1\n    22|      2|        countdown = 10;\n    23|      2|    }\n-   24|      0|\n+   24|       |\n    25|      2|    if countdown > 7 {\n                      ^1\n    26|      2|        countdown -= 4;\n@@ -40,13 +40,13 @@\n    32|      0|    } else {\n    33|      0|        return;\n    34|      0|    }\n-   35|      0|\n-   36|      0|    let mut countdown = 0;\n+   35|       |\n+   36|       |    let mut countdown = 0;\n    37|      2|    if true {\n                      ^1\n    38|      2|        countdown = 10;\n    39|      2|    }\n-   40|      0|\n+   40|       |\n    41|      2|    if countdown > 7 {\n                      ^1\n    42|      2|        countdown -= 4;"}, {"sha": "051250d90a24a8421ea876b03a0b631c1e2c6196", "filename": "src/test/run-make-fulldeps/instrument-coverage-cov-reports-link-dead-code/expected_export_coverage.coverage_of_if_else.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-link-dead-code%2Fexpected_export_coverage.coverage_of_if_else.json", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-link-dead-code%2Fexpected_export_coverage.coverage_of_if_else.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-link-dead-code%2Fexpected_export_coverage.coverage_of_if_else.json?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 46,\n+              \"count\": 40,\n               \"covered\": 19,\n-              \"percent\": 41.30434782608695\n+              \"percent\": 47.5\n             },\n             \"regions\": {\n-              \"count\": 75,\n+              \"count\": 71,\n               \"covered\": 23,\n-              \"notcovered\": 52,\n-              \"percent\": 30.666666666666664\n+              \"notcovered\": 48,\n+              \"percent\": 32.3943661971831\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 46,\n+          \"count\": 40,\n           \"covered\": 19,\n-          \"percent\": 41.30434782608695\n+          \"percent\": 47.5\n         },\n         \"regions\": {\n-          \"count\": 75,\n+          \"count\": 71,\n           \"covered\": 23,\n-          \"notcovered\": 52,\n-          \"percent\": 30.666666666666664\n+          \"notcovered\": 48,\n+          \"percent\": 32.3943661971831\n         }\n       }\n     }"}, {"sha": "87ce3b4048f2a426bb520ce1679c5dc53f4f9ae2", "filename": "src/test/run-make-fulldeps/instrument-coverage-cov-reports-link-dead-code/typical_show_coverage.coverage_of_if_else.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-link-dead-code%2Ftypical_show_coverage.coverage_of_if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-link-dead-code%2Ftypical_show_coverage.coverage_of_if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-cov-reports-link-dead-code%2Ftypical_show_coverage.coverage_of_if_else.txt?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -20,13 +20,13 @@\n    16|      0|    } else {\n    17|      0|        return;\n    18|      0|    }\n-   19|      0|\n-   20|      0|    let mut countdown = 0;\n+   19|       |\n+   20|       |    let mut countdown = 0;\n    21|      2|    if true {\n                      ^1\n    22|      2|        countdown = 10;\n    23|      2|    }\n-   24|      0|\n+   24|       |\n    25|      2|    if countdown > 7 {\n                      ^1\n    26|      2|        countdown -= 4;\n@@ -40,13 +40,13 @@\n    32|      0|    } else {\n    33|      0|        return;\n    34|      0|    }\n-   35|      0|\n-   36|      0|    let mut countdown = 0;\n+   35|       |\n+   36|       |    let mut countdown = 0;\n    37|      2|    if true {\n                      ^1\n    38|      2|        countdown = 10;\n    39|      2|    }\n-   40|      0|\n+   40|       |\n    41|      2|    if countdown > 7 {\n                      ^1\n    42|      2|        countdown -= 4;"}, {"sha": "fcb6afb263684c25797ff9fb51234c4ae5190369", "filename": "src/test/run-make-fulldeps/instrument-coverage-mir-cov-html-base/expected_mir_dump.coverage_of_if_else/coverage_of_if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 298, "deletions": 465, "changes": 763, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-base%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-base%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-base%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08"}, {"sha": "fcb6afb263684c25797ff9fb51234c4ae5190369", "filename": "src/test/run-make-fulldeps/instrument-coverage-mir-cov-html-link-dead-code/expected_mir_dump.coverage_of_if_else/coverage_of_if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 298, "deletions": 465, "changes": 763, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-link-dead-code%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-link-dead-code%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finstrument-coverage-mir-cov-html-link-dead-code%2Fexpected_mir_dump.coverage_of_if_else%2Fcoverage_of_if_else.main.-------.InstrumentCoverage.0.html?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08"}, {"sha": "8383eba89124a50b934cb3d3e0556e5b8461c96d", "filename": "src/test/ui/auxiliary/issue-72470-lib.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fui%2Fauxiliary%2Fissue-72470-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fui%2Fauxiliary%2Fissue-72470-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fissue-72470-lib.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -0,0 +1,175 @@\n+// compile-flags: -C opt-level=3\n+// edition:2018\n+\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::pin::Pin;\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::Arc;\n+use std::task::Poll::{Pending, Ready};\n+use std::task::Waker;\n+use std::task::{Context, Poll};\n+use std::{\n+    ptr,\n+    task::{RawWaker, RawWakerVTable},\n+};\n+\n+/// Future for the [`poll_fn`] function.\n+pub struct PollFn<F> {\n+    f: F,\n+}\n+\n+impl<F> Unpin for PollFn<F> {}\n+\n+/// Creates a new future wrapping around a function returning [`Poll`].\n+pub fn poll_fn<T, F>(f: F) -> PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    PollFn { f }\n+}\n+\n+impl<T, F> Future for PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    type Output = T;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        (&mut self.f)(cx)\n+    }\n+}\n+pub fn run<F: Future>(future: F) -> F::Output {\n+    BasicScheduler.block_on(future)\n+}\n+\n+pub(crate) struct BasicScheduler;\n+\n+impl BasicScheduler {\n+    pub(crate) fn block_on<F>(&mut self, mut future: F) -> F::Output\n+    where\n+        F: Future,\n+    {\n+        let waker = unsafe { Waker::from_raw(raw_waker()) };\n+        let mut cx = std::task::Context::from_waker(&waker);\n+\n+        let mut future = unsafe { Pin::new_unchecked(&mut future) };\n+\n+        loop {\n+            if let Ready(v) = future.as_mut().poll(&mut cx) {\n+                return v;\n+            }\n+        }\n+    }\n+}\n+\n+// ===== impl Spawner =====\n+\n+fn raw_waker() -> RawWaker {\n+    RawWaker::new(ptr::null(), waker_vtable())\n+}\n+\n+fn waker_vtable() -> &'static RawWakerVTable {\n+    &RawWakerVTable::new(\n+        clone_arc_raw,\n+        wake_arc_raw,\n+        wake_by_ref_arc_raw,\n+        drop_arc_raw,\n+    )\n+}\n+\n+unsafe fn clone_arc_raw(_: *const ()) -> RawWaker {\n+    raw_waker()\n+}\n+\n+unsafe fn wake_arc_raw(_: *const ()) {}\n+\n+unsafe fn wake_by_ref_arc_raw(_: *const ()) {}\n+\n+unsafe fn drop_arc_raw(_: *const ()) {}\n+\n+struct AtomicWaker {}\n+\n+impl AtomicWaker {\n+    /// Create an `AtomicWaker`\n+    fn new() -> AtomicWaker {\n+        AtomicWaker {}\n+    }\n+\n+    fn register_by_ref(&self, _waker: &Waker) {}\n+}\n+\n+#[allow(dead_code)]\n+struct Tx<T> {\n+    inner: Arc<Chan<T>>,\n+}\n+\n+struct Rx<T> {\n+    inner: Arc<Chan<T>>,\n+}\n+\n+#[allow(dead_code)]\n+struct Chan<T> {\n+    tx: PhantomData<T>,\n+    semaphore: Sema,\n+    rx_waker: AtomicWaker,\n+    rx_closed: bool,\n+}\n+\n+fn channel<T>() -> (Tx<T>, Rx<T>) {\n+    let chan = Arc::new(Chan {\n+        tx: PhantomData,\n+        semaphore: Sema(AtomicUsize::new(0)),\n+        rx_waker: AtomicWaker::new(),\n+        rx_closed: false,\n+    });\n+\n+    (\n+        Tx {\n+            inner: chan.clone(),\n+        },\n+        Rx { inner: chan },\n+    )\n+}\n+\n+// ===== impl Rx =====\n+\n+impl<T> Rx<T> {\n+    /// Receive the next value\n+    fn recv(&mut self, cx: &mut Context<'_>) -> Poll<Option<T>> {\n+        self.inner.rx_waker.register_by_ref(cx.waker());\n+\n+        if self.inner.rx_closed && self.inner.semaphore.is_idle() {\n+            Ready(None)\n+        } else {\n+            Pending\n+        }\n+    }\n+}\n+\n+struct Sema(AtomicUsize);\n+\n+impl Sema {\n+    fn is_idle(&self) -> bool {\n+        false\n+    }\n+}\n+\n+pub struct UnboundedReceiver<T> {\n+    chan: Rx<T>,\n+}\n+\n+pub fn unbounded_channel<T>() -> UnboundedReceiver<T> {\n+    let (tx, rx) = channel();\n+\n+    drop(tx);\n+    let rx = UnboundedReceiver { chan: rx };\n+\n+    rx\n+}\n+\n+impl<T> UnboundedReceiver<T> {\n+    pub async fn recv(&mut self) -> Option<T> {\n+        poll_fn(|cx| self.chan.recv(cx)).await\n+    }\n+}"}, {"sha": "5bb69a0730525f3d69de586daae62f467a9793df", "filename": "src/test/ui/issue-72470-llvm-dominate.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fui%2Fissue-72470-llvm-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced813fec0fb9e883906f18b76d618baf9f5bc08/src%2Ftest%2Fui%2Fissue-72470-llvm-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-72470-llvm-dominate.rs?ref=ced813fec0fb9e883906f18b76d618baf9f5bc08", "patch": "@@ -0,0 +1,66 @@\n+// compile-flags: -C opt-level=3\n+// aux-build: issue-72470-lib.rs\n+// edition:2018\n+// build-pass\n+\n+// Regression test for issue #72470, using the minimization\n+// in https://github.com/jonas-schievink/llvm-error\n+\n+extern crate issue_72470_lib;\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::sync::Mutex;\n+use std::task::Poll::{Pending, Ready};\n+\n+#[allow(dead_code)]\n+enum Msg {\n+    A(Vec<()>),\n+    B,\n+}\n+\n+#[allow(dead_code)]\n+enum Out {\n+    _0(Option<Msg>),\n+    Disabled,\n+}\n+\n+#[allow(unused_must_use)]\n+fn main() {\n+    let mut rx = issue_72470_lib::unbounded_channel::<Msg>();\n+    let entity = Mutex::new(());\n+    issue_72470_lib::run(async move {\n+        {\n+            let output = {\n+                let mut fut = rx.recv();\n+                issue_72470_lib::poll_fn(|cx| {\n+                    loop {\n+                        let fut = unsafe { Pin::new_unchecked(&mut fut) };\n+                        let out = match fut.poll(cx) {\n+                            Ready(out) => out,\n+                            Pending => {\n+                                break;\n+                            }\n+                        };\n+                        #[allow(unused_variables)]\n+                        match &out {\n+                            Some(_msg) => {}\n+                            _ => break,\n+                        }\n+                        return Ready(Out::_0(out));\n+                    }\n+                    Ready(Out::_0(None))\n+                })\n+                .await\n+            };\n+            match output {\n+                Out::_0(Some(_msg)) => {\n+                    entity.lock();\n+                }\n+                Out::_0(None) => unreachable!(),\n+                _ => unreachable!(),\n+            }\n+        }\n+        entity.lock();\n+    });\n+}"}]}