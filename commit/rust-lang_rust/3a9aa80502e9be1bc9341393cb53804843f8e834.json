{"sha": "3a9aa80502e9be1bc9341393cb53804843f8e834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOWFhODA1MDJlOWJlMWJjOTM0MTM5M2NiNTM4MDQ4NDNmOGU4MzQ=", "commit": {"author": {"name": "Vladimir Serov", "email": "me@cab404.ru", "date": "2020-05-21T15:26:50Z"}, "committer": {"name": "Vladimir Serov", "email": "me@cab404.ru", "date": "2020-05-21T15:26:50Z"}, "message": "editors/vscode: added patchelf after download", "tree": {"sha": "81f889eee55de0258af9d478ec96b7f8f9fca71d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f889eee55de0258af9d478ec96b7f8f9fca71d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9aa80502e9be1bc9341393cb53804843f8e834", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEG7loEJJvTnFd71Z+a6fCbD/fe7MFAl7GnboACgkQa6fCbD/f\ne7MoUwv/YUx9kfx5pyfwW3dUdSpKl0nyrsQMfe+esjNNN7EbjVJ0MYOTAaLpu8wV\noWEQD3AHWrBJKMzvySrtpxD7AeWqFX0wfleov90ZB4DbNkVI/PfviwsQX+TIA6k/\nmVERcUEhwOpK/xy7drQAL8WOMh6Dqr3m46t70mG6taiJvP6joXwfVrsM4yFgsgXt\npaUiDHRIJaW7VGOm+bXcH+2voraTJ8hz7y/tPRL4lIYr1VgT0wr0li0xs7iwJTgs\n7tWm3ZUf/yGYOLGyaal3kxb1t7dSYtEHTQDjvpXDPzQIhBXBCc0n4rv3yD+YKc75\nFrVeZuP9iAN6wiegAtPLq9WxewzzhRoobW0hlUrILCs72QNH6iIKD5H28KjRQe7C\n2ITOeadklrmTCTxA8afGFDyXTAaJecsUWxbvXIkzBoYL/oMzZFo6n3XnL4L6UoqA\n0dtQzOo0dE+RH2Q7WL95LLn/TVy8HBLvzV0gX8snoIiuRYSmyXl3muYZgSsJXd2Q\nBsHjULHz\n=fRLY\n-----END PGP SIGNATURE-----", "payload": "tree 81f889eee55de0258af9d478ec96b7f8f9fca71d\nparent a4e6963a2313971fe7bbec97d03bc67266ef68a9\nauthor Vladimir Serov <me@cab404.ru> 1590074810 +0300\ncommitter Vladimir Serov <me@cab404.ru> 1590074810 +0300\n\neditors/vscode: added patchelf after download\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9aa80502e9be1bc9341393cb53804843f8e834", "html_url": "https://github.com/rust-lang/rust/commit/3a9aa80502e9be1bc9341393cb53804843f8e834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9aa80502e9be1bc9341393cb53804843f8e834/comments", "author": {"login": "cab404", "id": 6453661, "node_id": "MDQ6VXNlcjY0NTM2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6453661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cab404", "html_url": "https://github.com/cab404", "followers_url": "https://api.github.com/users/cab404/followers", "following_url": "https://api.github.com/users/cab404/following{/other_user}", "gists_url": "https://api.github.com/users/cab404/gists{/gist_id}", "starred_url": "https://api.github.com/users/cab404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cab404/subscriptions", "organizations_url": "https://api.github.com/users/cab404/orgs", "repos_url": "https://api.github.com/users/cab404/repos", "events_url": "https://api.github.com/users/cab404/events{/privacy}", "received_events_url": "https://api.github.com/users/cab404/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cab404", "id": 6453661, "node_id": "MDQ6VXNlcjY0NTM2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6453661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cab404", "html_url": "https://github.com/cab404", "followers_url": "https://api.github.com/users/cab404/followers", "following_url": "https://api.github.com/users/cab404/following{/other_user}", "gists_url": "https://api.github.com/users/cab404/gists{/gist_id}", "starred_url": "https://api.github.com/users/cab404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cab404/subscriptions", "organizations_url": "https://api.github.com/users/cab404/orgs", "repos_url": "https://api.github.com/users/cab404/repos", "events_url": "https://api.github.com/users/cab404/events{/privacy}", "received_events_url": "https://api.github.com/users/cab404/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e6963a2313971fe7bbec97d03bc67266ef68a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e6963a2313971fe7bbec97d03bc67266ef68a9", "html_url": "https://github.com/rust-lang/rust/commit/a4e6963a2313971fe7bbec97d03bc67266ef68a9"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "0a234cb847371d0afed3e529b36951c478b69216", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3a9aa80502e9be1bc9341393cb53804843f8e834/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3a9aa80502e9be1bc9341393cb53804843f8e834/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=3a9aa80502e9be1bc9341393cb53804843f8e834", "patch": "@@ -1,7 +1,7 @@\n import * as vscode from 'vscode';\n import * as path from \"path\";\n import * as os from \"os\";\n-import { promises as fs } from \"fs\";\n+import { promises as fs, PathLike } from \"fs\";\n \n import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n@@ -12,6 +12,7 @@ import { log, assert, isValidExecutable } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n import { activateTaskProvider } from './tasks';\n+import { exec } from 'child_process';\n \n let ctx: Ctx | undefined;\n \n@@ -188,6 +189,46 @@ async function bootstrapServer(config: Config, state: PersistentState): Promise<\n     return path;\n }\n \n+async function patchelf(dest: PathLike): Promise<void> {\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification, \n+            title: \"Patching rust-analysis for NixOS\"\n+        }, \n+        async (progress, _) => {\n+            let patch_path = path.join(os.tmpdir(), \"patch-ra.nix\")\n+            progress.report({message: \"Writing nix file\", increment: 5})\n+            await fs.writeFile(patch_path, `\n+            {src, pkgs ? import <nixpkgs> {}}:\n+                pkgs.stdenv.mkDerivation {\n+                    name = \"rust-analyzer\";\n+                    inherit src;\n+                    phases = [ \"installPhase\" \"fixupPhase\" ];\n+                    installPhase = \"cp $src $out\";\n+                    fixupPhase = ''\n+                    chmod 755 $out\n+                    patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n+                    '';\n+                }\n+            `)\n+            let orig_file = dest + \"-orig\"\n+            await fs.rename(dest, orig_file)\n+            progress.report({message: \"Patching executable\", increment: 20})\n+            await new Promise((resolve, reject) => {\n+                exec(`nix-build ${patch_path} --arg src '${orig_file}' -o ${dest}`,\n+                (err, stdout, stderr) => {\n+                    if (err != null) {\n+                        reject(Error(stderr))\n+                    } else {\n+                        resolve(stdout)\n+                    }\n+                })\n+            })\n+            // await fs.unlink(orig_file)\n+        }\n+    )\n+}\n+\n async function getServer(config: Config, state: PersistentState): Promise<string | undefined> {\n     const explicitPath = process.env.__RA_LSP_SERVER_DEBUG ?? config.serverPath;\n     if (explicitPath) {\n@@ -237,6 +278,12 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer server\", { mode: 0o755 });\n+\n+    // Patching executable if that's NixOS.\n+    if (fs.stat(\"/etc/nixos\").then(_ => true).catch(_ => false)) {\n+        await patchelf(dest)\n+    }\n+\n     await state.updateServerVersion(config.package.version);\n     return dest;\n }"}]}