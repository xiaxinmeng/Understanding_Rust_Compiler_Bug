{"sha": "30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "node_id": "C_kwDOAAsO6NoAKDMwYWNmNmRlZjMyYTM0MGI0YmZjZTZlMWUyNjM4ZjFiMDVhYzJjZDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T04:51:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T04:51:41Z"}, "message": "Auto merge of #89386 - ehuss:rollup-idf4dmj, r=ehuss\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #87428 (Fix union keyword highlighting in rustdoc HTML sources)\n - #88412 (Remove ignore-tidy-undocumented-unsafe from core::slice::sort)\n - #89098 (Fix generics where bounds order)\n - #89232 (Improve help for recursion limit errors)\n - #89294 (:arrow_up: rust-analyzer)\n - #89297 (Remove Never variant from clean::Type enum)\n - #89311 (Add unit assignment to MIR for `asm!()`)\n - #89313 (PassWrapper: handle function rename from upstream D36850)\n - #89315 (Clarify that `CString::from_vec_unchecked` appends 0 byte.)\n - #89335 (Optimize is_sorted for Range and RangeInclusive)\n - #89366 (rustdoc: Remove lazy_static dependency)\n - #89377 (Update cargo)\n - #89378 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "055100358563a8eb9605cd5ac6a4b68d3fa49be1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/055100358563a8eb9605cd5ac6a4b68d3fa49be1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "html_url": "https://github.com/rust-lang/rust/commit/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "html_url": "https://github.com/rust-lang/rust/commit/4aa7879b559ccf7f82bcce2a8e532ea307697ea9"}, {"sha": "20c95302e063d5b4baf00ea95d2898505cc10b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c95302e063d5b4baf00ea95d2898505cc10b3d", "html_url": "https://github.com/rust-lang/rust/commit/20c95302e063d5b4baf00ea95d2898505cc10b3d"}], "stats": {"total": 331, "additions": 262, "deletions": 69}, "files": [{"sha": "1d6703077acffadd22629e638e6bd9256f3e5cab", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -633,14 +633,18 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn error_recursion_limit_reached(&mut self) {\n         let expn_data = self.cx.current_expansion.id.expn_data();\n-        let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n+        let suggested_limit = match self.cx.ecfg.recursion_limit {\n+            Limit(0) => Limit(2),\n+            limit => limit * 2,\n+        };\n         self.cx\n             .struct_span_err(\n                 expn_data.call_site,\n                 &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n             )\n             .help(&format!(\n-                \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+                \"consider increasing the recursion limit by adding a \\\n+                 `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n                 suggested_limit, self.cx.ecfg.crate_name,\n             ))\n             .emit();"}, {"sha": "ddb5f7dcebfad5777cb9e364513c53f40ab4294f", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1572,7 +1572,11 @@ extern \"C\" bool\n LLVMRustPrepareThinLTOResolveWeak(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   Module &Mod = *unwrap(M);\n   const auto &DefinedGlobals = Data->ModuleToDefinedGVSummaries.lookup(Mod.getModuleIdentifier());\n+#if LLVM_VERSION_GE(14, 0)\n+  thinLTOFinalizeInModule(Mod, DefinedGlobals, /*PropagateAttrs=*/true);\n+#else\n   thinLTOResolvePrevailingInModule(Mod, DefinedGlobals);\n+#endif\n   return true;\n }\n "}, {"sha": "53868f285576392751518368d4168bfe39dd81a1", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -449,8 +449,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                     .collect();\n \n-                let destination = this.cfg.start_new_block();\n+                if !options.contains(InlineAsmOptions::NORETURN) {\n+                    this.cfg.push_assign_unit(block, source_info, destination, this.tcx);\n+                }\n \n+                let destination_block = this.cfg.start_new_block();\n                 this.cfg.terminate(\n                     block,\n                     source_info,\n@@ -462,11 +465,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         destination: if options.contains(InlineAsmOptions::NORETURN) {\n                             None\n                         } else {\n-                            Some(destination)\n+                            Some(destination_block)\n                         },\n                     },\n                 );\n-                destination.unit()\n+                destination_block.unit()\n             }\n \n             // These cases don't actually need a destination"}, {"sha": "53afe4ca068c4cf24f0601ee3c38ddb7a8cbc855", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc_middle::ty::{ToPredicate, TypeFoldable};\n-use rustc_session::DiagnosticMessageId;\n+use rustc_session::{DiagnosticMessageId, Limit};\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n \n@@ -217,7 +217,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n     // We've reached the recursion limit, error gracefully.\n-    let suggested_limit = tcx.recursion_limit() * 2;\n+    let suggested_limit = match tcx.recursion_limit() {\n+        Limit(0) => Limit(2),\n+        limit => limit * 2,\n+    };\n     let msg = format!(\"reached the recursion limit while auto-dereferencing `{:?}`\", ty);\n     let error_id = (DiagnosticMessageId::ErrorId(55), Some(span), msg);\n     let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n@@ -231,7 +234,8 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         )\n         .span_label(span, \"deref recursion limit reached\")\n         .help(&format!(\n-            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+            \"consider increasing the recursion limit by adding a \\\n+             `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n             suggested_limit,\n             tcx.crate_name(LOCAL_CRATE),\n         ))"}, {"sha": "325126483b9cec23b441d95db63d9c77d7f9cff9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::{\n     Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n+use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, ForLoopLoc, MultiSpan, Span, DUMMY_SP};\n@@ -2426,10 +2427,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let current_limit = self.tcx.recursion_limit();\n-        let suggested_limit = current_limit * 2;\n+        let suggested_limit = match self.tcx.recursion_limit() {\n+            Limit(0) => Limit(2),\n+            limit => limit * 2,\n+        };\n         err.help(&format!(\n-            \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n+            \"consider increasing the recursion limit by adding a \\\n+             `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n             suggested_limit,\n             self.tcx.crate_name(LOCAL_CRATE),\n         ));"}, {"sha": "0f835689699fc110626c214a5a565396669a7f59", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -672,6 +672,11 @@ impl<A: Step> Iterator for ops::Range<A> {\n         self.next_back()\n     }\n \n+    #[inline]\n+    fn is_sorted(self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n@@ -1095,6 +1100,11 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    fn is_sorted(self) -> bool {\n+        true\n+    }\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"}, {"sha": "60b39295cafe1e26f7ea3517a415bec85493e68d", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -6,8 +6,6 @@\n //! Unstable sorting is compatible with libcore because it doesn't allocate memory, unlike our\n //! stable sorting implementation.\n \n-// ignore-tidy-undocumented-unsafe\n-\n use crate::cmp;\n use crate::mem::{self, MaybeUninit};\n use crate::ptr;\n@@ -291,6 +289,9 @@ where\n             } else if start_r < end_r {\n                 block_l = rem;\n             } else {\n+                // There were the same number of elements to switch on both blocks during the last\n+                // iteration, so there are no remaining elements on either block. Cover the remaining\n+                // items with roughly equally-sized blocks.\n                 block_l = rem / 2;\n                 block_r = rem - block_l;\n             }\n@@ -437,6 +438,17 @@ where\n         // Move its remaining out-of-order elements to the far right.\n         debug_assert_eq!(width(l, r), block_l);\n         while start_l < end_l {\n+            // remaining-elements-safety\n+            // SAFETY: while the loop condition holds there are still elements in `offsets_l`, so it\n+            // is safe to point `end_l` to the previous element.\n+            //\n+            // The `ptr::swap` is safe if both its arguments are valid for reads and writes:\n+            //  - Per the debug assert above, the distance between `l` and `r` is `block_l`\n+            //    elements, so there can be at most `block_l` remaining offsets between `start_l`\n+            //    and `end_l`. This means `r` will be moved at most `block_l` steps back, which\n+            //    makes the `r.offset` calls valid (at that point `l == r`).\n+            //  - `offsets_l` contains valid offsets into `v` collected during the partitioning of\n+            //    the last block, so the `l.offset` calls are valid.\n             unsafe {\n                 end_l = end_l.offset(-1);\n                 ptr::swap(l.offset(*end_l as isize), r.offset(-1));\n@@ -449,6 +461,7 @@ where\n         // Move its remaining out-of-order elements to the far left.\n         debug_assert_eq!(width(l, r), block_r);\n         while start_r < end_r {\n+            // SAFETY: See the reasoning in [remaining-elements-safety].\n             unsafe {\n                 end_r = end_r.offset(-1);\n                 ptr::swap(l, r.offset(-(*end_r as isize) - 1));\n@@ -481,6 +494,8 @@ where\n \n         // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n         // operation panics, the pivot will be automatically written back into the slice.\n+\n+        // SAFETY: `pivot` is a reference to the first element of `v`, so `ptr::read` is safe.\n         let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n         let _pivot_guard = CopyOnDrop { src: &mut *tmp, dest: pivot };\n         let pivot = &*tmp;\n@@ -646,6 +661,12 @@ where\n \n     if len >= 8 {\n         // Swaps indices so that `v[a] <= v[b]`.\n+        // SAFETY: `len >= 8` so there are at least two elements in the neighborhoods of\n+        // `a`, `b` and `c`. This means the three calls to `sort_adjacent` result in\n+        // corresponding calls to `sort3` with valid 3-item neighborhoods around each\n+        // pointer, which in turn means the calls to `sort2` are done with valid\n+        // references. Thus the `v.get_unchecked` calls are safe, as is the `ptr::swap`\n+        // call.\n         let mut sort2 = |a: &mut usize, b: &mut usize| unsafe {\n             if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {\n                 ptr::swap(a, b);"}, {"sha": "fe1f28f00c4031aa8291120b6afc9ba5b842ffef", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -409,6 +409,8 @@ impl CString {\n     /// Creates a C-compatible string by consuming a byte vector,\n     /// without checking for interior 0 bytes.\n     ///\n+    /// Trailing 0 byte will be appended by this function.\n+    ///\n     /// This method is equivalent to [`CString::new`] except that no runtime\n     /// assertion is made that `v` contains no 0 bytes, and it requires an\n     /// actual byte vector, not anything that can be converted to one with Into."}, {"sha": "eb1282ec444db94055fa9531b6f3f803e86bb382", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit fcb5e0ea68112d85a1d29a7a7335978ef2a02181\n+Subproject commit eb1282ec444db94055fa9531b6f3f803e86bb382"}, {"sha": "2747c4bb2cbc0639b733793ddb0bf4e9daa2634e", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit fe6227eb3c8533200c52dffa42ef1b6f2f02c40e\n+Subproject commit 2747c4bb2cbc0639b733793ddb0bf4e9daa2634e"}, {"sha": "13747275bd14c2d2b453100498532f9ae5504769", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit 0e5ed7a4bec065f0cc18c35d1c904639e095314d\n+Subproject commit 13747275bd14c2d2b453100498532f9ae5504769"}, {"sha": "28aca4a36962c709bce301c03114b5589381dfb8", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit 9d4132b56c4999cd3ce1aeca5f1b2f2cb0d11c24\n+Subproject commit 28aca4a36962c709bce301c03114b5589381dfb8"}, {"sha": "d1f03cbaa39d9164f5fe4b9b93762668142e0dad", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit 9198465b6ca8bed669df0cbb67c0e6d0b140803c\n+Subproject commit d1f03cbaa39d9164f5fe4b9b93762668142e0dad"}, {"sha": "49fc93f3feabc755340625f814ccb89ce832db86", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1313,7 +1313,7 @@ impl Clean<Type> for hir::Ty<'_> {\n         use rustc_hir::*;\n \n         match self.kind {\n-            TyKind::Never => Never,\n+            TyKind::Never => Primitive(PrimitiveType::Never),\n             TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n@@ -1402,7 +1402,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n         trace!(\"cleaning type: {:?}\", self);\n         let ty = normalize(cx, self).unwrap_or(self);\n         match *ty.kind() {\n-            ty::Never => Never,\n+            ty::Never => Primitive(PrimitiveType::Never),\n             ty::Bool => Primitive(PrimitiveType::Bool),\n             ty::Char => Primitive(PrimitiveType::Char),\n             ty::Int(int_ty) => Primitive(int_ty.into()),"}, {"sha": "257af6ab910163d9bd91b7d2cfa053870c5b6d52", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -11,8 +11,7 @@\n //! This module attempts to reconstruct the original where and/or parameter\n //! bounds by special casing scenarios such as these. Fun!\n \n-use std::collections::BTreeMap;\n-\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_span::Symbol;\n@@ -23,8 +22,11 @@ use crate::clean::WherePredicate as WP;\n use crate::core::DocContext;\n \n crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n-    // First, partition the where clause into its separate components\n-    let mut params: BTreeMap<_, (Vec<_>, Vec<_>)> = BTreeMap::new();\n+    // First, partition the where clause into its separate components.\n+    //\n+    // We use `FxIndexMap` so that the insertion order is preserved to prevent messing up to\n+    // the order of the generated bounds.\n+    let mut params: FxIndexMap<Symbol, (Vec<_>, Vec<_>)> = FxIndexMap::default();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();"}, {"sha": "248ff339514ed2fad3553379a8c2ea804670bf08", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1396,7 +1396,6 @@ crate enum Type {\n     Slice(Box<Type>),\n     /// The `String` field is about the size or the constant representing the array's length.\n     Array(Box<Type>, String),\n-    Never,\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n         lifetime: Option<Lifetime>,\n@@ -1462,7 +1461,6 @@ impl Type {\n             }\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n-            Never => Some(PrimitiveType::Never),\n             _ => None,\n         }\n     }\n@@ -1550,7 +1548,6 @@ impl Type {\n                 }\n             }\n             BareFunction(..) => PrimitiveType::Fn,\n-            Never => PrimitiveType::Never,\n             Slice(..) => PrimitiveType::Slice,\n             Array(..) => PrimitiveType::Array,\n             RawPointer(..) => PrimitiveType::RawPointer,"}, {"sha": "074744b3d11e2443cb4f9cf4a2b5a7ce99e8a251", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -25,6 +25,7 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use std::cell::RefCell;\n+use std::lazy::SyncLazy;\n use std::mem;\n use std::rc::Rc;\n \n@@ -271,9 +272,8 @@ crate fn create_config(\n             providers.typeck_item_bodies = |_, _| {};\n             // hack so that `used_trait_imports` won't try to call typeck\n             providers.used_trait_imports = |_, _| {\n-                lazy_static! {\n-                    static ref EMPTY_SET: FxHashSet<LocalDefId> = FxHashSet::default();\n-                }\n+                static EMPTY_SET: SyncLazy<FxHashSet<LocalDefId>> =\n+                    SyncLazy::new(FxHashSet::default);\n                 &EMPTY_SET\n             };\n             // In case typeck does end up being called, don't ICE in case there were name resolution errors"}, {"sha": "bcd78b2adc08513145b2a0194dc920613cc3d69c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -761,6 +761,9 @@ fn fmt_type<'cx>(\n             fmt::Display::fmt(&tybounds(bounds, lt, cx), f)\n         }\n         clean::Infer => write!(f, \"_\"),\n+        clean::Primitive(clean::PrimitiveType::Never) => {\n+            primitive_link(f, PrimitiveType::Never, \"!\", cx)\n+        }\n         clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n@@ -819,7 +822,6 @@ fn fmt_type<'cx>(\n                 primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", Escape(n)), cx)\n             }\n         }\n-        clean::Never => primitive_link(f, PrimitiveType::Never, \"!\", cx),\n         clean::RawPointer(m, ref t) => {\n             let m = match m {\n                 hir::Mutability::Mut => \"mut\","}, {"sha": "43d1b8f794c3060ea0e9bc68c989539bd545288f", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -9,8 +9,8 @@ use crate::clean::PrimitiveType;\n use crate::html::escape::Escape;\n use crate::html::render::Context;\n \n+use std::collections::VecDeque;\n use std::fmt::{Display, Write};\n-use std::iter::Peekable;\n \n use rustc_lexer::{LiteralKind, TokenKind};\n use rustc_span::edition::Edition;\n@@ -201,10 +201,57 @@ fn get_real_ident_class(text: &str, edition: Edition, allow_path_keywords: bool)\n     })\n }\n \n+/// This iterator comes from the same idea than \"Peekable\" except that it allows to \"peek\" more than\n+/// just the next item by using `peek_next`. The `peek` method always returns the next item after\n+/// the current one whereas `peek_next` will return the next item after the last one peeked.\n+///\n+/// You can use both `peek` and `peek_next` at the same time without problem.\n+struct PeekIter<'a> {\n+    stored: VecDeque<(TokenKind, &'a str)>,\n+    /// This position is reinitialized when using `next`. It is used in `peek_next`.\n+    peek_pos: usize,\n+    iter: TokenIter<'a>,\n+}\n+\n+impl PeekIter<'a> {\n+    fn new(iter: TokenIter<'a>) -> Self {\n+        Self { stored: VecDeque::new(), peek_pos: 0, iter }\n+    }\n+    /// Returns the next item after the current one. It doesn't interfer with `peek_next` output.\n+    fn peek(&mut self) -> Option<&(TokenKind, &'a str)> {\n+        if self.stored.is_empty() {\n+            if let Some(next) = self.iter.next() {\n+                self.stored.push_back(next);\n+            }\n+        }\n+        self.stored.front()\n+    }\n+    /// Returns the next item after the last one peeked. It doesn't interfer with `peek` output.\n+    fn peek_next(&mut self) -> Option<&(TokenKind, &'a str)> {\n+        self.peek_pos += 1;\n+        if self.peek_pos - 1 < self.stored.len() {\n+            self.stored.get(self.peek_pos - 1)\n+        } else if let Some(next) = self.iter.next() {\n+            self.stored.push_back(next);\n+            self.stored.back()\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl Iterator for PeekIter<'a> {\n+    type Item = (TokenKind, &'a str);\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.peek_pos = 0;\n+        if let Some(first) = self.stored.pop_front() { Some(first) } else { self.iter.next() }\n+    }\n+}\n+\n /// Processes program tokens, classifying strings of text by highlighting\n /// category (`Class`).\n struct Classifier<'a> {\n-    tokens: Peekable<TokenIter<'a>>,\n+    tokens: PeekIter<'a>,\n     in_attribute: bool,\n     in_macro: bool,\n     in_macro_nonterminal: bool,\n@@ -218,7 +265,7 @@ impl<'a> Classifier<'a> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n     /// file span which will be used later on by the `span_correspondance_map`.\n     fn new(src: &str, edition: Edition, file_span: Span) -> Classifier<'_> {\n-        let tokens = TokenIter { src }.peekable();\n+        let tokens = PeekIter::new(TokenIter { src });\n         Classifier {\n             tokens,\n             in_attribute: false,\n@@ -369,7 +416,7 @@ impl<'a> Classifier<'a> {\n             // Assume that '&' or '*' is the reference or dereference operator\n             // or a reference or pointer type. Unless, of course, it looks like\n             // a logical and or a multiplication operator: `&&` or `* `.\n-            TokenKind::Star => match lookahead {\n+            TokenKind::Star => match self.peek() {\n                 Some(TokenKind::Whitespace) => Class::Op,\n                 _ => Class::RefKeyWord,\n             },\n@@ -480,6 +527,9 @@ impl<'a> Classifier<'a> {\n                 None => match text {\n                     \"Option\" | \"Result\" => Class::PreludeTy,\n                     \"Some\" | \"None\" | \"Ok\" | \"Err\" => Class::PreludeVal,\n+                    // \"union\" is a weak keyword and is only considered as a keyword when declaring\n+                    // a union type.\n+                    \"union\" if self.check_if_is_union_keyword() => Class::KeyWord,\n                     _ if self.in_macro_nonterminal => {\n                         self.in_macro_nonterminal = false;\n                         Class::MacroNonTerminal\n@@ -500,7 +550,17 @@ impl<'a> Classifier<'a> {\n     }\n \n     fn peek(&mut self) -> Option<TokenKind> {\n-        self.tokens.peek().map(|(toke_kind, _text)| *toke_kind)\n+        self.tokens.peek().map(|(token_kind, _text)| *token_kind)\n+    }\n+\n+    fn check_if_is_union_keyword(&mut self) -> bool {\n+        while let Some(kind) = self.tokens.peek_next().map(|(token_kind, _text)| token_kind) {\n+            if *kind == TokenKind::Whitespace {\n+                continue;\n+            }\n+            return *kind == TokenKind::Ident;\n+        }\n+        false\n     }\n }\n "}, {"sha": "c0acf31a05d08ff7e6536efb43fb63b114076b65", "filename": "src/librustdoc/html/highlight/fixtures/union.html", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,8 @@\n+<span class=\"kw\">union</span> <span class=\"ident\">Foo</span> {\n+    <span class=\"ident\">i</span>: <span class=\"ident\">i8</span>,\n+    <span class=\"ident\">u</span>: <span class=\"ident\">i8</span>,\n+}\n+\n+<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n+    <span class=\"kw\">let</span> <span class=\"ident\">union</span> <span class=\"op\">=</span> <span class=\"number\">0</span>;\n+}"}, {"sha": "269ee115d3f8f6ebc2b1e648c632e543ab2c383b", "filename": "src/librustdoc/html/highlight/fixtures/union.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,8 @@\n+union Foo {\n+    i: i8,\n+    u: i8,\n+}\n+\n+fn main() {\n+    let union = 0;\n+}"}, {"sha": "450bbfea1ea863143504f6f0a9ec91b77b5cee80", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -54,3 +54,13 @@ let y = Self::whatever;\";\n         expect_file![\"fixtures/highlight.html\"].assert_eq(&html.into_inner());\n     });\n }\n+\n+#[test]\n+fn test_union_highlighting() {\n+    create_default_session_globals_then(|| {\n+        let src = include_str!(\"fixtures/union.rs\");\n+        let mut html = Buffer::new();\n+        write_code(&mut html, src, Edition::Edition2018, None);\n+        expect_file![\"fixtures/union.html\"].assert_eq(&html.into_inner());\n+    });\n+}"}, {"sha": "edd1d8b98fc64b276eabe71eb00c871668c7d407", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -244,7 +244,6 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n         | clean::Tuple(_)\n         | clean::Slice(_)\n         | clean::Array(_, _)\n-        | clean::Never\n         | clean::RawPointer(_, _)\n         | clean::QPath { .. }\n         | clean::Infer"}, {"sha": "ea81b041c3bc6a973f5f94864d57b2c341cc8f91", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -417,13 +417,13 @@ impl FromWithTcx<clean::Type> for Type {\n                 }\n             }\n             Generic(s) => Type::Generic(s.to_string()),\n+            Primitive(clean::PrimitiveType::Never) => Type::Never,\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n             Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n             ImplTrait(g) => Type::ImplTrait(g.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n-            Never => Type::Never,\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {\n                 mutable: mutability == ast::Mutability::Mut,"}, {"sha": "efc8e31498a9c9c50d09fa75ddf1eb049e03f876", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -18,8 +18,6 @@\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n \n-#[macro_use]\n-extern crate lazy_static;\n #[macro_use]\n extern crate tracing;\n "}, {"sha": "bdcf3f305ebb18cc6841ff79ad59cd70000c747c", "filename": "src/test/ui/asm/issue-89305.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fasm%2Fissue-89305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fasm%2Fissue-89305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-89305.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #89305, where a variable was erroneously reported\n+// as both unused and possibly-uninitialized.\n+\n+// check-pass\n+\n+#![feature(asm)]\n+#![warn(unused)]\n+\n+fn main() {\n+    unsafe {\n+        let x: () = asm!(\"nop\");\n+        //~^ WARNING: unused variable: `x`\n+    }\n+}"}, {"sha": "9cc127b44d008765b7a841efca42ab93d68f91f0", "filename": "src/test/ui/asm/issue-89305.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fasm%2Fissue-89305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fasm%2Fissue-89305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-89305.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,15 @@\n+warning: unused variable: `x`\n+  --> $DIR/issue-89305.rs:11:13\n+   |\n+LL |         let x: () = asm!(\"nop\");\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-89305.rs:7:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fe9b4d630b910c9bafad6b2e205ebd1d62c23e7b", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -9,7 +9,7 @@ LL | |     type U = str;\n LL | | }\n    | |_^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n   --> $DIR/hr-associated-type-bound-2.rs:11:6\n    |\n@@ -24,7 +24,7 @@ error[E0275]: overflow evaluating the requirement `for<'b> u32: X<'b>`\n LL |     type U = str;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n   --> $DIR/hr-associated-type-bound-2.rs:11:6\n    |"}, {"sha": "a560334314ceaef8e9438017ad85acb6ed160f89", "filename": "src/test/ui/autoref-autoderef/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `J`\n LL |     let x: &Bottom = &t;\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`issue_38940`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`issue_38940`)\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38940.rs:43:22"}, {"sha": "247fe4b5b07bd6dc63b71352d354eb1e693e09e3", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `K: Send`\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit`)\n note: required because it appears within the type `J`\n   --> $DIR/recursion_limit.rs:24:9\n    |"}, {"sha": "658207a47c9aba6c1647c9255250a8218588fb69", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `J`\n LL |     let x: &Bottom = &t;\n    |                      ^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_deref`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit_deref`)\n \n error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:50:22"}, {"sha": "609488e4f2f93770348372c16ef7b177c992ac80", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -7,7 +7,7 @@ LL |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };\n LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_macro`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`recursion_limit_macro`)\n    = note: this error originates in the macro `recurse` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a52c90962355f3cbefb795dc34be69209ae5a905", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     ref_foo.foo();\n    |             ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`E0055`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"8\"]` attribute to your crate (`E0055`)\n \n error: aborting due to previous error\n "}, {"sha": "e13f0961a18cf2e00de92686f04ed559d01f65b9", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<B\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`E0275`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/E0275.rs:5:9\n    |"}, {"sha": "03e4718f5dfef880bba58ea20411f1ee116c14fc", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -12,15 +12,15 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     Foo.foo;\n    |     ^^^^^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:9\n    |\n LL |     Foo.foo;\n    |         ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0609]: no field `foo` on type `Foo`\n   --> $DIR/infinite-autoderef.rs:25:9\n@@ -34,7 +34,7 @@ error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n LL |     Foo.bar();\n    |         ^^^ deref recursion limit reached\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_autoderef`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_autoderef`)\n \n error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/infinite-autoderef.rs:26:9"}, {"sha": "15654dfaf88f154b3d9cfd2e2037b886767f0d25", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -7,7 +7,7 @@ LL |     () => (recursive!())\n LL |     recursive!()\n    |     ------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_macro_expansion`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`infinite_macro_expansion`)\n    = note: this error originates in the macro `recursive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "64280219d75920732119a815b77beae7b6728dec", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -7,7 +7,7 @@ LL |             $n + prob1!($n - 1);\n LL |     println!(\"Problem 1: {}\", prob1!(1000));\n    |                               ------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_16098`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_16098`)\n    = note: this error originates in the macro `prob1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "92e0f60079f72078831c52035ccfbb776c69b991", "filename": "src/test/ui/issues/issue-18400.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `_: Sized`\n LL |     0.contains(bits);\n    |       ^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_18400`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_18400`)\n note: required because of the requirements on the impl of `Set<&[_]>` for `{integer}`\n   --> $DIR/issue-18400.rs:6:16\n    |"}, {"sha": "9135c5ac36af5919552c93c0bc54bd14910ff5bf", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -13,7 +13,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:8:9\n    |\n@@ -33,7 +33,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:8:9\n    |\n@@ -53,7 +53,7 @@ error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<Eve\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:28:9\n    |\n@@ -78,7 +78,7 @@ error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<Eve\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:28:9\n    |\n@@ -103,7 +103,7 @@ error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<Alm\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:36:9\n    |\n@@ -128,7 +128,7 @@ error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<Alm\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-20413.rs:36:9\n    |"}, {"sha": "b345e90178742ee0049c08d733b604f2a1df7a0d", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n   --> $DIR/issue-23122-2.rs:8:15\n    |"}, {"sha": "7a1e62d49d35e4dc000950707871cf4578549c63", "filename": "src/test/ui/macros/issue-84632-eager-expansion-recursion-limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -7,7 +7,7 @@ macro_rules! a {\n     (A) => (concat!(\"\", a!()));\n     (A, $($A:ident),*) => (concat!(\"\", a!($($A),*)))\n     //~^ ERROR recursion limit reached\n-    //~| HELP consider adding\n+    //~| HELP consider increasing the recursion limit\n }\n \n fn main() {"}, {"sha": "aa7d33cfd11a0b4012cbd5f9a9d6f58b0647f52b", "filename": "src/test/ui/macros/issue-84632-eager-expansion-recursion-limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84632-eager-expansion-recursion-limit.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -7,7 +7,7 @@ LL |     (A, $($A:ident),*) => (concat!(\"\", a!($($A),*)))\n LL |     a!(A, A, A, A, A, A, A, A, A, A, A);\n    |     ------------------------------------ in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"30\"]` attribute to your crate (`issue_84632_eager_expansion_recursion_limit`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"30\"]` attribute to your crate (`issue_84632_eager_expansion_recursion_limit`)\n    = note: this error originates in the macro `a` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "dc38972d1d09ef6ad8d090e051100cb8593a341f", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -31,7 +31,7 @@ LL |         my_recursive_macro!();\n LL |     my_recursive_macro!();\n    |     ---------------------- in this macro invocation\n    |\n-   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`trace_faulty_macros`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"8\"]` attribute to your crate (`trace_faulty_macros`)\n    = note: this error originates in the macro `my_recursive_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro"}, {"sha": "d45bfc3ca55ea19c99ed034623444f060013a0ca", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1,6 +1,6 @@\n error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>: Iterator`\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_83150`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n    = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>`\n \n error: aborting due to previous error"}, {"sha": "2202e5b7713ee085cda572f405ef308f417d1c21", "filename": "src/test/ui/recursion_limit/no-value.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,6 @@\n+// Test the parse error for no value provided to recursion_limit\n+\n+#![recursion_limit]\n+//~^ ERROR malformed `recursion_limit` attribute input\n+\n+fn main() {}"}, {"sha": "35ac2c4cd17b3562cdd87f72ac704de08a7b76b1", "filename": "src/test/ui/recursion_limit/no-value.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fno-value.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `recursion_limit` attribute input\n+  --> $DIR/no-value.rs:3:1\n+   |\n+LL | #![recursion_limit]\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![recursion_limit = \"N\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "77bd8185676083a6fbb99593acb07c723d25454a", "filename": "src/test/ui/recursion_limit/zero-overflow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.rs?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,7 @@\n+//~ ERROR overflow evaluating the requirement `&mut Self: DispatchFromDyn<&mut RustaceansAreAwesome>\n+//~| HELP consider increasing the recursion limit\n+// build-fail\n+\n+#![recursion_limit = \"0\"]\n+\n+fn main() {}"}, {"sha": "9007ec0d784441d748bac82986a097581bce33c4", "filename": "src/test/ui/recursion_limit/zero-overflow.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero-overflow.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -0,0 +1,7 @@\n+error[E0275]: overflow evaluating the requirement `&mut Self: DispatchFromDyn<&mut RustaceansAreAwesome>`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"2\"]` attribute to your crate (`zero_overflow`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "c85cbadea710140585d4a63272c85b4248b1434a", "filename": "src/test/ui/recursion_limit/zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Fzero.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error: recursion limit reached while expanding `test!`\n LL | test!(test);\n    | ^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"0\"]` attribute to your crate (`zero`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"2\"]` attribute to your crate (`zero`)\n \n error: aborting due to previous error\n "}, {"sha": "920f66121e09897094a55787cdcd975c1105cde1", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `Option<_>: Sized`\n LL |     iso(left, right)\n    |     ^^^\n    |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n note: required by a bound in `Option`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}, {"sha": "d56b42c549dbb7e7d0f712c51b39400260d114d4", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit 0121d66aa2ef5ffa9735f86c2b56f5fdc5a837a6\n+Subproject commit d56b42c549dbb7e7d0f712c51b39400260d114d4"}, {"sha": "009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "patch": "@@ -1 +1 @@\n-Subproject commit f1d7f98ed07b9934286b9c4809dd4d7a47537879\n+Subproject commit 009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1"}]}