{"sha": "51d65caed490122a492622f3ffba4f0f8a81a9e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDY1Y2FlZDQ5MDEyMmE0OTI2MjJmM2ZmYmE0ZjBmOGE4MWE5ZTA=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-04-18T11:43:12Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-04-18T11:54:09Z"}, "message": "Prevent adding useless match arms", "tree": {"sha": "996cbddb9dda6585a3cf7ddfc16ead8b9ff82e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/996cbddb9dda6585a3cf7ddfc16ead8b9ff82e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d65caed490122a492622f3ffba4f0f8a81a9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d65caed490122a492622f3ffba4f0f8a81a9e0", "html_url": "https://github.com/rust-lang/rust/commit/51d65caed490122a492622f3ffba4f0f8a81a9e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d65caed490122a492622f3ffba4f0f8a81a9e0/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76285f16deabe8175f0bfa9ebd913b9edef302f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/76285f16deabe8175f0bfa9ebd913b9edef302f8", "html_url": "https://github.com/rust-lang/rust/commit/76285f16deabe8175f0bfa9ebd913b9edef302f8"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "800ce972c12bb990dcaed9bea063fe1c4e36fe95", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/51d65caed490122a492622f3ffba4f0f8a81a9e0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d65caed490122a492622f3ffba4f0f8a81a9e0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=51d65caed490122a492622f3ffba4f0f8a81a9e0", "patch": "@@ -8,7 +8,7 @@ use itertools::Itertools;\n use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n \n use crate::{\n-    utils::{does_pat_match_variant, render_snippet, Cursor},\n+    utils::{self, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -135,14 +135,18 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n }\n \n fn is_variant_missing(existing_pats: &[Pat], var: &Pat) -> bool {\n-    !existing_pats.iter().any(|pat| match (pat, var) {\n+    !existing_pats.iter().any(|pat| does_pat_match_variant(pat, var))\n+}\n+\n+// Fixme: this is still somewhat limited, use hir_ty::diagnostics::match_check?\n+fn does_pat_match_variant(pat: &Pat, var: &Pat) -> bool {\n+    match (pat, var) {\n+        (Pat::WildcardPat(_), _) => true,\n         (Pat::TuplePat(tpat), Pat::TuplePat(tvar)) => {\n-            // `does_pat_match_variant` gives false positives for tuple patterns\n-            // Fixme: this is still somewhat limited\n             tpat.fields().zip(tvar.fields()).all(|(p, v)| does_pat_match_variant(&p, &v))\n         }\n-        _ => does_pat_match_variant(pat, var),\n-    })\n+        _ => utils::does_pat_match_variant(pat, var),\n+    }\n }\n \n fn resolve_enum_def(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<hir::Enum> {\n@@ -504,11 +508,6 @@ fn main() {\n         );\n     }\n \n-    // Fixme: This fails with extra useless match arms added.\n-    // To fix, it needs full fledged match exhaustiveness checking from\n-    // hir_ty::diagnostics::match_check\n-    // see https://github.com/rust-analyzer/rust-analyzer/issues/8493\n-    #[ignore]\n     #[test]\n     fn fill_match_arms_tuple_of_enum_partial_with_wildcards() {\n         let ra_fixture = r#\"\n@@ -538,6 +537,23 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn fill_match_arms_partial_with_deep_pattern() {\n+        // Fixme: cannot handle deep patterns\n+        let ra_fixture = r#\"\n+fn main() {\n+    match $0Some(true) {\n+        Some(true) => {}\n+        None => {}\n+    }\n+}\n+\"#;\n+        check_assist_not_applicable(\n+            fill_match_arms,\n+            &format!(\"//- /main.rs crate:main deps:core{}{}\", ra_fixture, FamousDefs::FIXTURE),\n+        );\n+    }\n+\n     #[test]\n     fn fill_match_arms_tuple_of_enum_not_applicable() {\n         check_assist_not_applicable("}]}