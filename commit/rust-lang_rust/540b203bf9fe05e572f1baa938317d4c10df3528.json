{"sha": "540b203bf9fe05e572f1baa938317d4c10df3528", "node_id": "C_kwDOAAsO6NoAKDU0MGIyMDNiZjlmZTA1ZTU3MmYxYmFhOTM4MzE3ZDRjMTBkZjM1Mjg", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-03T13:14:51Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-10T13:20:16Z"}, "message": "errors: `DiagnosticMessage::Eager`\n\nAdd variant of `DiagnosticMessage` for eagerly translated messages\n(messages in the target language which don't need translated by the\nemitter during emission). Also adds `eager_subdiagnostic` function which\nis intended to be invoked by the diagnostic derive for subdiagnostic\nfields which are marked as needing eager translation.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "e392b42d3f75127fcb34a138b4b0e30f45f90953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e392b42d3f75127fcb34a138b4b0e30f45f90953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/540b203bf9fe05e572f1baa938317d4c10df3528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/540b203bf9fe05e572f1baa938317d4c10df3528", "html_url": "https://github.com/rust-lang/rust/commit/540b203bf9fe05e572f1baa938317d4c10df3528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/540b203bf9fe05e572f1baa938317d4c10df3528/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ac26289f17a5779d4318fb63436d94aebbf5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ac26289f17a5779d4318fb63436d94aebbf5ea", "html_url": "https://github.com/rust-lang/rust/commit/b4ac26289f17a5779d4318fb63436d94aebbf5ea"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "560d6c7c695066e809285a24ada7bb35e3b38e7b", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=540b203bf9fe05e572f1baa938317d4c10df3528", "patch": "@@ -276,6 +276,18 @@ pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n     Str(String),\n+    /// Translatable message which has already been translated eagerly.\n+    ///\n+    /// Some diagnostics have repeated subdiagnostics where the same interpolated variables would\n+    /// be instantiated multiple times with different values. As translation normally happens\n+    /// immediately prior to emission, after the diagnostic and subdiagnostic derive logic has run,\n+    /// the setting of diagnostic arguments in the derived code will overwrite previous variable\n+    /// values and only the final value will be set when translation occurs - resulting in\n+    /// incorrect diagnostics. Eager translation results in translation for a subdiagnostic\n+    /// happening immediately after the subdiagnostic derive's logic has been run. This variant\n+    /// stores messages which have been translated eagerly.\n+    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n+    Eager(String),\n     /// Identifier of a Fluent message. Instances of this variant are generated by the\n     /// `Subdiagnostic` derive.\n     FluentIdentifier(FluentId),\n@@ -303,8 +315,20 @@ impl<S: Into<String>> From<S> for SubdiagnosticMessage {\n #[rustc_diagnostic_item = \"DiagnosticMessage\"]\n pub enum DiagnosticMessage {\n     /// Non-translatable diagnostic message.\n-    // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n+    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n     Str(String),\n+    /// Translatable message which has already been translated eagerly.\n+    ///\n+    /// Some diagnostics have repeated subdiagnostics where the same interpolated variables would\n+    /// be instantiated multiple times with different values. As translation normally happens\n+    /// immediately prior to emission, after the diagnostic and subdiagnostic derive logic has run,\n+    /// the setting of diagnostic arguments in the derived code will overwrite previous variable\n+    /// values and only the final value will be set when translation occurs - resulting in\n+    /// incorrect diagnostics. Eager translation results in translation for a subdiagnostic\n+    /// happening immediately after the subdiagnostic derive's logic has been run. This variant\n+    /// stores messages which have been translated eagerly.\n+    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n+    Eager(String),\n     /// Identifier for a Fluent message (with optional attribute) corresponding to the diagnostic\n     /// message.\n     ///\n@@ -323,6 +347,7 @@ impl DiagnosticMessage {\n     pub fn with_subdiagnostic_message(&self, sub: SubdiagnosticMessage) -> Self {\n         let attr = match sub {\n             SubdiagnosticMessage::Str(s) => return DiagnosticMessage::Str(s),\n+            SubdiagnosticMessage::Eager(s) => return DiagnosticMessage::Eager(s),\n             SubdiagnosticMessage::FluentIdentifier(id) => {\n                 return DiagnosticMessage::FluentIdentifier(id, None);\n             }\n@@ -331,6 +356,7 @@ impl DiagnosticMessage {\n \n         match self {\n             DiagnosticMessage::Str(s) => DiagnosticMessage::Str(s.clone()),\n+            DiagnosticMessage::Eager(s) => DiagnosticMessage::Eager(s.clone()),\n             DiagnosticMessage::FluentIdentifier(id, _) => {\n                 DiagnosticMessage::FluentIdentifier(id.clone(), Some(attr))\n             }\n@@ -379,6 +405,7 @@ impl Into<SubdiagnosticMessage> for DiagnosticMessage {\n     fn into(self) -> SubdiagnosticMessage {\n         match self {\n             DiagnosticMessage::Str(s) => SubdiagnosticMessage::Str(s),\n+            DiagnosticMessage::Eager(s) => SubdiagnosticMessage::Eager(s),\n             DiagnosticMessage::FluentIdentifier(id, None) => {\n                 SubdiagnosticMessage::FluentIdentifier(id)\n             }"}, {"sha": "3e0840caaa6938ee5d6a985a0cc2b636a4aa114e", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=540b203bf9fe05e572f1baa938317d4c10df3528", "patch": "@@ -939,6 +939,23 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Add a subdiagnostic from a type that implements `Subdiagnostic` (see\n+    /// [rustc_macros::Subdiagnostic]). Performs eager translation of any translatable messages\n+    /// used in the subdiagnostic, so suitable for use with repeated messages (i.e. re-use of\n+    /// interpolated variables).\n+    pub fn eager_subdiagnostic(\n+        &mut self,\n+        handler: &crate::Handler,\n+        subdiagnostic: impl AddToDiagnostic,\n+    ) -> &mut Self {\n+        subdiagnostic.add_to_diagnostic_with(self, |diag, msg| {\n+            let args = diag.args();\n+            let msg = diag.subdiagnostic_message_to_diagnostic_message(msg);\n+            handler.eagerly_translate(msg, args)\n+        });\n+        self\n+    }\n+\n     pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self {\n         self.span = sp.into();\n         if let Some(span) = self.span.primary_span() {\n@@ -994,7 +1011,7 @@ impl Diagnostic {\n     /// Helper function that takes a `SubdiagnosticMessage` and returns a `DiagnosticMessage` by\n     /// combining it with the primary message of the diagnostic (if translatable, otherwise it just\n     /// passes the user's string along).\n-    fn subdiagnostic_message_to_diagnostic_message(\n+    pub(crate) fn subdiagnostic_message_to_diagnostic_message(\n         &self,\n         attr: impl Into<SubdiagnosticMessage>,\n     ) -> DiagnosticMessage {"}, {"sha": "61c9abbb0d691d97d5c2993b3dadacd803e95342", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=540b203bf9fe05e572f1baa938317d4c10df3528", "patch": "@@ -598,6 +598,17 @@ impl Handler {\n         }\n     }\n \n+    /// Translate `message` eagerly with `args`.\n+    pub fn eagerly_translate<'a>(\n+        &self,\n+        message: DiagnosticMessage,\n+        args: impl Iterator<Item = DiagnosticArg<'a, 'static>>,\n+    ) -> SubdiagnosticMessage {\n+        let inner = self.inner.borrow();\n+        let args = crate::translation::to_fluent_args(args);\n+        SubdiagnosticMessage::Eager(inner.emitter.translate_message(&message, &args).to_string())\n+    }\n+\n     // This is here to not allow mutation of flags;\n     // as of this writing it's only used in tests in librustc_middle.\n     pub fn can_emit_warnings(&self) -> bool {"}, {"sha": "a7737b467b75bd89dc266a03a78c941b96cb76eb", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540b203bf9fe05e572f1baa938317d4c10df3528/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=540b203bf9fe05e572f1baa938317d4c10df3528", "patch": "@@ -55,7 +55,9 @@ pub trait Translate {\n     ) -> Cow<'_, str> {\n         trace!(?message, ?args);\n         let (identifier, attr) = match message {\n-            DiagnosticMessage::Str(msg) => return Cow::Borrowed(&msg),\n+            DiagnosticMessage::Str(msg) | DiagnosticMessage::Eager(msg) => {\n+                return Cow::Borrowed(&msg);\n+            }\n             DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n         };\n "}]}