{"sha": "2c850691c11d3400c08ba9680a000d8d1cc2eae6", "node_id": "C_kwDOAAsO6NoAKDJjODUwNjkxYzExZDM0MDBjMDhiYTk2ODBhMDAwZDhkMWNjMmVhZTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-16T09:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T09:16:16Z"}, "message": "Rollup merge of #112639 - nnethercote:fix-dead_code_cgu, r=wesleywiser\n\nFix `dead_code_cgu` computation\n\nThis PR fixes a bug in `dead_code_cgu` computation, and also does some refactoring.\n\nr? ```@wesleywiser```", "tree": {"sha": "75131987ea970ee043ec6b4b82e47f1462cb6296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75131987ea970ee043ec6b4b82e47f1462cb6296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c850691c11d3400c08ba9680a000d8d1cc2eae6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjChgCRBK7hj4Ov3rIwAAQiYIAIbM7dDH2Xt8kKqwlmFoajD9\nlxYD30qYAmRdT6A3o2ZiASW+dYUj0MU3Q5HV93rMayECW89MJjfJRiWWS6gx7R4B\n3XWknqHkb1YfadcZm4XdoHeLNNWwRlLZ9Jk+2ypOhVdpJmXs6U9Wyeqa352Tn0q6\nyEWlRjkh8cdHaeQCLq+4M6Xc1IYaVQNYZbW/XxIyNdHyQZ/YKYjzNc8IY0ol22IU\nWPNm4TY81QbKxZrF65x2uqAP5BfzL5CAjUAB8rQk+wi5zy+X03GSGeCpIo0Z2PB0\n3m1P2ZmVb1OUaBbgSDlBt4Xnwdt3odHwxNs5LXX3JZqp5Xs2Pi+RoJO6ucNyhec=\n=jOQK\n-----END PGP SIGNATURE-----\n", "payload": "tree 75131987ea970ee043ec6b4b82e47f1462cb6296\nparent 48b645e0eafcdc7049ef9a20245df73490282449\nparent 2af5f2276d0cc2b34f2304415b1fbd6ccd42bc49\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1686906976 +0530\ncommitter GitHub <noreply@github.com> 1686906976 +0530\n\nRollup merge of #112639 - nnethercote:fix-dead_code_cgu, r=wesleywiser\n\nFix `dead_code_cgu` computation\n\nThis PR fixes a bug in `dead_code_cgu` computation, and also does some refactoring.\n\nr? ```@wesleywiser```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c850691c11d3400c08ba9680a000d8d1cc2eae6", "html_url": "https://github.com/rust-lang/rust/commit/2c850691c11d3400c08ba9680a000d8d1cc2eae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c850691c11d3400c08ba9680a000d8d1cc2eae6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b645e0eafcdc7049ef9a20245df73490282449", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b645e0eafcdc7049ef9a20245df73490282449", "html_url": "https://github.com/rust-lang/rust/commit/48b645e0eafcdc7049ef9a20245df73490282449"}, {"sha": "2af5f2276d0cc2b34f2304415b1fbd6ccd42bc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af5f2276d0cc2b34f2304415b1fbd6ccd42bc49", "html_url": "https://github.com/rust-lang/rust/commit/2af5f2276d0cc2b34f2304415b1fbd6ccd42bc49"}], "stats": {"total": 85, "additions": 41, "deletions": 44}, "files": [{"sha": "531644f0b849032d2b29752fbb67c1fbca88fc4d", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 41, "deletions": 44, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2c850691c11d3400c08ba9680a000d8d1cc2eae6/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c850691c11d3400c08ba9680a000d8d1cc2eae6/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=2c850691c11d3400c08ba9680a000d8d1cc2eae6", "patch": "@@ -155,14 +155,16 @@ where\n     // functions and statics defined in the local crate.\n     let PlacedRootMonoItems { mut codegen_units, internalization_candidates, unique_inlined_stats } = {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_roots\");\n-        place_root_mono_items(cx, mono_items)\n-    };\n+        let mut placed = place_root_mono_items(cx, mono_items);\n \n-    for cgu in &mut codegen_units {\n-        cgu.create_size_estimate(tcx);\n-    }\n+        for cgu in &mut placed.codegen_units {\n+            cgu.create_size_estimate(tcx);\n+        }\n \n-    debug_dump(tcx, \"ROOTS\", &codegen_units, unique_inlined_stats);\n+        debug_dump(tcx, \"ROOTS\", &placed.codegen_units, placed.unique_inlined_stats);\n+\n+        placed\n+    };\n \n     // Merge until we have at most `max_cgu_count` codegen units.\n     // `merge_codegen_units` is responsible for updating the CGU size\n@@ -179,59 +181,34 @@ where\n     // local functions the definition of which is marked with `#[inline]`.\n     {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_inline_items\");\n-        place_inlined_mono_items(cx, &mut codegen_units)\n-    };\n+        place_inlined_mono_items(cx, &mut codegen_units);\n \n-    for cgu in &mut codegen_units {\n-        cgu.create_size_estimate(tcx);\n-    }\n+        for cgu in &mut codegen_units {\n+            cgu.create_size_estimate(tcx);\n+        }\n \n-    debug_dump(tcx, \"INLINE\", &codegen_units, unique_inlined_stats);\n+        debug_dump(tcx, \"INLINE\", &codegen_units, unique_inlined_stats);\n+    }\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n     if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         internalize_symbols(cx, &mut codegen_units, internalization_candidates);\n+\n+        debug_dump(tcx, \"INTERNALIZE\", &codegen_units, unique_inlined_stats);\n     }\n \n+    // Mark one CGU for dead code, if necessary.\n     let instrument_dead_code =\n         tcx.sess.instrument_coverage() && !tcx.sess.instrument_coverage_except_unused_functions();\n-\n     if instrument_dead_code {\n-        assert!(\n-            codegen_units.len() > 0,\n-            \"There must be at least one CGU that code coverage data can be generated in.\"\n-        );\n-\n-        // Find the smallest CGU that has exported symbols and put the dead\n-        // function stubs in that CGU. We look for exported symbols to increase\n-        // the likelihood the linker won't throw away the dead functions.\n-        // FIXME(#92165): In order to truly resolve this, we need to make sure\n-        // the object file (CGU) containing the dead function stubs is included\n-        // in the final binary. This will probably require forcing these\n-        // function symbols to be included via `-u` or `/include` linker args.\n-        let mut cgus: Vec<_> = codegen_units.iter_mut().collect();\n-        cgus.sort_by_key(|cgu| cgu.size_estimate());\n-\n-        let dead_code_cgu =\n-            if let Some(cgu) = cgus.into_iter().rev().find(|cgu| {\n-                cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External)\n-            }) {\n-                cgu\n-            } else {\n-                // If there are no CGUs that have externally linked items,\n-                // then we just pick the first CGU as a fallback.\n-                &mut codegen_units[0]\n-            };\n-        dead_code_cgu.make_code_coverage_dead_code_cgu();\n+        mark_code_coverage_dead_code_cgu(&mut codegen_units);\n     }\n \n     // Ensure CGUs are sorted by name, so that we get deterministic results.\n     assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n \n-    debug_dump(tcx, \"FINAL\", &codegen_units, unique_inlined_stats);\n-\n     codegen_units\n }\n \n@@ -363,9 +340,7 @@ fn merge_codegen_units<'tcx>(\n \n         // Move the mono-items from `smallest` to `second_smallest`\n         second_smallest.modify_size_estimate(smallest.size_estimate());\n-        for (k, v) in smallest.items_mut().drain() {\n-            second_smallest.items_mut().insert(k, v);\n-        }\n+        second_smallest.items_mut().extend(smallest.items_mut().drain());\n \n         // Record that `second_smallest` now contains all the stuff that was\n         // in `smallest` before.\n@@ -545,6 +520,28 @@ fn internalize_symbols<'tcx>(\n     }\n }\n \n+fn mark_code_coverage_dead_code_cgu<'tcx>(codegen_units: &mut [CodegenUnit<'tcx>]) {\n+    assert!(!codegen_units.is_empty());\n+\n+    // Find the smallest CGU that has exported symbols and put the dead\n+    // function stubs in that CGU. We look for exported symbols to increase\n+    // the likelihood the linker won't throw away the dead functions.\n+    // FIXME(#92165): In order to truly resolve this, we need to make sure\n+    // the object file (CGU) containing the dead function stubs is included\n+    // in the final binary. This will probably require forcing these\n+    // function symbols to be included via `-u` or `/include` linker args.\n+    let dead_code_cgu = codegen_units\n+        .iter_mut()\n+        .filter(|cgu| cgu.items().iter().any(|(_, (linkage, _))| *linkage == Linkage::External))\n+        .min_by_key(|cgu| cgu.size_estimate());\n+\n+    // If there are no CGUs that have externally linked items, then we just\n+    // pick the first CGU as a fallback.\n+    let dead_code_cgu = if let Some(cgu) = dead_code_cgu { cgu } else { &mut codegen_units[0] };\n+\n+    dead_code_cgu.make_code_coverage_dead_code_cgu();\n+}\n+\n fn characteristic_def_id_of_mono_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mono_item: MonoItem<'tcx>,"}]}