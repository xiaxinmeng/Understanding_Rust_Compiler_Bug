{"sha": "0399d141b6730b2e3c84c5ed4af87ffd28402376", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTlkMTQxYjY3MzBiMmUzYzg0YzVlZDRhZjg3ZmZkMjg0MDIzNzY=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-02T22:05:16Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-02T22:58:00Z"}, "message": "Add comment explaining the reversed operands tests\n\nAlso, fix the goofy reversed names with something clearer.", "tree": {"sha": "ac9814ff403c4c45bf2604b600fe22339aca909b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac9814ff403c4c45bf2604b600fe22339aca909b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0399d141b6730b2e3c84c5ed4af87ffd28402376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0399d141b6730b2e3c84c5ed4af87ffd28402376", "html_url": "https://github.com/rust-lang/rust/commit/0399d141b6730b2e3c84c5ed4af87ffd28402376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0399d141b6730b2e3c84c5ed4af87ffd28402376/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de02a9ed67fb882f8fba5ed44162c6fdfa35964b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de02a9ed67fb882f8fba5ed44162c6fdfa35964b", "html_url": "https://github.com/rust-lang/rust/commit/de02a9ed67fb882f8fba5ed44162c6fdfa35964b"}], "stats": {"total": 119, "additions": 60, "deletions": 59}, "files": [{"sha": "510a13ea5b1be0348d5be4d4e921043b315f4c92", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=0399d141b6730b2e3c84c5ed4af87ffd28402376", "patch": "@@ -1,54 +1,54 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:28:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n    |                      ^^^^^^^^^ attempt to negate with overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:30:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n-LL |     const GEN: i32 = T::NEG + (-i32::MIN);\n-   |                               ^^^^^^^^^^^ attempt to negate with overflow\n+LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:33:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n    |                      ^^^^^^^^^^^^ attempt to add with overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:35:32\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n-LL |     const DDA: i32 =  T::ADD + (i32::MAX+1);\n-   |                                ^^^^^^^^^^^^ attempt to add with overflow\n+LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:38:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n    |                      ^^^^^ attempt to divide by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:40:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n-LL |     const VID: i32 = T::DIV + (1/0);\n-   |                               ^^^^^ attempt to divide by zero\n+LL |     const DIV_REV: i32 = T::DIV + (1/0);\n+   |                                   ^^^^^ attempt to divide by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:43:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n    |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:45:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n-LL |     const BOO: i32 = T::OOB + [1][1];\n-   |                               ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+LL |     const OOB_REV: i32 = T::OOB + [1][1];\n+   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "510a13ea5b1be0348d5be4d4e921043b315f4c92", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=0399d141b6730b2e3c84c5ed4af87ffd28402376", "patch": "@@ -1,54 +1,54 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:28:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n    |                      ^^^^^^^^^ attempt to negate with overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:30:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n-LL |     const GEN: i32 = T::NEG + (-i32::MIN);\n-   |                               ^^^^^^^^^^^ attempt to negate with overflow\n+LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:33:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n    |                      ^^^^^^^^^^^^ attempt to add with overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:35:32\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n-LL |     const DDA: i32 =  T::ADD + (i32::MAX+1);\n-   |                                ^^^^^^^^^^^^ attempt to add with overflow\n+LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:38:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n    |                      ^^^^^ attempt to divide by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:40:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n-LL |     const VID: i32 = T::DIV + (1/0);\n-   |                               ^^^^^ attempt to divide by zero\n+LL |     const DIV_REV: i32 = T::DIV + (1/0);\n+   |                                   ^^^^^ attempt to divide by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:43:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n    |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:45:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n-LL |     const BOO: i32 = T::OOB + [1][1];\n-   |                               ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+LL |     const OOB_REV: i32 = T::OOB + [1][1];\n+   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "510a13ea5b1be0348d5be4d4e921043b315f4c92", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=0399d141b6730b2e3c84c5ed4af87ffd28402376", "patch": "@@ -1,54 +1,54 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:28:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:29:22\n    |\n LL |     const NEG: i32 = -i32::MIN + T::NEG;\n    |                      ^^^^^^^^^ attempt to negate with overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:30:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:31:35\n    |\n-LL |     const GEN: i32 = T::NEG + (-i32::MIN);\n-   |                               ^^^^^^^^^^^ attempt to negate with overflow\n+LL |     const NEG_REV: i32 = T::NEG + (-i32::MIN);\n+   |                                   ^^^^^^^^^^^ attempt to negate with overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:33:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:34:22\n    |\n LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n    |                      ^^^^^^^^^^^^ attempt to add with overflow\n \n error: this arithmetic operation will overflow\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:35:32\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:36:36\n    |\n-LL |     const DDA: i32 =  T::ADD + (i32::MAX+1);\n-   |                                ^^^^^^^^^^^^ attempt to add with overflow\n+LL |     const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n+   |                                    ^^^^^^^^^^^^ attempt to add with overflow\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:38:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:39:22\n    |\n LL |     const DIV: i32 = (1/0) + T::DIV;\n    |                      ^^^^^ attempt to divide by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:40:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:41:35\n    |\n-LL |     const VID: i32 = T::DIV + (1/0);\n-   |                               ^^^^^ attempt to divide by zero\n+LL |     const DIV_REV: i32 = T::DIV + (1/0);\n+   |                                   ^^^^^ attempt to divide by zero\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:43:22\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:44:22\n    |\n LL |     const OOB: i32 = [1][1] + T::OOB;\n    |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: this operation will panic at runtime\n-  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:45:31\n+  --> $DIR/issue-69020-assoc-const-arith-overflow.rs:46:35\n    |\n-LL |     const BOO: i32 = T::OOB + [1][1];\n-   |                               ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+LL |     const OOB_REV: i32 = T::OOB + [1][1];\n+   |                                   ^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: aborting due to 8 previous errors\n "}, {"sha": "850f65ae9d183b9c8a70f874b4c51dcd80fa9182", "filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0399d141b6730b2e3c84c5ed4af87ffd28402376/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-69020-assoc-const-arith-overflow.rs?ref=0399d141b6730b2e3c84c5ed4af87ffd28402376", "patch": "@@ -9,39 +9,40 @@ use std::i32;\n \n pub trait Foo {\n     const NEG: i32;\n-    const GEN: i32;\n+    const NEG_REV: i32;\n \n     const ADD: i32;\n-    const DDA: i32;\n+    const ADD_REV: i32;\n \n     const DIV: i32;\n-    const VID: i32;\n+    const DIV_REV: i32;\n \n     const OOB: i32;\n-    const BOO: i32;\n+    const OOB_REV: i32;\n }\n \n-// These constants cannot be evaluated already (they depend on `T::N`), so\n-// they can just be linted like normal run-time code.  But codegen works\n-// a bit different in const context, so this test makes sure that we still catch overflow.\n+// These constants cannot be evaluated already (they depend on `T::N`), so they can just be linted\n+// like normal run-time code. But codegen works a bit different in const context, so this test\n+// makes sure that we still catch overflow. Also make sure we emit the same lints if we reverse the\n+// operands (so that the generic operand comes first).\n impl<T: Foo> Foo for Vec<T> {\n     const NEG: i32 = -i32::MIN + T::NEG;\n     //~^ ERROR arithmetic operation will overflow\n-    const GEN: i32 = T::NEG + (-i32::MIN);\n+    const NEG_REV: i32 = T::NEG + (-i32::MIN);\n     //~^ ERROR arithmetic operation will overflow\n \n     const ADD: i32 = (i32::MAX+1) + T::ADD;\n     //~^ ERROR arithmetic operation will overflow\n-    const DDA: i32 =  T::ADD + (i32::MAX+1);\n+    const ADD_REV: i32 =  T::ADD + (i32::MAX+1);\n     //~^ ERROR arithmetic operation will overflow\n \n     const DIV: i32 = (1/0) + T::DIV;\n     //~^ ERROR operation will panic\n-    const VID: i32 = T::DIV + (1/0);\n+    const DIV_REV: i32 = T::DIV + (1/0);\n     //~^ ERROR operation will panic\n \n     const OOB: i32 = [1][1] + T::OOB;\n     //~^ ERROR operation will panic\n-    const BOO: i32 = T::OOB + [1][1];\n+    const OOB_REV: i32 = T::OOB + [1][1];\n     //~^ ERROR operation will panic\n }"}]}