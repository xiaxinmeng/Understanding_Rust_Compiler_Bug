{"sha": "343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzAyOWZhOWU1MmNmNGFhZTdmMTdlZDZlMGU2YjViMDE3NWExNzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-29T13:15:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-29T13:15:07Z"}, "message": "Merge #7077\n\n7077: Avoid a couple of allocations r=Veykril a=lnicola\n\nr? @Veykril \r\n\r\nTBH I'm not sure this is worth it, but the other `Query` was already taking a `String`.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "004195234e0409ddc54514a2e8b737ed8e16b74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004195234e0409ddc54514a2e8b737ed8e16b74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6yvbCRBK7hj4Ov3rIwAAdHIIAAEBYOysl/rjJgg2r2o6WiWP\ntSr1svJ72gBMWP/JVYngf88K6ZaPw+Qk6RrLj1U46oJzCHlCTq5IgNFKUCbJa2OD\nVi7g0QicANSmX2fpZ8KkrR55qgFmlXiw/v2s186ceJkyxUQ0NJXqZpLwPhdjS1i2\nuwHtUTwizWhzM/rOSir57Bj29VyZAqYbN/JoHCyZLyinUplfvVpp25Pyj8pm069w\nQTIWr2Itrys9VfDw5Iqj/JGvM0CuW+Nd0H68Ejvt7IZb/VPzwqvx4aIWwBs0U/lf\nIduR9OgpWiJo6YPKLRzdRqDPKqqhjybQ+xEOB0aaD98kbqSmCaLIse0hlXnf2so=\n=qRoc\n-----END PGP SIGNATURE-----\n", "payload": "tree 004195234e0409ddc54514a2e8b737ed8e16b74e\nparent ef1177c5b5a7ced9866025a51c10e4375e2a37fd\nparent 42c24ff25f391a1e3662ce226d510aedc9d1f0e4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609247707 +0000\ncommitter GitHub <noreply@github.com> 1609247707 +0000\n\nMerge #7077\n\n7077: Avoid a couple of allocations r=Veykril a=lnicola\n\nr? @Veykril \r\n\r\nTBH I'm not sure this is worth it, but the other `Query` was already taking a `String`.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "html_url": "https://github.com/rust-lang/rust/commit/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1177c5b5a7ced9866025a51c10e4375e2a37fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1177c5b5a7ced9866025a51c10e4375e2a37fd", "html_url": "https://github.com/rust-lang/rust/commit/ef1177c5b5a7ced9866025a51c10e4375e2a37fd"}, {"sha": "42c24ff25f391a1e3662ce226d510aedc9d1f0e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c24ff25f391a1e3662ce226d510aedc9d1f0e4", "html_url": "https://github.com/rust-lang/rust/commit/42c24ff25f391a1e3662ce226d510aedc9d1f0e4"}], "stats": {"total": 121, "additions": 61, "deletions": 60}, "files": [{"sha": "9957012fe50c8db0f35a982f983d2e0e69a85114", "filename": "crates/assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n             // extra newlines in the indent block\n             let text = indent.text();\n             if text.starts_with('\\n') {\n-                buf.push_str(\"\\n\");\n+                buf.push('\\n');\n                 buf.push_str(text.trim_start_matches('\\n'));\n             } else {\n                 buf.push_str(text);"}, {"sha": "cb7a5c1042f98a8718b075ae283b93e15094c405", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -62,21 +62,22 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n \n-    let found_traits =\n-        imports_locator::find_exact_imports(&ctx.sema, current_crate, trait_token.text())\n-            .filter_map(\n-                |candidate: either::Either<hir::ModuleDef, hir::MacroDef>| match candidate {\n-                    either::Either::Left(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n-                    _ => None,\n-                },\n-            )\n-            .flat_map(|trait_| {\n-                current_module\n-                    .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n-                    .as_ref()\n-                    .map(mod_path_to_ast)\n-                    .zip(Some(trait_))\n-            });\n+    let found_traits = imports_locator::find_exact_imports(\n+        &ctx.sema,\n+        current_crate,\n+        trait_token.text().to_string(),\n+    )\n+    .filter_map(|candidate: either::Either<hir::ModuleDef, hir::MacroDef>| match candidate {\n+        either::Either::Left(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n+        _ => None,\n+    })\n+    .flat_map(|trait_| {\n+        current_module\n+            .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n+            .as_ref()\n+            .map(mod_path_to_ast)\n+            .zip(Some(trait_))\n+    });\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {"}, {"sha": "4ce82c1ba5eaa1bf34caa2e330b6384257b63846", "filename": "crates/assists/src/utils/import_assets.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -179,25 +179,24 @@ impl ImportAssets {\n             }\n         };\n \n-        let mut res =\n-            imports_locator::find_exact_imports(sema, current_crate, &self.get_search_query())\n-                .filter_map(filter)\n-                .filter_map(|candidate| {\n-                    let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n-                    if let Some(prefix_kind) = prefixed {\n-                        self.module_with_name_to_import.find_use_path_prefixed(\n-                            db,\n-                            item,\n-                            prefix_kind,\n-                        )\n-                    } else {\n-                        self.module_with_name_to_import.find_use_path(db, item)\n-                    }\n-                    .map(|path| (path, item))\n-                })\n-                .filter(|(use_path, _)| use_path.len() > 1)\n-                .take(20)\n-                .collect::<Vec<_>>();\n+        let mut res = imports_locator::find_exact_imports(\n+            sema,\n+            current_crate,\n+            self.get_search_query().to_string(),\n+        )\n+        .filter_map(filter)\n+        .filter_map(|candidate| {\n+            let item: hir::ItemInNs = candidate.either(Into::into, Into::into);\n+            if let Some(prefix_kind) = prefixed {\n+                self.module_with_name_to_import.find_use_path_prefixed(db, item, prefix_kind)\n+            } else {\n+                self.module_with_name_to_import.find_use_path(db, item)\n+            }\n+            .map(|path| (path, item))\n+        })\n+        .filter(|(use_path, _)| use_path.len() > 1)\n+        .take(20)\n+        .collect::<Vec<_>>();\n         res.sort_by_key(|(path, _)| path.clone());\n         res\n     }"}, {"sha": "81a6d00e2b6551bdbbe7958bb84370fe2a8da19c", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -135,11 +135,12 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n \n+    let user_input_lowercased = potential_import_name.to_lowercase();\n     let mut all_mod_paths = imports_locator::find_similar_imports(\n         &ctx.sema,\n         ctx.krate?,\n         Some(40),\n-        &potential_import_name,\n+        potential_import_name,\n         true,\n     )\n     .filter_map(|import_candidate| {\n@@ -155,7 +156,6 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     .filter(|(mod_path, _)| mod_path.len() > 1)\n     .collect::<Vec<_>>();\n \n-    let user_input_lowercased = potential_import_name.to_lowercase();\n     all_mod_paths.sort_by_cached_key(|(mod_path, _)| {\n         compute_fuzzy_completion_order_key(mod_path, &user_input_lowercased)\n     });"}, {"sha": "c57d05bbeb6e0ded6c6d6394b14f7646ae4ed75a", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -137,7 +137,7 @@ pub fn resolve_completion_edits(\n     config: &CompletionConfig,\n     position: FilePosition,\n     full_import_path: &str,\n-    imported_name: &str,\n+    imported_name: String,\n ) -> Option<Vec<TextEdit>> {\n     let ctx = CompletionContext::new(db, position, config)?;\n     let anchor = ctx.name_ref_syntax.as_ref()?;"}, {"sha": "c4dc894df5fffc109c91e3abc7c23929f4a4bd4d", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -262,10 +262,11 @@ pub struct Query {\n }\n \n impl Query {\n-    pub fn new(query: &str) -> Self {\n+    pub fn new(query: String) -> Self {\n+        let lowercased = query.to_lowercase();\n         Self {\n-            query: query.to_string(),\n-            lowercased: query.to_lowercase(),\n+            query,\n+            lowercased,\n             name_only: false,\n             search_mode: SearchMode::Contains,\n             case_sensitive: false,\n@@ -774,7 +775,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"fmt\").search_mode(SearchMode::Fuzzy),\n+            Query::new(\"fmt\".to_string()).search_mode(SearchMode::Fuzzy),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n@@ -789,7 +790,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"fmt\").search_mode(SearchMode::Equals),\n+            Query::new(\"fmt\".to_string()).search_mode(SearchMode::Equals),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n@@ -802,7 +803,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"fmt\").search_mode(SearchMode::Contains),\n+            Query::new(\"fmt\".to_string()).search_mode(SearchMode::Contains),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n@@ -843,7 +844,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"fmt\"),\n+            Query::new(\"fmt\".to_string()),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n@@ -857,7 +858,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"fmt\").name_only(),\n+            Query::new(\"fmt\".to_string()).name_only(),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n@@ -881,7 +882,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"FMT\"),\n+            Query::new(\"FMT\".to_string()),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::fmt (v)\n@@ -893,7 +894,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"FMT\").case_sensitive(),\n+            Query::new(\"FMT\".to_string()).case_sensitive(),\n             expect![[r#\"\n                 dep::FMT (t)\n                 dep::FMT (v)\n@@ -922,7 +923,7 @@ mod tests {\n         pub fn no() {}\n     \"#,\n             \"main\",\n-            Query::new(\"\").limit(2),\n+            Query::new(\"\".to_string()).limit(2),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::Fmt (t)\n@@ -943,7 +944,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"FMT\"),\n+            Query::new(\"FMT\".to_string()),\n             expect![[r#\"\n                 dep::fmt (t)\n                 dep::fmt (v)\n@@ -955,7 +956,7 @@ mod tests {\n         check_search(\n             ra_fixture,\n             \"main\",\n-            Query::new(\"FMT\").exclude_import_kind(ImportKind::Adt),\n+            Query::new(\"FMT\".to_string()).exclude_import_kind(ImportKind::Adt),\n             expect![[r#\"\"#]],\n         );\n     }"}, {"sha": "9bf358775958a17a5c8c2f9d49cc96c6e7793724", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -249,7 +249,7 @@ impl CrateDefMap {\n                     buf.push_str(\" _\");\n                 }\n \n-                buf.push_str(\"\\n\");\n+                buf.push('\\n');\n             }\n \n             for (name, child) in map.modules[module].children.iter() {"}, {"sha": "b3331f03f151eb2e642cffb340b5df001b07add0", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -475,7 +475,7 @@ impl Analysis {\n         config: &CompletionConfig,\n         position: FilePosition,\n         full_import_path: &str,\n-        imported_name: &str,\n+        imported_name: String,\n     ) -> Cancelable<Vec<TextEdit>> {\n         Ok(self\n             .with_db(|db| {"}, {"sha": "0f4c2ca473b36a64507c0fa8bc64dedae0204d32", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -15,14 +15,14 @@ use rustc_hash::FxHashSet;\n pub fn find_exact_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n-    name_to_import: &str,\n+    name_to_import: String,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n     let _p = profile::span(\"find_exact_imports\");\n     find_imports(\n         sema,\n         krate,\n         {\n-            let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n+            let mut local_query = symbol_index::Query::new(name_to_import.clone());\n             local_query.exact();\n             local_query.limit(40);\n             local_query\n@@ -39,18 +39,18 @@ pub fn find_similar_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n     limit: Option<usize>,\n-    fuzzy_search_string: &str,\n+    fuzzy_search_string: String,\n     name_only: bool,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n     let _p = profile::span(\"find_similar_imports\");\n \n-    let mut external_query =\n-        import_map::Query::new(fuzzy_search_string).search_mode(import_map::SearchMode::Fuzzy);\n+    let mut external_query = import_map::Query::new(fuzzy_search_string.clone())\n+        .search_mode(import_map::SearchMode::Fuzzy);\n     if name_only {\n         external_query = external_query.name_only();\n     }\n \n-    let mut local_query = symbol_index::Query::new(fuzzy_search_string.to_string());\n+    let mut local_query = symbol_index::Query::new(fuzzy_search_string);\n \n     if let Some(limit) = limit {\n         local_query.limit(limit);"}, {"sha": "23f323f5568733464e8dca1800da76703453eba7", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343029fa9e52cf4aae7f17ed6e0e6b5b0175a172/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=343029fa9e52cf4aae7f17ed6e0e6b5b0175a172", "patch": "@@ -681,7 +681,7 @@ pub(crate) fn handle_completion_resolve(\n             &snap.config.completion,\n             FilePosition { file_id, offset },\n             &resolve_data.full_import_path,\n-            &resolve_data.imported_name,\n+            resolve_data.imported_name,\n         )?\n         .into_iter()\n         .flat_map(|edit| {"}]}