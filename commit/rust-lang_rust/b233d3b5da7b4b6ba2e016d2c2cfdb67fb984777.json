{"sha": "b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "node_id": "C_kwDOAAsO6NoAKGIyMzNkM2I1ZGE3YjRiNmJhMmUwMTZkMmMyY2ZkYjY3ZmI5ODQ3Nzc", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-10-14T07:23:09Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-11-10T06:06:03Z"}, "message": "Add support for specifying multiple clobber_abi in `asm!`\nAllow multiple clobber_abi in asm\n\nUpdate docs\nFix aarch64 test\nCombine abis\nEmit duplicate ABI error, empty ABI list error\nmultiple clobber_abi", "tree": {"sha": "2adcf76b039d8e10523334072a18c5aa1e8fe5dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2adcf76b039d8e10523334072a18c5aa1e8fe5dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "html_url": "https://github.com/rust-lang/rust/commit/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214cd1f228a463b59f73ee46c8ae3b30f85de253", "url": "https://api.github.com/repos/rust-lang/rust/commits/214cd1f228a463b59f73ee46c8ae3b30f85de253", "html_url": "https://github.com/rust-lang/rust/commit/214cd1f228a463b59f73ee46c8ae3b30f85de253"}], "stats": {"total": 513, "additions": 368, "deletions": 145}, "files": [{"sha": "abfe8360987c868bbc696928ec38eb92ea60b7bc", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -2058,7 +2058,7 @@ pub struct InlineAsm {\n     pub template: Vec<InlineAsmTemplatePiece>,\n     pub template_strs: Box<[(Symbol, Option<Symbol>, Span)]>,\n     pub operands: Vec<(InlineAsmOperand, Span)>,\n-    pub clobber_abi: Option<(Symbol, Span)>,\n+    pub clobber_abis: Vec<(Symbol, Span)>,\n     pub options: InlineAsmOptions,\n     pub line_spans: Vec<Span>,\n }\n@@ -2715,7 +2715,7 @@ pub enum ItemKind {\n     /// E.g., `extern {}` or `extern \"C\" {}`.\n     ForeignMod(ForeignMod),\n     /// Module-level inline assembly (from `global_asm!()`).\n-    GlobalAsm(InlineAsm),\n+    GlobalAsm(Box<InlineAsm>),\n     /// A type alias (`type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`."}, {"sha": "cfa97ff84ec498910e0e1a9fea3dd8e716967274", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -2,6 +2,7 @@ use super::LoweringContext;\n \n use rustc_ast::*;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_session::parse::feature_err;\n@@ -49,22 +50,47 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 .emit();\n         }\n \n-        let mut clobber_abi = None;\n+        let mut clobber_abis = FxHashMap::default();\n         if let Some(asm_arch) = asm_arch {\n-            if let Some((abi_name, abi_span)) = asm.clobber_abi {\n-                match asm::InlineAsmClobberAbi::parse(asm_arch, &self.sess.target, abi_name) {\n-                    Ok(abi) => clobber_abi = Some((abi, abi_span)),\n+            for (abi_name, abi_span) in &asm.clobber_abis {\n+                match asm::InlineAsmClobberAbi::parse(asm_arch, &self.sess.target, *abi_name) {\n+                    Ok(abi) => {\n+                        // If the abi was already in the list, emit an error\n+                        match clobber_abis.get(&abi) {\n+                            Some((prev_name, prev_sp)) => {\n+                                let mut err = self.sess.struct_span_err(\n+                                    *abi_span,\n+                                    &format!(\"`{}` ABI specified multiple times\", prev_name),\n+                                );\n+                                err.span_label(*prev_sp, \"previously specified here\");\n+\n+                                // Multiple different abi names may actually be the same ABI\n+                                // If the specified ABIs are not the same name, alert the user that they resolve to the same ABI\n+                                let source_map = self.sess.source_map();\n+                                if source_map.span_to_snippet(*prev_sp)\n+                                    != source_map.span_to_snippet(*abi_span)\n+                                {\n+                                    err.note(\"these ABIs are equivalent on the current target\");\n+                                }\n+\n+                                err.emit();\n+                            }\n+                            None => {\n+                                clobber_abis.insert(abi, (abi_name, *abi_span));\n+                            }\n+                        }\n+                    }\n                     Err(&[]) => {\n                         self.sess\n                             .struct_span_err(\n-                                abi_span,\n+                                *abi_span,\n                                 \"`clobber_abi` is not supported on this target\",\n                             )\n                             .emit();\n                     }\n                     Err(supported_abis) => {\n                         let mut err =\n-                            self.sess.struct_span_err(abi_span, \"invalid ABI for `clobber_abi`\");\n+                            self.sess.struct_span_err(*abi_span, \"invalid ABI for `clobber_abi`\");\n                         let mut abis = format!(\"`{}`\", supported_abis[0]);\n                         for m in &supported_abis[1..] {\n                             let _ = write!(abis, \", `{}`\", m);\n@@ -348,8 +374,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         // If a clobber_abi is specified, add the necessary clobbers to the\n         // operands list.\n-        if let Some((abi, abi_span)) = clobber_abi {\n+        let mut clobbered = FxHashSet::default();\n+        for (abi, (_, abi_span)) in clobber_abis {\n             for &clobber in abi.clobbered_regs() {\n+                // Don't emit a clobber for a register already clobbered\n+                if clobbered.contains(&clobber) {\n+                    continue;\n+                }\n+\n                 let mut output_used = false;\n                 clobber.overlapping_regs(|reg| {\n                     if used_output_regs.contains_key(&reg) {\n@@ -366,6 +398,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         },\n                         self.lower_span(abi_span),\n                     ));\n+                    clobbered.insert(clobber);\n                 }\n             }\n         }"}, {"sha": "f1f2387866d0d3d71afbcc6807919d9df11ec6a5", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -2235,8 +2235,8 @@ impl<'a> State<'a> {\n \n         let mut args = vec![AsmArg::Template(InlineAsmTemplatePiece::to_string(&asm.template))];\n         args.extend(asm.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n-        if let Some((abi, _)) = asm.clobber_abi {\n-            args.push(AsmArg::ClobberAbi(abi));\n+        for (abi, _) in &asm.clobber_abis {\n+            args.push(AsmArg::ClobberAbi(*abi));\n         }\n         if !asm.options.is_empty() {\n             args.push(AsmArg::Options(asm.options));"}, {"sha": "41662f46f115296e821e0a932a1601ceee4bf42d", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 61, "deletions": 31, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -19,7 +19,7 @@ struct AsmArgs {\n     operands: Vec<(ast::InlineAsmOperand, Span)>,\n     named_args: FxHashMap<Symbol, usize>,\n     reg_args: FxHashSet<usize>,\n-    clobber_abi: Option<(Symbol, Span)>,\n+    clobber_abis: Vec<(Symbol, Span)>,\n     options: ast::InlineAsmOptions,\n     options_spans: Vec<Span>,\n }\n@@ -64,7 +64,7 @@ fn parse_args<'a>(\n         operands: vec![],\n         named_args: FxHashMap::default(),\n         reg_args: FxHashSet::default(),\n-        clobber_abi: None,\n+        clobber_abis: Vec::new(),\n         options: ast::InlineAsmOptions::empty(),\n         options_spans: vec![],\n     };\n@@ -210,9 +210,9 @@ fn parse_args<'a>(\n                 .span_labels(args.options_spans.clone(), \"previous options\")\n                 .span_label(span, \"argument\")\n                 .emit();\n-        } else if let Some((_, abi_span)) = args.clobber_abi {\n+        } else if let Some((_, abi_span)) = args.clobber_abis.last() {\n             ecx.struct_span_err(span, \"arguments are not allowed after clobber_abi\")\n-                .span_label(abi_span, \"clobber_abi\")\n+                .span_label(*abi_span, \"clobber_abi\")\n                 .span_label(span, \"argument\")\n                 .emit();\n         }\n@@ -322,10 +322,13 @@ fn parse_args<'a>(\n         // Bail out now since this is likely to confuse MIR\n         return Err(err);\n     }\n-    if let Some((_, abi_span)) = args.clobber_abi {\n+\n+    if args.clobber_abis.len() > 0 {\n         if is_global_asm {\n-            let err =\n-                ecx.struct_span_err(abi_span, \"`clobber_abi` cannot be used with `global_asm!`\");\n+            let err = ecx.struct_span_err(\n+                args.clobber_abis.iter().map(|(_, span)| *span).collect::<Vec<Span>>(),\n+                \"`clobber_abi` cannot be used with `global_asm!`\",\n+            );\n \n             // Bail out now since this is likely to confuse later stages\n             return Err(err);\n@@ -335,7 +338,10 @@ fn parse_args<'a>(\n                 regclass_outputs.clone(),\n                 \"asm with `clobber_abi` must specify explicit registers for outputs\",\n             )\n-            .span_label(abi_span, \"clobber_abi\")\n+            .span_labels(\n+                args.clobber_abis.iter().map(|(_, span)| *span).collect::<Vec<Span>>(),\n+                \"clobber_abi\",\n+            )\n             .span_labels(regclass_outputs, \"generic outputs\")\n             .emit();\n         }\n@@ -439,37 +445,61 @@ fn parse_clobber_abi<'a>(\n \n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n \n-    let clobber_abi = match p.parse_str_lit() {\n-        Ok(str_lit) => str_lit.symbol_unescaped,\n-        Err(opt_lit) => {\n-            let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n-            let mut err = p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");\n-            err.span_label(span, \"not a string literal\");\n-            return Err(err);\n-        }\n-    };\n+    if p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n+        let err = p.sess.span_diagnostic.struct_span_err(\n+            p.token.span,\n+            \"at least one abi must be provided as an argument to `clobber_abi`\",\n+        );\n+        return Err(err);\n+    }\n \n-    p.expect(&token::CloseDelim(token::DelimToken::Paren))?;\n+    let mut new_abis = Vec::new();\n+    loop {\n+        match p.parse_str_lit() {\n+            Ok(str_lit) => {\n+                new_abis.push((str_lit.symbol_unescaped, str_lit.span));\n+            }\n+            Err(opt_lit) => {\n+                // If the non-string literal is a closing paren then it's the end of the list and is fine\n+                if p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n+                    break;\n+                }\n+                let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n+                let mut err =\n+                    p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");\n+                err.span_label(span, \"not a string literal\");\n+                return Err(err);\n+            }\n+        };\n \n-    let new_span = span_start.to(p.prev_token.span);\n+        // Allow trailing commas\n+        if p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n+            break;\n+        }\n+        p.expect(&token::Comma)?;\n+    }\n \n-    if let Some((_, prev_span)) = args.clobber_abi {\n-        let mut err = p\n-            .sess\n-            .span_diagnostic\n-            .struct_span_err(new_span, \"clobber_abi specified multiple times\");\n-        err.span_label(prev_span, \"clobber_abi previously specified here\");\n-        return Err(err);\n-    } else if !args.options_spans.is_empty() {\n+    let full_span = span_start.to(p.prev_token.span);\n+\n+    if !args.options_spans.is_empty() {\n         let mut err = p\n             .sess\n             .span_diagnostic\n-            .struct_span_err(new_span, \"clobber_abi is not allowed after options\");\n+            .struct_span_err(full_span, \"clobber_abi is not allowed after options\");\n         err.span_labels(args.options_spans.clone(), \"options\");\n         return Err(err);\n     }\n \n-    args.clobber_abi = Some((clobber_abi, new_span));\n+    match &new_abis[..] {\n+        // should have errored above during parsing\n+        [] => unreachable!(),\n+        [(abi, _span)] => args.clobber_abis.push((*abi, full_span)),\n+        [abis @ ..] => {\n+            for (abi, span) in abis {\n+                args.clobber_abis.push((*abi, *span));\n+            }\n+        }\n+    }\n \n     Ok(())\n }\n@@ -770,7 +800,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n         template,\n         template_strs: template_strs.into_boxed_slice(),\n         operands: args.operands,\n-        clobber_abi: args.clobber_abi,\n+        clobber_abis: args.clobber_abis,\n         options: args.options,\n         line_spans,\n     })\n@@ -815,7 +845,7 @@ pub fn expand_global_asm<'cx>(\n                     ident: Ident::empty(),\n                     attrs: Vec::new(),\n                     id: ast::DUMMY_NODE_ID,\n-                    kind: ast::ItemKind::GlobalAsm(inline_asm),\n+                    kind: ast::ItemKind::GlobalAsm(Box::new(inline_asm)),\n                     vis: ast::Visibility {\n                         span: sp.shrink_to_lo(),\n                         kind: ast::VisibilityKind::Inherited,"}, {"sha": "d318c0de91893e84308240d5d39d46c03d5a3970", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -319,7 +319,7 @@ fn call_foo(arg: i32) -> i32 {\n \n Note that the `fn` or `static` item does not need to be public or `#[no_mangle]`: the compiler will automatically insert the appropriate mangled symbol name into the assembly code.\n \n-By default, `asm!` assumes that any register not specified as an output will have its contents preserved by the assembly code. The [`clobber_abi`](#abi-clobbers) argument to `asm!` tells the compiler to automatically insert the necessary clobber operands according to the given calling convention ABI: any register which is not fully preserved in that ABI will be treated as clobbered.\n+By default, `asm!` assumes that any register not specified as an output will have its contents preserved by the assembly code. The [`clobber_abi`](#abi-clobbers) argument to `asm!` tells the compiler to automatically insert the necessary clobber operands according to the given calling convention ABI: any register which is not fully preserved in that ABI will be treated as clobbered.  Multiple `clobber_abi` arguments may be provided and all clobbers from all specified ABIs will be inserted.\n \n ## Register template modifiers\n \n@@ -453,10 +453,10 @@ reg_spec := <register class> / \"<explicit register>\"\n operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n-clobber_abi := \"clobber_abi(\" <abi> \")\"\n+clobber_abi := \"clobber_abi(\" <abi> *[\",\" <abi>] [\",\"] \")\"\n option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n-asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" clobber_abi] *(\",\" options) [\",\"] \")\"\n+asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) *(\",\" clobber_abi) *(\",\" options) [\",\"] \")\"\n ```\n \n Inline assembly is currently supported on the following architectures:\n@@ -799,6 +799,8 @@ As stated in the previous section, passing an input value smaller than the regis\n \n The `clobber_abi` keyword can be used to apply a default set of clobbers to an `asm` block. This will automatically insert the necessary clobber constraints as needed for calling a function with a particular calling convention: if the calling convention does not fully preserve the value of a register across a call then a `lateout(\"reg\") _` is implicitly added to the operands list.\n \n+`clobber_abi` may be specified any number of times. It will insert a clobber for all unique registers in the union of all specified calling conventions.\n+\n Generic register class outputs are disallowed by the compiler when `clobber_abi` is used: all outputs must specify an explicit register. Explicit register outputs have precedence over the implicit clobbers inserted by `clobber_abi`: a clobber will only be inserted for a register if that register is not used as an output.\n The following ABIs can be used with `clobber_abi`:\n "}, {"sha": "798015d110034af5896b7caa7c176c5cb7b0146f", "filename": "src/test/ui/asm/aarch64/parse-error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -51,7 +51,6 @@ fn main() {\n         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n         //~^ ERROR clobber_abi is not allowed after options\n         asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-        //~^ ERROR clobber_abi specified multiple times\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n@@ -121,7 +120,7 @@ global_asm!(\"\", options(), clobber_abi(\"C\"));\n global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n //~^ ERROR clobber_abi is not allowed after options\n global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-//~^ ERROR clobber_abi specified multiple times\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{a}\", a = const FOO, a = const BAR);\n //~^ ERROR duplicate argument named `a`\n //~^^ ERROR argument never used"}, {"sha": "0472f36fe6d2f6c8874628e2ed9f1cf467cb346e", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 45, "deletions": 55, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -132,262 +132,252 @@ LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n    |                    |\n    |                    options\n \n-error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:53:36\n-   |\n-LL |         asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-   |                  ----------------  ^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  clobber_abi previously specified here\n-\n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:55:36\n+  --> $DIR/parse-error.rs:54:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:55:36\n+  --> $DIR/parse-error.rs:54:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:60:18\n+  --> $DIR/parse-error.rs:59:18\n    |\n LL |         asm!(\"\", a = in(\"x0\") foo);\n    |                  ^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:62:35\n+  --> $DIR/parse-error.rs:61:35\n    |\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                     ------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:65:35\n+  --> $DIR/parse-error.rs:64:35\n    |\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                     ------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:68:35\n+  --> $DIR/parse-error.rs:67:35\n    |\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                     ------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:71:29\n+  --> $DIR/parse-error.rs:70:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:73:33\n+  --> $DIR/parse-error.rs:72:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:75:14\n+  --> $DIR/parse-error.rs:74:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:77:21\n+  --> $DIR/parse-error.rs:76:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:79:28\n+  --> $DIR/parse-error.rs:78:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:81:31\n+  --> $DIR/parse-error.rs:80:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:83:35\n+  --> $DIR/parse-error.rs:82:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:90:1\n+  --> $DIR/parse-error.rs:89:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:92:13\n+  --> $DIR/parse-error.rs:91:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:94:18\n+  --> $DIR/parse-error.rs:93:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:96:19\n+  --> $DIR/parse-error.rs:95:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:98:24\n+  --> $DIR/parse-error.rs:97:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:100:30\n+  --> $DIR/parse-error.rs:99:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:102:25\n+  --> $DIR/parse-error.rs:101:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:104:25\n+  --> $DIR/parse-error.rs:103:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:106:25\n+  --> $DIR/parse-error.rs:105:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:108:30\n+  --> $DIR/parse-error.rs:107:30\n    |\n LL | global_asm!(\"{}\", options(), const FOO);\n    |                   ---------  ^^^^^^^^^ argument\n    |                   |\n    |                   previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:110:29\n+  --> $DIR/parse-error.rs:109:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected `)`, found `FOO`\n-  --> $DIR/parse-error.rs:112:33\n+  --> $DIR/parse-error.rs:111:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected `)`\n \n error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:114:32\n+  --> $DIR/parse-error.rs:113:32\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                ^ expected `)`\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:116:37\n+  --> $DIR/parse-error.rs:115:37\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ----------------  ^^^^^^^^^ argument\n    |                   |\n    |                   clobber_abi\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:116:19\n+  --> $DIR/parse-error.rs:115:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:119:28\n+  --> $DIR/parse-error.rs:118:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                 ---------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:121:30\n+  --> $DIR/parse-error.rs:120:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   ---------  ^^^^^^^^^^^^^^^^\n    |                   |\n    |                   options\n \n-error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:123:35\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:122:35\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-   |                 ----------------  ^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 clobber_abi previously specified here\n+   |                 ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:125:35\n+  --> $DIR/parse-error.rs:124:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:125:35\n+  --> $DIR/parse-error.rs:124:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n-  --> $DIR/parse-error.rs:128:28\n+  --> $DIR/parse-error.rs:127:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:130:30\n+  --> $DIR/parse-error.rs:129:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:132:13\n+  --> $DIR/parse-error.rs:131:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:134:20\n+  --> $DIR/parse-error.rs:133:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -413,7 +403,7 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:55:31\n+  --> $DIR/parse-error.rs:54:31\n    |\n LL |     let mut foo = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const foo`\n@@ -422,7 +412,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:55:46\n+  --> $DIR/parse-error.rs:54:46\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -431,7 +421,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:62:45\n+  --> $DIR/parse-error.rs:61:45\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -440,7 +430,7 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:65:45\n+  --> $DIR/parse-error.rs:64:45\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n@@ -449,14 +439,14 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:68:41\n+  --> $DIR/parse-error.rs:67:41\n    |\n LL |     let mut bar = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                                         ^^^ non-constant value\n \n-error: aborting due to 66 previous errors\n+error: aborting due to 65 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "f4ca033048d71e8451a5809f5c4034d0c5fe4059", "filename": "src/test/ui/asm/x86_64/bad-clobber-abi.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-clobber-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-clobber-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-clobber-abi.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -0,0 +1,32 @@\n+// needs-asm-support\n+// only-x86_64\n+\n+// checks various modes of failure for the `clobber_abi` argument (after parsing)\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", clobber_abi(\"C\"));\n+        asm!(\"\", clobber_abi(\"foo\"));\n+        //~^ ERROR invalid ABI for `clobber_abi`\n+        asm!(\"\", clobber_abi(\"C\", \"foo\"));\n+        //~^ ERROR invalid ABI for `clobber_abi`\n+        asm!(\"\", clobber_abi(\"C\", \"C\"));\n+        //~^ ERROR `C` ABI specified multiple times\n+        asm!(\"\", clobber_abi(\"win64\", \"sysv64\"));\n+        asm!(\"\", clobber_abi(\"win64\", \"efiapi\"));\n+        //~^ ERROR `win64` ABI specified multiple times\n+        asm!(\"\", clobber_abi(\"C\", \"foo\", \"C\"));\n+        //~^ ERROR invalid ABI for `clobber_abi`\n+        //~| ERROR `C` ABI specified multiple times\n+        asm!(\"\", clobber_abi(\"win64\", \"foo\", \"efiapi\"));\n+        //~^ ERROR invalid ABI for `clobber_abi`\n+        //~| ERROR `win64` ABI specified multiple times\n+        asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n+        //~^ ERROR `C` ABI specified multiple times\n+        asm!(\"\", clobber_abi(\"win64\"), clobber_abi(\"sysv64\"));\n+        asm!(\"\", clobber_abi(\"win64\"), clobber_abi(\"efiapi\"));\n+        //~^ ERROR `win64` ABI specified multiple times\n+    }\n+}"}, {"sha": "46e91a3951fb5bd23a9e7adbcc3b57b4b1315aa9", "filename": "src/test/ui/asm/x86_64/bad-clobber-abi.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-clobber-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-clobber-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-clobber-abi.stderr?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -0,0 +1,88 @@\n+error: invalid ABI for `clobber_abi`\n+  --> $DIR/bad-clobber-abi.rs:11:18\n+   |\n+LL |         asm!(\"\", clobber_abi(\"foo\"));\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following ABIs are supported on this target: `C`, `system`, `efiapi`, `win64`, `sysv64`\n+\n+error: invalid ABI for `clobber_abi`\n+  --> $DIR/bad-clobber-abi.rs:13:35\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\", \"foo\"));\n+   |                                   ^^^^^\n+   |\n+   = note: the following ABIs are supported on this target: `C`, `system`, `efiapi`, `win64`, `sysv64`\n+\n+error: `C` ABI specified multiple times\n+  --> $DIR/bad-clobber-abi.rs:15:35\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\", \"C\"));\n+   |                              ---  ^^^\n+   |                              |\n+   |                              previously specified here\n+\n+error: `win64` ABI specified multiple times\n+  --> $DIR/bad-clobber-abi.rs:18:39\n+   |\n+LL |         asm!(\"\", clobber_abi(\"win64\", \"efiapi\"));\n+   |                              -------  ^^^^^^^^\n+   |                              |\n+   |                              previously specified here\n+   |\n+   = note: these ABIs are equivalent on the current target\n+\n+error: invalid ABI for `clobber_abi`\n+  --> $DIR/bad-clobber-abi.rs:20:35\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\", \"foo\", \"C\"));\n+   |                                   ^^^^^\n+   |\n+   = note: the following ABIs are supported on this target: `C`, `system`, `efiapi`, `win64`, `sysv64`\n+\n+error: `C` ABI specified multiple times\n+  --> $DIR/bad-clobber-abi.rs:20:42\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\", \"foo\", \"C\"));\n+   |                              ---         ^^^\n+   |                              |\n+   |                              previously specified here\n+\n+error: invalid ABI for `clobber_abi`\n+  --> $DIR/bad-clobber-abi.rs:23:39\n+   |\n+LL |         asm!(\"\", clobber_abi(\"win64\", \"foo\", \"efiapi\"));\n+   |                                       ^^^^^\n+   |\n+   = note: the following ABIs are supported on this target: `C`, `system`, `efiapi`, `win64`, `sysv64`\n+\n+error: `win64` ABI specified multiple times\n+  --> $DIR/bad-clobber-abi.rs:23:46\n+   |\n+LL |         asm!(\"\", clobber_abi(\"win64\", \"foo\", \"efiapi\"));\n+   |                              -------         ^^^^^^^^\n+   |                              |\n+   |                              previously specified here\n+   |\n+   = note: these ABIs are equivalent on the current target\n+\n+error: `C` ABI specified multiple times\n+  --> $DIR/bad-clobber-abi.rs:26:36\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n+   |                  ----------------  ^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  previously specified here\n+\n+error: `win64` ABI specified multiple times\n+  --> $DIR/bad-clobber-abi.rs:29:40\n+   |\n+LL |         asm!(\"\", clobber_abi(\"win64\"), clobber_abi(\"efiapi\"));\n+   |                  --------------------  ^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  previously specified here\n+   |\n+   = note: these ABIs are equivalent on the current target\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "3facc87641569c6cbe226905c76b94b16a6c4ef1", "filename": "src/test/ui/asm/x86_64/bad-options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -21,6 +21,9 @@ fn main() {\n         //~^ ERROR invalid ABI for `clobber_abi`\n         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n         //~^ ERROR asm with `clobber_abi` must specify explicit registers for outputs\n+        asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n+        //~^ ERROR asm with `clobber_abi` must specify explicit registers for outputs\n+        //~| ERROR `C` ABI specified multiple times\n         asm!(\"\", out(\"eax\") foo, clobber_abi(\"C\"));\n     }\n }"}, {"sha": "e2351840eef211612b880b82ec4c538f50e3cfeb", "filename": "src/test/ui/asm/x86_64/bad-options.stderr", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -36,38 +36,47 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n    |                    |\n    |                    generic outputs\n \n+error: asm with `clobber_abi` must specify explicit registers for outputs\n+  --> $DIR/bad-options.rs:24:20\n+   |\n+LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n+   |                    ^^^^^^^^^^^^  ----------------  ---------------- clobber_abi\n+   |                    |             |\n+   |                    |             clobber_abi\n+   |                    generic outputs\n+\n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/bad-options.rs:28:25\n+  --> $DIR/bad-options.rs:31:25\n    |\n LL | global_asm!(\"\", options(nomem));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n-  --> $DIR/bad-options.rs:30:25\n+  --> $DIR/bad-options.rs:33:25\n    |\n LL | global_asm!(\"\", options(readonly));\n    |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n-  --> $DIR/bad-options.rs:32:25\n+  --> $DIR/bad-options.rs:35:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n    |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n-  --> $DIR/bad-options.rs:34:25\n+  --> $DIR/bad-options.rs:37:25\n    |\n LL | global_asm!(\"\", options(pure));\n    |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n-  --> $DIR/bad-options.rs:36:25\n+  --> $DIR/bad-options.rs:39:25\n    |\n LL | global_asm!(\"\", options(nostack));\n    |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n-  --> $DIR/bad-options.rs:38:25\n+  --> $DIR/bad-options.rs:41:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n    |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n@@ -80,5 +89,13 @@ LL |         asm!(\"\", clobber_abi(\"foo\"));\n    |\n    = note: the following ABIs are supported on this target: `C`, `system`, `efiapi`, `win64`, `sysv64`\n \n-error: aborting due to 13 previous errors\n+error: `C` ABI specified multiple times\n+  --> $DIR/bad-options.rs:24:52\n+   |\n+LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n+   |                                  ----------------  ^^^^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  previously specified here\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "10aa004d431bd344f3c130de69e9a68caa9f4250", "filename": "src/test/ui/asm/x86_64/multiple-clobber-abi.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+// needs-asm-support\n+// only-x86_64\n+\n+// Checks that multiple clobber_abi options can be used\n+\n+#![feature(asm)]\n+\n+extern \"sysv64\" fn foo(x: i32) -> i32 {\n+    x + 16\n+}\n+\n+extern \"win64\" fn bar(x: i32) -> i32 {\n+    x / 2\n+}\n+\n+fn main() {\n+    let x = 8;\n+    let y: i32;\n+    // call `foo` with `x` as the input, and then `bar` with the output of `foo`\n+    // and output that to `y`\n+    unsafe {\n+        asm!(\n+            \"call {}; mov rcx, rax; call {}\",\n+            sym foo,\n+            sym bar,\n+            in(\"rdi\") x,\n+            out(\"rax\") y,\n+            clobber_abi(\"sysv64\", \"win64\"),\n+        );\n+    }\n+    assert_eq!((x, y), (8, 12));\n+}"}, {"sha": "1d6545f1b5c7ad4a658bda4d4781942b4b1faf5b", "filename": "src/test/ui/asm/x86_64/parse-error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -37,21 +37,21 @@ fn main() {\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR arguments are not allowed after options\n         //~^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"\", clobber_abi());\n+        //~^ ERROR at least one abi must be provided\n         asm!(\"\", clobber_abi(foo));\n         //~^ ERROR expected string literal\n         asm!(\"\", clobber_abi(\"C\" foo));\n-        //~^ ERROR expected `)`, found `foo`\n+        //~^ ERROR expected one of `)` or `,`, found `foo`\n         asm!(\"\", clobber_abi(\"C\", foo));\n-        //~^ ERROR expected `)`, found `,`\n+        //~^ ERROR expected string literal\n         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n         //~^ ERROR arguments are not allowed after clobber_abi\n         //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), clobber_abi(\"C\"));\n         //~^ ERROR clobber_abi is not allowed after options\n         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n         //~^ ERROR clobber_abi is not allowed after options\n-        asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-        //~^ ERROR clobber_abi specified multiple times\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n@@ -110,9 +110,9 @@ global_asm!(\"{}\", options(), const FOO);\n global_asm!(\"\", clobber_abi(FOO));\n //~^ ERROR expected string literal\n global_asm!(\"\", clobber_abi(\"C\" FOO));\n-//~^ ERROR expected `)`, found `FOO`\n+//~^ ERROR expected one of `)` or `,`, found `FOO`\n global_asm!(\"\", clobber_abi(\"C\", FOO));\n-//~^ ERROR expected `)`, found `,`\n+//~^ ERROR expected string literal\n global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n //~^ ERROR arguments are not allowed after clobber_abi\n //~^^ ERROR `clobber_abi` cannot be used with `global_asm!`\n@@ -121,7 +121,7 @@ global_asm!(\"\", options(), clobber_abi(\"C\"));\n global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n //~^ ERROR clobber_abi is not allowed after options\n global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-//~^ ERROR clobber_abi specified multiple times\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{a}\", a = const FOO, a = const BAR);\n //~^ ERROR duplicate argument named `a`\n //~^^ ERROR argument never used"}, {"sha": "018df9826c6ee8ebc5d935353945516fb25e2eab", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=b233d3b5da7b4b6ba2e016d2c2cfdb67fb984777", "patch": "@@ -90,56 +90,54 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                    |\n    |                    previous options\n \n-error: expected string literal\n+error: at least one abi must be provided as an argument to `clobber_abi`\n   --> $DIR/parse-error.rs:40:30\n    |\n+LL |         asm!(\"\", clobber_abi());\n+   |                              ^\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:42:30\n+   |\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n-error: expected `)`, found `foo`\n-  --> $DIR/parse-error.rs:42:34\n+error: expected one of `)` or `,`, found `foo`\n+  --> $DIR/parse-error.rs:44:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n-   |                                  ^^^ expected `)`\n+   |                                  ^^^ expected one of `)` or `,`\n \n-error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:44:33\n+error: expected string literal\n+  --> $DIR/parse-error.rs:46:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n-   |                                 ^ expected `)`\n+   |                                   ^^^ not a string literal\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:46:38\n+  --> $DIR/parse-error.rs:48:38\n    |\n LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                    ----------------  ^^^^^^^^^ argument\n    |                    |\n    |                    clobber_abi\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:49:29\n+  --> $DIR/parse-error.rs:51:29\n    |\n LL |         asm!(\"\", options(), clobber_abi(\"C\"));\n    |                  ---------  ^^^^^^^^^^^^^^^^\n    |                  |\n    |                  options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:51:31\n+  --> $DIR/parse-error.rs:53:31\n    |\n LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n    |                    ---------  ^^^^^^^^^^^^^^^^\n    |                    |\n    |                    options\n \n-error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:53:36\n-   |\n-LL |         asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-   |                  ----------------  ^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  clobber_abi previously specified here\n-\n error: duplicate argument named `a`\n   --> $DIR/parse-error.rs:55:36\n    |\n@@ -300,17 +298,17 @@ error: expected string literal\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n-error: expected `)`, found `FOO`\n+error: expected one of `)` or `,`, found `FOO`\n   --> $DIR/parse-error.rs:112:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n-   |                                 ^^^ expected `)`\n+   |                                 ^^^ expected one of `)` or `,`\n \n-error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:114:32\n+error: expected string literal\n+  --> $DIR/parse-error.rs:114:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n-   |                                ^ expected `)`\n+   |                                  ^^^ not a string literal\n \n error: arguments are not allowed after clobber_abi\n   --> $DIR/parse-error.rs:116:37\n@@ -342,13 +340,11 @@ LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   |\n    |                   options\n \n-error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:123:35\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:123:17\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n-   |                 ----------------  ^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 clobber_abi previously specified here\n+   |                 ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n \n error: duplicate argument named `a`\n   --> $DIR/parse-error.rs:125:35\n@@ -404,7 +400,7 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:46:44\n+  --> $DIR/parse-error.rs:48:44\n    |\n LL |     let mut foo = 0;\n    |      ---------- help: consider using `const` instead of `let`: `const foo`"}]}