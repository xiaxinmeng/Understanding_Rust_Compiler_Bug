{"sha": "b1d6798899b7830e869d06e1ddb106a75cb61cc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDY3OTg4OTliNzgzMGU4NjlkMDZlMWRkYjEwNmE3NWNiNjFjYzg=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-10T15:59:25Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-12T14:51:04Z"}, "message": "Rewrite parse_two_comps", "tree": {"sha": "ca543ff0b475327a1054967550632729fbada618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca543ff0b475327a1054967550632729fbada618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d6798899b7830e869d06e1ddb106a75cb61cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d6798899b7830e869d06e1ddb106a75cb61cc8", "html_url": "https://github.com/rust-lang/rust/commit/b1d6798899b7830e869d06e1ddb106a75cb61cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d6798899b7830e869d06e1ddb106a75cb61cc8/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf", "html_url": "https://github.com/rust-lang/rust/commit/27a966a149f55fe29a25a2fc07e6c8a011ae3dbf"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "fa22d3bb7d6f425023b915c8ff2eee60bf4e5cc0", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6798899b7830e869d06e1ddb106a75cb61cc8/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6798899b7830e869d06e1ddb106a75cb61cc8/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=b1d6798899b7830e869d06e1ddb106a75cb61cc8", "patch": "@@ -2,6 +2,9 @@ use crate::ffi::OsStr;\n use crate::mem;\n use crate::path::Prefix;\n \n+#[cfg(test)]\n+mod tests;\n+\n pub const MAIN_SEP_STR: &str = \"\\\\\";\n pub const MAIN_SEP: char = '\\\\';\n \n@@ -43,7 +46,7 @@ pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n             if let Some(path) = path.strip_prefix(br\"?\\\") {\n                 // \\\\?\\UNC\\server\\share\n                 if let Some(path) = path.strip_prefix(br\"UNC\\\") {\n-                    let (server, share) = match parse_two_comps(path, is_verbatim_sep) {\n+                    let (server, share) = match get_first_two_components(path, is_verbatim_sep) {\n                         Some((server, share)) => {\n                             (u8_slice_as_os_str(server), u8_slice_as_os_str(share))\n                         }\n@@ -71,7 +74,7 @@ pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n                 let slice = &path[..idx];\n                 return Some(DeviceNS(u8_slice_as_os_str(slice)));\n             }\n-            match parse_two_comps(path, is_sep_byte) {\n+            match get_first_two_components(path, is_sep_byte) {\n                 Some((server, share)) if !server.is_empty() && !share.is_empty() => {\n                     // \\\\server\\share\n                     return Some(UNC(u8_slice_as_os_str(server), u8_slice_as_os_str(share)));\n@@ -86,13 +89,20 @@ pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n         }\n         return None;\n     }\n-\n-    fn parse_two_comps(mut path: &[u8], f: fn(u8) -> bool) -> Option<(&[u8], &[u8])> {\n-        let first = &path[..path.iter().position(|x| f(*x))?];\n-        path = &path[(first.len() + 1)..];\n-        let idx = path.iter().position(|x| f(*x));\n-        let second = &path[..idx.unwrap_or(path.len())];\n-        Some((first, second))\n-    }\n }\n \n+/// Returns the first two path components with predicate `f`.\n+///\n+/// The two components returned will be use by caller\n+/// to construct `VerbatimUNC` or `UNC` Windows path prefix.\n+///\n+/// Returns [`None`] if there are no separators in path.\n+fn get_first_two_components(path: &[u8], f: fn(u8) -> bool) -> Option<(&[u8], &[u8])> {\n+    let idx = path.iter().position(|&x| f(x))?;\n+    // Panic safe\n+    // The max `idx+1` is `path.len()` and `path[path.len()..]` is a valid index.\n+    let (first, path) = (&path[..idx], &path[idx + 1..]);\n+    let idx = path.iter().position(|&x| f(x)).unwrap_or(path.len());\n+    let second = &path[..idx];\n+    Some((first, second))\n+}"}, {"sha": "fbac1dc1ca17a017091e27a6bd082e11181a0729", "filename": "src/libstd/sys/windows/path/tests.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1d6798899b7830e869d06e1ddb106a75cb61cc8/src%2Flibstd%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d6798899b7830e869d06e1ddb106a75cb61cc8/src%2Flibstd%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath%2Ftests.rs?ref=b1d6798899b7830e869d06e1ddb106a75cb61cc8", "patch": "@@ -0,0 +1,21 @@\n+use super::*;\n+\n+#[test]\n+fn test_get_first_two_components() {\n+    assert_eq!(\n+        get_first_two_components(br\"server\\share\", is_verbatim_sep),\n+        Some((&b\"server\"[..], &b\"share\"[..])),\n+    );\n+\n+    assert_eq!(\n+        get_first_two_components(br\"server\\\", is_verbatim_sep),\n+        Some((&b\"server\"[..], &b\"\"[..]))\n+    );\n+\n+    assert_eq!(\n+        get_first_two_components(br\"\\server\\\", is_verbatim_sep),\n+        Some((&b\"\"[..], &b\"server\"[..]))\n+    );\n+\n+    assert_eq!(get_first_two_components(br\"there are no separators here\", is_verbatim_sep), None,);\n+}"}]}