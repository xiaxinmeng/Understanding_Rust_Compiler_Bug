{"sha": "1e9d2187ed0addf59e5e73811454e46246b4fdf0", "node_id": "C_kwDOAAsO6NoAKDFlOWQyMTg3ZWQwYWRkZjU5ZTVlNzM4MTE0NTRlNDYyNDZiNGZkZjA", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-27T17:07:34Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-27T17:54:41Z"}, "message": "Use PkgType in more places\n\nIn particular, this avoids serializing and parsing the pkg to a string,\nwhich allows getting rid of `PkgType::Other` altogether", "tree": {"sha": "f482a30fb8bb4e8687520f99b9698aed56f1547b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f482a30fb8bb4e8687520f99b9698aed56f1547b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9d2187ed0addf59e5e73811454e46246b4fdf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9d2187ed0addf59e5e73811454e46246b4fdf0", "html_url": "https://github.com/rust-lang/rust/commit/1e9d2187ed0addf59e5e73811454e46246b4fdf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9d2187ed0addf59e5e73811454e46246b4fdf0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cbf07959692c662126d0971f767ba14fd175ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbf07959692c662126d0971f767ba14fd175ce5", "html_url": "https://github.com/rust-lang/rust/commit/6cbf07959692c662126d0971f767ba14fd175ce5"}], "stats": {"total": 74, "additions": 27, "deletions": 47}, "files": [{"sha": "40dce38742a14443d722d209038d4ffb56b92f29", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=1e9d2187ed0addf59e5e73811454e46246b4fdf0", "patch": "@@ -2,6 +2,7 @@\n \n This tool generates the manifests uploaded to static.rust-lang.org and used by rustup.\n You can see a full list of all manifests at <https://static.rust-lang.org/manifests.txt>.\n+This listing is updated by <https://github.com/rust-lang/generate-manifest-list> every 7 days.\n \n This gets called by `promote-release` <https://github.com/rust-lang/promote-release> via `x.py dist hash-and-sign`.\n "}, {"sha": "ebc220cfce5902c7c13814c3d8c02ba40bda7ed5", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=1e9d2187ed0addf59e5e73811454e46246b4fdf0", "patch": "@@ -180,7 +180,7 @@ static PKG_INSTALLERS: &[&str] = &[\"x86_64-apple-darwin\", \"aarch64-apple-darwin\"\n \n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n-static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-docs-json-preview\"];\n+static NIGHTLY_ONLY_COMPONENTS: &[PkgType] = &[PkgType::Miri, PkgType::JsonDocs];\n \n macro_rules! t {\n     ($e:expr) => {\n@@ -285,12 +285,7 @@ impl Builder {\n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n         for pkg in PkgType::all() {\n             let fallback = if pkg.use_docs_fallback() { DOCS_FALLBACK } else { &[] };\n-            self.package(\n-                &pkg.manifest_component_name(),\n-                &mut manifest.pkg,\n-                pkg.targets(),\n-                fallback,\n-            );\n+            self.package(pkg, &mut manifest.pkg, fallback);\n         }\n     }\n \n@@ -401,26 +396,27 @@ impl Builder {\n         let mut components = Vec::new();\n         let mut extensions = Vec::new();\n \n-        let host_component = |pkg: &_| Component::from_str(pkg, host);\n+        let host_component = |pkg: &_| Component::from_pkg(pkg, host);\n \n         for pkg in PkgType::all() {\n             match pkg {\n                 // rustc/rust-std/cargo/docs are all required\n                 PkgType::Rustc | PkgType::Cargo | PkgType::HtmlDocs => {\n-                    components.push(host_component(&pkg.manifest_component_name()));\n+                    components.push(host_component(pkg));\n                 }\n                 PkgType::RustStd => {\n-                    components.push(host_component(&pkg.manifest_component_name()));\n+                    components.push(host_component(pkg));\n                     extensions.extend(\n-                        TARGETS.iter().filter(|&&target| target != host).map(|target| {\n-                            Component::from_str(&pkg.manifest_component_name(), target)\n-                        }),\n+                        TARGETS\n+                            .iter()\n+                            .filter(|&&target| target != host)\n+                            .map(|target| Component::from_pkg(pkg, target)),\n                     );\n                 }\n                 // so is rust-mingw if it's available for the target\n                 PkgType::RustMingw => {\n                     if host.contains(\"pc-windows-gnu\") {\n-                        components.push(host_component(\"rust-mingw\"));\n+                        components.push(host_component(pkg));\n                     }\n                 }\n                 // Tools are always present in the manifest,\n@@ -433,20 +429,16 @@ impl Builder {\n                 | PkgType::LlvmTools\n                 | PkgType::RustAnalysis\n                 | PkgType::JsonDocs => {\n-                    extensions.push(host_component(&pkg.manifest_component_name()));\n+                    extensions.push(host_component(pkg));\n                 }\n                 PkgType::RustcDev | PkgType::RustcDocs => {\n-                    extensions.extend(\n-                        HOSTS.iter().map(|target| {\n-                            Component::from_str(&pkg.manifest_component_name(), target)\n-                        }),\n-                    );\n+                    extensions.extend(HOSTS.iter().map(|target| Component::from_pkg(pkg, target)));\n                 }\n                 PkgType::RustSrc => {\n-                    extensions.push(Component::from_str(&pkg.manifest_component_name(), \"*\"));\n+                    extensions.push(Component::from_pkg(pkg, \"*\"));\n                 }\n-                PkgType::Rust | PkgType::Other(_) => {}\n-                // FIXME: is this correct? maybe we should add it so rustup knows about it ...\n+                PkgType::Rust => {}\n+                // NOTE: this is intentional, these artifacts aren't intended to be used with rustup\n                 PkgType::ReproducibleArtifacts => {}\n             }\n         }\n@@ -494,31 +486,27 @@ impl Builder {\n \n     fn package(\n         &mut self,\n-        pkgname: &str,\n+        pkg: &PkgType,\n         dst: &mut BTreeMap<String, Package>,\n-        targets: &[&str],\n         fallback: &[(&str, &str)],\n     ) {\n-        if pkgname == \"rust\" {\n+        if *pkg == PkgType::Rust {\n             // This is handled specially by `rust_package` later.\n             // Order is important, so don't call `rust_package` here.\n             return;\n         }\n \n-        let version_info = self\n-            .versions\n-            .version(&PkgType::from_component(pkgname))\n-            .expect(\"failed to load package version\");\n+        let version_info = self.versions.version(&pkg).expect(\"failed to load package version\");\n         let mut is_present = version_info.present;\n \n         // Never ship nightly-only components for other trains.\n-        if self.versions.channel() != \"nightly\" && NIGHTLY_ONLY_COMPONENTS.contains(&pkgname) {\n+        if self.versions.channel() != \"nightly\" && NIGHTLY_ONLY_COMPONENTS.contains(&pkg) {\n             is_present = false; // Pretend the component is entirely missing.\n         }\n \n         macro_rules! tarball_name {\n             ($target_name:expr) => {\n-                self.versions.tarball_name(&PkgType::from_component(pkgname), $target_name).unwrap()\n+                self.versions.tarball_name(pkg, $target_name).unwrap()\n             };\n         }\n         let mut target_from_compressed_tar = |target_name| {\n@@ -547,7 +535,8 @@ impl Builder {\n             Target::unavailable()\n         };\n \n-        let targets = targets\n+        let targets = pkg\n+            .targets()\n             .iter()\n             .map(|name| {\n                 let target = if is_present {\n@@ -562,7 +551,7 @@ impl Builder {\n             .collect();\n \n         dst.insert(\n-            pkgname.to_string(),\n+            pkg.manifest_component_name(),\n             Package {\n                 version: version_info.version.unwrap_or_default(),\n                 git_commit_hash: version_info.git_commit,"}, {"sha": "a9f19d8e5653f35157f736c3e128f16be290a256", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=1e9d2187ed0addf59e5e73811454e46246b4fdf0", "patch": "@@ -1,3 +1,4 @@\n+use crate::versions::PkgType;\n use crate::Builder;\n use serde::{Serialize, Serializer};\n use std::collections::BTreeMap;\n@@ -116,8 +117,8 @@ pub(crate) struct Component {\n }\n \n impl Component {\n-    pub(crate) fn from_str(pkg: &str, target: &str) -> Self {\n-        Self { pkg: pkg.to_string(), target: target.to_string() }\n+    pub(crate) fn from_pkg(pkg: &PkgType, target: &str) -> Self {\n+        Self { pkg: pkg.manifest_component_name(), target: target.to_string() }\n     }\n }\n "}, {"sha": "dde9745afb78564b9319c62894459ea0d40ec0fe", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9d2187ed0addf59e5e73811454e46246b4fdf0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=1e9d2187ed0addf59e5e73811454e46246b4fdf0", "patch": "@@ -13,7 +13,6 @@ macro_rules! pkg_type {\n         #[derive(Debug, Hash, Eq, PartialEq, Clone)]\n         pub(crate) enum PkgType {\n             $($variant,)+\n-            Other(String),\n         }\n \n         impl PkgType {\n@@ -24,18 +23,10 @@ macro_rules! pkg_type {\n                 }\n             }\n \n-            pub(crate) fn from_component(component: &str) -> Self {\n-                match component {\n-                    $( $component  $( | concat!($($is_preview)? $component, \"-preview\") )? => PkgType::$variant,)+\n-                    _ => PkgType::Other(component.into()),\n-                }\n-            }\n-\n             /// First part of the tarball name.\n             pub(crate) fn tarball_component_name(&self) -> &str {\n                 match self {\n                     $( PkgType::$variant => $component,)+\n-                    PkgType::Other(component) => component,\n                 }\n             }\n \n@@ -100,7 +91,6 @@ impl PkgType {\n             PkgType::ReproducibleArtifacts => true,\n             PkgType::RustMingw => true,\n             PkgType::RustAnalysis => true,\n-            PkgType::Other(_) => true,\n         }\n     }\n \n@@ -127,7 +117,6 @@ impl PkgType {\n             Rustfmt => HOSTS,\n             RustAnalysis => TARGETS,\n             LlvmTools => TARGETS,\n-            Other(pkg) => panic!(\"add {pkg} to the list of known `PkgType`s\"),\n         }\n     }\n "}]}