{"sha": "41ad4d9b2dbb895666337d162eda52619a6056db", "node_id": "C_kwDOAAsO6NoAKDQxYWQ0ZDliMmRiYjg5NTY2NjMzN2QxNjJlZGE1MjYxOWE2MDU2ZGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-05T17:46:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-05T17:46:53Z"}, "message": "Auto merge of #98936 - matthiaskrgr:rollup-dvr0ucm, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #98860 (adjust dangling-int-ptr error message)\n - #98888 (interpret: fix CheckedBinOp behavior when overflow checking is disabled)\n - #98889 (Add regression test for #79467)\n - #98895 (bootstrap.py: Always use `.exe` for Windows)\n - #98920 (adapt issue-37945 codegen test to accept any order of ops)\n - #98921 (Refactor: remove a redundant mutable variable)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bbe8e06be0e99de6988b7b2e3a38cbdcd9bfdf55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe8e06be0e99de6988b7b2e3a38cbdcd9bfdf55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ad4d9b2dbb895666337d162eda52619a6056db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ad4d9b2dbb895666337d162eda52619a6056db", "html_url": "https://github.com/rust-lang/rust/commit/41ad4d9b2dbb895666337d162eda52619a6056db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ad4d9b2dbb895666337d162eda52619a6056db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb171e2350de2bec6dd1f035b99bc00535c1c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb171e2350de2bec6dd1f035b99bc00535c1c15", "html_url": "https://github.com/rust-lang/rust/commit/efb171e2350de2bec6dd1f035b99bc00535c1c15"}, {"sha": "720eb123af7badab651fda19dbbfb4716f56b6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/720eb123af7badab651fda19dbbfb4716f56b6de", "html_url": "https://github.com/rust-lang/rust/commit/720eb123af7badab651fda19dbbfb4716f56b6de"}], "stats": {"total": 173, "additions": 116, "deletions": 57}, "files": [{"sha": "6744aace84969f773888ff6f9eca46b39dfb2e32", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -217,7 +217,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::mul_with_overflow => BinOp::Mul,\n                     _ => bug!(),\n                 };\n-                self.binop_with_overflow(bin_op, &lhs, &rhs, dest)?;\n+                self.binop_with_overflow(\n+                    bin_op, /*force_overflow_checks*/ true, &lhs, &rhs, dest,\n+                )?;\n             }\n             sym::saturating_add | sym::saturating_sub => {\n                 let l = self.read_immediate(&args[0])?;"}, {"sha": "54c9e99cf97c81b6fd2e8311f35379627323af14", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -144,6 +144,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         true\n     }\n \n+    /// Whether CheckedBinOp MIR statements should actually check for overflow.\n+    fn check_binop_checks_overflow(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+\n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n     /// constants, ...\n@@ -468,6 +471,11 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         true\n     }\n \n+    #[inline(always)]\n+    fn check_binop_checks_overflow(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        true\n+    }\n+\n     #[inline(always)]\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,\n@@ -513,7 +521,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _ecx: &InterpCx<$mir, $tcx, Self>,\n         addr: u64,\n     ) -> Pointer<Option<AllocId>> {\n-        Pointer::new(None, Size::from_bytes(addr))\n+        Pointer::from_addr(addr)\n     }\n \n     #[inline(always)]\n@@ -523,7 +531,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n-        Ok(Pointer::new(None, Size::from_bytes(addr)))\n+        Ok(Pointer::from_addr(addr))\n     }\n \n     #[inline(always)]"}, {"sha": "942bdb36645bde6cc3add4e810f6537994ffef35", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -12,9 +12,13 @@ use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Applies the binary operation `op` to the two operands and writes a tuple of the result\n     /// and a boolean signifying the potential overflow to the destination.\n+    ///\n+    /// `force_overflow_checks` indicates whether overflow checks should be done even when\n+    /// `tcx.sess.overflow_checks()` is `false`.\n     pub fn binop_with_overflow(\n         &mut self,\n         op: mir::BinOp,\n+        force_overflow_checks: bool,\n         left: &ImmTy<'tcx, M::PointerTag>,\n         right: &ImmTy<'tcx, M::PointerTag>,\n         dest: &PlaceTy<'tcx, M::PointerTag>,\n@@ -26,6 +30,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"type mismatch for result of {:?}\",\n             op,\n         );\n+        // As per https://github.com/rust-lang/rust/pull/98738, we always return `false` in the 2nd\n+        // component when overflow checking is disabled.\n+        let overflowed =\n+            overflowed && (force_overflow_checks || M::check_binop_checks_overflow(self));\n+        // Write the result to `dest`.\n         if let Abi::ScalarPair(..) = dest.layout.abi {\n             // We can use the optimized path and avoid `place_field` (which might do\n             // `force_allocation`)."}, {"sha": "926afe757ed60b6d366138016977e1bdfce3e0df", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -188,7 +188,7 @@ impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {\n     #[inline]\n     pub fn dangling(layout: TyAndLayout<'tcx>) -> Self {\n         let align = layout.align.abi;\n-        let ptr = Pointer::new(None, Size::from_bytes(align.bytes())); // no provenance, absolute address\n+        let ptr = Pointer::from_addr(align.bytes()); // no provenance, absolute address\n         // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.\n         MPlaceTy { mplace: MemPlace { ptr, meta: MemPlaceMeta::Poison }, layout, align }\n     }"}, {"sha": "2ee7ed57ab5a7f1f033a24ef63eeb55e3674d533", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -185,7 +185,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let left = self.read_immediate(&self.eval_operand(left, None)?)?;\n                 let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(&self.eval_operand(right, layout)?)?;\n-                self.binop_with_overflow(bin_op, &left, &right, &dest)?;\n+                self.binop_with_overflow(\n+                    bin_op, /*force_overflow_checks*/ false, &left, &right, &dest,\n+                )?;\n             }\n \n             UnaryOp(un_op, ref operand) => {"}, {"sha": "f70727b12bae430cd47997a1abe51fb32fe290a1", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -186,17 +186,17 @@ pub enum CheckInAllocMsg {\n \n impl fmt::Display for CheckInAllocMsg {\n     /// When this is printed as an error the context looks like this:\n-    /// \"{msg}0x01 is not a valid pointer\".\n+    /// \"{msg}{pointer} is a dangling pointer\".\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"{}\",\n             match *self {\n                 CheckInAllocMsg::DerefTest => \"dereferencing pointer failed: \",\n                 CheckInAllocMsg::MemoryAccessTest => \"memory access failed: \",\n-                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic failed: \",\n+                CheckInAllocMsg::PointerArithmeticTest => \"out-of-bounds pointer arithmetic: \",\n                 CheckInAllocMsg::OffsetFromTest => \"out-of-bounds offset_from: \",\n-                CheckInAllocMsg::InboundsTest => \"\",\n+                CheckInAllocMsg::InboundsTest => \"out-of-bounds pointer use: \",\n             }\n         )\n     }\n@@ -350,14 +350,12 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 ptr_size = ptr_size.bytes(),\n                 ptr_size_p = pluralize!(ptr_size.bytes()),\n             ),\n-            DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n-                write!(f, \"null pointer is not a valid pointer for this operation\")\n-            }\n-            DanglingIntPointer(0, msg) => {\n-                write!(f, \"{msg}null pointer is not a valid pointer\")\n-            }\n             DanglingIntPointer(i, msg) => {\n-                write!(f, \"{msg}{i:#x} is not a valid pointer\")\n+                write!(\n+                    f,\n+                    \"{msg}{pointer} is a dangling pointer (it has no provenance)\",\n+                    pointer = Pointer::<Option<AllocId>>::from_addr(*i),\n+                )\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,"}, {"sha": "d4cdf45d186616aa4a4784930c5e0deb60f5d9c7", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -181,7 +181,17 @@ impl<Tag: Provenance> fmt::Debug for Pointer<Option<Tag>> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.provenance {\n             Some(tag) => Provenance::fmt(&Pointer::new(tag, self.offset), f),\n-            None => write!(f, \"{:#x}\", self.offset.bytes()),\n+            None => write!(f, \"{:#x}[noalloc]\", self.offset.bytes()),\n+        }\n+    }\n+}\n+\n+impl<Tag: Provenance> fmt::Display for Pointer<Option<Tag>> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.provenance.is_none() && self.offset.bytes() == 0 {\n+            write!(f, \"null pointer\")\n+        } else {\n+            fmt::Debug::fmt(self, f)\n         }\n     }\n }\n@@ -226,9 +236,14 @@ impl<Tag> Pointer<Option<Tag>> {\n }\n \n impl<Tag> Pointer<Option<Tag>> {\n+    #[inline(always)]\n+    pub fn from_addr(addr: u64) -> Self {\n+        Pointer { provenance: None, offset: Size::from_bytes(addr) }\n+    }\n+\n     #[inline(always)]\n     pub fn null() -> Self {\n-        Pointer { provenance: None, offset: Size::ZERO }\n+        Pointer::from_addr(0)\n     }\n }\n "}, {"sha": "2f4c0ae96b38391f4800f41f37616f380c8ad577", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -993,8 +993,9 @@ pub enum Rvalue<'tcx> {\n \n     /// Same as `BinaryOp`, but yields `(T, bool)` with a `bool` indicating an error condition.\n     ///\n-    /// When overflow checking is disabled, the error condition is false. Otherwise, the error\n-    /// condition is determined as described below.\n+    /// When overflow checking is disabled and we are generating run-time code, the error condition\n+    /// is false. Otherwise, and always during CTFE, the error condition is determined as described\n+    /// below.\n     ///\n     /// For addition, subtraction, and multiplication on integers the error condition is set when\n     /// the infinite precision result would be unequal to the actual result."}, {"sha": "6663ff6bbe9156faba58dcd565d59f4a473bb1a4", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -131,8 +131,6 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n         let span = debug_span!(\"select\", obligation_forest_size = ?self.predicates.len());\n         let _enter = span.enter();\n \n-        let mut errors = Vec::new();\n-\n         // Process pending obligations.\n         let outcome: Outcome<_, _> = self.predicates.process_obligations(&mut FulfillProcessor {\n             selcx,\n@@ -142,7 +140,8 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n         // FIXME: if we kept the original cache key, we could mark projection\n         // obligations as complete for the projection cache here.\n \n-        errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));\n+        let errors: Vec<FulfillmentError<'tcx>> =\n+            outcome.errors.into_iter().map(to_fulfillment_error).collect();\n \n         debug!(\n             \"select({} predicates remaining, {} errors) done\",\n@@ -728,7 +727,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n                 return ProcessResult::Changed(vec![]);\n             } else {\n-                tracing::debug!(\"Does NOT hold: {:?}\", obligation);\n+                debug!(\"Does NOT hold: {:?}\", obligation);\n             }\n         }\n "}, {"sha": "9301c5a2ff300da1103c65ac4f8ddd3ecdf9ba55", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -152,6 +152,10 @@ def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n     sys.stdout.flush()\n+    # Ensure that the .exe is used on Windows just in case a Linux ELF has been\n+    # compiled in the same directory.\n+    if os.name == 'nt' and not args[0].endswith('.exe'):\n+        args[0] += '.exe'\n     # Use Popen here instead of call() as it apparently allows powershell on\n     # Windows to not lock up waiting for input presumably.\n     ret = subprocess.Popen(args, **kwargs)"}, {"sha": "12fa1e9e56b6ab7f1a56f096e73f7a0b6809db67", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -17,7 +17,9 @@ pub fn is_empty_1(xs: Iter<f32>) -> bool {\n // CHECK-NEXT:  start:\n // CHECK-NEXT:    [[A:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[A]])\n-// CHECK-NEXT:    [[B:%.*]] = icmp eq {{i32\\*|ptr}} %xs.1, %xs.0\n+// The order between %xs.0 and %xs.1 on the next line doesn't matter\n+// and different LLVM versions produce different order.\n+// CHECK-NEXT:    [[B:%.*]] = icmp eq {{i32\\*|ptr}} {{%xs.0, %xs.1|%xs.1, %xs.0}}\n // CHECK-NEXT:    ret i1 [[B:%.*]]\n     {xs}.next().is_none()\n }\n@@ -28,7 +30,9 @@ pub fn is_empty_2(xs: Iter<f32>) -> bool {\n // CHECK-NEXT:  start:\n // CHECK-NEXT:    [[C:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[C]])\n-// CHECK-NEXT:    [[D:%.*]] = icmp eq {{i32\\*|ptr}} %xs.1, %xs.0\n+// The order between %xs.0 and %xs.1 on the next line doesn't matter\n+// and different LLVM versions produce different order.\n+// CHECK-NEXT:    [[D:%.*]] = icmp eq {{i32\\*|ptr}} {{%xs.0, %xs.1|%xs.1, %xs.0}}\n // CHECK-NEXT:    ret i1 [[D:%.*]]\n     xs.map(|&x| x).next().is_none()\n }"}, {"sha": "eb0b9b380714e26d1e6750bb668f509e4138469f", "filename": "src/test/rustdoc-ui/issue-79467.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Frustdoc-ui%2Fissue-79467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Frustdoc-ui%2Fissue-79467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-79467.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -0,0 +1,8 @@\n+fn g()\n+where\n+    'static: 'static,\n+    dyn 'static: 'static + Copy, //~ ERROR at least one trait is required for an object type\n+{\n+}\n+\n+fn main() {}"}, {"sha": "561513a432bb567722df9e6111036b41c57732d1", "filename": "src/test/rustdoc-ui/issue-79467.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Frustdoc-ui%2Fissue-79467.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Frustdoc-ui%2Fissue-79467.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-79467.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -0,0 +1,9 @@\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/issue-79467.rs:4:5\n+   |\n+LL |     dyn 'static: 'static + Copy,\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0224`."}, {"sha": "c0092ff3be6d152f565669e7e87db7ef73a8e6dd", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:19:34\n@@ -18,7 +18,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:20:33\n@@ -104,7 +104,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  out-of-bounds offset_from: null pointer is not a valid pointer\n+   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -144,7 +144,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }\n@@ -205,7 +205,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }"}, {"sha": "0aa37452f1c53a8c51932ec5471ef9858c746ec4", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:19:34\n@@ -18,7 +18,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:20:33\n@@ -104,7 +104,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  out-of-bounds offset_from: null pointer is not a valid pointer\n+   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -144,7 +144,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }\n@@ -205,7 +205,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }"}, {"sha": "22cb6451e874a6cb1519d2caf55723c7eb3ea401", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/const-deref-ptr.rs:4:29\n    |\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0xdeadbeef is not a valid pointer\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0xdeadbeef[noalloc] is a dangling pointer (it has no provenance)\n \n error: aborting due to previous error\n "}, {"sha": "ec5508a1e90c9e30f4bd7a991bd206bbe20b6c0f", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -5,6 +5,6 @@ const Z: i32 = unsafe { *(&1 as *const i32) };\n \n // bad, will thus error in miri\n const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR evaluation of constant value failed\n-//~| is not a valid pointer\n+//~| is a dangling pointer\n const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR evaluation of constant value failed\n-//~| is not a valid pointer\n+//~| is a dangling pointer"}, {"sha": "e41dea873ac1a9c60d59c7500ef3bf60b6bd99dc", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:7:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:9:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2c is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2c[noalloc] is a dangling pointer (it has no provenance)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2fd98ea322b023fc96b9baa3bd620170cb925dda", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -319,7 +319,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:147:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:151:5"}, {"sha": "bae249076598ef4bc1f302f7ca191fafc853a11d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -319,7 +319,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:147:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:151:5"}, {"sha": "074beaab2c4d0db481cdc5f37a72340191bd3431", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -11,7 +11,7 @@ const fn helper() -> Option<&'static mut i32> { unsafe {\n     // Undefined behaviour (integer as pointer), who doesn't love tests like this.\n     // This code never gets executed, because the static checks fail before that.\n     Some(&mut *(42 as *mut i32)) //~ ERROR evaluation of constant value failed\n-    //~| 0x2a is not a valid pointer\n+    //~| 0x2a[noalloc] is a dangling pointer\n } }\n // The error is an evaluation error and not a validation error, so the error is reported\n // directly at the site where it occurs."}, {"sha": "234e55e3a96c8beb7e5cb0cd84e332fa35ceeade", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n-   |          dereferencing pointer failed: 0x2a is not a valid pointer\n+   |          dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n    |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n ...\n LL | const A: Option<&mut i32> = helper();"}, {"sha": "db2d421427c3ebc26a9bc5376b675938da1e268d", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -34,14 +34,14 @@ pub const NOT_MULTIPLE_OF_SIZE: isize = {\n pub const OFFSET_FROM_NULL: isize = {\n     let ptr = 0 as *const u8;\n     unsafe { ptr_offset_from(ptr, ptr) } //~ERROR evaluation of constant value failed\n-    //~| null pointer is not a valid pointer\n+    //~| null pointer is a dangling pointer\n };\n \n pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n     let ptr1 = 8 as *const u8;\n     let ptr2 = 16 as *const u8;\n     unsafe { ptr_offset_from(ptr2, ptr1) } //~ERROR evaluation of constant value failed\n-    //~| 0x8 is not a valid pointer\n+    //~| 0x8[noalloc] is a dangling pointer\n };\n \n const OUT_OF_BOUNDS_1: isize = {"}, {"sha": "daa1d736758c1ff08d0e877457b943e9da21f7aa", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -28,13 +28,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:36:14\n    |\n LL |     unsafe { ptr_offset_from(ptr, ptr) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is not a valid pointer\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:43:14\n    |\n LL |     unsafe { ptr_offset_from(ptr2, ptr1) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: 0x8 is not a valid pointer\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: 0x8[noalloc] is a dangling pointer (it has no provenance)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:52:14"}, {"sha": "5a792bba50cb2ecb20e42fd29a21f248a09f8784", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -18,7 +18,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:8:43\n@@ -32,7 +32,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:9:45\n@@ -102,7 +102,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:15:49\n@@ -116,7 +116,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:17:50\n@@ -130,7 +130,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: 0x1 is not a valid pointer\n+   |                  out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:18:42\n@@ -144,7 +144,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: null pointer is not a valid pointer\n+   |                  out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:21:50\n@@ -158,7 +158,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: 0x7f..f is not a valid pointer\n+   |                  out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:24:47"}, {"sha": "67b9fec4a0e11e0392b26562a6bdc56d59e080d0", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/ptr_comparisons.rs:58:34"}, {"sha": "2efbd6989ad61ae26f04e08ee4155657a3edeb06", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ad4d9b2dbb895666337d162eda52619a6056db/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=41ad4d9b2dbb895666337d162eda52619a6056db", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   |                            ^^^^^^^^^ dereferencing pointer failed: 0x5f3759df is not a valid pointer\n+   |                            ^^^^^^^^^ dereferencing pointer failed: 0x5f3759df[noalloc] is a dangling pointer (it has no provenance)\n \n error: aborting due to previous error\n "}]}