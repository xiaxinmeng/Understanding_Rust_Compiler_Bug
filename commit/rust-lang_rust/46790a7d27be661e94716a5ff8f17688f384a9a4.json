{"sha": "46790a7d27be661e94716a5ff8f17688f384a9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzkwYTdkMjdiZTY2MWU5NDcxNmE1ZmY4ZjE3Njg4ZjM4NGE5YTQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:47:40Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:24Z"}, "message": "util: ppaux: remove dead code", "tree": {"sha": "939d37d5b21f56bf22f20fbc0902c26f34ee0c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939d37d5b21f56bf22f20fbc0902c26f34ee0c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46790a7d27be661e94716a5ff8f17688f384a9a4", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46790a7d27be661e94716a5ff8f17688f384a9a4", "html_url": "https://github.com/rust-lang/rust/commit/46790a7d27be661e94716a5ff8f17688f384a9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46790a7d27be661e94716a5ff8f17688f384a9a4/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "841eb1c56faf033eba03444e208c4d2c5fd34d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/841eb1c56faf033eba03444e208c4d2c5fd34d50", "html_url": "https://github.com/rust-lang/rust/commit/841eb1c56faf033eba03444e208c4d2c5fd34d50"}], "stats": {"total": 48, "additions": 0, "deletions": 48}, "files": [{"sha": "0f7de94a92d8c0a1746ac2d027108dc8a4700516", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/46790a7d27be661e94716a5ff8f17688f384a9a4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46790a7d27be661e94716a5ff8f17688f384a9a4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=46790a7d27be661e94716a5ff8f17688f384a9a4", "patch": "@@ -58,14 +58,6 @@ pub fn note_and_explain_region(cx: &ctxt,\n     }\n }\n \n-/// Returns a string like \"the block at 27:31\" that attempts to explain a\n-/// lifetime in a way it might plausibly be understood.\n-pub fn explain_region(cx: &ctxt, region: ty::Region) -> ~str {\n-  let (res, _) = explain_region_and_span(cx, region);\n-  return res;\n-}\n-\n-\n pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n                             -> (~str, Option<Span>) {\n     return match region {\n@@ -165,42 +157,6 @@ pub fn bound_region_to_str(cx: &ctxt,\n     }\n }\n \n-pub fn ReScope_id_to_str(cx: &ctxt, node_id: ast::NodeId) -> ~str {\n-    match cx.map.find(node_id) {\n-      Some(ast_map::NodeBlock(ref blk)) => {\n-        format!(\"<block at {}>\",\n-             cx.sess.codemap().span_to_str(blk.span))\n-      }\n-      Some(ast_map::NodeExpr(expr)) => {\n-        match expr.node {\n-          ast::ExprCall(..) => {\n-            format!(\"<call at {}>\",\n-                 cx.sess.codemap().span_to_str(expr.span))\n-          }\n-          ast::ExprMatch(..) => {\n-            format!(\"<match at {}>\",\n-                 cx.sess.codemap().span_to_str(expr.span))\n-          }\n-          ast::ExprAssignOp(..) |\n-          ast::ExprUnary(..) |\n-          ast::ExprBinary(..) |\n-          ast::ExprIndex(..) => {\n-            format!(\"<method at {}>\",\n-                 cx.sess.codemap().span_to_str(expr.span))\n-          }\n-          _ => {\n-            format!(\"<expression at {}>\",\n-                 cx.sess.codemap().span_to_str(expr.span))\n-          }\n-        }\n-      }\n-      None => {\n-        format!(\"<unknown-{}>\", node_id)\n-      }\n-      _ => cx.sess.bug(format!(\"ReScope refers to {}\", cx.map.node_to_str(node_id)))\n-    }\n-}\n-\n // In general, if you are giving a region error message,\n // you should use `explain_region()` or, better yet,\n // `note_and_explain_region()`\n@@ -280,10 +236,6 @@ pub fn vec_map_to_str<T>(ts: &[T], f: |t: &T| -> ~str) -> ~str {\n     format!(\"[{}]\", tstrs.connect(\", \"))\n }\n \n-pub fn tys_to_str(cx: &ctxt, ts: &[t]) -> ~str {\n-    vec_map_to_str(ts, |t| ty_to_str(cx, *t))\n-}\n-\n pub fn fn_sig_to_str(cx: &ctxt, typ: &ty::FnSig) -> ~str {\n     format!(\"fn{}{} -> {}\",\n             typ.binder_id,"}]}