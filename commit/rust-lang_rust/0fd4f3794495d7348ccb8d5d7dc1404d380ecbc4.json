{"sha": "0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZDRmMzc5NDQ5NWQ3MzQ4Y2NiOGQ1ZDdkYzE0MDRkMzgwZWNiYzQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-02-01T03:11:50Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-02-01T03:11:50Z"}, "message": "Fix overflow when performing drop check calculations in NLL\n\nClearing out the infcx's region constraints after processing each type\nends up interacting badly with normalizing associated types. This commit\nkeeps all region constraints intact until the end of\nTypeLivenessGenerator.add_drop_live_constraint, ensuring that normalized\ntypes are able to re-use existing inference variables.\n\nFixes #47589", "tree": {"sha": "ca814f0f5e963ed59c0b23b9caf8d545b6743351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca814f0f5e963ed59c0b23b9caf8d545b6743351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlpyhkUACgkQtAh+UQ6Y\nsWSjUA//TDBzD2rPq0lnr/0XF2CcmxlYhpHZj85BIhTDbQvt/3hhNtP4vzMloLg7\ndtyaVDrkVyzaBZfE69WNz0KvewskEoiui/HUhsBrYriURmWEDnOGBtlMvAHNT4mm\ntNajp2x9rQvNlDt7onlpFnILvdx0wJzqaG66oxvXkJeZD+TGarvhArhaICaDc0x6\n6EZElAqKzKt/vhQqIlCc3sxx/8juFlVIvlZ0ayCetEb/itdVACo66CDU2/lB56Lh\nTe1ziE1xR2mQlx55dMRmwzPAeWYoE8VSu+oGe256gT4xsr/h4kYSFbMKVjGLb2Em\ntPNqBBBPTgMthLzejUanShPDsJjx2C3MlRMp6o6xLf4eSU6EdIUFlA7wL/3dKvjN\nden8bqK3Hv+JC3NPwp4FLERT+rkqvOY6wd5A9S/dv4rHrupZP15W4EFqAgs3Nons\nz4V+5LqkljRNRszyb9mMmi8zX7DYfk2eaQSsstKkTqqetmfsFceVSh8UrOuXDIIh\nrNyQvHejHbTuqnkZv63uHIgffNmAu6WUG3lJVhVd5u6V5io3Rs5/RnLdKm/dfOix\nDeJtrn/pkFiex3MNPmFbB5dya3njEyc4488XwmdHi1pWEGpPK5KIt5qR3I7BwQkG\npydtf7ZsTv6Do0NqwID9dUYAO7sJLc4pw4YmW/0znQMytbvZpxk=\n=paCm\n-----END PGP SIGNATURE-----", "payload": "tree ca814f0f5e963ed59c0b23b9caf8d545b6743351\nparent def3269a71be2e737cad27418a3dad9f5bd6cd32\nauthor Aaron Hill <aa1ronham@gmail.com> 1517454710 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1517454710 -0500\n\nFix overflow when performing drop check calculations in NLL\n\nClearing out the infcx's region constraints after processing each type\nends up interacting badly with normalizing associated types. This commit\nkeeps all region constraints intact until the end of\nTypeLivenessGenerator.add_drop_live_constraint, ensuring that normalized\ntypes are able to re-use existing inference variables.\n\nFixes #47589\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4", "html_url": "https://github.com/rust-lang/rust/commit/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def3269a71be2e737cad27418a3dad9f5bd6cd32", "url": "https://api.github.com/repos/rust-lang/rust/commits/def3269a71be2e737cad27418a3dad9f5bd6cd32", "html_url": "https://github.com/rust-lang/rust/commit/def3269a71be2e737cad27418a3dad9f5bd6cd32"}], "stats": {"total": 150, "additions": 113, "deletions": 37}, "files": [{"sha": "93bb3cb6647a9f69ce3b09dcd53a72c40681ef80", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 80, "deletions": 37, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4", "patch": "@@ -15,7 +15,11 @@ use dataflow::move_paths::{HasMoveData, MoveData};\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::mir::Local;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+//use rustc::ty::subst::Kind;\n+use rustc::traits;\n+use rustc::infer::InferOk;\n use rustc::util::common::ErrorReported;\n+use borrow_check::nll::type_check::AtLocation;\n use rustc_data_structures::fx::FxHashSet;\n use syntax::codemap::DUMMY_SP;\n use util::liveness::LivenessResults;\n@@ -184,48 +188,87 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n             location\n         );\n \n-        let tcx = self.cx.infcx.tcx;\n-        let mut types = vec![(dropped_ty, 0)];\n-        let mut known = FxHashSet();\n-        while let Some((ty, depth)) = types.pop() {\n-            let span = DUMMY_SP; // FIXME\n-            let result = match tcx.dtorck_constraint_for_ty(span, dropped_ty, depth, ty) {\n-                Ok(result) => result,\n-                Err(ErrorReported) => {\n-                    continue;\n-                }\n-            };\n-\n-            let ty::DtorckConstraint {\n-                outlives,\n-                dtorck_types,\n-            } = result;\n-\n-            // All things in the `outlives` array may be touched by\n-            // the destructor and must be live at this point.\n-            for outlive in outlives {\n-                let cause = Cause::DropVar(dropped_local, location);\n-                self.push_type_live_constraint(outlive, location, cause);\n-            }\n+        // If we end visiting the same type twice (usually due to a cycle involving\n+        // associated types), we need to ensure that its region types match up with the type\n+        // we added to the 'known' map the first time around. For this reason, we need\n+        // our infcx to hold onto its calculated region constraints after each call\n+        // to dtorck_constraint_for_ty. Otherwise, normalizing the corresponding associated\n+        // type will end up instantiating the type with a new set of inference variables\n+        // Since this new type will never be in 'known', we end up looping forever.\n+        //\n+        // For this reason, we avoid calling TypeChecker.normalize, instead doing all normalization\n+        // ourselves in one large 'fully_perform_op' callback.\n+        let (type_constraints, kind_constraints) = self.cx.fully_perform_op(location.at_self(),\n+            |cx| {\n+\n+            let tcx = cx.infcx.tcx;\n+            let mut selcx = traits::SelectionContext::new(cx.infcx);\n+            let cause = cx.misc(cx.last_span);\n+\n+            let mut types = vec![(dropped_ty, 0)];\n+            let mut final_obligations = Vec::new();\n+            let mut type_constraints = Vec::new();\n+            let mut kind_constraints = Vec::new();\n \n-            // However, there may also be some types that\n-            // `dtorck_constraint_for_ty` could not resolve (e.g.,\n-            // associated types and parameters). We need to normalize\n-            // associated types here and possibly recursively process.\n-            for ty in dtorck_types {\n-                let ty = self.cx.normalize(&ty, location);\n-                let ty = self.cx.infcx.resolve_type_and_region_vars_if_possible(&ty);\n-                match ty.sty {\n-                    ty::TyParam(..) | ty::TyProjection(..) | ty::TyAnon(..) => {\n-                        let cause = Cause::DropVar(dropped_local, location);\n-                        self.push_type_live_constraint(ty, location, cause);\n+            let mut known = FxHashSet();\n+\n+            while let Some((ty, depth)) = types.pop() {\n+                let span = DUMMY_SP; // FIXME\n+                let result = match tcx.dtorck_constraint_for_ty(span, dropped_ty, depth, ty) {\n+                    Ok(result) => result,\n+                    Err(ErrorReported) => {\n+                        continue;\n                     }\n+                };\n+\n+                let ty::DtorckConstraint {\n+                    outlives,\n+                    dtorck_types,\n+                } = result;\n+\n+                // All things in the `outlives` array may be touched by\n+                // the destructor and must be live at this point.\n+                for outlive in outlives {\n+                    let cause = Cause::DropVar(dropped_local, location);\n+                    kind_constraints.push((outlive, location, cause));\n+                }\n \n-                    _ => if known.insert(ty) {\n-                        types.push((ty, depth + 1));\n-                    },\n+                // However, there may also be some types that\n+                // `dtorck_constraint_for_ty` could not resolve (e.g.,\n+                // associated types and parameters). We need to normalize\n+                // associated types here and possibly recursively process.\n+                for ty in dtorck_types {\n+                    let traits::Normalized { value: ty, obligations } =\n+                        traits::normalize(&mut selcx, cx.param_env, cause.clone(), &ty);\n+\n+                    final_obligations.extend(obligations);\n+\n+                    //let ty = self.cx.normalize(&ty, location);\n+                    let ty = cx.infcx.resolve_type_and_region_vars_if_possible(&ty);\n+                    match ty.sty {\n+                        ty::TyParam(..) | ty::TyProjection(..) | ty::TyAnon(..) => {\n+                            let cause = Cause::DropVar(dropped_local, location);\n+                            type_constraints.push((ty, location, cause));\n+                        }\n+\n+                        _ => if known.insert(ty) {\n+                            types.push((ty, depth + 1));\n+                        },\n+                    }\n                 }\n             }\n+\n+            Ok(InferOk {\n+                value: (type_constraints, kind_constraints), obligations: final_obligations\n+            })\n+        }).unwrap();\n+\n+        for (ty, location, cause) in type_constraints {\n+            self.push_type_live_constraint(ty, location, cause);\n+        }\n+\n+        for (kind, location, cause) in kind_constraints {\n+            self.push_type_live_constraint(kind, location, cause);\n         }\n     }\n }"}, {"sha": "393c18efad0adb17af157ae551e0e901df419ccd", "filename": "src/test/run-pass/nll/issue-47589.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-47589.rs?ref=0fd4f3794495d7348ccb8d5d7dc1404d380ecbc4", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+pub struct DescriptorSet<'a> {\n+    pub slots: Vec<AttachInfo<'a, Resources>>\n+}\n+\n+pub trait ResourcesTrait<'r>: Sized {\n+    type DescriptorSet: 'r;\n+}\n+\n+pub struct Resources;\n+\n+impl<'a> ResourcesTrait<'a> for Resources {\n+    type DescriptorSet = DescriptorSet<'a>;\n+}\n+\n+pub enum AttachInfo<'a, R: ResourcesTrait<'a>> {\n+    NextDescriptorSet(Box<R::DescriptorSet>)\n+}\n+\n+fn main() {\n+    let _x = DescriptorSet {slots: Vec::new()};\n+}"}]}