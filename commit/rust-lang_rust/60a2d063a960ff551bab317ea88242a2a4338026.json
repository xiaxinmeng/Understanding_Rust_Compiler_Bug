{"sha": "60a2d063a960ff551bab317ea88242a2a4338026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTJkMDYzYTk2MGZmNTUxYmFiMzE3ZWE4ODI0MmEyYTQzMzgwMjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T17:03:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-18T17:03:47Z"}, "message": "Rollup merge of #70075 - GuillaumeGomez:fix-repr-display, r=petrochenkov\n\nFix repr pretty display\n\nFixes #70027.\n\nr? @varkor", "tree": {"sha": "3d53ecf8cdb7358ee27cef54f6f0bf032d1abf87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d53ecf8cdb7358ee27cef54f6f0bf032d1abf87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a2d063a960ff551bab317ea88242a2a4338026", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeclRzCRBK7hj4Ov3rIwAAdHIIAECKUyhwZ1V9zB3poNsGceJP\npzRIhkcFRqxNqUVqSbGetwYJ7jx10BiVLsyzZfehJkP147k5/O1E+dOEsCfsVjjH\nVJOfFvPY1YzMwEIiszkDCgrFv5U9tfvp3PaJet1VoqsNm8Xx5iYy/+Kh5krEJbIi\neKjaZj7VVGqgO6AsdsRjYe9XGD2+4PphucXTabi9VD/SWy3tgH5PPXc6/8flvkaz\n4d5eGUrQ4ZyWVIOUdL5gKqN/E1RuhNBOrR00uRVGoBy04EGSWtgMWCzq/xYYSmzO\ntd4GUQJBtqjpBMKTL6E1884UeTAhJxIRdEJ3AV8o2AM/AlMx6EXEbfsxQQhlFT8=\n=qs0A\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d53ecf8cdb7358ee27cef54f6f0bf032d1abf87\nparent 292c538265e428b13ccb6a01f161d9f64b389f4f\nparent 9a017da45922efa25f3e40b6a999b47aa1af9c89\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584551027 +0100\ncommitter GitHub <noreply@github.com> 1584551027 +0100\n\nRollup merge of #70075 - GuillaumeGomez:fix-repr-display, r=petrochenkov\n\nFix repr pretty display\n\nFixes #70027.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a2d063a960ff551bab317ea88242a2a4338026", "html_url": "https://github.com/rust-lang/rust/commit/60a2d063a960ff551bab317ea88242a2a4338026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a2d063a960ff551bab317ea88242a2a4338026/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292c538265e428b13ccb6a01f161d9f64b389f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/292c538265e428b13ccb6a01f161d9f64b389f4f", "html_url": "https://github.com/rust-lang/rust/commit/292c538265e428b13ccb6a01f161d9f64b389f4f"}, {"sha": "9a017da45922efa25f3e40b6a999b47aa1af9c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a017da45922efa25f3e40b6a999b47aa1af9c89", "html_url": "https://github.com/rust-lang/rust/commit/9a017da45922efa25f3e40b6a999b47aa1af9c89"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "bb73e982a9c28aa098bfaf993f6797a3deb8428e", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -148,12 +148,19 @@ pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n \n // This makes comma-separated lists look slightly nicer,\n // and also addresses a specific regression described in issue #63896.\n-fn tt_prepend_space(tt: &TokenTree) -> bool {\n+fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n     match tt {\n         TokenTree::Token(token) => match token.kind {\n             token::Comma => false,\n             _ => true,\n         },\n+        TokenTree::Delimited(_, DelimToken::Paren, _) => match prev {\n+            TokenTree::Token(token) => match token.kind {\n+                token::Ident(_, _) => false,\n+                _ => true,\n+            },\n+            _ => true,\n+        },\n         _ => true,\n     }\n }\n@@ -650,11 +657,14 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn print_tts(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n-        for (i, tt) in tts.into_trees().enumerate() {\n-            if i != 0 && tt_prepend_space(&tt) {\n+        let mut iter = tts.into_trees().peekable();\n+        while let Some(tt) = iter.next() {\n+            let show_space =\n+                if let Some(next) = iter.peek() { tt_prepend_space(next, &tt) } else { false };\n+            self.print_tt(tt, convert_dollar_crate);\n+            if show_space {\n                 self.space();\n             }\n-            self.print_tt(tt, convert_dollar_crate);\n         }\n     }\n "}, {"sha": "d782a9d5a094ddb6a528bf0c6920aff9d178cb24", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -3151,7 +3151,6 @@ fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n             continue;\n         }\n \n-        // FIXME: this currently renders too many spaces as in: `#[repr(C, align (8))]`.\n         attrs.push_str(&pprust::attribute_to_string(&attr));\n     }\n     if !attrs.is_empty() {"}, {"sha": "44d2c5db3e668e67fad55215387a9710a4aeb250", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -5,7 +5,7 @@\n #![feature(rustc_attrs)]\n \n fn main() {\n-    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name (\"John\"))]\n+    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n     #[rustc_dummy = 8]\n     fn f() { }\n "}, {"sha": "66de0fc6cf7fa85c4487d161182f1314bc6d3792", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -7,7 +7,7 @@ macro_rules! mac { ($ ($ tt : tt) *) => () }\n mac! {\n     struct S { field1 : u8, field2 : u16, } impl Clone for S\n     {\n-        fn clone () -> S\n+        fn clone() -> S\n         {\n             panic ! () ;\n \n@@ -16,9 +16,8 @@ mac! {\n }\n \n mac! {\n-    a\n-    (aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa) a\n+    a(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n+      aaaaaaaa aaaaaaaa) a\n     [aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n      aaaaaaaa aaaaaaaa] a\n     {"}, {"sha": "031a4825959329f11360f13940057b1c8ebcac31", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -12,5 +12,5 @@ const C: C =\n       #[cfg(debug_assertions)]\n       field: 0,\n \n-      #[cfg(not (debug_assertions))]\n+      #[cfg(not(debug_assertions))]\n       field: 1,};"}, {"sha": "e9cd3514a07e21623424b7f1f5648e0379c138de", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -16,6 +16,6 @@ pub enum Foo {\n     Bar,\n }\n \n-// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align (8))]'\n+// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "6217decd8ef88598a80d40f65cbbf3d50304b32e", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print ($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n "}, {"sha": "cf9a97491f03941ce9902ed181d1a848cfb8b364", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -1 +1 @@\n-fn main () { let y : u32 = \"z\" ; { let x : u32 = \"y\" ; } }\n+fn main() { let y : u32 = \"z\" ; { let x : u32 = \"y\" ; } }"}, {"sha": "15433bebde967df2bfe250a52ab4f89ba4e2b5e0", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n+PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "73e407918ec8cf68b7585d7018eb5105c9ccdaff", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A (identity ! ($crate :: S)) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -55,7 +55,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct B(identity!(::dollar_crate_external :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct B (identity ! ($crate :: S)) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct B(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "e125a3e7f17370619ce2917e190fa6b5596d09a1", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60a2d063a960ff551bab317ea88242a2a4338026/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=60a2d063a960ff551bab317ea88242a2a4338026", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n+PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -80,7 +80,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -120,7 +120,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: #3 bytes(LO..HI),\n     },\n ]\n-PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n+PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -161,7 +161,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -202,7 +202,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}]}