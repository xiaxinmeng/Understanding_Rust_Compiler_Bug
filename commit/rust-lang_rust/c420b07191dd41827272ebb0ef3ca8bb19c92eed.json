{"sha": "c420b07191dd41827272ebb0ef3ca8bb19c92eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjBiMDcxOTFkZDQxODI3MjcyZWJiMGVmM2NhOGJiMTljOTJlZWQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-04T13:00:01Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-04T13:39:46Z"}, "message": "Fix needless_pass_by_value\n\nThis also accidentally improved the spans of the suggestions", "tree": {"sha": "314e4a5de8c4e0e87ff4f6e6c08c800d4d287807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/314e4a5de8c4e0e87ff4f6e6c08c800d4d287807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c420b07191dd41827272ebb0ef3ca8bb19c92eed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl2XS6IACgkQaTCGhp1Q\nZjc1GBAAikWPn1v1uxV0iqLBYjD/G+2/6YYAN62axGUsv/uR4owrRQeJspBUsGYl\njoodUHkjyETksa9JtThDAzqe6gBUSu9NJYDgMCkYhhwUVC/v5tv2cp3gsR44uzIe\nBhzPYHV0J9kCY7sm21jh0mpaFhUBz9PX8PaTzPGlIC7cRa09Ojx0BV479SS5L9nD\nN1LTs8IisPFP927ZKVsYoMiTsAvE3/GrogBcFFqpy6TJFOxaVayJxzTD8HvwubEx\n9/i8jLbtK7DXseg/fsYCJ6bL+8ngBIjTeE2r9Wu2MzcqJuNrKg+vh/W6ujR6LyJA\nhErgFJ0kiHFx34NXKsD2g76YXDrZHPCXbrdMdjFx/mypmDRF8q5xK5Gj9BeiVV5r\nUpBZoiOwhusxQ69z0ztFaosjHpE8IRQVLAjDRN9nyuugRfiP96Ol4Mo8e9tAqNXW\ny8wn76au9WbPzk1F0BgYBw2uZCnyrvH8lISk4Rm2He5eIprEB8PynhDh4SQejxJ3\nvDf5eLSgvYK9yIpD69yQ/icdH/wnT1DbuLZW8eyNgNAqP2byWo5jKxLQTma/tRbb\n2B/WRJ7wAoZs5ahSjXqLOAJbvUesYGQaydb/6Nuc+rG+/5UGQd/pow4sXejd9083\n4bfOx8CWyEbfugKdWJU8ADOUd5uTQR0E8pdPbrDLo4ZBgbT420E=\n=fWZU\n-----END PGP SIGNATURE-----", "payload": "tree 314e4a5de8c4e0e87ff4f6e6c08c800d4d287807\nparent b46f5b4a98125c6c3a36d5014d6ca98d58c0352c\nauthor flip1995 <hello@philkrones.com> 1570194001 +0200\ncommitter flip1995 <hello@philkrones.com> 1570196386 +0200\n\nFix needless_pass_by_value\n\nThis also accidentally improved the spans of the suggestions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c420b07191dd41827272ebb0ef3ca8bb19c92eed", "html_url": "https://github.com/rust-lang/rust/commit/c420b07191dd41827272ebb0ef3ca8bb19c92eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c420b07191dd41827272ebb0ef3ca8bb19c92eed/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46f5b4a98125c6c3a36d5014d6ca98d58c0352c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46f5b4a98125c6c3a36d5014d6ca98d58c0352c", "html_url": "https://github.com/rust-lang/rust/commit/b46f5b4a98125c6c3a36d5014d6ca98d58c0352c"}], "stats": {"total": 124, "additions": 15, "deletions": 109}, "files": [{"sha": "acad6459cf246379196486f8496a70f60d723b76", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 7, "deletions": 77, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c420b07191dd41827272ebb0ef3ca8bb19c92eed/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c420b07191dd41827272ebb0ef3ca8bb19c92eed/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c420b07191dd41827272ebb0ef3ca8bb19c92eed", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n             spans_need_deref,\n             ..\n         } = {\n-            let mut ctx = MovedVariablesCtxt::new(cx);\n+            let mut ctx = MovedVariablesCtxt::default();\n             let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n             euv::ExprUseVisitor::new(\n                 &mut ctx,\n@@ -324,98 +324,28 @@ fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n     })\n }\n \n-struct MovedVariablesCtxt<'a, 'tcx> {\n-    cx: &'a LateContext<'a, 'tcx>,\n+#[derive(Default)]\n+struct MovedVariablesCtxt {\n     moved_vars: FxHashSet<HirId>,\n     /// Spans which need to be prefixed with `*` for dereferencing the\n     /// suggested additional reference.\n     spans_need_deref: FxHashMap<HirId, FxHashSet<Span>>,\n }\n \n-impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n-    fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n-        Self {\n-            cx,\n-            moved_vars: FxHashSet::default(),\n-            spans_need_deref: FxHashMap::default(),\n-        }\n-    }\n-\n-    fn move_common(&mut self, _consume_id: HirId, _span: Span, cmt: &mc::cmt_<'tcx>) {\n+impl MovedVariablesCtxt {\n+    fn move_common(&mut self, cmt: &mc::cmt_<'_>) {\n         let cmt = unwrap_downcast_or_interior(cmt);\n \n         if let mc::Categorization::Local(vid) = cmt.cat {\n             self.moved_vars.insert(vid);\n         }\n     }\n-\n-    fn non_moving_pat(&mut self, matched_pat: &Pat, cmt: &mc::cmt_<'tcx>) {\n-        let cmt = unwrap_downcast_or_interior(cmt);\n-\n-        if let mc::Categorization::Local(vid) = cmt.cat {\n-            let mut id = matched_pat.hir_id;\n-            loop {\n-                let parent = self.cx.tcx.hir().get_parent_node(id);\n-                if id == parent {\n-                    // no parent\n-                    return;\n-                }\n-                id = parent;\n-\n-                if let Some(node) = self.cx.tcx.hir().find(id) {\n-                    match node {\n-                        Node::Expr(e) => {\n-                            // `match` and `if let`\n-                            if let ExprKind::Match(ref c, ..) = e.kind {\n-                                self.spans_need_deref\n-                                    .entry(vid)\n-                                    .or_insert_with(FxHashSet::default)\n-                                    .insert(c.span);\n-                            }\n-                        },\n-\n-                        Node::Stmt(s) => {\n-                            // `let <pat> = x;`\n-                            if_chain! {\n-                                if let StmtKind::Local(ref local) = s.kind;\n-                                then {\n-                                    self.spans_need_deref\n-                                        .entry(vid)\n-                                        .or_insert_with(FxHashSet::default)\n-                                        .insert(local.init\n-                                            .as_ref()\n-                                            .map(|e| e.span)\n-                                            .expect(\"`let` stmt without init aren't caught by match_pat\"));\n-                                }\n-                            }\n-                        },\n-\n-                        _ => {},\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n-impl<'a, 'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'tcx> {\n+impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n     fn consume(&mut self, cmt: &mc::cmt_<'tcx>, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move = mode {\n-            self.move_common(cmt.hir_id, cmt.span, cmt);\n-        }\n-    }\n-\n-    fn matched_pat(&mut self, matched_pat: &Pat, cmt: &mc::cmt_<'tcx>, mode: euv::MatchMode) {\n-        if let euv::MatchMode::MovingMatch = mode {\n-            self.move_common(matched_pat.hir_id, matched_pat.span, cmt);\n-        } else {\n-            self.non_moving_pat(matched_pat, cmt);\n-        }\n-    }\n-\n-    fn consume_pat(&mut self, consume_pat: &Pat, cmt: &mc::cmt_<'tcx>, mode: euv::ConsumeMode) {\n-        if let euv::ConsumeMode::Move(_) = mode {\n-            self.move_common(consume_pat.hir_id, consume_pat.span, cmt);\n+            self.move_common(cmt);\n         }\n     }\n "}, {"sha": "0eeb76e0ec5fd713656843aa48b6000fdd98803f", "filename": "tests/ui/mut_range_bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c420b07191dd41827272ebb0ef3ca8bb19c92eed/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c420b07191dd41827272ebb0ef3ca8bb19c92eed/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=c420b07191dd41827272ebb0ef3ca8bb19c92eed", "patch": "@@ -2,27 +2,27 @@ error: attempt to mutate range bound within loop; note that the range of the loo\n   --> $DIR/mut_range_bound.rs:16:9\n    |\n LL |         m = 5;\n-   |         ^^^^^\n+   |         ^\n    |\n    = note: `-D clippy::mut-range-bound` implied by `-D warnings`\n \n error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n   --> $DIR/mut_range_bound.rs:23:9\n    |\n LL |         m *= 2;\n-   |         ^^^^^^\n+   |         ^\n \n error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n   --> $DIR/mut_range_bound.rs:31:9\n    |\n LL |         m = 5;\n-   |         ^^^^^\n+   |         ^\n \n error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n   --> $DIR/mut_range_bound.rs:32:9\n    |\n LL |         n = 7;\n-   |         ^^^^^\n+   |         ^\n \n error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n   --> $DIR/mut_range_bound.rs:46:22"}, {"sha": "3cb64a227f1af81e52766329177bedc605d39fea", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c420b07191dd41827272ebb0ef3ca8bb19c92eed/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c420b07191dd41827272ebb0ef3ca8bb19c92eed/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=c420b07191dd41827272ebb0ef3ca8bb19c92eed", "patch": "@@ -28,12 +28,7 @@ error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:49:18\n    |\n LL | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n-help: consider taking a reference instead\n-   |\n-LL | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n-LL |     match *x {\n-   |\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&Option<Option<String>>`\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:62:24\n@@ -45,14 +40,7 @@ error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:62:36\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n-   |                                    ^^^^^^^\n-help: consider taking a reference instead\n-   |\n-LL | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n-LL |     let Wrapper(s) = z; // moved\n-LL |     let Wrapper(ref t) = *y; // not moved\n-LL |     let Wrapper(_) = *y; // still not moved\n-   |\n+   |                                    ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:78:49\n@@ -152,37 +140,25 @@ error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:131:45\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n-   |                                             ^^^^^^^^^^^\n+   |                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n   --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider taking a reference instead\n-   |\n-LL | fn test_destructure_copy(x: CopyWrapper, y: &CopyWrapper, z: CopyWrapper) {\n-LL |     let CopyWrapper(s) = z; // moved\n-LL |     let CopyWrapper(ref t) = *y; // not moved\n-LL |     let CopyWrapper(_) = *y; // still not moved\n-   |\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:131:61\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n-   |                                                             ^^^^^^^^^^^\n+   |                                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as Copy\n   --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider taking a reference instead\n-   |\n-LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: &CopyWrapper) {\n-LL |     let CopyWrapper(s) = *z; // moved\n-   |\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:143:40"}]}