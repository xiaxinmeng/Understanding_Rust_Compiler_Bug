{"sha": "b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2N2JlM2FhNmI4MTAxYzYzZjdkMzFlODA3NDFjN2JjNzhmMGNiNDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-12T21:53:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T21:53:34Z"}, "message": "Rollup merge of #81911 - BoxyUwU:constgenericgaticefix, r=nikomatsakis\n\nGAT/const_generics: Allow with_opt_const_param to return GAT param def_id\n\nFixes #75415\nFixes #79666\ncc ```@lcnr```\n\nI've absolutely no idea who to r?  for this...", "tree": {"sha": "4fb98c5abeb6bf9fdd3d215c6d8a2ab65cbf6393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb98c5abeb6bf9fdd3d215c6d8a2ab65cbf6393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJvjfCRBK7hj4Ov3rIwAAdHIIAHR6Gi90Aiax2a/OK8nixJQV\nMr5qCgdWACT4OwvHTweE6+2MX0As0yEySV0x2oJDXxHYbehRFC5XPppEIMqKphtC\nOPTbgfK1Db3y0/kV4ooTzlfeopdengwI4cN+k2Qr5r3g55LiXvtC+RyluvOTBV4B\n4nRog3fLy8ssLTGDodDsP4/Uh/isMU/dJb6l9u55mt51eT1jbejiFlZzRKGZ1Qki\nI4m4XtOyk87wUxUDCxGHyL4S/3TE09mEAn46qUj0fNpDUmV5gKibOnLGUr3ZKBAd\nq2rB7ZkygaGa5L0g1Owp6uO3NFZwntr8GLvaou72FWDCJBro+zAONMNK81f9KtM=\n=0v02\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fb98c5abeb6bf9fdd3d215c6d8a2ab65cbf6393\nparent 354f19cf2475148994954b6783341620c7445071\nparent 7ca96ed2af7552cf67be36befe8f6e25e5fe63f8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613166814 +0100\ncommitter GitHub <noreply@github.com> 1613166814 +0100\n\nRollup merge of #81911 - BoxyUwU:constgenericgaticefix, r=nikomatsakis\n\nGAT/const_generics: Allow with_opt_const_param to return GAT param def_id\n\nFixes #75415\nFixes #79666\ncc ```@lcnr```\n\nI've absolutely no idea who to r?  for this...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "html_url": "https://github.com/rust-lang/rust/commit/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354f19cf2475148994954b6783341620c7445071", "url": "https://api.github.com/repos/rust-lang/rust/commits/354f19cf2475148994954b6783341620c7445071", "html_url": "https://github.com/rust-lang/rust/commit/354f19cf2475148994954b6783341620c7445071"}, {"sha": "7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "html_url": "https://github.com/rust-lang/rust/commit/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "7fa58dcd5f44f0aaf4b7bf5709be61d1bdb45559", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "patch": "@@ -29,6 +29,73 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         let parent_node = tcx.hir().get(parent_node_id);\n \n         match parent_node {\n+            // This match arm is for when the def_id appears in a GAT whose\n+            // path can't be resolved without typechecking e.g.\n+            //\n+            // trait Foo {\n+            //   type Assoc<const N: usize>;\n+            //   fn foo() -> Self::Assoc<3>;\n+            // }\n+            //\n+            // In the above code we would call this query with the def_id of 3 and\n+            // the parent_node we match on would be the hir node for Self::Assoc<3>\n+            //\n+            // `Self::Assoc<3>` cant be resolved without typchecking here as we\n+            // didnt write <Self as Foo>::Assoc<3>. If we did then another match\n+            // arm would handle this.\n+            //\n+            // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n+            Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n+                // Find the Item containing the associated type so we can create an ItemCtxt.\n+                // Using the ItemCtxt convert the HIR for the unresolved assoc type into a\n+                // ty which is a fully resolved projection.\n+                // For the code example above, this would mean converting Self::Assoc<3>\n+                // into a ty::Projection(<Self as Foo>::Assoc<3>)\n+                let item_hir_id = tcx\n+                    .hir()\n+                    .parent_iter(hir_id)\n+                    .filter(|(_, node)| matches!(node, Node::Item(_)))\n+                    .map(|(id, _)| id)\n+                    .next()\n+                    .unwrap();\n+                let item_did = tcx.hir().local_def_id(item_hir_id).to_def_id();\n+                let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n+                let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n+\n+                // Iterate through the generics of the projection to find the one that corresponds to\n+                // the def_id that this query was called with. We filter to only const args here as a\n+                // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n+                // but it can't hurt to be safe ^^\n+                if let ty::Projection(projection) = ty.kind() {\n+                    let generics = tcx.generics_of(projection.item_def_id);\n+\n+                    let arg_index = segment\n+                        .args\n+                        .and_then(|args| {\n+                            args.args\n+                                .iter()\n+                                .filter(|arg| arg.is_const())\n+                                .position(|arg| arg.id() == hir_id)\n+                        })\n+                        .unwrap_or_else(|| {\n+                            bug!(\"no arg matching AnonConst in segment\");\n+                        });\n+\n+                    return generics\n+                        .params\n+                        .iter()\n+                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                        .nth(arg_index)\n+                        .map(|param| param.def_id);\n+                }\n+\n+                // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(def_id),\n+                    \"unexpected non-GAT usage of an anon const\",\n+                );\n+                return None;\n+            }\n             Node::Expr(&Expr {\n                 kind:\n                     ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),"}, {"sha": "22d95b8bcc08feace42a9ba38d465692f58a9c5f", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "patch": "@@ -56,6 +56,7 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "ab33ef6f2442c4c0a9777c7967054e8677ef7e35", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs?ref=b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo(&self) -> Self::Assoc<3>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo(&self) -> Self::Assoc<3> {\n+        [(); 3]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo(), [(); 3]);\n+}"}, {"sha": "ba9a82ae721092a9a9c94ed6a3bfc8af3e534bd1", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs?ref=b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo<const N: usize>(&self) -> Self::Assoc<N>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo<const N: usize>(&self) -> Self::Assoc<N> {\n+        [(); N]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo::<10>(), [(); 10]);\n+}"}, {"sha": "9da5334056a37e9844abbde110073fc47a82874e", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67be3aa6b8101c63f7d31e80741c7bc78f0cb49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs?ref=b67be3aa6b8101c63f7d31e80741c7bc78f0cb49", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Bar::Assoc GAT.\n+\n+trait Bar {\n+    type Assoc<const N: usize>;\n+}\n+trait Foo: Bar {\n+    fn foo(&self) -> Self::Assoc<3>;\n+}\n+\n+impl Bar for () {\n+    type Assoc<const N: usize> = [(); N];\n+}\n+\n+impl Foo for () {\n+    fn foo(&self) -> Self::Assoc<3> {\n+        [(); 3]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo(), [(); 3]);\n+}"}]}