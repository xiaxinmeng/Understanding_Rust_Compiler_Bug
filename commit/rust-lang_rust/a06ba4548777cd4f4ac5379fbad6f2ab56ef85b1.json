{"sha": "a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1", "node_id": "C_kwDOAAsO6NoAKGEwNmJhNDU0ODc3N2NkNGY0YWM1Mzc5ZmJhZDZmMmFiNTZlZjg1YjE", "commit": {"author": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-31T19:32:07Z"}, "committer": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-31T19:32:07Z"}, "message": "migrate `error_on_incorrect_await` diagnostic", "tree": {"sha": "04f5cbbc669ef8bda086656fdb26846dd3d12e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f5cbbc669ef8bda086656fdb26846dd3d12e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCYpZtNwAKCRAnUl7150IK\nUDcIAPwJk57MtcVSbzjPFqRO1805jXw8nIvr8FP+qwAizakRxwD6Ak8R5fYlHfNQ\nWDZtMzebNqKue2IeS+P+TUVegyReLAE=\n=6aMp\n-----END PGP SIGNATURE-----", "payload": "tree 04f5cbbc669ef8bda086656fdb26846dd3d12e4c\nparent 2a0496cbc822b8e5488f6c4ba4cf9588595daf2a\nauthor Christian Poveda <git@pvdrz.com> 1654025527 -0500\ncommitter Christian Poveda <git@pvdrz.com> 1654025527 -0500\n\nmigrate `error_on_incorrect_await` diagnostic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1", "html_url": "https://github.com/rust-lang/rust/commit/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a0496cbc822b8e5488f6c4ba4cf9588595daf2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0496cbc822b8e5488f6c4ba4cf9588595daf2a", "html_url": "https://github.com/rust-lang/rust/commit/2a0496cbc822b8e5488f6c4ba4cf9588595daf2a"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "98836bbc485b9f649c784bc8023d618c314d3d6f", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1", "patch": "@@ -27,3 +27,8 @@ parser-incorrect-semicolon =\n parser-incorrect-use-of-await =\n     incorrect use of `await`\n     .suggestion = `await` is not a method call, remove the parentheses\n+\n+\n+parser-incorrect-await =\n+    incorrect use of `await`\n+    .suggestion = `await` is a postfix operation"}, {"sha": "1c09f56e4e604a90202a9f31f7eb204e80f0359b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a06ba4548777cd4f4ac5379fbad6f2ab56ef85b1", "patch": "@@ -314,6 +314,17 @@ struct IncorrectUseOfAwait {\n     span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-incorrect-await\")]\n+struct IncorrectAwait {\n+    #[primary_span]\n+    span: Span,\n+    #[suggestion(code = \"{expr}.await{question_mark}\")]\n+    sugg_span: (Span, Applicability),\n+    expr: String,\n+    question_mark: &'static str,\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1643,18 +1654,20 @@ impl<'a> Parser<'a> {\n     }\n \n     fn error_on_incorrect_await(&self, lo: Span, hi: Span, expr: &Expr, is_question: bool) -> Span {\n-        let expr_str =\n-            self.span_to_snippet(expr.span).unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-        let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n-        let sp = lo.to(hi);\n-        let app = match expr.kind {\n+        let span = lo.to(hi);\n+        let applicability = match expr.kind {\n             ExprKind::Try(_) => Applicability::MaybeIncorrect, // `await <expr>?`\n             _ => Applicability::MachineApplicable,\n         };\n-        self.struct_span_err(sp, \"incorrect use of `await`\")\n-            .span_suggestion(sp, \"`await` is a postfix operation\", suggestion, app)\n-            .emit();\n-        sp\n+\n+        self.sess.emit_err(IncorrectAwait {\n+            span,\n+            sugg_span: (span, applicability),\n+            expr: self.span_to_snippet(expr.span).unwrap_or_else(|_| pprust::expr_to_string(&expr)),\n+            question_mark: if is_question { \"?\" } else { \"\" },\n+        });\n+\n+        span\n     }\n \n     /// If encountering `future.await()`, consumes and emits an error."}]}