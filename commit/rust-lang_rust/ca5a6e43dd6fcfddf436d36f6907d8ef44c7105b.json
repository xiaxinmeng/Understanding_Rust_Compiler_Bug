{"sha": "ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "node_id": "C_kwDOAAsO6NoAKGNhNWE2ZTQzZGQ2ZmNmZGRmNDM2ZDM2ZjY5MDdkOGVmNDRjNzEwNWI", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-10-27T21:18:26Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-10-27T21:18:26Z"}, "message": "use proper spans", "tree": {"sha": "f9018ba5918da8443177c4e580ac5ba8410c9483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9018ba5918da8443177c4e580ac5ba8410c9483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "html_url": "https://github.com/rust-lang/rust/commit/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "html_url": "https://github.com/rust-lang/rust/commit/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "855866be6279fe7710b439e5e223bccabd266e28", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -147,4 +147,6 @@ hir_analysis_const_impl_for_non_const_trait =\n hir_analysis_const_bound_for_non_const_trait =\n     ~const can only be applied to `#[const_trait]` traits\n \n-hir_analysis_self_in_impl_self = `Self` is not valid at this location\n+hir_analysis_self_in_impl_self = \n+    `Self` is not valid in the self type of an impl block\n+    .note = replace `Self` with a different type\n\\ No newline at end of file"}, {"sha": "2032a4bce60cdb5cb796d9a9ace5cd89e70acc0c", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -322,7 +322,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 ItemKind::Impl(\n                     hir::Impl { self_ty, .. }\n                 ) => {\n-                    struct MyVisitor(bool);\n+                    struct MyVisitor(Vec<Span>);\n                     impl<'v> hir::intravisit::Visitor<'v> for MyVisitor {\n                         fn visit_ty(&mut self, t: &'v Ty<'v>) {\n                             if matches!(\n@@ -335,19 +335,22 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     },\n                                 ))\n                             ) {\n-                                self.0 = true;\n+                                self.0.push(t.span);\n                                 return;\n                             }\n                             hir::intravisit::walk_ty(self, t);\n                         }\n                     }\n \n-                    let mut my_visitor = MyVisitor(false);\n+                    let mut my_visitor = MyVisitor(vec![]);\n                     my_visitor.visit_ty(self_ty);\n \n                     match my_visitor.0 {\n-                        true => { tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: self_ty.span}); tcx.ty_error() },\n-                        false => icx.to_ty(*self_ty),\n+                        spans if spans.len() > 0 => { \n+                            tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: (), });\n+                            tcx.ty_error() \n+                        },\n+                        _ => icx.to_ty(*self_ty),\n                     }\n                 },\n                 ItemKind::Fn(..) => {"}, {"sha": "6ed8244d119debd7ad82e5739bf1ab32c0db35e8", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -1,7 +1,7 @@\n //! Errors emitted by `rustc_hir_analysis`.\n \n-use rustc_errors::IntoDiagnostic;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n+use rustc_errors::{IntoDiagnostic, MultiSpan};\n use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -275,5 +275,7 @@ pub struct ConstBoundForNonConstTrait {\n #[diag(hir_analysis_self_in_impl_self)]\n pub struct SelfInImplSelf {\n     #[primary_span]\n-    pub span: Span,\n+    pub span: MultiSpan,\n+    #[note]\n+    pub note: (),\n }"}, {"sha": "6d7fe7c50a230a80447186611e7a8c0b0d56e904", "filename": "src/test/ui/resolve/issue-23305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -3,6 +3,6 @@ pub trait ToNbt<T> {\n }\n \n impl dyn ToNbt<Self> {}\n-//~^ ERROR `Self` is not valid at this location\n+//~^ ERROR `Self` is not valid in the self type of an impl block\n \n fn main() {}"}, {"sha": "aad1b583a3244c8d86dbd97fdd584c987a8cf742", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -1,8 +1,10 @@\n-error: `Self` is not valid at this location\n-  --> $DIR/issue-23305.rs:5:6\n+error: `Self` is not valid in the self type of an impl block\n+  --> $DIR/issue-23305.rs:5:16\n    |\n LL | impl dyn ToNbt<Self> {}\n-   |      ^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n error: aborting due to previous error\n "}, {"sha": "d0872d1b76f20e762a1bc5748d80357a2f9771e6", "filename": "src/test/ui/resolve/resolve-self-in-impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -11,10 +11,11 @@ impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK\n \n-impl Tr for Self {} //~ ERROR `Self` is not valid at this location\n-impl Tr for S<Self> {} //~ ERROR `Self` is not valid at this location\n-impl Self {} //~ ERROR `Self` is not valid at this location\n-impl S<Self> {} //~ ERROR `Self` is not valid at this location\n+impl Tr for Self {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl Tr for S<Self> {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl Self {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl S<Self> {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl (Self, Self) {} //~ ERROR `Self` is not valid in the self type of an impl block\n impl Tr<Self::A> for S {} //~ ERROR cycle detected\n \n fn main() {}"}, {"sha": "9f9ed68898f6c37401472a15ad3ca3bd34534955", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "patch": "@@ -1,34 +1,50 @@\n-error: `Self` is not valid at this location\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n LL | impl Tr for Self {}\n    |             ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n-error: `Self` is not valid at this location\n-  --> $DIR/resolve-self-in-impl.rs:15:13\n+error: `Self` is not valid in the self type of an impl block\n+  --> $DIR/resolve-self-in-impl.rs:15:15\n    |\n LL | impl Tr for S<Self> {}\n-   |             ^^^^^^^\n+   |               ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n-error: `Self` is not valid at this location\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n LL | impl Self {}\n    |      ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n-error: `Self` is not valid at this location\n-  --> $DIR/resolve-self-in-impl.rs:17:6\n+error: `Self` is not valid in the self type of an impl block\n+  --> $DIR/resolve-self-in-impl.rs:17:8\n    |\n LL | impl S<Self> {}\n-   |      ^^^^^^^\n+   |        ^^^^\n+   |\n+   = note: replace `Self` with a different type\n+\n+error: `Self` is not valid in the self type of an impl block\n+  --> $DIR/resolve-self-in-impl.rs:18:7\n+   |\n+LL | impl (Self, Self) {}\n+   |       ^^^^  ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>`\n-  --> $DIR/resolve-self-in-impl.rs:18:1\n+error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:19:1: 19:23>`\n+  --> $DIR/resolve-self-in-impl.rs:19:1\n    |\n LL | impl Tr<Self::A> for S {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>` again\n+   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:19:1: 19:23>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -41,6 +57,6 @@ LL | |\n LL | | fn main() {}\n    | |____________^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0391`."}]}