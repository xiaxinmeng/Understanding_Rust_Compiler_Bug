{"sha": "a786eaac1f0272417fcc023516d09393e109a7ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODZlYWFjMWYwMjcyNDE3ZmNjMDIzNTE2ZDA5MzkzZTEwOWE3ZWE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-03T20:38:46Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-03T20:40:41Z"}, "message": "Simplify rustdoc handling of type aliases for associated types\n\nThe logic was very hard to follow before.", "tree": {"sha": "e8e14f2c408e093e6175938b231acb00b9387dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e14f2c408e093e6175938b231acb00b9387dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a786eaac1f0272417fcc023516d09393e109a7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a786eaac1f0272417fcc023516d09393e109a7ea", "html_url": "https://github.com/rust-lang/rust/commit/a786eaac1f0272417fcc023516d09393e109a7ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a786eaac1f0272417fcc023516d09393e109a7ea/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6", "html_url": "https://github.com/rust-lang/rust/commit/18d27b2c94cff9a5f6d8e4d2ea45f6f2e434e5f6"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "810aca3e15c7062bbeb124fc68f7d244d32568fd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a786eaac1f0272417fcc023516d09393e109a7ea", "patch": "@@ -261,26 +261,12 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n \n fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n+    let type_ = cx.tcx.type_of(did).clean(cx);\n \n     clean::Typedef {\n-        type_: cx.tcx.type_of(did).clean(cx),\n+        type_: type_.clone(),\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n-        item_type: build_type_alias_type(cx, did),\n-    }\n-}\n-\n-fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n-    let type_ = cx.tcx.type_of(did).clean(cx);\n-    type_.def_id().and_then(|did| build_ty(cx, did))\n-}\n-\n-crate fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n-    match cx.tcx.def_kind(did) {\n-        DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n-            Some(cx.tcx.type_of(did).clean(cx))\n-        }\n-        DefKind::TyAlias => build_type_alias_type(cx, did),\n-        _ => None,\n+        item_type: Some(type_),\n     }\n }\n "}, {"sha": "1029cb083603c680b1663be721d73ec2c9683f9c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a786eaac1f0272417fcc023516d09393e109a7ea", "patch": "@@ -1118,10 +1118,10 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     }\n                     MethodItem(m, Some(self.defaultness))\n                 }\n-                hir::ImplItemKind::TyAlias(ref ty) => {\n-                    let type_ = ty.clean(cx);\n-                    let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n-                    TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n+                hir::ImplItemKind::TyAlias(ref hir_ty) => {\n+                    let type_ = hir_ty.clean(cx);\n+                    let item_type = hir_ty_to_ty(cx.tcx, hir_ty).clean(cx);\n+                    TypedefItem(Typedef { type_, generics: Generics::default(), item_type: Some(item_type) }, true)\n                 }\n             };\n             Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n@@ -1267,13 +1267,13 @@ impl Clean<Item> for ty::AssocItem {\n \n                     AssocTypeItem(bounds, ty.clean(cx))\n                 } else {\n+                    // FIXME: when could this happen? ASsociated items in inherent impls?\n                     let type_ = cx.tcx.type_of(self.def_id).clean(cx);\n-                    let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n                     TypedefItem(\n                         Typedef {\n-                            type_,\n+                            type_: type_.clone(),\n                             generics: Generics { params: Vec::new(), where_predicates: Vec::new() },\n-                            item_type,\n+                            item_type: Some(type_),\n                         },\n                         true,\n                     )\n@@ -1986,11 +1986,11 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     bounds: ty.bounds.clean(cx),\n                     generics: ty.generics.clean(cx),\n                 }),\n-                ItemKind::TyAlias(ty, ref generics) => {\n-                    let rustdoc_ty = ty.clean(cx);\n-                    let item_type = rustdoc_ty.def_id().and_then(|did| inline::build_ty(cx, did));\n+                ItemKind::TyAlias(hir_ty, ref generics) => {\n+                    let rustdoc_ty = hir_ty.clean(cx);\n+                    let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                     TypedefItem(\n-                        Typedef { type_: rustdoc_ty, generics: generics.clean(cx), item_type },\n+                        Typedef { type_: rustdoc_ty, generics: generics.clean(cx), item_type: Some(ty.clean(cx)) },\n                         false,\n                     )\n                 }"}, {"sha": "be07444275e6a60a8c5379115f485be07faf2b50", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a786eaac1f0272417fcc023516d09393e109a7ea", "patch": "@@ -334,6 +334,10 @@ crate enum ItemKind {\n     ProcMacroItem(ProcMacro),\n     PrimitiveItem(PrimitiveType),\n     AssocConstItem(Type, Option<String>),\n+    /// An associated item in a trait or trait impl.\n+    ///\n+    /// The bounds may be non-empty if there is a `where` clause.\n+    /// The `Option<Type>` is the default concrete type (e.g. `trait Trait { type Target = usize; }`)\n     AssocTypeItem(Vec<GenericBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemKind>),"}, {"sha": "0430caa75bd298e169360efa15406933972e17bc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a786eaac1f0272417fcc023516d09393e109a7ea", "patch": "@@ -4308,6 +4308,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 .filter(|i| i.inner_impl().trait_.is_some())\n                 .find(|i| i.inner_impl().trait_.def_id() == c.deref_trait_did)\n             {\n+                debug!(\"found Deref: {:?}\", impl_);\n                 if let Some((target, real_target)) =\n                     impl_.inner_impl().items.iter().find_map(|item| match *item.kind {\n                         clean::TypedefItem(ref t, true) => Some(match *t {\n@@ -4317,6 +4318,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         _ => None,\n                     })\n                 {\n+                    debug!(\"found target, real_target: {:?} {:?}\", target, real_target);\n                     let deref_mut = v\n                         .iter()\n                         .filter(|i| i.inner_impl().trait_.is_some())\n@@ -4328,6 +4330,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                             .and_then(|prim| c.primitive_locations.get(&prim).cloned()))\n                         .and_then(|did| c.impls.get(&did));\n                     if let Some(impls) = inner_impl {\n+                        debug!(\"found inner_impl: {:?}\", impls);\n                         out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#deref-methods\\\">\");\n                         out.push_str(&format!(\n                             \"Methods from {}&lt;Target={}&gt;\","}, {"sha": "e2dac2cf417da334657b39fdb617b55e87c5bb66", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a786eaac1f0272417fcc023516d09393e109a7ea/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=a786eaac1f0272417fcc023516d09393e109a7ea", "patch": "@@ -1,18 +1,27 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/struct.Bar.html'\n-// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = FooC>'\n+// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = FooJ>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_a\"]' 'pub fn foo_a(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_b\"]' 'pub fn foo_b(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=FooC>'\n+// @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n+// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=FooJ>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'\n+// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_j\"]' 'foo_j'\n \n pub struct FooA;\n pub type FooB = FooA;\n pub type FooC = FooB;\n+pub type FooD = FooC;\n+pub type FooE = FooD;\n+pub type FooF = FooE;\n+pub type FooG = FooF;\n+pub type FooH = FooG;\n+pub type FooI = FooH;\n+pub type FooJ = FooI;\n \n impl FooA {\n     pub fn foo_a(&self) {}\n@@ -26,8 +35,12 @@ impl FooC {\n     pub fn foo_c(&self) {}\n }\n \n+impl FooJ {\n+    pub fn foo_j(&self) {}\n+}\n+\n pub struct Bar;\n impl std::ops::Deref for Bar {\n-    type Target = FooC;\n+    type Target = FooJ;\n     fn deref(&self) -> &Self::Target { unimplemented!() }\n }"}]}