{"sha": "0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "node_id": "C_kwDOAAsO6NoAKDA1NDFiNGUwMzQ2OWVhNWQzZjljZTEzMWEyNzBkNDllNGE3MzYzZmY", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-04T09:13:16Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-06T10:09:50Z"}, "message": "use `named_span` in case of tuple variant", "tree": {"sha": "c10b5130ba7d82c79de9d2eaec2bb5607b89049d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c10b5130ba7d82c79de9d2eaec2bb5607b89049d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "html_url": "https://github.com/rust-lang/rust/commit/0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1b679a3c3e4b5b0a408e3ba59549bd6c182b1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1b679a3c3e4b5b0a408e3ba59549bd6c182b1b", "html_url": "https://github.com/rust-lang/rust/commit/3d1b679a3c3e4b5b0a408e3ba59549bd6c182b1b"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "6a570d53beb5a952aa951b7e849e38d508aa323d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -1012,12 +1012,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Use(path, _) => path.span,\n                 _ => named_span(item.span, item.ident, item.kind.generics()),\n             },\n-            Node::Variant(variant) => match variant.data {\n-                VariantData::Struct(..) | VariantData::Unit(..) => {\n-                    named_span(variant.span, variant.ident, None)\n-                }\n-                VariantData::Tuple(..) => variant.span,\n-            },\n+            Node::Variant(variant) => named_span(variant.span, variant.ident, None),\n             Node::ImplItem(item) => named_span(item.span, item.ident, Some(item.generics)),\n             Node::ForeignItem(item) => match item.kind {\n                 ForeignItemKind::Fn(decl, _, _) => until_within(item.span, decl.output.span()),"}, {"sha": "0617a0a54cfba58bc9837429f6786928791593f7", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -341,7 +341,7 @@ fn report_negative_positive_conflict(\n     positive_impl_def_id: DefId,\n     sg: &mut specialization_graph::Graph,\n ) {\n-    let impl_span = tcx.span_of_impl(local_impl_def_id.to_def_id()).unwrap();\n+    let impl_span = tcx.def_span(local_impl_def_id);\n \n     let mut err = struct_span_err!(\n         tcx.sess,"}, {"sha": "615e7fb4aae2982252922221b983f3468272cd65", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -19,7 +19,7 @@ LL |     XEmpty3 {},\n    |     ------- `XE::XEmpty3` defined here\n LL |     XEmpty4,\n LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |     ------- similarly named tuple variant `XEmpty5` defined here\n    |\n help: use struct pattern syntax instead\n    |\n@@ -51,7 +51,7 @@ LL |     XEmpty3 {},\n    |     ------- `XE::XEmpty3` defined here\n LL |     XEmpty4,\n LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |     ------- similarly named tuple variant `XEmpty5` defined here\n    |\n help: use struct pattern syntax instead\n    |"}, {"sha": "9f44747381a9a4fc71464bca93493f96160cc39b", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -36,7 +36,7 @@ LL |         XE::XEmpty5 => (),\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n LL |     XEmpty5(),\n-   |     --------- `XE::XEmpty5` defined here\n+   |     ------- `XE::XEmpty5` defined here\n    |\n help: use the tuple variant pattern syntax instead\n    |"}, {"sha": "5c0b4cffa9469787ffbb9f58e8c899ac8bbb6d69", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -108,7 +108,7 @@ LL |         XE::XEmpty4() => (),\n LL |     XEmpty4,\n    |     ------- `XE::XEmpty4` defined here\n LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |     ------- similarly named tuple variant `XEmpty5` defined here\n    |\n help: use this syntax instead\n    |\n@@ -139,7 +139,7 @@ LL |         XE::XEmpty4(..) => (),\n LL |     XEmpty4,\n    |     ------- `XE::XEmpty4` defined here\n LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |     ------- similarly named tuple variant `XEmpty5` defined here\n    |\n help: use this syntax instead\n    |"}, {"sha": "8b8563684014dbf633909ab7825dcf7c52cffac8", "filename": "src/test/ui/mismatched_types/issue-47706.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-47706.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -19,7 +19,7 @@ error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9\n    |\n LL |     Bar(i32),\n-   |     -------- takes 1 argument\n+   |     --- takes 1 argument\n ...\n LL |     foo(Qux::Bar);\n    |     --- ^^^^^^^^ expected function that takes 0 arguments"}, {"sha": "b04ea14d1a58095238293d750d6b9d93936ccaa7", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -94,7 +94,7 @@ LL |     check(xm7::V);\n LL |         V {},\n    |         - `xm7::V` defined here\n LL |         TV(),\n-   |         ---- similarly named tuple variant `TV` defined here\n+   |         -- similarly named tuple variant `TV` defined here\n    |\n help: use struct literal syntax instead\n    |"}, {"sha": "c0cc56aa86e2651127d3a3ca3f338a3be3d4053a", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -60,7 +60,7 @@ LL |         E1::Z0() => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:15\n    |\n LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n-   |               --  ---- similarly named tuple variant `Z1` defined here\n+   |               --  -- similarly named tuple variant `Z1` defined here\n    |               |\n    |               `E1::Z0` defined here\n    |\n@@ -82,7 +82,7 @@ LL |         E1::Z0(x) => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:15\n    |\n LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n-   |               --  ---- similarly named tuple variant `Z1` defined here\n+   |               --  -- similarly named tuple variant `Z1` defined here\n    |               |\n    |               `E1::Z0` defined here\n    |\n@@ -104,7 +104,7 @@ LL |         E1::Z1 => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:19\n    |\n LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n-   |               --  ---- `E1::Z1` defined here\n+   |               --  -- `E1::Z1` defined here\n    |               |\n    |               similarly named unit variant `Z0` defined here\n    |\n@@ -295,7 +295,7 @@ LL |         E1::Z1(x) => {}\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:11:19\n    |\n LL | pub enum E1 { Z0, Z1(), S(u8, u8, u8) }\n-   |                   ---- tuple variant has 0 fields\n+   |                   -- tuple variant has 0 fields\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:39:9"}, {"sha": "856e7918cb75c4c2bf3c7942804321715f3bede7", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -289,7 +289,7 @@ error[E0023]: this pattern has 1 field, but the corresponding tuple variant has\n   --> $DIR/pat-tuple-overfield.rs:71:16\n    |\n LL |     Z1(),\n-   |     ---- tuple variant has 0 fields\n+   |     -- tuple variant has 0 fields\n ...\n LL |         E1::Z1(_) => {}\n    |                ^ expected 0 fields, found 1\n@@ -298,7 +298,7 @@ error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has\n   --> $DIR/pat-tuple-overfield.rs:72:16\n    |\n LL |     Z1(),\n-   |     ---- tuple variant has 0 fields\n+   |     -- tuple variant has 0 fields\n ...\n LL |         E1::Z1(_, _) => {}\n    |                ^  ^ expected 0 fields, found 2"}, {"sha": "3c46b95cbc6858da3d759895a379f90ea43441af", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -148,7 +148,7 @@ LL |     one!(\"hello\", \"world\");\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n+   |     -- similarly named tuple variant `Ok` defined here\n    |\n    = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -164,7 +164,7 @@ LL |     two!(\"yay\", \"rust\");\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n+   |     -- similarly named tuple variant `Ok` defined here\n    |\n    = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -180,7 +180,7 @@ LL |     three!(\"hip\", \"hop\");\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n+   |     -- similarly named tuple variant `Ok` defined here\n    |\n    = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d85661f6faa847c46b5db19b5e0886de59c1ab04", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -58,7 +58,7 @@ error[E0731]: transparent enum needs exactly one variant, but has 2\n LL | enum MultipleVariants {\n    | ^^^^^^^^^^^^^^^^^^^^^ needs exactly one variant, but has 2\n LL |     Foo(String),\n-   |     -----------\n+   |     ---\n LL |     Bar,\n    |     --- too many variants in `MultipleVariants`\n "}, {"sha": "e546d9f64ecad27d2b0a46f92e8643fc9639d37d", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -318,7 +318,7 @@ error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:27:20\n    |\n LL |             Fn(u8),\n-   |             ------ fn(u8) -> Z {Z::Fn} defined here\n+   |             -- fn(u8) -> Z {Z::Fn} defined here\n ...\n LL |         let _: Z = Z::Fn;\n    |                -   ^^^^^ expected enum `Z`, found fn item\n@@ -353,7 +353,7 @@ error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:43:16\n    |\n LL |         Fn(u8),\n-   |         ------ fn(u8) -> E {E::Fn} defined here\n+   |         -- fn(u8) -> E {E::Fn} defined here\n ...\n LL |     let _: E = m::E::Fn;\n    |            -   ^^^^^^^^ expected enum `E`, found fn item\n@@ -388,7 +388,7 @@ error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:51:16\n    |\n LL |         Fn(u8),\n-   |         ------ fn(u8) -> E {E::Fn} defined here\n+   |         -- fn(u8) -> E {E::Fn} defined here\n ...\n LL |     let _: E = E::Fn;\n    |            -   ^^^^^ expected enum `E`, found fn item"}, {"sha": "720b7b119cec96e861d1d69ddb6d2a0085109a4e", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -8,7 +8,7 @@ note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^^^^^^\n+   |                       ^^^^^\n \n error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:14:47\n@@ -44,7 +44,7 @@ note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^^^^^^\n+   |                       ^^^^^\n \n error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:26:35\n@@ -56,7 +56,7 @@ note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^^^^^^\n+   |                       ^^^^^\n \n error[E0639]: cannot create non-exhaustive variant using struct expression\n   --> $DIR/variant.rs:8:26"}, {"sha": "9aeb99ee2fa8f28f47e547d49f12ba7f1c628d70", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0541b4e03469ea5d3f9ce131a270d49e4a7363ff/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=0541b4e03469ea5d3f9ce131a270d49e4a7363ff", "patch": "@@ -130,7 +130,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n    |\n LL |     A(usize),\n-   |     -------- fn(usize) -> E {E::A} defined here\n+   |     - fn(usize) -> E {E::A} defined here\n ...\n LL |     let _: E = E::A;\n    |            -   ^^^^ expected enum `E`, found fn item"}]}