{"sha": "d3cc598a026deca592d3d2c99f93ad0406b88543", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2M1OThhMDI2ZGVjYTU5MmQzZDJjOTlmOTNhZDA0MDZiODg1NDM=", "commit": {"author": {"name": "Ashley Mannix", "email": "kodraus@hey.com", "date": "2021-01-18T11:53:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-18T11:53:40Z"}, "message": "Rollup merge of #81131 - pierwill:edit-rustc_middle-cast, r=varkor\n\nEdit rustc_middle::ty::cast docs\n\nLink to RFC 401 and add missing punctuation.", "tree": {"sha": "0357c2c37484da69950820b05f25fd43b5891423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0357c2c37484da69950820b05f25fd43b5891423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3cc598a026deca592d3d2c99f93ad0406b88543", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBXbECRBK7hj4Ov3rIwAAdHIIACcyveC6s0PWZC+fOe0fhTKO\nyLSJnpcphfBOvg6jmkhGgza3X5ZZmN8S8v/bmaSZgHc9DCdA+BnPxsvzoXCcYYeF\nZS1luCvOKVs7FLaMMwB1lKFr4hQLbL8QCZjN7XFg5Gd+o2JBfBv6HbSTWfFeQffu\nlo+C8elECndGE1D6RhqMUJPMPkTdVM1TvBCey3WFfST3VuDlEbgYvWRJNAyoqJL6\n8PlC32HZVFpVqNLgb5Vfyih1M2NOBHXzuQbyUHNht/6YymzaoL0u94iR4mfcUB7Y\nzV6cPIFZXnZ3JhKDo7n1LWCIZoukXCBvaw77R2MPce3kxUojacvMfyVwXBkaccA=\n=9CRZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0357c2c37484da69950820b05f25fd43b5891423\nparent 8f1716c1f9d985cdc647a1f64ab6783bba253b22\nparent 34debb640bd96a4c929ba5f81291c880b8a629e3\nauthor Ashley Mannix <kodraus@hey.com> 1610970820 +1000\ncommitter GitHub <noreply@github.com> 1610970820 +1000\n\nRollup merge of #81131 - pierwill:edit-rustc_middle-cast, r=varkor\n\nEdit rustc_middle::ty::cast docs\n\nLink to RFC 401 and add missing punctuation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cc598a026deca592d3d2c99f93ad0406b88543", "html_url": "https://github.com/rust-lang/rust/commit/d3cc598a026deca592d3d2c99f93ad0406b88543", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3cc598a026deca592d3d2c99f93ad0406b88543/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1716c1f9d985cdc647a1f64ab6783bba253b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1716c1f9d985cdc647a1f64ab6783bba253b22", "html_url": "https://github.com/rust-lang/rust/commit/8f1716c1f9d985cdc647a1f64ab6783bba253b22"}, {"sha": "34debb640bd96a4c929ba5f81291c880b8a629e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/34debb640bd96a4c929ba5f81291c880b8a629e3", "html_url": "https://github.com/rust-lang/rust/commit/34debb640bd96a4c929ba5f81291c880b8a629e3"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "d737d1ebf56c658815570b9a6f669a96c5ea3faa", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3cc598a026deca592d3d2c99f93ad0406b88543/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3cc598a026deca592d3d2c99f93ad0406b88543/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=d3cc598a026deca592d3d2c99f93ad0406b88543", "patch": "@@ -22,15 +22,16 @@ pub enum CastTy<'tcx> {\n     /// Various types that are represented as ints and handled mostly\n     /// in the same way, merged for easier matching.\n     Int(IntTy),\n-    /// Floating-Point types\n+    /// Floating-point types.\n     Float,\n-    /// Function Pointers\n+    /// Function pointers.\n     FnPtr,\n-    /// Raw pointers\n+    /// Raw pointers.\n     Ptr(ty::TypeAndMut<'tcx>),\n }\n \n-/// Cast Kind. See RFC 401 (or librustc_typeck/check/cast.rs)\n+/// Cast Kind. See [RFC 401](https://rust-lang.github.io/rfcs/0401-coercions.html)\n+/// (or librustc_typeck/check/cast.rs).\n #[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum CastKind {\n     CoercionCast,\n@@ -48,7 +49,7 @@ pub enum CastKind {\n \n impl<'tcx> CastTy<'tcx> {\n     /// Returns `Some` for integral/pointer casts.\n-    /// casts like unsizing casts will return `None`\n+    /// Casts like unsizing casts will return `None`.\n     pub fn from_ty(t: Ty<'tcx>) -> Option<CastTy<'tcx>> {\n         match *t.kind() {\n             ty::Bool => Some(CastTy::Int(IntTy::Bool)),"}]}