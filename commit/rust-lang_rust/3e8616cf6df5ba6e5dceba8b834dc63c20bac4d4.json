{"sha": "3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlODYxNmNmNmRmNWJhNmU1ZGNlYmE4YjgzNGRjNjNjMjBiYWM0ZDQ=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-10-24T15:25:23Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-10-24T15:25:23Z"}, "message": "Proof of concept theming and 'tokenColorCustomizations' support.", "tree": {"sha": "bce2c26d159b4c48eceb3ddce5a3c51cbbda904f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce2c26d159b4c48eceb3ddce5a3c51cbbda904f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "html_url": "https://github.com/rust-lang/rust/commit/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95cf5c86fae3adf3bb38521905bf357450125709", "url": "https://api.github.com/repos/rust-lang/rust/commits/95cf5c86fae3adf3bb38521905bf357450125709", "html_url": "https://github.com/rust-lang/rust/commit/95cf5c86fae3adf3bb38521905bf357450125709"}], "stats": {"total": 266, "additions": 231, "deletions": 35}, "files": [{"sha": "a632c73955a963c34602bac53852829a463ad07f", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "patch": "@@ -598,9 +598,9 @@\n             }\n         },\n         \"https-proxy-agent\": {\n-            \"version\": \"2.2.2\",\n-            \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-2.2.2.tgz\",\n-            \"integrity\": \"sha512-c8Ndjc9Bkpfx/vCJueCPy0jlP4ccCCSNDp8xwCZzPjKJUm+B+u9WX2x98Qx4n1PiMNTWo3D7KK5ifNV/yJyRzg==\",\n+            \"version\": \"2.2.3\",\n+            \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-2.2.3.tgz\",\n+            \"integrity\": \"sha512-Ytgnz23gm2DVftnzqRRz2dOXZbGd2uiajSw/95bPp6v53zPRspQjLm/AfBgqbJ2qfeRXWIOMVLpp86+/5yX39Q==\",\n             \"dev\": true,\n             \"requires\": {\n                 \"agent-base\": \"^4.3.0\",\n@@ -720,6 +720,11 @@\n                 \"esprima\": \"^4.0.0\"\n             }\n         },\n+        \"jsonc-parser\": {\n+            \"version\": \"2.1.1\",\n+            \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-2.1.1.tgz\",\n+            \"integrity\": \"sha512-VC0CjnWJylKB1iov4u76/W/5Ef0ydDkjtYWxoZ9t3HdWlSnZQwZL5MgFikaB/EtQ4RmMEw3tmQzuYnZA2/Ja1g==\"\n+        },\n         \"lcid\": {\n             \"version\": \"2.0.0\",\n             \"resolved\": \"https://registry.npmjs.org/lcid/-/lcid-2.0.0.tgz\","}, {"sha": "46b8cd47cfa3e0574f5200e0c403054a7617555c", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "patch": "@@ -32,7 +32,8 @@\n     },\n     \"dependencies\": {\n         \"seedrandom\": \"^3.0.1\",\n-        \"vscode-languageclient\": \"^5.3.0-next.4\"\n+        \"vscode-languageclient\": \"^5.3.0-next.4\",\n+        \"jsonc-parser\": \"^2.1.0\"\n     },\n     \"devDependencies\": {\n         \"@types/glob\": \"^7.1.1\","}, {"sha": "9f8c810b63deea8e263929b157780a930c4e93b7", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-\n+import * as scopes from './scopes';\n import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n@@ -46,7 +46,11 @@ export class Config {\n \n     public userConfigChanged() {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n+        \n+        Server.highlighter.removeHighlights();\n+        scopes.load()\n         if (config.has('highlightingOn')) {\n+\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n         }\n "}, {"sha": "1e1bc1a671c04f395df0bec88d4ed851185cfd2f", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "patch": "@@ -91,11 +91,11 @@ export function activate(context: vscode.ExtensionContext) {\n     const allNotifications: Iterable<\n         [string, lc.GenericNotificationHandler]\n     > = [\n-        [\n-            'rust-analyzer/publishDecorations',\n-            notifications.publishDecorations.handle\n-        ]\n-    ];\n+            [\n+                'rust-analyzer/publishDecorations',\n+                notifications.publishDecorations.handle\n+            ]\n+        ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode"}, {"sha": "4b961170b97cc9f39723b89734b463d2e419c0e1", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 69, "deletions": 25, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "patch": "@@ -1,6 +1,8 @@\n import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as scopes from './scopes'\n+\n \n import { Server } from './server';\n \n@@ -23,6 +25,37 @@ function fancify(seed: string, shade: 'light' | 'dark') {\n     return `hsl(${h},${s}%,${l}%)`;\n }\n \n+function createDecorationFromTextmate(themeStyle: scopes.TextMateRuleSettings): vscode.TextEditorDecorationType {\n+    const options: vscode.DecorationRenderOptions = {}\n+    options.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen\n+    if (themeStyle.foreground) {\n+        options.color = themeStyle.foreground\n+    }\n+    if (themeStyle.background) {\n+        options.backgroundColor = themeStyle.background\n+    }\n+    if (themeStyle.fontStyle) {\n+        const parts: string[] = themeStyle.fontStyle.split(' ')\n+        parts.forEach((part) => {\n+            switch (part) {\n+                case 'italic':\n+                    options.fontStyle = 'italic'\n+                    break\n+                case 'bold':\n+                    options.fontWeight = 'bold'\n+\n+                    break\n+                case 'underline':\n+                    options.textDecoration = 'underline'\n+                    break\n+                default:\n+                    break\n+            }\n+        })\n+    }\n+    return vscode.window.createTextEditorDecorationType(options)\n+}\n+\n export class Highlighter {\n     private static initDecorations(): Map<\n         string,\n@@ -32,36 +65,44 @@ export class Highlighter {\n             tag: string,\n             textDecoration?: string\n         ): [string, vscode.TextEditorDecorationType] => {\n-            const color = new vscode.ThemeColor('ralsp.' + tag);\n-            const decor = vscode.window.createTextEditorDecorationType({\n-                color,\n-                textDecoration\n-            });\n-            return [tag, decor];\n+            const scope = scopes.find(tag)\n+\n+            if (scope) {\n+                const decor = createDecorationFromTextmate(scope);\n+                return [tag, decor];\n+            }\n+            else {\n+                const color = new vscode.ThemeColor('ralsp.' + tag);\n+                const decor = vscode.window.createTextEditorDecorationType({\n+                    color,\n+                    textDecoration\n+                });\n+                return [tag, decor];\n+            }\n         };\n \n         const decorations: Iterable<\n             [string, vscode.TextEditorDecorationType]\n         > = [\n-            decoration('comment'),\n-            decoration('string'),\n-            decoration('keyword'),\n-            decoration('keyword.control'),\n-            decoration('keyword.unsafe'),\n-            decoration('function'),\n-            decoration('parameter'),\n-            decoration('constant'),\n-            decoration('type'),\n-            decoration('builtin'),\n-            decoration('text'),\n-            decoration('attribute'),\n-            decoration('literal'),\n-            decoration('macro'),\n-            decoration('variable'),\n-            decoration('variable.mut', 'underline'),\n-            decoration('field'),\n-            decoration('module')\n-        ];\n+                decoration('comment'),\n+                decoration('string'),\n+                decoration('keyword'),\n+                decoration('keyword.control'),\n+                decoration('keyword.unsafe'),\n+                decoration('function'),\n+                decoration('parameter'),\n+                decoration('constant'),\n+                decoration('type'),\n+                decoration('builtin'),\n+                decoration('text'),\n+                decoration('attribute'),\n+                decoration('literal'),\n+                decoration('macro'),\n+                decoration('variable'),\n+                decoration('variable.mut', 'underline'),\n+                decoration('field'),\n+                decoration('module')\n+            ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);\n     }\n@@ -89,6 +130,8 @@ export class Highlighter {\n         //\n         // Note: decoration objects need to be kept around so we can dispose them\n         // if the user disables syntax highlighting\n+\n+\n         if (this.decorations == null) {\n             this.decorations = Highlighter.initDecorations();\n         }\n@@ -133,6 +176,7 @@ export class Highlighter {\n                 tag\n             ) as vscode.TextEditorDecorationType;\n             const ranges = byTag.get(tag)!;\n+\n             editor.setDecorations(dec, ranges);\n         }\n "}, {"sha": "19d3098281d5fe32fd55ed95f98c0a30a4b6207a", "filename": "editors/code/src/scopes.ts", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=3e8616cf6df5ba6e5dceba8b834dc63c20bac4d4", "patch": "@@ -0,0 +1,142 @@\n+import * as fs from 'fs'\n+import * as jsonc from 'jsonc-parser'\n+import * as path from 'path'\n+import * as vscode from 'vscode'\n+\n+\n+\n+export interface TextMateRule {\n+    scope: string | string[]\n+    settings: TextMateRuleSettings\n+}\n+\n+export interface TextMateRuleSettings {\n+    foreground: string | undefined\n+    background: string | undefined\n+    fontStyle: string | undefined\n+}\n+\n+// Current theme colors\n+const colors = new Map<string, TextMateRuleSettings>()\n+\n+export function find(scope: string): TextMateRuleSettings | undefined {\n+    return colors.get(scope)\n+}\n+\n+// Load all textmate scopes in the currently active theme\n+export function load() {\n+    // Remove any previous theme\n+    colors.clear()\n+    // Find out current color theme\n+    const themeName = vscode.workspace.getConfiguration('workbench').get('colorTheme')\n+\n+    if (typeof themeName !== 'string') {\n+        console.warn('workbench.colorTheme is', themeName)\n+        return\n+    }\n+    // Try to load colors from that theme\n+    try {\n+        loadThemeNamed(themeName)\n+    } catch (e) {\n+        console.warn('failed to load theme', themeName, e)\n+    }\n+}\n+\n+// Find current theme on disk\n+function loadThemeNamed(themeName: string) {\n+    for (const extension of vscode.extensions.all) {\n+        const extensionPath: string = extension.extensionPath\n+        const extensionPackageJsonPath: string = path.join(extensionPath, 'package.json')\n+        if (!checkFileExists(extensionPackageJsonPath)) {\n+            continue\n+        }\n+        const packageJsonText: string = readFileText(extensionPackageJsonPath)\n+        const packageJson: any = jsonc.parse(packageJsonText)\n+        if (packageJson.contributes && packageJson.contributes.themes) {\n+            for (const theme of packageJson.contributes.themes) {\n+                const id = theme.id || theme.label\n+                if (id === themeName) {\n+                    const themeRelativePath: string = theme.path\n+                    const themeFullPath: string = path.join(extensionPath, themeRelativePath)\n+                    loadThemeFile(themeFullPath)\n+                }\n+            }\n+        }\n+\n+        const customization: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n+        if (customization && customization.textMateRules) {\n+            loadColors(customization.textMateRules)\n+        }\n+    }\n+}\n+\n+function loadThemeFile(themePath: string) {\n+    if (checkFileExists(themePath)) {\n+        const themeContentText: string = readFileText(themePath)\n+        const themeContent: any = jsonc.parse(themeContentText)\n+\n+        if (themeContent && themeContent.tokenColors) {\n+            loadColors(themeContent.tokenColors)\n+            if (themeContent.include) {\n+                // parse included theme file\n+                const includedThemePath: string = path.join(path.dirname(themePath), themeContent.include)\n+                loadThemeFile(includedThemePath)\n+            }\n+        }\n+    }\n+}\n+function mergeRuleSettings(defaultRule: TextMateRuleSettings, override: TextMateRuleSettings): TextMateRuleSettings {\n+    const mergedRule = defaultRule;\n+    if (override.background) {\n+        mergedRule.background = override.background\n+    }\n+    if (override.foreground) {\n+        mergedRule.foreground = override.foreground\n+    }\n+    if (override.background) {\n+        mergedRule.fontStyle = override.fontStyle\n+    }\n+    return mergedRule;\n+}\n+\n+function loadColors(textMateRules: TextMateRule[]): void {\n+    for (const rule of textMateRules) {\n+\n+        if (typeof rule.scope === 'string') {\n+            const existingRule = colors.get(rule.scope);\n+            if (existingRule) {\n+                colors.set(rule.scope, mergeRuleSettings(existingRule, rule.settings))\n+            }\n+            else {\n+                colors.set(rule.scope, rule.settings)\n+            }\n+        } else if (rule.scope instanceof Array) {\n+            for (const scope of rule.scope) {\n+                const existingRule = colors.get(scope);\n+                if (existingRule) {\n+                    colors.set(scope, mergeRuleSettings(existingRule, rule.settings))\n+                }\n+                else {\n+                    colors.set(scope, rule.settings)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+function checkFileExists(filePath: string): boolean {\n+\n+    const stats = fs.statSync(filePath);\n+    if (stats && stats.isFile()) {\n+        return true;\n+    } else {\n+        console.warn('no such file', filePath)\n+        return false;\n+    }\n+\n+\n+}\n+\n+function readFileText(filePath: string, encoding: string = 'utf8'): string {\n+    return fs.readFileSync(filePath, encoding);\n+}\n\\ No newline at end of file"}]}