{"sha": "cba16819a1aa2f99c861eba907847db39fea06c5", "node_id": "C_kwDOAAsO6NoAKGNiYTE2ODE5YTFhYTJmOTljODYxZWJhOTA3ODQ3ZGIzOWZlYTA2YzU", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-09-29T14:28:57Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-10-23T11:43:08Z"}, "message": "Add `rust.lto` config option", "tree": {"sha": "4bae651d8f19f353a2099950729cf35c504a3acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bae651d8f19f353a2099950729cf35c504a3acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba16819a1aa2f99c861eba907847db39fea06c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmNVKMwACgkQkJzQ0mSD\nUWutYAwAwfEJzwPhiq2JtRY+3uSoYuEuHsulm93elvtbK2qZNT1zuMQl9mAZnd8p\nCNuc1ox25GvSoCMvHze4j8xUF7eS+dS/xvTnZPeXOX/GL6Welscnm9xUqfw5CnRL\nhU7buVNPU9SEDEop3deqH7xhMNTpzM1YVNgnCLT0XB0AlBIo4mWBMk/tp6kYKjTF\nitopzYHn1cAMB0VQ8bV5ZplHL6C4kqOd8rdftPmEuruD/Ql2o5ai8Q8qgB78j5mt\n29Nm3XUDuBCR0tdGVLJBBvKl78R/iCWzuDDLGUehl1p66bQH0YYvFGcXZvrx/LYH\nA7ui10VXUZpDMkmKkGcF0+760A2fLxMWA/RO5gptnmC+rkciooMnmbzpX80Ep8J8\nUsDpeUkSIWdd3icsFn/ihW3w0B42h3/7622g4q02KWYNvJVYzYHwMsE5q0euwrmf\nku7ITOD6oYU3HYd5ee8BSzhspFv7pcu+z9qF9CxHsTX37CUExNbTLRqMdJ59T65K\niRdNkqHe\n=ldBn\n-----END PGP SIGNATURE-----", "payload": "tree 4bae651d8f19f353a2099950729cf35c504a3acc\nparent 32238ce1e2219bfec46bc660091b2dcac0168148\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1664461737 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1666525388 +0200\n\nAdd `rust.lto` config option\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba16819a1aa2f99c861eba907847db39fea06c5", "html_url": "https://github.com/rust-lang/rust/commit/cba16819a1aa2f99c861eba907847db39fea06c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba16819a1aa2f99c861eba907847db39fea06c5/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32238ce1e2219bfec46bc660091b2dcac0168148", "url": "https://api.github.com/repos/rust-lang/rust/commits/32238ce1e2219bfec46bc660091b2dcac0168148", "html_url": "https://github.com/rust-lang/rust/commit/32238ce1e2219bfec46bc660091b2dcac0168148"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "35b07924b8ea0379ebd3f6cd014e9009d8a665d6", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cba16819a1aa2f99c861eba907847db39fea06c5/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/cba16819a1aa2f99c861eba907847db39fea06c5/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=cba16819a1aa2f99c861eba907847db39fea06c5", "patch": "@@ -638,6 +638,11 @@ changelog-seen = 2\n # If an explicit setting is given, it will be used for all parts of the codebase.\n #new-symbol-mangling = true|false (see comment)\n \n+# Select LTO mode that will be used for compiling rustc. By default, thin local LTO (LTO within a\n+# single crate) is used. You can also select \"thin\" or \"fat\" to apply Thin/Fat LTO on the\n+# `rustc_driver` dylib.\n+#lto = thin-local\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "f59f20214844bcdb2f0bc3c502a9f78f4cfd5ae1", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba16819a1aa2f99c861eba907847db39fea06c5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba16819a1aa2f99c861eba907847db39fea06c5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=cba16819a1aa2f99c861eba907847db39fea06c5", "patch": "@@ -21,7 +21,7 @@ use serde::Deserialize;\n use crate::builder::Cargo;\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n-use crate::config::{LlvmLibunwind, TargetSelection};\n+use crate::config::{LlvmLibunwind, RustcLto, TargetSelection};\n use crate::dist;\n use crate::native;\n use crate::tool::SourceType;"}, {"sha": "4025697dabe12f8cdafc686dbae1e9e968bae55a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cba16819a1aa2f99c861eba907847db39fea06c5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba16819a1aa2f99c861eba907847db39fea06c5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=cba16819a1aa2f99c861eba907847db39fea06c5", "patch": "@@ -158,6 +158,7 @@ pub struct Config {\n     pub rust_new_symbol_mangling: Option<bool>,\n     pub rust_profile_use: Option<String>,\n     pub rust_profile_generate: Option<String>,\n+    pub rust_lto: RustcLto,\n     pub llvm_profile_use: Option<String>,\n     pub llvm_profile_generate: bool,\n     pub llvm_libunwind_default: Option<LlvmLibunwind>,\n@@ -319,6 +320,28 @@ impl SplitDebuginfo {\n     }\n }\n \n+/// LTO mode used for compiling rustc itself.\n+#[derive(Default)]\n+pub enum RustcLto {\n+    #[default]\n+    ThinLocal,\n+    Thin,\n+    Fat\n+}\n+\n+impl std::str::FromStr for RustcLto {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"thin-local\" => Ok(RustcLto::ThinLocal),\n+            \"thin\" => Ok(RustcLto::Thin),\n+            \"fat\" => Ok(RustcLto::Fat),\n+            _ => Err(format!(\"Invalid value for rustc LTO: {}\", s)),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n@@ -726,6 +749,7 @@ define_config! {\n         profile_use: Option<String> = \"profile-use\",\n         // ignored; this is set from an env var set by bootstrap.py\n         download_rustc: Option<StringOrBool> = \"download-rustc\",\n+        lto: Option<String> = \"lto\",\n     }\n }\n \n@@ -1173,6 +1197,13 @@ impl Config {\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n             config.download_rustc_commit = download_ci_rustc_commit(&config, rust.download_rustc);\n+\n+            config.rust_lto = rust\n+                .lto\n+                .as_deref()\n+                .map(RustcLto::from_str)\n+                .map(|v| v.expect(\"invalid value for rust.lto\"))\n+                .unwrap_or_default();\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;"}, {"sha": "423aba06ccaff770963f392024b994368997a59d", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cba16819a1aa2f99c861eba907847db39fea06c5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cba16819a1aa2f99c861eba907847db39fea06c5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=cba16819a1aa2f99c861eba907847db39fea06c5", "patch": "@@ -78,7 +78,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --set llvm.thin-lto=true \\\n       --set llvm.ninja=false \\\n       --set rust.jemalloc \\\n-      --set rust.use-lld=true\n+      --set rust.use-lld=true \\\n+      --set rust.lto=thin\n ENV SCRIPT ../src/ci/pgo.sh python3 ../x.py dist \\\n     --host $HOSTS --target $HOSTS \\\n     --include-default-paths \\"}]}