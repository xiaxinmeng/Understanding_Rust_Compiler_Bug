{"sha": "1cca6b2a3d4e1981577616d854bca498f4891289", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjY2E2YjJhM2Q0ZTE5ODE1Nzc2MTZkODU0YmNhNDk4ZjQ4OTEyODk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-03T15:56:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-03T15:56:42Z"}, "message": "Fix applicability of inline local", "tree": {"sha": "f60f50fa724a6e90f5f5a8c7750c8cb2cfe730d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60f50fa724a6e90f5f5a8c7750c8cb2cfe730d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cca6b2a3d4e1981577616d854bca498f4891289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cca6b2a3d4e1981577616d854bca498f4891289", "html_url": "https://github.com/rust-lang/rust/commit/1cca6b2a3d4e1981577616d854bca498f4891289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cca6b2a3d4e1981577616d854bca498f4891289/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3677a94a3ff77c9d2d1784b0c8d5f777e46c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3677a94a3ff77c9d2d1784b0c8d5f777e46c3b", "html_url": "https://github.com/rust-lang/rust/commit/8f3677a94a3ff77c9d2d1784b0c8d5f777e46c3b"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "98e5112dffb7062a9aa67465f4a7d002ba4ef576", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1cca6b2a3d4e1981577616d854bca498f4891289/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca6b2a3d4e1981577616d854bca498f4891289/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=1cca6b2a3d4e1981577616d854bca498f4891289", "patch": "@@ -2,9 +2,9 @@ use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n };\n+use test_utils::tested_by;\n \n-use crate::assist_ctx::ActionBuilder;\n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{assist_ctx::ActionBuilder, Assist, AssistCtx, AssistId};\n \n // Assist: inline_local_variable\n //\n@@ -29,6 +29,11 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         _ => return None,\n     };\n     if bind_pat.is_mutable() {\n+        tested_by!(test_not_inline_mut_variable);\n+        return None;\n+    }\n+    if !bind_pat.syntax().text_range().contains_inclusive(ctx.frange.range.start()) {\n+        tested_by!(not_applicable_outside_of_bind_pat);\n         return None;\n     }\n     let initializer_expr = let_stmt.initializer()?;\n@@ -111,6 +116,8 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::covers;\n+\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n@@ -317,9 +324,10 @@ fn foo() {\n \n     #[test]\n     fn test_not_inline_mut_variable() {\n+        covers!(test_not_inline_mut_variable);\n         check_assist_not_applicable(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let mut a<|> = 1 + 1;\n     a + 1;\n@@ -651,11 +659,25 @@ fn foo() {\n     fn test_not_applicable_if_variable_unused() {\n         check_assist_not_applicable(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let <|>a = 0;\n }\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn not_applicable_outside_of_bind_pat() {\n+        covers!(not_applicable_outside_of_bind_pat);\n+        check_assist_not_applicable(\n+            inline_local_variable,\n+            r\"\n+fn main() {\n+    let x = <|>1 + 2;\n+    x * 4;\n+}\n+\",\n+        )\n+    }\n }"}, {"sha": "6d81a639612bbad0eebf966cf3ca590663c620a7", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cca6b2a3d4e1981577616d854bca498f4891289/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca6b2a3d4e1981577616d854bca498f4891289/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=1cca6b2a3d4e1981577616d854bca498f4891289", "patch": "@@ -178,19 +178,19 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(assist: AssistHandler, before: &str, after: &str) {\n-        check(assist, before, ExpectedResult::After(after));\n+    pub(crate) fn check_assist(assist: AssistHandler, ra_fixture: &str, after: &str) {\n+        check(assist, ra_fixture, ExpectedResult::After(after));\n     }\n \n     // FIXME: instead of having a separate function here, maybe use\n     // `extract_ranges` and mark the target as `<target> </target>` in the\n     // fixuture?\n-    pub(crate) fn check_assist_target(assist: AssistHandler, before: &str, target: &str) {\n-        check(assist, before, ExpectedResult::Target(target));\n+    pub(crate) fn check_assist_target(assist: AssistHandler, ra_fixture: &str, target: &str) {\n+        check(assist, ra_fixture, ExpectedResult::Target(target));\n     }\n \n-    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, before: &str) {\n-        check(assist, before, ExpectedResult::NotApplicable);\n+    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, ra_fixture: &str) {\n+        check(assist, ra_fixture, ExpectedResult::NotApplicable);\n     }\n \n     enum ExpectedResult<'a> {"}, {"sha": "cef3df4e5af22d21f980fd5a5d7d91960596ac42", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cca6b2a3d4e1981577616d854bca498f4891289/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cca6b2a3d4e1981577616d854bca498f4891289/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=1cca6b2a3d4e1981577616d854bca498f4891289", "patch": "@@ -4,4 +4,6 @@ test_utils::marks!(\n     introduce_var_in_comment_is_not_applicable\n     test_introduce_var_expr_stmt\n     test_introduce_var_last_expr\n+    not_applicable_outside_of_bind_pat\n+    test_not_inline_mut_variable\n );"}]}