{"sha": "98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzAzNjQ0YjE5MWVlOWI2MmU4ZDZmYzZiZTY0MGI1ZmVjYmJmMWI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-22T14:30:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T14:30:03Z"}, "message": "Rollup merge of #80573 - jyn514:tool-lints, r=GuillaumeGomez\n\nDeny rustc::internal lints for rustdoc and clippy\n\n- Fix rustc::internal lints for rustdoc\n- Deny internal lints only for rustdoc and clippy (previously the lints were ignored for clippy because -Zunstable-options didn't get passed)", "tree": {"sha": "a743e0bd6234afeea655b5ab6b3db5f15a31c8c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a743e0bd6234afeea655b5ab6b3db5f15a31c8c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCuFrCRBK7hj4Ov3rIwAAdHIIACkZFupQBp1M3rD247zAAOuD\n3iLxKUMeE9QDkJzPCdxE2bsLCrti0hS2EjjgDdX6RPcK8XV1LLgRwqWSW3leD+pC\n2XKXEPTb7KVDwmXZ2bHaTvGaPVCJN8mAxb9X8gxBrenScRck/QEbkMnD9hHRl0S1\nQwOtV+ADL9h5vpQ99t+PFP+CKPT2v145Y/R+QfwvGDgzvBQRA2g7B7WQsiKhPr6i\nze1Hycvwj+GymCptQrMm779e+xsArEHQAbD6TBffrjgEhMgZqt5OGSZHnpaD2iZA\npi/SuK3rq8vH2G5VpQVlgqv8t1WzB2cFGWE4Yl4Zk97hBMYMHHHLhILwo79mavs=\n=P4VO\n-----END PGP SIGNATURE-----\n", "payload": "tree a743e0bd6234afeea655b5ab6b3db5f15a31c8c6\nparent bbc01bb624a960533e049fdb98d0489ff2a8de06\nparent 0797ffec09c79d99943cb95b5b455c0d2278ea2f\nauthor Mara Bos <m-ou.se@m-ou.se> 1611325803 +0000\ncommitter GitHub <noreply@github.com> 1611325803 +0000\n\nRollup merge of #80573 - jyn514:tool-lints, r=GuillaumeGomez\n\nDeny rustc::internal lints for rustdoc and clippy\n\n- Fix rustc::internal lints for rustdoc\n- Deny internal lints only for rustdoc and clippy (previously the lints were ignored for clippy because -Zunstable-options didn't get passed)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "html_url": "https://github.com/rust-lang/rust/commit/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc01bb624a960533e049fdb98d0489ff2a8de06", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc01bb624a960533e049fdb98d0489ff2a8de06", "html_url": "https://github.com/rust-lang/rust/commit/bbc01bb624a960533e049fdb98d0489ff2a8de06"}, {"sha": "0797ffec09c79d99943cb95b5b455c0d2278ea2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0797ffec09c79d99943cb95b5b455c0d2278ea2f", "html_url": "https://github.com/rust-lang/rust/commit/0797ffec09c79d99943cb95b5b455c0d2278ea2f"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "6626fead774d6b42b4d37819bcf755b2280b51fe", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -320,6 +320,13 @@ macro_rules! tool_check_step {\n                     cargo.arg(\"--all-targets\");\n                 }\n \n+                // Enable internal lints for clippy and rustdoc\n+                // NOTE: this intentionally doesn't enable lints for any other tools,\n+                // see https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n+                if $path == \"src/tools/rustdoc\" || $path == \"src/tools/clippy\" {\n+                    cargo.rustflag(\"-Zunstable-options\");\n+                }\n+\n                 builder.info(&format!(\n                     \"Checking stage{} {} artifacts ({} -> {})\",\n                     builder.top_stage,"}, {"sha": "8006c3d2771640d6fb9fb39ad4154bbc40513037", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{BTreeMap, HashMap};\n+use std::collections::BTreeMap;\n use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n@@ -219,7 +219,7 @@ crate struct RenderOptions {\n     crate extern_html_root_urls: BTreeMap<String, String>,\n     /// A map of the default settings (values are as for DOM storage API). Keys should lack the\n     /// `rustdoc-` prefix.\n-    crate default_settings: HashMap<String, String>,\n+    crate default_settings: FxHashMap<String, String>,\n     /// If present, suffix added to CSS/JavaScript files when referencing them in generated pages.\n     crate resource_suffix: String,\n     /// Whether to run the static CSS/JavaScript through a minifier when outputting them. `true` by"}, {"sha": "bbf4de5cdc9a84bea527aa21ab08b8f7a40111c1", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -1,4 +1,5 @@\n use rustc_ast as ast;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n@@ -16,7 +17,6 @@ use rustc_span::{BytePos, FileName, Pos, Span, DUMMY_SP};\n use rustc_target::spec::TargetTriple;\n use tempfile::Builder as TempFileBuilder;\n \n-use std::collections::HashMap;\n use std::env;\n use std::io::{self, Write};\n use std::panic;\n@@ -704,7 +704,7 @@ crate struct Collector {\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n-    visited_tests: HashMap<(String, usize), usize>,\n+    visited_tests: FxHashMap<(String, usize), usize>,\n }\n \n impl Collector {\n@@ -728,7 +728,7 @@ impl Collector {\n             position: DUMMY_SP,\n             source_map,\n             filename,\n-            visited_tests: HashMap::new(),\n+            visited_tests: FxHashMap::default(),\n         }\n     }\n \n@@ -1010,7 +1010,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n                 self.codes,\n                 self.collector.enable_per_target_ignores,\n                 Some(&crate::html::markdown::ExtraInfo::new(\n-                    &self.tcx,\n+                    self.tcx,\n                     hir_id,\n                     span_of_attrs(&attrs).unwrap_or(sp),\n                 )),"}, {"sha": "5c0f5e50c9e2cfbca5e74aeef67e2a0ccd5e6fad", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use rustc_middle::ty;\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::edition::Edition;\n \n use crate::clean;\n@@ -20,7 +20,7 @@ crate trait FormatRenderer<'tcx>: Clone {\n         render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-        tcx: ty::TyCtxt<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error>;\n \n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n@@ -55,7 +55,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     render_info: RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: Edition,\n-    tcx: ty::TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n     let (krate, mut cache) = Cache::from_krate(\n         render_info.clone(),"}, {"sha": "c6ff4b57a6e59988eb37821ffa06ae5c6f4e4333", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -1,6 +1,7 @@\n-use std::collections::HashMap;\n use std::path::PathBuf;\n \n+use rustc_data_structures::fx::FxHashMap;\n+\n use crate::externalfiles::ExternalHtml;\n use crate::html::escape::Escape;\n use crate::html::format::{Buffer, Print};\n@@ -11,7 +12,7 @@ crate struct Layout {\n     crate logo: String,\n     crate favicon: String,\n     crate external_html: ExternalHtml,\n-    crate default_settings: HashMap<String, String>,\n+    crate default_settings: FxHashMap<String, String>,\n     crate krate: String,\n     /// The given user css file which allow to customize the generated\n     /// documentation theme."}, {"sha": "7c8b76be374a8097145e9e1b91d5770382fa3429", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -620,7 +620,7 @@ crate fn find_testable_code<T: doctest::Tester>(\n     tests: &mut T,\n     error_codes: ErrorCodes,\n     enable_per_target_ignores: bool,\n-    extra_info: Option<&ExtraInfo<'_, '_>>,\n+    extra_info: Option<&ExtraInfo<'_>>,\n ) {\n     let mut parser = Parser::new(doc).into_offset_iter();\n     let mut prev_offset = 0;\n@@ -681,19 +681,19 @@ crate fn find_testable_code<T: doctest::Tester>(\n     }\n }\n \n-crate struct ExtraInfo<'a, 'b> {\n+crate struct ExtraInfo<'tcx> {\n     hir_id: Option<HirId>,\n     item_did: Option<DefId>,\n     sp: Span,\n-    tcx: &'a TyCtxt<'b>,\n+    tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'b> ExtraInfo<'a, 'b> {\n-    crate fn new(tcx: &'a TyCtxt<'b>, hir_id: HirId, sp: Span) -> ExtraInfo<'a, 'b> {\n+impl<'tcx> ExtraInfo<'tcx> {\n+    crate fn new(tcx: TyCtxt<'tcx>, hir_id: HirId, sp: Span) -> ExtraInfo<'tcx> {\n         ExtraInfo { hir_id: Some(hir_id), item_did: None, sp, tcx }\n     }\n \n-    crate fn new_did(tcx: &'a TyCtxt<'b>, did: DefId, sp: Span) -> ExtraInfo<'a, 'b> {\n+    crate fn new_did(tcx: TyCtxt<'tcx>, did: DefId, sp: Span) -> ExtraInfo<'tcx> {\n         ExtraInfo { hir_id: None, item_did: Some(did), sp, tcx }\n     }\n \n@@ -775,7 +775,7 @@ impl LangString {\n         string: &str,\n         allow_error_code_check: ErrorCodes,\n         enable_per_target_ignores: bool,\n-        extra: Option<&ExtraInfo<'_, '_>>,\n+        extra: Option<&ExtraInfo<'_>>,\n     ) -> LangString {\n         let allow_error_code_check = allow_error_code_check.as_bool();\n         let mut seen_rust_tags = false;\n@@ -1208,7 +1208,7 @@ crate struct RustCodeBlock {\n \n /// Returns a range of bytes for each code block in the markdown that is tagged as `rust` or\n /// untagged (and assumed to be rust).\n-crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustCodeBlock> {\n+crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeBlock> {\n     let mut code_blocks = vec![];\n \n     if md.is_empty() {"}, {"sha": "37a0f7f4d7c4b1e2e67e47035c1574890ddb1c00", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -55,7 +55,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n-use rustc_middle::ty;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -390,7 +389,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         _render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-        tcx: ty::TyCtxt<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n         // need to save a copy of the options for rendering the index page\n         let md_opts = options.clone();"}, {"sha": "c93062c73a870ab7dbe45b60c3699ee03b815589", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -13,7 +13,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::ty;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n \n@@ -26,7 +26,7 @@ use crate::html::render::cache::ExternalLocation;\n \n #[derive(Clone)]\n crate struct JsonRenderer<'tcx> {\n-    tcx: ty::TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     /// A mapping of IDs that contains all local items for this crate which gets output as a top\n     /// level field of the JSON blob.\n     index: Rc<RefCell<FxHashMap<types::Id, types::Item>>>,\n@@ -131,7 +131,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         _render_info: RenderInfo,\n         _edition: Edition,\n         _cache: &mut Cache,\n-        tcx: ty::TyCtxt<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n         debug!(\"Initializing json renderer\");\n         Ok(("}, {"sha": "d17189b416dd448a4802c7abf679f93af012d0e8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -18,6 +18,7 @@\n #![feature(str_split_once)]\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::internal)]\n \n #[macro_use]\n extern crate lazy_static;\n@@ -65,7 +66,7 @@ use std::process;\n use rustc_driver::abort_on_err;\n use rustc_errors::ErrorReported;\n use rustc_interface::interface;\n-use rustc_middle::ty;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n use rustc_session::getopts;\n use rustc_session::{early_error, early_warn};\n@@ -471,7 +472,7 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     render_info: config::RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n-    tcx: ty::TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n ) -> MainResult {\n     match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, tcx) {\n         Ok(_) => Ok(()),"}, {"sha": "9516130034b59216a76fd9446c941162859ece0e", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if let Some(dox) = &item.attrs.collapsed_doc_value() {\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n-            let extra = crate::html::markdown::ExtraInfo::new_did(&self.cx.tcx, item.def_id, sp);\n+            let extra = crate::html::markdown::ExtraInfo::new_did(self.cx.tcx, item.def_id, sp);\n             for code_block in markdown::rust_code_blocks(&dox, &extra) {\n                 self.check_rust_syntax(&item, &dox, code_block);\n             }"}, {"sha": "002d8938f694deb9a3c769afed4dabdb4d06fa4c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c03644b191ee9b62e8d6fc6be640b5fecbbf1b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=98c03644b191ee9b62e8d6fc6be640b5fecbbf1b", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def::{\n     PerNS,\n };\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_middle::ty::TyCtxt;\n use rustc_middle::{bug, ty};\n use rustc_resolve::ParentScope;\n use rustc_session::lint::{\n@@ -85,7 +86,7 @@ impl Res {\n         }\n     }\n \n-    fn name(self, tcx: ty::TyCtxt<'_>) -> String {\n+    fn name(self, tcx: TyCtxt<'_>) -> String {\n         match self {\n             Res::Def(_, id) => tcx.item_name(id).to_string(),\n             Res::Primitive(prim) => prim.as_str().to_string(),\n@@ -865,12 +866,11 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n         // FIXME(jynelson): this shouldn't go through stringification, rustdoc should just use the DefId directly\n         let self_name = self_id.and_then(|self_id| {\n-            use ty::TyKind;\n             if matches!(self.cx.tcx.def_kind(self_id), DefKind::Impl) {\n                 // using `ty.to_string()` (or any variant) has issues with raw idents\n                 let ty = self.cx.tcx.type_of(self_id);\n                 let name = match ty.kind() {\n-                    TyKind::Adt(def, _) => Some(self.cx.tcx.item_name(def.did).to_string()),\n+                    ty::Adt(def, _) => Some(self.cx.tcx.item_name(def.did).to_string()),\n                     other if other.is_primitive() => Some(ty.to_string()),\n                     _ => None,\n                 };"}]}