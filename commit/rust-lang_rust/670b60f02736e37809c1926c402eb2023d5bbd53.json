{"sha": "670b60f02736e37809c1926c402eb2023d5bbd53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MGI2MGYwMjczNmUzNzgwOWMxOTI2YzQwMmViMjAyM2Q1YmJkNTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-02T17:16:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-02T17:27:08Z"}, "message": "rustc: Make the shape-emitting code aware of linearized type parameters", "tree": {"sha": "e4a688e8136467e9ab047f890b991606f4b322fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a688e8136467e9ab047f890b991606f4b322fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670b60f02736e37809c1926c402eb2023d5bbd53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670b60f02736e37809c1926c402eb2023d5bbd53", "html_url": "https://github.com/rust-lang/rust/commit/670b60f02736e37809c1926c402eb2023d5bbd53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670b60f02736e37809c1926c402eb2023d5bbd53/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785c26f7f4490abb19f95035fcb7e9e57ee6556c", "url": "https://api.github.com/repos/rust-lang/rust/commits/785c26f7f4490abb19f95035fcb7e9e57ee6556c", "html_url": "https://github.com/rust-lang/rust/commit/785c26f7f4490abb19f95035fcb7e9e57ee6556c"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "ea6c6d7f987253e5701554fe7956b5b3588787ef", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/670b60f02736e37809c1926c402eb2023d5bbd53/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670b60f02736e37809c1926c402eb2023d5bbd53/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=670b60f02736e37809c1926c402eb2023d5bbd53", "patch": "@@ -274,7 +274,7 @@ fn add_substr(dest: &mutable [u8], src: &[u8]) {\n     dest += src;\n }\n \n-fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n+fn shape_of(ccx: &@crate_ctxt, t: ty::t, ty_param_map: &[uint]) -> [u8] {\n     let s = [];\n \n     alt ty::struct(ccx.tcx, t) {\n@@ -309,7 +309,7 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n         s += [shape_vec];\n         add_bool(s, true); // type is POD\n         let unit_ty = ty::mk_mach(ccx.tcx, ast::ty_u8);\n-        add_substr(s, shape_of(ccx, unit_ty));\n+        add_substr(s, shape_of(ccx, unit_ty, ty_param_map));\n       }\n \n       ty::ty_tag(did, tps) {\n@@ -338,7 +338,7 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n \n             add_u16(sub, vec::len(tps) as u16);\n             for tp: ty::t in tps {\n-                let subshape = shape_of(ccx, tp);\n+                let subshape = shape_of(ccx, tp, ty_param_map);\n                 add_u16(sub, vec::len(subshape) as u16);\n                 sub += subshape;\n             }\n@@ -351,27 +351,29 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n \n       ty::ty_box(mt) {\n         s += [shape_box];\n-        add_substr(s, shape_of(ccx, mt.ty));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n       }\n       ty::ty_uniq(subt) {\n         s += [shape_uniq];\n-        add_substr(s, shape_of(ccx, subt));\n+        add_substr(s, shape_of(ccx, subt, ty_param_map));\n       }\n       ty::ty_vec(mt) {\n         s += [shape_vec];\n         add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n-        add_substr(s, shape_of(ccx, mt.ty));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n       }\n       ty::ty_rec(fields) {\n         s += [shape_struct];\n         let sub = [];\n-        for f: field in fields { sub += shape_of(ccx, f.mt.ty); }\n+        for f: field in fields {\n+            sub += shape_of(ccx, f.mt.ty, ty_param_map);\n+        }\n         add_substr(s, sub);\n       }\n       ty::ty_tup(elts) {\n         s += [shape_struct];\n         let sub = [];\n-        for elt in elts { sub += shape_of(ccx, elt); }\n+        for elt in elts { sub += shape_of(ccx, elt, ty_param_map); }\n         add_substr(s, sub);\n       }\n \n@@ -391,25 +393,49 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n         s += [shape_res];\n         add_u16(s, id as u16);\n         add_u16(s, vec::len(tps) as u16);\n-        for tp: ty::t in tps { add_substr(s, shape_of(ccx, tp)); }\n-        add_substr(s, shape_of(ccx, subt));\n+        for tp: ty::t in tps {\n+            add_substr(s, shape_of(ccx, tp, ty_param_map));\n+        }\n+        add_substr(s, shape_of(ccx, subt, ty_param_map));\n \n       }\n \n-\n       ty::ty_var(n) {\n         fail \"shape_of ty_var\";\n       }\n-      ty::ty_param(n, _) { s += [shape_var, n as u8]; }\n+\n+      ty::ty_param(n, _) {\n+        // Find the type parameter in the parameter list.\n+        let found = false;\n+        let i = 0u;\n+        while (i < vec::len(ty_param_map)) {\n+            if n == ty_param_map[i] {\n+                s += [shape_var, i as u8];\n+                found = true;\n+                break;\n+            }\n+            i += 1u;\n+        }\n+        assert found;\n+      }\n     }\n \n     ret s;\n }\n \n // FIXME: We might discover other variants as we traverse these. Handle this.\n-fn shape_of_variant(ccx: &@crate_ctxt, v: &ty::variant_info) -> [u8] {\n+fn shape_of_variant(ccx: &@crate_ctxt,\n+                    v: &ty::variant_info,\n+                    ty_param_count: uint) -> [u8] {\n+    let ty_param_map = [];\n+    let i = 0u;\n+    while (i < ty_param_count) {\n+        ty_param_map += [i];\n+        i += 1u;\n+    }\n+\n     let s = [];\n-    for t: ty::t in v.args { s += shape_of(ccx, t); }\n+    for t: ty::t in v.args { s += shape_of(ccx, t, ty_param_map); }\n     ret s;\n }\n \n@@ -423,11 +449,13 @@ fn gen_tag_shapes(ccx: &@crate_ctxt) -> ValueRef {\n     while i < vec::len(ccx.shape_cx.tag_order) {\n         let did = ccx.shape_cx.tag_order[i];\n         let variants = ty::tag_variants(ccx.tcx, did);\n+        let item_tyt = ty::lookup_item_type(ccx.tcx, did);\n+        let ty_param_count = vec::len(item_tyt.kinds);\n \n         for v: ty::variant_info in variants {\n             offsets += [vec::len(data) as u16];\n \n-            let variant_shape = shape_of_variant(ccx, v);\n+            let variant_shape = shape_of_variant(ccx, v, ty_param_count);\n             add_substr(data, variant_shape);\n         }\n "}, {"sha": "290e83a165339245e57ebec8395a8e679cdcecfb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/670b60f02736e37809c1926c402eb2023d5bbd53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670b60f02736e37809c1926c402eb2023d5bbd53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=670b60f02736e37809c1926c402eb2023d5bbd53", "patch": "@@ -1268,7 +1268,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n \n-        let shape = shape::shape_of(ccx, pair.key);\n+        let shape = shape::shape_of(ccx, pair.key, ti.ty_params);\n         let shape_tables =\n             llvm::LLVMConstPointerCast(ccx.shape_cx.llshapetables,\n                                        T_ptr(T_i8()));"}]}