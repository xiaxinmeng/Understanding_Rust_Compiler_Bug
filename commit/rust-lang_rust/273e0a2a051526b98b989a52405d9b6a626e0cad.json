{"sha": "273e0a2a051526b98b989a52405d9b6a626e0cad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3M2UwYTJhMDUxNTI2Yjk4Yjk4OWE1MjQwNWQ5YjZhNjI2ZTBjYWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-05-10T11:52:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-05-10T11:52:31Z"}, "message": "rustc_session: Use `Iterator::find` instead of manual search", "tree": {"sha": "ddc7a2415c51653b5899d005ac5f81789ebacf17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc7a2415c51653b5899d005ac5f81789ebacf17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/273e0a2a051526b98b989a52405d9b6a626e0cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/273e0a2a051526b98b989a52405d9b6a626e0cad", "html_url": "https://github.com/rust-lang/rust/commit/273e0a2a051526b98b989a52405d9b6a626e0cad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/273e0a2a051526b98b989a52405d9b6a626e0cad/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d18d4df0e2af4d64755538ef2c7c372b3ec3a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d18d4df0e2af4d64755538ef2c7c372b3ec3a87", "html_url": "https://github.com/rust-lang/rust/commit/9d18d4df0e2af4d64755538ef2c7c372b3ec3a87"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "10e195f4f2548e1e197edea4372e8f5491186ada", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/273e0a2a051526b98b989a52405d9b6a626e0cad/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273e0a2a051526b98b989a52405d9b6a626e0cad/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=273e0a2a051526b98b989a52405d9b6a626e0cad", "patch": "@@ -293,35 +293,30 @@ fn build_options<O: Default>(\n             None => (option, None),\n             Some((k, v)) => (k.to_string(), Some(v)),\n         };\n+\n         let option_to_lookup = key.replace(\"-\", \"_\");\n-        let mut found = false;\n-        for &(candidate, setter, type_desc, _) in descrs {\n-            if option_to_lookup != candidate {\n-                continue;\n-            }\n-            if !setter(&mut op, value) {\n-                match value {\n-                    None => early_error(\n-                        error_format,\n-                        &format!(\n-                            \"{0} option `{1}` requires {2} ({3} {1}=<value>)\",\n-                            outputname, key, type_desc, prefix\n+        match descrs.iter().find(|(name, ..)| *name == option_to_lookup) {\n+            Some((_, setter, type_desc, _)) => {\n+                if !setter(&mut op, value) {\n+                    match value {\n+                        None => early_error(\n+                            error_format,\n+                            &format!(\n+                                \"{0} option `{1}` requires {2} ({3} {1}=<value>)\",\n+                                outputname, key, type_desc, prefix\n+                            ),\n                         ),\n-                    ),\n-                    Some(value) => early_error(\n-                        error_format,\n-                        &format!(\n-                            \"incorrect value `{}` for {} option `{}` - {} was expected\",\n-                            value, outputname, key, type_desc\n+                        Some(value) => early_error(\n+                            error_format,\n+                            &format!(\n+                                \"incorrect value `{}` for {} option `{}` - {} was expected\",\n+                                value, outputname, key, type_desc\n+                            ),\n                         ),\n-                    ),\n+                    }\n                 }\n             }\n-            found = true;\n-            break;\n-        }\n-        if !found {\n-            early_error(error_format, &format!(\"unknown {} option: `{}`\", outputname, key));\n+            None => early_error(error_format, &format!(\"unknown {} option: `{}`\", outputname, key)),\n         }\n     }\n     return op;"}]}