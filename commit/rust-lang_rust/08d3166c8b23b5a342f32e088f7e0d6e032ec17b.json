{"sha": "08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDMxNjZjOGIyM2I1YTM0MmYzMmUwODhmN2UwZDZlMDMyZWMxN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:01:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:02:53Z"}, "message": "Cleanup Crate API", "tree": {"sha": "b46a1eb2d61c81312912200f568239e61ce5a845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b46a1eb2d61c81312912200f568239e61ce5a845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "html_url": "https://github.com/rust-lang/rust/commit/08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffcdd25cc8e7f1fd7fb4e3e8478c4cd1adfbf843", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcdd25cc8e7f1fd7fb4e3e8478c4cd1adfbf843", "html_url": "https://github.com/rust-lang/rust/commit/ffcdd25cc8e7f1fd7fb4e3e8478c4cd1adfbf843"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "3695115e4266153472cb7f4d134db8b13dae89a0", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "patch": "@@ -25,7 +25,7 @@ use hir_expand::{\n     MacroDefId,\n };\n use hir_ty::expr::ExprValidator;\n-use ra_db::{CrateId, Edition};\n+use ra_db::{CrateId, Edition, FileId};\n use ra_syntax::ast;\n \n use crate::{\n@@ -40,7 +40,7 @@ use crate::{\n /// root module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Crate {\n-    pub(crate) crate_id: CrateId,\n+    pub(crate) id: CrateId,\n }\n \n #[derive(Debug)]\n@@ -50,33 +50,47 @@ pub struct CrateDependency {\n }\n \n impl Crate {\n-    pub fn crate_id(self) -> CrateId {\n-        self.crate_id\n-    }\n-\n     pub fn dependencies(self, db: &impl DefDatabase) -> Vec<CrateDependency> {\n         db.crate_graph()\n-            .dependencies(self.crate_id)\n+            .dependencies(self.id)\n             .map(|dep| {\n-                let krate = Crate { crate_id: dep.crate_id() };\n+                let krate = Crate { id: dep.crate_id() };\n                 let name = dep.as_name();\n                 CrateDependency { krate, name }\n             })\n             .collect()\n     }\n \n+    // FIXME: add `transitive_reverse_dependencies`.\n+    pub fn reverse_dependencies(self, db: &impl DefDatabase) -> Vec<Crate> {\n+        let crate_graph = db.crate_graph();\n+        crate_graph\n+            .iter()\n+            .filter(|&krate| crate_graph.dependencies(krate).any(|it| it.crate_id == self.id))\n+            .map(|id| Crate { id })\n+            .collect()\n+    }\n+\n     pub fn root_module(self, db: &impl DefDatabase) -> Option<Module> {\n-        let module_id = db.crate_def_map(self.crate_id).root;\n+        let module_id = db.crate_def_map(self.id).root;\n         Some(Module::new(self, module_id))\n     }\n \n+    pub fn root_file(self, db: &impl DefDatabase) -> FileId {\n+        db.crate_graph().crate_root(self.id)\n+    }\n+\n     pub fn edition(self, db: &impl DefDatabase) -> Edition {\n         let crate_graph = db.crate_graph();\n-        crate_graph.edition(self.crate_id)\n+        crate_graph.edition(self.id)\n     }\n \n     pub fn all(db: &impl DefDatabase) -> Vec<Crate> {\n-        db.crate_graph().iter().map(|crate_id| Crate { crate_id }).collect()\n+        db.crate_graph().iter().map(|id| Crate { id }).collect()\n+    }\n+\n+    pub fn crate_id(self) -> CrateId {\n+        self.id\n     }\n }\n \n@@ -115,7 +129,7 @@ pub use hir_def::attr::Attrs;\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n-        Module { id: ModuleId { krate: krate.crate_id, local_id: crate_module_id } }\n+        Module { id: ModuleId { krate: krate.id, local_id: crate_module_id } }\n     }\n \n     /// Name of this module.\n@@ -133,7 +147,7 @@ impl Module {\n \n     /// Returns the crate this module is part of.\n     pub fn krate(self) -> Crate {\n-        Crate { crate_id: self.id.krate }\n+        Crate { id: self.id.krate }\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n@@ -878,11 +892,11 @@ pub struct ImplBlock {\n \n impl ImplBlock {\n     pub fn all_in_crate(db: &impl HirDatabase, krate: Crate) -> Vec<ImplBlock> {\n-        let impls = db.impls_in_crate(krate.crate_id);\n+        let impls = db.impls_in_crate(krate.id);\n         impls.all_impls().map(Self::from).collect()\n     }\n     pub fn for_trait(db: &impl HirDatabase, krate: Crate, trait_: Trait) -> Vec<ImplBlock> {\n-        let impls = db.impls_in_crate(krate.crate_id);\n+        let impls = db.impls_in_crate(krate.id);\n         impls.lookup_impl_blocks_for_trait(trait_.id).map(Self::from).collect()\n     }\n \n@@ -915,7 +929,7 @@ impl ImplBlock {\n     }\n \n     pub fn krate(&self, db: &impl DefDatabase) -> Crate {\n-        Crate { crate_id: self.module(db).id.krate }\n+        Crate { id: self.module(db).id.krate }\n     }\n }\n \n@@ -1053,7 +1067,7 @@ impl Type {\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n     ) -> Option<T> {\n-        for krate in self.ty.value.def_crates(db, krate.crate_id)? {\n+        for krate in self.ty.value.def_crates(db, krate.id)? {\n             let impls = db.impls_in_crate(krate);\n \n             for impl_block in impls.lookup_impl_blocks(&self.ty.value) {"}, {"sha": "6cd5c8cb97edad2ec17b6540536d66871e108d51", "filename": "crates/ra_hir/src/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "patch": "@@ -57,9 +57,9 @@ pub trait HirDebugDatabase {\n impl<DB: HirDebugHelper> HirDebugDatabase for DB {\n     fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_tuple(\"Crate\");\n-        match self.crate_name(krate.crate_id) {\n+        match self.crate_name(krate.id) {\n             Some(name) => builder.field(&name),\n-            None => builder.field(&krate.crate_id),\n+            None => builder.field(&krate.id),\n         }\n         .finish()\n     }"}, {"sha": "0398d0ee6b67a65b6df5dc149db634f1aae2077e", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "patch": "@@ -14,8 +14,8 @@ use crate::{\n };\n \n impl From<ra_db::CrateId> for Crate {\n-    fn from(crate_id: ra_db::CrateId) -> Self {\n-        Crate { crate_id }\n+    fn from(id: ra_db::CrateId) -> Self {\n+        Crate { id }\n     }\n }\n "}, {"sha": "071ca2e5a97f43da023744187c28ecc5c06eefbf", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "patch": "@@ -95,7 +95,7 @@ impl FromSource for MacroDef {\n \n         let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n         let module = Module::from_definition(db, InFile::new(src.file_id, module_src))?;\n-        let krate = Some(module.krate().crate_id());\n+        let krate = Some(module.krate().id);\n \n         let ast_id = Some(AstId::new(src.file_id, db.ast_id_map(src.file_id).ast_id(&src.value)));\n "}, {"sha": "241dd358f9a61d134d5bc7c3ac36c6d326e6c0b1", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d3166c8b23b5a342f32e088f7e0d6e032ec17b/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=08d3166c8b23b5a342f32e088f7e0d6e032ec17b", "patch": "@@ -5,7 +5,7 @@\n use std::mem;\n \n use hir::{DefWithBody, HasSource, ModuleSource};\n-use ra_db::{FileId, SourceDatabase, SourceDatabaseExt};\n+use ra_db::{FileId, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{AstNode, TextRange};\n use rustc_hash::FxHashMap;\n@@ -120,15 +120,11 @@ impl NameDefinition {\n             }\n             if vis.as_str() == \"pub\" {\n                 let krate = self.container.krate();\n-                let crate_graph = db.crate_graph();\n-                for crate_id in crate_graph.iter() {\n-                    let mut crate_deps = crate_graph.dependencies(crate_id);\n-                    if crate_deps.any(|dep| dep.crate_id() == krate.crate_id()) {\n-                        let root_file = crate_graph.crate_root(crate_id);\n-                        let source_root_id = db.file_source_root(root_file);\n-                        let source_root = db.source_root(source_root_id);\n-                        res.extend(source_root.walk().map(|id| (id, None)));\n-                    }\n+                for rev_dep in krate.reverse_dependencies(db) {\n+                    let root_file = rev_dep.root_file(db);\n+                    let source_root_id = db.file_source_root(root_file);\n+                    let source_root = db.source_root(source_root_id);\n+                    res.extend(source_root.walk().map(|id| (id, None)));\n                 }\n                 return SearchScope::new(res);\n             }"}]}