{"sha": "cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "node_id": "C_kwDOAAsO6NoAKGNiYmYwNmIwY2QzOWRjOTMwMzM1NjhmMWU2NWY1MzYzY2JiZGViY2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-29T17:44:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-01T15:45:13Z"}, "message": "Amend codegen test.", "tree": {"sha": "e7805aab66e972f873dc1d699a132472abcab289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7805aab66e972f873dc1d699a132472abcab289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "html_url": "https://github.com/rust-lang/rust/commit/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e1a2b7ce22ddb00abe348113dcc92973e1d612", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e1a2b7ce22ddb00abe348113dcc92973e1d612", "html_url": "https://github.com/rust-lang/rust/commit/a3e1a2b7ce22ddb00abe348113dcc92973e1d612"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "4234c26b5e89b09b485fe68a4a683afc10d25acf", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -17,7 +17,7 @@ pub fn is_empty_1(xs: Iter<f32>) -> bool {\n // CHECK-NEXT:  start:\n // CHECK-NEXT:    [[A:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[A]])\n-// CHECK-NEXT:    [[B:%.*]] = icmp eq {{i32\\*|ptr}} %xs.0, %xs.1\n+// CHECK-NEXT:    [[B:%.*]] = icmp eq {{i32\\*|ptr}} %xs.1, %xs.0\n // CHECK-NEXT:    ret i1 [[B:%.*]]\n     {xs}.next().is_none()\n }\n@@ -28,7 +28,7 @@ pub fn is_empty_2(xs: Iter<f32>) -> bool {\n // CHECK-NEXT:  start:\n // CHECK-NEXT:    [[C:%.*]] = icmp ne {{i32\\*|ptr}} %xs.1, null\n // CHECK-NEXT:    tail call void @llvm.assume(i1 [[C]])\n-// CHECK-NEXT:    [[D:%.*]] = icmp eq {{i32\\*|ptr}} %xs.0, %xs.1\n+// CHECK-NEXT:    [[D:%.*]] = icmp eq {{i32\\*|ptr}} %xs.1, %xs.0\n // CHECK-NEXT:    ret i1 [[D:%.*]]\n     xs.map(|&x| x).next().is_none()\n }"}, {"sha": "6bcb59affe3284e8009d7ca9d466a45b95e8353d", "filename": "src/test/codegen/issue-75659.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fissue-75659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fissue-75659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-75659.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -1,7 +1,7 @@\n // This test checks that the call to memchr/slice_contains is optimized away\n // when searching in small slices.\n \n-// compile-flags: -O\n+// compile-flags: -O -Zinline-mir=no\n // only-x86_64\n \n #![crate_type = \"lib\"]"}, {"sha": "b41ef538d718ff87464ebca6bf213b6a6afd682b", "filename": "src/test/codegen/mem-replace-direct-memcpy.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -3,7 +3,7 @@\n // may e.g. multiply `size_of::<T>()` with a variable \"count\" (which is only\n // known to be `1` after inlining).\n \n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zinline-mir=no\n \n #![crate_type = \"lib\"]\n \n@@ -12,14 +12,12 @@ pub fn replace_byte(dst: &mut u8, src: u8) -> u8 {\n }\n \n // NOTE(eddyb) the `CHECK-NOT`s ensure that the only calls of `@llvm.memcpy` in\n-// the entire output, are the two direct calls we want, from `ptr::{read,write}`.\n+// the entire output, are the two direct calls we want, from `ptr::replace`.\n \n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: ; core::ptr::read\n+// CHECK: ; core::mem::replace\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %src, i{{.*}} 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %{{.*}}, {{i8\\*|ptr}} align 1 %dest, i{{.*}} 1, i1 false)\n // CHECK-NOT: call void @llvm.memcpy\n-// CHECK: ; core::ptr::write\n-// CHECK-NOT: call void @llvm.memcpy\n-// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %dst, {{i8\\*|ptr}} align 1 %src, i{{.*}} 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 1 %dest, {{i8\\*|ptr}} align 1 %src{{.*}}, i{{.*}} 1, i1 false)\n // CHECK-NOT: call void @llvm.memcpy"}, {"sha": "9bef743ddcb414127a0b7cae1e26a12ffdab1f1c", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows\n //\n \n-// compile-flags: -g  -C no-prepopulate-passes --remap-path-prefix={{cwd}}=/the/cwd --remap-path-prefix={{src-base}}=/the/src\n+// compile-flags: -g  -C no-prepopulate-passes --remap-path-prefix={{cwd}}=/the/cwd --remap-path-prefix={{src-base}}=/the/src -Zinline-mir=no\n // aux-build:remap_path_prefix_aux.rs\n \n extern crate remap_path_prefix_aux;"}, {"sha": "015ac4fe4d1b65190c0cc9214b60b23a9bfc0ae1", "filename": "src/test/codegen/simd-wide-sum.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fsimd-wide-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fsimd-wide-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-wide-sum.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -47,8 +47,9 @@ pub fn wider_reduce_iter(x: Simd<u8, N>) -> u16 {\n #[no_mangle]\n // CHECK-LABEL: @wider_reduce_into_iter\n pub fn wider_reduce_into_iter(x: Simd<u8, N>) -> u16 {\n-    // CHECK: zext <8 x i8>\n-    // CHECK-SAME: to <8 x i16>\n-    // CHECK: call i16 @llvm.vector.reduce.add.v8i16(<8 x i16>\n+    // FIXME MIR inlining messes up LLVM optimizations.\n+    // WOULD-CHECK: zext <8 x i8>\n+    // WOULD-CHECK-SAME: to <8 x i16>\n+    // WOULD-CHECK: call i16 @llvm.vector.reduce.add.v8i16(<8 x i16>\n     x.to_array().into_iter().map(u16::from).sum()\n }"}, {"sha": "47fde12bf3036db6df94b21f4f006edb30c8344d", "filename": "src/test/codegen/slice-ref-equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C opt-level=3\n+// compile-flags: -C opt-level=3 -Zmerge-functions=disabled\n \n #![crate_type = \"lib\"]\n "}, {"sha": "03e2a2327fc4c5a17d6a79b4745bc7236090bd1e", "filename": "src/test/codegen/swap-small-types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fswap-small-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fswap-small-types.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -11,9 +11,10 @@ type RGB48 = [u16; 3];\n // CHECK-LABEL: @swap_rgb48\n #[no_mangle]\n pub fn swap_rgb48(x: &mut RGB48, y: &mut RGB48) {\n-// CHECK-NOT: alloca\n-// CHECK: load i48\n-// CHECK: store i48\n+    // FIXME MIR inlining messes up LLVM optimizations.\n+// WOULD-CHECK-NOT: alloca\n+// WOULD-CHECK: load i48\n+// WOULD-CHECK: store i48\n     swap(x, y)\n }\n "}, {"sha": "62139aa9bebde5be00d296a438b4a9657b05ff10", "filename": "src/test/codegen/vec-in-place.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf06b0cd39dc93033568f1e65f5363cbbdebcd/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-in-place.rs?ref=cbbf06b0cd39dc93033568f1e65f5363cbbdebcd", "patch": "@@ -53,16 +53,18 @@ pub fn vec_iterator_cast_unwrap(vec: Vec<Wrapper<u8>>) -> Vec<u8> {\n // CHECK-LABEL: @vec_iterator_cast_aggregate\n #[no_mangle]\n pub fn vec_iterator_cast_aggregate(vec: Vec<[u64; 4]>) -> Vec<Foo> {\n-    // CHECK-NOT: loop\n-    // CHECK-NOT: call\n+    // FIXME These checks should be the same as other functions.\n+    // CHECK-NOT: @__rust_alloc\n+    // CHECK-NOT: @__rust_alloc\n     vec.into_iter().map(|e| unsafe { std::mem::transmute(e) }).collect()\n }\n \n // CHECK-LABEL: @vec_iterator_cast_deaggregate\n #[no_mangle]\n pub fn vec_iterator_cast_deaggregate(vec: Vec<Bar>) -> Vec<[u64; 4]> {\n-    // CHECK-NOT: loop\n-    // CHECK-NOT: call\n+    // FIXME These checks should be the same as other functions.\n+    // CHECK-NOT: @__rust_alloc\n+    // CHECK-NOT: @__rust_alloc\n \n     // Safety: For the purpose of this test we assume that Bar layout matches [u64; 4].\n     // This currently is not guaranteed for repr(Rust) types, but it happens to work here and"}]}