{"sha": "67d442734542ae636b5f2515a9e36909ecd0d8a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDQ0MjczNDU0MmFlNjM2YjVmMjUxNWE5ZTM2OTA5ZWNkMGQ4YTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-18T21:37:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-18T21:37:30Z"}, "message": "Begin sketching name lookup in rustc.", "tree": {"sha": "0366f17f43007cd91a1e4263a7707b1967b41523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0366f17f43007cd91a1e4263a7707b1967b41523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d442734542ae636b5f2515a9e36909ecd0d8a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d442734542ae636b5f2515a9e36909ecd0d8a3", "html_url": "https://github.com/rust-lang/rust/commit/67d442734542ae636b5f2515a9e36909ecd0d8a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d442734542ae636b5f2515a9e36909ecd0d8a3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e7374e29cdcd293a1e3e29bc46a6283dacee85", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e7374e29cdcd293a1e3e29bc46a6283dacee85", "html_url": "https://github.com/rust-lang/rust/commit/05e7374e29cdcd293a1e3e29bc46a6283dacee85"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "44e312ba823383c347e46b372ace989351dbf34a", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/67d442734542ae636b5f2515a9e36909ecd0d8a3/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d442734542ae636b5f2515a9e36909ecd0d8a3/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=67d442734542ae636b5f2515a9e36909ecd0d8a3", "patch": "@@ -1,21 +1,89 @@\n import front.ast;\n import driver.session;\n import util.common.span;\n+import std.map.hashmap;\n+import std.list.list;\n+import std.list.nil;\n+import std.list.cons;\n+import std.util.option;\n+import std.util.some;\n+import std.util.none;\n+import std._str;\n \n-type env = ();\n+tag scope {\n+    scope_crate(@ast.crate);\n+    scope_item(@ast.item);\n+    scope_block(ast.block);\n+}\n+\n+type env = list[scope];\n \n fn resolve_name(&env e, &span sp, ast.name_ n) -> ast.name {\n-    auto s = \"resolving name: \";\n-    s += n.ident;\n-    log s;\n+\n+    log \"resolving name \" + n.ident;\n+\n+    fn in_scope(ast.ident i, &scope s) -> option[scope] {\n+        alt (s) {\n+            case (scope_crate(?c)) {\n+                if (c.node.module.contains_key(i)) {\n+                    ret some[scope](s);\n+                }\n+            }\n+            case (scope_item(?it)) {\n+                alt (it.node) {\n+                    case (ast.item_fn(?f, _)) {\n+                        for (ast.input inp in f.inputs) {\n+                            if (_str.eq(inp.ident, i)) {\n+                                ret some[scope](s);\n+                            }\n+                        }\n+                    }\n+                    case (ast.item_mod(?m)) {\n+                        if (m.contains_key(i)) {\n+                            ret some[scope](s);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        ret none[scope];\n+    }\n+\n+    alt (std.list.find[scope](e, bind in_scope(n.ident, _))) {\n+        case (some[scope](?s)) {\n+            log \"resolved name \" + n.ident;\n+        }\n+        case (none[scope]) {\n+            log \"unresolved name \" + n.ident;\n+        }\n+    }\n+\n     ret fold.respan[ast.name_](sp, n);\n }\n \n+fn update_env_for_crate(&env e, @ast.crate c) -> env {\n+    log \"updating env with crate\";\n+    ret cons[scope](scope_crate(c), @e);\n+}\n+\n+fn update_env_for_item(&env e, @ast.item i) -> env {\n+    log \"updating env with item\";\n+    ret cons[scope](scope_item(i), @e);\n+}\n+\n+fn update_env_for_block(&env e, ast.block b) -> env {\n+    log \"updating env with block\";\n+    ret cons[scope](scope_block(b), @e);\n+}\n+\n fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n     let fold.ast_fold[env] fld = fold.new_identity_fold[env]();\n-    fld = @rec( fold_name = bind resolve_name(_,_,_)\n+    fld = @rec( fold_name = bind resolve_name(_,_,_),\n+                update_env_for_crate = bind update_env_for_crate(_,_),\n+                update_env_for_item = bind update_env_for_item(_,_),\n+                update_env_for_block = bind update_env_for_block(_,_)\n                 with *fld );\n-    ret fold.fold_crate[env]((), fld, crate);\n+    ret fold.fold_crate[env](nil[scope], fld, crate);\n }\n \n // Local Variables:"}]}