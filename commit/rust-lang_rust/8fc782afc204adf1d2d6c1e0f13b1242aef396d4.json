{"sha": "8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzc4MmFmYzIwNGFkZjFkMmQ2YzFlMGYxM2IxMjQyYWVmMzk2ZDQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T18:28:52Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T18:36:05Z"}, "message": "add test", "tree": {"sha": "4acba8f794bf14a10c105eb7300b7433565dbcd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4acba8f794bf14a10c105eb7300b7433565dbcd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "html_url": "https://github.com/rust-lang/rust/commit/8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f319c30bed5c83ae3b4872109999a8a574f29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f319c30bed5c83ae3b4872109999a8a574f29e", "html_url": "https://github.com/rust-lang/rust/commit/67f319c30bed5c83ae3b4872109999a8a574f29e"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "c2d98b8e4ad378fa5bc308a30cd39dd18bbc0d27", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "patch": "@@ -191,6 +191,12 @@ fn is_ty_or_ty_ctxt(cx: &LateContext<'_>, ty: &Ty<'_>) -> Option<String> {\n                 Res::SelfTy(None, Some((did, _))) => {\n                     if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n                         if cx.tcx.is_diagnostic_item(sym::Ty, adt.did) {\n+                            // NOTE: This path is currently unreachable as `Ty<'tcx>` is\n+                            // defined as a type alias meaning that `impl<'tcx> Ty<'tcx>`\n+                            // is not actually allowed.\n+                            //\n+                            // I(@lcnr) still kept this branch in so we don't miss this\n+                            // if we ever change it in the future.\n                             return Some(format!(\"Ty<{}>\", substs[0]));\n                         } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, adt.did) {\n                             return Some(format!(\"TyCtxt<{}>\", substs[0]));"}, {"sha": "f58446d55922239f1f5285ed5bda281f60237554", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs?ref=8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "patch": "@@ -0,0 +1,33 @@\n+// NOTE: This test doesn't actually require `fulldeps`\n+// so we could instead use it as an `ui` test.\n+//\n+// Considering that all other `internal-lints` are tested here\n+// this seems like the cleaner solution though.\n+#![feature(rustc_attrs)]\n+#![deny(rustc::ty_pass_by_reference)]\n+#![allow(unused)]\n+\n+#[rustc_diagnostic_item = \"TyCtxt\"]\n+struct TyCtxt<'tcx> {\n+    inner: &'tcx (),\n+}\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    fn by_value(self) {} // OK\n+    fn by_ref(&self) {} //~ ERROR passing `TyCtxt<'tcx>` by reference\n+}\n+\n+\n+struct TyS<'tcx> {\n+    inner: &'tcx (),\n+}\n+\n+#[rustc_diagnostic_item = \"Ty\"]\n+type Ty<'tcx> = &'tcx TyS<'tcx>;\n+\n+impl<'tcx> TyS<'tcx> {\n+    fn by_value(self: Ty<'tcx>) {}\n+    fn by_ref(self: &Ty<'tcx>) {} //~ ERROR passing `Ty<'tcx>` by reference\n+}\n+\n+fn main() {}"}, {"sha": "b846b30f4ed3794b039570814fe29fc70ba56240", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fc782afc204adf1d2d6c1e0f13b1242aef396d4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr?ref=8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "patch": "@@ -0,0 +1,20 @@\n+error: passing `TyCtxt<'tcx>` by reference\n+  --> $DIR/pass_ty_by_ref_self.rs:17:15\n+   |\n+LL |     fn by_ref(&self) {}\n+   |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pass_ty_by_ref_self.rs:7:9\n+   |\n+LL | #![deny(rustc::ty_pass_by_reference)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `Ty<'tcx>` by reference\n+  --> $DIR/pass_ty_by_ref_self.rs:30:21\n+   |\n+LL |     fn by_ref(self: &Ty<'tcx>) {}\n+   |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n+\n+error: aborting due to 2 previous errors\n+"}]}