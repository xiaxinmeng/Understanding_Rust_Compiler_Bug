{"sha": "dc5ad5070d06015d6a45f656882ae245197d0ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNWFkNTA3MGQwNjAxNWQ2YTQ1ZjY1Njg4MmFlMjQ1MTk3ZDBmZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-16T04:15:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-16T04:15:46Z"}, "message": "auto merge of #5359 : luqmana/rust/inline-asm, r=pcwalton\n\nContinuation of #5317. Actually use operands properly now, including any number of output operands.\r\n\r\nWhich means you can do things like call printf:\r\n```Rust\r\nfn main() {\r\n    unsafe {\r\n        do str::as_c_str(~\"The answer is %d.\\n\") |c| {\r\n            let a = 42;\r\n            asm!(\"mov $0, %rdi\\n\\t\\\r\n                  mov $1, %rsi\\n\\t\\\r\n                  xorl %eax, %eax\\n\\t\\\r\n                  call _printf\"\r\n                 :\r\n                 : \"r\"(c), \"r\"(a)\r\n                 : \"rdi\", \"rsi\", \"eax\"\r\n                 : \"volatile\",\"alignstack\"\r\n                 );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\n% rustc foo.rs\r\n% ./foo\r\nThe answer is 42.\r\n```\r\n\r\nOr just add 2 numbers:\r\n```Rust\r\nfn add(a: int, b: int) -> int {\r\n    let mut c = 0;\r\n    unsafe {\r\n        asm!(\"add $2, $0\"\r\n             : \"=r\"(c)\r\n             : \"0\"(a), \"r\"(b)\r\n             );\r\n    }\r\n    c\r\n}\r\n\r\nfn main() {\r\n    io::println(fmt!(\"%d\", add(1, 2)));\r\n}\r\n```\r\n\r\n```\r\n% rustc foo.rs\r\n% ./foo\r\n3\r\n```\r\n\r\nMultiple outputs!\r\n```Rust\r\nfn addsub(a: int, b: int) -> (int, int) {\r\n    let mut c = 0;\r\n    let mut d = 0;\r\n    unsafe {\r\n        asm!(\"add $4, $0\\n\\t\\\r\n              sub $4, $1\"\r\n             : \"=r\"(c), \"=r\"(d)\r\n             : \"0\"(a), \"1\"(a), \"r\"(b)\r\n             );\r\n    }\r\n    (c, d)\r\n}\r\n\r\nfn main() {\r\n    io::println(fmt!(\"%?\", addsub(5, 1)));\r\n}\r\n```\r\n```\r\n% rustc foo.rs\r\n% ./foo\r\n(6, 4)\r\n```\r\n\r\nThis also classifies inline asm as RvalueStmtExpr instead of the somewhat arbitrary kind I made it initially. There are a few XXX's regarding what to do in the liveness and move passes.", "tree": {"sha": "977b611b2987dadc410537ffdd32e1671a11b959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/977b611b2987dadc410537ffdd32e1671a11b959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5ad5070d06015d6a45f656882ae245197d0ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5ad5070d06015d6a45f656882ae245197d0ff8", "html_url": "https://github.com/rust-lang/rust/commit/dc5ad5070d06015d6a45f656882ae245197d0ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5ad5070d06015d6a45f656882ae245197d0ff8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "html_url": "https://github.com/rust-lang/rust/commit/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5"}, {"sha": "83f2d4ab3dbd3b52ea60212a6698c73201b67a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f2d4ab3dbd3b52ea60212a6698c73201b67a34", "html_url": "https://github.com/rust-lang/rust/commit/83f2d4ab3dbd3b52ea60212a6698c73201b67a34"}], "stats": {"total": 232, "additions": 205, "deletions": 27}, "files": [{"sha": "2afe9564b207dc432e599e24e2fb423edf792975", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -1347,7 +1347,15 @@ pub impl Liveness {\n             self.propagate_through_expr(e, succ)\n           }\n \n-          expr_inline_asm(*) |\n+          expr_inline_asm(_, ins, outs, _, _, _) =>{\n+            let succ = do ins.foldr(succ) |&(_, expr), succ| {\n+                self.propagate_through_expr(expr, succ)\n+            };\n+            do outs.foldr(succ) |&(_, expr), succ| {\n+                self.propagate_through_expr(expr, succ)\n+            }\n+          }\n+\n           expr_lit(*) => {\n             succ\n           }\n@@ -1613,6 +1621,20 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n+      expr_inline_asm(_, ins, outs, _, _, _) => {\n+        for ins.each |&(_, in)| {\n+          (vt.visit_expr)(in, self, vt);\n+        }\n+\n+        // Output operands must be lvalues\n+        for outs.each |&(_, out)| {\n+          self.check_lvalue(out, vt);\n+          (vt.visit_expr)(out, self, vt);\n+        }\n+\n+        visit::visit_expr(expr, self, vt);\n+      }\n+\n       // no correctness conditions related to liveness\n       expr_call(*) | expr_method_call(*) | expr_if(*) | expr_match(*) |\n       expr_while(*) | expr_loop(*) | expr_index(*) | expr_field(*) |\n@@ -1621,7 +1643,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n       expr_cast(*) | expr_unary(*) | expr_ret(*) | expr_break(*) |\n       expr_again(*) | expr_lit(_) | expr_block(*) | expr_swap(*) |\n       expr_mac(*) | expr_addr_of(*) | expr_struct(*) | expr_repeat(*) |\n-      expr_paren(*) | expr_inline_asm(*) => {\n+      expr_paren(*) => {\n         visit::visit_expr(expr, self, vt);\n       }\n     }"}, {"sha": "9848c65ac4372d07dc18076680db0ced4422a0d5", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -558,10 +558,10 @@ pub impl VisitContext {\n                 self.use_expr(base, Read, visitor);\n             }\n \n+            expr_inline_asm(*) |\n             expr_break(*) |\n             expr_again(*) |\n-            expr_lit(*)   |\n-            expr_inline_asm(*) => {}\n+            expr_lit(*) => {}\n \n             expr_loop(ref blk, _) => {\n                 self.consume_block(blk, visitor);"}, {"sha": "1d31dc4fb8acf1e7ff990d993c1b03763e7dd941", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -873,6 +873,7 @@ pub fn add_comment(bcx: block, text: &str) {\n }\n \n pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n+                     inputs: &[ValueRef], output: TypeRef,\n                      volatile: bool, alignstack: bool,\n                      dia: AsmDialect) -> ValueRef {\n     unsafe {\n@@ -883,11 +884,17 @@ pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n         let alignstack = if alignstack { lib::llvm::True }\n                          else          { lib::llvm::False };\n \n-        let llfty = T_fn(~[], T_void());\n+        let argtys = do inputs.map |v| {\n+            debug!(\"Asm Input Type: %?\", val_str(cx.ccx().tn, *v));\n+            val_ty(*v)\n+        };\n+\n+        debug!(\"Asm Output Type: %?\", ty_str(cx.ccx().tn, output));\n+        let llfty = T_fn(argtys, output);\n         let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n                                     alignstack, dia as c_uint);\n \n-        Call(cx, v, ~[])\n+        Call(cx, v, inputs)\n     }\n }\n "}, {"sha": "fb63f5384fb7a0ce197594988059007cf9f826b4", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 103, "deletions": 11, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -557,6 +557,109 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n         ast::expr_paren(a) => {\n             return trans_rvalue_stmt_unadjusted(bcx, a);\n         }\n+        ast::expr_inline_asm(asm, ref ins, ref outs,\n+                             clobs, volatile, alignstack) => {\n+            let mut constraints = ~[];\n+            let mut cleanups = ~[];\n+            let mut aoutputs = ~[];\n+\n+            let outputs = do outs.map |&(c, out)| {\n+                constraints.push(copy *c);\n+\n+                let aoutty = ty::arg {\n+                    mode: ast::expl(ast::by_copy),\n+                    ty: expr_ty(bcx, out)\n+                };\n+                aoutputs.push(unpack_result!(bcx, {\n+                    callee::trans_arg_expr(bcx, aoutty, out, &mut cleanups,\n+                                           None, callee::DontAutorefArg)\n+                    }));\n+\n+                let e = match out.node {\n+                    ast::expr_addr_of(_, e) => e,\n+                    _ => fail!(~\"Expression must be addr of\")\n+                };\n+\n+                let outty = ty::arg {\n+                    mode: ast::expl(ast::by_copy),\n+                    ty: expr_ty(bcx, e)\n+                };\n+\n+                unpack_result!(bcx, {\n+                    callee::trans_arg_expr(bcx, outty, e, &mut cleanups,\n+                                           None, callee::DontAutorefArg)\n+                })\n+\n+            };\n+\n+            for cleanups.each |c| {\n+                revoke_clean(bcx, *c);\n+            }\n+            cleanups = ~[];\n+\n+            let inputs = do ins.map |&(c, in)| {\n+                constraints.push(copy *c);\n+\n+                let inty = ty::arg {\n+                    mode: ast::expl(ast::by_copy),\n+                    ty: expr_ty(bcx, in)\n+                };\n+\n+                unpack_result!(bcx, {\n+                    callee::trans_arg_expr(bcx, inty, in, &mut cleanups,\n+                                           None, callee::DontAutorefArg)\n+                })\n+\n+            };\n+\n+            for cleanups.each |c| {\n+                revoke_clean(bcx, *c);\n+            }\n+\n+            let mut constraints = str::connect(constraints, \",\");\n+\n+            // Add the clobbers\n+            if *clobs != ~\"\" {\n+                if constraints == ~\"\" {\n+                    constraints += *clobs;\n+                } else {\n+                    constraints += ~\",\" + *clobs;\n+                }\n+            } else {\n+                constraints += *clobs;\n+            }\n+\n+            debug!(\"Asm Constraints: %?\", constraints);\n+\n+            let output = if outputs.len() == 0 {\n+                T_void()\n+            } else if outputs.len() == 1 {\n+                val_ty(outputs[0])\n+            } else {\n+                T_struct(outputs.map(|o| val_ty(*o)))\n+            };\n+\n+            let r = do str::as_c_str(*asm) |a| {\n+                do str::as_c_str(constraints) |c| {\n+                    InlineAsmCall(bcx, a, c, inputs, output, volatile,\n+                                  alignstack, lib::llvm::AD_ATT)\n+                }\n+            };\n+\n+            if outputs.len() == 1 {\n+                let op = PointerCast(bcx, aoutputs[0],\n+                                     T_ptr(val_ty(outputs[0])));\n+                Store(bcx, r, op);\n+            } else {\n+                for aoutputs.eachi |i, o| {\n+                    let v = ExtractValue(bcx, r, i);\n+                    let op = PointerCast(bcx, *o, T_ptr(val_ty(outputs[i])));\n+                    Store(bcx, v, op);\n+                }\n+            }\n+\n+            return bcx;\n+        }\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,\n@@ -691,17 +794,6 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_assign_op(op, dst, src) => {\n             return trans_assign_op(bcx, expr, op, dst, src);\n         }\n-        ast::expr_inline_asm(asm, cons, volatile, alignstack) => {\n-            // XXX: cons doesn't actual contain ALL the stuff we should\n-            // be passing since the constraints for in/outputs aren't included\n-            do str::as_c_str(*asm) |a| {\n-                do str::as_c_str(*cons) |c| {\n-                    InlineAsmCall(bcx, a, c, volatile, alignstack,\n-                                  lib::llvm::AD_ATT);\n-                }\n-            }\n-            return bcx;\n-        }\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,"}, {"sha": "692dc392173b3fdd6b0d478289a42a11378e4daa", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -348,12 +348,22 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         }\n         mark_for_method_call(cx, e.id, e.callee_id);\n       }\n+\n+      expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n+        for ins.each |&(_, in)| {\n+          node_type_needs(cx, use_repr, in.id);\n+        }\n+        for outs.each |&(_, out)| {\n+          node_type_needs(cx, use_repr, out.id);\n+        }\n+      }\n+\n       expr_paren(e) => mark_for_expr(cx, e),\n \n       expr_match(*) | expr_block(_) | expr_if(*) | expr_while(*) |\n       expr_break(_) | expr_again(_) | expr_unary(_, _) | expr_lit(_) |\n       expr_mac(_) | expr_addr_of(_, _) | expr_ret(_) | expr_loop(_, _) |\n-      expr_loop_body(_) | expr_do_body(_) | expr_inline_asm(*) => ()\n+      expr_loop_body(_) | expr_do_body(_) => ()\n     }\n }\n "}, {"sha": "f455e983690f412ded19873768bc5b8eb5cf62cb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -3102,7 +3102,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_block(*) |\n         ast::expr_copy(*) |\n         ast::expr_repeat(*) |\n-        ast::expr_inline_asm(*) |\n         ast::expr_lit(@codemap::spanned {node: lit_str(_), _}) |\n         ast::expr_vstore(_, ast::expr_vstore_slice) |\n         ast::expr_vstore(_, ast::expr_vstore_mut_slice) |\n@@ -3145,6 +3144,7 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_loop(*) |\n         ast::expr_assign(*) |\n         ast::expr_swap(*) |\n+        ast::expr_inline_asm(*) |\n         ast::expr_assign_op(*) => {\n             RvalueStmtExpr\n         }"}, {"sha": "f3fff416c5591219f447212f56161ac88a4cb8a9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -2317,8 +2317,15 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let region_lb = ty::re_scope(expr.id);\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n-      ast::expr_inline_asm(*) => {\n+      ast::expr_inline_asm(_, ins, outs, _, _, _) => {\n           fcx.require_unsafe(expr.span, ~\"use of inline assembly\");\n+\n+          for ins.each |&(_, in)| {\n+              check_expr(fcx, in);\n+          }\n+          for outs.each |&(_, out)| {\n+              check_expr(fcx, out);\n+          }\n           fcx.write_nil(id);\n       }\n       ast::expr_mac(_) => tcx.sess.bug(~\"unexpanded macro\"),"}, {"sha": "e5fb2ad153cf12c9974febba41b847107a4b9920", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -601,8 +601,10 @@ pub enum expr_ {\n     expr_ret(Option<@expr>),\n     expr_log(log_level, @expr, @expr),\n \n-    /* asm, clobbers + constraints, volatile, align stack */\n-    expr_inline_asm(@~str, @~str, bool, bool),\n+    expr_inline_asm(@~str,              // asm\n+                    ~[(@~str, @expr)],  // inputs\n+                    ~[(@~str, @expr)],  // outputs\n+                    @~str, bool, bool), // clobbers, volatile, align stack\n \n     expr_mac(mac),\n "}, {"sha": "a014d8ccb8bc54267bead2e1c3e99b298ac0c5de", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -75,6 +75,13 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n                     let out = p.parse_expr();\n                     p.expect(&token::RPAREN);\n \n+                    let out = @ast::expr {\n+                        id: cx.next_id(),\n+                        callee_id: cx.next_id(),\n+                        span: out.span,\n+                        node: ast::expr_addr_of(ast::m_mutbl, out)\n+                    };\n+\n                     outputs.push((constraint, out));\n                 }\n             }\n@@ -156,7 +163,8 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     MRExpr(@ast::expr {\n         id: cx.next_id(),\n         callee_id: cx.next_id(),\n-        node: ast::expr_inline_asm(@asm, @cons, volatile, alignstack),\n+        node: ast::expr_inline_asm(@asm, inputs, outputs,\n+                                   @cons, volatile, alignstack),\n         span: sp\n     })\n }"}, {"sha": "a8952f313a5b1048dddb7237a10efec7d67340c2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -560,7 +560,14 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 fld.fold_expr(e)\n             )\n         }\n-        expr_inline_asm(*) => copy *e,\n+        expr_inline_asm(asm, ins, outs, c, v, a) => {\n+            expr_inline_asm(\n+                asm,\n+                ins.map(|&(c, in)| (c, fld.fold_expr(in))),\n+                outs.map(|&(c, out)| (c, fld.fold_expr(out))),\n+                c, v, a\n+            )\n+        }\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),\n         expr_struct(path, ref fields, maybe_expr) => {\n             expr_struct("}, {"sha": "370434010b2c637d5e89096f46ad3f1922b8e213", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -1403,15 +1403,31 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n           }\n         }\n       }\n-      ast::expr_inline_asm(a, c, v, _) => {\n+      ast::expr_inline_asm(a, in, out, c, v, _) => {\n         if v {\n             word(s.s, ~\"__volatile__ asm!\");\n         } else {\n             word(s.s, ~\"asm!\");\n         }\n         popen(s);\n         print_string(s, *a);\n-        word_space(s, ~\",\");\n+        word_space(s, ~\":\");\n+        for out.each |&(co, o)| {\n+            print_string(s, *co);\n+            popen(s);\n+            print_expr(s, o);\n+            pclose(s);\n+            word_space(s, ~\",\");\n+        }\n+        word_space(s, ~\":\");\n+        for in.each |&(co, o)| {\n+            print_string(s, *co);\n+            popen(s);\n+            print_expr(s, o);\n+            pclose(s);\n+            word_space(s, ~\",\");\n+        }\n+        word_space(s, ~\":\");\n         print_string(s, *c);\n         pclose(s);\n       }"}, {"sha": "6a0f1a2ec46b21dc5a39684eb24c052f42ea03aa", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5ad5070d06015d6a45f656882ae245197d0ff8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=dc5ad5070d06015d6a45f656882ae245197d0ff8", "patch": "@@ -562,7 +562,14 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         }\n         expr_mac(ref mac) => visit_mac((*mac), e, v),\n         expr_paren(x) => (v.visit_expr)(x, e, v),\n-        expr_inline_asm(*) => (),\n+        expr_inline_asm(_, ins, outs, _, _, _) => {\n+            for ins.each |&(_, in)| {\n+                (v.visit_expr)(in, e, v);\n+            }\n+            for outs.each |&(_, out)| {\n+                (v.visit_expr)(out, e, v);\n+            }\n+        }\n     }\n     (v.visit_expr_post)(ex, e, v);\n }"}]}