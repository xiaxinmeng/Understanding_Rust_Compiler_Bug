{"sha": "6aa36e9deb9191ae8414b433d49c71ac37475cea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYTM2ZTlkZWI5MTkxYWU4NDE0YjQzM2Q0OWM3MWFjMzc0NzVjZWE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-13T12:22:05Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-13T12:22:05Z"}, "message": "initial addition and subtraction for bytes and ints", "tree": {"sha": "b252b9a3814b265aeff6111ac8f001a01a826cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b252b9a3814b265aeff6111ac8f001a01a826cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa36e9deb9191ae8414b433d49c71ac37475cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa36e9deb9191ae8414b433d49c71ac37475cea", "html_url": "https://github.com/rust-lang/rust/commit/6aa36e9deb9191ae8414b433d49c71ac37475cea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa36e9deb9191ae8414b433d49c71ac37475cea/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bdd3ed81fdc6a49930043ee3a14758bf435d592", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdd3ed81fdc6a49930043ee3a14758bf435d592", "html_url": "https://github.com/rust-lang/rust/commit/5bdd3ed81fdc6a49930043ee3a14758bf435d592"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "bc53c1062dc0f513f7d20a9cf8fd5f2f026ec01d", "filename": "src/const.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6aa36e9deb9191ae8414b433d49c71ac37475cea/src%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa36e9deb9191ae8414b433d49c71ac37475cea/src%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconst.rs?ref=6aa36e9deb9191ae8414b433d49c71ac37475cea", "patch": "@@ -222,11 +222,75 @@ fn neg_float_str(s: &InternedString) -> Cow<'static, str> {\n     }\n }\n \n+fn is_negative(ty: LitIntType) -> bool {\n+    match ty {\n+        SignedIntLit(_, sign) | UnsuffixedIntLit(sign) => sign == Minus,\n+        UnsignedIntLit(_) => false,\n+    }\n+}\n+\n+fn unify_int_type(l: LitIntType, r: LitIntType, s: Sign) -> Option(LitIntType) {\n+    match (l, r) {\n+        (SignedIntLit(lty, _), SignedIntLit(rty, _)) => if lty == rty {\n+            Some(SignedIntLit(lty, s)) } else { None },\n+        (UnsignedIntLit(lty), UnsignedIntLit(rty)) =>\n+            if Sign == Plus && lty == rty {\n+                Some(UnsignedIntLit(lty))\n+            } else { None },\n+        (UnsuffixedIntLit(_), UnsuffixedIntLit(_)) => UnsuffixedIntLit(s),\n+        (SignedIntLit(lty, _), UnsuffixedIntLit(_)) => SignedIntLit(lty, s),\n+        (UnsignedIntLit(lty), UnsuffixedIntLit(rs)) => if rs == Plus {\n+            Some(UnsignedIntLit(lty)) } else { None },\n+        (UnsuffixedIntLit(_), SignedIntLit(rty, _)) => SignedIntLit(rty, s),\n+        (UnsuffixedIntLit(ls), UnsignedIntLit(rty)) => if ls == Plus {\n+            Some(UnsignedIntLit(rty)) } else { None },\n+        _ => None,\n+    }\n+}\n+\n fn constant_binop(cx: &Context, op: BinOp, left: &Expr, right: &Expr)\n         -> Option<Constant> {\n     match op.node {\n-        //BiAdd,\n-        //BiSub,\n+        BiAdd => constant_binop_apply(cx, left, right, |l, r|\n+            match (l, r) {\n+                (ConstantByte(l8), ConstantByte(r8)) =>\n+                    l8.checked_add(r8).map(|v| ConstantByte(v)),\n+                (ConstantInt(l64, lty), ConstantInt(r64, rty)) => {\n+                    let (ln, rn) = (is_negative(lty), is_negative(rty));\n+                    if ln == rn {\n+                        unify_int_type(lty, rty, if ln { Minus } else { Plus })\n+                            .and_then(|ty| l64.checked_add(r64).map(\n+                                |v| ConstantInt(v, ty)))\n+                    } else {\n+                        if ln {\n+                            add_neg_int(r64, rty, l64, lty)\n+                        } else {\n+                            add_neg_int(l64, lty, r64, rty)\n+                        }\n+                    }\n+                },\n+                // TODO: float\n+                _ => None\n+            }),\n+        BiSub => constant_binop_apply(cx, left, right, |l, r|\n+            match (l, r) {\n+                (ConstantByte(l8), ConstantByte(r8)) => if r8 > l8 {\n+                    None } else { Some(ConstantByte(l8 - r8)) },\n+                (ConstantInt(l64, lty), ConstantInt(r64, rty)) => {\n+                    let (ln, rn) = (is_negative(lty), is_negative(rty));\n+                    match (ln, rn) {\n+                        (false, false) => sub_int(l64, lty, r64, rty, r64 > l64),\n+                        (true, true) => sub_int(l64, lty, r64, rty, l64 > r64),\n+                        (true, false) => unify_int_type(lty, rty, Minus)\n+                            .and_then(|ty| l64.checked_add(r64).map(\n+                                |v| ConstantInt(v, ty))),\n+                        (false, true) => unify_int_type(lty, rty, Plus)\n+                            .and_then(|ty| l64.checked_add(r64).map(\n+                                |v| ConstantInt(v, ty))),\n+                    }\n+                },\n+                _ => None,\n+            }),\n         //BiMul,\n         //BiDiv,\n         //BiRem,\n@@ -247,6 +311,21 @@ fn constant_binop(cx: &Context, op: BinOp, left: &Expr, right: &Expr)\n     }\n }\n \n+fn add_neg_int(pos: u64, pty: LitIntType, neg: u64, nty: LitIntType) ->\n+        Some(Constant) {\n+    if neg > pos {\n+        unify_int_type(nty, pty, Minus).map(|ty| ConstantInt(neg - pos, ty))\n+    } else {\n+        unify_int_type(nty, pty, Plus).map(|ty| ConstantInt(pos - neg, ty))\n+    }\n+}\n+\n+fn sub_int(l: u64, lty: LitIntType, r: u64, rty: LitIntType, neg: Bool) ->\n+        Option<Constant> {\n+     unify_int_type(lty, rty, if neg { Minus } else { Plus }).and_then(\n+        |ty| l64.checked_sub(r64).map(|v| ConstantInt(v, ty)))\n+}\n+\n fn constant_binop_apply<F>(cx: &Context, left: &Expr, right: &Expr, op: F)\n         -> Option<Constant>\n where F: FnMut(ConstantVariant, ConstantVariant) -> Option<ConstantVariant> {"}]}