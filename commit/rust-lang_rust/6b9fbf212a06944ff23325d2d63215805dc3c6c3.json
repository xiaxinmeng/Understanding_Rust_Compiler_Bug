{"sha": "6b9fbf212a06944ff23325d2d63215805dc3c6c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOWZiZjIxMmEwNjk0NGZmMjMzMjVkMmQ2MzIxNTgwNWRjM2M2YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-22T07:05:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-22T07:05:21Z"}, "message": "Auto merge of #78134 - bugadani:arena-nodrop, r=lcnr\n\nUse `DroplessArena` where we know the type doesn't need drop\n\nThis PR uses a single `DroplessArena` in resolve instead of three separate `TypedArena`s.\n\n`DroplessArena` checks that the type indeed doesn't need drop, so in case the types change, this will result in visible failures.", "tree": {"sha": "947188ed2c56a5ff5a396a47039824121ae5c285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947188ed2c56a5ff5a396a47039824121ae5c285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b9fbf212a06944ff23325d2d63215805dc3c6c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9fbf212a06944ff23325d2d63215805dc3c6c3", "html_url": "https://github.com/rust-lang/rust/commit/6b9fbf212a06944ff23325d2d63215805dc3c6c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b9fbf212a06944ff23325d2d63215805dc3c6c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0fa9d51ff4ad2c0869e660856cd327e79915e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0fa9d51ff4ad2c0869e660856cd327e79915e9", "html_url": "https://github.com/rust-lang/rust/commit/8f0fa9d51ff4ad2c0869e660856cd327e79915e9"}, {"sha": "9b453d695481f8898bf29eef25f3027c769e1a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b453d695481f8898bf29eef25f3027c769e1a99", "html_url": "https://github.com/rust-lang/rust/commit/9b453d695481f8898bf29eef25f3027c769e1a99"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "b12e516fa3ed5371f360c99a5935ed4ad1a913f8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b9fbf212a06944ff23325d2d63215805dc3c6c3/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9fbf212a06944ff23325d2d63215805dc3c6c3/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=6b9fbf212a06944ff23325d2d63215805dc3c6c3", "patch": "@@ -19,7 +19,7 @@ pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n-use rustc_arena::TypedArena;\n+use rustc_arena::{DroplessArena, TypedArena};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::unwrap_or;\n use rustc_ast::visit::{self, Visitor};\n@@ -1035,12 +1035,10 @@ pub struct Resolver<'a> {\n pub struct ResolverArenas<'a> {\n     modules: TypedArena<ModuleData<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n-    name_bindings: TypedArena<NameBinding<'a>>,\n     imports: TypedArena<Import<'a>>,\n     name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,\n-    macro_rules_bindings: TypedArena<MacroRulesBinding<'a>>,\n     ast_paths: TypedArena<ast::Path>,\n-    pattern_spans: TypedArena<Span>,\n+    dropless: DroplessArena,\n }\n \n impl<'a> ResolverArenas<'a> {\n@@ -1055,7 +1053,7 @@ impl<'a> ResolverArenas<'a> {\n         self.local_modules.borrow()\n     }\n     fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {\n-        self.name_bindings.alloc(name_binding)\n+        self.dropless.alloc(name_binding)\n     }\n     fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {\n         self.imports.alloc(import)\n@@ -1067,13 +1065,13 @@ impl<'a> ResolverArenas<'a> {\n         &'a self,\n         binding: MacroRulesBinding<'a>,\n     ) -> &'a MacroRulesBinding<'a> {\n-        self.macro_rules_bindings.alloc(binding)\n+        self.dropless.alloc(binding)\n     }\n     fn alloc_ast_paths(&'a self, paths: &[ast::Path]) -> &'a [ast::Path] {\n         self.ast_paths.alloc_from_iter(paths.iter().cloned())\n     }\n     fn alloc_pattern_spans(&'a self, spans: impl Iterator<Item = Span>) -> &'a [Span] {\n-        self.pattern_spans.alloc_from_iter(spans)\n+        self.dropless.alloc_from_iter(spans)\n     }\n }\n "}, {"sha": "1565efbb022f4bc03d3058bf0faa25391903e74b", "filename": "compiler/rustc_typeck/src/variance/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9fbf212a06944ff23325d2d63215805dc3c6c3/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9fbf212a06944ff23325d2d63215805dc3c6c3/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs?ref=6b9fbf212a06944ff23325d2d63215805dc3c6c3", "patch": "@@ -4,7 +4,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/variance.html\n \n use hir::Node;\n-use rustc_arena::TypedArena;\n+use rustc_arena::DroplessArena;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_middle::ty::query::Providers;\n@@ -32,8 +32,8 @@ pub fn provide(providers: &mut Providers) {\n \n fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateVariancesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n-    let mut arena = TypedArena::default();\n-    let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n+    let arena = DroplessArena::default();\n+    let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     solve::solve_constraints(constraints_cx)\n }"}, {"sha": "81c858c53cb8e4035a2a8143882fd7e231e91809", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9fbf212a06944ff23325d2d63215805dc3c6c3/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9fbf212a06944ff23325d2d63215805dc3c6c3/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=6b9fbf212a06944ff23325d2d63215805dc3c6c3", "patch": "@@ -9,7 +9,7 @@\n // `InferredIndex` is a newtype'd int representing the index of such\n // a variable.\n \n-use rustc_arena::TypedArena;\n+use rustc_arena::DroplessArena;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::HirIdMap;\n@@ -47,7 +47,7 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n \n pub struct TermsContext<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n-    pub arena: &'a TypedArena<VarianceTerm<'a>>,\n+    pub arena: &'a DroplessArena,\n \n     // For marker types, UnsafeCell, and other lang items where\n     // variance is hardcoded, records the item-id and the hardcoded\n@@ -64,7 +64,7 @@ pub struct TermsContext<'a, 'tcx> {\n \n pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    arena: &'a mut TypedArena<VarianceTerm<'a>>,\n+    arena: &'a DroplessArena,\n ) -> TermsContext<'a, 'tcx> {\n     let mut terms_cx = TermsContext {\n         tcx,"}]}