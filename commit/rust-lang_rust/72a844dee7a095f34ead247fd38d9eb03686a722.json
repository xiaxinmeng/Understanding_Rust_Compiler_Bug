{"sha": "72a844dee7a095f34ead247fd38d9eb03686a722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTg0NGRlZTdhMDk1ZjM0ZWFkMjQ3ZmQzOGQ5ZWIwMzY4NmE3MjI=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-30T02:43:37Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-22T01:23:39Z"}, "message": "bootstrap.py fetches rustfmt.\n\nCo-Authored-By: Mark Rousskov <mark.simulacrum@gmail.com>", "tree": {"sha": "37e5640b2d2aec260f5953006b9a3698e987604f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e5640b2d2aec260f5953006b9a3698e987604f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a844dee7a095f34ead247fd38d9eb03686a722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a844dee7a095f34ead247fd38d9eb03686a722", "html_url": "https://github.com/rust-lang/rust/commit/72a844dee7a095f34ead247fd38d9eb03686a722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a844dee7a095f34ead247fd38d9eb03686a722/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8369a1a31a5c08e818283250d9e1cef3bfc04476", "url": "https://api.github.com/repos/rust-lang/rust/commits/8369a1a31a5c08e818283250d9e1cef3bfc04476", "html_url": "https://github.com/rust-lang/rust/commit/8369a1a31a5c08e818283250d9e1cef3bfc04476"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "6737086f6e5b0fab8016be51f10defbafbf4ae9a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/72a844dee7a095f34ead247fd38d9eb03686a722/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/72a844dee7a095f34ead247fd38d9eb03686a722/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=72a844dee7a095f34ead247fd38d9eb03686a722", "patch": "@@ -322,6 +322,7 @@ def __init__(self):\n         self.date = ''\n         self._download_url = ''\n         self.rustc_channel = ''\n+        self.rustfmt_channel = ''\n         self.build = ''\n         self.build_dir = os.path.join(os.getcwd(), \"build\")\n         self.clean = False\n@@ -344,6 +345,7 @@ def download_stage0(self):\n         \"\"\"\n         rustc_channel = self.rustc_channel\n         cargo_channel = self.cargo_channel\n+        rustfmt_channel = self.rustfmt_channel\n \n         def support_xz():\n             try:\n@@ -393,13 +395,29 @@ def support_xz():\n             with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n-    def _download_stage0_helper(self, filename, pattern, tarball_suffix):\n+        if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n+            not os.path.exists(self.rustfmt())\n+            or self.program_out_of_date(self.rustfmt_stamp())\n+        ):\n+            if rustfmt_channel:\n+                tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+                [channel, date] = rustfmt_channel.split('-', 1)\n+                filename = \"rustfmt-{}-{}{}\".format(channel, self.build, tarball_suffix)\n+                self._download_stage0_helper(filename, \"rustfmt-preview\", tarball_suffix, date)\n+                self.fix_executable(\"{}/bin/rustfmt\".format(self.bin_root()))\n+                self.fix_executable(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n+                with output(self.rustfmt_stamp()) as rustfmt_stamp:\n+                    rustfmt_stamp.write(self.date)\n+\n+    def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n+        if date is None:\n+            date = self.date\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, self.date)\n+        rustc_cache = os.path.join(cache_dst, date)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        url = \"{}/dist/{}\".format(self._download_url, self.date)\n+        url = \"{}/dist/{}\".format(self._download_url, date)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n@@ -493,6 +511,16 @@ def cargo_stamp(self):\n         \"\"\"\n         return os.path.join(self.bin_root(), '.cargo-stamp')\n \n+    def rustfmt_stamp(self):\n+        \"\"\"Return the path for .rustfmt-stamp\n+\n+        >>> rb = RustBuild()\n+        >>> rb.build_dir = \"build\"\n+        >>> rb.rustfmt_stamp() == os.path.join(\"build\", \"stage0\", \".rustfmt-stamp\")\n+        True\n+        \"\"\"\n+        return os.path.join(self.bin_root(), '.rustfmt-stamp')\n+\n     def program_out_of_date(self, stamp_path):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n         if not os.path.exists(stamp_path) or self.clean:\n@@ -565,6 +593,12 @@ def rustc(self):\n         \"\"\"Return config path for rustc\"\"\"\n         return self.program_config('rustc')\n \n+    def rustfmt(self):\n+        \"\"\"Return config path for rustfmt\"\"\"\n+        if not self.rustfmt_channel:\n+            return None\n+        return self.program_config('rustfmt')\n+\n     def program_config(self, program):\n         \"\"\"Return config path for the given program\n \n@@ -868,6 +902,9 @@ def bootstrap(help_triggered):\n     build.rustc_channel = data['rustc']\n     build.cargo_channel = data['cargo']\n \n+    if \"rustfmt\" in data:\n+        build.rustfmt_channel = data['rustfmt']\n+\n     if 'dev' in data:\n         build.set_dev_environment()\n     else:\n@@ -895,6 +932,8 @@ def bootstrap(help_triggered):\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     env[\"CARGO\"] = build.cargo()\n     env[\"RUSTC\"] = build.rustc()\n+    if build.rustfmt():\n+        env[\"RUSTFMT\"] = build.rustfmt()\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "0e941e13676684d8c7b4f8dcfa94500486cba740", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72a844dee7a095f34ead247fd38d9eb03686a722/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/72a844dee7a095f34ead247fd38d9eb03686a722/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=72a844dee7a095f34ead247fd38d9eb03686a722", "patch": "@@ -20,14 +20,14 @@ def setUp(self):\n         os.mkdir(os.path.join(self.rust_root, \"src\"))\n         with open(os.path.join(self.rust_root, \"src\",\n                                \"stage0.txt\"), \"w\") as stage0:\n-            stage0.write(\"#ignore\\n\\ndate: 2017-06-15\\nrustc: beta\\ncargo: beta\")\n+            stage0.write(\"#ignore\\n\\ndate: 2017-06-15\\nrustc: beta\\ncargo: beta\\nrustfmt: beta\")\n \n     def tearDown(self):\n         rmtree(self.rust_root)\n \n     def test_stage0_data(self):\n         \"\"\"Extract data from stage0.txt\"\"\"\n-        expected = {\"date\": \"2017-06-15\", \"rustc\": \"beta\", \"cargo\": \"beta\"}\n+        expected = {\"date\": \"2017-06-15\", \"rustc\": \"beta\", \"cargo\": \"beta\", \"rustfmt\": \"beta\"}\n         data = bootstrap.stage0_data(self.rust_root)\n         self.assertDictEqual(data, expected)\n "}, {"sha": "2eb46e4e17bf2ae1742e0a560c551b5d0c7fc8a5", "filename": "src/stage0.txt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72a844dee7a095f34ead247fd38d9eb03686a722/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/72a844dee7a095f34ead247fd38d9eb03686a722/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=72a844dee7a095f34ead247fd38d9eb03686a722", "patch": "@@ -16,6 +16,11 @@ date: 2019-12-18\n rustc: beta\n cargo: beta\n \n+# We use a nightly rustfmt to format the source because it solves some bootstrapping\n+# issues with use of new syntax in this repo. If you're looking at the beta/stable branch, this key should be omitted,\n+# as we don't want to depend on rustfmt from nightly there.\n+rustfmt: nightly-2019-11-05\n+\n # When making a stable release the process currently looks like:\n #\n #   1. Produce stable build, upload it to dev-static"}]}