{"sha": "6b07cec05c614c34d211cff23f738f03d3026ae8", "node_id": "C_kwDOAAsO6NoAKDZiMDdjZWMwNWM2MTRjMzRkMjExY2ZmMjNmNzM4ZjAzZDMwMjZhZTg", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-01T15:22:42Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-01T15:22:42Z"}, "message": "Cache with consistent env and bound", "tree": {"sha": "31dcd5edb87e511d641f92d498d3310ba1fd4ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31dcd5edb87e511d641f92d498d3310ba1fd4ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b07cec05c614c34d211cff23f738f03d3026ae8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGnk0IACgkQbQF6ltjm\nwvk8Fg//SHUOTiGeB5MtdrGjzCeClq0DoDoXaR1WStNy6EUl2I+uB3JSbRpPqnkM\nPgc0Ejf6TvrrFWVek1/UjO4Gjdmg5ZWUcCzCciB1/BtTchJYXN4/tn2kBA/gUEOS\ndyla0iD6RnYRDV3Kvvu8L34mY3K+AdkHvtTqgxH2aNSmcW3U/tBcd4MPewao2UNj\nOudc6YBFcCA4XpnbjDGcB2QaXJCIgqx+hb/I400EBOHF+oGGO9zJmZRGszfz/8gG\nFBjdfAlEfAuxSz7+t0/fTk06jZVnxBOmkPGJc/45QCuukZXHrq7AnGSgZnlzdVN7\nFb+lLq8s2YEMctf9NrsBULlWFMjAxcWxkqispnVqLxo430nXNH7lKqZklU+JBQW0\n6jGsXSZZ8yMexTKcNYLwTuL9BSBaxZtGgZh+Pty+RH/gJYaZwMjNpdgXYO3skwvZ\nharDe/Eiy5MkC6lFLEzbxlbylnriV0M+Th+NjUvO7wuDy2qjmlMB4sg09MWjM2sS\n88ayUZi6o25+Z+J4c3En3fz4guRFa06PYVVESqNEouUPAabbM0Imj/gPI3yfdISy\n5Ow6x5EYpJrqD8cFWMrQzPEBf3HVlTD/HO4hNWYzOhqPZ22tnz084+sIOXkHLxaY\nrBv/sSHJtffDvdh9PfnfA+lffwjN7q24Lpt9tqoSdI0Dz0MZado=\n=Rk0F\n-----END PGP SIGNATURE-----", "payload": "tree 31dcd5edb87e511d641f92d498d3310ba1fd4ee3\nparent 87cd1ce6c149c002e158e29cee9ff863073c5412\nauthor Deadbeef <ent3rm4n@gmail.com> 1638372162 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638372162 +0800\n\nCache with consistent env and bound\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b07cec05c614c34d211cff23f738f03d3026ae8", "html_url": "https://github.com/rust-lang/rust/commit/6b07cec05c614c34d211cff23f738f03d3026ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b07cec05c614c34d211cff23f738f03d3026ae8/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cd1ce6c149c002e158e29cee9ff863073c5412", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cd1ce6c149c002e158e29cee9ff863073c5412", "html_url": "https://github.com/rust-lang/rust/commit/87cd1ce6c149c002e158e29cee9ff863073c5412"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "cd60519ac3424b64efa4c5c317fcaa41a79da7c4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b07cec05c614c34d211cff23f738f03d3026ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b07cec05c614c34d211cff23f738f03d3026ae8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6b07cec05c614c34d211cff23f738f03d3026ae8", "patch": "@@ -230,6 +230,19 @@ pub enum BoundConstness {\n     ConstIfConst,\n }\n \n+impl BoundConstness {\n+    /// Reduce `self` and `constness` to two possible combined states instead of four.\n+    pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {\n+        match (constness, self) {\n+            (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,\n+            (_, this) => {\n+                *this = BoundConstness::NotConst;\n+                hir::Constness::NotConst\n+            }\n+        }\n+    }\n+}\n+\n impl fmt::Display for BoundConstness {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n@@ -1326,6 +1339,11 @@ impl<'tcx> ParamEnv<'tcx> {\n         self\n     }\n \n+    pub fn with_constness(mut self, constness: hir::Constness) -> Self {\n+        self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });\n+        self\n+    }\n+\n     pub fn with_const(mut self) -> Self {\n         self.packed.set_tag(ParamTag { constness: hir::Constness::Const, ..self.packed.tag() });\n         self"}, {"sha": "dd62411cb8e504b81753edbfa7af8b8282f4d119", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b07cec05c614c34d211cff23f738f03d3026ae8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b07cec05c614c34d211cff23f738f03d3026ae8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6b07cec05c614c34d211cff23f738f03d3026ae8", "patch": "@@ -675,11 +675,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         let stack = self.push_stack(previous_stack, &obligation);\n-        let fresh_trait_pred = stack.fresh_trait_pred;\n+        let mut fresh_trait_pred = stack.fresh_trait_pred;\n+        let mut param_env = obligation.param_env;\n+\n+        fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {\n+            param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n+            pred\n+        });\n \n         debug!(?fresh_trait_pred);\n \n-        if let Some(result) = self.check_evaluation_cache(obligation.param_env, fresh_trait_pred) {\n+        if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {\n             debug!(?result, \"CACHE HIT\");\n             return Ok(result);\n         }\n@@ -709,11 +715,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let reached_depth = stack.reached_depth.get();\n         if reached_depth >= stack.depth {\n             debug!(?result, \"CACHE MISS\");\n-            self.insert_evaluation_cache(obligation.param_env, fresh_trait_pred, dep_node, result);\n+            self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);\n \n             stack.cache().on_completion(stack.dfn, |fresh_trait_pred, provisional_result| {\n                 self.insert_evaluation_cache(\n-                    obligation.param_env,\n+                    param_env,\n                     fresh_trait_pred,\n                     dep_node,\n                     provisional_result.max(result),\n@@ -1200,7 +1206,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn check_candidate_cache(\n         &mut self,\n-        param_env: ty::ParamEnv<'tcx>,\n+        mut param_env: ty::ParamEnv<'tcx>,\n         cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {\n         // Neither the global nor local cache is aware of intercrate\n@@ -1211,7 +1217,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return None;\n         }\n         let tcx = self.tcx();\n-        let pred = cache_fresh_trait_pred.skip_binder();\n+        let mut pred = cache_fresh_trait_pred.skip_binder();\n+        param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n+\n         if self.can_use_global_caches(param_env) {\n             if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {\n                 return Some(res);\n@@ -1255,13 +1263,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn insert_candidate_cache(\n         &mut self,\n-        param_env: ty::ParamEnv<'tcx>,\n+        mut param_env: ty::ParamEnv<'tcx>,\n         cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n         dep_node: DepNodeIndex,\n         candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n     ) {\n         let tcx = self.tcx();\n-        let pred = cache_fresh_trait_pred.skip_binder();\n+        let mut pred = cache_fresh_trait_pred.skip_binder();\n+\n+        param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n \n         if !self.can_cache_candidate(&candidate) {\n             debug!(?pred, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");"}]}