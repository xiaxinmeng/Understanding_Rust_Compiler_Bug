{"sha": "f9712b075eae4929eb813459994b58d00b143bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzEyYjA3NWVhZTQ5MjllYjgxMzQ1OTk5NGI1OGQwMGIxNDNiYmU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-09-13T22:32:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-13T22:32:03Z"}, "message": "Merge pull request #1151 from sinkuu/issue1021\n\nFix #1021: Handle `..` in tuple / tuple struct patterns", "tree": {"sha": "b4c17aa98bf3ae183b134713e943fc1625b79c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4c17aa98bf3ae183b134713e943fc1625b79c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9712b075eae4929eb813459994b58d00b143bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9712b075eae4929eb813459994b58d00b143bbe", "html_url": "https://github.com/rust-lang/rust/commit/f9712b075eae4929eb813459994b58d00b143bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9712b075eae4929eb813459994b58d00b143bbe/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d7073bf51937508ba38c3745622ef31473c0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d7073bf51937508ba38c3745622ef31473c0e5", "html_url": "https://github.com/rust-lang/rust/commit/a5d7073bf51937508ba38c3745622ef31473c0e5"}, {"sha": "bf078566d7aaf62f3dc9f9f6cc2a95c377e00a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf078566d7aaf62f3dc9f9f6cc2a95c377e00a37", "html_url": "https://github.com/rust-lang/rust/commit/bf078566d7aaf62f3dc9f9f6cc2a95c377e00a37"}], "stats": {"total": 181, "additions": 141, "deletions": 40}, "files": [{"sha": "b52eeb9c44577398ba08a97c983258f81e9bc067", "filename": "src/patterns.rs", "status": "modified", "additions": 93, "deletions": 40, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f9712b075eae4929eb813459994b58d00b143bbe/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9712b075eae4929eb813459994b58d00b143bbe/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f9712b075eae4929eb813459994b58d00b143bbe", "patch": "@@ -13,10 +13,14 @@ use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use utils::{wrap_str, format_mutability};\n use lists::{format_item_list, itemize_list};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n+use expr::{rewrite_unary_prefix, rewrite_pair};\n use types::rewrite_path;\n+use super::Spanned;\n+use comment::FindUncommented;\n \n-use syntax::ast::{BindingMode, Pat, PatKind, FieldPat};\n+use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat};\n+use syntax::ptr;\n+use syntax::codemap::{self, BytePos, Span};\n \n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n@@ -60,49 +64,19 @@ impl Rewrite for Pat {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, width, offset)\n             }\n-            // FIXME(#1021): Handle `..` in tuple / tuple struct patterns (RFC 1492)\n             PatKind::Tuple(ref items, dotdot_pos) => {\n-                if dotdot_pos.is_some() {\n-                    return None;\n-                }\n-                rewrite_tuple(context,\n-                              items.iter().map(|x| &**x),\n-                              self.span,\n-                              width,\n-                              offset)\n+                rewrite_tuple_pat(items, dotdot_pos, None, self.span, context, width, offset)\n             }\n             PatKind::Path(ref path) => rewrite_path(context, true, None, path, width, offset),\n             PatKind::TupleStruct(ref path, ref pat_vec, dotdot_pos) => {\n                 let path_str = try_opt!(rewrite_path(context, true, None, path, width, offset));\n-\n-                // FIXME(#1021): Handle `..` in tuple / tuple struct patterns (RFC 1492)\n-                match dotdot_pos {\n-                    Some(_) => Some(format!(\"{}(..)\", path_str)),\n-                    None => {\n-                        if pat_vec.is_empty() {\n-                            Some(path_str)\n-                        } else {\n-                            // 2 = \"()\".len()\n-                            let width = try_opt!(width.checked_sub(path_str.len() + 2));\n-                            // 1 = \"(\".len()\n-                            let offset = offset + path_str.len() + 1;\n-                            let items = itemize_list(context.codemap,\n-                                                     pat_vec.iter(),\n-                                                     \")\",\n-                                                     |item| item.span.lo,\n-                                                     |item| item.span.hi,\n-                                                     |item| item.rewrite(context, width, offset),\n-                                                     context.codemap.span_after(self.span, \"(\"),\n-                                                     self.span.hi);\n-                            Some(format!(\"{}({})\",\n-                                         path_str,\n-                                         try_opt!(format_item_list(items,\n-                                                                   width,\n-                                                                   offset,\n-                                                                   context.config))))\n-                        }\n-                    }\n-                }\n+                rewrite_tuple_pat(pat_vec,\n+                                  dotdot_pos,\n+                                  Some(path_str),\n+                                  self.span,\n+                                  context,\n+                                  width,\n+                                  offset)\n             }\n             PatKind::Lit(ref expr) => expr.rewrite(context, width, offset),\n             PatKind::Vec(ref prefix, ref slice_pat, ref suffix) => {\n@@ -190,3 +164,82 @@ impl Rewrite for FieldPat {\n         }\n     }\n }\n+\n+\n+enum TuplePatField<'a> {\n+    Pat(&'a ptr::P<ast::Pat>),\n+    Dotdot(Span),\n+}\n+\n+impl<'a> Rewrite for TuplePatField<'a> {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n+        match *self {\n+            TuplePatField::Pat(ref p) => p.rewrite(context, width, offset),\n+            TuplePatField::Dotdot(_) => Some(\"..\".to_string()),\n+        }\n+    }\n+}\n+\n+impl<'a> Spanned for TuplePatField<'a> {\n+    fn span(&self) -> Span {\n+        match *self {\n+            TuplePatField::Pat(ref p) => p.span(),\n+            TuplePatField::Dotdot(span) => span,\n+        }\n+    }\n+}\n+\n+fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n+                     dotdot_pos: Option<usize>,\n+                     path_str: Option<String>,\n+                     span: Span,\n+                     context: &RewriteContext,\n+                     width: usize,\n+                     offset: Indent)\n+                     -> Option<String> {\n+    let mut pat_vec: Vec<_> = pats.into_iter().map(|x| TuplePatField::Pat(x)).collect();\n+\n+    if let Some(pos) = dotdot_pos {\n+        let snippet = context.snippet(span);\n+        let lo = span.lo + BytePos(snippet.find_uncommented(\"..\").unwrap() as u32);\n+        let span = Span {\n+            lo: lo,\n+            // 2 == \"..\".len()\n+            hi: lo + BytePos(2),\n+            expn_id: codemap::NO_EXPANSION,\n+        };\n+        let dotdot = TuplePatField::Dotdot(span);\n+        pat_vec.insert(pos, dotdot);\n+    }\n+\n+    if pat_vec.is_empty() {\n+        path_str\n+    } else {\n+        // add comma if `(x,)`\n+        let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none();\n+\n+        let path_len = path_str.as_ref().map(|p| p.len()).unwrap_or(0);\n+        // 2 = \"()\".len(), 3 = \"(,)\".len()\n+        let width = try_opt!(width.checked_sub(path_len + if add_comma { 3 } else { 2 }));\n+        // 1 = \"(\".len()\n+        let offset = offset + path_len + 1;\n+        let items = itemize_list(context.codemap,\n+                                 pat_vec.iter(),\n+                                 if add_comma { \",)\" } else { \")\" },\n+                                 |item| item.span().lo,\n+                                 |item| item.span().hi,\n+                                 |item| item.rewrite(context, width, offset),\n+                                 context.codemap.span_after(span, \"(\"),\n+                                 span.hi - BytePos(1));\n+\n+        let list = try_opt!(format_item_list(items, width, offset, context.config));\n+\n+        match path_str {\n+            Some(path_str) => Some(format!(\"{}({})\", path_str, list)),\n+            None => {\n+                let comma = if add_comma { \",\" } else { \"\" };\n+                Some(format!(\"({}{})\", list, comma))\n+            }\n+        }\n+    }\n+}"}, {"sha": "2c1b4716f5798ca71192a7eec1607a0fd2398f40", "filename": "tests/source/issue-1021.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f9712b075eae4929eb813459994b58d00b143bbe/tests%2Fsource%2Fissue-1021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9712b075eae4929eb813459994b58d00b143bbe/tests%2Fsource%2Fissue-1021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1021.rs?ref=f9712b075eae4929eb813459994b58d00b143bbe", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    match x {\n+        S(true , .., true ) => (),\n+        S(true , .. ) => (),\n+        S(.., true ) => (),\n+        S( .. ) => (),\n+        S(_) => (),\n+        S(/* .. */ .. ) => (),\n+        S(/* .. */ .., true ) => (),\n+    }\n+\n+    match y {\n+        (true , .., true ) => (),\n+        (true , .. ) => (),\n+        (.., true ) => (),\n+        ( .. ) => (),\n+        (_,) => (),\n+        (/* .. */ .. ) => (),\n+        (/* .. */ .., true ) => (),\n+    }\n+}"}, {"sha": "e4379855642740e9bb518f22eb3bd851ffa57afa", "filename": "tests/target/issue-1021.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9712b075eae4929eb813459994b58d00b143bbe/tests%2Ftarget%2Fissue-1021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9712b075eae4929eb813459994b58d00b143bbe/tests%2Ftarget%2Fissue-1021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1021.rs?ref=f9712b075eae4929eb813459994b58d00b143bbe", "patch": "@@ -0,0 +1,27 @@\n+fn main() {\n+    match x {\n+        S(true, .., true) => (),\n+        S(true, ..) => (),\n+        S(.., true) => (),\n+        S(..) => (),\n+        S(_) => (),\n+        S(// ..\n+          ..) => (),\n+        S(// ..\n+          ..,\n+          true) => (),\n+    }\n+\n+    match y {\n+        (true, .., true) => (),\n+        (true, ..) => (),\n+        (.., true) => (),\n+        (..) => (),\n+        (_,) => (),\n+        (// ..\n+         ..) => (),\n+        (// ..\n+         ..,\n+         true) => (),\n+    }\n+}"}]}