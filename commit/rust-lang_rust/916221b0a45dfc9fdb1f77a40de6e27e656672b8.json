{"sha": "916221b0a45dfc9fdb1f77a40de6e27e656672b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjIyMWIwYTQ1ZGZjOWZkYjFmNzdhNDBkZTZlMjdlNjU2NjcyYjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-06T09:26:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-06T09:26:27Z"}, "message": "Merge branch 'master' into patch-1", "tree": {"sha": "9ca5fee7123f8224ec3786e37eab42cef7a90e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca5fee7123f8224ec3786e37eab42cef7a90e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/916221b0a45dfc9fdb1f77a40de6e27e656672b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcqHDDCRBK7hj4Ov3rIwAAdHIIAF7FBaK+cF78gDp+GhtPq+dP\n82I1IDus3q1UQMEmldQiKRBKl2rkuqy+fLZSVldBeNzLpESe7QQGwn9xuVc2KpO5\n59/qm9rYBWcgO/xQ0eEwzOq7KRpV9sXHLeqIEJHmrV9ClzNBuCqFLMX2gLu1PCpB\nTf5oCYf3LLgw4T1rhEv+8OELzfOLuEFDrc/FyiWkDGOK8s4tu1+LRlGd5k2gEzCO\nFGnugKhAsjYNUWWm3b4R/YPdu0V0RLS9i2Ozg+sc7ttO3wd6sqVNRlLnhhXWGv+j\nsmBpxrSheJwBrspD5IunUMduGhj0/msywVegq76Lb/1vR2pbRS1Z/D/HtL2vtQk=\n=MFCb\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ca5fee7123f8224ec3786e37eab42cef7a90e3c\nparent 7d6c8ad24b490c633b608849af504dcb3a71fa5e\nparent 2a03db9ce4f64ef850919dd68566569c299d8df0\nauthor Ralf Jung <post@ralfj.de> 1554542787 +0100\ncommitter GitHub <noreply@github.com> 1554542787 +0100\n\nMerge branch 'master' into patch-1"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/916221b0a45dfc9fdb1f77a40de6e27e656672b8", "html_url": "https://github.com/rust-lang/rust/commit/916221b0a45dfc9fdb1f77a40de6e27e656672b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/916221b0a45dfc9fdb1f77a40de6e27e656672b8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6c8ad24b490c633b608849af504dcb3a71fa5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6c8ad24b490c633b608849af504dcb3a71fa5e", "html_url": "https://github.com/rust-lang/rust/commit/7d6c8ad24b490c633b608849af504dcb3a71fa5e"}, {"sha": "2a03db9ce4f64ef850919dd68566569c299d8df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a03db9ce4f64ef850919dd68566569c299d8df0", "html_url": "https://github.com/rust-lang/rust/commit/2a03db9ce4f64ef850919dd68566569c299d8df0"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "e97380cb932fe8ad6b035e6ef0f86e812363be34", "filename": ".appveyor.yml", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -3,28 +3,31 @@ environment:\n         PROJECT_NAME: miri\n     matrix:\n         - TARGET: x86_64-pc-windows-msvc\n-          MSYS2_BITS: 64\n         - TARGET: i686-pc-windows-msvc\n-          MSYS2_BITS: 32\n \n # branches to build\n branches:\n   # whitelist\n   only:\n     - master\n \n+cache:\n+    - '%USERPROFILE%\\.cargo'\n+    - '%USERPROFILE%\\.rustup'\n+\n install:\n-    # Install Rust.\n-    - set PATH=C:\\Program Files\\Git\\mingw64\\bin;C:\\msys64\\mingw%MSYS2_BITS%\\bin;%PATH%\n-    - set /p RUST_TOOLCHAIN=<rust-version\n+    # Install Rust\n     - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n-    - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_TOOLCHAIN%\n+    - rustup-init.exe -y --default-host %TARGET% --default-toolchain stable\n     - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n+    # Install \"master\" toolchain\n+    - cargo install rustup-toolchain-install-master\n+    - set /p RUSTC_HASH=<rust-version\n+    - rustup-toolchain-install-master -f -n master %RUSTC_HASH% -c cargo -c rust-src\n+    - rustup default master\n     - rustc --version\n \n-build: false\n-\n-test_script:\n+build_script:\n     - set RUST_TEST_NOCAPTURE=1\n     - set RUST_BACKTRACE=1\n     # Build and install miri\n@@ -33,11 +36,18 @@ test_script:\n     # Get ourselves a MIR-full libstd, and use it henceforth\n     - cargo miri setup\n     - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\miri\\miri\\cache\\HOST\n+\n+test_script:\n     # Test miri\n     - cargo test --release --all-features\n     # Test cargo integration\n     - cd test-cargo-miri\n-    - python3 run-test.py\n+    - '\"C:\\msys64\\mingw64\\bin\\python3.exe\" run-test.py'\n+\n+after_test:\n+    # Don't cache \"master\" toolchain, it's a waste\n+    - rustup default stable\n+    - rustup toolchain uninstall master\n \n notifications:\n     - provider: Email"}, {"sha": "883404fb4a0876f556ef78db96eeccfedbd07dc0", "filename": ".travis.yml", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -4,7 +4,8 @@ cache:\n   # we cannot reuse anyway when the nightly changes (and it grows quite large\n   # over time).\n   directories:\n-    - /home/travis/.cargo\n+    - $HOME/.cargo\n+    - $HOME/.rustup\n \n os:\n - linux\n@@ -17,18 +18,27 @@ before_script:\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then\n-    RUST_TOOLCHAIN=nightly\n+    RUSTC_HASH=$(git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}')\n   else\n-    RUST_TOOLCHAIN=$(cat rust-version)\n+    RUSTC_HASH=$(cat rust-version)\n   fi\n-# install Rust\n-- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n+# Install Rust (\"stable\" toolchain for better caching, it is just used to build rustup-toolchain-install-master)\n+- curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain stable\n - export PATH=$HOME/.cargo/bin:$PATH\n+# Install \"master\" toolchain\n+- cargo install rustup-toolchain-install-master || echo \"rustup-toolchain-install-master already installed\"\n+- travis_retry rustup-toolchain-install-master -f -n master $RUSTC_HASH -c cargo -c rust-src\n+- rustup default master\n - rustc --version\n \n script:\n - ./travis.sh\n \n+before_cache:\n+# Don't cache \"master\" toolchain, it's a waste\n+- rustup default stable\n+- rustup toolchain uninstall master\n+\n notifications:\n   email:\n     on_success: never"}, {"sha": "75ad2b81bf4b55188de52d33062a46d1f36088e3", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -122,13 +122,18 @@ other projects:\n \n ```sh\n rustup component remove miri # avoid having Miri installed twice\n-cargo +nightly install --path \"$DIR\" --force # or the nightly in `rust-version`\n+cargo +nightly install --path \"$DIR\" --force\n cargo +nightly miri setup\n ```\n \n (We are giving `+nightly` explicitly here all the time because it is important\n that all of these commands get executed with the same toolchain.)\n \n+In case this fails, your nightly might be incompatible with Miri master.  The\n+`rust-version` file contains the commit hash of rustc that Miri is currently\n+tested against; you can use that to find a nightly that works or you might have\n+to wait for the next nightly to get released.\n+\n If you want to use a different libstd (not the one that comes with the\n nightly), you can do that by running\n "}, {"sha": "a2b3daad97ec895840a9d9508b2786ea59489f3a", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -1 +1 @@\n-nightly-2019-03-29\n+f717b58dd70829f105960a071c7992b440720482"}, {"sha": "038f5ed8a047588dca0f12c262cd820a356bc364", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -270,7 +270,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 let mut args = this.frame().mir.args_iter();\n \n                 let arg_local = args.next().ok_or_else(||\n-                    EvalErrorKind::AbiViolation(\n+                    InterpError::AbiViolation(\n                         \"Argument to __rust_maybe_catch_panic does not take enough arguments.\"\n                             .to_owned(),\n                     ),\n@@ -529,7 +529,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // This is `libc::pthread_key_t`.\n                 let key_type = args[0].layout.ty\n                     .builtin_deref(true)\n-                    .ok_or_else(|| EvalErrorKind::AbiViolation(\"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\".to_owned()))?\n+                    .ok_or_else(|| InterpError::AbiViolation(\"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\".to_owned()))?\n                     .ty;\n                 let key_layout = this.layout_of(key_type)?;\n "}, {"sha": "8a4cccc743e6f86f37d178898b850a8b612c1318", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -39,7 +39,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             })\n             .ok_or_else(|| {\n                 let path = path.iter().map(|&s| s.to_owned()).collect();\n-                EvalErrorKind::PathNotFound(path).into()\n+                InterpError::PathNotFound(path).into()\n             })\n     }\n "}, {"sha": "a30b11aeb27de6d37b383baa04f425ddd5e1400c", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         let pointee_size = self.layout_of(pointee_ty)?.size.bytes() as i64;\n         let offset = offset\n             .checked_mul(pointee_size)\n-            .ok_or_else(|| EvalErrorKind::Overflow(mir::BinOp::Mul))?;\n+            .ok_or_else(|| InterpError::Overflow(mir::BinOp::Mul))?;\n         // Now let's see what kind of pointer this is.\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds of a *live* allocation."}, {"sha": "bea6aaf9cf892f54623c434402a63d83673c7b85", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::{Mutability, MutMutable, MutImmutable};\n use rustc::mir::RetagKind;\n \n use crate::{\n-    EvalResult, EvalErrorKind, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n+    EvalResult, InterpError, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n     MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n     Pointer, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n@@ -380,7 +380,7 @@ impl<'tcx> Stacks {\n             ptr.tag, kind, ptr, size.bytes());\n         let stacks = self.stacks.borrow();\n         for stack in stacks.iter(ptr.offset, size) {\n-            stack.deref(ptr.tag, kind).map_err(EvalErrorKind::MachineError)?;\n+            stack.deref(ptr.tag, kind).map_err(InterpError::MachineError)?;\n         }\n         Ok(())\n     }\n@@ -435,7 +435,7 @@ impl<'tcx> Stacks {\n         let mut stacks = self.stacks.borrow_mut();\n         for stack in stacks.iter_mut(ptr.offset, size) {\n             // Access source `ptr`, create new ref.\n-            let ptr_idx = stack.deref(ptr.tag, new_kind).map_err(EvalErrorKind::MachineError)?;\n+            let ptr_idx = stack.deref(ptr.tag, new_kind).map_err(InterpError::MachineError)?;\n             // If we can deref the new tag already, and if that tag lives higher on\n             // the stack than the one we come from, just use that.\n             // That is, we check if `new_bor` *already* is \"derived from\" `ptr.tag`."}, {"sha": "992e4fd05619045c4f55a52f17898580d6c8e528", "filename": "src/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916221b0a45dfc9fdb1f77a40de6e27e656672b8/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=916221b0a45dfc9fdb1f77a40de6e27e656672b8", "patch": "@@ -4,7 +4,7 @@ use rustc_target::abi::LayoutOf;\n use rustc::{ty, ty::layout::HasDataLayout, mir};\n \n use crate::{\n-    EvalResult, EvalErrorKind, StackPopCleanup,\n+    EvalResult, InterpError, StackPopCleanup,\n     MPlaceTy, Scalar, Borrow,\n };\n \n@@ -149,7 +149,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 StackPopCleanup::None { cleanup: true },\n             )?;\n             let arg_local = this.frame().mir.args_iter().next().ok_or_else(\n-                || EvalErrorKind::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n+                || InterpError::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n             )?;\n             let dest = this.eval_place(&mir::Place::Base(mir::PlaceBase::Local(arg_local)))?;\n             this.write_scalar(ptr, dest)?;"}]}