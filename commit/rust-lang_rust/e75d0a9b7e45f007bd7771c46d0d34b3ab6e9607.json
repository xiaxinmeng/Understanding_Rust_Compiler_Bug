{"sha": "e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NWQwYTliN2U0NWYwMDdiZDc3NzFjNDZkMGQzNGIzYWI2ZTk2MDc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T15:53:20Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-01-21T23:48:47Z"}, "message": "[std::vec] Rename .remove_opt() to .remove(), drop the old .remove() behavior", "tree": {"sha": "f684b92eea7e31c9668bc3418a62ea9391b356cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f684b92eea7e31c9668bc3418a62ea9391b356cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "html_url": "https://github.com/rust-lang/rust/commit/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e65731c094191298254c611ede4370b6e5455a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e65731c094191298254c611ede4370b6e5455a", "html_url": "https://github.com/rust-lang/rust/commit/b5e65731c094191298254c611ede4370b6e5455a"}], "stats": {"total": 66, "additions": 16, "deletions": 50}, "files": [{"sha": "62b28074a27491f11839eccdaa47dec207517420", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "patch": "@@ -1164,7 +1164,7 @@ mod test_treemap {\n \n             30.times(|| {\n                 let r = rng.gen_range(0, ctrl.len());\n-                let (key, _) = ctrl.remove(r);\n+                let (key, _) = ctrl.remove(r).unwrap();\n                 assert!(map.remove(&key));\n                 check_structure(&map);\n                 check_equal(ctrl, &map);"}, {"sha": "ef96f55451558759710a9ba6d89bef73cb0d7827", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "patch": "@@ -84,7 +84,7 @@ impl BasicLoop {\n             }\n             RemoveRemote(i) => {\n                 match self.remotes.iter().position(|&(id, _)| id == i) {\n-                    Some(i) => { self.remotes.remove(i); }\n+                    Some(i) => { self.remotes.remove(i).unwrap(); }\n                     None => unreachable!()\n                 }\n             }"}, {"sha": "e99e9ef09403a1e289ef9c1fe6ce940fc393adb1", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "patch": "@@ -157,7 +157,7 @@ impl<T: Send> BufferPool<T> {\n         unsafe {\n             self.pool.with(|pool| {\n                 match pool.iter().position(|x| x.size() >= (1 << bits)) {\n-                    Some(i) => pool.remove(i),\n+                    Some(i) => pool.remove(i).unwrap(),\n                     None => ~Buffer::new(bits)\n                 }\n             })"}, {"sha": "27e949a56408ab903a8db8ecae9a970d432ba5d6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 13, "deletions": 47, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=e75d0a9b7e45f007bd7771c46d0d34b3ab6e9607", "patch": "@@ -1399,18 +1399,14 @@ pub trait OwnedVector<T> {\n     /// # Example\n     /// ```rust\n     /// let mut v = ~[1, 2, 3];\n-    /// assert_eq!(v.remove_opt(1), Some(2));\n+    /// assert_eq!(v.remove(1), Some(2));\n     /// assert_eq!(v, ~[1, 3]);\n     ///\n-    /// assert_eq!(v.remove_opt(4), None);\n+    /// assert_eq!(v.remove(4), None);\n     /// // v is unchanged:\n     /// assert_eq!(v, ~[1, 3]);\n     /// ```\n-    fn remove_opt(&mut self, i: uint) -> Option<T>;\n-\n-    /// Remove and return the element at position i within v, shifting\n-    /// all elements after position i one position to the left.\n-    fn remove(&mut self, i: uint) -> T;\n+    fn remove(&mut self, i: uint) -> Option<T>;\n \n     /**\n      * Remove an element from anywhere in the vector and return it, replacing it\n@@ -1577,7 +1573,7 @@ impl<T> OwnedVector<T> for ~[T] {\n \n     #[inline]\n     fn shift(&mut self) -> Option<T> {\n-        self.remove_opt(0)\n+        self.remove(0)\n     }\n \n     #[inline]\n@@ -1604,15 +1600,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    #[inline]\n-    fn remove(&mut self, i: uint) -> T {\n-        match self.remove_opt(i) {\n-            Some(t) => t,\n-            None => fail!(\"remove: the len is {} but the index is {}\", self.len(), i)\n-        }\n-    }\n-\n-    fn remove_opt(&mut self, i: uint) -> Option<T> {\n+    fn remove(&mut self, i: uint) -> Option<T> {\n         let len = self.len();\n         if i < len {\n             unsafe { // infallible\n@@ -3617,48 +3605,26 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_remove_opt() {\n+    fn test_remove() {\n         let mut a = ~[1,2,3,4];\n \n-        assert_eq!(a.remove_opt(2), Some(3));\n+        assert_eq!(a.remove(2), Some(3));\n         assert_eq!(a, ~[1,2,4]);\n \n-        assert_eq!(a.remove_opt(2), Some(4));\n+        assert_eq!(a.remove(2), Some(4));\n         assert_eq!(a, ~[1,2]);\n \n-        assert_eq!(a.remove_opt(2), None);\n+        assert_eq!(a.remove(2), None);\n         assert_eq!(a, ~[1,2]);\n \n-        assert_eq!(a.remove_opt(0), Some(1));\n+        assert_eq!(a.remove(0), Some(1));\n         assert_eq!(a, ~[2]);\n \n-        assert_eq!(a.remove_opt(0), Some(2));\n+        assert_eq!(a.remove(0), Some(2));\n         assert_eq!(a, ~[]);\n \n-        assert_eq!(a.remove_opt(0), None);\n-        assert_eq!(a.remove_opt(10), None);\n-    }\n-\n-    #[test]\n-    fn test_remove() {\n-        let mut a = ~[1, 2, 3, 4];\n-        a.remove(2);\n-        assert_eq!(a, ~[1, 2, 4]);\n-\n-        let mut a = ~[1, 2, 3];\n-        a.remove(0);\n-        assert_eq!(a, ~[2, 3]);\n-\n-        let mut a = ~[1];\n-        a.remove(0);\n-        assert_eq!(a, ~[]);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_remove_oob() {\n-        let mut a = ~[1, 2, 3];\n-        a.remove(3);\n+        assert_eq!(a.remove(0), None);\n+        assert_eq!(a.remove(10), None);\n     }\n \n     #[test]"}]}