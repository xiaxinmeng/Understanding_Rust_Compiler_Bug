{"sha": "1ce06d09328c17a59cb8b02d12811d694b89662e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTA2ZDA5MzI4YzE3YTU5Y2I4YjAyZDEyODExZDY5NGI4OTY2MmU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-11T15:06:56Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-11T15:12:28Z"}, "message": "Remove redundant operation in derive[PartialEq]", "tree": {"sha": "526eab39ee3b792d53a86b71fc32765210d41f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526eab39ee3b792d53a86b71fc32765210d41f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce06d09328c17a59cb8b02d12811d694b89662e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce06d09328c17a59cb8b02d12811d694b89662e", "html_url": "https://github.com/rust-lang/rust/commit/1ce06d09328c17a59cb8b02d12811d694b89662e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce06d09328c17a59cb8b02d12811d694b89662e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3238e0d098cfd798a8828ec053cf37836c6c927d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3238e0d098cfd798a8828ec053cf37836c6c927d", "html_url": "https://github.com/rust-lang/rust/commit/3238e0d098cfd798a8828ec053cf37836c6c927d"}], "stats": {"total": 86, "additions": 58, "deletions": 28}, "files": [{"sha": "f62140aa65fac5d6cf72b5178cf9c533fca5baf0", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 58, "deletions": 28, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1ce06d09328c17a59cb8b02d12811d694b89662e/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce06d09328c17a59cb8b02d12811d694b89662e/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=1ce06d09328c17a59cb8b02d12811d694b89662e", "patch": "@@ -27,40 +27,70 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n-        cs_fold(true, // use foldl\n-                |cx, span, subexpr, self_f, other_fs| {\n-            let other_f = match (other_fs.len(), other_fs.get(0)) {\n-                (1, Some(o_f)) => o_f,\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n-            };\n+        cs_fold1(true, // use foldl\n+            |cx, span, subexpr, self_f, other_fs| {\n+                let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                    (1, Some(o_f)) => o_f,\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n+                };\n \n-            let eq = cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone());\n+                let eq = cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone());\n \n-            cx.expr_binary(span, BinOpKind::And, subexpr, eq)\n-        },\n-                cx.expr_bool(span, true),\n-                Box::new(|cx, span, _, _| cx.expr_bool(span, false)),\n-                cx,\n-                span,\n-                substr)\n+                cx.expr_binary(span, BinOpKind::And, subexpr, eq)\n+            },\n+            |cx, args| {\n+                match args {\n+                    Some((span, self_f, other_fs)) => {\n+                        // Special-case the base case to generate cleaner code.\n+                        let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                            (1, Some(o_f)) => o_f,\n+                            _ => {\n+                                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n+                            }\n+                        };\n+\n+                        cx.expr_binary(span, BinOpKind::Eq, self_f, other_f.clone())\n+                    }\n+                    None => cx.expr_bool(span, true),\n+                }\n+            },\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, false)),\n+            cx,\n+            span,\n+            substr)\n     }\n     fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n-        cs_fold(true, // use foldl\n-                |cx, span, subexpr, self_f, other_fs| {\n-            let other_f = match (other_fs.len(), other_fs.get(0)) {\n-                (1, Some(o_f)) => o_f,\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n-            };\n+        cs_fold1(true, // use foldl\n+            |cx, span, subexpr, self_f, other_fs| {\n+                let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                    (1, Some(o_f)) => o_f,\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n+                };\n+\n+                let eq = cx.expr_binary(span, BinOpKind::Ne, self_f, other_f.clone());\n \n-            let eq = cx.expr_binary(span, BinOpKind::Ne, self_f, other_f.clone());\n+                cx.expr_binary(span, BinOpKind::Or, subexpr, eq)\n+            },\n+            |cx, args| {\n+                match args {\n+                    Some((span, self_f, other_fs)) => {\n+                        // Special-case the base case to generate cleaner code.\n+                        let other_f = match (other_fs.len(), other_fs.get(0)) {\n+                            (1, Some(o_f)) => o_f,\n+                            _ => {\n+                                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n+                            }\n+                        };\n \n-            cx.expr_binary(span, BinOpKind::Or, subexpr, eq)\n-        },\n-                cx.expr_bool(span, false),\n-                Box::new(|cx, span, _, _| cx.expr_bool(span, true)),\n-                cx,\n-                span,\n-                substr)\n+                        cx.expr_binary(span, BinOpKind::Ne, self_f, other_f.clone())\n+                    }\n+                    None => cx.expr_bool(span, false),\n+                }\n+            },\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, true)),\n+            cx,\n+            span,\n+            substr)\n     }\n \n     macro_rules! md {"}]}