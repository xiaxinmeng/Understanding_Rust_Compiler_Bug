{"sha": "c7e9029b8064a48a983040937bae056617729980", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTkwMjliODA2NGE0OGE5ODMwNDA5MzdiYWUwNTY2MTc3Mjk5ODA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-18T14:46:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-18T14:46:19Z"}, "message": "Rollup merge of #78361 - DevJPM:master, r=workingjubilee\n\nUpdated the list of white-listed target features for x86\n\nThis PR both adds in-source documentation on what to look out for when adding a new (X86) feature set and [adds all that are detectable at run-time in Rust stable as of 1.27.0](https://github.com/rust-lang/stdarch/blob/master/crates/std_detect/src/detect/arch/x86.rs).\n\nThis should only enable the use of the corresponding LLVM intrinsics.\nActual intrinsics need to be added separately in rust-lang/stdarch.\n\nIt also re-orders the run-time-detect test statements to be more consistent\nwith the actual list of intrinsics whitelisted and removes underscores not present\nin the actual names (which might be mistaken as being part of the name)\n\nThe reference for LLVM's feature names used is [this file](https://github.com/llvm/llvm-project/blob/master/llvm/include/llvm/Support/X86TargetParser.def).\n\nThis PR was motivated as the compiler end's part for allowing #67329 to be adressed over on rust-lang/stdarch", "tree": {"sha": "a246262374abf0ce41c53b6d0969929c0a9f6a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a246262374abf0ce41c53b6d0969929c0a9f6a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e9029b8064a48a983040937bae056617729980", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftTO8CRBK7hj4Ov3rIwAAdHIIAJSJ4f+fVzI5YQfyvWQhilNB\nXvcRfc8fXtmsIWCle6sZEfrxSI7IIRPY65DmComANvHqmsvsVXVyxS6xCGkfBAxw\nE+2S8LHZYeAcXThNMsMKZMUdI+P+y78ujCn2aHoJC9WWgVlZCYwdAltubuIXU5qC\nlW6vc7G4o7c/EmkZwe3meDL/evwd2qPhnugyltJA+Mfe7IDwZZtb9WPL8LOF9/h2\n/QpPpRKJ8GLK8PcPlWPBaz02sPGvoWN32/qWdzTjkslmyit54CK0T3vWNlggegZO\n7GN5K/sXxlrgSg4pBaHQ/eMCYF9XnHVRNbOezvtIFwx6LbR1puGvvoYWNy+t5d0=\n=NlPt\n-----END PGP SIGNATURE-----\n", "payload": "tree a246262374abf0ce41c53b6d0969929c0a9f6a5a\nparent 7d747db0d5dd8f08f2efb073e2e77a34553465a7\nparent 72b83af2ffadbc98fee52481c7168b0b644d73db\nauthor Mara Bos <m-ou.se@m-ou.se> 1605710779 +0100\ncommitter GitHub <noreply@github.com> 1605710779 +0100\n\nRollup merge of #78361 - DevJPM:master, r=workingjubilee\n\nUpdated the list of white-listed target features for x86\n\nThis PR both adds in-source documentation on what to look out for when adding a new (X86) feature set and [adds all that are detectable at run-time in Rust stable as of 1.27.0](https://github.com/rust-lang/stdarch/blob/master/crates/std_detect/src/detect/arch/x86.rs).\n\nThis should only enable the use of the corresponding LLVM intrinsics.\nActual intrinsics need to be added separately in rust-lang/stdarch.\n\nIt also re-orders the run-time-detect test statements to be more consistent\nwith the actual list of intrinsics whitelisted and removes underscores not present\nin the actual names (which might be mistaken as being part of the name)\n\nThe reference for LLVM's feature names used is [this file](https://github.com/llvm/llvm-project/blob/master/llvm/include/llvm/Support/X86TargetParser.def).\n\nThis PR was motivated as the compiler end's part for allowing #67329 to be adressed over on rust-lang/stdarch\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e9029b8064a48a983040937bae056617729980", "html_url": "https://github.com/rust-lang/rust/commit/c7e9029b8064a48a983040937bae056617729980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e9029b8064a48a983040937bae056617729980/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d747db0d5dd8f08f2efb073e2e77a34553465a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d747db0d5dd8f08f2efb073e2e77a34553465a7", "html_url": "https://github.com/rust-lang/rust/commit/7d747db0d5dd8f08f2efb073e2e77a34553465a7"}, {"sha": "72b83af2ffadbc98fee52481c7168b0b644d73db", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b83af2ffadbc98fee52481c7168b0b644d73db", "html_url": "https://github.com/rust-lang/rust/commit/72b83af2ffadbc98fee52481c7168b0b644d73db"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "a3139ce5a345543984b8f89520139fbf6d4a75ff", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7e9029b8064a48a983040937bae056617729980/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e9029b8064a48a983040937bae056617729980/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=c7e9029b8064a48a983040937bae056617729980", "patch": "@@ -129,13 +129,23 @@ pub fn time_trace_profiler_finish(file_name: &str) {\n // WARNING: the features after applying `to_llvm_feature` must be known\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n+// To find a list of LLVM's names, check llvm-project/llvm/include/llvm/Support/*TargetParser.def\n+// where the * matches the architecture's name\n+// Beware to not use the llvm github project for this, but check the git submodule\n+// found in src/llvm-project\n+// Though note that Rust can also be build with an external precompiled version of LLVM\n+// which might lead to failures if the oldest tested / supported LLVM version\n+// doesn't yet support the relevant intrinsics\n pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n         (\"x86\", \"pclmulqdq\") => \"pclmul\",\n         (\"x86\", \"rdrand\") => \"rdrnd\",\n         (\"x86\", \"bmi1\") => \"bmi\",\n         (\"x86\", \"cmpxchg16b\") => \"cx16\",\n+        (\"x86\", \"avx512vaes\") => \"vaes\",\n+        (\"x86\", \"avx512gfni\") => \"gfni\",\n+        (\"x86\", \"avx512vpclmulqdq\") => \"vpclmulqdq\",\n         (\"aarch64\", \"fp\") => \"fp-armv8\",\n         (\"aarch64\", \"fp16\") => \"fullfp16\",\n         (_, s) => s,"}, {"sha": "fd18f42f2dd4feab445a6b3dfb766e3be3bf1dd0", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7e9029b8064a48a983040937bae056617729980/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e9029b8064a48a983040937bae056617729980/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=c7e9029b8064a48a983040937bae056617729980", "patch": "@@ -4,6 +4,11 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n \n+// When adding features to the below lists\n+// check whether they're named already elsewhere in rust\n+// e.g. in stdarch and whether the given name matches LLVM's\n+// if it doesn't, to_llvm_feature in llvm_util in rustc_codegen_llvm needs to be adapted\n+\n const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"aclass\", Some(sym::arm_target_feature)),\n     (\"mclass\", Some(sym::arm_target_feature)),\n@@ -50,15 +55,23 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"aes\", None),\n     (\"avx\", None),\n     (\"avx2\", None),\n+    (\"avx512bf16\", Some(sym::avx512_target_feature)),\n+    (\"avx512bitalg\", Some(sym::avx512_target_feature)),\n     (\"avx512bw\", Some(sym::avx512_target_feature)),\n     (\"avx512cd\", Some(sym::avx512_target_feature)),\n     (\"avx512dq\", Some(sym::avx512_target_feature)),\n     (\"avx512er\", Some(sym::avx512_target_feature)),\n     (\"avx512f\", Some(sym::avx512_target_feature)),\n+    (\"avx512gfni\", Some(sym::avx512_target_feature)),\n     (\"avx512ifma\", Some(sym::avx512_target_feature)),\n     (\"avx512pf\", Some(sym::avx512_target_feature)),\n+    (\"avx512vaes\", Some(sym::avx512_target_feature)),\n     (\"avx512vbmi\", Some(sym::avx512_target_feature)),\n+    (\"avx512vbmi2\", Some(sym::avx512_target_feature)),\n     (\"avx512vl\", Some(sym::avx512_target_feature)),\n+    (\"avx512vnni\", Some(sym::avx512_target_feature)),\n+    (\"avx512vp2intersect\", Some(sym::avx512_target_feature)),\n+    (\"avx512vpclmulqdq\", Some(sym::avx512_target_feature)),\n     (\"avx512vpopcntdq\", Some(sym::avx512_target_feature)),\n     (\"bmi1\", None),\n     (\"bmi2\", None),"}, {"sha": "61a04c467224b620baf44cda66dc6363bb494326", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c7e9029b8064a48a983040937bae056617729980/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e9029b8064a48a983040937bae056617729980/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=c7e9029b8064a48a983040937bae056617729980", "patch": "@@ -54,42 +54,62 @@ fn powerpc64_linux() {\n #[test]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn x86_all() {\n+    // the below is the set of features we can test at runtime, but don't actually\n+    // use to gate anything and are thus not part of the X86_ALLOWED_FEATURES list\n+\n+    println!(\"abm: {:?}\", is_x86_feature_detected!(\"abm\")); // this is a synonym for lzcnt but we test it anyways\n+    println!(\"mmx: {:?}\", is_x86_feature_detected!(\"mmx\"));\n+    println!(\"tsc: {:?}\", is_x86_feature_detected!(\"tsc\"));\n+\n+    // the below is in alphabetical order and matches\n+    // the order of X86_ALLOWED_FEATURES in rustc_codegen_ssa's target_features.rs\n+\n+    println!(\"adx: {:?}\", is_x86_feature_detected!(\"adx\"));\n     println!(\"aes: {:?}\", is_x86_feature_detected!(\"aes\"));\n-    println!(\"pcmulqdq: {:?}\", is_x86_feature_detected!(\"pclmulqdq\"));\n+    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n+    println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n+    println!(\"avx512bf16: {:?}\", is_x86_feature_detected!(\"avx512bf16\"));\n+    println!(\"avx512bitalg: {:?}\", is_x86_feature_detected!(\"avx512bitalg\"));\n+    println!(\"avx512bw: {:?}\", is_x86_feature_detected!(\"avx512bw\"));\n+    println!(\"avx512cd: {:?}\", is_x86_feature_detected!(\"avx512cd\"));\n+    println!(\"avx512dq: {:?}\", is_x86_feature_detected!(\"avx512dq\"));\n+    println!(\"avx512er: {:?}\", is_x86_feature_detected!(\"avx512er\"));\n+    println!(\"avx512f: {:?}\", is_x86_feature_detected!(\"avx512f\"));\n+    println!(\"avx512gfni: {:?}\", is_x86_feature_detected!(\"avx512gfni\"));\n+    println!(\"avx512ifma: {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n+    println!(\"avx512pf: {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n+    println!(\"avx512vaes: {:?}\", is_x86_feature_detected!(\"avx512vaes\"));\n+    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n+    println!(\"avx512vbmi2: {:?}\", is_x86_feature_detected!(\"avx512vbmi2\"));\n+    println!(\"avx512vl: {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n+    println!(\"avx512vnni: {:?}\", is_x86_feature_detected!(\"avx512vnni\"));\n+    println!(\"avx512vp2intersect: {:?}\", is_x86_feature_detected!(\"avx512vp2intersect\"));\n+    println!(\"avx512vpclmulqdq: {:?}\", is_x86_feature_detected!(\"avx512vpclmulqdq\"));\n+    println!(\"avx512vpopcntdq: {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n+    println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n+    println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n+    println!(\"cmpxchg16b: {:?}\", is_x86_feature_detected!(\"cmpxchg16b\"));\n+    println!(\"f16c: {:?}\", is_x86_feature_detected!(\"f16c\"));\n+    println!(\"fma: {:?}\", is_x86_feature_detected!(\"fma\"));\n+    println!(\"fxsr: {:?}\", is_x86_feature_detected!(\"fxsr\"));\n+    println!(\"lzcnt: {:?}\", is_x86_feature_detected!(\"lzcnt\"));\n+    //println!(\"movbe: {:?}\", is_x86_feature_detected!(\"movbe\")); // movbe is unsupported as a target feature\n+    println!(\"pclmulqdq: {:?}\", is_x86_feature_detected!(\"pclmulqdq\"));\n+    println!(\"popcnt: {:?}\", is_x86_feature_detected!(\"popcnt\"));\n     println!(\"rdrand: {:?}\", is_x86_feature_detected!(\"rdrand\"));\n     println!(\"rdseed: {:?}\", is_x86_feature_detected!(\"rdseed\"));\n-    println!(\"tsc: {:?}\", is_x86_feature_detected!(\"tsc\"));\n-    println!(\"mmx: {:?}\", is_x86_feature_detected!(\"mmx\"));\n+    println!(\"rtm: {:?}\", is_x86_feature_detected!(\"rtm\"));\n+    println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n     println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"sse2: {:?}\", is_x86_feature_detected!(\"sse2\"));\n     println!(\"sse3: {:?}\", is_x86_feature_detected!(\"sse3\"));\n-    println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"sse4.1: {:?}\", is_x86_feature_detected!(\"sse4.1\"));\n     println!(\"sse4.2: {:?}\", is_x86_feature_detected!(\"sse4.2\"));\n     println!(\"sse4a: {:?}\", is_x86_feature_detected!(\"sse4a\"));\n-    println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n-    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n-    println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n-    println!(\"avx512f {:?}\", is_x86_feature_detected!(\"avx512f\"));\n-    println!(\"avx512cd {:?}\", is_x86_feature_detected!(\"avx512cd\"));\n-    println!(\"avx512er {:?}\", is_x86_feature_detected!(\"avx512er\"));\n-    println!(\"avx512pf {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n-    println!(\"avx512bw {:?}\", is_x86_feature_detected!(\"avx512bw\"));\n-    println!(\"avx512dq {:?}\", is_x86_feature_detected!(\"avx512dq\"));\n-    println!(\"avx512vl {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n-    println!(\"avx512_ifma {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n-    println!(\"avx512_vbmi {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n-    println!(\"avx512_vpopcntdq {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n-    println!(\"fma: {:?}\", is_x86_feature_detected!(\"fma\"));\n-    println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n-    println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n-    println!(\"abm: {:?}\", is_x86_feature_detected!(\"abm\"));\n-    println!(\"lzcnt: {:?}\", is_x86_feature_detected!(\"lzcnt\"));\n+    println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"tbm: {:?}\", is_x86_feature_detected!(\"tbm\"));\n-    println!(\"popcnt: {:?}\", is_x86_feature_detected!(\"popcnt\"));\n-    println!(\"fxsr: {:?}\", is_x86_feature_detected!(\"fxsr\"));\n     println!(\"xsave: {:?}\", is_x86_feature_detected!(\"xsave\"));\n+    println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n     println!(\"xsaveopt: {:?}\", is_x86_feature_detected!(\"xsaveopt\"));\n     println!(\"xsaves: {:?}\", is_x86_feature_detected!(\"xsaves\"));\n-    println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n }"}]}