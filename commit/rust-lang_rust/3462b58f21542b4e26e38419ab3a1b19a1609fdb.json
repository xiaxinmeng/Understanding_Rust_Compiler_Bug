{"sha": "3462b58f21542b4e26e38419ab3a1b19a1609fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NjJiNThmMjE1NDJiNGUyNmUzODQxOWFiM2ExYjE5YTE2MDlmZGI=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-08-28T17:54:25Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-10-07T04:01:55Z"}, "message": "Add support for parsing #[link_ordinal] attribute.", "tree": {"sha": "23dbd76eb250a112d81fc22f13574d41b7218160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23dbd76eb250a112d81fc22f13574d41b7218160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3462b58f21542b4e26e38419ab3a1b19a1609fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3462b58f21542b4e26e38419ab3a1b19a1609fdb", "html_url": "https://github.com/rust-lang/rust/commit/3462b58f21542b4e26e38419ab3a1b19a1609fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3462b58f21542b4e26e38419ab3a1b19a1609fdb/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270", "html_url": "https://github.com/rust-lang/rust/commit/e70ffed9cdb01ad9f2f27ef4f83de3ebb17f1270"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "30b050366887766b8b8844235d9f02e966a1821e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3462b58f21542b4e26e38419ab3a1b19a1609fdb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462b58f21542b4e26e38419ab3a1b19a1609fdb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3462b58f21542b4e26e38419ab3a1b19a1609fdb", "patch": "@@ -2669,6 +2669,11 @@ pub struct CodegenFnAttrs {\n     /// probably isn't set when this is set, this is for foreign items while\n     /// `#[export_name]` is for Rust-defined functions.\n     pub link_name: Option<Symbol>,\n+    /// The `#[link_ordinal = \"...\"]` attribute, indicating an ordinal an\n+    /// imported function has in the dynamic library. Note that this must not\n+    /// be set when `link_name` is set. This is for foreign items with the\n+    /// \"raw-dylib\" kind.\n+    pub link_ordinal: Option<usize>,\n     /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n     /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,\n@@ -2728,6 +2733,7 @@ impl CodegenFnAttrs {\n             optimize: OptimizeAttr::None,\n             export_name: None,\n             link_name: None,\n+            link_ordinal: None,\n             target_features: vec![],\n             linkage: None,\n             link_section: None,"}, {"sha": "aaebfa86daa66005a1973fa7ed5d61a09587aaed", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3462b58f21542b4e26e38419ab3a1b19a1609fdb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462b58f21542b4e26e38419ab3a1b19a1609fdb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3462b58f21542b4e26e38419ab3a1b19a1609fdb", "patch": "@@ -2641,6 +2641,35 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.check_name(sym::link_name) {\n             codegen_fn_attrs.link_name = attr.value_str();\n+        } else if attr.check_name(sym::link_ordinal) {\n+            use syntax::ast::{Lit, LitIntType, LitKind};\n+            let meta_item_list = attr.meta_item_list();\n+            let sole_meta_lit = if let Some(meta_item_list) = &meta_item_list {\n+                if meta_item_list.len() == 1 {\n+                    meta_item_list.get(0).and_then(|item| item.literal())\n+                } else {\n+                    None\n+                }\n+            } else {\n+                None\n+            };\n+            if let Some(Lit { node: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) =\n+                sole_meta_lit\n+            {\n+                if *ordinal <= std::usize::MAX as u128 {\n+                    codegen_fn_attrs.link_ordinal = Some(*ordinal as usize);\n+                } else {\n+                    let msg = format!(\n+                        \"too large ordinal value in link_ordinal \\\n+                         value: `{}`\",\n+                        &ordinal\n+                    );\n+                    tcx.sess.span_err(attr.span, &msg);\n+                }\n+            } else {\n+                let msg = \"illegal ordinal format in link_ordinal\";\n+                tcx.sess.span_err(attr.span, &msg);\n+            }\n         }\n     }\n \n@@ -2742,6 +2771,15 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }\n+    if codegen_fn_attrs.link_name.is_some() && codegen_fn_attrs.link_ordinal.is_some() {\n+        if let Some(span) = inline_span {\n+            tcx.sess.span_err(\n+                span,\n+                \"cannot use `#[link_name]` with \\\n+                 `#[link_ordinal]`\",\n+            );\n+        }\n+    }\n \n     // Internal symbols to the standard library all have no_mangle semantics in\n     // that they have defined symbol names present in the function name. This"}]}