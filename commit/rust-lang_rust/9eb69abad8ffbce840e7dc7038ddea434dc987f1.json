{"sha": "9eb69abad8ffbce840e7dc7038ddea434dc987f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjY5YWJhZDhmZmJjZTg0MGU3ZGM3MDM4ZGRlYTQzNGRjOTg3ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-13T17:49:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-13T17:49:15Z"}, "message": "Auto merge of #23337 - Manishearth:rollup, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "217b64e9e1271d2be83dfb091044432928861520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217b64e9e1271d2be83dfb091044432928861520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb69abad8ffbce840e7dc7038ddea434dc987f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb69abad8ffbce840e7dc7038ddea434dc987f1", "html_url": "https://github.com/rust-lang/rust/commit/9eb69abad8ffbce840e7dc7038ddea434dc987f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb69abad8ffbce840e7dc7038ddea434dc987f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7696383f3423cdd17373ff9e75c01acd8e3417", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7696383f3423cdd17373ff9e75c01acd8e3417", "html_url": "https://github.com/rust-lang/rust/commit/ee7696383f3423cdd17373ff9e75c01acd8e3417"}, {"sha": "40b64645fecbee4e11da1ea4328c1b1ab4b9b8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b64645fecbee4e11da1ea4328c1b1ab4b9b8a0", "html_url": "https://github.com/rust-lang/rust/commit/40b64645fecbee4e11da1ea4328c1b1ab4b9b8a0"}], "stats": {"total": 464, "additions": 417, "deletions": 47}, "files": [{"sha": "1861dd313ce71c02e81b5d2893ca3ec02e3f8000", "filename": "mk/llvm.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -44,10 +44,10 @@ $$(LLVM_STAMP_$(1)): $(S)src/rustllvm/llvm-auto-clean-trigger\n \ttouch -r $$@.start_time $$@ && rm $$@.start_time\n \n ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n-LLVM_STDCPP_LOCATION_$(1) = $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-\t\t\t\t\t-print-file-name=libstdc++.a)\n+LLVM_STDCPP_RUSTFLAGS_$(1) = -L \"$$(dir $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+\t\t\t\t\t-print-file-name=libstdc++.a))\"\n else\n-LLVM_STDCPP_LOCATION_$(1) =\n+LLVM_STDCPP_RUSTFLAGS_$(1) =\n endif\n \n "}, {"sha": "ad9d0d0ca5e773e16967211b6c257ed163d1ebfe", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -30,8 +30,8 @@ CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-beta(CFG_PRERELEASE_VERSION)\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-beta(CFG_PRERELEASE_VERSION)\n+CFG_RELEASE=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n+CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),nightly)"}, {"sha": "4182ec81a7e6c7b5a05dfccf31965894304e1018", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -85,7 +85,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n \t\t$$(RUST_LIB_FLAGS_ST$(1)) \\\n \t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n \t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n-\t\t-L \"$$(dir $$(LLVM_STDCPP_LOCATION_$(2)))\" \\\n+\t\t$$(LLVM_STDCPP_RUSTFLAGS_$(2)) \\\n \t\t$$(RUSTFLAGS_$(4)) \\\n \t\t--out-dir $$(@D) \\\n \t\t-C extra-filename=-$$(CFG_FILENAME_EXTRA) \\"}, {"sha": "b45211e3a0847c198d1f0e47d6dc5a0b424fe84e", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -85,9 +85,11 @@ Hello, world!\n Bam! We build our project with `cargo build`, and run it with\n `./target/debug/hello_world`. This hasn't bought us a whole lot over our simple use\n of `rustc`, but think about the future: when our project has more than one\n-file, we would need to call `rustc` more than once, and pass it a bunch of options to\n+file, we would need to call `rustc` more than once and pass it a bunch of options to\n tell it to build everything together. With Cargo, as our project grows, we can\n-just `cargo build` and it'll work the right way. When you're project is finally ready for release, you can use `cargo build --release` to compile your crates with optimizations.\n+just `cargo build`, and it'll work the right way. When your project is finally\n+ready for release, you can use `cargo build --release` to compile your crates with\n+optimizations.\n \n You'll also notice that Cargo has created a new file: `Cargo.lock`.\n "}, {"sha": "dbf27e88c143e0293cf02c9b1258befc28e33ef9", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -27,9 +27,18 @@ def rust_pretty_printer_lookup_function(val):\n     if type_code == gdb.TYPE_CODE_STRUCT:\n         struct_kind = classify_struct(val.type)\n \n+        if struct_kind == STRUCT_KIND_SLICE:\n+            return RustSlicePrinter(val)\n+\n         if struct_kind == STRUCT_KIND_STR_SLICE:\n             return RustStringSlicePrinter(val)\n \n+        if struct_kind == STRUCT_KIND_STD_VEC:\n+            return RustStdVecPrinter(val)\n+\n+        if struct_kind == STRUCT_KIND_STD_STRING:\n+            return RustStdStringPrinter(val)\n+\n         if struct_kind == STRUCT_KIND_TUPLE:\n             return RustTuplePrinter(val)\n \n@@ -172,6 +181,28 @@ def children(self):\n     def display_hint(self):\n         return \"array\"\n \n+class RustSlicePrinter:\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def display_hint(self):\n+        return \"array\"\n+\n+    def to_string(self):\n+        length = int(self.val[\"length\"])\n+        return self.val.type.tag + (\"(len: %i)\" % length)\n+\n+    def children(self):\n+        cs = []\n+        length = int(self.val[\"length\"])\n+        data_ptr = self.val[\"data_ptr\"]\n+        assert data_ptr.type.code == gdb.TYPE_CODE_PTR\n+        pointee_type = data_ptr.type.target()\n+\n+        for index in range(0, length):\n+            cs.append((str(index), (data_ptr + index).dereference()))\n+\n+        return cs\n \n class RustStringSlicePrinter:\n     def __init__(self, val):\n@@ -181,6 +212,35 @@ def to_string(self):\n         slice_byte_len = self.val[\"length\"]\n         return '\"%s\"' % self.val[\"data_ptr\"].string(encoding=\"utf-8\", length=slice_byte_len)\n \n+class RustStdVecPrinter:\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def display_hint(self):\n+        return \"array\"\n+\n+    def to_string(self):\n+        length = int(self.val[\"len\"])\n+        cap = int(self.val[\"cap\"])\n+        return self.val.type.tag + (\"(len: %i, cap: %i)\" % (length, cap))\n+\n+    def children(self):\n+        cs = []\n+        (length, data_ptr) = extract_length_and_data_ptr_from_std_vec(self.val)\n+        pointee_type = data_ptr.type.target()\n+\n+        for index in range(0, length):\n+            cs.append((str(index), (data_ptr + index).dereference()))\n+        return cs\n+\n+class RustStdStringPrinter:\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        (length, data_ptr) = extract_length_and_data_ptr_from_std_vec(self.val[\"vec\"])\n+        return '\"%s\"' % data_ptr.string(encoding=\"utf-8\", length=length)\n+\n \n class RustCStyleEnumPrinter:\n     def __init__(self, val):\n@@ -204,19 +264,38 @@ def to_string(self):\n STRUCT_KIND_TUPLE_VARIANT   = 3\n STRUCT_KIND_STRUCT_VARIANT  = 4\n STRUCT_KIND_CSTYLE_VARIANT  = 5\n-STRUCT_KIND_STR_SLICE       = 6\n+STRUCT_KIND_SLICE           = 6\n+STRUCT_KIND_STR_SLICE       = 7\n+STRUCT_KIND_STD_VEC         = 8\n+STRUCT_KIND_STD_STRING      = 9\n \n \n def classify_struct(type):\n+    # print(\"\\nclassify_struct: tag=%s\\n\" % type.tag)\n     if type.tag == \"&str\":\n         return STRUCT_KIND_STR_SLICE\n \n+    if type.tag.startswith(\"&[\") and type.tag.endswith(\"]\"):\n+        return STRUCT_KIND_SLICE\n+\n     fields = list(type.fields())\n     field_count = len(fields)\n \n     if field_count == 0:\n         return STRUCT_KIND_REGULAR_STRUCT\n \n+    if (field_count == 3 and\n+        fields[0].name == \"ptr\" and\n+        fields[1].name == \"len\" and\n+        fields[2].name == \"cap\" and\n+        type.tag.startswith(\"Vec<\")):\n+        return STRUCT_KIND_STD_VEC\n+\n+    if (field_count == 1 and\n+        fields[0].name == \"vec\" and\n+        type.tag == \"String\"):\n+        return STRUCT_KIND_STD_STRING\n+\n     if fields[0].name == \"RUST$ENUM$DISR\":\n         if field_count == 1:\n             return STRUCT_KIND_CSTYLE_VARIANT\n@@ -254,3 +333,11 @@ def get_field_at_index(val, index):\n             return field\n         i += 1\n     return None\n+\n+def extract_length_and_data_ptr_from_std_vec(vec_val):\n+    length = int(vec_val[\"len\"])\n+    vec_ptr_val = vec_val[\"ptr\"]\n+    unique_ptr_val = vec_ptr_val[first_field(vec_ptr_val)]\n+    data_ptr = unique_ptr_val[first_field(unique_ptr_val)]\n+    assert data_ptr.type.code == gdb.TYPE_CODE_PTR\n+    return (length, data_ptr)\n\\ No newline at end of file"}, {"sha": "f9936b7a16a9dd4fac365ddceafb9c967f1e3ae6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -198,6 +198,7 @@ mod imp {\n     extern {}\n \n     extern {\n+        #[allocator]\n         fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n         fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n         fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;"}, {"sha": "34c0686fe37ae866698cf29db2465410a2729868", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -69,6 +69,7 @@\n \n #![feature(no_std)]\n #![no_std]\n+#![feature(allocator)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]"}, {"sha": "fdc0020dfcd618cb289e990f0ae45cfe6998a3ca", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -70,9 +70,7 @@ mod sip;\n /// A hashable type.\n ///\n /// The `H` type parameter is an abstract hash state that is used by the `Hash`\n-/// to compute the hash. Specific implementations of this trait may specialize\n-/// for particular instances of `H` in order to be able to optimize the hashing\n-/// behavior.\n+/// to compute the hash.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "32123a8271ce4fff85a78a5ff325d0742c0e8541", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -33,31 +33,34 @@\n //! let my_speed_ptr: *mut i32 = &mut my_speed;\n //! ```\n //!\n+//! To get a pointer to a boxed value, dereference the box:\n+//!\n+//! ```\n+//! let my_num: Box<i32> = Box::new(10);\n+//! let my_num_ptr: *const i32 = &*my_num;\n+//! let mut my_speed: Box<i32> = Box::new(88);\n+//! let my_speed_ptr: *mut i32 = &mut *my_speed;\n+//! ```\n+//!\n //! This does not take ownership of the original allocation\n //! and requires no resource management later,\n //! but you must not use the pointer after its lifetime.\n //!\n-//! ## 2. Transmute an owned box (`Box<T>`).\n+//! ## 2. Consume a box (`Box<T>`).\n //!\n-//! The `transmute` function takes, by value, whatever it's given\n-//! and returns it as whatever type is requested, as long as the\n-//! types are the same size. Because `Box<T>` and `*mut T` have the same\n-//! representation they can be trivially,\n-//! though unsafely, transformed from one type to the other.\n+//! The `into_raw` function consumes a box and returns\n+//! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n //!\n //! ```\n-//! use std::mem;\n+//! use std::boxed;\n //!\n //! unsafe {\n-//!     let my_num: Box<i32> = Box::new(10);\n-//!     let my_num: *const i32 = mem::transmute(my_num);\n //!     let my_speed: Box<i32> = Box::new(88);\n-//!     let my_speed: *mut i32 = mem::transmute(my_speed);\n+//!     let my_speed: *mut i32 = boxed::into_raw(my_speed);\n //!\n //!     // By taking ownership of the original `Box<T>` though\n-//!     // we are obligated to transmute it back later to be destroyed.\n-//!     drop(mem::transmute::<_, Box<i32>>(my_speed));\n-//!     drop(mem::transmute::<_, Box<i32>>(my_num));\n+//!     // we are obligated to put it together later to be destroyed.\n+//!     drop(Box::from_raw(my_speed));\n //! }\n //! ```\n //!"}, {"sha": "ca8ae83ab80a80e976ed1af1931fa5cd7ba15870", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -411,3 +411,8 @@ pub fn is_defaulted_trait(cstore: &cstore::CStore, trait_def_id: ast::DefId) ->\n     let cdata = cstore.get_crate_data(trait_def_id.krate);\n     decoder::is_defaulted_trait(&*cdata, trait_def_id.node)\n }\n+\n+pub fn is_default_impl(cstore: &cstore::CStore, impl_did: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(impl_did.krate);\n+    decoder::is_default_impl(&*cdata, impl_did.node)\n+}"}, {"sha": "c0bad80ab594aa74dd6c505a3482745129bedf39", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -1537,13 +1537,18 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n     }\n }\n \n-pub fn is_defaulted_trait<'tcx>(cdata: Cmd, trait_id: ast::NodeId) -> bool {\n+pub fn is_defaulted_trait(cdata: Cmd, trait_id: ast::NodeId) -> bool {\n     let trait_doc = lookup_item(trait_id, cdata.data());\n     assert!(item_family(trait_doc) == Family::Trait);\n     let defaulted_doc = reader::get_doc(trait_doc, tag_defaulted_trait);\n     reader::doc_as_u8(defaulted_doc) != 0\n }\n \n+pub fn is_default_impl(cdata: Cmd, impl_id: ast::NodeId) -> bool {\n+    let impl_doc = lookup_item(impl_id, cdata.data());\n+    item_family(impl_doc) == Family::DefaultImpl\n+}\n+\n pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<codemap::FileMap> {\n     let crate_doc = rbml::Doc::new(metadata);\n     let cm_doc = reader::get_doc(crate_doc, tag_codemap);"}, {"sha": "09378f2c9736bc62c7ccfd23f0d4ff97d0510fc6", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -47,6 +47,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     struct_has_extern_repr: bool,\n     ignore_non_const_paths: bool,\n     inherited_pub_visibility: bool,\n+    ignore_variant_stack: Vec<ast::NodeId>,\n }\n \n impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n@@ -59,6 +60,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             struct_has_extern_repr: false,\n             ignore_non_const_paths: false,\n             inherited_pub_visibility: false,\n+            ignore_variant_stack: vec![],\n         }\n     }\n \n@@ -79,7 +81,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 def::DefPrimTy(_) => (),\n                 def::DefVariant(enum_id, variant_id, _) => {\n                     self.check_def_id(enum_id);\n-                    self.check_def_id(variant_id);\n+                    if !self.ignore_variant_stack.contains(&variant_id.node) {\n+                        self.check_def_id(variant_id);\n+                    }\n                 }\n                 _ => {\n                     self.check_def_id(def.def_id());\n@@ -278,6 +282,23 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         visit::walk_expr(self, expr);\n     }\n \n+    fn visit_arm(&mut self, arm: &ast::Arm) {\n+        if arm.pats.len() == 1 {\n+            let pat = &*arm.pats[0];\n+            let variants = pat_util::necessary_variants(&self.tcx.def_map, pat);\n+\n+            // Inside the body, ignore constructions of variants\n+            // necessary for the pattern to match. Those construction sites\n+            // can't be reached unless the variant is constructed elsewhere.\n+            let len = self.ignore_variant_stack.len();\n+            self.ignore_variant_stack.push_all(&*variants);\n+            visit::walk_arm(self, arm);\n+            self.ignore_variant_stack.truncate(len);\n+        } else {\n+            visit::walk_arm(self, arm);\n+        }\n+    }\n+\n     fn visit_pat(&mut self, pat: &ast::Pat) {\n         let def_map = &self.tcx.def_map;\n         match pat.node {\n@@ -397,6 +418,11 @@ fn create_and_seed_worklist(tcx: &ty::ctxt,\n         worklist.push(*id);\n     }\n     for id in reachable_symbols {\n+        // Reachable variants can be dead, because we warn about\n+        // variants never constructed, not variants never used.\n+        if let Some(ast_map::NodeVariant(..)) = tcx.map.find(*id) {\n+            continue;\n+        }\n         worklist.push(*id);\n     }\n "}, {"sha": "eca3296e65c099e4ec434793ad0da184752faf66", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -155,3 +155,27 @@ pub fn def_to_path(tcx: &ty::ctxt, id: ast::DefId) -> ast::Path {\n         span: DUMMY_SP,\n     })\n }\n+\n+/// Return variants that are necessary to exist for the pattern to match.\n+pub fn necessary_variants(dm: &DefMap, pat: &ast::Pat) -> Vec<ast::NodeId> {\n+    let mut variants = vec![];\n+    walk_pat(pat, |p| {\n+        match p.node {\n+            ast::PatEnum(_, _) |\n+            ast::PatIdent(_, _, None) |\n+            ast::PatStruct(..) => {\n+                match dm.borrow().get(&p.id) {\n+                    Some(&PathResolution {base_def: DefVariant(_, id, _), ..}) => {\n+                        variants.push(id.node);\n+                    }\n+                    _ => ()\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    });\n+    variants.sort();\n+    variants.dedup();\n+    variants\n+}"}, {"sha": "ccf24f7e859dd3b6f4096a25f76f57a0bdca5b8e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -33,7 +33,7 @@ use super::ModuleTranslation;\n use back::link::{mangle_exported_name};\n use back::{link, abi};\n use lint;\n-use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n+use llvm::{AttrHelper, BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use metadata::{csearch, encoder, loader};\n use middle::astencode;\n@@ -456,6 +456,9 @@ pub fn set_llvm_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: Val\n                                                llvm::FunctionIndex as c_uint,\n                                                llvm::ColdAttribute as uint64_t)\n             },\n+            \"allocator\" => {\n+                llvm::NoAliasAttribute.apply_llfn(llvm::ReturnIndex as c_uint, llfn);\n+            }\n             _ => used = false,\n         }\n         if used {\n@@ -903,8 +906,10 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     ccx.sess().bug(\"unexpected intrinsic in trans_external_path\")\n                 }\n                 _ => {\n-                    foreign::register_foreign_item_fn(ccx, fn_ty.abi, t,\n-                                                      &name[..])\n+                    let llfn = foreign::register_foreign_item_fn(ccx, fn_ty.abi, t, &name[..]);\n+                    let attrs = csearch::get_item_attrs(&ccx.sess().cstore, did);\n+                    set_llvm_fn_attrs(ccx, &attrs, llfn);\n+                    llfn\n                 }\n             }\n         }\n@@ -2841,7 +2846,9 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     let abi = ccx.tcx().map.get_foreign_abi(id);\n                     let ty = ty::node_id_to_type(ccx.tcx(), ni.id);\n                     let name = foreign::link_name(&*ni);\n-                    foreign::register_foreign_item_fn(ccx, abi, ty, &name)\n+                    let llfn = foreign::register_foreign_item_fn(ccx, abi, ty, &name);\n+                    set_llvm_fn_attrs(ccx, &ni.attrs, llfn);\n+                    llfn\n                 }\n                 ast::ForeignItemStatic(..) => {\n                     foreign::register_static(ccx, &*ni)"}, {"sha": "dfc7e7f604f3d8b4f69a9c9f4cefa657e066cf68", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -470,8 +470,8 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n                                                      \"foreign fn's sty isn't a bare_fn_ty?\")\n                     }\n \n-                    register_foreign_item_fn(ccx, abi, ty,\n-                                             &lname);\n+                    let llfn = register_foreign_item_fn(ccx, abi, ty, &lname);\n+                    base::set_llvm_fn_attrs(ccx, &foreign_item.attrs, llfn);\n                     // Unlike for other items, we shouldn't call\n                     // `base::update_linkage` here.  Foreign items have\n                     // special linkage requirements, which are handled"}, {"sha": "aa17bf20d74bbe782e0896277a93106ee2225f93", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -259,26 +259,43 @@ fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n     impls.into_iter().filter_map(|a| a).collect()\n }\n \n-fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n+fn build_impl(cx: &DocContext,\n+              tcx: &ty::ctxt,\n               did: ast::DefId) -> Option<clean::Item> {\n     if !cx.inlined.borrow_mut().as_mut().unwrap().insert(did) {\n         return None\n     }\n \n+    let attrs = load_attrs(cx, tcx, did);\n     let associated_trait = csearch::get_impl_trait(tcx, did);\n-    // If this is an impl for a #[doc(hidden)] trait, be sure to not inline it.\n-    match associated_trait {\n-        Some(ref t) => {\n-            let trait_attrs = load_attrs(cx, tcx, t.def_id);\n-            if trait_attrs.iter().any(|a| is_doc_hidden(a)) {\n-                return None\n-            }\n+    if let Some(ref t) = associated_trait {\n+        // If this is an impl for a #[doc(hidden)] trait, be sure to not inline\n+        let trait_attrs = load_attrs(cx, tcx, t.def_id);\n+        if trait_attrs.iter().any(|a| is_doc_hidden(a)) {\n+            return None\n         }\n-        None => {}\n     }\n \n-    let attrs = load_attrs(cx, tcx, did);\n-    let ty = ty::lookup_item_type(tcx, did);\n+    // If this is a defaulted impl, then bail out early here\n+    if csearch::is_default_impl(&tcx.sess.cstore, did) {\n+        return Some(clean::Item {\n+            inner: clean::DefaultImplItem(clean::DefaultImpl {\n+                // FIXME: this should be decoded\n+                unsafety: ast::Unsafety::Normal,\n+                trait_: match associated_trait.as_ref().unwrap().clean(cx) {\n+                    clean::TraitBound(polyt, _) => polyt.trait_,\n+                    clean::RegionBound(..) => unreachable!(),\n+                },\n+            }),\n+            source: clean::Span::empty(),\n+            name: None,\n+            attrs: attrs,\n+            visibility: Some(ast::Inherited),\n+            stability: stability::lookup(tcx, did).clean(cx),\n+            def_id: did,\n+        });\n+    }\n+\n     let predicates = ty::lookup_predicates(tcx, did);\n     let trait_items = csearch::get_impl_items(&tcx.sess.cstore, did)\n             .iter()\n@@ -330,8 +347,10 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n         }\n     }).collect();\n     let polarity = csearch::get_impl_polarity(tcx, did);\n+    let ty = ty::lookup_item_type(tcx, did);\n     return Some(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n+            unsafety: ast::Unsafety::Normal, // FIXME: this should be decoded\n             derived: clean::detect_derived(&attrs),\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {"}, {"sha": "421549f8b7ecb8ab838ed60dfeec7ea940299e39", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -337,6 +337,7 @@ pub enum ItemEnum {\n     MacroItem(Macro),\n     PrimitiveItem(PrimitiveType),\n     AssociatedTypeItem(Vec<TyParamBound>, Option<Type>),\n+    DefaultImplItem(DefaultImpl),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -367,6 +368,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.traits.iter().map(|x| x.clean(cx)));\n         items.extend(self.impls.iter().map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n+        items.extend(self.def_traits.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -2079,6 +2081,7 @@ impl Clean<ImplPolarity> for ast::ImplPolarity {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Impl {\n+    pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n     pub for_: Type,\n@@ -2101,6 +2104,7 @@ impl Clean<Item> for doctree::Impl {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             inner: ImplItem(Impl {\n+                unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n                 trait_: self.trait_.clean(cx),\n                 for_: self.for_.clean(cx),\n@@ -2112,6 +2116,29 @@ impl Clean<Item> for doctree::Impl {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct DefaultImpl {\n+    pub unsafety: ast::Unsafety,\n+    pub trait_: Type,\n+}\n+\n+impl Clean<Item> for doctree::DefaultImpl {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: None,\n+            attrs: self.attrs.clean(cx),\n+            source: self.whence.clean(cx),\n+            def_id: ast_util::local_def(self.id),\n+            visibility: Some(ast::Public),\n+            stability: None,\n+            inner: DefaultImplItem(DefaultImpl {\n+                unsafety: self.unsafety,\n+                trait_: self.trait_.clean(cx),\n+            }),\n+        }\n+    }\n+}\n+\n impl Clean<Item> for doctree::ExternCrate {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {"}, {"sha": "c6d8b9428c5751c26a97f79c3b310c2d0fa4693f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -202,6 +202,8 @@ pub struct DefaultImpl {\n     pub unsafety: ast::Unsafety,\n     pub trait_: ast::TraitRef,\n     pub id: ast::NodeId,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub whence: Span,\n }\n \n pub struct Macro {"}, {"sha": "1d63f01be524adcc7d228d3045b19bc388afbbe7", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -64,6 +64,7 @@ impl ItemType {\n             clean::MacroItem(..)           => ItemType::Macro,\n             clean::PrimitiveItem(..)       => ItemType::Primitive,\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n+            clean::DefaultImplItem(..)     => ItemType::Impl,\n         }\n     }\n "}, {"sha": "953b442bb3ceb3d81b18a209153b6525affd5672", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -176,7 +176,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                     return None;\n                 }\n             }\n-            clean::ImplItem(..) => {}\n+            clean::DefaultImplItem(..) | clean::ImplItem(..) => {}\n \n             // tymethods/macros have no control over privacy\n             clean::MacroItem(..) | clean::TyMethodItem(..) => {}"}, {"sha": "d53954b29b585422bc3305b821476fa41e8e45e8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -362,7 +362,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let i = DefaultImpl {\n                     unsafety: unsafety,\n                     trait_: trait_ref.clone(),\n-                    id: item.id\n+                    id: item.id,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n                 };\n                 om.def_traits.push(i);\n             }"}, {"sha": "0a9980c892527a9b88bec0fecbb6f1bcf2282f56", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -83,6 +83,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"box_syntax\", \"1.0.0\", Active),\n     (\"on_unimplemented\", \"1.0.0\", Active),\n     (\"simd_ffi\", \"1.0.0\", Active),\n+    (\"allocator\", \"1.0.0\", Active),\n \n     (\"if_let\", \"1.0.0\", Accepted),\n     (\"while_let\", \"1.0.0\", Accepted),\n@@ -230,6 +231,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n                                      \"the `#[rustc_on_unimplemented]` attribute \\\n                                       is an experimental feature\")),\n+    (\"allocator\", Gated(\"allocator\",\n+                        \"the `#[allocator]` attribute is an experimental feature\")),\n     (\"rustc_variance\", Gated(\"rustc_attrs\",\n                              \"the `#[rustc_variance]` attribute \\\n                               is an experimental feature\")),"}, {"sha": "f542246705c566d8e64771a7e09d808a5f1c86ba", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -754,7 +754,6 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n mod test {\n     use super::*;\n     use std::rc::Rc;\n-    use serialize::json;\n     use codemap::{Span, BytePos, Pos, Spanned, NO_EXPANSION};\n     use owned_slice::OwnedSlice;\n     use ast;"}, {"sha": "80d5ab5baf3df2b2eebd49c219a67626984b7768", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -121,6 +121,7 @@ impl fmt::Display for TestName {\n #[derive(Clone, Copy)]\n enum NamePadding {\n     PadNone,\n+    #[allow(dead_code)]\n     PadOnLeft,\n     PadOnRight,\n }"}, {"sha": "6146be65e38803493f9622ae9e46d02dab523526", "filename": "src/test/compile-fail/lint-dead-code-variant.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+#[derive(Copy)]\n+enum Enum {\n+    Variant1, //~ ERROR: variant is never used\n+    Variant2,\n+    Variant3,\n+}\n+\n+fn copy(e: Enum) -> Enum {\n+    use Enum::*;\n+    match e {\n+        Variant1 => Variant1,\n+        Variant2 => Variant2,\n+        Variant3 => Variant3,\n+    }\n+}\n+\n+fn max(e: Enum) -> Enum {\n+    use Enum::*;\n+    match e {\n+        Variant1 => Variant3,\n+        Variant2 => Variant3,\n+        Variant3 => Variant3,\n+    }\n+}\n+\n+fn main() {\n+    let e = Enum::Variant2;\n+    copy(e);\n+    max(e);\n+}"}, {"sha": "dbf80a9bccce83b0d996e7ea3da2e637030cb619", "filename": "src/test/debuginfo/gdb-pretty-std.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows failing on win32 bot\n+// ignore-freebsd: gdb package too new\n+// ignore-tidy-linelength\n+// ignore-lldb\n+// ignore-android: FIXME(#10381)\n+// compile-flags:-g\n+// min-gdb-version 7.7\n+\n+// gdb-command: run\n+\n+// gdb-command: print slice\n+// gdb-check:$1 = &[i32](len: 4) = {0, 1, 2, 3}\n+\n+// gdb-command: print vec\n+// gdb-check:$2 = Vec<u64>(len: 4, cap: [...]) = {4, 5, 6, 7}\n+\n+// gdb-command: print str_slice\n+// gdb-check:$3 = \"IAMA string slice!\"\n+\n+// gdb-command: print string\n+// gdb-check:$4 = \"IAMA string!\"\n+\n+// gdb-command: print some\n+// gdb-check:$5 = Some = {8}\n+\n+// gdb-command: print none\n+// gdb-check:$6 = None\n+\n+fn main() {\n+\n+    // &[]\n+    let slice: &[i32] = &[0, 1, 2, 3];\n+\n+    // Vec\n+    let vec = vec![4u64, 5, 6, 7];\n+\n+    // &str\n+    let str_slice = \"IAMA string slice!\";\n+\n+    // String\n+    let string = \"IAMA string!\".to_string();\n+\n+    // Option\n+    let some = Some(8i16);\n+    let none: Option<i64> = None;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}, {"sha": "338cf9d20531891e9928277c553b05bec7259249", "filename": "src/test/run-make/rustdoc-default-impl/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2FMakefile?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: foo.rs bar.rs\n+\t$(RUSTC) foo.rs --crate-type lib\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc bar.rs -L $(TMPDIR)"}, {"sha": "c9fae80d858297a4c441f69859724a22421509d5", "filename": "src/test/run-make/rustdoc-default-impl/bar.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Fbar.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+pub use foo::bar;\n+\n+pub fn wut<T: bar::Bar>() {\n+}\n+"}, {"sha": "08f3bd10e74a716c05b1699be930e7d698b3db0c", "filename": "src/test/run-make/rustdoc-default-impl/foo.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb69abad8ffbce840e7dc7038ddea434dc987f1/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs?ref=9eb69abad8ffbce840e7dc7038ddea434dc987f1", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod bar {\n+    use std::marker;\n+\n+    pub trait Bar: marker::MarkerTrait + 'static {}\n+\n+    impl Bar for .. {}\n+\n+    pub trait Foo {\n+        fn foo(&self) {}\n+    }\n+\n+    impl Foo {\n+        pub fn test<T: Bar>(&self) {}\n+    }\n+\n+    pub struct TypeId;\n+\n+    impl TypeId {\n+        pub fn of<T: Bar + ?Sized>() -> TypeId {\n+            panic!()\n+        }\n+    }\n+}"}]}