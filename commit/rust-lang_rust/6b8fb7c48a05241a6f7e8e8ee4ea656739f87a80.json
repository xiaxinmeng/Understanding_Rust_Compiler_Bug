{"sha": "6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOGZiN2M0OGEwNTI0MWE2ZjdlOGU4ZWU0ZWE2NTY3MzlmODdhODA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-14T21:29:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-14T21:29:56Z"}, "message": "Rollup merge of #71082 - NeoRaider:ptr_slice_len, r=oli-obk,SimonSapin\n\nptr: introduce len() method on raw slices\n\nIt is already possible to extract the pointer part of a raw slice by a\nsimple cast, but retrieving the length is not possible without relying\non the representation of the raw slice when it is not valid to convert\nthe raw slice into a slice reference (i.e. the pointer is null or\nunaligned).\n\n~Introduce a new function ptr::slice_len() to add this missing feature.~\n\nIntroduce a len() method on raw slices to add this missing feature.", "tree": {"sha": "6549050378c51a896a15704e0f85e806d792b76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6549050378c51a896a15704e0f85e806d792b76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelitUCRBK7hj4Ov3rIwAAdHIIAIYMdcSo3ZVVYvWCxpqbNKpc\nyCATugdK794Z1vOJuOJU4Chnxk0DnDi0YK0/pDT8jT2/mgt08rf682sREJ8xbYmt\neT6+DhT2yi5iPIgh7uM+WRCFpqDYuuZLe4lxiCJ0B0etVuJAU/LIPeIYYkSNvzvK\n+CZnD6uaK/dKY7n1eqeoTjPxRA0+nZiAB/4mZBPzSeAKAmUMpKzkD4otj9zGZx6g\nGxku+BgwycbFTjieBSFt62NoOHZlXjUlYW8N3UxBzlH9u7lv8ICmCscw8QG6IkI0\n7D08CWMatb6YxGLFIh06j2yWlk2tyqAjeFczQiQzw1A1ZBv+QY60vVL2pA+KUIs=\n=j4Gd\n-----END PGP SIGNATURE-----\n", "payload": "tree 6549050378c51a896a15704e0f85e806d792b76e\nparent 119e32bca17873c018faf4e0351819311f84aafb\nparent dfd68441beba4db959697974949bc7f613a13e2e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586899796 +0200\ncommitter GitHub <noreply@github.com> 1586899796 +0200\n\nRollup merge of #71082 - NeoRaider:ptr_slice_len, r=oli-obk,SimonSapin\n\nptr: introduce len() method on raw slices\n\nIt is already possible to extract the pointer part of a raw slice by a\nsimple cast, but retrieving the length is not possible without relying\non the representation of the raw slice when it is not valid to convert\nthe raw slice into a slice reference (i.e. the pointer is null or\nunaligned).\n\n~Introduce a new function ptr::slice_len() to add this missing feature.~\n\nIntroduce a len() method on raw slices to add this missing feature.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "html_url": "https://github.com/rust-lang/rust/commit/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119e32bca17873c018faf4e0351819311f84aafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/119e32bca17873c018faf4e0351819311f84aafb", "html_url": "https://github.com/rust-lang/rust/commit/119e32bca17873c018faf4e0351819311f84aafb"}, {"sha": "dfd68441beba4db959697974949bc7f613a13e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd68441beba4db959697974949bc7f613a13e2e", "html_url": "https://github.com/rust-lang/rust/commit/dfd68441beba4db959697974949bc7f613a13e2e"}], "stats": {"total": 97, "additions": 93, "deletions": 4}, "files": [{"sha": "729e0b897c0980f7ed4b7e6efdfcbf1ffe359056", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "patch": "@@ -706,6 +706,34 @@ impl<T: ?Sized> *const T {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[lang = \"const_slice_ptr\"]\n+impl<T> *const [T] {\n+    /// Returns the length of a raw slice.\n+    ///\n+    /// The returned value is the number of **elements**, not the number of bytes.\n+    ///\n+    /// This function is safe, even when the raw slice cannot be cast to a slice\n+    /// reference because the pointer is null or unaligned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_len)]\n+    ///\n+    /// use std::ptr;\n+    ///\n+    /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\n+    /// assert_eq!(slice.len(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust: self }.raw }.len\n+    }\n+}\n+\n // Equality for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PartialEq for *const T {"}, {"sha": "3b7e83bf37fa67bcbd8ae70a9300b00a082c7b17", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "patch": "@@ -894,6 +894,34 @@ impl<T: ?Sized> *mut T {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[lang = \"mut_slice_ptr\"]\n+impl<T> *mut [T] {\n+    /// Returns the length of a raw slice.\n+    ///\n+    /// The returned value is the number of **elements**, not the number of bytes.\n+    ///\n+    /// This function is safe, even when the raw slice cannot be cast to a slice\n+    /// reference because the pointer is null or unaligned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_len)]\n+    ///\n+    /// use std::ptr;\n+    ///\n+    /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n+    /// assert_eq!(slice.len(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    pub const fn len(self) -> usize {\n+        unsafe { Repr { rust_mut: self }.raw }.len\n+    }\n+}\n+\n // Equality for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PartialEq for *mut T {"}, {"sha": "53f72804a848d551b5227d4bfe49f70bdb7bf653", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "patch": "@@ -135,6 +135,8 @@ language_item_table! {\n     SliceU8AllocImplItem,        \"slice_u8_alloc\",     slice_u8_alloc_impl,     Target::Impl;\n     ConstPtrImplItem,            \"const_ptr\",          const_ptr_impl,          Target::Impl;\n     MutPtrImplItem,              \"mut_ptr\",            mut_ptr_impl,            Target::Impl;\n+    ConstSlicePtrImplItem,       \"const_slice_ptr\",    const_slice_ptr_impl,    Target::Impl;\n+    MutSlicePtrImplItem,         \"mut_slice_ptr\",      mut_slice_ptr_impl,      Target::Impl;\n     I8ImplItem,                  \"i8\",                 i8_impl,                 Target::Impl;\n     I16ImplItem,                 \"i16\",                i16_impl,                Target::Impl;\n     I32ImplItem,                 \"i32\",                i32_impl,                Target::Impl;"}, {"sha": "9b1c8b9a9c83e62cbd3b9dbceb7596660305dd47", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "patch": "@@ -649,11 +649,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n             }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl }) => {\n-                let lang_def_id = match mutbl {\n-                    hir::Mutability::Not => lang_items.const_ptr_impl(),\n-                    hir::Mutability::Mut => lang_items.mut_ptr_impl(),\n+                let (lang_def_id1, lang_def_id2) = match mutbl {\n+                    hir::Mutability::Not => {\n+                        (lang_items.const_ptr_impl(), lang_items.const_slice_ptr_impl())\n+                    }\n+                    hir::Mutability::Mut => {\n+                        (lang_items.mut_ptr_impl(), lang_items.mut_slice_ptr_impl())\n+                    }\n                 };\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+                self.assemble_inherent_impl_for_primitive(lang_def_id1);\n+                self.assemble_inherent_impl_for_primitive(lang_def_id2);\n             }\n             ty::Int(i) => {\n                 let lang_def_id = match i {"}, {"sha": "2e84173477074de71f8ad5718d53e622a782a961", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "patch": "@@ -112,6 +112,30 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     item.span,\n                 );\n             }\n+            ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Not })\n+                if matches!(inner.kind, ty::Slice(_)) =>\n+            {\n+                self.check_primitive_impl(\n+                    def_id,\n+                    lang_items.const_slice_ptr_impl(),\n+                    None,\n+                    \"const_slice_ptr\",\n+                    \"*const [T]\",\n+                    item.span,\n+                );\n+            }\n+            ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Mut })\n+                if matches!(inner.kind, ty::Slice(_)) =>\n+            {\n+                self.check_primitive_impl(\n+                    def_id,\n+                    lang_items.mut_slice_ptr_impl(),\n+                    None,\n+                    \"mut_slice_ptr\",\n+                    \"*mut [T]\",\n+                    item.span,\n+                );\n+            }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Not }) => {\n                 self.check_primitive_impl(\n                     def_id,"}, {"sha": "c80967a4b33f2b46ef628a0431f605e036469927", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=6b8fb7c48a05241a6f7e8e8ee4ea656739f87a80", "patch": "@@ -62,6 +62,8 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         lang_items.slice_u8_alloc_impl(),\n         lang_items.const_ptr_impl(),\n         lang_items.mut_ptr_impl(),\n+        lang_items.const_slice_ptr_impl(),\n+        lang_items.mut_slice_ptr_impl(),\n     ];\n \n     for def_id in primitive_impls.iter().filter_map(|&def_id| def_id) {"}]}