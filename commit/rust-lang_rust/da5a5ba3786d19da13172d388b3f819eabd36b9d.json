{"sha": "da5a5ba3786d19da13172d388b3f819eabd36b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNWE1YmEzNzg2ZDE5ZGExMzE3MmQzODhiM2Y4MTllYWJkMzZiOWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-20T11:57:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-20T11:57:28Z"}, "message": "Merge #9943\n\n9943: fix: Do not replace items annotated with builtin attrs with the attr input r=Veykril a=Veykril\n\nThis causes runnables to work for paths that actually resolve to the `test` attribute now.\r\n![Code_aUhX1KQfw3](https://user-images.githubusercontent.com/3757771/129917168-bd9ed3f8-3a08-49d2-930a-4b93efaa8acf.png)\r\n\r\nPrior to this we replaced items annotated with builtin attributes by the attribute input instead of the item in our dummy expansion which is why the fully written path didn't work as we actually discarded the item while `test` was just ignored.\r\n\r\nFixes #9935\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "fa86880a3104dec7813e8e972df18ea0d5faa5ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa86880a3104dec7813e8e972df18ea0d5faa5ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5a5ba3786d19da13172d388b3f819eabd36b9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhH5ioCRBK7hj4Ov3rIwAAOFwIAI4tRLf7Oo0BDg0d9pSIzJ57\nyKS1bePNNVV7M4ghvIFDxh/Ubi1u8fFkoWkxHz9TRF/0XF+3iLvXDnF6Dg72EEvk\ngiNeNbunqSB/VGSUUGTv3wDJcz3kNZGWB9zBWMIWXTyhUSKVhht1mc9G8UgpgE1V\nh6ATvHe++nGM6yxFRc4NcfbUmlKquRWzFSVND5TpSFYg3xm+YXosWt4/y6tAzJaJ\n6hr4ibBlNF/+MeEmcHyAkHb+9KDLUWDpa0oiptT7XPNRfFWWL/HNcNQrrE2hanVj\nn997/mDVQJ33HcsEsAJ5xI9ggsLBVXqHlavcJD4ne+GGuRxRIDGszUIjTPLPlsc=\n=R4g1\n-----END PGP SIGNATURE-----\n", "payload": "tree fa86880a3104dec7813e8e972df18ea0d5faa5ae\nparent 8dd3a71730161869d8da3694f3338042efa17d29\nparent 557df6ff3f90196417df7c7a9903c5dfd09a4f47\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629460648 +0000\ncommitter GitHub <noreply@github.com> 1629460648 +0000\n\nMerge #9943\n\n9943: fix: Do not replace items annotated with builtin attrs with the attr input r=Veykril a=Veykril\n\nThis causes runnables to work for paths that actually resolve to the `test` attribute now.\r\n![Code_aUhX1KQfw3](https://user-images.githubusercontent.com/3757771/129917168-bd9ed3f8-3a08-49d2-930a-4b93efaa8acf.png)\r\n\r\nPrior to this we replaced items annotated with builtin attributes by the attribute input instead of the item in our dummy expansion which is why the fully written path didn't work as we actually discarded the item while `test` was just ignored.\r\n\r\nFixes #9935\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5a5ba3786d19da13172d388b3f819eabd36b9d", "html_url": "https://github.com/rust-lang/rust/commit/da5a5ba3786d19da13172d388b3f819eabd36b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5a5ba3786d19da13172d388b3f819eabd36b9d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd3a71730161869d8da3694f3338042efa17d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd3a71730161869d8da3694f3338042efa17d29", "html_url": "https://github.com/rust-lang/rust/commit/8dd3a71730161869d8da3694f3338042efa17d29"}, {"sha": "557df6ff3f90196417df7c7a9903c5dfd09a4f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/557df6ff3f90196417df7c7a9903c5dfd09a4f47", "html_url": "https://github.com/rust-lang/rust/commit/557df6ff3f90196417df7c7a9903c5dfd09a4f47"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "68b52ddbc49383582845317468738dca7d633419", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -173,6 +173,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n     }\n \n+    pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n+        self.imp.find_file(syntax_node.clone()).file_id\n+    }\n+\n     pub fn original_range(&self, node: &SyntaxNode) -> FileRange {\n         self.imp.original_range(node)\n     }"}, {"sha": "6cd185ceeb2cbaa8203a70721ab1f67f58f07a67", "filename": "crates/hir_def/src/builtin_attr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -34,9 +34,6 @@ macro_rules! rustc_attr {\n     };\n }\n \n-/// Built-in macro-like attributes.\n-pub const EXTRA_ATTRIBUTES: &[BuiltinAttribute] = &[\"test\", \"bench\"];\n-\n /// \"Inert\" built-in attributes that have a special meaning to rustc or rustdoc.\n #[rustfmt::skip]\n pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &["}, {"sha": "f8b3c3949f655114bb5f90f6d3b1419dae18f2f2", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -1712,27 +1712,24 @@ impl ModCollector<'_, '_> {\n         if path.kind == PathKind::Plain {\n             if let Some(tool_module) = path.segments().first() {\n                 let tool_module = tool_module.to_string();\n-                if builtin_attr::TOOL_MODULES\n+                let is_tool = builtin_attr::TOOL_MODULES\n                     .iter()\n                     .copied()\n-                    .chain(self.def_collector.registered_tools.iter().map(|s| &**s))\n-                    .any(|m| tool_module == *m)\n-                {\n+                    .chain(self.def_collector.registered_tools.iter().map(AsRef::as_ref))\n+                    .any(|m| tool_module == *m);\n+                if is_tool {\n                     return true;\n                 }\n             }\n \n             if let Some(name) = path.as_ident() {\n                 let name = name.to_string();\n-                if builtin_attr::INERT_ATTRIBUTES\n+                let is_inert = builtin_attr::INERT_ATTRIBUTES\n                     .iter()\n-                    .chain(builtin_attr::EXTRA_ATTRIBUTES)\n                     .copied()\n-                    .chain(self.def_collector.registered_attrs.iter().map(|s| &**s))\n-                    .any(|attr| name == *attr)\n-                {\n-                    return true;\n-                }\n+                    .chain(self.def_collector.registered_attrs.iter().map(AsRef::as_ref))\n+                    .any(|attr| name == *attr);\n+                return is_inert;\n             }\n         }\n "}, {"sha": "5764c682be764178e89e71a16cd78c54617d0186", "filename": "crates/hir_expand/src/builtin_attr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -17,11 +17,12 @@ macro_rules! register_builtin {\n                 db: &dyn AstDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n+                item: &tt::Subtree,\n             ) -> Result<tt::Subtree, mbe::ExpandError> {\n                 let expander = match *self {\n                     $( BuiltinAttrExpander::$variant => $expand, )*\n                 };\n-                expander(db, id, tt)\n+                expander(db, id, tt, item)\n             }\n \n             fn find_by_name(name: &name::Name) -> Option<Self> {\n@@ -61,7 +62,8 @@ pub fn find_builtin_attr(\n fn dummy_attr_expand(\n     _db: &dyn AstDatabase,\n     _id: MacroCallId,\n-    tt: &tt::Subtree,\n+    _tt: &tt::Subtree,\n+    item: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    Ok(tt.clone())\n+    Ok(item.clone())\n }"}, {"sha": "e806208e16d41331fbfc15248e87f4b681a84637", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -54,7 +54,12 @@ impl TokenExpander {\n             TokenExpander::MacroDef { mac, .. } => mac.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n             // FIXME switch these to ExpandResult as well\n-            TokenExpander::BuiltinAttr(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::BuiltinAttr(it) => match db.macro_arg(id) {\n+                Some(macro_arg) => it.expand(db, id, tt, &macro_arg.0).into(),\n+                None => mbe::ExpandResult::only_err(\n+                    mbe::ExpandError::Other(\"No item argument for attribute\".to_string()).into(),\n+                ),\n+            },\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n             TokenExpander::ProcMacro(_) => {\n                 // We store the result in salsa db to prevent non-deterministic behavior in"}, {"sha": "4c09b2ab1951b9fbc53e142ee670d2c94125a764", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -22,7 +22,7 @@ use either::Either;\n pub use mbe::{ExpandError, ExpandResult};\n pub use parser::FragmentKind;\n \n-use std::{hash::Hash, sync::Arc};\n+use std::{hash::Hash, iter, sync::Arc};\n \n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n@@ -454,7 +454,7 @@ impl InFile<SyntaxNode> {\n         self,\n         db: &dyn db::AstDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n-        std::iter::successors(Some(self), move |node| match node.value.parent() {\n+        iter::successors(Some(self), move |node| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n             None => {\n                 let parent_node = node.file_id.call_node(db)?;\n@@ -562,6 +562,23 @@ impl<N: AstNode> InFile<N> {\n     pub fn syntax(&self) -> InFile<&SyntaxNode> {\n         self.with_value(self.value.syntax())\n     }\n+\n+    pub fn nodes_with_attributes<'db>(\n+        self,\n+        db: &'db dyn db::AstDatabase,\n+    ) -> impl Iterator<Item = InFile<N>> + 'db\n+    where\n+        N: 'db,\n+    {\n+        iter::successors(Some(self), move |node| {\n+            let InFile { file_id, value } = node.file_id.call_node(db)?;\n+            N::cast(value).map(|n| InFile::new(file_id, n))\n+        })\n+    }\n+\n+    pub fn node_with_attributes(self, db: &dyn db::AstDatabase) -> InFile<N> {\n+        self.nodes_with_attributes(db).last().unwrap()\n+    }\n }\n \n /// Given a `MacroCallId`, return what `FragmentKind` it belongs to."}, {"sha": "d2350db037720213c9f99d9a42fbb104b99ec263", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a5ba3786d19da13172d388b3f819eabd36b9d/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=da5a5ba3786d19da13172d388b3f819eabd36b9d", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use ast::NameOwner;\n use cfg::CfgExpr;\n use either::Either;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n+use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, InFile, Semantics};\n use ide_assists::utils::test_related_attribute;\n use ide_db::{\n     base_db::{FilePosition, FileRange},\n@@ -232,22 +232,26 @@ fn find_related_tests(\n             let functions = refs.iter().filter_map(|(range, _)| {\n                 let token = file.token_at_offset(range.start()).next()?;\n                 let token = sema.descend_into_macros(token);\n-                token.ancestors().find_map(ast::Fn::cast)\n+                token\n+                    .ancestors()\n+                    .find_map(ast::Fn::cast)\n+                    .map(|f| hir::InFile::new(sema.hir_file_for(f.syntax()), f))\n             });\n \n             for fn_def in functions {\n-                if let Some(runnable) = as_test_runnable(sema, &fn_def) {\n+                // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+                let InFile { value: fn_def, .. } = &fn_def.node_with_attributes(sema.db);\n+                if let Some(runnable) = as_test_runnable(sema, fn_def) {\n                     // direct test\n                     tests.insert(runnable);\n-                } else if let Some(module) = parent_test_module(sema, &fn_def) {\n+                } else if let Some(module) = parent_test_module(sema, fn_def) {\n                     // indirect test\n-                    find_related_tests_in_module(sema, &fn_def, &module, tests);\n+                    find_related_tests_in_module(sema, fn_def, &module, tests);\n                 }\n             }\n         }\n     }\n }\n-\n fn find_related_tests_in_module(\n     sema: &Semantics<RootDatabase>,\n     fn_def: &ast::Fn,\n@@ -292,7 +296,8 @@ fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Optio\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n-    let func = def.source(sema.db)?;\n+    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+    let func = def.source(sema.db)?.node_with_attributes(sema.db);\n     let name_string = def.name(sema.db).to_string();\n \n     let root = def.module(sema.db).krate().root_module(sema.db);\n@@ -499,6 +504,8 @@ fn has_test_function_or_multiple_test_submodules(\n         match item {\n             hir::ModuleDef::Function(f) => {\n                 if let Some(it) = f.source(sema.db) {\n+                    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+                    let it = it.node_with_attributes(sema.db);\n                     if test_related_attribute(&it.value).is_some() {\n                         return true;\n                     }"}]}