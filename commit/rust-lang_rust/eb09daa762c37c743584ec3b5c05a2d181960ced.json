{"sha": "eb09daa762c37c743584ec3b5c05a2d181960ced", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDlkYWE3NjJjMzdjNzQzNTg0ZWMzYjVjMDVhMmQxODE5NjBjZWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-07T15:29:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-12T17:27:29Z"}, "message": "Hygienize macros in the standard library", "tree": {"sha": "dffa7d660bbebb3ec53ff8524ad3ac9b83b72d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dffa7d660bbebb3ec53ff8524ad3ac9b83b72d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb09daa762c37c743584ec3b5c05a2d181960ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb09daa762c37c743584ec3b5c05a2d181960ced", "html_url": "https://github.com/rust-lang/rust/commit/eb09daa762c37c743584ec3b5c05a2d181960ced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb09daa762c37c743584ec3b5c05a2d181960ced/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ddd1615419be89828fb5628e3c14af86c08b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ddd1615419be89828fb5628e3c14af86c08b01", "html_url": "https://github.com/rust-lang/rust/commit/24ddd1615419be89828fb5628e3c14af86c08b01"}], "stats": {"total": 73, "additions": 26, "deletions": 47}, "files": [{"sha": "250c419c531f8030a1045b6303d5e947a4a5d6d8", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -42,7 +42,7 @@ macro_rules! vec {\n     ($($x:expr),*) => (\n         <[_]>::into_vec(box [$($x),*])\n     );\n-    ($($x:expr,)*) => (vec![$($x),*])\n+    ($($x:expr,)*) => ($crate::vec![$($x),*])\n }\n \n // HACK(japaric): with cfg(test) the inherent `[T]::into_vec` method, which is"}, {"sha": "8b44025f91f5e710f88141df83c262f13661c3af", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -6,13 +6,13 @@\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n-        panic!(\"explicit panic\")\n+        $crate::panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n         $crate::panicking::panic(&($msg, file!(), line!(), __rust_unstable_column!()))\n     });\n     ($msg:expr,) => (\n-        panic!($msg)\n+        $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*),\n@@ -58,7 +58,7 @@ macro_rules! assert_eq {\n         }\n     });\n     ($left:expr, $right:expr,) => ({\n-        assert_eq!($left, $right)\n+        $crate::assert_eq!($left, $right)\n     });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n@@ -115,7 +115,7 @@ macro_rules! assert_ne {\n         }\n     });\n     ($left:expr, $right:expr,) => {\n-        assert_ne!($left, $right)\n+        $crate::assert_ne!($left, $right)\n     };\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n@@ -208,7 +208,7 @@ macro_rules! debug_assert {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n \n /// Asserts that two expressions are not equal to each other.\n@@ -235,7 +235,7 @@ macro_rules! debug_assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! debug_assert_ne {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_ne!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n /// Unwraps a result or propagates its error.\n@@ -310,7 +310,7 @@ macro_rules! r#try {\n             return $crate::result::Result::Err($crate::convert::From::from(err))\n         }\n     });\n-    ($expr:expr,) => (r#try!($expr));\n+    ($expr:expr,) => ($crate::r#try!($expr));\n }\n \n /// Writes formatted data into a buffer.\n@@ -425,10 +425,10 @@ macro_rules! write {\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n     ($dst:expr) => (\n-        write!($dst, \"\\n\")\n+        $crate::write!($dst, \"\\n\")\n     );\n     ($dst:expr,) => (\n-        writeln!($dst)\n+        $crate::writeln!($dst)\n     );\n     ($dst:expr, $($arg:tt)*) => (\n         $dst.write_fmt(format_args_nl!($($arg)*))\n@@ -494,10 +494,10 @@ macro_rules! unreachable {\n         panic!(\"internal error: entered unreachable code\")\n     });\n     ($msg:expr) => ({\n-        unreachable!(\"{}\", $msg)\n+        $crate::unreachable!(\"{}\", $msg)\n     });\n     ($msg:expr,) => ({\n-        unreachable!($msg)\n+        $crate::unreachable!($msg)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         panic!(concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)"}, {"sha": "ef1b549d1dcf4db4d467316b8236f596bf8ce5e4", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -56,13 +56,13 @@\n #[allow_internal_unstable(__rust_unstable_column, libstd_sys_internals)]\n macro_rules! panic {\n     () => ({\n-        panic!(\"explicit panic\")\n+        $crate::panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n         $crate::rt::begin_panic($msg, &(file!(), line!(), __rust_unstable_column!()))\n     });\n     ($msg:expr,) => ({\n-        panic!($msg)\n+        $crate::panic!($msg)\n     });\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+),\n@@ -145,7 +145,7 @@ macro_rules! print {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! println {\n-    () => (print!(\"\\n\"));\n+    () => ($crate::print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n         $crate::io::_print(format_args_nl!($($arg)*));\n     })\n@@ -204,7 +204,7 @@ macro_rules! eprint {\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! eprintln {\n-    () => (eprint!(\"\\n\"));\n+    () => ($crate::eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n         $crate::io::_eprint(format_args_nl!($($arg)*));\n     })\n@@ -337,23 +337,23 @@ macro_rules! eprintln {\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     () => {\n-        eprintln!(\"[{}:{}]\", file!(), line!());\n+        $crate::eprintln!(\"[{}:{}]\", file!(), line!());\n     };\n     ($val:expr) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n             tmp => {\n-                eprintln!(\"[{}:{}] {} = {:#?}\",\n+                $crate::eprintln!(\"[{}:{}] {} = {:#?}\",\n                     file!(), line!(), stringify!($val), &tmp);\n                 tmp\n             }\n         }\n     };\n     // Trailing comma with single argument is ignored\n-    ($val:expr,) => { dbg!($val) };\n+    ($val:expr,) => { $crate::dbg!($val) };\n     ($($val:expr),+ $(,)?) => {\n-        ($(dbg!($val)),+,)\n+        ($($crate::dbg!($val)),+,)\n     };\n }\n "}, {"sha": "890c8307543f337266f113734da2784e3be16a47", "filename": "src/test/ui/hygiene/no_implicit_prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -13,7 +13,7 @@ mod bar {\n     }\n     fn f() {\n         ::foo::m!();\n-        println!(); //~ ERROR cannot find macro `print!` in this scope\n+        assert_eq!(0, 0); //~ ERROR cannot find macro `panic!` in this scope\n     }\n }\n "}, {"sha": "737b375ed89712d26cccfaa7fb0705ac9b2abfb1", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -7,11 +7,11 @@ LL |     fn f() { ::bar::m!(); }\n LL |         Vec::new();\n    |         ^^^ use of undeclared type or module `Vec`\n \n-error: cannot find macro `print!` in this scope\n+error: cannot find macro `panic!` in this scope\n   --> $DIR/no_implicit_prelude.rs:16:9\n    |\n-LL |         println!();\n-   |         ^^^^^^^^^^^\n+LL |         assert_eq!(0, 0);\n+   |         ^^^^^^^^^^^^^^^^^\n    |\n    = help: have you added the `#[macro_use]` on the module/import?\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "29e9b8ec841f54661233112fcbb236606490a9df", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -33,7 +33,6 @@ mod inner2 {\n \n fn main() {\n     panic!(); //~ ERROR `panic` is ambiguous\n-              //~| ERROR `panic` is ambiguous\n }\n \n mod inner3 {"}, {"sha": "13d3227d8b38f3283c0919e9e81f5bee963648f8", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb09daa762c37c743584ec3b5c05a2d181960ced/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=eb09daa762c37c743584ec3b5c05a2d181960ced", "patch": "@@ -22,7 +22,7 @@ LL | use inner1::*;\n    = help: consider adding an explicit import of `exported` to disambiguate\n \n error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n    |\n LL | include!();\n    | ^^^^^^^ ambiguous name\n@@ -59,26 +59,6 @@ LL |       define_panic!();\n    |       ---------------- in this macro invocation\n    = help: use `crate::panic` to refer to this macro unambiguously\n \n-error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:35:5\n-   |\n-LL |     panic!();\n-   |     ^^^^^^^^^ ambiguous name\n-   |\n-   = note: `panic` could refer to a macro from prelude\n-note: `panic` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:11:5\n-   |\n-LL | /     macro_rules! panic {\n-LL | |         () => ()\n-LL | |     }\n-   | |_____^\n-...\n-LL |       define_panic!();\n-   |       ---------------- in this macro invocation\n-   = help: use `crate::panic` to refer to this macro unambiguously\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}]}