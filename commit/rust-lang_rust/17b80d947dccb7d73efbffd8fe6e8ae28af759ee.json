{"sha": "17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YjgwZDk0N2RjY2I3ZDczZWZiZmZkOGZlNmU4YWUyOGFmNzU5ZWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T02:42:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T02:42:55Z"}, "message": "Rollup merge of #73347 - tmiasko:incompatible-sanitizers, r=nikic\n\nDiagnose use of incompatible sanitizers\n\nEmit an error when incompatible sanitizer are configured through command\nline options. Previously the last one configured prevailed and others\nwere silently ignored.\n\nAdditionally use a set to represent configured sanitizers, making it\npossible to enable multiple sanitizers at once. At least in principle,\nsince currently all of them are considered to be incompatible with\nothers.", "tree": {"sha": "652ff7e09b1e54ce928ee1911a658b6bbd3247cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652ff7e09b1e54ce928ee1911a658b6bbd3247cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7XevCRBK7hj4Ov3rIwAAdHIIAKC/iU3wTKjEktLxyYZpuxd+\nb45O4MtKB8VJkYJvP7HDCHi0u85c+ccL8vJGsWeo+/EADlyXiIwTJNrbpaF2TYQ2\nS9VFwGwcUqL7Ecv9ZreN82ZyQV7RwwNkjr/lFaojoZvkcUqACQ6YOd3X9gLyJpvg\nQ2jzFllkNiQQT0WuL/lGW0WMpoLTUdcmDcixj2R7MH6Vb1GWqiB56FkG2pgcm1r+\n+Bf7zl9nTTuwVmb/YgRLLr8MmklqpXSLEtebOBrwlPsGaBI6If7RzX8xst2nf+jS\nOD026TZh/4ZrA5rhiStFSFVQLZVcCI/B/tomfziwgM0CfW6NJpc6ZP2jfP/nTWs=\n=vhNZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 652ff7e09b1e54ce928ee1911a658b6bbd3247cd\nparent 2d1bd57e60a141fc2a460539b69e228cc1d7010e\nparent 0a65f280c8eac844a74b758822ca52e8763a1d5d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592620975 -0700\ncommitter GitHub <noreply@github.com> 1592620975 -0700\n\nRollup merge of #73347 - tmiasko:incompatible-sanitizers, r=nikic\n\nDiagnose use of incompatible sanitizers\n\nEmit an error when incompatible sanitizer are configured through command\nline options. Previously the last one configured prevailed and others\nwere silently ignored.\n\nAdditionally use a set to represent configured sanitizers, making it\npossible to enable multiple sanitizers at once. At least in principle,\nsince currently all of them are considered to be incompatible with\nothers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "html_url": "https://github.com/rust-lang/rust/commit/17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1bd57e60a141fc2a460539b69e228cc1d7010e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1bd57e60a141fc2a460539b69e228cc1d7010e", "html_url": "https://github.com/rust-lang/rust/commit/2d1bd57e60a141fc2a460539b69e228cc1d7010e"}, {"sha": "0a65f280c8eac844a74b758822ca52e8763a1d5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a65f280c8eac844a74b758822ca52e8763a1d5d", "html_url": "https://github.com/rust-lang/rust/commit/0a65f280c8eac844a74b758822ca52e8763a1d5d"}], "stats": {"total": 426, "additions": 212, "deletions": 214}, "files": [{"sha": "230de05089bd92103475e99f227f46983be4f230", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -4278,6 +4278,7 @@ dependencies = [\n name = \"rustc_session\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n  \"getopts\",\n  \"log\",\n  \"num_cpus\","}, {"sha": "5e2e04c063bc483abff4700462958c6791e9573a", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -12,8 +12,7 @@ This feature allows for use of one of following sanitizers:\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=leak`,\n-`-Zsanitizer=memory` or `-Zsanitizer=thread`. Only a single sanitizer can be\n-enabled at a time.\n+`-Zsanitizer=memory` or `-Zsanitizer=thread`.\n \n # AddressSanitizer\n "}, {"sha": "6234ade8a161205165309340872ea6d00ad5e3c6", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{OptLevel, Sanitizer};\n+use rustc_session::config::{OptLevel, SanitizerSet};\n use rustc_session::Session;\n \n use crate::attributes;\n@@ -45,26 +45,16 @@ fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n \n /// Apply LLVM sanitize attributes.\n #[inline]\n-pub fn sanitize(cx: &CodegenCx<'ll, '_>, codegen_fn_flags: CodegenFnAttrFlags, llfn: &'ll Value) {\n-    if let Some(ref sanitizer) = cx.tcx.sess.opts.debugging_opts.sanitizer {\n-        match *sanitizer {\n-            Sanitizer::Address => {\n-                if !codegen_fn_flags.contains(CodegenFnAttrFlags::NO_SANITIZE_ADDRESS) {\n-                    llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n-                }\n-            }\n-            Sanitizer::Memory => {\n-                if !codegen_fn_flags.contains(CodegenFnAttrFlags::NO_SANITIZE_MEMORY) {\n-                    llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n-                }\n-            }\n-            Sanitizer::Thread => {\n-                if !codegen_fn_flags.contains(CodegenFnAttrFlags::NO_SANITIZE_THREAD) {\n-                    llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n-                }\n-            }\n-            Sanitizer::Leak => {}\n-        }\n+pub fn sanitize(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &'ll Value) {\n+    let enabled = cx.tcx.sess.opts.debugging_opts.sanitizer - no_sanitize;\n+    if enabled.contains(SanitizerSet::ADDRESS) {\n+        llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n+    }\n+    if enabled.contains(SanitizerSet::MEMORY) {\n+        llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n+    }\n+    if enabled.contains(SanitizerSet::THREAD) {\n+        llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n     }\n }\n \n@@ -123,9 +113,14 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // Currently stack probes seem somewhat incompatible with the address\n     // sanitizer and thread sanitizer. With asan we're already protected from\n     // stack overflow anyway so we don't really need stack probes regardless.\n-    match cx.sess().opts.debugging_opts.sanitizer {\n-        Some(Sanitizer::Address | Sanitizer::Thread) => return,\n-        _ => {}\n+    if cx\n+        .sess()\n+        .opts\n+        .debugging_opts\n+        .sanitizer\n+        .intersects(SanitizerSet::ADDRESS | SanitizerSet::THREAD)\n+    {\n+        return;\n     }\n \n     // probestack doesn't play nice either with `-C profile-generate`.\n@@ -296,7 +291,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n-    sanitize(cx, codegen_fn_attrs.flags, llfn);\n+    sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated"}, {"sha": "868ce876a8192e76a0bbdf315cf821279794dce8", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -21,7 +21,7 @@ use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n+use rustc_session::config::{self, Lto, OutputType, Passes, SanitizerSet, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::InnerSpan;\n use rustc_target::spec::{CodeModel, RelocModel};\n@@ -394,12 +394,13 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     let is_lto = opt_stage == llvm::OptStage::ThinLTO || opt_stage == llvm::OptStage::FatLTO;\n     // Sanitizer instrumentation is only inserted during the pre-link optimization stage.\n     let sanitizer_options = if !is_lto {\n-        config.sanitizer.as_ref().map(|s| llvm::SanitizerOptions {\n-            sanitize_memory: *s == Sanitizer::Memory,\n-            sanitize_thread: *s == Sanitizer::Thread,\n-            sanitize_address: *s == Sanitizer::Address,\n-            sanitize_recover: config.sanitizer_recover.contains(s),\n+        Some(llvm::SanitizerOptions {\n+            sanitize_address: config.sanitizer.contains(SanitizerSet::ADDRESS),\n+            sanitize_address_recover: config.sanitizer_recover.contains(SanitizerSet::ADDRESS),\n+            sanitize_memory: config.sanitizer.contains(SanitizerSet::MEMORY),\n+            sanitize_memory_recover: config.sanitizer_recover.contains(SanitizerSet::MEMORY),\n             sanitize_memory_track_origins: config.sanitizer_memory_track_origins as c_int,\n+            sanitize_thread: config.sanitizer.contains(SanitizerSet::THREAD),\n         })\n     } else {\n         None\n@@ -600,25 +601,18 @@ pub(crate) unsafe fn optimize(\n }\n \n unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static mut llvm::Pass>) {\n-    let sanitizer = match &config.sanitizer {\n-        None => return,\n-        Some(s) => s,\n-    };\n-\n-    let recover = config.sanitizer_recover.contains(sanitizer);\n-    match sanitizer {\n-        Sanitizer::Address => {\n-            passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(recover));\n-            passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(recover));\n-        }\n-        Sanitizer::Memory => {\n-            let track_origins = config.sanitizer_memory_track_origins as c_int;\n-            passes.push(llvm::LLVMRustCreateMemorySanitizerPass(track_origins, recover));\n-        }\n-        Sanitizer::Thread => {\n-            passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n-        }\n-        Sanitizer::Leak => {}\n+    if config.sanitizer.contains(SanitizerSet::ADDRESS) {\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::ADDRESS);\n+        passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(recover));\n+        passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(recover));\n+    }\n+    if config.sanitizer.contains(SanitizerSet::MEMORY) {\n+        let track_origins = config.sanitizer_memory_track_origins as c_int;\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::MEMORY);\n+        passes.push(llvm::LLVMRustCreateMemorySanitizerPass(track_origins, recover));\n+    }\n+    if config.sanitizer.contains(SanitizerSet::THREAD) {\n+        passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n     }\n }\n "}, {"sha": "e99fb8dcae1e512d41048d144e3db5c788b8a882", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -29,12 +29,12 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::dep_graph;\n-use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::DebugInfo;\n+use rustc_session::config::{DebugInfo, SanitizerSet};\n use rustc_span::symbol::Symbol;\n \n use std::ffi::CString;\n@@ -132,7 +132,7 @@ pub fn compile_codegen_unit(\n             // If this codegen unit contains the main function, also create the\n             // wrapper here\n             if let Some(entry) = maybe_create_entry_wrapper::<Builder<'_, '_, '_>>(&cx) {\n-                attributes::sanitize(&cx, CodegenFnAttrFlags::empty(), entry);\n+                attributes::sanitize(&cx, SanitizerSet::empty(), entry);\n             }\n \n             // Run replace-all-uses-with for statics that need it"}, {"sha": "8063d97aa73a9706d36c92c86827b5130e874559", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -439,11 +439,12 @@ pub enum OptStage {\n /// LLVMRustSanitizerOptions\n #[repr(C)]\n pub struct SanitizerOptions {\n-    pub sanitize_memory: bool,\n-    pub sanitize_thread: bool,\n     pub sanitize_address: bool,\n-    pub sanitize_recover: bool,\n+    pub sanitize_address_recover: bool,\n+    pub sanitize_memory: bool,\n+    pub sanitize_memory_recover: bool,\n     pub sanitize_memory_track_origins: c_int,\n+    pub sanitize_thread: bool,\n }\n \n /// LLVMRelocMode"}, {"sha": "c7a58d9f2a2f6de03afc3cee6d02c7e46d6cac83", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource, NativeLib};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n-use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, Sanitizer};\n+use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SanitizerSet};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n@@ -766,23 +766,26 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n-fn link_sanitizer_runtime(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n-    let sanitizer = match &sess.opts.debugging_opts.sanitizer {\n-        Some(s) => s,\n-        None => return,\n-    };\n-\n+fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     if crate_type != CrateType::Executable {\n         return;\n     }\n+    let sanitizer = sess.opts.debugging_opts.sanitizer;\n+    if sanitizer.contains(SanitizerSet::ADDRESS) {\n+        link_sanitizer_runtime(sess, linker, \"asan\");\n+    }\n+    if sanitizer.contains(SanitizerSet::LEAK) {\n+        link_sanitizer_runtime(sess, linker, \"lsan\");\n+    }\n+    if sanitizer.contains(SanitizerSet::MEMORY) {\n+        link_sanitizer_runtime(sess, linker, \"msan\");\n+    }\n+    if sanitizer.contains(SanitizerSet::THREAD) {\n+        link_sanitizer_runtime(sess, linker, \"tsan\");\n+    }\n+}\n \n-    let name = match sanitizer {\n-        Sanitizer::Address => \"asan\",\n-        Sanitizer::Leak => \"lsan\",\n-        Sanitizer::Memory => \"msan\",\n-        Sanitizer::Thread => \"tsan\",\n-    };\n-\n+fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n     let default_sysroot = filesearch::get_or_default_sysroot();\n     let default_tlib =\n         filesearch::make_target_lib_path(&default_sysroot, sess.opts.target_triple.triple());\n@@ -1555,9 +1558,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia && crate_type == CrateType::Executable {\n-        let prefix = match sess.opts.debugging_opts.sanitizer {\n-            Some(Sanitizer::Address) => \"asan/\",\n-            _ => \"\",\n+        let prefix = if sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n+            \"asan/\"\n+        } else {\n+            \"\"\n         };\n         cmd.arg(format!(\"--dynamic-linker={}ld.so.1\", prefix));\n     }\n@@ -1581,7 +1585,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // OBJECT-FILES-YES, AUDIT-ORDER\n-    link_sanitizer_runtime(sess, crate_type, cmd);\n+    link_sanitizers(sess, crate_type, cmd);\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // Linker plugins should be specified early in the list of arguments"}, {"sha": "217ad57ddc9c399eb70607cbbeb51ec2ef65c5bd", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{SymbolName, TyCtxt};\n-use rustc_session::config::{CrateType, Sanitizer};\n+use rustc_session::config::{CrateType, SanitizerSet};\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types())\n@@ -204,7 +204,7 @@ fn exported_symbols_provider_local(\n         }));\n     }\n \n-    if let Some(Sanitizer::Memory) = tcx.sess.opts.debugging_opts.sanitizer {\n+    if tcx.sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n         // Similar to profiling, preserve weak msan symbol during LTO.\n         const MSAN_WEAK_SYMBOLS: [&str; 2] = [\"__msan_track_origins\", \"__msan_keep_going\"];\n "}, {"sha": "23e0b9344ec91c2f0e3e8af4c8606a9694832714", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -29,7 +29,7 @@ use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n-use rustc_session::config::{Passes, Sanitizer, SwitchWithOptPath};\n+use rustc_session::config::{Passes, SanitizerSet, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n@@ -86,8 +86,8 @@ pub struct ModuleConfig {\n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n \n-    pub sanitizer: Option<Sanitizer>,\n-    pub sanitizer_recover: Vec<Sanitizer>,\n+    pub sanitizer: SanitizerSet,\n+    pub sanitizer_recover: SanitizerSet,\n     pub sanitizer_memory_track_origins: usize,\n \n     // Flags indicating which outputs to produce.\n@@ -195,10 +195,10 @@ impl ModuleConfig {\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n \n-            sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer.clone(), None),\n+            sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer, SanitizerSet::empty()),\n             sanitizer_recover: if_regular!(\n-                sess.opts.debugging_opts.sanitizer_recover.clone(),\n-                vec![]\n+                sess.opts.debugging_opts.sanitizer_recover,\n+                SanitizerSet::empty()\n             ),\n             sanitizer_memory_track_origins: if_regular!(\n                 sess.opts.debugging_opts.sanitizer_memory_track_origins,"}, {"sha": "a832c2decaaf6b0c3ebce274561f176297c0fa0e", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -6,7 +6,9 @@ use rustc_session::config::Strip;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n-use rustc_session::config::{Externs, OutputType, OutputTypes, Sanitizer, SymbolManglingVersion};\n+use rustc_session::config::{\n+    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion,\n+};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::NativeLibKind;\n@@ -569,9 +571,9 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(report_delayed_bugs, true);\n     tracked!(run_dsymutil, false);\n-    tracked!(sanitizer, Some(Sanitizer::Address));\n+    tracked!(sanitizer, SanitizerSet::ADDRESS);\n     tracked!(sanitizer_memory_track_origins, 2);\n-    tracked!(sanitizer_recover, vec![Sanitizer::Address]);\n+    tracked!(sanitizer_recover, SanitizerSet::ADDRESS);\n     tracked!(saturating_float_casts, Some(true));\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));"}, {"sha": "d2749f8529bed5b34baf7aa92ef5cff4b93d17ab", "filename": "src/librustc_middle/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -1,5 +1,6 @@\n use crate::mir::mono::Linkage;\n use rustc_attr::{InlineAttr, OptimizeAttr};\n+use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n@@ -30,6 +31,9 @@ pub struct CodegenFnAttrs {\n     /// The `#[link_section = \"...\"]` attribute, or what executable section this\n     /// should be placed in.\n     pub link_section: Option<Symbol>,\n+    /// The `#[no_sanitize(...)]` attribute. Indicates sanitizers for which\n+    /// instrumentation should be disabled inside the annotated function.\n+    pub no_sanitize: SanitizerSet,\n }\n \n bitflags! {\n@@ -69,20 +73,12 @@ bitflags! {\n         const FFI_RETURNS_TWICE         = 1 << 10;\n         /// `#[track_caller]`: allow access to the caller location\n         const TRACK_CALLER              = 1 << 11;\n-        /// `#[no_sanitize(address)]`: disables address sanitizer instrumentation\n-        const NO_SANITIZE_ADDRESS = 1 << 12;\n-        /// `#[no_sanitize(memory)]`: disables memory sanitizer instrumentation\n-        const NO_SANITIZE_MEMORY  = 1 << 13;\n-        /// `#[no_sanitize(thread)]`: disables thread sanitizer instrumentation\n-        const NO_SANITIZE_THREAD  = 1 << 14;\n-        /// All `#[no_sanitize(...)]` attributes.\n-        const NO_SANITIZE_ANY = Self::NO_SANITIZE_ADDRESS.bits | Self::NO_SANITIZE_MEMORY.bits | Self::NO_SANITIZE_THREAD.bits;\n         /// #[ffi_pure]: applies clang's `pure` attribute to a foreign function\n         /// declaration.\n-        const FFI_PURE = 1 << 15;\n+        const FFI_PURE                  = 1 << 12;\n         /// #[ffi_const]: applies clang's `const` attribute to a foreign function\n         /// declaration.\n-        const FFI_CONST = 1 << 16;\n+        const FFI_CONST                 = 1 << 13;\n     }\n }\n \n@@ -98,6 +94,7 @@ impl CodegenFnAttrs {\n             target_features: vec![],\n             linkage: None,\n             link_section: None,\n+            no_sanitize: SanitizerSet::empty(),\n         }\n     }\n "}, {"sha": "068d055fa78f83311e3d5fdaf329824afb7048bf", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n-use rustc_session::config::Sanitizer;\n use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -232,24 +231,8 @@ impl Inliner<'tcx> {\n \n         // Avoid inlining functions marked as no_sanitize if sanitizer is enabled,\n         // since instrumentation might be enabled and performed on the caller.\n-        match self.tcx.sess.opts.debugging_opts.sanitizer {\n-            Some(Sanitizer::Address) => {\n-                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_ADDRESS) {\n-                    return false;\n-                }\n-            }\n-            Some(Sanitizer::Memory) => {\n-                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_MEMORY) {\n-                    return false;\n-                }\n-            }\n-            Some(Sanitizer::Thread) => {\n-                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_THREAD) {\n-                    return false;\n-                }\n-            }\n-            Some(Sanitizer::Leak) => {}\n-            None => {}\n+        if self.tcx.sess.opts.debugging_opts.sanitizer.intersects(codegen_fn_attrs.no_sanitize) {\n+            return false;\n         }\n \n         let hinted = match codegen_fn_attrs.inline {"}, {"sha": "abce7359c0ed73be6b932470bf29ac83513483bd", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -9,6 +9,7 @@ name = \"rustc_session\"\n path = \"lib.rs\"\n \n [dependencies]\n+bitflags = \"1.2.1\"\n getopts = \"0.2\"\n log = \"0.4\"\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "53cec04083696ebc96ace52678ade1aa10827cb4", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -10,6 +10,7 @@ use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use rustc_target::spec::{Target, TargetTriple};\n \n@@ -37,35 +38,55 @@ pub struct Config {\n     pub ptr_width: u32,\n }\n \n-#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n-pub enum Sanitizer {\n-    Address,\n-    Leak,\n-    Memory,\n-    Thread,\n+bitflags! {\n+    #[derive(Default, RustcEncodable, RustcDecodable)]\n+    pub struct SanitizerSet: u8 {\n+        const ADDRESS = 1 << 0;\n+        const LEAK    = 1 << 1;\n+        const MEMORY  = 1 << 2;\n+        const THREAD  = 1 << 3;\n+    }\n }\n \n-impl fmt::Display for Sanitizer {\n+/// Formats a sanitizer set as a comma separated list of sanitizers' names.\n+impl fmt::Display for SanitizerSet {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {\n-            Sanitizer::Address => \"address\".fmt(f),\n-            Sanitizer::Leak => \"leak\".fmt(f),\n-            Sanitizer::Memory => \"memory\".fmt(f),\n-            Sanitizer::Thread => \"thread\".fmt(f),\n+        let mut first = true;\n+        for s in *self {\n+            let name = match s {\n+                SanitizerSet::ADDRESS => \"address\",\n+                SanitizerSet::LEAK => \"leak\",\n+                SanitizerSet::MEMORY => \"memory\",\n+                SanitizerSet::THREAD => \"thread\",\n+                _ => panic!(\"unrecognized sanitizer {:?}\", s),\n+            };\n+            if !first {\n+                f.write_str(\",\")?;\n+            }\n+            f.write_str(name)?;\n+            first = false;\n         }\n+        Ok(())\n     }\n }\n \n-impl FromStr for Sanitizer {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Sanitizer, ()> {\n-        match s {\n-            \"address\" => Ok(Sanitizer::Address),\n-            \"leak\" => Ok(Sanitizer::Leak),\n-            \"memory\" => Ok(Sanitizer::Memory),\n-            \"thread\" => Ok(Sanitizer::Thread),\n-            _ => Err(()),\n-        }\n+impl IntoIterator for SanitizerSet {\n+    type Item = SanitizerSet;\n+    type IntoIter = std::vec::IntoIter<SanitizerSet>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD]\n+            .iter()\n+            .copied()\n+            .filter(|&s| self.contains(s))\n+            .collect::<Vec<_>>()\n+            .into_iter()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for SanitizerSet {\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.bits().hash_stable(ctx, hasher);\n     }\n }\n \n@@ -726,10 +747,12 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n             }\n         }\n     }\n-    if let Some(s) = &sess.opts.debugging_opts.sanitizer {\n+\n+    for s in sess.opts.debugging_opts.sanitizer {\n         let symbol = Symbol::intern(&s.to_string());\n         ret.insert((sym::sanitize, Some(symbol)));\n     }\n+\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }\n@@ -1995,7 +2018,7 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, LinkerPluginLto, LtoCli, OptLevel,\n-        OutputTypes, Passes, Sanitizer, SourceFileHashAlgorithm, SwitchWithOptPath,\n+        OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm, SwitchWithOptPath,\n         SymbolManglingVersion,\n     };\n     use crate::lint;\n@@ -2069,8 +2092,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n     impl_dep_tracking_hash_via_hash!(NativeLibKind);\n-    impl_dep_tracking_hash_via_hash!(Sanitizer);\n-    impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n+    impl_dep_tracking_hash_via_hash!(SanitizerSet);\n     impl_dep_tracking_hash_via_hash!(CFGuard);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n@@ -2085,7 +2107,6 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>, NativeLibKind));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n-    impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n     where"}, {"sha": "be9d2e7be27774ce5da48fb5ccf093ac74a58c18", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -1,6 +1,9 @@\n #![feature(crate_visibility_modifier)]\n #![feature(or_patterns)]\n \n+#[macro_use]\n+extern crate bitflags;\n+\n pub mod cgu_reuse_tracker;\n pub mod utils;\n #[macro_use]"}, {"sha": "8032909bbcd7a8af27b3d080876fd45084aa60a1", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -248,8 +248,7 @@ macro_rules! options {\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-        pub const parse_sanitizer: &str = \"one of: `address`, `leak`, `memory` or `thread`\";\n-        pub const parse_sanitizer_list: &str = \"comma separated list of sanitizers\";\n+        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n         pub const parse_cfguard: &str = \"either `disabled`, `nochecks`, or `checks`\";\n         pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n@@ -459,24 +458,15 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_sanitizer(slot: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n-            if let Some(Ok(s)) =  v.map(str::parse) {\n-                *slot = Some(s);\n-                true\n-            } else {\n-                false\n-            }\n-        }\n-\n-        fn parse_sanitizer_list(slot: &mut Vec<Sanitizer>, v: Option<&str>) -> bool {\n+        fn parse_sanitizers(slot: &mut SanitizerSet, v: Option<&str>) -> bool {\n             if let Some(v) = v {\n-                for s in v.split(',').map(str::parse) {\n-                    if let Ok(s) = s {\n-                        if !slot.contains(&s) {\n-                            slot.push(s);\n-                        }\n-                    } else {\n-                        return false;\n+                for s in v.split(',') {\n+                    *slot |= match s {\n+                        \"address\" => SanitizerSet::ADDRESS,\n+                        \"leak\" => SanitizerSet::LEAK,\n+                        \"memory\" => SanitizerSet::MEMORY,\n+                        \"thread\" => SanitizerSet::THREAD,\n+                        _ => return false,\n                     }\n                 }\n                 true\n@@ -974,11 +964,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     // soon.\n     run_dsymutil: bool = (true, parse_bool, [TRACKED],\n         \"if on Mac, run `dsymutil` and delete intermediate object files (default: yes)\"),\n-    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n+    sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"use a sanitizer\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n         \"enable origins tracking in MemorySanitizer\"),\n-    sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n+    sanitizer_recover: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"enable recovery for selected sanitizers\"),\n     saturating_float_casts: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\"}, {"sha": "90cd6ae5bf99ffdc5c025460cd6e67570684eddf", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -1,7 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use crate::config::{self, CrateType, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n+use crate::config::{self, CrateType, OutputType, PrintRequest, SanitizerSet, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint;\n use crate::parse::ParseSess;\n@@ -650,14 +650,9 @@ impl Session {\n     }\n     pub fn fewer_names(&self) -> bool {\n         let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n-            || self.opts.output_types.contains_key(&OutputType::Bitcode);\n-\n-        // Address sanitizer and memory sanitizer use alloca name when reporting an issue.\n-        let more_names = match self.opts.debugging_opts.sanitizer {\n-            Some(Sanitizer::Address) => true,\n-            Some(Sanitizer::Memory) => true,\n-            _ => more_names,\n-        };\n+            || self.opts.output_types.contains_key(&OutputType::Bitcode)\n+            // AddressSanitizer and MemorySanitizer use alloca name when reporting an issue.\n+            || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY);\n \n         self.opts.debugging_opts.fewer_names || !more_names\n     }\n@@ -1020,12 +1015,10 @@ impl Session {\n \n     /// Checks if LLVM lifetime markers should be emitted.\n     pub fn emit_lifetime_markers(&self) -> bool {\n-        match self.opts.debugging_opts.sanitizer {\n-            // AddressSanitizer uses lifetimes to detect use after scope bugs.\n-            // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n-            Some(Sanitizer::Address | Sanitizer::Memory) => true,\n-            _ => self.opts.optimize != config::OptLevel::No,\n-        }\n+        self.opts.optimize != config::OptLevel::No\n+        // AddressSanitizer uses lifetimes to detect use after scope bugs.\n+        // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n+        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n     }\n }\n \n@@ -1356,33 +1349,36 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n+    const ASAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n+    const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+    const TSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+\n     // Sanitizers can only be used on some tested platforms.\n-    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n-        const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n-            \"x86_64-unknown-linux-gnu\",\n-            \"x86_64-apple-darwin\",\n-            \"x86_64-fuchsia\",\n-            \"aarch64-fuchsia\",\n-        ];\n-        const TSAN_SUPPORTED_TARGETS: &[&str] =\n-            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-        const LSAN_SUPPORTED_TARGETS: &[&str] =\n-            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-        const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-\n-        let supported_targets = match *sanitizer {\n-            Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n-            Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n-            Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n-            Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n+    for s in sess.opts.debugging_opts.sanitizer {\n+        let supported_targets = match s {\n+            SanitizerSet::ADDRESS => ASAN_SUPPORTED_TARGETS,\n+            SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n+            _ => panic!(\"unrecognized sanitizer {}\", s),\n         };\n-\n         if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {\n             sess.err(&format!(\n-                \"{:?}Sanitizer only works with the `{}` target\",\n-                sanitizer,\n-                supported_targets.join(\"` or `\")\n+                \"`-Zsanitizer={}` only works with targets: {}\",\n+                s,\n+                supported_targets.join(\", \")\n+            ));\n+        }\n+        let conflicting = sess.opts.debugging_opts.sanitizer - s;\n+        if !conflicting.is_empty() {\n+            sess.err(&format!(\n+                \"`-Zsanitizer={}` is incompatible with `-Zsanitizer={}`\",\n+                s, conflicting,\n             ));\n+            // Don't report additional errors.\n+            break;\n         }\n     }\n }"}, {"sha": "91266eeb9bab0402aa6d171e575e1b1474a28ccb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -40,6 +40,7 @@ use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -2450,11 +2451,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             if let Some(list) = attr.meta_item_list() {\n                 for item in list.iter() {\n                     if item.check_name(sym::address) {\n-                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_ADDRESS;\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::ADDRESS;\n                     } else if item.check_name(sym::memory) {\n-                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_MEMORY;\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.check_name(sym::thread) {\n-                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_THREAD;\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n@@ -2554,7 +2555,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n-    if codegen_fn_attrs.flags.intersects(CodegenFnAttrFlags::NO_SANITIZE_ANY) {\n+    if !codegen_fn_attrs.no_sanitize.is_empty() {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let (Some(no_sanitize_span), Some(inline_span)) = (no_sanitize_span, inline_span) {\n                 let hir_id = tcx.hir().as_local_hir_id(id.expect_local());"}, {"sha": "9bc111c26ba6b1eabd47c0b0f89bf4ec93c5cf3e", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -717,11 +717,12 @@ enum class LLVMRustOptStage {\n };\n \n struct LLVMRustSanitizerOptions {\n+  bool SanitizeAddress;\n+  bool SanitizeAddressRecover;\n   bool SanitizeMemory;\n+  bool SanitizeMemoryRecover;\n+  int  SanitizeMemoryTrackOrigins;\n   bool SanitizeThread;\n-  bool SanitizeAddress;\n-  bool SanitizeRecover;\n-  int SanitizeMemoryTrackOrigins;\n };\n \n extern \"C\" void\n@@ -808,7 +809,7 @@ LLVMRustOptimizeWithNewPassManager(\n     if (SanitizerOptions->SanitizeMemory) {\n       MemorySanitizerOptions Options(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n-          SanitizerOptions->SanitizeRecover,\n+          SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false);\n #if LLVM_VERSION_GE(10, 0)\n       PipelineStartEPCallbacks.push_back([Options](ModulePassManager &MPM) {\n@@ -842,14 +843,14 @@ LLVMRustOptimizeWithNewPassManager(\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](FunctionPassManager &FPM, PassBuilder::OptimizationLevel Level) {\n           FPM.addPass(AddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeRecover,\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n               /*UseAfterScope=*/true));\n         }\n       );\n       PipelineStartEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM) {\n           MPM.addPass(ModuleAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeRecover));\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n       );\n     }"}, {"sha": "4947f3b3d8b13b883ebab44eb5248518518960ca", "filename": "src/test/ui/sanitize/incompatible.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Z sanitizer=address -Z sanitizer=memory --target x86_64-unknown-linux-gnu\n+// error-pattern: error: `-Zsanitizer=address` is incompatible with `-Zsanitizer=memory`\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "f86db41bac7175ada7f62b20a5094dc74a0e7393", "filename": "src/test/ui/sanitize/incompatible.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fincompatible.stderr?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -0,0 +1,4 @@\n+error: `-Zsanitizer=address` is incompatible with `-Zsanitizer=memory`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6ccc9988cdeccdd3fe74973f00b5a176be059770", "filename": "src/test/ui/sanitize/unsupported-target.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.rs?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -1,6 +1,5 @@\n-// ignore-tidy-linelength\n // compile-flags: -Z sanitizer=leak --target i686-unknown-linux-gnu\n-// error-pattern: error: LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target\n+// error-pattern: error: `-Zsanitizer=leak` only works with targets:\n \n #![feature(no_core)]\n #![no_core]"}, {"sha": "f9434bc9512d01d4d7f5f14273fca74bb0ca76c1", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17b80d947dccb7d73efbffd8fe6e8ae28af759ee/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=17b80d947dccb7d73efbffd8fe6e8ae28af759ee", "patch": "@@ -1,4 +1,4 @@\n-error: LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target\n+error: `-Zsanitizer=leak` only works with targets: x86_64-apple-darwin, x86_64-unknown-linux-gnu\n \n error: aborting due to previous error\n "}]}