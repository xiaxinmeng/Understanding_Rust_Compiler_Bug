{"sha": "b4aa80dd73df9708022cc383aad8da1dcf38d1df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YWE4MGRkNzNkZjk3MDgwMjJjYzM4M2FhZDhkYTFkY2YzOGQxZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-24T13:23:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-24T13:23:17Z"}, "message": "Auto merge of #49251 - nikomatsakis:issue-15872-elision-impl-header, r=cramertj\n\nsupport elision in impl headers\n\nYou can now do things like:\n\n```\nimpl MyTrait<'_> for &u32 { ... }\n```\n\nEach `'_` or elided lifetime is a fresh parameter. `'_` and elision are still not permitted in associated type values. (Plausibly we could support that if there is a single input lifetime.) The original lifetime elision RFC was a bit unclear on this point: [as documented here, I think this is the correct interpretation, both because it fits existing impls and it's most analogous to the behavior in fns](https://github.com/rust-lang/rust/issues/15872#issuecomment-338700138).\n\nWe do not support elision with deprecated forms:\n\n```\nimpl MyTrait for std::cell::Ref<u32> { } // ERROR\n```\n\nBuilds on the in-band lifetime stuff.\n\nr? @cramertj\n\nFixes #15872", "tree": {"sha": "96feb584c23b8680534b22f984fe70834ead5ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96feb584c23b8680534b22f984fe70834ead5ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4aa80dd73df9708022cc383aad8da1dcf38d1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4aa80dd73df9708022cc383aad8da1dcf38d1df", "html_url": "https://github.com/rust-lang/rust/commit/b4aa80dd73df9708022cc383aad8da1dcf38d1df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4aa80dd73df9708022cc383aad8da1dcf38d1df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee", "html_url": "https://github.com/rust-lang/rust/commit/a0b0f5fba5d7bf18b24d1fa0e454a4fe871fecee"}, {"sha": "94468dac6350a29dc2eb1eed01308ec78224f7ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/94468dac6350a29dc2eb1eed01308ec78224f7ba", "html_url": "https://github.com/rust-lang/rust/commit/94468dac6350a29dc2eb1eed01308ec78224f7ba"}], "stats": {"total": 3188, "additions": 2081, "deletions": 1107}, "files": [{"sha": "9f51eb8c35a82787f10c6143ca6ce0fcd9f87080", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -420,7 +420,10 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         LifetimeName::Name(name) => {\n             visitor.visit_name(lifetime.span, name);\n         }\n-        LifetimeName::Static | LifetimeName::Implicit | LifetimeName::Underscore => {}\n+        LifetimeName::Fresh(_) |\n+        LifetimeName::Static |\n+        LifetimeName::Implicit |\n+        LifetimeName::Underscore => {}\n     }\n }\n "}, {"sha": "ad848949f624df6a5c93d563ad075d3bbd26aa30", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1552, "deletions": 1034, "changes": 2586, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df"}, {"sha": "be8cceb61189633d6cb8337f18c817c336af6b54", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -203,9 +203,31 @@ pub struct Lifetime {\n \n #[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum LifetimeName {\n+    /// User typed nothing. e.g. the lifetime in `&u32`.\n     Implicit,\n+\n+    /// User typed `'_`.\n     Underscore,\n+\n+    /// Synthetic name generated when user elided a lifetime in an impl header,\n+    /// e.g. the lifetimes in cases like these:\n+    ///\n+    ///     impl Foo for &u32\n+    ///     impl Foo<'_> for u32\n+    ///\n+    /// in that case, we rewrite to\n+    ///\n+    ///     impl<'f> Foo for &'f u32\n+    ///     impl<'f> Foo<'f> for u32\n+    ///\n+    /// where `'f` is something like `Fresh(0)`. The indices are\n+    /// unique per impl, but not necessarily continuous.\n+    Fresh(usize),\n+\n+    /// User wrote `'static`\n     Static,\n+\n+    /// Some user-given name like `'x`\n     Name(Name),\n }\n \n@@ -214,7 +236,7 @@ impl LifetimeName {\n         use self::LifetimeName::*;\n         match *self {\n             Implicit => keywords::Invalid.name(),\n-            Underscore => keywords::UnderscoreLifetime.name(),\n+            Fresh(_) | Underscore => keywords::UnderscoreLifetime.name(),\n             Static => keywords::StaticLifetime.name(),\n             Name(name) => name,\n         }\n@@ -235,7 +257,13 @@ impl Lifetime {\n         use self::LifetimeName::*;\n         match self.name {\n             Implicit | Underscore => true,\n-            Static | Name(_) => false,\n+\n+            // It might seem surprising that `Fresh(_)` counts as\n+            // *not* elided -- but this is because, as far as the code\n+            // in the compiler is concerned -- `Fresh(_)` variants act\n+            // equivalently to \"some fresh name\". They correspond to\n+            // early-bound regions on an impl, in other words.\n+            Fresh(_) | Static | Name(_) => false,\n         }\n     }\n "}, {"sha": "c3b3e10201f9920665028f7a8bb920035a09be43", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -145,6 +145,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItemId {\n impl_stable_hash_for!(enum hir::LifetimeName {\n     Implicit,\n     Underscore,\n+    Fresh(index),\n     Static,\n     Name(name)\n });"}, {"sha": "ceda72dcd7ae0ab51976be10386baf0c636bd5fb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 95, "deletions": 70, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -31,6 +31,7 @@ use syntax::ptr::P;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n+use session::Session;\n use std::slice;\n use rustc::lint;\n \n@@ -468,11 +469,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n             hir::ItemFn(ref decl, _, _, _, ref generics, _) => {\n-                self.visit_early_late(None,\n-                                      decl,\n-                                      generics,\n-                                      |this| {\n-                                          intravisit::walk_item(this, item);\n+                self.visit_early_late(None, decl, generics, |this| {\n+                    intravisit::walk_item(this, item);\n                 });\n             }\n \n@@ -505,7 +503,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 } else {\n                     0\n                 };\n-                let lifetimes = generics.lifetimes()\n+                let lifetimes = generics\n+                    .lifetimes()\n                     .map(|def| Region::early(&self.tcx.hir, &mut index, def))\n                     .collect();\n                 let next_early_index = index + generics.ty_params().count() as u32;\n@@ -526,12 +525,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n         match item.node {\n             hir::ForeignItemFn(ref decl, _, ref generics) => {\n-                self.visit_early_late(None,\n-                                      decl,\n-                                      generics,\n-                                      |this| {\n-                                          intravisit::walk_foreign_item(this, item);\n-                                      })\n+                self.visit_early_late(None, decl, generics, |this| {\n+                    intravisit::walk_foreign_item(this, item);\n+                })\n             }\n             hir::ForeignItemStatic(..) => {\n                 intravisit::walk_foreign_item(self, item);\n@@ -586,7 +582,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // cc #48468\n                         self.resolve_elided_lifetimes(slice::from_ref(lifetime), false)\n                     }\n-                    LifetimeName::Static | LifetimeName::Name(_) => {\n+                    LifetimeName::Fresh(_) | LifetimeName::Static | LifetimeName::Name(_) => {\n                         // If the user wrote an explicit name, use that.\n                         self.visit_lifetime(lifetime);\n                     }\n@@ -670,7 +666,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 if let Some(elision_region) = elision {\n                     let scope = Scope::Elision {\n                         elide: Elide::Exact(elision_region),\n-                        s: self.scope\n+                        s: self.scope,\n                     };\n                     self.with(scope, |_old_scope, this| {\n                         let scope = Scope::Binder {\n@@ -716,12 +712,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     &trait_item.generics,\n                     |this| intravisit::walk_trait_item(this, trait_item),\n                 );\n-            },\n+            }\n             Type(ref bounds, ref ty) => {\n                 let generics = &trait_item.generics;\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics.lifetimes()\n+                let lifetimes = generics\n+                    .lifetimes()\n                     .map(|lt_def| Region::early(&self.tcx.hir, &mut index, lt_def))\n                     .collect();\n \n@@ -741,12 +738,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         this.visit_ty(ty);\n                     }\n                 });\n-            },\n+            }\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(trait_item.generics.params.is_empty());\n                 intravisit::walk_trait_item(self, trait_item);\n-            },\n+            }\n         }\n     }\n \n@@ -761,12 +758,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     &impl_item.generics,\n                     |this| intravisit::walk_impl_item(this, impl_item),\n                 )\n-            },\n+            }\n             Type(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics.lifetimes()\n+                let lifetimes = generics\n+                    .lifetimes()\n                     .map(|lt_def| Region::early(&self.tcx.hir, &mut index, lt_def))\n                     .collect();\n \n@@ -781,12 +779,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.visit_generics(generics);\n                     this.visit_ty(ty);\n                 });\n-            },\n+            }\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(impl_item.generics.params.is_empty());\n                 intravisit::walk_impl_item(self, impl_item);\n-            },\n+            }\n         }\n     }\n \n@@ -822,7 +820,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n         check_mixed_explicit_and_in_band_defs(\n             self.tcx,\n-            &generics.lifetimes().cloned().collect::<Vec<_>>()\n+            &generics.lifetimes().cloned().collect::<Vec<_>>(),\n         );\n         for ty_param in generics.ty_params() {\n             walk_list!(self, visit_ty_param_bound, &ty_param.bounds);\n@@ -842,7 +840,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         self.trait_ref_hack = true;\n                         let next_early_index = self.next_early_index();\n                         let scope = Scope::Binder {\n-                            lifetimes: bound_generic_params.lifetimes()\n+                            lifetimes: bound_generic_params\n+                                .lifetimes()\n                                 .map(|def| Region::late(&self.tcx.hir, def))\n                                 .collect(),\n                             s: self.scope,\n@@ -890,8 +889,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     ) {\n         debug!(\"visit_poly_trait_ref trait_ref={:?}\", trait_ref);\n \n-        if !self.trait_ref_hack ||\n-            trait_ref.bound_generic_params.iter().any(|p| p.is_lifetime_param())\n+        if !self.trait_ref_hack\n+            || trait_ref\n+                .bound_generic_params\n+                .iter()\n+                .any(|p| p.is_lifetime_param())\n         {\n             if self.trait_ref_hack {\n                 span_err!(\n@@ -903,7 +905,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             }\n             let next_early_index = self.next_early_index();\n             let scope = Scope::Binder {\n-                lifetimes: trait_ref.bound_generic_params\n+                lifetimes: trait_ref\n+                    .bound_generic_params\n                     .lifetimes()\n                     .map(|def| Region::late(&self.tcx.hir, def))\n                     .collect(),\n@@ -1144,7 +1147,8 @@ fn compute_object_lifetime_defaults(\n                         .map(|set| match *set {\n                             Set1::Empty => \"BaseDefault\".to_string(),\n                             Set1::One(Region::Static) => \"'static\".to_string(),\n-                            Set1::One(Region::EarlyBound(i, _, _)) => generics.lifetimes()\n+                            Set1::One(Region::EarlyBound(i, _, _)) => generics\n+                                .lifetimes()\n                                 .nth(i as usize)\n                                 .unwrap()\n                                 .lifetime\n@@ -1182,7 +1186,8 @@ fn object_lifetime_defaults_for_item(\n         }\n     }\n \n-    generics.ty_params()\n+    generics\n+        .ty_params()\n         .map(|param| {\n             let mut set = Set1::Empty;\n \n@@ -1278,17 +1283,21 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     if let hir::map::NodeLifetime(hir_lifetime) = this.tcx.hir.get(node_id) {\n                         let span = hir_lifetime.span;\n                         let id = hir_lifetime.id;\n-                        debug!(\"id ={:?} span = {:?} hir_lifetime = {:?}\",\n-                            node_id,\n-                            span,\n-                            hir_lifetime);\n+                        debug!(\n+                            \"id ={:?} span = {:?} hir_lifetime = {:?}\",\n+                            node_id, span, hir_lifetime\n+                        );\n \n                         this.tcx\n-                            .struct_span_lint_node(lint::builtin::SINGLE_USE_LIFETIME,\n-                                                   id,\n-                                                   span,\n-                                                   &format!(\"lifetime name `{}` only used once\",\n-                                                   hir_lifetime.name.name()))\n+                            .struct_span_lint_node(\n+                                lint::builtin::SINGLE_USE_LIFETIME,\n+                                id,\n+                                span,\n+                                &format!(\n+                                    \"lifetime name `{}` only used once\",\n+                                    hir_lifetime.name.name()\n+                                ),\n+                            )\n                             .emit();\n                     }\n                 }\n@@ -1379,8 +1388,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     next_early_index,\n                     abstract_type_parent,\n                     ..\n-                } if (!only_abstract_type_parent || abstract_type_parent)\n-                => return next_early_index,\n+                } if (!only_abstract_type_parent || abstract_type_parent) =>\n+                {\n+                    return next_early_index\n+                }\n \n                 Scope::Binder { s, .. }\n                 | Scope::Body { s, .. }\n@@ -1698,8 +1709,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             // Foreign functions, `fn(...) -> R` and `Trait(...) -> R` (both types and bounds).\n-            hir::map::NodeForeignItem(_) | hir::map::NodeTy(_) | hir::map::NodeTraitRef(_) =>\n-                None,\n+            hir::map::NodeForeignItem(_) | hir::map::NodeTy(_) | hir::map::NodeTraitRef(_) => None,\n             // Everything else (only closures?) doesn't\n             // actually enjoy elision in return types.\n             _ => {\n@@ -1894,7 +1904,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     lint::builtin::ELIDED_LIFETIME_IN_PATH,\n                     id,\n                     span,\n-                    &format!(\"hidden lifetime parameters are deprecated, try `Foo<'_>`\"))\n+                    &format!(\"hidden lifetime parameters are deprecated, try `Foo<'_>`\"),\n+                )\n                 .emit();\n         }\n         let error = loop {\n@@ -1933,25 +1944,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n-        let mut err = struct_span_err!(\n-            self.tcx.sess,\n-            span,\n-            E0106,\n-            \"missing lifetime specifier{}\",\n-            if lifetime_refs.len() > 1 { \"s\" } else { \"\" }\n-        );\n-        let msg = if lifetime_refs.len() > 1 {\n-            format!(\"expected {} lifetime parameters\", lifetime_refs.len())\n-        } else {\n-            format!(\"expected lifetime parameter\")\n-        };\n-        err.span_label(span, msg);\n+        let mut err = report_missing_lifetime_specifiers(self.tcx.sess, span, lifetime_refs.len());\n \n         if let Some(params) = error {\n             if lifetime_refs.len() == 1 {\n                 self.report_elision_failure(&mut err, params);\n             }\n         }\n+\n         err.emit();\n     }\n \n@@ -2086,7 +2086,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         );\n                         err.emit();\n                     }\n-                    hir::LifetimeName::Implicit | hir::LifetimeName::Name(_) => {}\n+                    hir::LifetimeName::Fresh(_) | hir::LifetimeName::Implicit |\n+                    hir::LifetimeName::Name(_) => {}\n                 }\n             }\n \n@@ -2138,17 +2139,20 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             ))\n                             .emit();\n                     }\n-                    hir::LifetimeName::Implicit | hir::LifetimeName::Name(_) => {\n+                    hir::LifetimeName::Fresh(_) | hir::LifetimeName::Implicit |\n+                    hir::LifetimeName::Name(_) => {\n                         self.resolve_lifetime_ref(bound);\n                     }\n                 }\n             }\n         }\n     }\n \n-    fn check_lifetime_def_for_shadowing(&self,\n-                                        mut old_scope: ScopeRef,\n-                                        lifetime: &'tcx hir::Lifetime) {\n+    fn check_lifetime_def_for_shadowing(\n+        &self,\n+        mut old_scope: ScopeRef,\n+        lifetime: &'tcx hir::Lifetime,\n+    ) {\n         for &(label, label_span) in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n             if lifetime.name.name() == label {\n@@ -2216,14 +2220,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.map.defs.insert(lifetime_ref.id, def);\n \n         match def {\n-            Region::LateBoundAnon(..) |\n-            Region::Static => {\n+            Region::LateBoundAnon(..) | Region::Static => {\n                 // These are anonymous lifetimes or lifetimes that are not declared.\n             }\n \n-            Region::Free(_, def_id) |\n-            Region::LateBound(_, def_id, _) |\n-            Region::EarlyBound(_, def_id, _) => {\n+            Region::Free(_, def_id)\n+            | Region::LateBound(_, def_id, _)\n+            | Region::EarlyBound(_, def_id, _) => {\n                 // A lifetime declared by the user.\n                 if !self.lifetime_uses.contains_key(&def_id) {\n                     self.lifetime_uses\n@@ -2255,8 +2258,7 @@ fn insert_late_bound_lifetimes(\n ) {\n     debug!(\n         \"insert_late_bound_lifetimes(decl={:?}, generics={:?})\",\n-        decl,\n-        generics\n+        decl, generics\n     );\n \n     let mut constrained_by_input = ConstrainedCollector {\n@@ -2335,8 +2337,7 @@ fn insert_late_bound_lifetimes(\n         debug!(\n             \"insert_late_bound_lifetimes: \\\n              lifetime {:?} with id {:?} is late-bound\",\n-            lifetime.lifetime.name,\n-            lifetime.lifetime.id\n+            lifetime.lifetime.name, lifetime.lifetime.id\n         );\n \n         let inserted = map.late_bound.insert(lifetime.lifetime.id);\n@@ -2403,3 +2404,27 @@ fn insert_late_bound_lifetimes(\n         }\n     }\n }\n+\n+pub fn report_missing_lifetime_specifiers(\n+    sess: &Session,\n+    span: Span,\n+    count: usize,\n+) -> DiagnosticBuilder<'_> {\n+    let mut err = struct_span_err!(\n+        sess,\n+        span,\n+        E0106,\n+        \"missing lifetime specifier{}\",\n+        if count > 1 { \"s\" } else { \"\" }\n+    );\n+\n+    let msg = if count > 1 {\n+        format!(\"expected {} lifetime parameters\", count)\n+    } else {\n+        format!(\"expected lifetime parameter\")\n+    };\n+\n+    err.span_label(span, msg);\n+\n+    err\n+}"}, {"sha": "a02b3e800097e330e7ef56b748ba1adb84480fae", "filename": "src/test/ui/feature-gate-in_band_lifetimes-impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait<'a> { }\n+\n+impl<'a> MyTrait<'a> for &u32 { }\n+//~^ ERROR missing lifetime specifier\n+\n+impl<'a> MyTrait<'_> for &'a f32 { }\n+//~^ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "e32a06c3ce4563e92e37a2ea85f1a21baba971e1", "filename": "src/test/ui/feature-gate-in_band_lifetimes-impl.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes-impl.stderr?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/feature-gate-in_band_lifetimes-impl.rs:16:26\n+   |\n+LL | impl<'a> MyTrait<'a> for &u32 { }\n+   |                          ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/feature-gate-in_band_lifetimes-impl.rs:19:18\n+   |\n+LL | impl<'a> MyTrait<'_> for &'a f32 { }\n+   |                  ^^ expected lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "54f38b2e729b1dd3dcab6c0384e3f2d3feed32a4", "filename": "src/test/ui/in-band-lifetimes/impl/assoc-type.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we do not yet support elision in associated types, even\n+// when there is just one name we could take from the impl header.\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait {\n+    type Output;\n+}\n+\n+impl MyTrait for &i32 {\n+    type Output = &i32;\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+impl MyTrait for &u32 {\n+    type Output = &'_ i32;\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+// This is what you have to do:\n+impl MyTrait for &'a f32 {\n+    type Output = &'a f32;\n+}\n+\n+fn main() { }"}, {"sha": "909b86daef0fc8eb71dad61ba1a6dec65a84a646", "filename": "src/test/ui/in-band-lifetimes/impl/assoc-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fassoc-type.stderr?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/assoc-type.rs:24:19\n+   |\n+LL |     type Output = &i32;\n+   |                   ^ expected lifetime parameter\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/assoc-type.rs:29:20\n+   |\n+LL |     type Output = &'_ i32;\n+   |                    ^^ expected lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "e839248b0e3178304b896b8e8c2ce4510b4f7923", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n+// 'b> MyTrait<'a> for &'b i32`.\n+\n+#![allow(warnings)]\n+\n+#![feature(dyn_trait)]\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+use std::fmt::Debug;\n+\n+// Equivalent to `Box<dyn Debug + 'static>`:\n+trait StaticTrait { }\n+impl StaticTrait for Box<dyn Debug> { }\n+\n+// Equivalent to `Box<dyn Debug + 'static>`:\n+trait NotStaticTrait { }\n+impl NotStaticTrait for Box<dyn Debug + '_> { }\n+\n+fn static_val<T: StaticTrait>(_: T) {\n+}\n+\n+fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+    static_val(x); //~ ERROR cannot infer\n+}\n+\n+fn not_static_val<T: NotStaticTrait>(_: T) {\n+}\n+\n+fn with_dyn_debug_not_static<'a>(x: Box<dyn Debug + 'a>) {\n+    not_static_val(x); // OK\n+}\n+\n+fn main() {\n+}"}, {"sha": "0054ca3d1a5bf22f84c47897bbf7e94a72a32602", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,22 @@\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/dyn-trait.rs:34:16\n+   |\n+LL |     static_val(x); //~ ERROR cannot infer\n+   |                ^\n+   |\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 33:1...\n+  --> $DIR/dyn-trait.rs:33:1\n+   |\n+LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...so that the expression is assignable:\n+           expected std::boxed::Box<std::fmt::Debug>\n+              found std::boxed::Box<std::fmt::Debug + 'a>\n+   = note: but, the lifetime must be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected StaticTrait\n+              found StaticTrait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "fa1b45238895f0c837f2fcadbc54b419188a73ac", "filename": "src/test/ui/in-band-lifetimes/impl/path-elided.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait { }\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+impl MyTrait for Foo {\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "19e69c61a0337f0111e8647a630be20017ed4ae2", "filename": "src/test/ui/in-band-lifetimes/impl/path-elided.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-elided.stderr?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,9 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/path-elided.rs:19:18\n+   |\n+LL | impl MyTrait for Foo {\n+   |                  ^^^ expected lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "56f2d93d9e0a9e0865ced35d076e2e987d7fc55c", "filename": "src/test/ui/in-band-lifetimes/impl/path-underscore.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fpath-underscore.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait for Foo<'_>` works.\n+\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait { }\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+impl MyTrait for Foo<'_> {\n+}\n+\n+fn impls_my_trait<T: MyTrait>() { }\n+\n+fn impls_my_trait_val<T: MyTrait>(_: T) {\n+    impls_my_trait::<T>();\n+}\n+\n+fn random_where_clause()\n+where for<'a> Foo<'a>: MyTrait { }\n+\n+fn main() {\n+    let x = 22;\n+    let f = Foo { x: &x };\n+\n+    // This type is `Foo<'x>` for a local lifetime `'x`; so the impl\n+    // must apply to any lifetime to apply to this.\n+    impls_my_trait_val(f);\n+\n+    impls_my_trait::<Foo<'static>>();\n+\n+    random_where_clause();\n+}"}, {"sha": "1b1035abeba36acdb1227686909b4286abc0a552", "filename": "src/test/ui/in-band-lifetimes/impl/ref-underscore.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fref-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fref-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fref-underscore.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait for &i32` works and is equivalent to any lifetime.\n+\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait { }\n+\n+impl MyTrait for &i32 {\n+}\n+\n+fn impls_my_trait<T: MyTrait>() { }\n+\n+fn impls_my_trait_val<T: MyTrait>(_: T) {\n+    impls_my_trait::<T>();\n+}\n+\n+fn random_where_clause()\n+where for<'a> &'a i32: MyTrait { }\n+\n+fn main() {\n+    let x = 22;\n+    let f = &x;\n+\n+    impls_my_trait_val(f);\n+\n+    impls_my_trait::<&'static i32>();\n+\n+    random_where_clause();\n+}"}, {"sha": "7594d66e0783953e9c7a471ec0711bc19b733b2c", "filename": "src/test/ui/in-band-lifetimes/impl/trait-elided.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait<'a> { }\n+\n+impl MyTrait for u32 {\n+    //~^ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "bb301882868a483a0f62f0a932ec406ef2b77e5a", "filename": "src/test/ui/in-band-lifetimes/impl/trait-elided.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-elided.stderr?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,9 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/trait-elided.rs:17:6\n+   |\n+LL | impl MyTrait for u32 {\n+   |      ^^^^^^^ expected lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "077e33c1efde240ca2bb242676e2ca24d99faf9a", "filename": "src/test/ui/in-band-lifetimes/impl/trait-underscore.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Ftrait-underscore.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n+// 'b> MyTrait<'a> for &'b i32`.\n+//\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(in_band_lifetimes)]\n+#![feature(underscore_lifetimes)]\n+\n+trait MyTrait<'a> { }\n+\n+// This is equivalent to `MyTrait<'a> for &'b i32`, which is proven by\n+// the code below.\n+impl MyTrait<'_> for &i32 {\n+}\n+\n+// When called, T will be `&'x i32` for some `'x`, so since we can\n+// prove that `&'x i32: for<'a> MyTrait<'a>, then we know that the\n+// lifetime parameter above is disconnected.\n+fn impls_my_trait<T: for<'a> MyTrait<'a>>() { }\n+\n+fn impls_my_trait_val<T: for<'a> MyTrait<'a>>(_: T) {\n+    impls_my_trait::<T>();\n+}\n+\n+fn random_where_clause()\n+where for<'a, 'b> &'a i32: MyTrait<'b> { }\n+\n+fn main() {\n+    let x = 22;\n+    let f = &x;\n+    impls_my_trait_val(f);\n+\n+    impls_my_trait::<&'static i32>();\n+\n+    random_where_clause();\n+}"}, {"sha": "d10541ad33b5215a5c8cd0630d3f43a9f3af0b79", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.rs?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the `'_` in `dyn Trait + '_` acts like ordinary elision,\n+// and not like an object lifetime default.\n+//\n+// cc #48468\n+\n+#![feature(dyn_trait)]\n+#![feature(underscore_lifetimes)]\n+\n+use std::fmt::Debug;\n+\n+struct Foo {\n+    x: Box<dyn Debug + '_>, //~ ERROR missing lifetime specifier\n+    //~^ ERROR E0228\n+}\n+\n+fn main() { }"}, {"sha": "a88ecb18dd6fe7a56f441d711d6b726b2c4b74ba", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4aa80dd73df9708022cc383aad8da1dcf38d1df/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=b4aa80dd73df9708022cc383aad8da1dcf38d1df", "patch": "@@ -0,0 +1,16 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/dyn-trait-underscore-in-struct.rs:22:24\n+   |\n+LL |     x: Box<dyn Debug + '_>, //~ ERROR missing lifetime specifier\n+   |                        ^^ expected lifetime parameter\n+\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/dyn-trait-underscore-in-struct.rs:22:12\n+   |\n+LL |     x: Box<dyn Debug + '_>, //~ ERROR missing lifetime specifier\n+   |            ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0106, E0228.\n+For more information about an error, try `rustc --explain E0106`."}]}