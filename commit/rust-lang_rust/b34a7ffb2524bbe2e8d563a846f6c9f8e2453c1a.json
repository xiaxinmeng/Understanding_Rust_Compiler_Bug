{"sha": "b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNGE3ZmZiMjUyNGJiZTJlOGQ1NjNhODQ2ZjZjOWY4ZTI0NTNjMWE=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-11-20T18:03:20Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-11-20T18:03:20Z"}, "message": "address review comments", "tree": {"sha": "34577c495feedd5f61208cc3a85c78f458604349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34577c495feedd5f61208cc3a85c78f458604349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "html_url": "https://github.com/rust-lang/rust/commit/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a661409cbdd0fb7ab4386952d9e0ecdd78abfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a661409cbdd0fb7ab4386952d9e0ecdd78abfa", "html_url": "https://github.com/rust-lang/rust/commit/30a661409cbdd0fb7ab4386952d9e0ecdd78abfa"}], "stats": {"total": 191, "additions": 109, "deletions": 82}, "files": [{"sha": "ee197a009f8ad4e228c4dcd2041f35e311def34b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -1036,8 +1036,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n           \"treat all errors that occur as bugs\"),\n-    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-          \"show macro backtraces even for foreign macros\"),\n+    external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+          \"show macro backtraces even for non-local macros\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n           \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -2102,7 +2102,7 @@ mod tests {\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n-            assert!(!sess.diagnostic().can_emit_warnings);\n+            assert!(!sess.diagnostic().flags.can_emit_warnings);\n         }\n \n         {\n@@ -2113,7 +2113,7 @@ mod tests {\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n-            assert!(sess.diagnostic().can_emit_warnings);\n+            assert!(sess.diagnostic().flags.can_emit_warnings);\n         }\n \n         {\n@@ -2123,7 +2123,7 @@ mod tests {\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n-            assert!(sess.diagnostic().can_emit_warnings);\n+            assert!(sess.diagnostic().flags.can_emit_warnings);\n         }\n     }\n "}, {"sha": "b2a27d927deca024ddc2a183529927122d204830", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -727,11 +727,11 @@ pub fn build_session_with_codemap(sopts: config::Options,\n         .unwrap_or(false);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n \n-    let can_print_warnings = !(warnings_allow || cap_lints_allow);\n+    let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n \n-    let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n+    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n     let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n@@ -755,10 +755,14 @@ pub fn build_session_with_codemap(sopts: config::Options,\n     };\n \n     let diagnostic_handler =\n-        errors::Handler::with_emitter(can_print_warnings,\n-                                      treat_err_as_bug,\n-                                      macro_backtrace,\n-                                      emitter);\n+        errors::Handler::with_emitter_and_flags(\n+            emitter,\n+            errors::HandlerFlags {\n+                can_emit_warnings,\n+                treat_err_as_bug,\n+                external_macro_backtrace,\n+                .. Default::default()\n+            });\n \n     build_session_(sopts,\n                    local_crate_source_file,\n@@ -928,7 +932,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(EmitterWriter::stderr(color_config, None, true))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, false, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n     panic!(errors::FatalError);\n }\n@@ -943,7 +947,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(EmitterWriter::stderr(color_config, None, true))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, false, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n "}, {"sha": "c5cce70c945663393d38cdd27756c55bce9cda02", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -141,8 +141,7 @@ pub fn run<F>(run_compiler: F) -> isize\n                         errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                None,\n                                                                true);\n-                    let handler = errors::Handler::with_emitter(true, false, false,\n-                                                                Box::new(emitter));\n+                    let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n                     handler.emit(&MultiSpan::new(),\n                                  \"aborting due to previous error(s)\",\n                                  errors::Level::Fatal);\n@@ -1222,7 +1221,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                 Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                 None,\n                                                                 false));\n-            let handler = errors::Handler::with_emitter(true, false, false, emitter);\n+            let handler = errors::Handler::with_emitter(true, false, emitter);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print."}, {"sha": "78ce959e5c94e03e1e1f5c3e01cf39291f196c64", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -104,7 +104,7 @@ fn test_env<F>(source_string: &str,\n     let mut options = config::basic_options();\n     options.debugging_opts.verbose = true;\n     options.unstable_features = UnstableFeatures::Allow;\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, false, emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n \n     let cstore = Rc::new(CStore::new(::DefaultTransCrate::metadata_loader()));\n     let sess = session::build_session_(options,"}, {"sha": "17ed1734fe2033a957e7282857f25818f36725b4", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -64,11 +64,11 @@ impl Emitter for EmitterWriter {\n             }\n         }\n \n-        if !db.handler.macro_backtrace {\n+        if !db.handler.flags.external_macro_backtrace {\n             self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n         }\n         self.emit_messages_default(&db.level,\n-                                   db.handler.macro_backtrace,\n+                                   db.handler.flags.external_macro_backtrace,\n                                    &db.styled_message(),\n                                    &db.code,\n                                    &primary_span,\n@@ -798,7 +798,7 @@ impl EmitterWriter {\n                 level: Level::Note,\n                 message: vec![\n                     ([\"this error originates in a macro outside of the current crate\",\n-                      \"(run with -Z macro-backtrace for more info)\"].join(\" \"),\n+                      \"(run with -Z external-macro-backtrace for more info)\"].join(\" \"),\n                      Style::NoStyle),\n                 ],\n                 span: MultiSpan::new(),\n@@ -888,7 +888,7 @@ impl EmitterWriter {\n                             msg: &Vec<(String, Style)>,\n                             code: &Option<DiagnosticId>,\n                             level: &Level,\n-                            macro_backtrace: bool,\n+                            external_macro_backtrace: bool,\n                             max_line_num_len: usize,\n                             is_secondary: bool)\n                             -> io::Result<()> {\n@@ -1086,7 +1086,7 @@ impl EmitterWriter {\n             }\n         }\n \n-        if macro_backtrace {\n+        if external_macro_backtrace {\n             if let Some(ref primary_span) = msp.primary_span().as_ref() {\n                 self.render_macro_backtrace_old_school(primary_span, &mut buffer)?;\n             }\n@@ -1183,7 +1183,7 @@ impl EmitterWriter {\n     }\n     fn emit_messages_default(&mut self,\n                              level: &Level,\n-                             macro_backtrace: bool,\n+                             external_macro_backtrace: bool,\n                              message: &Vec<(String, Style)>,\n                              code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n@@ -1196,7 +1196,7 @@ impl EmitterWriter {\n                                         message,\n                                         code,\n                                         level,\n-                                        macro_backtrace,\n+                                        external_macro_backtrace,\n                                         max_line_num_len,\n                                         false) {\n             Ok(()) => {\n@@ -1218,7 +1218,7 @@ impl EmitterWriter {\n                                                         &child.styled_message(),\n                                                         &None,\n                                                         &child.level,\n-                                                        macro_backtrace,\n+                                                        external_macro_backtrace,\n                                                         max_line_num_len,\n                                                         true) {\n                             Err(e) => panic!(\"failed to emit error: {}\", e),"}, {"sha": "605cfc5ed127eb7331f2bbb76cb250e57f9a8ef9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -233,11 +233,10 @@ pub use diagnostic_builder::DiagnosticBuilder;\n /// (fatal, bug, unimpl) may cause immediate exit,\n /// others log errors for later reporting.\n pub struct Handler {\n+    pub flags: HandlerFlags,\n+\n     err_count: Cell<usize>,\n     emitter: RefCell<Box<Emitter>>,\n-    pub can_emit_warnings: bool,\n-    treat_err_as_bug: bool,\n-    pub macro_backtrace: bool,\n     continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n@@ -248,28 +247,55 @@ pub struct Handler {\n     emitted_diagnostics: RefCell<FxHashSet<u128>>,\n }\n \n+#[derive(Default)]\n+pub struct HandlerFlags {\n+    pub can_emit_warnings: bool,\n+    pub treat_err_as_bug: bool,\n+    pub external_macro_backtrace: bool,\n+}\n+\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n                             treat_err_as_bug: bool,\n-                            macro_backtrace: bool,\n                             cm: Option<Rc<CodeMapper>>)\n                             -> Handler {\n+        Handler::with_tty_emitter_and_flags(\n+            color_config,\n+            cm,\n+            HandlerFlags {\n+                can_emit_warnings,\n+                treat_err_as_bug,\n+                .. Default::default()\n+            })\n+    }\n+\n+    pub fn with_tty_emitter_and_flags(color_config: ColorConfig,\n+                                      cm: Option<Rc<CodeMapper>>,\n+                                      flags: HandlerFlags)\n+                                      -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false));\n-        Handler::with_emitter(can_emit_warnings, treat_err_as_bug, macro_backtrace, emitter)\n+        Handler::with_emitter_and_flags(emitter, flags)\n     }\n \n     pub fn with_emitter(can_emit_warnings: bool,\n                         treat_err_as_bug: bool,\n-                        macro_backtrace: bool,\n                         e: Box<Emitter>)\n                         -> Handler {\n+        Handler::with_emitter_and_flags(\n+            e,\n+            HandlerFlags {\n+                can_emit_warnings,\n+                treat_err_as_bug,\n+                .. Default::default()\n+            })\n+    }\n+\n+    pub fn with_emitter_and_flags(e: Box<Emitter>, flags: HandlerFlags) -> Handler {\n         Handler {\n+            flags,\n             err_count: Cell::new(0),\n             emitter: RefCell::new(e),\n-            can_emit_warnings,\n-            treat_err_as_bug,\n-            macro_backtrace,\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n             tracked_diagnostics: RefCell::new(None),\n@@ -297,7 +323,7 @@ impl Handler {\n                                                     -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n-        if !self.can_emit_warnings {\n+        if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n@@ -310,14 +336,14 @@ impl Handler {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         result.code(code);\n-        if !self.can_emit_warnings {\n+        if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n     pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n-        if !self.can_emit_warnings {\n+        if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n@@ -380,7 +406,7 @@ impl Handler {\n     }\n \n     fn panic_if_treat_err_as_bug(&self) {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             panic!(\"encountered error with `-Z treat_err_as_bug\");\n         }\n     }\n@@ -422,7 +448,7 @@ impl Handler {\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n         let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n@@ -447,15 +473,15 @@ impl Handler {\n         self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n     }\n     pub fn fatal(&self, msg: &str) -> FatalError {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Fatal, msg);\n         db.emit();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Error, msg);\n@@ -508,7 +534,7 @@ impl Handler {\n         panic!(self.fatal(&s));\n     }\n     pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n-        if lvl == Warning && !self.can_emit_warnings {\n+        if lvl == Warning && !self.flags.can_emit_warnings {\n             return;\n         }\n         let mut db = DiagnosticBuilder::new(self, lvl, msg);\n@@ -519,7 +545,7 @@ impl Handler {\n         }\n     }\n     pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: DiagnosticId, lvl: Level) {\n-        if lvl == Warning && !self.can_emit_warnings {\n+        if lvl == Warning && !self.flags.can_emit_warnings {\n             return;\n         }\n         let mut db = DiagnosticBuilder::new_with_code(self, lvl, Some(code), msg);"}, {"sha": "e443f13a7a1ca5ef2207df6a2ec240a9a8f9e2bf", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -353,7 +353,7 @@ pub struct CodegenContext {\n \n impl CodegenContext {\n     pub fn create_diag_handler(&self) -> Handler {\n-        Handler::with_emitter(true, false, false, Box::new(self.diag_emitter.clone()))\n+        Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n     }\n \n     pub fn config(&self, kind: ModuleKind) -> &ModuleConfig {"}, {"sha": "9172bfcde3f9effe62bdbe25ac51912396e4860a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -141,7 +141,6 @@ pub fn run_core(search_paths: SearchPaths,\n     let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n                                                                true,\n                                                                false,\n-                                                               false,\n                                                                Some(codemap.clone()));\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));"}, {"sha": "ea0d32e2a2d5685310ac2ee476c6ee7a084ad95c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -82,7 +82,7 @@ pub fn run(input: &str,\n     let codemap = Rc::new(CodeMap::new(sessopts.file_path_mapping()));\n     let handler =\n         errors::Handler::with_tty_emitter(ColorConfig::Auto,\n-                                          true, false, false,\n+                                          true, false,\n                                           Some(codemap.clone()));\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n@@ -246,7 +246,7 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     // Compile the code\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, false, box emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_("}, {"sha": "951163d35fa0fbc7fe321e18a31e783bdbcc4ee0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -1726,7 +1726,7 @@ mod tests {\n                                                           Some(cm.clone()),\n                                                           false);\n         ParseSess {\n-            span_diagnostic: errors::Handler::with_emitter(true, false, false, Box::new(emitter)),\n+            span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n             config: CrateConfig::new(),\n             included_mod_stack: RefCell::new(Vec::new()),"}, {"sha": "c679efd41ea4629339f24cac4cd5eb5cad7d3965", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -58,7 +58,6 @@ impl ParseSess {\n         let handler = Handler::with_tty_emitter(ColorConfig::Auto,\n                                                 true,\n                                                 false,\n-                                                false,\n                                                 Some(cm.clone()));\n         ParseSess::with_span_handler(handler, cm)\n     }"}, {"sha": "49a697edf4164e64a7eb5fd2b4322d29478228a7", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -58,7 +58,7 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n         };\n \n         if !self.obsolete_set.contains(&kind) &&\n-            (error || self.sess.span_diagnostic.can_emit_warnings) {\n+            (error || self.sess.span_diagnostic.flags.can_emit_warnings) {\n             err.note(desc);\n             self.obsolete_set.insert(kind);\n         }"}, {"sha": "a29250ea5f19f749c2b76542c2c2113ddd433651", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -62,7 +62,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n     let emitter = EmitterWriter::new(Box::new(Shared { data: output.clone() }),\n                                      Some(code_map.clone()),\n                                      false);\n-    let handler = Handler::with_emitter(true, false, false, Box::new(emitter));\n+    let handler = Handler::with_emitter(true, false, Box::new(emitter));\n     handler.span_err(msp, \"foo\");\n \n     assert!(expected_output.chars().next() == Some('\\n'),"}, {"sha": "7faabc6b3a6c6bf53943d80df9bb1cd4ea3dbf4f", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -4,23 +4,23 @@ error: requires at least a format string argument\n 12 |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:13:5\n    |\n 13 |     format!(\"\" 1);\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:14:5\n    |\n 14 |     format!(\"\", 1 1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bb91bbbc9e320661c7d4b00d3512ed67804fbda7", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -4,7 +4,7 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n 12 |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7d5055deb895aa5630cb3d45abee0d43f4124ed3", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n 16 |     myprintln!(\"{}\"); //~ ERROR in this macro\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1da8833e0f838bd57f6f8b301d0714ac2edff4b4", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -5,7 +5,7 @@ error: invalid format string: expected `'}'` but string was terminated\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error.rs:14:5\n@@ -14,7 +14,7 @@ error: invalid format string: unmatched `}` found\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea8aafadc8e79fb9a289367ec0e08a6ced4a1b5e", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -9,7 +9,7 @@ error[E0597]: borrowed value does not live long enough\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "488aeddbf549b1fba0712c63e73f1a56fbcb5ea9", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -10,7 +10,7 @@\n \n // Test that the macro backtrace facility works\n // aux-build:ping.rs\n-// compile-flags: -Z macro-backtrace\n+// compile-flags: -Z external-macro-backtrace\n \n #[macro_use] extern crate ping;\n "}, {"sha": "cb27bb2281d263a17e41ef3edc9434f519355467", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -11,7 +11,7 @@ error: multiple unused formatting arguments\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29"}, {"sha": "0205e9a9bfca3263e77dacd14676a6ede6edc1a2", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -8,7 +8,7 @@ error: multiple unused formatting arguments\n    |                      |    unused\n    |                      unused\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:14:5\n@@ -23,7 +23,7 @@ error: multiple unused formatting arguments\n 18 | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: named argument never used\n   --> $DIR/format-unused-lables.rs:20:35\n@@ -47,7 +47,7 @@ error: multiple unused formatting arguments\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "54b1d47710c979252749f8f022a423df92c96f29", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n 13 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8a17d4e6278cc862d2a6c039dcf5a20ec8abd660", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -16,7 +16,7 @@ error: unreachable statement\n 36 |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b77f5bb3ca54ee7425c9601714e8849419e4ecd", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bcfe2c5bd634b42f85b0124dd362187d9e87669a", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -9,23 +9,23 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:31:5\n    |\n 31 |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:41:5\n    |\n 41 |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dcfefe109c383c6a807198da7acca931303e8a5b", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -16,15 +16,15 @@ error: unreachable statement\n 25 |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:35:5\n    |\n 35 |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "31e63c324d2b16f6530aa43af501c50f5ade5ffe", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -9,23 +9,23 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_while.rs:33:9\n    |\n 33 |         println!(\"I am dead.\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_while.rs:35:5\n    |\n 35 |     println!(\"I am, too.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "07f49d999a4f4987bc0f42c4c64a652d0760b5a4", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n    = note: expected type `&mut std::string::String`\n               found type `std::string::String`\n    = help: try with `&mut format!(\"foo\")`\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "22eecb9d882f6307c8c69798e5cc16eeec99f8f1", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -6,7 +6,7 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `std::fmt::Arguments<'_>`\n               found type `std::string::String`\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0879cb5fac251232db12d6cafd5ca4464c7a0217", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -8,7 +8,7 @@ error[E0597]: `foo` does not live long enough\n    |      |                                              borrow occurs here\n    |      borrowed value needs to live until here\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f9dbddd226f099adc456d6e2b147f6531cbafd34", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -9,7 +9,7 @@ error[E0597]: borrowed value does not live long enough\n 19 | }\n    | - temporary value needs to live until here\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "923dcd01070b8c407473b0ff58718f76e6703a97", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -6,7 +6,7 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving `x` a type\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "24f2cef4a6c6927e395fa8088aa19180534f09c3", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -6,7 +6,7 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving the pattern a type\n    |\n-   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "744a0f96ad7347c5f5e24be1d85e713c56a279d1", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "patch": "@@ -32,4 +32,4 @@ clippy = \"Testing\"\n rls = \"Testing\"\n \n # ping @nrc\n-rustfmt = \"Broken\"\n+rustfmt = \"Testing\""}]}