{"sha": "e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2NjYjZlOTliYjBlOTJlYmVhMTlmMTUwYzhmYmY5YjY5NTg2MzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T13:42:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T13:42:59Z"}, "message": "Start new ctx module", "tree": {"sha": "ac0f868655e52002f8a40015d094e0d55effa764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac0f868655e52002f8a40015d094e0d55effa764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "html_url": "https://github.com/rust-lang/rust/commit/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cad88dd95773f9ede6233fd7d0f3a076c5cda61", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cad88dd95773f9ede6233fd7d0f3a076c5cda61", "html_url": "https://github.com/rust-lang/rust/commit/9cad88dd95773f9ede6233fd7d0f3a076c5cda61"}], "stats": {"total": 83, "additions": 63, "deletions": 20}, "files": [{"sha": "6e92c50ef1eb733b17cc6920d3d62792c02f4f9d", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "patch": "@@ -1,19 +1,19 @@\n import * as vscode from 'vscode';\n-import { Server } from '../server';\n+import { Ctx } from '../ctx';\n // Shows status of rust-analyzer (for debugging)\n \n-export function makeCommand(context: vscode.ExtensionContext) {\n+export function analyzerStatus(ctx: Ctx) {\n     let poller: NodeJS.Timer | null = null;\n-    const tdcp = new TextDocumentContentProvider();\n+    const tdcp = new TextDocumentContentProvider(ctx);\n \n-    context.subscriptions.push(\n+    ctx.pushCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer-status',\n             tdcp,\n         ),\n     );\n \n-    context.subscriptions.push({\n+    ctx.pushCleanup({\n         dispose() {\n             if (poller != null) {\n                 clearInterval(poller);\n@@ -39,17 +39,24 @@ export function makeCommand(context: vscode.ExtensionContext) {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n+\n     uri = vscode.Uri.parse('rust-analyzer-status://status');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n+    ctx: Ctx\n+\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx\n+    }\n+\n     provideTextDocumentContent(\n         _uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n         if (editor == null) {\n             return '';\n         }\n-        return Server.client.sendRequest<string>(\n+        return this.ctx.client.sendRequest<string>(\n             'rust-analyzer/analyzerStatus',\n             null,\n         );"}, {"sha": "ec1995396dc610f1aee20325985b0932c0fcae61", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "patch": "@@ -1,4 +1,4 @@\n-import * as analyzerStatus from './analyzer_status';\n+import { analyzerStatus } from './analyzer_status';\n import * as applySourceChange from './apply_source_change';\n import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';"}, {"sha": "8581667b4e35d9ea3b0da8142de6b15f6e23e36a", "filename": "editors/code/src/ctx.ts", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "patch": "@@ -0,0 +1,30 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+import { Server } from './server';\n+\n+\n+export class Ctx {\n+    private extCtx: vscode.ExtensionContext\n+\n+    constructor(extCtx: vscode.ExtensionContext) {\n+        this.extCtx = extCtx\n+    }\n+\n+    get client(): lc.LanguageClient {\n+        return Server.client\n+    }\n+\n+    registerCommand(\n+        name: string,\n+        factory: (ctx: Ctx) => () => Promise<vscode.TextEditor>,\n+    ) {\n+        const fullName = `rust-analyzer.${name}`\n+        const cmd = factory(this);\n+        const d = vscode.commands.registerCommand(fullName, cmd);\n+        this.pushCleanup(d);\n+    }\n+\n+    pushCleanup(d: { dispose(): any }) {\n+        this.extCtx.subscriptions.push(d)\n+    }\n+}"}, {"sha": "048b9bbd424780cb48bed9e10b3b77a454294fe0", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e53ccb6e99bb0e92ebea19f150c8fbf9b6958634/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=e53ccb6e99bb0e92ebea19f150c8fbf9b6958634", "patch": "@@ -9,8 +9,18 @@ import { StatusDisplay } from './commands/watch_status';\n import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n+import { Ctx } from './ctx'\n+\n+let ctx!: Ctx;\n \n export async function activate(context: vscode.ExtensionContext) {\n+    ctx = new Ctx(context);\n+    ctx.registerCommand(\n+        'analyzerStatus',\n+        commands.analyzerStatus\n+    );\n+\n+\n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n     }\n@@ -48,10 +58,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     }\n \n     // Commands are requests from vscode to the language server\n-    registerCommand(\n-        'rust-analyzer.analyzerStatus',\n-        commands.analyzerStatus.makeCommand(context),\n-    );\n     registerCommand('rust-analyzer.collectGarbage', () =>\n         Server.client.sendRequest<null>('rust-analyzer/collectGarbage', null),\n     );\n@@ -94,15 +100,15 @@ export async function activate(context: vscode.ExtensionContext) {\n         string,\n         lc.GenericNotificationHandler,\n     ]> = [\n-        [\n-            'rust-analyzer/publishDecorations',\n-            notifications.publishDecorations.handle,\n-        ],\n-        [\n-            '$/progress',\n-            params => watchStatus.handleProgressNotification(params),\n-        ],\n-    ];\n+            [\n+                'rust-analyzer/publishDecorations',\n+                notifications.publishDecorations.handle,\n+            ],\n+            [\n+                '$/progress',\n+                params => watchStatus.handleProgressNotification(params),\n+            ],\n+        ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n     const expandMacroContentProvider = new ExpandMacroContentProvider();\n "}]}