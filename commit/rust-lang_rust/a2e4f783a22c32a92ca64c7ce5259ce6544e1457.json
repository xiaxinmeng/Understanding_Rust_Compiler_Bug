{"sha": "a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "node_id": "C_kwDOAAsO6NoAKGEyZTRmNzgzYTIyYzMyYTkyY2E2NGM3Y2U1MjU5Y2U2NTQ0ZTE0NTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T09:54:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-17T09:54:07Z"}, "message": "Auto merge of #13399 - DropDemBits:assists-format-args-capture-pt2, r=Veykril\n\nMigrate assists to format args captures, part 2\n\nContinuation of #13379\n\nMigrates:\n\n- `generate_constant`\n- `generate_default_from_enum_variant`\n- `generate_default_from_new`\n- `generate_delegate_methods`\n- `generate_deref`\n- `generate_documentation_template`\n- `generate_enum_is_method`\n- `generate_enum_projection_method`\n- `generate_from_impl_for_enum`\n- `generate_function`\n- `generate_getter`\n- `generate_impl`\n- `generate_new`\n- `generate_setter`", "tree": {"sha": "de8633db2f556bf8ce2131e470d2cad7fa53a99e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de8633db2f556bf8ce2131e470d2cad7fa53a99e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "html_url": "https://github.com/rust-lang/rust/commit/a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0531aab522f25d6aae30b2cc23a09f4b9257eedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0531aab522f25d6aae30b2cc23a09f4b9257eedc", "html_url": "https://github.com/rust-lang/rust/commit/0531aab522f25d6aae30b2cc23a09f4b9257eedc"}, {"sha": "d7fb8d51d6269c2119254a886d883ac7e051938e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fb8d51d6269c2119254a886d883ac7e051938e", "html_url": "https://github.com/rust-lang/rust/commit/d7fb8d51d6269c2119254a886d883ac7e051938e"}], "stats": {"total": 307, "additions": 150, "deletions": 157}, "files": [{"sha": "ccdfcb0d9e4fd14767a23c1b9baf27c61b36857e", "filename": "crates/ide-assists/src/handlers/generate_constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -77,7 +77,7 @@ pub(crate) fn generate_constant(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n         target_data_for_generate_constant(ctx, current_module, constant_module).unwrap_or_else(\n             || {\n                 let indent = IndentLevel::from_node(statement.syntax());\n-                (statement.syntax().text_range().start(), indent, None, format!(\"\\n{}\", indent))\n+                (statement.syntax().text_range().start(), indent, None, format!(\"\\n{indent}\"))\n             },\n         );\n \n@@ -90,7 +90,7 @@ pub(crate) fn generate_constant(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n             if let Some(file_id) = file_id {\n                 builder.edit_file(file_id);\n             }\n-            builder.insert(offset, format!(\"{}{}\", text, post_string));\n+            builder.insert(offset, format!(\"{text}{post_string}\"));\n         },\n     )\n }\n@@ -103,13 +103,13 @@ fn get_text_for_generate_constant(\n ) -> Option<String> {\n     let constant_token = not_exist_name_ref.pop()?;\n     let vis = if not_exist_name_ref.len() == 0 && !outer_exists { \"\" } else { \"\\npub \" };\n-    let mut text = format!(\"{}const {}: {} = $0;\", vis, constant_token, type_name);\n+    let mut text = format!(\"{vis}const {constant_token}: {type_name} = $0;\");\n     while let Some(name_ref) = not_exist_name_ref.pop() {\n         let vis = if not_exist_name_ref.len() == 0 && !outer_exists { \"\" } else { \"\\npub \" };\n         text = text.replace(\"\\n\", \"\\n    \");\n-        text = format!(\"{}mod {} {{{}\\n}}\", vis, name_ref.to_string(), text);\n+        text = format!(\"{vis}mod {name_ref} {{{text}\\n}}\");\n     }\n-    Some(text.replace(\"\\n\", &format!(\"\\n{}\", indent)))\n+    Some(text.replace(\"\\n\", &format!(\"\\n{indent}\")))\n }\n \n fn target_data_for_generate_constant(\n@@ -134,7 +134,7 @@ fn target_data_for_generate_constant(\n                 .find(|it| it.kind() == SyntaxKind::WHITESPACE && it.to_string().contains(\"\\n\"))\n                 .is_some();\n             let post_string =\n-                if siblings_has_newline { format!(\"{}\", indent) } else { format!(\"\\n{}\", indent) };\n+                if siblings_has_newline { format!(\"{indent}\") } else { format!(\"\\n{indent}\") };\n             Some((offset, indent + 1, Some(file_id), post_string))\n         }\n         _ => Some((TextSize::from(0), 0.into(), Some(file_id), \"\\n\".into())),"}, {"sha": "a6e3d49e0d1ae59b95fda24da8fa82559bf3aaa1", "filename": "crates/ide-assists/src/handlers/generate_default_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -55,12 +55,11 @@ pub(crate) fn generate_default_from_enum_variant(\n             let buf = format!(\n                 r#\"\n \n-impl Default for {0} {{\n+impl Default for {enum_name} {{\n     fn default() -> Self {{\n-        Self::{1}\n+        Self::{variant_name}\n     }}\n }}\"#,\n-                enum_name, variant_name\n             );\n             edit.insert(start_offset, buf);\n         },"}, {"sha": "49d9fd707ffccc234436efd8da912ed5c5a52c06", "filename": "crates/ide-assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -1,8 +1,7 @@\n use ide_db::famous_defs::FamousDefs;\n-use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    ast::{self, HasGenericParams, HasName, HasTypeBounds, Impl},\n+    ast::{self, make, HasGenericParams, HasName, Impl},\n     AstNode,\n };\n \n@@ -77,45 +76,47 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext<'\n     )\n }\n \n+// FIXME: based on from utils::generate_impl_text_inner\n fn generate_trait_impl_text_from_impl(impl_: &ast::Impl, trait_text: &str, code: &str) -> String {\n-    let generic_params = impl_.generic_param_list();\n-    let mut buf = String::with_capacity(code.len());\n-    buf.push_str(\"\\n\\n\");\n-    buf.push_str(\"impl\");\n-\n-    if let Some(generic_params) = &generic_params {\n-        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n-        let toc_params = generic_params.type_or_const_params().map(|toc_param| match toc_param {\n-            ast::TypeOrConstParam::Type(type_param) => {\n-                let mut buf = String::new();\n-                if let Some(it) = type_param.name() {\n-                    format_to!(buf, \"{}\", it.syntax());\n-                }\n-                if let Some(it) = type_param.colon_token() {\n-                    format_to!(buf, \"{} \", it);\n+    let impl_ty = impl_.self_ty().unwrap();\n+    let generic_params = impl_.generic_param_list().map(|generic_params| {\n+        let lifetime_params =\n+            generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n+        let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n+            // remove defaults since they can't be specified in impls\n+            match param {\n+                ast::TypeOrConstParam::Type(param) => {\n+                    let param = param.clone_for_update();\n+                    param.remove_default();\n+                    Some(ast::GenericParam::TypeParam(param))\n                 }\n-                if let Some(it) = type_param.type_bound_list() {\n-                    format_to!(buf, \"{}\", it.syntax());\n+                ast::TypeOrConstParam::Const(param) => {\n+                    let param = param.clone_for_update();\n+                    param.remove_default();\n+                    Some(ast::GenericParam::ConstParam(param))\n                 }\n-                buf\n             }\n-            ast::TypeOrConstParam::Const(const_param) => const_param.syntax().to_string(),\n         });\n-        let generics = lifetimes.chain(toc_params).format(\", \");\n-        format_to!(buf, \"<{}>\", generics);\n-    }\n \n-    buf.push(' ');\n-    buf.push_str(trait_text);\n-    buf.push_str(\" for \");\n-    buf.push_str(&impl_.self_ty().unwrap().syntax().text().to_string());\n+        make::generic_param_list(itertools::chain(lifetime_params, ty_or_const_params))\n+    });\n+\n+    let mut buf = String::with_capacity(code.len());\n+    buf.push_str(\"\\n\\n\");\n+\n+    // `impl{generic_params} {trait_text} for {impl_.self_ty()}`\n+    buf.push_str(\"impl\");\n+    if let Some(generic_params) = &generic_params {\n+        format_to!(buf, \"{generic_params}\")\n+    }\n+    format_to!(buf, \" {trait_text} for {impl_ty}\");\n \n     match impl_.where_clause() {\n         Some(where_clause) => {\n-            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n+            format_to!(buf, \"\\n{where_clause}\\n{{\\n{code}\\n}}\");\n         }\n         None => {\n-            format_to!(buf, \" {{\\n{}\\n}}\", code);\n+            format_to!(buf, \" {{\\n{code}\\n}}\");\n         }\n     }\n "}, {"sha": "e5df3cbdaa963c692bf52a91d50e1234aa06388c", "filename": "crates/ide-assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -51,14 +51,14 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n         Some(field) => {\n             let field_name = field.name()?;\n             let field_ty = field.ty()?;\n-            (format!(\"{}\", field_name), field_ty, field.syntax().text_range())\n+            (format!(\"{field_name}\"), field_ty, field.syntax().text_range())\n         }\n         None => {\n             let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n             let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n             let field_list_index = field_list.fields().position(|it| it == field)?;\n             let field_ty = field.ty()?;\n-            (format!(\"{}\", field_list_index), field_ty, field.syntax().text_range())\n+            (format!(\"{field_list_index}\"), field_ty, field.syntax().text_range())\n         }\n     };\n \n@@ -78,10 +78,12 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n         let adt = ast::Adt::Struct(strukt.clone());\n         let name = method.name(ctx.db()).to_string();\n         let impl_def = find_struct_impl(ctx, &adt, &name).flatten();\n+        let method_name = method.name(ctx.db());\n+\n         acc.add_group(\n             &GroupLabel(\"Generate delegate methods\u2026\".to_owned()),\n             AssistId(\"generate_delegate_methods\", AssistKind::Generate),\n-            format!(\"Generate delegate for `{}.{}()`\", field_name, method.name(ctx.db())),\n+            format!(\"Generate delegate for `{field_name}.{method_name}()`\"),\n             target,\n             |builder| {\n                 // Create the function\n@@ -151,12 +153,12 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n                             Some(cap) => {\n                                 let offset = strukt.syntax().text_range().end();\n                                 let snippet = render_snippet(cap, impl_def.syntax(), cursor);\n-                                let snippet = format!(\"\\n\\n{}\", snippet);\n+                                let snippet = format!(\"\\n\\n{snippet}\");\n                                 builder.insert_snippet(cap, offset, snippet);\n                             }\n                             None => {\n                                 let offset = strukt.syntax().text_range().end();\n-                                let snippet = format!(\"\\n\\n{}\", impl_def.syntax());\n+                                let snippet = format!(\"\\n\\n{impl_def}\");\n                                 builder.insert(offset, snippet);\n                             }\n                         }"}, {"sha": "55b7afb3d3b098e81fca1da02ea84f672dc6bc46", "filename": "crates/ide-assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -66,7 +66,7 @@ fn generate_record_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n     let target = field.syntax().text_range();\n     acc.add(\n         AssistId(\"generate_deref\", AssistKind::Generate),\n-        format!(\"Generate `{:?}` impl using `{}`\", deref_type_to_generate, field_name),\n+        format!(\"Generate `{deref_type_to_generate:?}` impl using `{field_name}`\"),\n         target,\n         |edit| {\n             generate_edit(\n@@ -106,7 +106,7 @@ fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()\n     let target = field.syntax().text_range();\n     acc.add(\n         AssistId(\"generate_deref\", AssistKind::Generate),\n-        format!(\"Generate `{:?}` impl using `{}`\", deref_type_to_generate, field.syntax()),\n+        format!(\"Generate `{deref_type_to_generate:?}` impl using `{field}`\"),\n         target,\n         |edit| {\n             generate_edit(\n@@ -132,18 +132,16 @@ fn generate_edit(\n     let start_offset = strukt.syntax().text_range().end();\n     let impl_code = match deref_type {\n         DerefType::Deref => format!(\n-            r#\"    type Target = {0};\n+            r#\"    type Target = {field_type_syntax};\n \n     fn deref(&self) -> &Self::Target {{\n-        &self.{1}\n+        &self.{field_name}\n     }}\"#,\n-            field_type_syntax, field_name\n         ),\n         DerefType::DerefMut => format!(\n             r#\"    fn deref_mut(&mut self) -> &mut Self::Target {{\n-        &mut self.{}\n+        &mut self.{field_name}\n     }}\"#,\n-            field_name\n         ),\n     };\n     let strukt_adt = ast::Adt::Struct(strukt);"}, {"sha": "b8415c72a2a3256ec14d84fb0ab874dc151d4c01", "filename": "crates/ide-assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -139,40 +139,44 @@ fn make_example_for_fn(ast_func: &ast::Fn, ctx: &AssistContext<'_>) -> Option<St\n \n     let mut example = String::new();\n \n+    let use_path = build_path(ast_func, ctx)?;\n     let is_unsafe = ast_func.unsafe_token().is_some();\n     let param_list = ast_func.param_list()?;\n     let ref_mut_params = ref_mut_params(&param_list);\n     let self_name = self_name(ast_func);\n \n-    format_to!(example, \"use {};\\n\\n\", build_path(ast_func, ctx)?);\n+    format_to!(example, \"use {use_path};\\n\\n\");\n     if let Some(self_name) = &self_name {\n-        if let Some(mtbl) = is_ref_mut_self(ast_func) {\n-            let mtbl = if mtbl == true { \" mut\" } else { \"\" };\n-            format_to!(example, \"let{} {} = ;\\n\", mtbl, self_name);\n+        if let Some(mut_) = is_ref_mut_self(ast_func) {\n+            let mut_ = if mut_ == true { \"mut \" } else { \"\" };\n+            format_to!(example, \"let {mut_}{self_name} = ;\\n\");\n         }\n     }\n     for param_name in &ref_mut_params {\n-        format_to!(example, \"let mut {} = ;\\n\", param_name);\n+        format_to!(example, \"let mut {param_name} = ;\\n\");\n     }\n     // Call the function, check result\n     let function_call = function_call(ast_func, &param_list, self_name.as_deref(), is_unsafe)?;\n     if returns_a_value(ast_func, ctx) {\n         if count_parameters(&param_list) < 3 {\n-            format_to!(example, \"assert_eq!({}, );\\n\", function_call);\n+            format_to!(example, \"assert_eq!({function_call}, );\\n\");\n         } else {\n-            format_to!(example, \"let result = {};\\n\", function_call);\n+            format_to!(example, \"let result = {function_call};\\n\");\n             example.push_str(\"assert_eq!(result, );\\n\");\n         }\n     } else {\n-        format_to!(example, \"{};\\n\", function_call);\n+        format_to!(example, \"{function_call};\\n\");\n     }\n     // Check the mutated values\n-    if is_ref_mut_self(ast_func) == Some(true) {\n-        format_to!(example, \"assert_eq!({}, );\", self_name?);\n+    if let Some(self_name) = &self_name {\n+        if is_ref_mut_self(ast_func) == Some(true) {\n+            format_to!(example, \"assert_eq!({self_name}, );\");\n+        }\n     }\n     for param_name in &ref_mut_params {\n-        format_to!(example, \"assert_eq!({}, );\", param_name);\n+        format_to!(example, \"assert_eq!({param_name}, );\");\n     }\n+\n     Some(example)\n }\n \n@@ -189,7 +193,8 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext<'_>) -> Option<S\n         let intro_for_new = || {\n             let is_new = name == \"new\";\n             if is_new && ret_ty == self_ty {\n-                Some(format!(\"Creates a new [`{}`].\", linkable_self_ty?))\n+                let self_ty = linkable_self_ty?;\n+                Some(format!(\"Creates a new [`{self_ty}`].\"))\n             } else {\n                 None\n             }\n@@ -214,7 +219,9 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext<'_>) -> Option<S\n                 } else {\n                     \"\"\n                 };\n-                Some(format!(\"Returns{reference} the {what} of this [`{}`].\", linkable_self_ty?))\n+\n+                let self_ty = linkable_self_ty?;\n+                Some(format!(\"Returns{reference} the {what} of this [`{self_ty}`].\"))\n             }\n             _ => None,\n         };\n@@ -228,7 +235,9 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext<'_>) -> Option<S\n             if what == \"len\" {\n                 what = \"length\".into()\n             };\n-            Some(format!(\"Sets the {what} of this [`{}`].\", linkable_self_ty?))\n+\n+            let self_ty = linkable_self_ty?;\n+            Some(format!(\"Sets the {what} of this [`{self_ty}`].\"))\n         };\n \n         if let Some(intro) = intro_for_new() {\n@@ -404,7 +413,7 @@ fn arguments_from_params(param_list: &ast::ParamList) -> String {\n         // instance `TuplePat`) could be managed later.\n         Some(ast::Pat::IdentPat(ident_pat)) => match ident_pat.name() {\n             Some(name) => match is_a_ref_mut_param(&param) {\n-                true => format!(\"&mut {}\", name),\n+                true => format!(\"&mut {name}\"),\n                 false => name.to_string(),\n             },\n             None => \"_\".to_string(),\n@@ -424,14 +433,15 @@ fn function_call(\n     let name = ast_func.name()?;\n     let arguments = arguments_from_params(param_list);\n     let function_call = if param_list.self_param().is_some() {\n-        format!(\"{}.{}({})\", self_name?, name, arguments)\n+        let self_ = self_name?;\n+        format!(\"{self_}.{name}({arguments})\")\n     } else if let Some(implementation) = self_partial_type(ast_func) {\n-        format!(\"{}::{}({})\", implementation, name, arguments)\n+        format!(\"{implementation}::{name}({arguments})\")\n     } else {\n-        format!(\"{}({})\", name, arguments)\n+        format!(\"{name}({arguments})\")\n     };\n     match is_unsafe {\n-        true => Some(format!(\"unsafe {{ {} }}\", function_call)),\n+        true => Some(format!(\"unsafe {{ {function_call} }}\")),\n         false => Some(function_call),\n     }\n }\n@@ -469,8 +479,8 @@ fn build_path(ast_func: &ast::Fn, ctx: &AssistContext<'_>) -> Option<String> {\n         .unwrap_or_else(|| \"*\".into());\n     let module_def: ModuleDef = ctx.sema.to_def(ast_func)?.module(ctx.db()).into();\n     match module_def.canonical_path(ctx.db()) {\n-        Some(path) => Some(format!(\"{}::{}::{}\", crate_name, path, leaf)),\n-        None => Some(format!(\"{}::{}\", crate_name, leaf)),\n+        Some(path) => Some(format!(\"{crate_name}::{path}::{leaf}\")),\n+        None => Some(format!(\"{crate_name}::{leaf}\")),\n     }\n }\n "}, {"sha": "dba98f7a04e419d2d4f01d26385833ea3536e889", "filename": "crates/ide-assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -61,21 +61,15 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext<'_>\n         \"Generate an `is_` method for this enum variant\",\n         target,\n         |builder| {\n-            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n             let method = format!(\n-                \"    /// Returns `true` if the {} is [`{variant}`].\n+                \"    /// Returns `true` if the {enum_lowercase_name} is [`{variant_name}`].\n     ///\n-    /// [`{variant}`]: {}::{variant}\n+    /// [`{variant_name}`]: {enum_name}::{variant_name}\n     #[must_use]\n-    {}fn {}(&self) -> bool {{\n-        matches!(self, Self::{variant}{})\n+    {vis}fn {fn_name}(&self) -> bool {{\n+        matches!(self, Self::{variant_name}{pattern_suffix})\n     }}\",\n-                enum_lowercase_name,\n-                enum_name,\n-                vis,\n-                fn_name,\n-                pattern_suffix,\n-                variant = variant_name\n             );\n \n             add_method_to_adt(builder, &parent_enum, impl_def, &method);"}, {"sha": "402ab1ee79d32fb80c425e9d3a648d03bf44de86", "filename": "crates/ide-assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -116,6 +116,14 @@ fn generate_enum_projection_method(\n     assist_description: &str,\n     props: ProjectionProps,\n ) -> Option<()> {\n+    let ProjectionProps {\n+        fn_name_prefix,\n+        self_param,\n+        return_prefix,\n+        return_suffix,\n+        happy_case,\n+        sad_case,\n+    } = props;\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let parent_enum = ast::Adt::Enum(variant.parent_enum());\n@@ -125,7 +133,7 @@ fn generate_enum_projection_method(\n             let (field,) = record.fields().collect_tuple()?;\n             let name = field.name()?.to_string();\n             let ty = field.ty()?;\n-            let pattern_suffix = format!(\" {{ {} }}\", name);\n+            let pattern_suffix = format!(\" {{ {name} }}\");\n             (pattern_suffix, ty, name)\n         }\n         ast::StructKind::Tuple(tuple) => {\n@@ -136,8 +144,7 @@ fn generate_enum_projection_method(\n         ast::StructKind::Unit => return None,\n     };\n \n-    let fn_name =\n-        format!(\"{}_{}\", props.fn_name_prefix, &to_lower_snake_case(&variant_name.text()));\n+    let fn_name = format!(\"{}_{}\", fn_name_prefix, &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(ctx, &parent_enum, &fn_name)?;\n@@ -149,27 +156,15 @@ fn generate_enum_projection_method(\n         assist_description,\n         target,\n         |builder| {\n-            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n             let method = format!(\n-                \"    {0}fn {1}({2}) -> {3}{4}{5} {{\n-        if let Self::{6}{7} = self {{\n-            {8}({9})\n+                \"    {vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type}{return_suffix} {{\n+        if let Self::{variant_name}{pattern_suffix} = self {{\n+            {happy_case}({bound_name})\n         }} else {{\n-            {10}\n+            {sad_case}\n         }}\n-    }}\",\n-                vis,\n-                fn_name,\n-                props.self_param,\n-                props.return_prefix,\n-                field_type.syntax(),\n-                props.return_suffix,\n-                variant_name,\n-                pattern_suffix,\n-                props.happy_case,\n-                bound_name,\n-                props.sad_case,\n-            );\n+    }}\");\n \n             add_method_to_adt(builder, &parent_enum, impl_def, &method);\n         },"}, {"sha": "7c81d2c6a6cc9b3767861f94fa1849f10a2edfe7", "filename": "crates/ide-assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -56,23 +56,18 @@ pub(crate) fn generate_from_impl_for_enum(\n         target,\n         |edit| {\n             let start_offset = variant.parent_enum().syntax().text_range().end();\n-            let from_trait = format!(\"From<{}>\", field_type.syntax());\n+            let from_trait = format!(\"From<{field_type}>\");\n             let impl_code = if let Some(name) = field_name {\n                 format!(\n-                    r#\"    fn from({0}: {1}) -> Self {{\n-        Self::{2} {{ {0} }}\n-    }}\"#,\n-                    name.text(),\n-                    field_type.syntax(),\n-                    variant_name,\n+                    r#\"    fn from({name}: {field_type}) -> Self {{\n+        Self::{variant_name} {{ {name} }}\n+    }}\"#\n                 )\n             } else {\n                 format!(\n-                    r#\"    fn from(v: {}) -> Self {{\n-        Self::{}(v)\n-    }}\"#,\n-                    field_type.syntax(),\n-                    variant_name,\n+                    r#\"    fn from(v: {field_type}) -> Self {{\n+        Self::{variant_name}(v)\n+    }}\"#\n                 )\n             };\n             let from_impl = generate_trait_impl_text(&enum_, &from_trait, &impl_code);"}, {"sha": "e6cc8cacedd913a7ab6176a2297c7f816d521ffe", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -179,7 +179,7 @@ fn add_func_to_accumulator(\n         let function_template = function_builder.render(adt_name.is_some());\n         let mut func = function_template.to_string(ctx.config.snippet_cap);\n         if let Some(name) = adt_name {\n-            func = format!(\"\\n{}impl {} {{\\n{}\\n{}}}\", indent, name, func, indent);\n+            func = format!(\"\\n{indent}impl {name} {{\\n{func}\\n{indent}}}\");\n         }\n         builder.edit_file(file);\n         match ctx.config.snippet_cap {\n@@ -212,23 +212,26 @@ struct FunctionTemplate {\n \n impl FunctionTemplate {\n     fn to_string(&self, cap: Option<SnippetCap>) -> String {\n+        let Self { leading_ws, fn_def, ret_type, should_focus_return_type, trailing_ws, tail_expr } =\n+            self;\n+\n         let f = match cap {\n             Some(cap) => {\n-                let cursor = if self.should_focus_return_type {\n+                let cursor = if *should_focus_return_type {\n                     // Focus the return type if there is one\n-                    match self.ret_type {\n-                        Some(ref ret_type) => ret_type.syntax(),\n-                        None => self.tail_expr.syntax(),\n+                    match ret_type {\n+                        Some(ret_type) => ret_type.syntax(),\n+                        None => tail_expr.syntax(),\n                     }\n                 } else {\n-                    self.tail_expr.syntax()\n+                    tail_expr.syntax()\n                 };\n-                render_snippet(cap, self.fn_def.syntax(), Cursor::Replace(cursor))\n+                render_snippet(cap, fn_def.syntax(), Cursor::Replace(cursor))\n             }\n-            None => self.fn_def.to_string(),\n+            None => fn_def.to_string(),\n         };\n \n-        format!(\"{}{}{}\", self.leading_ws, f, self.trailing_ws)\n+        format!(\"{leading_ws}{f}{trailing_ws}\")\n     }\n }\n \n@@ -330,19 +333,20 @@ impl FunctionBuilder {\n                 let mut indent = IndentLevel::from_node(&it);\n                 if is_method {\n                     indent = indent + 1;\n-                    leading_ws = format!(\"{}\", indent);\n+                    leading_ws = format!(\"{indent}\");\n                 } else {\n-                    leading_ws = format!(\"\\n\\n{}\", indent);\n+                    leading_ws = format!(\"\\n\\n{indent}\");\n                 }\n \n                 fn_def = fn_def.indent(indent);\n                 trailing_ws = String::new();\n             }\n             GeneratedFunctionTarget::InEmptyItemList(it) => {\n                 let indent = IndentLevel::from_node(&it);\n-                leading_ws = format!(\"\\n{}\", indent + 1);\n-                fn_def = fn_def.indent(indent + 1);\n-                trailing_ws = format!(\"\\n{}\", indent);\n+                let leading_indent = indent + 1;\n+                leading_ws = format!(\"\\n{leading_indent}\");\n+                fn_def = fn_def.indent(leading_indent);\n+                trailing_ws = format!(\"\\n{indent}\");\n             }\n         };\n "}, {"sha": "09eedb11fbc1c2c7ead32df0a6527a16732cc761", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -108,9 +108,9 @@ pub(crate) fn generate_getter_impl(\n                 buf.push('\\n');\n             }\n \n-            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n             let (ty, body) = if mutable {\n-                (format!(\"&mut {}\", field_ty), format!(\"&mut self.{}\", field_name))\n+                (format!(\"&mut {field_ty}\"), format!(\"&mut self.{field_name}\"))\n             } else {\n                 (|| {\n                     let krate = ctx.sema.scope(field_ty.syntax())?.krate();\n@@ -126,19 +126,15 @@ pub(crate) fn generate_getter_impl(\n                             )\n                         })\n                 })()\n-                .unwrap_or_else(|| (format!(\"&{}\", field_ty), format!(\"&self.{}\", field_name)))\n+                .unwrap_or_else(|| (format!(\"&{field_ty}\"), format!(\"&self.{field_name}\")))\n             };\n \n+            let mut_ = mutable.then(|| \"mut \").unwrap_or_default();\n             format_to!(\n                 buf,\n-                \"    {}fn {}(&{}self) -> {} {{\n-        {}\n-    }}\",\n-                vis,\n-                fn_name,\n-                mutable.then(|| \"mut \").unwrap_or_default(),\n-                ty,\n-                body,\n+                \"    {vis}fn {fn_name}(&{mut_}self) -> {ty} {{\n+        {body}\n+    }}\"\n             );\n \n             let start_offset = impl_def"}, {"sha": "9af26c04eb458b34d0759a227023c9b5445e5795", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n \n     acc.add(\n         AssistId(\"generate_impl\", AssistKind::Generate),\n-        format!(\"Generate impl for `{}`\", name),\n+        format!(\"Generate impl for `{name}`\"),\n         target,\n         |edit| {\n             let start_offset = nominal.syntax().text_range().end();"}, {"sha": "c441a2dc48e4cf5cdd39e43814e6ec8dc8aece8c", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -51,11 +51,13 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n             buf.push('\\n');\n         }\n \n-        let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+        let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n \n         let trivial_constructors = field_list\n             .fields()\n             .map(|f| {\n+                let name = f.name()?;\n+\n                 let ty = ctx.sema.resolve_type(&f.ty()?)?;\n \n                 let item_in_ns = hir::ItemInNs::from(hir::ModuleDef::from(ty.as_adt()?));\n@@ -72,7 +74,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n                     &ty,\n                 )?;\n \n-                Some(format!(\"{}: {}\", f.name()?.syntax(), expr))\n+                Some(format!(\"{name}: {expr}\"))\n             })\n             .collect::<Vec<_>>();\n \n@@ -81,7 +83,10 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n             .enumerate()\n             .filter_map(|(i, f)| {\n                 if trivial_constructors[i].is_none() {\n-                    Some(format!(\"{}: {}\", f.name()?.syntax(), f.ty()?.syntax()))\n+                    let name = f.name()?;\n+                    let ty = f.ty()?;\n+\n+                    Some(format!(\"{name}: {ty}\"))\n                 } else {\n                     None\n                 }\n@@ -101,7 +106,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n             })\n             .format(\", \");\n \n-        format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n+        format_to!(buf, \"    {vis}fn new({params}) -> Self {{ Self {{ {fields} }} }}\");\n \n         let start_offset = impl_def\n             .and_then(|impl_def| find_impl_block_start(impl_def, &mut buf))"}, {"sha": "e139bcb1a1b05af92627a39d6285575ed0d0ef23", "filename": "crates/ide-assists/src/handlers/generate_setter.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e4f783a22c32a92ca64c7ce5259ce6544e1457/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs?ref=a2e4f783a22c32a92ca64c7ce5259ce6544e1457", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn generate_setter(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n     let impl_def = find_struct_impl(\n         ctx,\n         &ast::Adt::Struct(strukt.clone()),\n-        format!(\"set_{}\", fn_name).as_str(),\n+        format!(\"set_{fn_name}\").as_str(),\n     )?;\n \n     let target = field.syntax().text_range();\n@@ -55,18 +55,12 @@ pub(crate) fn generate_setter(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n                 buf.push('\\n');\n             }\n \n-            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n             format_to!(\n                 buf,\n-                \"    {}fn set_{}(&mut self, {}: {}) {{\n-        self.{} = {};\n-    }}\",\n-                vis,\n-                fn_name,\n-                fn_name,\n-                field_ty,\n-                fn_name,\n-                fn_name,\n+                \"    {vis}fn set_{fn_name}(&mut self, {fn_name}: {field_ty}) {{\n+        self.{fn_name} = {fn_name};\n+    }}\"\n             );\n \n             let start_offset = impl_def"}]}