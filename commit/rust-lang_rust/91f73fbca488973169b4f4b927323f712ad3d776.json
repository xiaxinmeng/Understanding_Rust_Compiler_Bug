{"sha": "91f73fbca488973169b4f4b927323f712ad3d776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZjczZmJjYTQ4ODk3MzE2OWI0ZjRiOTI3MzIzZjcxMmFkM2Q3NzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-21T11:49:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-22T07:19:08Z"}, "message": "use a TypeRelation to compare the types", "tree": {"sha": "ee2f354e766369aa44e2affa8177d7016b106038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee2f354e766369aa44e2affa8177d7016b106038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91f73fbca488973169b4f4b927323f712ad3d776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91f73fbca488973169b4f4b927323f712ad3d776", "html_url": "https://github.com/rust-lang/rust/commit/91f73fbca488973169b4f4b927323f712ad3d776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91f73fbca488973169b4f4b927323f712ad3d776/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "978470f711b3be3350a46d386a424e1dfb1ea148", "url": "https://api.github.com/repos/rust-lang/rust/commits/978470f711b3be3350a46d386a424e1dfb1ea148", "html_url": "https://github.com/rust-lang/rust/commit/978470f711b3be3350a46d386a424e1dfb1ea148"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "d0293131b263a62969f8f95dd26a77ed3f777001", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 80, "deletions": 18, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/91f73fbca488973169b4f4b927323f712ad3d776/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f73fbca488973169b4f4b927323f712ad3d776/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=91f73fbca488973169b4f4b927323f712ad3d776", "patch": "@@ -7,7 +7,11 @@ use rustc_middle::{\n         BasicBlock, Body, Location, Operand, Rvalue, Statement, StatementKind, Terminator,\n         TerminatorKind,\n     },\n-    ty::{self, fold::BottomUpFolder, ParamEnv, Ty, TyCtxt, TypeFoldable},\n+    ty::{\n+        self,\n+        relate::{Relate, RelateResult, TypeRelation},\n+        ParamEnv, Ty, TyCtxt,\n+    },\n };\n \n #[derive(Copy, Clone, Debug)]\n@@ -103,23 +107,81 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their\n         // late-bound lifetimes are still around and can lead to type\n-        // differences. Normalize both of them away.\n-        // Also see the related but slightly different post-monomorphization\n-        // method in `interpret/eval_context.rs`.\n-        let normalize = |ty: Ty<'tcx>| {\n-            ty.fold_with(&mut BottomUpFolder {\n-                tcx: self.tcx,\n-                ty_op: |ty| ty,\n-                // We just erase all late-bound lifetimes, but this is not fully correct (FIXME):\n-                // lifetimes in invariant positions could matter (e.g. through associated types).\n-                // But that just means we miss some potential incompatible types, it will not\n-                // lead to wrong errors.\n-                lt_op: |_| self.tcx.lifetimes.re_erased,\n-                // Evaluate consts.\n-                ct_op: |ct| ct.eval(self.tcx, param_env),\n-            })\n-        };\n-        normalize(src) == normalize(dest)\n+        // differences. So we compare ignoring lifetimes.\n+        struct LifetimeIgnoreRelation<'tcx> {\n+            tcx: TyCtxt<'tcx>,\n+            param_env: ty::ParamEnv<'tcx>,\n+        }\n+\n+        impl TypeRelation<'tcx> for LifetimeIgnoreRelation<'tcx> {\n+            fn tcx(&self) -> TyCtxt<'tcx> {\n+                self.tcx\n+            }\n+\n+            fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+                self.param_env\n+            }\n+\n+            fn tag(&self) -> &'static str {\n+                \"librustc_mir::transform::validate\"\n+            }\n+\n+            fn a_is_expected(&self) -> bool {\n+                true\n+            }\n+\n+            fn relate_with_variance<T: Relate<'tcx>>(\n+                &mut self,\n+                _: ty::Variance,\n+                a: &T,\n+                b: &T,\n+            ) -> RelateResult<'tcx, T> {\n+                // Ignore variance, require types to be exactly the same.\n+                self.relate(a, b)\n+            }\n+\n+            fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+                if a == b {\n+                    // Short-circuit.\n+                    return Ok(a);\n+                }\n+                ty::relate::super_relate_tys(self, a, b)\n+            }\n+\n+            fn regions(\n+                &mut self,\n+                a: ty::Region<'tcx>,\n+                _b: ty::Region<'tcx>,\n+            ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n+                // Ignore regions.\n+                Ok(a)\n+            }\n+\n+            fn consts(\n+                &mut self,\n+                a: &'tcx ty::Const<'tcx>,\n+                b: &'tcx ty::Const<'tcx>,\n+            ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+                ty::relate::super_relate_consts(self, a, b)\n+            }\n+\n+            fn binders<T>(\n+                &mut self,\n+                a: &ty::Binder<T>,\n+                b: &ty::Binder<T>,\n+            ) -> RelateResult<'tcx, ty::Binder<T>>\n+            where\n+                T: Relate<'tcx>,\n+            {\n+                self.relate(a.skip_binder(), b.skip_binder())?;\n+                Ok(a.clone())\n+            }\n+        }\n+\n+        // Instantiate and run relation.\n+        let mut relator: LifetimeIgnoreRelation<'tcx> =\n+            LifetimeIgnoreRelation { tcx: self.tcx, param_env };\n+        relator.relate(&src, &dest).is_ok()\n     }\n }\n "}]}