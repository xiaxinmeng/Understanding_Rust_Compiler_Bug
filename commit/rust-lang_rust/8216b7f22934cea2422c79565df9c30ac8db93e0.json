{"sha": "8216b7f22934cea2422c79565df9c30ac8db93e0", "node_id": "C_kwDOAAsO6NoAKDgyMTZiN2YyMjkzNGNlYTI0MjJjNzk1NjVkZjljMzBhYzhkYjkzZTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-26T00:14:16Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-26T00:14:16Z"}, "message": "Make some region folders a little stricter.\n\nBecause certain regions cannot occur in them.", "tree": {"sha": "a210a81398391e3dbb035cabdc1bc648b387a14a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a210a81398391e3dbb035cabdc1bc648b387a14a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8216b7f22934cea2422c79565df9c30ac8db93e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8216b7f22934cea2422c79565df9c30ac8db93e0", "html_url": "https://github.com/rust-lang/rust/commit/8216b7f22934cea2422c79565df9c30ac8db93e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8216b7f22934cea2422c79565df9c30ac8db93e0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458d4dae845ec155b285681a5b88305641abb868", "url": "https://api.github.com/repos/rust-lang/rust/commits/458d4dae845ec155b285681a5b88305641abb868", "html_url": "https://github.com/rust-lang/rust/commit/458d4dae845ec155b285681a5b88305641abb868"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "aab005dacf3e29ced9980979ad9cfa46d6326d3e", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8216b7f22934cea2422c79565df9c30ac8db93e0", "patch": "@@ -1576,17 +1576,10 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n             && let hir::OpaqueTyOrigin::FnReturn(source) | hir::OpaqueTyOrigin::AsyncFn(source) = opaque.origin\n             && source == self.fn_def_id\n         {\n-            let opaque_ty = tcx.fold_regions(unshifted_opaque_ty, |re, depth| {\n-                if let ty::ReLateBound(index, bv) = re.kind() {\n-                    if depth != ty::INNERMOST {\n-                        return tcx.mk_re_error_with_message(\n-                            DUMMY_SP,\n-                            \"we shouldn't walk non-predicate binders with `impl Trait`...\",\n-                        );\n-                    }\n-                    tcx.mk_re_late_bound(index.shifted_out_to_binder(self.depth), bv)\n-                } else {\n-                    re\n+            let opaque_ty = tcx.fold_regions(unshifted_opaque_ty, |re, _depth| {\n+                match re.kind() {\n+                    ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReError(_) => re,\n+                    r => bug!(\"unexpected region: {r:?}\"),\n                 }\n             });\n             for (bound, bound_span) in tcx"}, {"sha": "41547dd2a754d356506cf3d9212c389db4750b5c", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=8216b7f22934cea2422c79565df9c30ac8db93e0", "patch": "@@ -386,8 +386,10 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n \n     fn ct_infer(&self, ty: Ty<'tcx>, _: Option<&ty::GenericParamDef>, span: Span) -> Const<'tcx> {\n         let ty = self.tcx.fold_regions(ty, |r, _| match *r {\n-            ty::ReErased => self.tcx.lifetimes.re_static,\n-            _ => r,\n+            // This is never reached in practice. If it ever is reached,\n+            // `ReErased` should be changed to `ReStatic`, and any other region\n+            // left alone.\n+            r => bug!(\"unexpected region: {r:?}\"),\n         });\n         self.tcx().const_error_with_message(ty, span, \"bad placeholder constant\")\n     }"}, {"sha": "d05d3e2d3dcf56811bfdfdb452f7f85f2e5a6fc7", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=8216b7f22934cea2422c79565df9c30ac8db93e0", "patch": "@@ -829,7 +829,13 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n                     None => region_param_out_of_range(data, self.substs),\n                 }\n             }\n-            _ => r,\n+            ty::ReLateBound(..)\n+            | ty::ReFree(_)\n+            | ty::ReStatic\n+            | ty::RePlaceholder(_)\n+            | ty::ReErased\n+            | ty::ReError(_) => r,\n+            ty::ReVar(_) => bug!(\"unexpected region: {r:?}\"),\n         }\n     }\n "}, {"sha": "996dc329dcb9b45622f5fbc8430c8ac9475f0a28", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=8216b7f22934cea2422c79565df9c30ac8db93e0", "patch": "@@ -91,14 +91,15 @@ pub(in crate::solve) fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n ) -> ty::Binder<'tcx, Ty<'tcx>> {\n     debug_assert!(!ty.has_late_bound_regions());\n     let mut counter = 0;\n-    let ty = tcx.fold_regions(ty, |mut r, current_depth| {\n-        if let ty::ReErased = r.kind() {\n+    let ty = tcx.fold_regions(ty, |r, current_depth| match r.kind() {\n+        ty::ReErased => {\n             let br =\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(counter), kind: ty::BrAnon(None) };\n             counter += 1;\n-            r = tcx.mk_re_late_bound(current_depth, br);\n+            tcx.mk_re_late_bound(current_depth, br)\n         }\n-        r\n+        // All free regions should be erased here.\n+        r => bug!(\"unexpected region: {r:?}\"),\n     });\n     let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n         (0..counter).map(|_| ty::BoundVariableKind::Region(ty::BrAnon(None))),"}, {"sha": "af61ca0c29f44e6c4ba9387420a018984701d9b7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8216b7f22934cea2422c79565df9c30ac8db93e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=8216b7f22934cea2422c79565df9c30ac8db93e0", "patch": "@@ -3006,16 +3006,16 @@ fn bind_generator_hidden_types_above<'tcx>(\n \n             // Only remap erased regions if we use them.\n             if considering_regions {\n-                ty = tcx.fold_regions(ty, |mut r, current_depth| {\n-                    if let ty::ReErased = r.kind() {\n+                ty = tcx.fold_regions(ty, |r, current_depth| match r.kind() {\n+                    ty::ReErased => {\n                         let br = ty::BoundRegion {\n                             var: ty::BoundVar::from_u32(counter),\n                             kind: ty::BrAnon(None),\n                         };\n                         counter += 1;\n-                        r = tcx.mk_re_late_bound(current_depth, br);\n+                        tcx.mk_re_late_bound(current_depth, br)\n                     }\n-                    r\n+                    r => bug!(\"unexpected region: {r:?}\"),\n                 })\n             }\n "}, {"sha": "1b622905e1adb51fc38c29f297c27fd78e56e0f6", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8216b7f22934cea2422c79565df9c30ac8db93e0/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8216b7f22934cea2422c79565df9c30ac8db93e0/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8216b7f22934cea2422c79565df9c30ac8db93e0", "patch": "@@ -741,8 +741,10 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n+            // These are the regions that can be seen in the AST.\n             ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned().unwrap_or(r),\n-            _ => r,\n+            ty::ReEarlyBound(_) | ty::ReStatic | ty::ReLateBound(..) | ty::ReError(_) => r,\n+            r => bug!(\"unexpected region: {r:?}\"),\n         }\n     }\n }"}]}