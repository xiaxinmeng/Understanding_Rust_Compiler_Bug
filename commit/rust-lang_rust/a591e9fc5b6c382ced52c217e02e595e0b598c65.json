{"sha": "a591e9fc5b6c382ced52c217e02e595e0b598c65", "node_id": "C_kwDOAAsO6NoAKGE1OTFlOWZjNWI2YzM4MmNlZDUyYzIxN2UwMmU1OTVlMGI1OThjNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T21:56:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T21:56:00Z"}, "message": "Auto merge of #2440 - RalfJung:up, r=RalfJung\n\nrustup", "tree": {"sha": "ce0bf30e32407375746c84b3e5909d2cfddce338", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0bf30e32407375746c84b3e5909d2cfddce338"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a591e9fc5b6c382ced52c217e02e595e0b598c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a591e9fc5b6c382ced52c217e02e595e0b598c65", "html_url": "https://github.com/rust-lang/rust/commit/a591e9fc5b6c382ced52c217e02e595e0b598c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a591e9fc5b6c382ced52c217e02e595e0b598c65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff47429d9aa6058328f634c641c1710448f217d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff47429d9aa6058328f634c641c1710448f217d", "html_url": "https://github.com/rust-lang/rust/commit/fff47429d9aa6058328f634c641c1710448f217d"}, {"sha": "cbff63a6944b3285a9525881dc85870e694fb055", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbff63a6944b3285a9525881dc85870e694fb055", "html_url": "https://github.com/rust-lang/rust/commit/cbff63a6944b3285a9525881dc85870e694fb055"}], "stats": {"total": 43, "additions": 12, "deletions": 31}, "files": [{"sha": "b70ab6fdd46e5d99110ed57722322b787a9f6656", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -1 +1 @@\n-35a061724802377a21fc6dac1ebcbb9b8d1f558a\n+7fe022f5aa32bbbb33c3a58755729d6667a461a9"}, {"sha": "2c9bfe803ad2f5547b9e488d0117bff0c1d0f307", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -545,11 +545,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         true\n     }\n \n-    #[inline(always)]\n-    fn enforce_number_no_provenance(_ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n-        true\n-    }\n-\n     #[inline(always)]\n     fn enforce_abi(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n         ecx.machine.enforce_abi\n@@ -753,14 +748,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         intptrcast::GlobalStateInner::ptr_from_addr_cast(ecx, addr)\n     }\n \n-    #[inline(always)]\n-    fn ptr_from_addr_transmute(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n-        addr: u64,\n-    ) -> Pointer<Option<Self::Provenance>> {\n-        intptrcast::GlobalStateInner::ptr_from_addr_transmute(ecx, addr)\n-    }\n-\n     fn expose_ptr(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         ptr: Pointer<Self::Provenance>,"}, {"sha": "679686b4005e1794838a319e37d242f393668f0b", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -57,7 +57,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n \n             Offset => {\n                 assert!(left.layout.ty.is_unsafe_ptr());\n-                let ptr = self.scalar_to_ptr(left.to_scalar()?)?;\n+                let ptr = left.to_scalar()?.to_pointer(self)?;\n                 let offset = right.to_scalar()?.to_machine_isize(self)?;\n \n                 let pointee_ty =\n@@ -71,7 +71,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             Add | Sub | BitOr | BitAnd | BitXor => {\n                 assert!(left.layout.ty.is_unsafe_ptr());\n                 assert!(right.layout.ty.is_unsafe_ptr());\n-                let ptr = self.scalar_to_ptr(left.to_scalar()?)?;\n+                let ptr = left.to_scalar()?.to_pointer(self)?;\n                 // We do the actual operation with usize-typed scalars.\n                 let left = ImmTy::from_uint(ptr.addr().bytes(), self.machine.layouts.usize);\n                 let right = ImmTy::from_uint("}, {"sha": "d467c3c509f5f0e89474091f48d7aad7069a9904", "filename": "src/shims/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fsimd.rs?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -201,7 +201,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             this.saturating_arith(mir_op, &left, &right)?\n                         }\n                         Op::WrappingOffset => {\n-                            let ptr = this.scalar_to_ptr(left.to_scalar()?)?;\n+                            let ptr = left.to_scalar()?.to_pointer(this)?;\n                             let offset_count = right.to_scalar()?.to_machine_isize(this)?;\n                             let pointee_ty = left.layout.ty.builtin_deref(true).unwrap().ty;\n "}, {"sha": "687c84308a97cf67be45d40847be3a0c4a3eceb0", "filename": "src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -26,7 +26,7 @@ use helpers::check_arg_count;\n #[derive(Debug)]\n pub struct CatchUnwindData<'tcx> {\n     /// The `catch_fn` callback to call in case of a panic.\n-    catch_fn: Scalar<Provenance>,\n+    catch_fn: Pointer<Option<Provenance>>,\n     /// The `data` argument for that callback.\n     data: Scalar<Provenance>,\n     /// The return place from the original call to `try`.\n@@ -86,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let [try_fn, data, catch_fn] = check_arg_count(args)?;\n         let try_fn = this.read_pointer(try_fn)?;\n         let data = this.read_scalar(data)?.check_init()?;\n-        let catch_fn = this.read_scalar(catch_fn)?.check_init()?;\n+        let catch_fn = this.read_pointer(catch_fn)?;\n \n         // Now we make a function call, and pass `data` as first and only argument.\n         let f_instance = this.get_ptr_fn(try_fn)?.as_instance()?;\n@@ -140,8 +140,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let payload = this.active_thread_mut().panic_payload.take().unwrap();\n \n             // Push the `catch_fn` stackframe.\n-            let f_instance =\n-                this.get_ptr_fn(this.scalar_to_ptr(catch_unwind.catch_fn)?)?.as_instance()?;\n+            let f_instance = this.get_ptr_fn(catch_unwind.catch_fn)?.as_instance()?;\n             trace!(\"catch_fn: {:?}\", f_instance);\n             this.call_function(\n                 f_instance,"}, {"sha": "2f0fb41b9e92facb67a000115a33e63b3ee5c4e5", "filename": "src/shims/tls.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -241,15 +241,10 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // (that would be basically https://github.com/rust-lang/miri/issues/450),\n         // we specifically look up the static in libstd that we know is placed\n         // in that section.\n-        let thread_callback = this.eval_path_scalar(&[\n-            \"std\",\n-            \"sys\",\n-            \"windows\",\n-            \"thread_local_key\",\n-            \"p_thread_callback\",\n-        ])?;\n-        let thread_callback =\n-            this.get_ptr_fn(this.scalar_to_ptr(thread_callback)?)?.as_instance()?;\n+        let thread_callback = this\n+            .eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"thread_local_key\", \"p_thread_callback\"])?\n+            .to_pointer(this)?;\n+        let thread_callback = this.get_ptr_fn(thread_callback)?.as_instance()?;\n \n         // The signature of this function is `unsafe extern \"system\" fn(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)`.\n         let reason = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"DLL_THREAD_DETACH\"])?;"}, {"sha": "59de10498745fd443c7ff2fa815b9d92e37106ca", "filename": "src/shims/unix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e9fc5b6c382ced52c217e02e595e0b598c65/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=a591e9fc5b6c382ced52c217e02e595e0b598c65", "patch": "@@ -121,7 +121,7 @@ pub fn futex<'tcx>(\n             // The API requires `addr` to be a 4-byte aligned pointer, and will\n             // use the 4 bytes at the given address as an (atomic) i32.\n             this.check_ptr_access_align(\n-                this.scalar_to_ptr(addr_scalar)?,\n+                addr_scalar.to_pointer(this)?,\n                 Size::from_bytes(4),\n                 Align::from_bytes(4).unwrap(),\n                 CheckInAllocMsg::MemoryAccessTest,"}]}