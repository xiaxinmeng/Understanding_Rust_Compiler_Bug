{"sha": "53120b59ae7871dfb1cb2b41f04944802fd534f1", "node_id": "C_kwDOAAsO6NoAKDUzMTIwYjU5YWU3ODcxZGZiMWNiMmI0MWYwNDk0NDgwMmZkNTM0ZjE", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-24T07:36:23Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-24T07:36:23Z"}, "message": "Recover missing suggestion part under NLL", "tree": {"sha": "9b9d5922cdbd0cee5ac0b978eb2bf42e11da393d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b9d5922cdbd0cee5ac0b978eb2bf42e11da393d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53120b59ae7871dfb1cb2b41f04944802fd534f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53120b59ae7871dfb1cb2b41f04944802fd534f1", "html_url": "https://github.com/rust-lang/rust/commit/53120b59ae7871dfb1cb2b41f04944802fd534f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53120b59ae7871dfb1cb2b41f04944802fd534f1/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0db3e7c81c36d2ec623849d17d9df4858abca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0db3e7c81c36d2ec623849d17d9df4858abca1", "html_url": "https://github.com/rust-lang/rust/commit/7b0db3e7c81c36d2ec623849d17d9df4858abca1"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "fd78b483b75f25c24af7bcd60c5130591cdde612", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -4,6 +4,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n+    RelateParamBound,\n };\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n@@ -166,9 +167,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let type_test_span = type_test.locations.span(&self.body);\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n+                        let generic_ty = type_test.generic_kind.to_ty(self.infcx.tcx);\n+                        let origin = RelateParamBound(type_test_span, generic_ty, None);\n                         self.buffer_error(self.infcx.construct_generic_bound_failure(\n                             type_test_span,\n-                            None,\n+                            Some(origin),\n                             type_test.generic_kind,\n                             lower_bound_region,\n                             self.body.source.def_id().as_local(),"}, {"sha": "b6856089a84f9f18abde1af4766d301da898b536", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -47,7 +47,7 @@ LL | |         // This function call requires that\n ...  |\n LL | |         require(value);\n LL | |     });\n-   | |_____^\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3d4cfc1610a6690757a8768e2e3249b11974756d", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -5,7 +5,7 @@ LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     x\n-   |     ^\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:26:5\n@@ -14,7 +14,7 @@ LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n    |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     x\n-   |     ^\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cc5aa1eb11ec039c74e920ef179154efb7f0ca3c", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -4,7 +4,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn generic2<T: Iterator>(value: T) {\n    |             -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "8fe25181da1a035c8a7572ee0cebd352861123f7", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -33,6 +33,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n@@ -96,6 +97,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23"}, {"sha": "e0ff544fe471333a384714d69ea6b372a1c765c3", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -5,6 +5,7 @@ LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-fn.rs:28:5\n@@ -13,6 +14,7 @@ LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62db6dd845a28165709c3960c5f6540ae74cdbe5", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -35,7 +35,7 @@ LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -86,7 +86,7 @@ LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                                   - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39"}, {"sha": "1ee788b40ab9ea296f965e32b8d523dc5801c150", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -34,6 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -70,6 +71,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29"}, {"sha": "c51edb7868d7a8ef880c72ab02a77532cdae021f", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<'a, T>() -> &'a ()\n    |            - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     bar::<T::Output>()\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3e5e4868341edf613f176f1cf973fde0c61d3527", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -55,7 +55,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n    |                     - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "dc2f23b4fc8a33b8bcd4f4357b00fd5110334995", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -33,7 +33,7 @@ LL | fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     with_signature(x, |y| y)\n-   |                       ^^^^^\n+   |                       ^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:41:5\n@@ -42,7 +42,7 @@ LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n    |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     x\n-   |     ^\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9f728c77b34b9d0420906052b5b6650c56bf6ed", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -47,7 +47,7 @@ LL | |         // See `correct_region`, which explains the point of this\n ...  |\n LL | |         require(&x, &y)\n LL | |     })\n-   | |_____^\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -130,7 +130,7 @@ LL | |\n LL | |         // See `correct_region`\n LL | |         require(&x, &y)\n LL | |     })\n-   | |_____^\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}, {"sha": "a2e6a5d57cd6278891798e1640c6fd3f43268774", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -4,7 +4,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n    |                      - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     outlives(cell, t)\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "fce360dd54bfb28d84ca2f2efc7bd9525c1eea90", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -5,7 +5,7 @@ LL | fn no_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     x\n-   |     ^\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:26:5\n@@ -14,7 +14,7 @@ LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n    |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     x\n-   |     ^\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a3b410c2cfb8c4946c53b40be46e6e828b4bf979", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53120b59ae7871dfb1cb2b41f04944802fd534f1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=53120b59ae7871dfb1cb2b41f04944802fd534f1", "patch": "@@ -22,7 +22,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n-   |     ^\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 3 previous errors\n "}]}