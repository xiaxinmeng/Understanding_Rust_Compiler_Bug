{"sha": "5150b9811b520843e7a4905da4e6030b5f7ff9fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTBiOTgxMWI1MjA4NDNlN2E0OTA1ZGE0ZTYwMzBiNWY3ZmY5ZmQ=", "commit": {"author": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2013-01-29T14:28:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-04T03:27:27Z"}, "message": "rustc: MIPS32 support", "tree": {"sha": "333ac0f7018897a1829fe05e0ba3c3eff034427d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/333ac0f7018897a1829fe05e0ba3c3eff034427d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5150b9811b520843e7a4905da4e6030b5f7ff9fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5150b9811b520843e7a4905da4e6030b5f7ff9fd", "html_url": "https://github.com/rust-lang/rust/commit/5150b9811b520843e7a4905da4e6030b5f7ff9fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5150b9811b520843e7a4905da4e6030b5f7ff9fd/comments", "author": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ecd9e03ff9a7f96d324b63e49c94d3c5d9a51cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ecd9e03ff9a7f96d324b63e49c94d3c5d9a51cb", "html_url": "https://github.com/rust-lang/rust/commit/0ecd9e03ff9a7f96d324b63e49c94d3c5d9a51cb"}], "stats": {"total": 175, "additions": 164, "deletions": 11}, "files": [{"sha": "8d6e9b6c285628b7e3925d5d03fb1d0bb6aa8ce9", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -244,7 +244,7 @@ DRIVER_CRATE := $(S)src/driver/driver.rs\n ######################################################################\n \n # FIXME: x86-ism\n-LLVM_COMPONENTS=x86 arm ipo bitreader bitwriter linker asmparser jit mcjit \\\n+LLVM_COMPONENTS=x86 arm mips ipo bitreader bitwriter linker asmparser jit mcjit \\\n                 interpreter\n \n define DEF_LLVM_VARS"}, {"sha": "4d599640f36fab50ff8e9bc249ff3bbfe77f3939", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -41,8 +41,14 @@ struct Registers {\n     data: [u32 * 16]\n }\n \n+#[cfg(target_arch=\"mips\")]\n+struct Registers {\n+    data: [u32 * 32]\n+}\n+\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n struct Context {\n     regs: Registers,\n     next: *Context,\n@@ -69,6 +75,7 @@ struct BoxedRegion {\n \n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n struct Task {\n     // Public fields\n     refcount: intptr_t,                 // 0"}, {"sha": "c6229d7604c94f14100c5e88832f04ca980f7c4e", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -203,6 +203,7 @@ pub mod types {\n \n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch = \"arm\")]\n+        #[cfg(target_arch = \"mips\")]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;"}, {"sha": "07467575319b7e92f28872e6439ea77961be1dbb", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -28,6 +28,7 @@ pub mod inst {\n \n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n+    #[cfg(target_arch = \"mips\")]\n     pub const bits: uint = 32;\n \n     #[cfg(target_arch = \"x86_64\")]"}, {"sha": "6e040286ba4b33e715ffde0679d0d832658b3ced", "filename": "src/libcore/os.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -1097,6 +1097,9 @@ pub mod consts {\n     #[cfg(target_arch = \"arm\")]\n     pub use os::consts::arm::*;\n \n+    #[cfg(target_arch = \"mips\")]\n+    use os::consts::mips::*;\n+\n     pub mod x86 {\n         pub const ARCH: &str = \"x86\";\n     }\n@@ -1106,6 +1109,9 @@ pub mod consts {\n     pub mod arm {\n         pub const ARCH: &str = \"arm\";\n     }\n+    pub mod mips {\n+        pub const ARCH: &str = \"mips\";\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "8d528a11598394601b753c03b7d1a66d7c52dcaa", "filename": "src/libcore/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -91,6 +91,7 @@ pub pure fn Path(s: &str) -> Path {\n mod stat {\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n+    #[cfg(target_arch = \"mips\")]\n     pub mod arch {\n         use libc;\n "}, {"sha": "ec3ab25a27dda98ee46dd29924da07e8da57b603", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -166,6 +166,7 @@ pub mod tests {\n     #[test]\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n+    #[cfg(target_arch = \"mips\")]\n     pub fn size_of_32() {\n         assert size_of::<uint>() == 4u;\n         assert size_of::<*uint>() == 4u;\n@@ -196,6 +197,7 @@ pub mod tests {\n     #[test]\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n+    #[cfg(target_arch = \"mips\")]\n     pub fn align_of_32() {\n         assert pref_align_of::<uint>() == 4u;\n         assert pref_align_of::<*uint>() == 4u;"}, {"sha": "32d434ed49d3b636d787a95dd286210c84650acc", "filename": "src/librustc/back/mips.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use back::target_strs;\n+use driver::session;\n+use session::sess_os_to_meta_os;\n+use metadata::loader::meta_section_name;\n+\n+pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n+    return target_strs::t {\n+        module_asm: ~\"\",\n+\n+        meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)),\n+\n+        data_layout: match target_os {\n+          session::os_macos => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_win32 => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_linux => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_android => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_freebsd => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+        },\n+\n+        target_triple: match target_os {\n+          session::os_macos => ~\"mips-apple-darwin\",\n+          session::os_win32 => ~\"mips-pc-mingw32\",\n+          session::os_linux => ~\"mips-unknown-linux-gnu\",\n+          session::os_android => ~\"mips-unknown-android-gnu\",\n+          session::os_freebsd => ~\"mips-unknown-freebsd\"\n+        },\n+\n+        cc_args: ~[]\n+    };\n+}\n+\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "b24cdf9c602c4e7c810dd0f0b4b195a24da6d058", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -11,7 +11,7 @@\n use core::prelude::*;\n \n use back::link;\n-use back::{arm, x86, x86_64};\n+use back::{arm, x86, x86_64, mips};\n use driver::session::{Aggressive};\n use driver::session::{Session, Session_, OptLevel, No, Less, Default};\n use driver::session;\n@@ -94,7 +94,8 @@ pub fn default_configuration(sess: Session, +argv0: ~str, input: input) ->\n     let (end,arch,wordsz) = match sess.targ_cfg.arch {\n       session::arch_x86 => (~\"little\",~\"x86\",~\"32\"),\n       session::arch_x86_64 => (~\"little\",~\"x86_64\",~\"64\"),\n-      session::arch_arm => (~\"little\",~\"arm\",~\"32\")\n+      session::arch_arm => (~\"little\",~\"arm\",~\"32\"),\n+      session::arch_mips => (~\"little\",~\"arm\",~\"32\")\n     };\n \n     return ~[ // Target bindings.\n@@ -472,6 +473,8 @@ pub fn get_arch(triple: ~str) -> Option<session::arch> {\n         } else if str::contains(triple, ~\"arm\") ||\n                       str::contains(triple, ~\"xscale\") {\n             Some(session::arch_arm)\n+        } else if str::contains(triple, ~\"mips\") {\n+            Some(session::arch_mips)\n         } else { None }\n }\n \n@@ -490,12 +493,14 @@ pub fn build_target_config(sopts: @session::options,\n     let (int_type, uint_type, float_type) = match arch {\n       session::arch_x86 => (ast::ty_i32, ast::ty_u32, ast::ty_f64),\n       session::arch_x86_64 => (ast::ty_i64, ast::ty_u64, ast::ty_f64),\n-      session::arch_arm => (ast::ty_i32, ast::ty_u32, ast::ty_f64)\n+      session::arch_arm => (ast::ty_i32, ast::ty_u32, ast::ty_f64),\n+      session::arch_mips => (ast::ty_i32, ast::ty_u32, ast::ty_f64)\n     };\n     let target_strs = match arch {\n       session::arch_x86 => x86::get_target_strs(os),\n       session::arch_x86_64 => x86_64::get_target_strs(os),\n-      session::arch_arm => arm::get_target_strs(os)\n+      session::arch_arm => arm::get_target_strs(os),\n+      session::arch_mips => mips::get_target_strs(os)\n     };\n     let target_cfg = @session::config {\n         os: os,"}, {"sha": "52ca0a886c9eba9e3808a8cd3a4784a883a5dcaf", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -33,7 +33,7 @@ use syntax;\n pub enum os { os_win32, os_macos, os_linux, os_android, os_freebsd, }\n \n #[deriving_eq]\n-pub enum arch { arch_x86, arch_x86_64, arch_arm, }\n+pub enum arch { arch_x86, arch_x86_64, arch_arm, arch_mips, }\n \n pub enum crate_type { bin_crate, lib_crate, unknown_crate, }\n "}, {"sha": "7998d4ebcacd6564a2dd765ac29483972d414d04", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -1484,7 +1484,9 @@ pub fn call_memcpy(cx: block, dst: ValueRef, src: ValueRef,\n     let _icx = cx.insn_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();\n     let key = match ccx.sess.targ_cfg.arch {\n-      session::arch_x86 | session::arch_arm => ~\"llvm.memcpy.p0i8.p0i8.i32\",\n+      session::arch_x86\n+      | session::arch_arm\n+      | session::arch_mips => ~\"llvm.memcpy.p0i8.p0i8.i32\",\n       session::arch_x86_64 => ~\"llvm.memcpy.p0i8.p0i8.i64\"\n     };\n     let memcpy = ccx.intrinsics.get(&key);\n@@ -1526,7 +1528,9 @@ pub fn memzero(cx: block, llptr: ValueRef, llty: TypeRef) {\n \n     let intrinsic_key;\n     match ccx.sess.targ_cfg.arch {\n-        session::arch_x86 | session::arch_arm => {\n+        session::arch_x86\n+        | session::arch_arm\n+        | session::arch_mips => {\n             intrinsic_key = ~\"llvm.memset.p0i8.i32\";\n         }\n         session::arch_x86_64 => {"}, {"sha": "c703632445666ce9e87ad0caf2598e6c3023f3c2", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -766,7 +766,8 @@ pub fn T_int(targ_cfg: @session::config) -> TypeRef {\n     return match targ_cfg.arch {\n       session::arch_x86 => T_i32(),\n       session::arch_x86_64 => T_i64(),\n-      session::arch_arm => T_i32()\n+      session::arch_arm => T_i32(),\n+      session::arch_mips => T_i32()\n     };\n }\n \n@@ -803,7 +804,8 @@ pub fn T_float(targ_cfg: @session::config) -> TypeRef {\n     return match targ_cfg.arch {\n       session::arch_x86 => T_f64(),\n       session::arch_x86_64 => T_f64(),\n-      session::arch_arm => T_f64()\n+      session::arch_arm => T_f64(),\n+      session::arch_mips => T_f64()\n     };\n }\n "}, {"sha": "59811468f701207619610453736a773a5d48c31f", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -113,6 +113,7 @@ pub mod back {\n     pub mod abi;\n     pub mod upcall;\n     pub mod arm;\n+    pub mod mips;\n     pub mod x86;\n     pub mod x86_64;\n     pub mod rpath;"}, {"sha": "5a0928e6a1182d922083d57d5b97265eb97da1b2", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -27,6 +27,7 @@ A BigDigit is half the size of machine word size.\n */\n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"arm\")]\n+#[cfg(target_arch = \"mips\")]\n pub type BigDigit = u16;\n \n /**\n@@ -42,6 +43,7 @@ pub mod BigDigit {\n \n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n+    #[cfg(target_arch = \"mips\")]\n     pub const bits: uint = 16;\n \n     #[cfg(target_arch = \"x86_64\")]\n@@ -530,6 +532,7 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n \n #[cfg(target_arch = \"arm\")]\n #[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"mips\")]\n priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n     assert 1 < radix && radix <= 16;\n     match radix {\n@@ -946,6 +949,7 @@ mod biguint_tests {\n \n         #[cfg(target_arch = \"arm\")]\n         #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch = \"mips\")]\n         fn test_shl_bits() {\n             check(~[0x3210, 0x7654, 0xba98, 0xfedc,\n                     0x3210, 0x7654, 0xba98, 0xfedc], 4,\n@@ -962,6 +966,7 @@ mod biguint_tests {\n     #[test]\n     #[ignore(cfg(target_arch = \"x86\"))]\n     #[ignore(cfg(target_arch = \"arm\"))]\n+    #[ignore(cfg(target_arch = \"mips\"))]\n     fn test_shr() {\n         fn check(v: ~[BigDigit], shift: uint, ans: ~[BigDigit]) {\n             assert BigUint::new(v) >> shift == BigUint::new(ans);\n@@ -989,6 +994,7 @@ mod biguint_tests {\n \n         #[cfg(target_arch = \"arm\")]\n         #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch = \"mips\")]\n         fn test_shr_bits() {\n             check(~[0x2100, 0x6543, 0xa987, 0xedcb,\n                     0x210f, 0x6543, 0xa987, 0xedcb, 0xf], 4,"}, {"sha": "eea9f427326a1b310803b3bd88dd1dd85fef77e8", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -1504,6 +1504,7 @@ pub mod test {\n         }\n         #[cfg(target_arch=\"x86\")]\n         #[cfg(target_arch=\"arm\")]\n+        #[cfg(target_arch=\"mips\")]\n         pub mod impl32 {\n             use net::tcp::test::*;\n "}, {"sha": "6b6e644a5eed4c9602d04839e59fee4dc33f3fb3", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -132,6 +132,7 @@ pub struct uv_tcp_t_32bit_unix_riders {\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n pub struct uv_tcp_t_32bit_unix_riders {\n     a29: *u8, a30: *u8, a31: *u8,\n }\n@@ -187,6 +188,7 @@ pub struct uv_write_t_32bit_unix_riders {\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n pub struct uv_write_t_32bit_unix_riders {\n     a13: *u8, a14: *u8, a15: *u8,\n     a16: *u8,\n@@ -215,6 +217,7 @@ pub struct uv_async_t_32bit_unix_riders {\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n pub struct uv_async_t_32bit_unix_riders {\n     a10: *u8,\n }\n@@ -244,6 +247,7 @@ pub struct uv_timer_t_32bit_unix_riders {\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n pub struct uv_timer_t_32bit_unix_riders {\n     a10: *u8, a11: *u8, a12: *u8\n }\n@@ -273,6 +277,7 @@ pub struct sockaddr_in6 {\n }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n+#[cfg(target_arch=\"mips\")]\n pub struct sockaddr_in6 {\n     a0: *u8, a1: *u8,\n     a2: *u8, a3: *u8,\n@@ -291,7 +296,8 @@ pub mod addr_in_impl {\n         a2: *u8, a3: *u8,\n     }\n     #[cfg(target_arch=\"x86\")]\n-#[cfg(target_arch=\"arm\")]\n+    #[cfg(target_arch=\"arm\")]\n+    #[cfg(target_arch=\"mips\")]\n     pub struct addr_in {\n         a0: *u8, a1: *u8,\n         a2: *u8, a3: *u8,\n@@ -319,6 +325,7 @@ pub mod addrinfo_impl {\n     }\n     #[cfg(target_arch=\"x86\")]\n     #[cfg(target_arch=\"arm\")]\n+    #[cfg(target_arch=\"mips\")]\n     pub struct addrinfo {\n         a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n         a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n@@ -402,6 +409,7 @@ pub mod uv_ll_struct_stubgen {\n             }\n             #[cfg(target_arch=\"x86\")]\n             #[cfg(target_arch=\"arm\")]\n+            #[cfg(target_arch=\"mips\")]\n             pub fn gen_stub_arch() -> uv_tcp_t {\n                 uv_tcp_t {\n                     fields: uv_handle_fields {\n@@ -546,6 +554,7 @@ pub mod uv_ll_struct_stubgen {\n         }\n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch=\"arm\")]\n+        #[cfg(target_arch=\"mips\")]\n         pub fn gen_stub_arch() -> uv_async_t {\n             uv_async_t {\n                 fields: uv_handle_fields {\n@@ -602,6 +611,7 @@ pub mod uv_ll_struct_stubgen {\n         }\n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch=\"arm\")]\n+        #[cfg(target_arch=\"mips\")]\n         pub fn gen_stub_arch() -> uv_timer_t {\n             uv_timer_t {\n                 fields: uv_handle_fields {\n@@ -662,6 +672,7 @@ pub mod uv_ll_struct_stubgen {\n         }\n         #[cfg(target_arch=\"x86\")]\n         #[cfg(target_arch=\"arm\")]\n+        #[cfg(target_arch=\"mips\")]\n         pub fn gen_stub_arch() -> uv_write_t {\n             uv_write_t {\n                 fields: uv_handle_fields {\n@@ -1748,6 +1759,7 @@ pub mod test {\n         }\n         #[cfg(target_arch=\"x86\")]\n         #[cfg(target_arch=\"arm\")]\n+        #[cfg(target_arch=\"mips\")]\n         pub mod impl32 {\n             use uv_ll::test::*;\n             #[test]"}, {"sha": "3af936d34612babefcc91269549f07438d01f589", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -97,6 +97,12 @@ void LLVMInitializeARMTarget();\n void LLVMInitializeARMTargetMC();\n void LLVMInitializeARMAsmPrinter();\n void LLVMInitializeARMAsmParser();\n+\n+void LLVMInitializeMipsTargetInfo();\n+void LLVMInitializeMipsTarget();\n+void LLVMInitializeMipsTargetMC();\n+void LLVMInitializeMipsAsmPrinter();\n+void LLVMInitializeMipsAsmParser();\n // Only initialize the platforms supported by Rust here,\n // because using --llvm-root will have multiple platforms\n // that rustllvm doesn't actually link to and it's pointless to put target info\n@@ -114,6 +120,12 @@ void LLVMRustInitializeTargets() {\n   LLVMInitializeARMTargetMC();\n   LLVMInitializeARMAsmPrinter();\n   LLVMInitializeARMAsmParser();\t\n+\n+  LLVMInitializeMipsTargetInfo();\n+  LLVMInitializeMipsTarget();\n+  LLVMInitializeMipsTargetMC();\n+  LLVMInitializeMipsAsmPrinter();\n+  LLVMInitializeMipsAsmParser();\t\n }\n \n // Custom memory manager for MCJITting. It needs special features"}, {"sha": "f1acf9d0dc80f24a2997c5605d6502bf05a19d81", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/5150b9811b520843e7a4905da4e6030b5f7ff9fd/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=5150b9811b520843e7a4905da4e6030b5f7ff9fd", "patch": "@@ -384,18 +384,25 @@ LLVMInitializeScalarOpts\n LLVMInitializeTarget\n LLVMInitializeTransformUtils\n LLVMInitializeARMAsmLexer\n+LLVMInitializeMipsAsmLexer\n LLVMInitializeX86AsmLexer\n LLVMInitializeARMAsmParser\n+LLVMInitializeMipsAsmParser\n LLVMInitializeX86AsmParser\n LLVMInitializeARMAsmPrinter\n+LLVMInitializeMipsAsmPrinter\n LLVMInitializeX86AsmPrinter\n LLVMInitializeARMDisassembler\n+LLVMInitializeMipsDisassembler\n LLVMInitializeX86Disassembler\n LLVMInitializeARMTarget\n+LLVMInitializeMipsTarget\n LLVMInitializeX86Target\n LLVMInitializeARMTargetMC\n+LLVMInitializeMipsTargetMC\n LLVMInitializeX86TargetMC\n LLVMInitializeARMTargetInfo\n+LLVMInitializeMipsTargetInfo\n LLVMInitializeX86TargetInfo\n LLVMInsertBasicBlock\n LLVMInsertBasicBlockInContext"}]}