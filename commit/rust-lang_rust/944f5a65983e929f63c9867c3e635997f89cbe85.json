{"sha": "944f5a65983e929f63c9867c3e635997f89cbe85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NGY1YTY1OTgzZTkyOWY2M2M5ODY3YzNlNjM1OTk3Zjg5Y2JlODU=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T07:49:03Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T23:30:20Z"}, "message": "(core::str) move push_byte, push_bytes, pop_byte, and shift_byte into str::unsafe", "tree": {"sha": "124225ae4cddcca1d250c991bc9b95ad3a913431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/124225ae4cddcca1d250c991bc9b95ad3a913431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/944f5a65983e929f63c9867c3e635997f89cbe85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/944f5a65983e929f63c9867c3e635997f89cbe85", "html_url": "https://github.com/rust-lang/rust/commit/944f5a65983e929f63c9867c3e635997f89cbe85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/944f5a65983e929f63c9867c3e635997f89cbe85/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb0906f43f1b684aec610581da0d7c93948de37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb0906f43f1b684aec610581da0d7c93948de37", "html_url": "https://github.com/rust-lang/rust/commit/5fb0906f43f1b684aec610581da0d7c93948de37"}], "stats": {"total": 155, "additions": 70, "deletions": 85}, "files": [{"sha": "5a8d72ce01f9c0d274b1b1d7a36c47df18296381", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -149,11 +149,11 @@ fn scan_exponent(rdr: reader) -> option<str> {\n     let c = rdr.curr;\n     let rslt = \"\";\n     if c == 'e' || c == 'E' {\n-        str::push_byte(rslt, c as u8);\n+        str::push_char(rslt, c);\n         rdr.bump();\n         c = rdr.curr;\n         if c == '-' || c == '+' {\n-            str::push_byte(rslt, c as u8);\n+            str::push_char(rslt, c);\n             rdr.bump();\n         }\n         let exponent = scan_digits(rdr, 10u);\n@@ -170,7 +170,7 @@ fn scan_digits(rdr: reader, radix: uint) -> str {\n         if c == '_' { rdr.bump(); cont; }\n         alt char::maybe_digit(c) {\n           some(d) if (d as uint) < radix {\n-            str::push_byte(rslt, c as u8);\n+            str::push_char(rslt, c);\n             rdr.bump();\n           }\n           _ { break; }\n@@ -472,11 +472,11 @@ fn next_token_inner(rdr: reader) -> token::token {\n                 let escaped = rdr.curr;\n                 rdr.bump();\n                 alt escaped {\n-                  'n' { str::push_byte(accum_str, '\\n' as u8); }\n-                  'r' { str::push_byte(accum_str, '\\r' as u8); }\n-                  't' { str::push_byte(accum_str, '\\t' as u8); }\n-                  '\\\\' { str::push_byte(accum_str, '\\\\' as u8); }\n-                  '\"' { str::push_byte(accum_str, '\"' as u8); }\n+                  'n' { str::push_char(accum_str, '\\n'); }\n+                  'r' { str::push_char(accum_str, '\\r'); }\n+                  't' { str::push_char(accum_str, '\\t'); }\n+                  '\\\\' { str::push_char(accum_str, '\\\\'); }\n+                  '\"' { str::push_char(accum_str, '\"'); }\n                   '\\n' { consume_whitespace(rdr); }\n                   'x' {\n                     str::push_char(accum_str, scan_numeric_escape(rdr, 2u));"}, {"sha": "60949f7793cbe6a05b5e20e91cee1bef18e737ff", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -139,7 +139,7 @@ fn to_str(r: reader, t: token) -> str {\n         // FIXME: escape.\n         let tmp = \"'\";\n         str::push_char(tmp, c as char);\n-        str::push_byte(tmp, '\\'' as u8);\n+        str::push_char(tmp, '\\'');\n         ret tmp;\n       }\n       LIT_INT(i, t) {"}, {"sha": "5fac1b99bf9f8c2b3fe28e4377fd18efa7b7a69e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 48, "deletions": 65, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -26,10 +26,6 @@ export\n    pop_char,\n    shift_char,\n    unshift_char,\n-   push_byte,\n-   //push_bytes,\n-   pop_byte,\n-   shift_byte,\n    trim_left,\n    trim_right,\n    trim,\n@@ -137,7 +133,7 @@ fn from_byte(uu: u8) -> str {\n     from_bytes([uu])\n }\n \n-fn push_utf8_bytes(&s: str, ch: char) {\n+fn push_utf8_bytes(&s: str, ch: char) unsafe {\n     let code = ch as uint;\n     let bytes =\n         if code < max_one_b {\n@@ -168,7 +164,7 @@ fn push_utf8_bytes(&s: str, ch: char) {\n              (code >> 6u & 63u | tag_cont) as u8,\n              (code & 63u | tag_cont) as u8]\n         };\n-    push_bytes(s, bytes);\n+    unsafe::push_bytes(s, bytes);\n }\n \n /*\n@@ -303,58 +299,6 @@ Prepend a char to a string\n */\n fn unshift_char(&s: str, ch: char) { s = from_char(ch) + s; }\n \n-/*\n-Function: push_byte\n-\n-Appends a byte to a string.\n-\n-This function is not unicode-safe.\n-*/\n-fn push_byte(&s: str, b: u8) { rustrt::rust_str_push(s, b); }\n-\n-/*\n-Function: push_bytes\n-\n-Appends a vector of bytes to a string.\n-\n-This function is not unicode-safe.\n-*/\n-fn push_bytes(&s: str, bytes: [u8]) {\n-    for byte in bytes { rustrt::rust_str_push(s, byte); }\n-}\n-\n-/*\n-Function: pop_byte\n-\n-Removes the last byte from a string and returns it.\n-\n-This function is not unicode-safe.\n-FIXME: move to unsafe?\n-*/\n-fn pop_byte(&s: str) -> u8 unsafe {\n-    let len = byte_len(s);\n-    assert (len > 0u);\n-    let b = s[len - 1u];\n-    s = unsafe::slice_bytes(s, 0u, len - 1u);\n-    ret b;\n-}\n-\n-/*\n-Function: shift_byte\n-\n-Removes the first byte from a string and returns it.\n-\n-This function is not unicode-safe.\n-FIXME: move to unsafe?\n-*/\n-fn shift_byte(&s: str) -> u8 unsafe {\n-    let len = byte_len(s);\n-    assert (len > 0u);\n-    let b = s[0];\n-    s = unsafe::slice_bytes(s, 1u, len);\n-    ret b;\n-}\n-\n /*\n Function: trim_left\n \n@@ -592,8 +536,6 @@ fn split(ss: str, sepfn: fn(cc: char)->bool) -> [str] {\n Function: split_char\n \n Splits a string into a vector of the substrings separated by a given character\n-\n-FIXME: also add  splitn_char\n */\n fn split_char(ss: str, cc: char) -> [str] {\n    split(ss, {|kk| kk == cc})\n@@ -1409,7 +1351,11 @@ mod unsafe {\n       from_bytes,\n       from_byte,\n       slice_bytes,\n-      slice_bytes_safe_range;\n+      slice_bytes_safe_range,\n+      push_byte,\n+      push_bytes, // note: wasn't exported\n+      pop_byte,\n+      shift_byte;\n \n    // Function: unsafe::from_bytes\n    //\n@@ -1462,6 +1408,43 @@ mod unsafe {\n        assert (end <= byte_len(s));\n        ret slice_bytes(s, begin, end);\n    }\n+\n+   // Function: push_byte\n+   //\n+   // Appends a byte to a string. (Not UTF-8 safe).\n+   unsafe fn push_byte(&s: str, b: u8) {\n+       rustrt::rust_str_push(s, b);\n+   }\n+\n+   // Function: push_bytes\n+   //\n+   // Appends a vector of bytes to a string. (Not UTF-8 safe).\n+   unsafe fn push_bytes(&s: str, bytes: [u8]) {\n+       for byte in bytes { rustrt::rust_str_push(s, byte); }\n+   }\n+\n+   // Function: pop_byte\n+   //\n+   // Removes the last byte from a string and returns it.  (Not UTF-8 safe).\n+   unsafe fn pop_byte(&s: str) -> u8 unsafe {\n+       let len = byte_len(s);\n+       assert (len > 0u);\n+       let b = s[len - 1u];\n+       s = unsafe::slice_bytes(s, 0u, len - 1u);\n+       ret b;\n+   }\n+\n+   // Function: shift_byte\n+   //\n+   // Removes the first byte from a string and returns it. (Not UTF-8 safe).\n+   unsafe fn shift_byte(&s: str) -> u8 unsafe {\n+       let len = byte_len(s);\n+       assert (len > 0u);\n+       let b = s[0];\n+       s = unsafe::slice_bytes(s, 1u, len);\n+       ret b;\n+   }\n+\n }\n \n \n@@ -1914,17 +1897,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_shift_byte() {\n+    fn test_shift_byte() unsafe {\n         let s = \"ABC\";\n-        let b = shift_byte(s);\n+        let b = unsafe::shift_byte(s);\n         assert (s == \"BC\");\n         assert (b == 65u8);\n     }\n \n     #[test]\n-    fn test_pop_byte() {\n+    fn test_pop_byte() unsafe {\n         let s = \"ABC\";\n-        let b = pop_byte(s);\n+        let b = unsafe::pop_byte(s);\n         assert (s == \"AB\");\n         assert (b == 67u8);\n     }"}, {"sha": "c367e590d397dbc6b337bc79ba001fc36436776c", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -89,14 +89,14 @@ any leading path separator on `post`, and returns the concatenation of the two\n with a single path separator between them.\n */\n \n-fn connect(pre: path, post: path) -> path {\n+fn connect(pre: path, post: path) -> path unsafe {\n     let pre_ = pre;\n     let post_ = post;\n     let sep = os_fs::path_sep as u8;\n     let pre_len = str::byte_len(pre);\n     let post_len = str::byte_len(post);\n-    if pre_len > 1u && pre[pre_len-1u] == sep { str::pop_byte(pre_); }\n-    if post_len > 1u && post[0] == sep { str::shift_byte(post_); }\n+    if pre_len > 1u && pre[pre_len-1u] == sep { str::unsafe::pop_byte(pre_); }\n+    if post_len > 1u && post[0] == sep { str::unsafe::shift_byte(post_); }\n     ret pre_ + path_sep() + post_;\n }\n "}, {"sha": "0dd66555a6bd80cf10e846d4e845d1b448cca15c", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -22,7 +22,7 @@ fn b8() -> str {\n     ret \"Go to the store and buy some more, # of beer on the wall.\";\n }\n \n-fn sub(t: str, n: int) -> str {\n+fn sub(t: str, n: int) -> str unsafe {\n     let b: str = \"\";\n     let i: uint = 0u;\n     let ns: str;\n@@ -32,7 +32,8 @@ fn sub(t: str, n: int) -> str {\n       _ { ns = int::to_str(n, 10u) + \" bottles\"; }\n     }\n     while i < str::byte_len(t) {\n-        if t[i] == '#' as u8 { b += ns; } else { str::push_byte(b, t[i]); }\n+        if t[i] == '#' as u8 { b += ns; }\n+        else { str::unsafe::push_byte(b, t[i]); }\n         i += 1u;\n     }\n     ret b;"}, {"sha": "c54c268cb46e8359106bdeca35313e5319d8ab06", "filename": "src/test/bench/99bob-simple.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Ftest%2Fbench%2F99bob-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Ftest%2Fbench%2F99bob-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-simple.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -22,7 +22,7 @@ fn b8() -> str {\n     ret \"Go to the store and buy some more, # of beer on the wall.\";\n }\n \n-fn sub(t: str, n: int) -> str {\n+fn sub(t: str, n: int) -> str unsafe {\n     let b: str = \"\";\n     let i: uint = 0u;\n     let ns: str;\n@@ -32,7 +32,8 @@ fn sub(t: str, n: int) -> str {\n       _ { ns = int::to_str(n, 10u) + \" bottles\"; }\n     }\n     while i < str::byte_len(t) {\n-        if t[i] == '#' as u8 { b += ns; } else { str::push_byte(b, t[i]); }\n+        if t[i] == '#' as u8 { b += ns; }\n+        else { str::unsafe::push_byte(b, t[i]); }\n         i += 1u;\n     }\n     ret b;"}, {"sha": "fbcc9c507b8265ddd19e13ad16ebd2b79146f9a5", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f5a65983e929f63c9867c3e635997f89cbe85/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=944f5a65983e929f63c9867c3e635997f89cbe85", "patch": "@@ -47,8 +47,8 @@ fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     let rng = @{mutable last: std::rand::mk_rng().next()};\n     let op: str = \"\";\n     uint::range(0u, n as uint) {|_i|\n-        str::push_byte(op, select_random(myrandom_next(rng, 100u32),\n-                                         genelist) as u8);\n+        str::push_char(op, select_random(myrandom_next(rng, 100u32),\n+                                         genelist));\n         if str::byte_len(op) >= LINE_LENGTH() {\n             log(debug, op);\n             op = \"\";\n@@ -57,12 +57,12 @@ fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     if str::byte_len(op) > 0u { log(debug, op); }\n }\n \n-fn make_repeat_fasta(id: str, desc: str, s: str, n: int) {\n+fn make_repeat_fasta(id: str, desc: str, s: str, n: int) unsafe {\n     log(debug, \">\" + id + \" \" + desc);\n     let op: str = \"\";\n     let sl: uint = str::byte_len(s);\n     uint::range(0u, n as uint) {|i|\n-        str::push_byte(op, s[i % sl]);\n+        str::unsafe::push_byte(op, s[i % sl]);\n         if str::byte_len(op) >= LINE_LENGTH() {\n             log(debug, op);\n             op = \"\";"}]}