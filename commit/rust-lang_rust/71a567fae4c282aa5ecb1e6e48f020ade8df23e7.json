{"sha": "71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTU2N2ZhZTRjMjgyYWE1ZWNiMWU2ZTQ4ZjAyMGFkZThkZjIzZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T04:04:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T04:04:47Z"}, "message": "Auto merge of #86833 - crlf0710:remove-std-raw-mod, r=SimonSapin\n\nRemove the deprecated `core::raw` and `std::raw` module.\n\nA few months has passed since #84207. I think now it's time for the final removal.\n\nCloses #27751.\n\nr? `@m-ou-se`", "tree": {"sha": "588d7f9f4cfca43a7c5e871b390d096eec0dd602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/588d7f9f4cfca43a7c5e871b390d096eec0dd602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "html_url": "https://github.com/rust-lang/rust/commit/71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154071194641d8db6c056b0d83dd0d071f9f6758", "url": "https://api.github.com/repos/rust-lang/rust/commits/154071194641d8db6c056b0d83dd0d071f9f6758", "html_url": "https://github.com/rust-lang/rust/commit/154071194641d8db6c056b0d83dd0d071f9f6758"}, {"sha": "0d1919c7ab149e0ed7f88643f3f94d59c06429bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1919c7ab149e0ed7f88643f3f94d59c06429bd", "html_url": "https://github.com/rust-lang/rust/commit/0d1919c7ab149e0ed7f88643f3f94d59c06429bd"}], "stats": {"total": 161, "additions": 15, "deletions": 146}, "files": [{"sha": "866cd5ec535d2c5e8af3982f9ff94abdc5eb1f95", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -255,7 +255,6 @@ pub mod option;\n pub mod panic;\n pub mod panicking;\n pub mod pin;\n-pub mod raw;\n pub mod result;\n #[unstable(feature = \"async_stream\", issue = \"79024\")]\n pub mod stream;"}, {"sha": "6d1e28f4cd7d712d73ea2f1143acd8d7b8d5c94e", "filename": "library/core/src/raw.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fcore%2Fsrc%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fcore%2Fsrc%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fraw.rs?ref=154071194641d8db6c056b0d83dd0d071f9f6758", "patch": "@@ -1,90 +0,0 @@\n-#![allow(missing_docs)]\n-#![unstable(feature = \"raw\", issue = \"27751\")]\n-#![rustc_deprecated(\n-    since = \"1.53.0\",\n-    reason = \"use pointer metadata APIs instead https://github.com/rust-lang/rust/issues/81513\"\n-)]\n-\n-//! Contains struct definitions for the layout of compiler built-in types.\n-//!\n-//! They can be used as targets of transmutes in unsafe code for manipulating\n-//! the raw representations directly.\n-//!\n-//! Their definition should always match the ABI defined in\n-//! `rustc_middle::ty::layout`.\n-\n-/// The representation of a trait object like `&dyn SomeTrait`.\n-///\n-/// This struct has the same layout as types like `&dyn SomeTrait` and\n-/// `Box<dyn AnotherTrait>`.\n-///\n-/// `TraitObject` is guaranteed to match layouts, but it is not the\n-/// type of trait objects (e.g., the fields are not directly accessible\n-/// on a `&dyn SomeTrait`) nor does it control that layout (changing the\n-/// definition will not change the layout of a `&dyn SomeTrait`). It is\n-/// only designed to be used by unsafe code that needs to manipulate\n-/// the low-level details.\n-///\n-/// There is no way to refer to all trait objects generically, so the only\n-/// way to create values of this type is with functions like\n-/// [`std::mem::transmute`][transmute]. Similarly, the only way to create a true\n-/// trait object from a `TraitObject` value is with `transmute`.\n-///\n-/// [transmute]: crate::intrinsics::transmute\n-///\n-/// Synthesizing a trait object with mismatched types\u2014one where the\n-/// vtable does not correspond to the type of the value to which the\n-/// data pointer points\u2014is highly likely to lead to undefined\n-/// behavior.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// #![feature(raw)]\n-///\n-/// use std::{mem, raw};\n-///\n-/// // an example trait\n-/// trait Foo {\n-///     fn bar(&self) -> i32;\n-/// }\n-///\n-/// impl Foo for i32 {\n-///     fn bar(&self) -> i32 {\n-///          *self + 1\n-///     }\n-/// }\n-///\n-/// let value: i32 = 123;\n-///\n-/// // let the compiler make a trait object\n-/// let object: &dyn Foo = &value;\n-///\n-/// // look at the raw representation\n-/// let raw_object: raw::TraitObject = unsafe { mem::transmute(object) };\n-///\n-/// // the data pointer is the address of `value`\n-/// assert_eq!(raw_object.data as *const i32, &value as *const _);\n-///\n-/// let other_value: i32 = 456;\n-///\n-/// // construct a new object, pointing to a different `i32`, being\n-/// // careful to use the `i32` vtable from `object`\n-/// let synthesized: &dyn Foo = unsafe {\n-///      mem::transmute(raw::TraitObject {\n-///          data: &other_value as *const _ as *mut (),\n-///          vtable: raw_object.vtable,\n-///      })\n-/// };\n-///\n-/// // it should work just as if we had constructed a trait object out of\n-/// // `other_value` directly\n-/// assert_eq!(synthesized.bar(), 457);\n-/// ```\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-#[allow(missing_debug_implementations)]\n-pub struct TraitObject {\n-    pub data: *mut (),\n-    pub vtable: *mut (),\n-}"}, {"sha": "e50b3bb96f8198f6b73b4a50ba243fd5e3411bd3", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -29,7 +29,6 @@\n #![feature(try_find)]\n #![feature(is_sorted)]\n #![feature(pattern)]\n-#![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "c780bb32ca96d89d818ead5eec654d592aedc00a", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -97,28 +97,6 @@ fn test_transmute_copy() {\n     assert_eq!(1, unsafe { transmute_copy(&1) });\n }\n \n-// Remove this test when `std::raw` is removed.\n-// The replacement pointer metadata APIs are tested in library/core/tests/ptr.rs\n-#[allow(deprecated)]\n-#[test]\n-fn test_transmute() {\n-    trait Foo {\n-        fn dummy(&self) {}\n-    }\n-    impl Foo for isize {}\n-\n-    let a = box 100isize as Box<dyn Foo>;\n-    unsafe {\n-        let x: ::core::raw::TraitObject = transmute(a);\n-        assert!(*(x.data as *const isize) == 100);\n-        let _x: Box<dyn Foo> = transmute(x);\n-    }\n-\n-    unsafe {\n-        assert_eq!(transmute::<_, Vec<u8>>(\"L\".to_string()), [76]);\n-    }\n-}\n-\n #[test]\n #[allow(dead_code)]\n fn test_discriminant_send_sync() {"}, {"sha": "3622bc8294b0829bc10790e11e102987d5246bcb", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -23,7 +23,6 @@\n #![feature(unwind_attributes)]\n #![feature(abi_thiscall)]\n #![feature(rustc_attrs)]\n-#![feature(raw)]\n #![panic_runtime]\n #![feature(panic_runtime)]\n // `real_imp` is unused with Miri, so silence warnings."}, {"sha": "6f389f000af93a52e2282333bc87b9743d3e6f42", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -303,7 +303,6 @@\n #![feature(pin_static_ref)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n-#![feature(raw)]\n #![feature(ready_macro)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n@@ -455,9 +454,6 @@ pub use core::pin;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(deprecated, deprecated_in_future)]\n-pub use core::raw;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n #[unstable(feature = \"async_stream\", issue = \"79024\")]\n pub use core::stream;"}, {"sha": "f5747eb8b96669cb328b6faa1399a6954907a04f", "filename": "src/test/ui/cast/fat-ptr-cast-rpass.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast-rpass.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -1,12 +1,6 @@\n // run-pass\n \n-// Remove this file when `std::raw` is removed.\n-// The replacement pointer metadata APIs are tested in library/core/tests/ptr.rs\n-#![allow(deprecated)]\n-#![feature(raw)]\n-\n-use std::mem;\n-use std::raw;\n+#![feature(ptr_metadata)]\n \n trait Foo {\n     fn foo(&self) {}\n@@ -31,13 +25,10 @@ fn main() {\n \n     // And conversion to a void pointer/address for trait objects too.\n     let a: *mut dyn Foo = &mut Bar;\n-    let b = a as *mut ();\n+    let b = a as *mut () as usize;\n     let c = a as *const () as usize;\n-    let d = unsafe {\n-        let r: raw::TraitObject = mem::transmute(a);\n-        r.data\n-    };\n+    let d = a.to_raw_parts().0 as usize;\n \n     assert_eq!(b, d);\n-    assert_eq!(c, d as usize);\n+    assert_eq!(c, d);\n }"}, {"sha": "c5c5ed26c7384b263dcf857a844f6c118194b9d9", "filename": "src/test/ui/unsized/unsized3-rpass.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a567fae4c282aa5ecb1e6e48f020ade8df23e7/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs?ref=71a567fae4c282aa5ecb1e6e48f020ade8df23e7", "patch": "@@ -1,12 +1,11 @@\n // run-pass\n // Test structs with always-unsized fields.\n \n-\n #![allow(warnings)]\n-#![feature(box_syntax, unsize, raw)]\n+#![feature(box_syntax, unsize, ptr_metadata)]\n \n use std::mem;\n-use std::raw;\n+use std::ptr;\n use std::slice;\n \n struct Foo<T> {\n@@ -28,7 +27,7 @@ trait Tr {\n }\n \n struct St {\n-    f: usize\n+    f: usize,\n }\n \n impl Tr for St {\n@@ -38,7 +37,7 @@ impl Tr for St {\n }\n \n struct Qux<'a> {\n-    f: Tr+'a\n+    f: Tr + 'a,\n }\n \n pub fn main() {\n@@ -56,10 +55,10 @@ pub fn main() {\n \n     unsafe {\n         struct Foo_<T> {\n-            f: [T; 3]\n+            f: [T; 3],\n         }\n \n-        let data: Box<Foo_<i32>> = box Foo_{f: [1, 2, 3] };\n+        let data: Box<Foo_<i32>> = box Foo_ { f: [1, 2, 3] };\n         let x: &Foo<i32> = mem::transmute(slice::from_raw_parts(&*data, 3));\n         assert_eq!(x.f.len(), 3);\n         assert_eq!(x.f[0], 1);\n@@ -69,8 +68,8 @@ pub fn main() {\n             f2: [u8; 5],\n         }\n \n-        let data: Box<_> = box Baz_ {\n-            f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n+        let data: Box<_> =\n+            box Baz_ { f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n         let x: &Baz = mem::transmute(slice::from_raw_parts(&*data, 5));\n         assert_eq!(x.f1, 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n@@ -82,15 +81,13 @@ pub fn main() {\n         assert_eq!(chs[4], 'e');\n \n         struct Qux_ {\n-            f: St\n+            f: St,\n         }\n \n         let obj: Box<St> = box St { f: 42 };\n         let obj: &Tr = &*obj;\n-        let obj: raw::TraitObject = mem::transmute(&*obj);\n-        let data: Box<_> = box Qux_{ f: St { f: 234 } };\n-        let x: &Qux = mem::transmute(raw::TraitObject { vtable: obj.vtable,\n-                                                        data: mem::transmute(&*data) });\n+        let data: Box<_> = box Qux_ { f: St { f: 234 } };\n+        let x: &Qux = &*ptr::from_raw_parts::<Qux>((&*data as *const _).cast(), ptr::metadata(obj));\n         assert_eq!(x.f.foo(), 234);\n     }\n }"}]}