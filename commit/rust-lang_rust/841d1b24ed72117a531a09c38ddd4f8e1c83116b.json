{"sha": "841d1b24ed72117a531a09c38ddd4f8e1c83116b", "node_id": "C_kwDOAAsO6NoAKDg0MWQxYjI0ZWQ3MjExN2E1MzFhMDljMzhkZGQ0ZjhlMWM4MzExNmI", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-27T09:40:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T13:32:10Z"}, "message": "Finish TimeoutCallback", "tree": {"sha": "dd4e97caebe91440ad8b4ea634d64195351a9e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4e97caebe91440ad8b4ea634d64195351a9e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/841d1b24ed72117a531a09c38ddd4f8e1c83116b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/841d1b24ed72117a531a09c38ddd4f8e1c83116b", "html_url": "https://github.com/rust-lang/rust/commit/841d1b24ed72117a531a09c38ddd4f8e1c83116b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/841d1b24ed72117a531a09c38ddd4f8e1c83116b/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c6a6244c10173f0ae8e4e675e613de74f359484", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c6a6244c10173f0ae8e4e675e613de74f359484", "html_url": "https://github.com/rust-lang/rust/commit/1c6a6244c10173f0ae8e4e675e613de74f359484"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "5e6fcbde69ad904ad4fbeebe026ebcffd49295d2", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=841d1b24ed72117a531a09c38ddd4f8e1c83116b", "patch": "@@ -32,10 +32,12 @@ pub enum SchedulingAction {\n \n /// Timeout callbacks can be created by synchronization primitives to tell the\n /// scheduler that they should be called once some period of time passes.\n-pub trait TimeoutCallback<'mir, 'tcx>: VisitMachineValues + 'tcx {\n+pub trait MachineCallback<'mir, 'tcx>: VisitMachineValues {\n     fn call(&self, ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>) -> InterpResult<'tcx>;\n }\n \n+type TimeoutCallback<'mir, 'tcx> = Box<dyn MachineCallback<'mir, 'tcx> + 'tcx>;\n+\n /// A thread identifier.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n pub struct ThreadId(u32);\n@@ -252,7 +254,7 @@ struct TimeoutCallbackInfo<'mir, 'tcx> {\n     /// The callback should be called no earlier than this time.\n     call_time: Time,\n     /// The called function.\n-    callback: Box<dyn TimeoutCallback<'mir, 'tcx>>,\n+    callback: TimeoutCallback<'mir, 'tcx>,\n }\n \n impl<'mir, 'tcx> std::fmt::Debug for TimeoutCallbackInfo<'mir, 'tcx> {\n@@ -303,10 +305,10 @@ impl VisitMachineValues for ThreadManager<'_, '_> {\n         let ThreadManager {\n             threads,\n             thread_local_alloc_ids,\n+            timeout_callbacks,\n             active_thread: _,\n             yield_active_thread: _,\n             sync: _,\n-            timeout_callbacks: _,\n         } = self;\n \n         for thread in threads {\n@@ -315,8 +317,9 @@ impl VisitMachineValues for ThreadManager<'_, '_> {\n         for ptr in thread_local_alloc_ids.borrow().values().copied() {\n             visit.visit(ptr);\n         }\n-        // FIXME: Do we need to do something for TimeoutCallback? That's a Box<dyn>, not sure what\n-        // to do.\n+        for callback in timeout_callbacks.values() {\n+            callback.callback.visit_machine_values(visit);\n+        }\n     }\n }\n \n@@ -542,7 +545,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         &mut self,\n         thread: ThreadId,\n         call_time: Time,\n-        callback: Box<dyn TimeoutCallback<'mir, 'tcx>>,\n+        callback: TimeoutCallback<'mir, 'tcx>,\n     ) {\n         self.timeout_callbacks\n             .try_insert(thread, TimeoutCallbackInfo { call_time, callback })\n@@ -558,7 +561,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     fn get_ready_callback(\n         &mut self,\n         clock: &Clock,\n-    ) -> Option<(ThreadId, Box<dyn TimeoutCallback<'mir, 'tcx>>)> {\n+    ) -> Option<(ThreadId, TimeoutCallback<'mir, 'tcx>)> {\n         // We iterate over all threads in the order of their indices because\n         // this allows us to have a deterministic scheduler.\n         for thread in self.threads.indices() {\n@@ -931,7 +934,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         &mut self,\n         thread: ThreadId,\n         call_time: Time,\n-        callback: Box<dyn TimeoutCallback<'mir, 'tcx>>,\n+        callback: TimeoutCallback<'mir, 'tcx>,\n     ) {\n         let this = self.eval_context_mut();\n         if !this.machine.communicate() && matches!(call_time, Time::RealTime(..)) {"}, {"sha": "05eff3dfd59e15bf97100918cbe3a903b7d32f67", "filename": "src/tools/miri/src/shims/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs?ref=841d1b24ed72117a531a09c38ddd4f8e1c83116b", "patch": "@@ -1,6 +1,6 @@\n use std::time::{Duration, SystemTime};\n \n-use crate::concurrency::thread::TimeoutCallback;\n+use crate::concurrency::thread::MachineCallback;\n use crate::*;\n \n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n@@ -257,7 +257,7 @@ impl VisitMachineValues for Callback {\n     fn visit_machine_values(&self, _visit: &mut ProvenanceVisitor) {}\n }\n \n-impl<'mir, 'tcx: 'mir> TimeoutCallback<'mir, 'tcx> for Callback {\n+impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for Callback {\n     fn call(&self, ecx: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n         ecx.unblock_thread(self.active_thread);\n         Ok(())"}, {"sha": "bbfb1c34db7d03da075e2524695178a7cf90137f", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=841d1b24ed72117a531a09c38ddd4f8e1c83116b", "patch": "@@ -1,4 +1,4 @@\n-use crate::concurrency::thread::{Time, TimeoutCallback};\n+use crate::concurrency::thread::{MachineCallback, Time};\n use crate::*;\n use rustc_target::abi::{Align, Size};\n use std::time::SystemTime;\n@@ -268,7 +268,7 @@ impl<'tcx> VisitMachineValues for Callback<'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> TimeoutCallback<'mir, 'tcx> for Callback<'tcx> {\n+impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for Callback<'tcx> {\n     fn call(&self, this: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n         this.unblock_thread(self.thread);\n         this.futex_remove_waiter(self.addr_usize, self.thread);"}, {"sha": "72b71ada8e0cbde0e493f774b466a2aabbe9845c", "filename": "src/tools/miri/src/shims/unix/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/841d1b24ed72117a531a09c38ddd4f8e1c83116b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs?ref=841d1b24ed72117a531a09c38ddd4f8e1c83116b", "patch": "@@ -3,7 +3,7 @@ use std::time::SystemTime;\n use rustc_hir::LangItem;\n use rustc_middle::ty::{layout::TyAndLayout, query::TyCtxtAt, Ty};\n \n-use crate::concurrency::thread::{Time, TimeoutCallback};\n+use crate::concurrency::thread::{MachineCallback, Time};\n use crate::*;\n \n // pthread_mutexattr_t is either 4 or 8 bytes, depending on the platform.\n@@ -901,7 +901,7 @@ impl<'tcx> VisitMachineValues for Callback<'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> TimeoutCallback<'mir, 'tcx> for Callback<'tcx> {\n+impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for Callback<'tcx> {\n     fn call(&self, ecx: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n         // We are not waiting for the condvar any more, wait for the\n         // mutex instead."}]}