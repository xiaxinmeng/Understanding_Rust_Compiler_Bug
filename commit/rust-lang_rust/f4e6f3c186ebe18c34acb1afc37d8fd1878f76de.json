{"sha": "f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZTZmM2MxODZlYmUxOGMzNGFjYjFhZmMzN2Q4ZmQxODc4Zjc2ZGU=", "commit": {"author": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-05-26T13:29:17Z"}, "committer": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-06-02T11:58:21Z"}, "message": "Improve help messages for E0425", "tree": {"sha": "7df25a8c5a5303f02eeb592084b2a917b1b8d777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df25a8c5a5303f02eeb592084b2a917b1b8d777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "html_url": "https://github.com/rust-lang/rust/commit/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5759a3417fa395d439f4283825504dd4f78dc87", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5759a3417fa395d439f4283825504dd4f78dc87", "html_url": "https://github.com/rust-lang/rust/commit/d5759a3417fa395d439f4283825504dd4f78dc87"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "14930a150ed69b21c468b2762cb8376d0538be77", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "patch": "@@ -153,7 +153,8 @@ enum ResolutionError<'a> {\n         message: &'a str,\n         context: UnresolvedNameContext<'a>,\n         is_static_method: bool,\n-        is_field: bool\n+        is_field: bool,\n+        def: Def,\n     },\n     /// error E0426: use of undeclared label\n     UndeclaredLabel(&'a str),\n@@ -413,7 +414,7 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              argument is missing?\")\n         }\n         ResolutionError::UnresolvedName { path, message: msg, context, is_static_method,\n-                                          is_field } => {\n+                                          is_field, def } => {\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0425,\n@@ -430,19 +431,20 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                 UnresolvedNameContext::PathIsMod(parent) => {\n                     err.help(&match parent.map(|parent| &parent.node) {\n                         Some(&ExprKind::Field(_, ident)) => {\n-                            format!(\"To reference an item from the `{module}` module, \\\n+                            format!(\"to reference an item from the `{module}` module, \\\n                                      use `{module}::{ident}`\",\n                                     module = path,\n                                     ident = ident.node)\n                         }\n                         Some(&ExprKind::MethodCall(ident, _, _)) => {\n-                            format!(\"To call a function from the `{module}` module, \\\n+                            format!(\"to call a function from the `{module}` module, \\\n                                      use `{module}::{ident}(..)`\",\n                                     module = path,\n                                     ident = ident.node)\n                         }\n                         _ => {\n-                            format!(\"Module `{module}` cannot be used as an expression\",\n+                            format!(\"{def} `{module}` cannot be used as an expression\",\n+                                    def = def.kind_name(),\n                                     module = path)\n                         }\n                     });\n@@ -1113,7 +1115,8 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n                         message: \"\",\n                         context: UnresolvedNameContext::Other,\n                         is_static_method: false,\n-                        is_field: false\n+                        is_field: false,\n+                        def: Def::Err,\n                     };\n                 resolve_error(self, path.span, error);\n                 Def::Err\n@@ -3064,6 +3067,7 @@ impl<'a> Resolver<'a> {\n                                 };\n \n                                 let mut context =  UnresolvedNameContext::Other;\n+                                let mut def = Def::Err;\n                                 if !msg.is_empty() {\n                                     msg = format!(\". Did you mean {}?\", msg);\n                                 } else {\n@@ -3076,7 +3080,10 @@ impl<'a> Resolver<'a> {\n                                     match self.resolve_module_path(&name_path[..],\n                                                                    UseLexicalScope,\n                                                                    expr.span) {\n-                                        Success(_) => {\n+                                        Success(e) => {\n+                                            if let Some(def_type) = e.def {\n+                                                def = def_type;\n+                                            }\n                                             context = UnresolvedNameContext::PathIsMod(parent);\n                                         },\n                                         _ => {},\n@@ -3091,6 +3098,7 @@ impl<'a> Resolver<'a> {\n                                                   context: context,\n                                                   is_static_method: method_scope && is_static,\n                                                   is_field: is_field,\n+                                                  def: def,\n                                               });\n                             }\n                         }"}, {"sha": "d7ec1ed67397fe939d1585dc32b60f535a8958f2", "filename": "src/test/compile-fail/issue-2356.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "patch": "@@ -88,6 +88,6 @@ impl cat {\n fn main() {\n     self += 1;\n     //~^ ERROR: unresolved name `self`\n-    //~| HELP: Module\n+    //~| HELP: module `self`\n     // it's a bug if this suggests a missing `self` as we're not in a method\n }"}, {"sha": "d95890730a0f2205d42f45f9993cd9ec36c45f31", "filename": "src/test/compile-fail/issue-33876.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Ftest%2Fcompile-fail%2Fissue-33876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Ftest%2Fcompile-fail%2Fissue-33876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-33876.rs?ref=f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(reflect_marker)]\n+\n+use std::marker::Reflect;\n+use std::any::Any;\n+\n+struct Foo;\n+\n+trait Bar {}\n+\n+impl Bar for Foo {}\n+\n+fn main() {\n+    let any: &Any = &Bar; //~ ERROR E0425\n+                          //~| HELP trait `Bar`\n+    if any.is::<u32>() { println!(\"u32\"); }\n+}"}, {"sha": "4a816ea75727669eef145b565c648e82b4a8d9b7", "filename": "src/test/compile-fail/suggest-path-instead-of-mod-dot-item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6f3c186ebe18c34acb1afc37d8fd1878f76de/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=f4e6f3c186ebe18c34acb1afc37d8fd1878f76de", "patch": "@@ -26,51 +26,51 @@ pub mod a {\n fn h1() -> i32 {\n     a.I\n         //~^ ERROR E0425\n-        //~| HELP To reference an item from the `a` module, use `a::I`\n+        //~| HELP to reference an item from the `a` module, use `a::I`\n }\n \n fn h2() -> i32 {\n     a.g()\n         //~^ ERROR E0425\n-        //~| HELP To call a function from the `a` module, use `a::g(..)`\n+        //~| HELP to call a function from the `a` module, use `a::g(..)`\n }\n \n fn h3() -> i32 {\n     a.b.J\n         //~^ ERROR E0425\n-        //~| HELP To reference an item from the `a` module, use `a::b`\n+        //~| HELP to reference an item from the `a` module, use `a::b`\n }\n \n fn h4() -> i32 {\n     a::b.J\n         //~^ ERROR E0425\n-        //~| HELP To reference an item from the `a::b` module, use `a::b::J`\n+        //~| HELP to reference an item from the `a::b` module, use `a::b::J`\n }\n \n fn h5() {\n     a.b.f();\n         //~^ ERROR E0425\n-        //~| HELP To reference an item from the `a` module, use `a::b`\n+        //~| HELP to reference an item from the `a` module, use `a::b`\n     let v = Vec::new();\n     v.push(a::b);\n         //~^ ERROR E0425\n-        //~| HELP Module `a::b` cannot be used as an expression\n+        //~| HELP module `a::b` cannot be used as an expression\n }\n \n fn h6() -> i32 {\n     a::b.f()\n         //~^ ERROR E0425\n-        //~| HELP To call a function from the `a::b` module, use `a::b::f(..)`\n+        //~| HELP to call a function from the `a::b` module, use `a::b::f(..)`\n }\n \n fn h7() {\n     a::b\n         //~^ ERROR E0425\n-        //~| HELP Module `a::b` cannot be used as an expression\n+        //~| HELP module `a::b` cannot be used as an expression\n }\n \n fn h8() -> i32 {\n     a::b()\n         //~^ ERROR E0425\n-        //~| HELP Module `a::b` cannot be used as an expression\n+        //~| HELP module `a::b` cannot be used as an expression\n }"}]}