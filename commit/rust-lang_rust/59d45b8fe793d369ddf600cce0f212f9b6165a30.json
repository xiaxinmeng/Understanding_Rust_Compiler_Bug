{"sha": "59d45b8fe793d369ddf600cce0f212f9b6165a30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDQ1YjhmZTc5M2QzNjlkZGY2MDBjY2UwZjIxMmY5YjYxNjVhMzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-17T18:28:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:21:57Z"}, "message": "Don't attempt to export uv functions directly", "tree": {"sha": "8a122f5327091943ac63d898291249dc1aa45498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a122f5327091943ac63d898291249dc1aa45498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d45b8fe793d369ddf600cce0f212f9b6165a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d45b8fe793d369ddf600cce0f212f9b6165a30", "html_url": "https://github.com/rust-lang/rust/commit/59d45b8fe793d369ddf600cce0f212f9b6165a30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d45b8fe793d369ddf600cce0f212f9b6165a30/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46f60a72968bd62560c0230b2e5dc63f107f468", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46f60a72968bd62560c0230b2e5dc63f107f468", "html_url": "https://github.com/rust-lang/rust/commit/b46f60a72968bd62560c0230b2e5dc63f107f468"}], "stats": {"total": 136, "additions": 84, "deletions": 52}, "files": [{"sha": "52838425422ca1edfa26a926b90aef3f1193ecd5", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -115,13 +115,6 @@ impl StdReader {\n             Err(e) => io_error::cond.raise(e),\n         }\n     }\n-\n-    /// Resets the mode of this stream back to its original state.\n-    ///\n-    /// # Failure\n-    ///\n-    /// This function cannot fail.\n-    pub fn reset_mode(&mut self) { self.inner.reset_mode(); }\n }\n \n impl Reader for StdReader {\n@@ -177,13 +170,6 @@ impl StdWriter {\n             Err(e) => io_error::cond.raise(e),\n         }\n     }\n-\n-    /// Resets the mode of this stream back to its original state.\n-    ///\n-    /// # Failure\n-    ///\n-    /// This function cannot fail.\n-    pub fn reset_mode(&mut self) { self.inner.reset_mode(); }\n }\n \n impl Writer for StdWriter {"}, {"sha": "924d9c4bff19974c48c8015bc60ef6e9e456bf3f", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -186,7 +186,6 @@ pub trait RtioTTY {\n     fn read(&mut self, buf: &mut [u8]) -> Result<uint, IoError>;\n     fn write(&mut self, buf: &[u8]) -> Result<(), IoError>;\n     fn set_raw(&mut self, raw: bool) -> Result<(), IoError>;\n-    fn reset_mode(&mut self);\n     fn get_winsize(&mut self) -> Result<(int, int), IoError>;\n }\n "}, {"sha": "74b9312954c83b94703d4418c66a6d1f07f6e042", "filename": "src/libstd/rt/uv/pipe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fpipe.rs?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -40,7 +40,7 @@ impl Pipe {\n \n     #[fixed_stack_segment] #[inline(never)]\n     pub fn open(&mut self, file: libc::c_int) -> Result<(), uv::UvError> {\n-        match unsafe { uvll::uv_pipe_open(self.native_handle(), file) } {\n+        match unsafe { uvll::pipe_open(self.native_handle(), file) } {\n             0 => Ok(()),\n             n => Err(uv::UvError(n))\n         }\n@@ -49,7 +49,7 @@ impl Pipe {\n     #[fixed_stack_segment] #[inline(never)]\n     pub fn bind(&mut self, name: &CString) -> Result<(), uv::UvError> {\n         do name.with_ref |name| {\n-            match unsafe { uvll::uv_pipe_bind(self.native_handle(), name) } {\n+            match unsafe { uvll::pipe_bind(self.native_handle(), name) } {\n                 0 => Ok(()),\n                 n => Err(uv::UvError(n))\n             }\n@@ -68,10 +68,10 @@ impl Pipe {\n         let name = do name.with_ref |p| { p };\n \n         unsafe {\n-            uvll::uv_pipe_connect(connect.native_handle(),\n-                                  self.native_handle(),\n-                                  name,\n-                                  connect_cb)\n+            uvll::pipe_connect(connect.native_handle(),\n+                               self.native_handle(),\n+                               name,\n+                               connect_cb)\n         }\n \n         extern \"C\" fn connect_cb(req: *uvll::uv_connect_t, status: libc::c_int) {"}, {"sha": "f44c5ae8eff611b88f8ea635db0b57581ae25462", "filename": "src/libstd/rt/uv/tty.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ftty.rs?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -29,8 +29,8 @@ impl TTY {\n         assert!(handle.is_not_null());\n \n         let ret = unsafe {\n-            uvll::uv_tty_init(loop_.native_handle(), handle, fd as libc::c_int,\n-                              readable as libc::c_int)\n+            uvll::tty_init(loop_.native_handle(), handle, fd as libc::c_int,\n+                           readable as libc::c_int)\n         };\n         match ret {\n             0 => {\n@@ -52,26 +52,21 @@ impl TTY {\n     #[fixed_stack_segment] #[inline(never)]\n     pub fn set_mode(&self, raw: bool) -> Result<(), uv::UvError> {\n         let raw = raw as libc::c_int;\n-        match unsafe { uvll::uv_tty_set_mode(self.native_handle(), raw) } {\n+        match unsafe { uvll::tty_set_mode(self.native_handle(), raw) } {\n             0 => Ok(()),\n             n => Err(uv::UvError(n))\n         }\n     }\n \n-    #[fixed_stack_segment] #[inline(never)]\n-    pub fn reset_mode(&self) {\n-        unsafe { uvll::uv_tty_reset_mode(self.native_handle()) }\n-    }\n-\n     #[fixed_stack_segment] #[inline(never)] #[allow(unused_mut)]\n     pub fn get_winsize(&self) -> Result<(int, int), uv::UvError> {\n         let mut width: libc::c_int = 0;\n         let mut height: libc::c_int = 0;\n         let widthptr: *libc::c_int = &width;\n         let heightptr: *libc::c_int = &width;\n \n-        match unsafe { uvll::uv_tty_get_winsize(self.native_handle(),\n-                                                widthptr, heightptr) } {\n+        match unsafe { uvll::tty_get_winsize(self.native_handle(),\n+                                             widthptr, heightptr) } {\n             0 => Ok((width as int, height as int)),\n             n => Err(uv::UvError(n))\n         }"}, {"sha": "3858b64915ac303afc236bc206cd5c7e5e1fb80c", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -1829,10 +1829,6 @@ impl RtioTTY for UvTTY {\n         }\n     }\n \n-    fn reset_mode(&mut self) {\n-        do self.home_for_io |self_| { self_.tty.reset_mode() }\n-    }\n-\n     fn get_winsize(&mut self) -> Result<(int, int), IoError> {\n         do self.home_for_io |self_| {\n             match self_.tty.get_winsize() {"}, {"sha": "e78b2579779f91de27f74e3a1d1bd60dbb92dcda", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -959,6 +959,33 @@ pub unsafe fn freeaddrinfo(ai: *addrinfo) {\n     #[fixed_stack_segment]; #[inline(never)];\n     rust_uv_freeaddrinfo(ai);\n }\n+pub unsafe fn pipe_open(pipe: *uv_pipe_t, file: c_int) -> c_int {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    rust_uv_pipe_open(pipe, file)\n+}\n+pub unsafe fn pipe_bind(pipe: *uv_pipe_t, name: *c_char) -> c_int {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    rust_uv_pipe_bind(pipe, name)\n+}\n+pub unsafe fn pipe_connect(req: *uv_connect_t, handle: *uv_pipe_t,\n+                           name: *c_char, cb: uv_connect_cb) {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    rust_uv_pipe_connect(req, handle, name, cb)\n+}\n+pub unsafe fn tty_init(loop_ptr: *uv_loop_t, tty: *uv_tty_t, fd: c_int,\n+                       readable: c_int) -> c_int {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    rust_uv_tty_init(loop_ptr, tty, fd, readable)\n+}\n+pub unsafe fn tty_set_mode(tty: *uv_tty_t, mode: c_int) -> c_int {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    rust_uv_tty_set_mode(tty, mode)\n+}\n+pub unsafe fn tty_get_winsize(tty: *uv_tty_t, width: *c_int,\n+                              height: *c_int) -> c_int {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    rust_uv_tty_get_winsize(tty, width, height)\n+}\n \n pub struct uv_err_data {\n     priv err_name: ~str,\n@@ -1104,16 +1131,15 @@ extern {\n                                        stream: *uv_stream_t);\n     fn rust_uv_pipe_init(loop_ptr: *c_void, p: *uv_pipe_t, ipc: c_int) -> c_int;\n \n-    pub fn uv_pipe_open(pipe: *uv_pipe_t, file: c_int) -> c_int;\n-    pub fn uv_pipe_bind(pipe: *uv_pipe_t, name: *c_char) -> c_int;\n-    pub fn uv_pipe_connect(req: *uv_connect_t, handle: *uv_pipe_t,\n-                           name: *c_char, cb: uv_connect_cb);\n-    pub fn uv_tty_init(loop_ptr: *uv_loop_t, tty: *uv_tty_t, fd: c_int,\n-                       readable: c_int) -> c_int;\n-    pub fn uv_tty_set_mode(tty: *uv_tty_t, mode: c_int) -> c_int;\n-    pub fn uv_tty_reset_mode(tty: *uv_tty_t);\n-    pub fn uv_tty_get_winsize(tty: *uv_tty_t, width: *c_int,\n-                              height: *c_int) -> c_int;\n+    fn rust_uv_pipe_open(pipe: *uv_pipe_t, file: c_int) -> c_int;\n+    fn rust_uv_pipe_bind(pipe: *uv_pipe_t, name: *c_char) -> c_int;\n+    fn rust_uv_pipe_connect(req: *uv_connect_t, handle: *uv_pipe_t,\n+                            name: *c_char, cb: uv_connect_cb);\n+    fn rust_uv_tty_init(loop_ptr: *uv_loop_t, tty: *uv_tty_t, fd: c_int,\n+                        readable: c_int) -> c_int;\n+    fn rust_uv_tty_set_mode(tty: *uv_tty_t, mode: c_int) -> c_int;\n+    fn rust_uv_tty_get_winsize(tty: *uv_tty_t, width: *c_int,\n+                               height: *c_int) -> c_int;\n \n     // These should all really be constants...\n     #[rust_stack] pub fn rust_SOCK_STREAM() -> c_int;"}, {"sha": "a47b3446d34426dff90675d4021b175c54d10ed5", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -650,3 +650,34 @@ extern \"C\" int rust_AI_NUMERICHOST()  { return AI_NUMERICHOST; }\n extern \"C\" int rust_AI_NUMERICSERV()  { return AI_NUMERICSERV; }\n extern \"C\" int rust_AI_PASSIVE()  { return AI_PASSIVE; }\n extern \"C\" int rust_AI_V4MAPPED()  { return AI_V4MAPPED; }\n+\n+extern \"C\" int\n+rust_uv_pipe_open(uv_pipe_t *pipe, int file) {\n+    return uv_pipe_open(pipe, file);\n+}\n+\n+extern \"C\" int\n+rust_uv_pipe_bind(uv_pipe_t *pipe, char *name) {\n+    return uv_pipe_bind(pipe, name);\n+}\n+\n+extern \"C\" void\n+rust_uv_pipe_connect(uv_connect_t *req, uv_pipe_t *handle,\n+                     char *name, uv_connect_cb cb) {\n+    uv_pipe_connect(req, handle, name, cb);\n+}\n+\n+extern \"C\" int\n+rust_uv_tty_init(uv_loop_t *loop, uv_tty_t *tty, int fd, int readable) {\n+    return uv_tty_init(loop, tty, fd, readable);\n+}\n+\n+extern \"C\" int\n+rust_uv_tty_set_mode(uv_tty_t *tty, int mode) {\n+    return uv_tty_set_mode(tty, mode);\n+}\n+\n+extern \"C\" int\n+rust_uv_tty_get_winsize(uv_tty_t *tty, int *width, int *height) {\n+    return uv_tty_get_winsize(tty, width, height);\n+}"}, {"sha": "58862da31db5c163e22dc77e89ce19c286ba00ac", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/59d45b8fe793d369ddf600cce0f212f9b6165a30/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=59d45b8fe793d369ddf600cce0f212f9b6165a30", "patch": "@@ -211,10 +211,9 @@ rust_AI_NUMERICHOST\n rust_AI_NUMERICSERV\n rust_AI_PASSIVE\n rust_AI_V4MAPPED\n-uv_pipe_open\n-uv_pipe_bind\n-uv_pipe_connect\n-uv_tty_init\n-uv_tty_set_mode\n-uv_tty_reset_mode\n-uv_tty_get_winsize\n+rust_uv_pipe_open\n+rust_uv_pipe_bind\n+rust_uv_pipe_connect\n+rust_uv_tty_init\n+rust_uv_tty_set_mode\n+rust_uv_tty_get_winsize"}]}