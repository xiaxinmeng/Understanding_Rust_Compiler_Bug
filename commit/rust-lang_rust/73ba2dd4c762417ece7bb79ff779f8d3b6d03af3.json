{"sha": "73ba2dd4c762417ece7bb79ff779f8d3b6d03af3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYmEyZGQ0Yzc2MjQxN2VjZTdiYjc5ZmY3NzlmOGQzYjZkMDNhZjM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-30T18:44:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-30T18:44:34Z"}, "message": "Shift stages around; stage0/rustc depends on stage0/libstd.so.", "tree": {"sha": "d7625236fbcc0c129ffbd28b527520fd9142f53b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7625236fbcc0c129ffbd28b527520fd9142f53b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3", "html_url": "https://github.com/rust-lang/rust/commit/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b101e26d92aa246271fcee3d66ea34f569e78cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b101e26d92aa246271fcee3d66ea34f569e78cf8", "html_url": "https://github.com/rust-lang/rust/commit/b101e26d92aa246271fcee3d66ea34f569e78cf8"}], "stats": {"total": 117, "additions": 68, "deletions": 49}, "files": [{"sha": "43bb1f21a2a33fc6ab90fde1c04617172c6ef9ef", "filename": "Makefile.in", "status": "modified", "additions": 67, "deletions": 48, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=73ba2dd4c762417ece7bb79ff779f8d3b6d03af3", "patch": "@@ -89,8 +89,14 @@ endif\n \n CFG_LDPATH :=$(CFG_BUILD_DIR)/rt\n CFG_LDPATH :=$(CFG_LDPATH):$(CFG_BUILD_DIR)/rustllvm\n-CFG_TESTLIB=$(dir $(firstword $(1))):$(patsubst .%,%,$(suffix $(1)))\n-CFG_EXE_TESTLIB=$(call CFG_TESTLIB,$(patsubst %.exe,%,$(1)))\n+CFG_TESTLIB=$(CFG_BUILD_DIR)/$(strip     \\\n+ $(if $(findstring stage0,$(1)),         \\\n+       stage1                            \\\n+      $(if $(findstring stage1,$(1)),    \\\n+           stage2                        \\\n+          $(if $(findstring stage2,$(1)),\\\n+               stage3                    \\\n+               ))))\n \n ifdef CFG_WINDOWSY\n   CFG_INFO := $(info cfg: windows-y environment)\n@@ -99,7 +105,7 @@ ifdef CFG_WINDOWSY\n   CFG_LIB_NAME=$(1).dll\n   CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_BINDIR)\n   CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n-  CFG_RUN_TEST=PATH=\"$(CFG_LDPATH):$(call CFG_EXE_TESTLIB,$(1))\" $(1)\n+  CFG_RUN_TEST=PATH=\"$(CFG_LDPATH):$(call CFG_TESTLIB,$(1))\" $(1)\n   CFG_RUN_TARG=PATH=\"$(CFG_BUILD_DIR)/$(1):$(CFG_LDPATH)\" $(2)\n \n   CFG_PATH_MUNGE := $(strip perl -i.bak -p             \\\n@@ -132,7 +138,7 @@ ifdef CFG_UNIXY\n     CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_BINDIR)\n     CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n     CFG_RUN_TARG=PATH=$(CFG_BUILD_DIR)/$(1):$(CFG_LDPATH) $(2)\n-    CFG_RUN_TEST=PATH=$(CFG_LDPATH):$(call CFG_EXE_TESTLIB,$(1)) $(1)\n+    CFG_RUN_TEST=PATH=$(CFG_LDPATH):$(call CFG_TESTLIB,$(1)) $(1)\n \n     CFG_INFO := $(info cfg: mingw-cross)\n     CFG_GCC_CROSS := i586-mingw32msvc-\n@@ -241,13 +247,13 @@ X := $(CFG_EXE_SUFFIX)\n VPATH := $(S)doc $(S)src\n \n # Compilers we build, we now know how to run.\n-BOOT := $(Q)OCAMLRUNPARAM=\"b1\" boot/rustboot$(X) $(CFG_BOOT_FLAGS) -L boot\n-STAGE0 := $(Q)$(call CFG_RUN_TARG,boot,\\\n-                stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage0)\n-STAGE1 := $(Q)$(call CFG_RUN_TARG,stage0, \\\n-                stage1/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1)\n-STAGE2 := $(Q)$(call CFG_RUN_TARG,stage1, \\\n-                stage2/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage2)\n+BOOT := $(Q)OCAMLRUNPARAM=\"b1\" boot/rustboot$(X) $(CFG_BOOT_FLAGS) -L stage0\n+STAGE0 := $(Q)$(call CFG_RUN_TARG,stage0,\\\n+                stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1)\n+STAGE1 := $(Q)$(call CFG_RUN_TARG,stage1, \\\n+                stage1/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage2)\n+STAGE2 := $(Q)$(call CFG_RUN_TARG,stage2, \\\n+                stage2/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage3)\n \n # \"Source\" files we generate in builddir along the way.\n GENERATED := boot/fe/lexer.ml boot/version.ml\n@@ -410,25 +416,32 @@ COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/comp/, \\\n ######################################################################\n \n LREQ := rt/$(CFG_RUNTIME) rustllvm/$(CFG_RUSTLLVM)\n-BREQ := boot/rustboot$(X) boot/$(CFG_STDLIB)\n-SREQ0 := stage0/rustc$(X) $(LREQ) stage0/glue.o stage0/$(CFG_STDLIB)\n-SREQ1 := stage1/rustc$(X) $(LREQ) stage1/glue.o stage1/$(CFG_STDLIB)\n-SREQ2 := stage2/rustc$(X) $(LREQ) stage2/glue.o stage2/$(CFG_STDLIB)\n+BREQ := boot/rustboot$(X) stage0/$(CFG_STDLIB)\n+SREQ0 := stage0/rustc$(X) $(LREQ) stage1/glue.o stage1/$(CFG_STDLIB)\n+SREQ1 := stage1/rustc$(X) $(LREQ) stage2/glue.o stage2/$(CFG_STDLIB)\n+SREQ2 := stage2/rustc$(X) $(LREQ) stage3/glue.o stage3/$(CFG_STDLIB)\n \n \n ######################################################################\n # Single-target rules\n ######################################################################\n \n all: boot/rustboot$(X)          \\\n-     boot/$(CFG_STDLIB)         \\\n      rt/$(CFG_RUNTIME)          \\\n      rustllvm/$(CFG_RUSTLLVM)   \\\n-     stage0/rustc$(X)           \\\n-     stage0/glue.o              \\\n      stage0/$(CFG_STDLIB)       \\\n+     stage0/rustc$(X)           \\\n      $(GENERATED)               \\\n-     $(DOCS)\n+     $(DOCS)                    \\\n+     stage1/$(CFG_STDLIB)       \\\n+     stage1/glue.o\n+#     stage1/rustc$(X)           \\\n+#     stage2/$(CFG_STDLIB)       \\\n+#     stage3/$(CFG_STDLIB)       \\\n+#     stage2/glue.o              \\\n+#     stage3/glue.o              \\\n+#     stage2/rustc$(X)           \\\n+#     stage3/rustc$(X)           \\\n \n rt/$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR) $(RUNTIME_DEF)\n \t@$(call E, link: $@)\n@@ -470,38 +483,38 @@ boot/version.ml: $(MKFILES)\n \n \n \n-boot/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-                    boot/rustboot$(X) $(MKFILES)\n+stage0/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+                      boot/rustboot$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(BOOT) -shared -o $@ $<\n \n-stage0/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n+stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(STAGE0) -c --shared -o $@ $<\n \n-stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n-\t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n-\t\t-Lstage0 -Lrt -lrustrt\n-\n-stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n-\t@$(call E, compile: $@)\n-\t$(STAGE1) -c --shared -o $@ $<\n-\n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage1 -Lrt -lrustrt\n \n-stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n+stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE2) -c --shared -o $@ $<\n+\t$(STAGE1) -c --shared -o $@ $<\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage2 -Lrt -lrustrt\n \n+stage3/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(STAGE2) -c --shared -o $@ $<\n+\n+stage3/$(CFG_STDLIB): stage3/std.o stage3/glue.o\n+\t@$(call E, link: $@)\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage3/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n+\t\t-Lstage3 -Lrt -lrustrt\n+\n \n \n stage0/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(BREQ)\n@@ -517,19 +530,23 @@ stage2/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n \t@$(call E, compile: $@)\n \t$(STAGE1) -c -o $@ $<\n \n+stage3/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ2)\n+\t@$(call E, compile: $@)\n+\t$(STAGE2) -c -o $@ $<\n+\n \n \n-stage0/glue.o: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n+stage1/glue.o: stage0/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n \t$(STAGE0) -c -o $@ --glue\n \n-stage1/glue.o: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n+stage2/glue.o: stage1/rustc$(X) stage1/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n \t$(STAGE1) -c -o $@ --glue\n \n-stage2/glue.o: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n+stage3/glue.o: stage2/rustc$(X) stage2/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n \t$(STAGE2) -c -o $@ --glue\n@@ -554,17 +571,17 @@ stage2/%.o: stage2/%.s\n \n stage1/%$(X): stage1/%.o  $(SREQ0)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o -o $@ $< \\\n-      -Lstage0 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n+      -Lstage1 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n \t@# programs, I\\'ll live with the noise.\n \t-$(Q)$(CFG_DSYMUTIL) $@\n \n stage2/%$(X): stage2/%.o  $(SREQ1)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n-      -Lstage1 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o -o $@ $< \\\n+      -Lstage2 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n \t@# programs, I\\'ll live with the noise.\n@@ -865,26 +882,26 @@ compile-check: tidy \\\n \n %.stage0$(X): %.stage0.o  $(SREQ0)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o -o $@ $< \\\n-      -Lstage0 -Lrt -lrustrt -lstd -lm\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n+      -Lstage1 -Lrt -lrustrt -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n \t@# programs, I\\'ll live with the noise.\n \t-$(Q)$(CFG_DSYMUTIL) $@\n \n %.stage1$(X): %.stage1.o $(SREQ1)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n-      -Lstage1 -Lrt -lrustrt -lstd -lm\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o -o $@ $< \\\n+      -Lstage2 -Lrt -lrustrt -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n \t@# programs, I\\'ll live with the noise.\n \t-$(Q)$(CFG_DSYMUTIL) $@\n \n %.stage2$(X): %.stage2.o $(SREQ2)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o -o $@ $< \\\n-      -Lstage2 -Lrt -lrustrt -lstd -lm\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage3/glue.o -o $@ $< \\\n+      -Lstage3 -Lrt -lrustrt -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n \t@# programs, I\\'ll live with the noise.\n@@ -1161,10 +1178,12 @@ clean:\n \t$(Q)rm -f $(CRATE_DEPFILES:%.d=%.d.tmp)\n \t$(Q)rm -f $(GENERATED)\n \t$(Q)rm -f boot/rustboot$(X) boot/$(CFG_STDLIB)\n-\t$(Q)rm -f stage0/rustc$(X) stage0/$(CFG_STDLIB) stage0/glue*\n+\t$(Q)rm -f stage0/rustc$(X) stage0/$(CFG_STDLIB)\n \t$(Q)rm -f stage1/rustc$(X) stage1/$(CFG_STDLIB) stage1/glue*\n \t$(Q)rm -f stage2/rustc$(X) stage2/$(CFG_STDLIB) stage2/glue*\n-\t$(Q)rm -f rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n+\t$(Q)rm -f stage3/rustc$(X) stage3/$(CFG_STDLIB) stage3/glue*\n+\t$(Q)rm -f rustllvm/$(CFG_RUSTLLVM) rustllvm/rustllvmbits.a\n+\t$(Q)rm -f rt/$(CFG_RUNTIME)\n \t$(Q)rm -Rf $(PKG_NAME)-*.tar.gz dist\n \t$(Q)rm -f $(foreach ext,cmx cmi cmo cma bc o a d exe,\\\n                         $(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext)))"}, {"sha": "69638509aabcfbd3a292460ef83a903178680d0e", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3/configure", "raw_url": "https://github.com/rust-lang/rust/raw/73ba2dd4c762417ece7bb79ff779f8d3b6d03af3/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=73ba2dd4c762417ece7bb79ff779f8d3b6d03af3", "patch": "@@ -168,7 +168,7 @@ for i in \\\n     boot/fe boot/me boot/be boot/driver boot/util \\\n     rt rt/isaac rt/bigint rt/sync rt/test \\\n     rustllvm \\\n-    stage0 stage1 stage2 \\\n+    dl stage0 stage1 stage2 stage3 \\\n     test/run-pass test/run-fail test/compile-fail \\\n     test/bench/99-bottles test/bench/shootout\n do"}]}