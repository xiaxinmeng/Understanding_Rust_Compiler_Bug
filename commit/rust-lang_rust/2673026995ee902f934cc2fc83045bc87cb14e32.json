{"sha": "2673026995ee902f934cc2fc83045bc87cb14e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzMwMjY5OTVlZTkwMmY5MzRjYzJmYzgzMDQ1YmM4N2NiMTRlMzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-13T07:36:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-13T07:36:51Z"}, "message": "Rollup merge of #82041 - notriddle:shared-from-slice-docs, r=m-ou-se\n\nAdd docs for shared_from_slice From impls\n\nThe advantage of making these docs is mostly in pointing out that these\nfunctions all make new allocations and copy/clone/move the source into them.\n\nThese docs are on the function, and not the `impl` block, to avoid showing\nthe \"[+] show undocumented items\" button.\n\nCC #51430", "tree": {"sha": "d3100ae9ed1c9788ec914ea78c397fb33932a0eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3100ae9ed1c9788ec914ea78c397fb33932a0eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2673026995ee902f934cc2fc83045bc87cb14e32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJ4GTCRBK7hj4Ov3rIwAAdHIIACoK2ZmapULqIuK/rFc6kUJa\nsE5UnyC3KwM2/P2DEncAfww1yEnk41sZtz9HkRIwObAA2QFuxqyTQ7BOKII+exXD\nuQ7Z0t1PR5jnp+t3FzuN9UaKroO13wR8v18TW/6FRBNLbRwJ+HgZJAEumpjTBgc2\nIXrJwWODi0pFoTxf/kzEIQgYQGq7nBQ08NFr+f3bHqA4k1/lEzLphHtdjM7QD5UK\n+aCWuODsWrRq3Lrg0XwawyCNykEHPsnhKkV/r6DJleh3yOk5gd2owlLdbLihS544\nvSGjPRuWKwpuCG1SjPaOUbPpZGUhkzy7WxG7Ov/y/19lHXHOpJXViqXiLKcyPQo=\n=PzuN\n-----END PGP SIGNATURE-----\n", "payload": "tree d3100ae9ed1c9788ec914ea78c397fb33932a0eb\nparent 3560ff39f0bb9a15f1dd8d22020f48c3d7ed6a48\nparent 7fafa4d0cae0d74dcb42016e51945866a1bd9f6f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613201811 +0900\ncommitter GitHub <noreply@github.com> 1613201811 +0900\n\nRollup merge of #82041 - notriddle:shared-from-slice-docs, r=m-ou-se\n\nAdd docs for shared_from_slice From impls\n\nThe advantage of making these docs is mostly in pointing out that these\nfunctions all make new allocations and copy/clone/move the source into them.\n\nThese docs are on the function, and not the `impl` block, to avoid showing\nthe \"[+] show undocumented items\" button.\n\nCC #51430\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2673026995ee902f934cc2fc83045bc87cb14e32", "html_url": "https://github.com/rust-lang/rust/commit/2673026995ee902f934cc2fc83045bc87cb14e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2673026995ee902f934cc2fc83045bc87cb14e32/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3560ff39f0bb9a15f1dd8d22020f48c3d7ed6a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/3560ff39f0bb9a15f1dd8d22020f48c3d7ed6a48", "html_url": "https://github.com/rust-lang/rust/commit/3560ff39f0bb9a15f1dd8d22020f48c3d7ed6a48"}, {"sha": "7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "html_url": "https://github.com/rust-lang/rust/commit/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "dac4acc4692a2de3070ba4545de1f657e53f93ba", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2673026995ee902f934cc2fc83045bc87cb14e32/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2673026995ee902f934cc2fc83045bc87cb14e32/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=2673026995ee902f934cc2fc83045bc87cb14e32", "patch": "@@ -1652,6 +1652,16 @@ impl<T> From<T> for Rc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: Clone> From<&[T]> for Rc<[T]> {\n+    /// Allocate a reference-counted slice and fill it by cloning `v`'s items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: &[i32] = &[1, 2, 3];\n+    /// let shared: Rc<[i32]> = Rc::from(original);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &[T]) -> Rc<[T]> {\n         <Self as RcFromSlice<T>>::from_slice(v)\n@@ -1660,6 +1670,15 @@ impl<T: Clone> From<&[T]> for Rc<[T]> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<&str> for Rc<str> {\n+    /// Allocate a reference-counted string slice and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let shared: Rc<str> = Rc::from(\"statue\");\n+    /// assert_eq!(\"statue\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &str) -> Rc<str> {\n         let rc = Rc::<[u8]>::from(v.as_bytes());\n@@ -1669,6 +1688,16 @@ impl From<&str> for Rc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<String> for Rc<str> {\n+    /// Allocate a reference-counted string slice and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: String = \"statue\".to_owned();\n+    /// let shared: Rc<str> = Rc::from(original);\n+    /// assert_eq!(\"statue\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: String) -> Rc<str> {\n         Rc::from(&v[..])\n@@ -1677,6 +1706,16 @@ impl From<String> for Rc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: ?Sized> From<Box<T>> for Rc<T> {\n+    /// Move a boxed object to a new, reference counted, allocation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: Box<i32> = Box::new(1);\n+    /// let shared: Rc<i32> = Rc::from(original);\n+    /// assert_eq!(1, *shared);\n+    /// ```\n     #[inline]\n     fn from(v: Box<T>) -> Rc<T> {\n         Rc::from_box(v)\n@@ -1685,6 +1724,16 @@ impl<T: ?Sized> From<Box<T>> for Rc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T> From<Vec<T>> for Rc<[T]> {\n+    /// Allocate a reference-counted slice and move `v`'s items into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);\n+    /// let shared: Rc<Vec<i32>> = Rc::from(original);\n+    /// assert_eq!(vec![1, 2, 3], *shared);\n+    /// ```\n     #[inline]\n     fn from(mut v: Vec<T>) -> Rc<[T]> {\n         unsafe {"}, {"sha": "aeae888dddc036faa4b4eeb232f8f2c85832297a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2673026995ee902f934cc2fc83045bc87cb14e32/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2673026995ee902f934cc2fc83045bc87cb14e32/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=2673026995ee902f934cc2fc83045bc87cb14e32", "patch": "@@ -2285,6 +2285,16 @@ impl<T> From<T> for Arc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: Clone> From<&[T]> for Arc<[T]> {\n+    /// Allocate a reference-counted slice and fill it by cloning `v`'s items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let original: &[i32] = &[1, 2, 3];\n+    /// let shared: Arc<[i32]> = Arc::from(original);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &[T]) -> Arc<[T]> {\n         <Self as ArcFromSlice<T>>::from_slice(v)\n@@ -2293,6 +2303,15 @@ impl<T: Clone> From<&[T]> for Arc<[T]> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<&str> for Arc<str> {\n+    /// Allocate a reference-counted `str` and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let shared: Arc<str> = Arc::from(\"eggplant\");\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &str) -> Arc<str> {\n         let arc = Arc::<[u8]>::from(v.as_bytes());\n@@ -2302,6 +2321,16 @@ impl From<&str> for Arc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<String> for Arc<str> {\n+    /// Allocate a reference-counted `str` and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: String = \"eggplant\".to_owned();\n+    /// let shared: Arc<str> = Arc::from(unique);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: String) -> Arc<str> {\n         Arc::from(&v[..])\n@@ -2310,6 +2339,16 @@ impl From<String> for Arc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: ?Sized> From<Box<T>> for Arc<T> {\n+    /// Move a boxed object to a new, reference-counted allocation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: Box<str> = Box::from(\"eggplant\");\n+    /// let shared: Arc<str> = Arc::from(unique);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: Box<T>) -> Arc<T> {\n         Arc::from_box(v)\n@@ -2318,6 +2357,16 @@ impl<T: ?Sized> From<Box<T>> for Arc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T> From<Vec<T>> for Arc<[T]> {\n+    /// Allocate a reference-counted slice and move `v`'s items into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: Vec<i32> = vec![1, 2, 3];\n+    /// let shared: Arc<[i32]> = Arc::from(unique);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(mut v: Vec<T>) -> Arc<[T]> {\n         unsafe {"}]}