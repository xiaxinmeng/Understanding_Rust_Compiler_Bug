{"sha": "6dcade0692fc516752c811d2b05302f2ed97aaeb", "node_id": "C_kwDOAAsO6NoAKDZkY2FkZTA2OTJmYzUxNjc1MmM4MTFkMmIwNTMwMmYyZWQ5N2FhZWI", "commit": {"author": {"name": "Steven Casper", "email": "sebastiancasper3@gmail.com", "date": "2022-10-31T19:50:59Z"}, "committer": {"name": "Steven Casper", "email": "sebastiancasper3@gmail.com", "date": "2022-10-31T19:50:59Z"}, "message": "Implement let_underscore_future", "tree": {"sha": "1ef8fcab22ee0b8b5f8c144a2981d8ccd8dbae87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef8fcab22ee0b8b5f8c144a2981d8ccd8dbae87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcade0692fc516752c811d2b05302f2ed97aaeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcade0692fc516752c811d2b05302f2ed97aaeb", "html_url": "https://github.com/rust-lang/rust/commit/6dcade0692fc516752c811d2b05302f2ed97aaeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcade0692fc516752c811d2b05302f2ed97aaeb/comments", "author": {"login": "SquareMan", "id": 3579314, "node_id": "MDQ6VXNlcjM1NzkzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3579314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SquareMan", "html_url": "https://github.com/SquareMan", "followers_url": "https://api.github.com/users/SquareMan/followers", "following_url": "https://api.github.com/users/SquareMan/following{/other_user}", "gists_url": "https://api.github.com/users/SquareMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/SquareMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SquareMan/subscriptions", "organizations_url": "https://api.github.com/users/SquareMan/orgs", "repos_url": "https://api.github.com/users/SquareMan/repos", "events_url": "https://api.github.com/users/SquareMan/events{/privacy}", "received_events_url": "https://api.github.com/users/SquareMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SquareMan", "id": 3579314, "node_id": "MDQ6VXNlcjM1NzkzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3579314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SquareMan", "html_url": "https://github.com/SquareMan", "followers_url": "https://api.github.com/users/SquareMan/followers", "following_url": "https://api.github.com/users/SquareMan/following{/other_user}", "gists_url": "https://api.github.com/users/SquareMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/SquareMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SquareMan/subscriptions", "organizations_url": "https://api.github.com/users/SquareMan/orgs", "repos_url": "https://api.github.com/users/SquareMan/repos", "events_url": "https://api.github.com/users/SquareMan/events{/privacy}", "received_events_url": "https://api.github.com/users/SquareMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d338c1efd7840fa96c5eaeaa5785094efdab07", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d338c1efd7840fa96c5eaeaa5785094efdab07", "html_url": "https://github.com/rust-lang/rust/commit/37d338c1efd7840fa96c5eaeaa5785094efdab07"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "4855f301d0d07f74889b3815fb6e6b2c8b5eb436", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6dcade0692fc516752c811d2b05302f2ed97aaeb/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcade0692fc516752c811d2b05302f2ed97aaeb/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=6dcade0692fc516752c811d2b05302f2ed97aaeb", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{is_must_use_ty, match_type};\n+use clippy_utils::ty::{implements_trait, is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -59,7 +59,31 @@ declare_clippy_lint! {\n     \"non-binding let on a synchronization lock\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>` where the resulting type of expr implements `Future`\n+    ///\n+    /// ### Why is this bad?\n+    /// Futures must be polled for work to be done. The original intention was most likely to await the future\n+    /// and ignore the resulting value.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// async fn foo() -> Result<(), ()> { }\n+    /// let _ = foo();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let _ = foo().await;\n+    /// ```\n+    #[clippy::version = \"1.66\"]\n+    pub LET_UNDERSCORE_FUTURE,\n+    suspicious,\n+    \"non-binding let on a future\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n@@ -88,6 +112,16 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\",\n                 );\n+            } else if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait()\n+                && implements_trait(cx, cx.typeck_results().expr_ty(init), future_trait_def_id, &[]) {\n+                span_lint_and_help(\n+                    cx,\n+                    LET_UNDERSCORE_FUTURE,\n+                    local.span,\n+                    \"non-binding let on a future\",\n+                    None,\n+                    \"consider awaiting the future or dropping explicitly with `std::mem::drop`\"\n+                );\n             } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "d8f54cdca91209ba8bb47f24a975ec6ad596e3ea", "filename": "tests/ui/let_underscore_future.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6dcade0692fc516752c811d2b05302f2ed97aaeb/tests%2Fui%2Flet_underscore_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcade0692fc516752c811d2b05302f2ed97aaeb/tests%2Fui%2Flet_underscore_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_future.rs?ref=6dcade0692fc516752c811d2b05302f2ed97aaeb", "patch": "@@ -0,0 +1,20 @@\n+use std::future::Future;\n+\n+async fn some_async_fn() {}\n+\n+fn sync_side_effects() {}\n+fn custom() -> impl Future<Output = ()> {\n+    sync_side_effects();\n+    async {}\n+}\n+\n+fn do_something_to_future(future: &mut impl Future<Output = ()>) {}\n+\n+fn main() {\n+    let _ = some_async_fn();\n+    let _ = custom();\n+\n+    let mut future = some_async_fn();\n+    do_something_to_future(&mut future);\n+    let _ = future;\n+}"}, {"sha": "f1b9b1d709ec0f5bcec5004e8c3f4de3195852ef", "filename": "tests/ui/let_underscore_future.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6dcade0692fc516752c811d2b05302f2ed97aaeb/tests%2Fui%2Flet_underscore_future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcade0692fc516752c811d2b05302f2ed97aaeb/tests%2Fui%2Flet_underscore_future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_future.stderr?ref=6dcade0692fc516752c811d2b05302f2ed97aaeb", "patch": "@@ -0,0 +1,27 @@\n+error: non-binding let on a future\n+  --> $DIR/let_underscore_future.rs:14:5\n+   |\n+LL |     let _ = some_async_fn();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`\n+   = note: `-D clippy::let-underscore-future` implied by `-D warnings`\n+\n+error: non-binding let on a future\n+  --> $DIR/let_underscore_future.rs:15:5\n+   |\n+LL |     let _ = custom();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a future\n+  --> $DIR/let_underscore_future.rs:19:5\n+   |\n+LL |     let _ = future;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider awaiting the future or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 3 previous errors\n+"}]}