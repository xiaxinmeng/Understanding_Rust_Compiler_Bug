{"sha": "b107f720e5422bff4fa0671e54ff5458f682f603", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDdmNzIwZTU0MjJiZmY0ZmEwNjcxZTU0ZmY1NDU4ZjY4MmY2MDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-03T10:07:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-03T10:07:39Z"}, "message": "Auto merge of #47151 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #47104, #47107, #47113, #47117, #47118, #47121, #47125, #47134, #47145\n- Failed merges:", "tree": {"sha": "59197850b7f1943febf23868ec974ea9b451096f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59197850b7f1943febf23868ec974ea9b451096f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b107f720e5422bff4fa0671e54ff5458f682f603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b107f720e5422bff4fa0671e54ff5458f682f603", "html_url": "https://github.com/rust-lang/rust/commit/b107f720e5422bff4fa0671e54ff5458f682f603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b107f720e5422bff4fa0671e54ff5458f682f603/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8934399a85b67213f2593abb04a7e9be42df675", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8934399a85b67213f2593abb04a7e9be42df675", "html_url": "https://github.com/rust-lang/rust/commit/b8934399a85b67213f2593abb04a7e9be42df675"}, {"sha": "b4161194721c5fc36c452047ba00433c6da228a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4161194721c5fc36c452047ba00433c6da228a0", "html_url": "https://github.com/rust-lang/rust/commit/b4161194721c5fc36c452047ba00433c6da228a0"}], "stats": {"total": 126, "additions": 87, "deletions": 39}, "files": [{"sha": "19e7f663c7ac33228c76f4c17a92c8a1b0f47222", "filename": "src/doc/unstable-book/src/library-features/proc-macro.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8934399a85b67213f2593abb04a7e9be42df675/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8934399a85b67213f2593abb04a7e9be42df675/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fproc-macro.md?ref=b8934399a85b67213f2593abb04a7e9be42df675", "patch": "@@ -1,7 +0,0 @@\n-# `proc_macro`\n-\n-The tracking issue for this feature is: [#38356]\n-\n-[#38356]: https://github.com/rust-lang/rust/issues/38356\n-\n-------------------------"}, {"sha": "fa73197885be79bf34aa3cc2396bcace33cd6117", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -606,14 +606,14 @@ impl<T> [T] {\n         core_slice::SliceExt::windows(self, size)\n     }\n \n-    /// Returns an iterator over `size` elements of the slice at a\n-    /// time. The chunks are slices and do not overlap. If `size` does\n+    /// Returns an iterator over `chunk_size` elements of the slice at a\n+    /// time. The chunks are slices and do not overlap. If `chunk_size` does\n     /// not divide the length of the slice, then the last chunk will\n-    /// not have length `size`.\n+    /// not have length `chunk_size`.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `size` is 0.\n+    /// Panics if `chunk_size` is 0.\n     ///\n     /// # Examples\n     ///\n@@ -627,8 +627,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chunks(&self, size: usize) -> Chunks<T> {\n-        core_slice::SliceExt::chunks(self, size)\n+    pub fn chunks(&self, chunk_size: usize) -> Chunks<T> {\n+        core_slice::SliceExt::chunks(self, chunk_size)\n     }\n \n     /// Returns an iterator over `chunk_size` elements of the slice at a time.\n@@ -1725,6 +1725,14 @@ impl [u8] {\n            reason = \"trait should not have to exist\",\n            issue = \"27747\")]\n /// An extension trait for concatenating slices\n+///\n+/// While this trait is unstable, the methods are stable. `SliceConcatExt` is\n+/// included in the [standard library prelude], so you can use [`join()`] and\n+/// [`concat()`] as if they existed on `[T]` itself.\n+///\n+/// [standard library prelude]: ../../std/prelude/index.html\n+/// [`join()`]: #tymethod.join\n+/// [`concat()`]: #tymethod.concat\n pub trait SliceConcatExt<T: ?Sized> {\n     #[unstable(feature = \"slice_concat_ext\",\n                reason = \"trait should not have to exist\","}, {"sha": "301e44632b82379394c980ca6e2b1e9d9a7eb1c2", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -715,7 +715,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if `index` is out of bounds.\n+    /// Panics if `index > len`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "69c9cb37dcfd3278aa1a6a347a35d51b98bba32a", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -56,7 +56,7 @@ fn repeat_byte(b: u8) -> usize {\n     rep\n }\n \n-/// Return the first index matching the byte `a` in `text`.\n+/// Return the first index matching the byte `x` in `text`.\n pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //\n@@ -101,7 +101,7 @@ pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     text[offset..].iter().position(|elt| *elt == x).map(|i| offset + i)\n }\n \n-/// Return the last index matching the byte `a` in `text`.\n+/// Return the last index matching the byte `x` in `text`.\n pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //"}, {"sha": "6b6ec7147b3064d96ad590cd9595bd12123744c9", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -348,9 +348,9 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn chunks(&self, size: usize) -> Chunks<T> {\n-        assert!(size != 0);\n-        Chunks { v: self, size: size }\n+    fn chunks(&self, chunk_size: usize) -> Chunks<T> {\n+        assert!(chunk_size != 0);\n+        Chunks { v: self, chunk_size: chunk_size }\n     }\n \n     #[inline]\n@@ -532,7 +532,7 @@ impl<T> SliceExt for [T] {\n \n     #[inline]\n     fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> {\n-        assert!(chunk_size > 0);\n+        assert!(chunk_size != 0);\n         ChunksMut { v: self, chunk_size: chunk_size }\n     }\n \n@@ -2117,7 +2117,7 @@ impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Windows<'a, T> {}\n \n-/// An iterator over a slice in (non-overlapping) chunks (`size` elements at a\n+/// An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n /// time).\n ///\n /// When the slice len is not evenly divided by the chunk size, the last slice\n@@ -2131,7 +2131,7 @@ impl<'a, T> FusedIterator for Windows<'a, T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T:'a> {\n     v: &'a [T],\n-    size: usize\n+    chunk_size: usize\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n@@ -2140,7 +2140,7 @@ impl<'a, T> Clone for Chunks<'a, T> {\n     fn clone(&self) -> Chunks<'a, T> {\n         Chunks {\n             v: self.v,\n-            size: self.size,\n+            chunk_size: self.chunk_size,\n         }\n     }\n }\n@@ -2154,7 +2154,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             None\n         } else {\n-            let chunksz = cmp::min(self.v.len(), self.size);\n+            let chunksz = cmp::min(self.v.len(), self.chunk_size);\n             let (fst, snd) = self.v.split_at(chunksz);\n             self.v = snd;\n             Some(fst)\n@@ -2166,8 +2166,8 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             (0, Some(0))\n         } else {\n-            let n = self.v.len() / self.size;\n-            let rem = self.v.len() % self.size;\n+            let n = self.v.len() / self.chunk_size;\n+            let rem = self.v.len() % self.chunk_size;\n             let n = if rem > 0 { n+1 } else { n };\n             (n, Some(n))\n         }\n@@ -2180,12 +2180,12 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        let (start, overflow) = n.overflowing_mul(self.size);\n+        let (start, overflow) = n.overflowing_mul(self.chunk_size);\n         if start >= self.v.len() || overflow {\n             self.v = &[];\n             None\n         } else {\n-            let end = match start.checked_add(self.size) {\n+            let end = match start.checked_add(self.chunk_size) {\n                 Some(sum) => cmp::min(self.v.len(), sum),\n                 None => self.v.len(),\n             };\n@@ -2200,7 +2200,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             None\n         } else {\n-            let start = (self.v.len() - 1) / self.size * self.size;\n+            let start = (self.v.len() - 1) / self.chunk_size * self.chunk_size;\n             Some(&self.v[start..])\n         }\n     }\n@@ -2213,8 +2213,8 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n         if self.v.is_empty() {\n             None\n         } else {\n-            let remainder = self.v.len() % self.size;\n-            let chunksz = if remainder != 0 { remainder } else { self.size };\n+            let remainder = self.v.len() % self.chunk_size;\n+            let chunksz = if remainder != 0 { remainder } else { self.chunk_size };\n             let (fst, snd) = self.v.split_at(self.v.len() - chunksz);\n             self.v = fst;\n             Some(snd)\n@@ -2228,7 +2228,7 @@ impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for Chunks<'a, T> {}\n \n-/// An iterator over a slice in (non-overlapping) mutable chunks (`size`\n+/// An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n /// elements at a time). When the slice len is not evenly divided by the chunk\n /// size, the last slice of the iteration will be the remainder.\n ///"}, {"sha": "cac86be0fcb75c76a191cfb3a5223704ff868d37", "filename": "src/librustc/mir/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibrustc%2Fmir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibrustc%2Fmir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2FREADME.md?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -59,7 +59,7 @@ ensure that, before the MIR at a particular phase in the processing\n pipeline is stolen, anyone who may want to read from it has already\n done so. Concretely, this means that if you have some query `foo(D)`\n that wants to access the result of `mir_const(D)` or\n-`mir_validated(D)`, you need to have the successor pass either \"force\"\n+`mir_validated(D)`, you need to have the successor pass \"force\"\n `foo(D)` using `ty::queries::foo::force(...)`. This will force a query\n to execute even though you don't directly require its result.\n "}, {"sha": "4aed688027f767783bc65355b87936b28cade11a", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -59,11 +59,13 @@ pub fn check_drop_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         _ => {\n             // Destructors only work on nominal types.  This was\n-            // already checked by coherence, so we can panic here.\n+            // already checked by coherence, but compilation may\n+            // not have been terminated.\n             let span = tcx.def_span(drop_impl_did);\n-            span_bug!(span,\n-                      \"should have been rejected by coherence check: {}\",\n-                      dtor_self_type);\n+            tcx.sess.delay_span_bug(span,\n+                            &format!(\"should have been rejected by coherence check: {}\",\n+                            dtor_self_type));\n+            Err(ErrorReported)\n         }\n     }\n }"}, {"sha": "c128a812b93b065b883d7ddb15b23f0213e6251c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -258,6 +258,7 @@\n                 addClass(search, \"hidden\");\n                 removeClass(document.getElementById(\"main\"), \"hidden\");\n             }\n+            defocusSearchBar();\n             break;\n \n         case \"s\":\n@@ -1884,3 +1885,8 @@\n function focusSearchBar() {\n     document.getElementsByClassName('search-input')[0].focus();\n }\n+\n+// Removes the focus from the search bar\n+function defocusSearchBar() {\n+    document.getElementsByClassName('search-input')[0].blur();\n+}"}, {"sha": "7001d8e042196c46ac8348b8cd0b50746c06c1f6", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -486,6 +486,10 @@ impl<W: Write> BufWriter<W> {\n     ///\n     /// The buffer is written out before returning the writer.\n     ///\n+    /// # Errors\n+    ///\n+    /// An `Err` will be returned if an error occurs while flushing the buffer.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -650,6 +654,9 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// completed, rather than the entire buffer at once. Enter `LineWriter`. It\n /// does exactly that.\n ///\n+/// Like [`BufWriter`], a `LineWriter`\u2019s buffer will also be flushed when the\n+/// `LineWriter` goes out of scope or when its internal buffer is full.\n+///\n /// [bufwriter]: struct.BufWriter.html\n ///\n /// If there's still a partial line in the buffer when the `LineWriter` is\n@@ -785,6 +792,10 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// The internal buffer is written out before returning the writer.\n     ///\n+    // # Errors\n+    ///\n+    /// An `Err` will be returned if an error occurs while flushing the buffer.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "5c9077783c794688af8eaa2ac9fc7760cbea559d", "filename": "src/test/compile-fail/issue-41974.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Ftest%2Fcompile-fail%2Fissue-41974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Ftest%2Fcompile-fail%2Fissue-41974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41974.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Copy, Clone)]\n+struct Flags;\n+\n+trait A {\n+}\n+\n+impl<T> Drop for T where T: A { //~ ERROR E0119\n+                                //~^ ERROR E0120\n+                                //~| ERROR E0210\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a4a35a706fd912a2cab86bab937f5c417ba823b8", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -87,7 +87,9 @@ pub fn check(path: &path::Path, bad: &mut bool) {\n     // Library features\n \n     let lang_features = collect_lang_features(path);\n-    let lib_features = collect_lib_features(path);\n+    let lib_features = collect_lib_features(path).into_iter().filter(|&(ref name, _)| {\n+        !lang_features.contains_key(name)\n+    }).collect();\n \n     let unstable_lib_feature_names = collect_unstable_feature_names(&lib_features);\n     let unstable_book_lib_features_section_file_names ="}, {"sha": "f66a18547c3b5c414e99b50f55bd0e88425aeb6b", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b107f720e5422bff4fa0671e54ff5458f682f603/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=b107f720e5422bff4fa0671e54ff5458f682f603", "patch": "@@ -129,7 +129,9 @@ fn main() {\n     let dest_path = Path::new(&dest_path_str).join(\"src\");\n \n     let lang_features = collect_lang_features(src_path);\n-    let lib_features = collect_lib_features(src_path);\n+    let lib_features = collect_lib_features(src_path).into_iter().filter(|&(ref name, _)| {\n+        !lang_features.contains_key(name)\n+    }).collect();\n \n     let doc_src_path = src_path.join(PATH_STR);\n "}]}