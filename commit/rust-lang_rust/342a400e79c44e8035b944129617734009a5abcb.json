{"sha": "342a400e79c44e8035b944129617734009a5abcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MmE0MDBlNzljNDRlODAzNWI5NDQxMjk2MTc3MzQwMDlhNWFiY2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-15T01:32:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:48Z"}, "message": "Remove type coercion from fn to block\n\nfn is a proper subtype of block now", "tree": {"sha": "25ccf99cca3171aa0dbab7a5f8ab8534e3cc0108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ccf99cca3171aa0dbab7a5f8ab8534e3cc0108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342a400e79c44e8035b944129617734009a5abcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342a400e79c44e8035b944129617734009a5abcb", "html_url": "https://github.com/rust-lang/rust/commit/342a400e79c44e8035b944129617734009a5abcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342a400e79c44e8035b944129617734009a5abcb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "html_url": "https://github.com/rust-lang/rust/commit/8136b92ee8e47fc460e64eb7ab65bc59f33efb71"}], "stats": {"total": 52, "additions": 4, "deletions": 48}, "files": [{"sha": "a017a684bb027ceb21c117834a19264644be79dc", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/342a400e79c44e8035b944129617734009a5abcb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342a400e79c44e8035b944129617734009a5abcb/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=342a400e79c44e8035b944129617734009a5abcb", "patch": "@@ -891,43 +891,6 @@ fn do_autoderef(fcx: @fn_ctxt, sp: span, t: ty::t) -> ty::t {\n     fail;\n }\n \n-fn do_fn_ty_coerce(fcx: @fn_ctxt, sp: span, actual: ty::t, expected: ty::t)\n-   -> ty::t {\n-\n-    // fns can be silently coerced to blocks when being used as\n-    // function call or bind arguments, but not the reverse.\n-    // If our actual type is a fn and our expected type is a block,\n-    // build up a new expected type that is identical to the old one\n-    // except for its proto. If we don't know the expected or actual\n-    // types, that's fine, but we can't do the coercion.\n-    ret alt structure_of_maybe(fcx, sp, actual) {\n-          some(ty::ty_fn(ast::proto_fn., args, ret_ty, cf, constrs)) {\n-            alt structure_of_maybe(fcx, sp, expected) {\n-              some(ty::ty_fn(ast::proto_block., _, _, _, _)) {\n-                ty::mk_fn(fcx.ccx.tcx, ast::proto_block, args, ret_ty, cf,\n-                          constrs)\n-              }\n-              _ { actual }\n-            }\n-          }\n-          some(ty::ty_fn(ast::proto_bare., args, ret_ty, cf, constrs)) {\n-            alt structure_of_maybe(fcx, sp, expected) {\n-              some(ty::ty_fn(ast::proto_fn., _, _, _, _)) {\n-                ty::mk_fn(fcx.ccx.tcx, ast::proto_fn, args, ret_ty, cf,\n-                          constrs)\n-              }\n-              some(ty::ty_fn(ast::proto_block., _, _, _, _)) {\n-                ty::mk_fn(fcx.ccx.tcx, ast::proto_block, args, ret_ty, cf,\n-                          constrs)\n-              }\n-              _ { actual }\n-            }\n-          }\n-          _ { actual }\n-        }\n-}\n-\n-\n fn resolve_type_vars_if_possible(fcx: @fn_ctxt, typ: ty::t) -> ty::t {\n     alt ty::unify::fixup_vars(fcx.ccx.tcx, none, fcx.var_bindings, typ) {\n       fix_ok(new_type) { ret new_type; }\n@@ -943,26 +906,19 @@ type ty_param_substs_and_ty = {substs: [ty::t], ty: ty::t};\n mod demand {\n     fn simple(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t) ->\n        ty::t {\n-        full(fcx, sp, expected, actual, [], false).ty\n-    }\n-    fn fn_coerce(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t)\n-       -> ty::t {\n-        full(fcx, sp, expected, actual, [], true).ty\n+        full(fcx, sp, expected, actual, []).ty\n     }\n \n     fn with_substs(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t,\n                    ty_param_substs_0: [ty::t]) -> ty_param_substs_and_ty {\n-        full(fcx, sp, expected, actual, ty_param_substs_0, false)\n+        full(fcx, sp, expected, actual, ty_param_substs_0)\n     }\n \n     // Requires that the two types unify, and prints an error message if they\n     // don't. Returns the unified type and the type parameter substitutions.\n     fn full(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t,\n-            ty_param_substs_0: [ty::t], do_fn_coerce: bool) ->\n+            ty_param_substs_0: [ty::t]) ->\n        ty_param_substs_and_ty {\n-        if do_fn_coerce {\n-            actual = do_fn_ty_coerce(fcx, sp, actual, expected);\n-        }\n \n         let ty_param_substs: [mutable ty::t] = [mutable];\n         let ty_param_subst_var_ids: [int] = [];\n@@ -1689,7 +1645,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                         if is_block == check_blocks {\n                             bot |=\n                                 check_expr_with_unifier(fcx, a,\n-                                                        demand::fn_coerce,\n+                                                        demand::simple,\n                                                         arg_tys[i].ty);\n                         }\n                       }"}]}