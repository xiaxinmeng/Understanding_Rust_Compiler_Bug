{"sha": "26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "node_id": "C_kwDOAAsO6NoAKDI2YzRjMWVhOTdkMTY4NjNkYmJhZjI2ODhkNWRjN2NlMWNhMzY4MGI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-10T20:48:11Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-15T15:27:16Z"}, "message": "Rename impl_trait_in_trait_parent to impl_trait_in_trait_parent_fn", "tree": {"sha": "8e0b7145e4b1a076f9616c542de8a8c0b2a3126a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0b7145e4b1a076f9616c542de8a8c0b2a3126a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQR49QACgkQgTGiTgx5\n76+4ag/+POT3ZZKx9GAmK6jbMwhG0cxQhez3d8vsQXGYfMwYgdiWJnNh6iOWcWY/\nC7desu8VX8ZvKvUd0hh7pSzl9C4kUwgQH0kdsducFNE5neLhM2d1g9ortLikNxCf\nxT+TIGNyGY7zLqzZ63w/6Cf4NDAJJvm7fx0mWaqskFjbYrL4RlciXvvSXrmhcvk9\nBNQGCRLiSoFuSUO++agWjM1DaHSUwhPK3nz5VzEGw/Z7tEzLjqXKV8iN/ZlQmrXu\nAhp7Z+jqc6sEE0SPCBOBOxfHlC7eOrkH92JiYFAiw5qqWWENI8/UfqVaQcbx2NOz\nJoRTLgjgeW2pzQ9S7dDQ2MIyRWHtur96QAeZDX7afj90LWVXFeUXnX3Xp0Nh45/p\nInVfql055T2NWEsExh8pu8xvP/7VAhqzCqta4TllM8vdrbvDKumbLmAZkCeVFjCd\nnD02hbySmmDAjLIK5Dpwpf+Uz/JbI4E/mSQueOtbH8VSL1fsHqjhOn+daSLbZdce\no4UWJ1NewHgyxPYNhLWnUxbSHD0GHDyIkYzHpS+e8WHRjqPvbV+xLXBTgxDb1St1\npcC7zX6qcvwSB2wsHowtRlIVZew6RHX9TXQFqenR1JAREQKimcTYsyg8WKv1Sir1\nAYLKjhetMqvtmgMRcV3nv4j9YAdyE2XlkL4u/qlOtx7M9Vb2wp0=\n=4vrb\n-----END PGP SIGNATURE-----", "payload": "tree 8e0b7145e4b1a076f9616c542de8a8c0b2a3126a\nparent e4b9f86054c581d931f8bad0c87523c53e1e8e3f\nauthor Santiago Pastorino <spastorino@gmail.com> 1678481291 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678894036 -0300\n\nRename impl_trait_in_trait_parent to impl_trait_in_trait_parent_fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "html_url": "https://github.com/rust-lang/rust/commit/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b9f86054c581d931f8bad0c87523c53e1e8e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b9f86054c581d931f8bad0c87523c53e1e8e3f", "html_url": "https://github.com/rust-lang/rust/commit/e4b9f86054c581d931f8bad0c87523c53e1e8e3f"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "872fec3954b2999a1c36738c8430fbcd33d154f4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -557,7 +557,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             check_opaque(tcx, id);\n         }\n         DefKind::ImplTraitPlaceholder => {\n-            let parent = tcx.impl_trait_in_trait_parent(id.owner_id.to_def_id());\n+            let parent = tcx.impl_trait_in_trait_parent_fn(id.owner_id.to_def_id());\n             // Only check the validity of this opaque type if the function has a default body\n             if let hir::Node::TraitItem(hir::TraitItem {\n                 kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),"}, {"sha": "eab5cae9f26f6e086ff18037be403a59b445b284", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -1550,7 +1550,7 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n                 && let ty::Alias(ty::Opaque, proj) = ty.kind()\n                 && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n-                && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n+                && tcx.impl_trait_in_trait_parent_fn(proj.def_id) == fn_def_id.to_def_id()\n             {\n                 let span = tcx.def_span(proj.def_id);\n                 let bounds = wfcx.tcx().explicit_item_bounds(proj.def_id);"}, {"sha": "c778574b2c57b15d59070f3f6ba9c18cc78325e4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -1028,7 +1028,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::InlineConst => true,\n \n         DefKind::ImplTraitPlaceholder => {\n-            let parent_def_id = tcx.impl_trait_in_trait_parent(def_id.to_def_id());\n+            let parent_def_id = tcx.impl_trait_in_trait_parent_fn(def_id.to_def_id());\n             let assoc_item = tcx.associated_item(parent_def_id);\n             match assoc_item.container {\n                 // Always encode an RPIT in an impl fn, since it always has a body"}, {"sha": "71bd4be66500df92a861ee38baea78faa9f0c9d1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -2552,7 +2552,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n     }\n \n-    pub fn impl_trait_in_trait_parent(self, mut def_id: DefId) -> DefId {\n+    pub fn impl_trait_in_trait_parent_fn(self, mut def_id: DefId) -> DefId {\n         while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n             debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n             def_id = self.parent(def_id);"}, {"sha": "4c606b939b25ed0b0eb88998a178c0ca943f71e6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -1288,7 +1288,7 @@ impl<'tcx> AliasTy<'tcx> {\n         match tcx.def_kind(self.def_id) {\n             DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.def_id),\n             DefKind::ImplTraitPlaceholder => {\n-                tcx.parent(tcx.impl_trait_in_trait_parent(self.def_id))\n+                tcx.parent(tcx.impl_trait_in_trait_parent_fn(self.def_id))\n             }\n             kind => bug!(\"expected a projection AliasTy; found {kind:?}\"),\n         }"}, {"sha": "cd67644589846dc071bf2c3bdaf97257e103054f", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -132,7 +132,7 @@ where\n                 projection.trait_ref_and_own_substs(tcx)\n             } else {\n                 // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n+                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n                 let trait_generics = tcx.generics_of(def_id);\n                 (\n                     tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),"}, {"sha": "4a439134d8abd3c852cb2e17b5d17bc0f50265f8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -1295,7 +1295,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n-        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -2193,7 +2193,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     let tcx = selcx.tcx();\n     let mut obligations = data.nested;\n \n-    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n     let leaf_def = match specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) {\n         Ok(assoc_ty) => assoc_ty,\n         Err(guar) => return Progress::error(tcx, guar),"}, {"sha": "aba8f49b691c8e20b7ba023297a508dcbb2ad4db", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -244,7 +244,7 @@ fn associated_item_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let fn_def_id = tcx.impl_trait_in_trait_parent_fn(opaque_ty_def_id.to_def_id());\n     let trait_def_id = tcx.parent(fn_def_id);\n     assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n "}, {"sha": "7512663a9fb8ae8b7d8d922718ee4d7d9eccf20d", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=26c4c1ea97d16863dbbaf2688d5dc7ce1ca3680b", "patch": "@@ -269,7 +269,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n             && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n-            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {\n             // We have entered some binders as we've walked into the"}]}