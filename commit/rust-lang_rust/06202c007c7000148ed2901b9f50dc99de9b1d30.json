{"sha": "06202c007c7000148ed2901b9f50dc99de9b1d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjAyYzAwN2M3MDAwMTQ4ZWQyOTAxYjlmNTBkYzk5ZGU5YjFkMzA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-17T17:23:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-17T17:23:52Z"}, "message": "Fix some 2018 edition idioms", "tree": {"sha": "9e5bcac8a2b2953c6dcbe7cc7f66c011e610b20e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5bcac8a2b2953c6dcbe7cc7f66c011e610b20e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06202c007c7000148ed2901b9f50dc99de9b1d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06202c007c7000148ed2901b9f50dc99de9b1d30", "html_url": "https://github.com/rust-lang/rust/commit/06202c007c7000148ed2901b9f50dc99de9b1d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06202c007c7000148ed2901b9f50dc99de9b1d30/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16334be18e50be2a66675a860e4d600c288ff34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/16334be18e50be2a66675a860e4d600c288ff34c", "html_url": "https://github.com/rust-lang/rust/commit/16334be18e50be2a66675a860e4d600c288ff34c"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "ba1eda7148fd079bf95f34454ae9234c8903c94c", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -63,7 +63,7 @@ pub fn codegen(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind)\n         ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig.clone());\n         {\n             let mut func_ctx = FunctionBuilderContext::new();\n-            let mut bcx: FunctionBuilder = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+            let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n \n             let ebb = bcx.create_ebb();\n             bcx.switch_to_block(ebb);"}, {"sha": "d3cbe93b722bbe794b4a74bce8eb3fc73a09eb12", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -2,7 +2,7 @@ use crate::prelude::*;\n \n use rustc::mir::StatementKind::*;\n \n-bitflags! {\n+bitflags::bitflags! {\n     pub struct Flags: u8 {\n         const NOT_SSA = 0b00000001;\n     }"}, {"sha": "5607df488382215318ff4d8e132b8439041b30fb", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -74,7 +74,7 @@ fn trans_fn<'a, 'tcx: 'a>(\n     // Step 3. Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n     let mut func_ctx = FunctionBuilderContext::new();\n-    let mut bcx: FunctionBuilder = FunctionBuilder::new(&mut func, &mut func_ctx);\n+    let mut bcx = FunctionBuilder::new(&mut func, &mut func_ctx);\n \n     // Step 4. Predefine ebb's\n     let start_ebb = bcx.create_ebb();"}, {"sha": "02e04f0d3eb9e1eb8d18d0db828a59b50ee24689", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -603,7 +603,7 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n     }\n }\n \n-pub struct FunctionCx<'a, 'tcx: 'a, B: Backend + 'a> {\n+pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n     pub pointer_type: Type, // Cached from module"}, {"sha": "9f81cebccafa958a00c5a8fbd803ba79d541c588", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -7,32 +7,17 @@\n )]\n #![allow(intra_doc_link_resolution_failure)]\n \n-extern crate byteorder;\n extern crate syntax;\n-#[macro_use]\n extern crate rustc;\n extern crate rustc_allocator;\n extern crate rustc_codegen_utils;\n extern crate rustc_incremental;\n extern crate rustc_mir;\n extern crate rustc_target;\n-#[macro_use]\n extern crate rustc_data_structures;\n extern crate rustc_fs_util;\n-#[macro_use]\n extern crate log;\n \n-extern crate ar;\n-#[macro_use]\n-extern crate bitflags;\n-extern crate faerie;\n-//extern crate goblin;\n-extern crate cranelift;\n-extern crate cranelift_faerie;\n-extern crate cranelift_module;\n-extern crate cranelift_simplejit;\n-extern crate target_lexicon;\n-\n use std::any::Any;\n use std::fs::File;\n use std::sync::mpsc;\n@@ -84,6 +69,7 @@ mod prelude {\n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use syntax::source_map::DUMMY_SP;\n \n+    pub use rustc::bug;\n     pub use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n     pub use rustc::mir::{self, interpret::AllocId, *};\n     pub use rustc::session::{\n@@ -291,7 +277,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         }\n     }\n \n-    fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n+    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n         Box::new(crate::metadata::CraneliftMetadataLoader)\n     }\n \n@@ -308,8 +294,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        _rx: mpsc::Receiver<Box<Any + Send>>,\n-    ) -> Box<Any> {\n+        _rx: mpsc::Receiver<Box<dyn Any + Send>>,\n+    ) -> Box<dyn Any> {\n         if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n             && std::env::var(\"SHOULD_RUN\").is_ok()\n         {\n@@ -436,7 +422,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n     fn join_codegen_and_link(\n         &self,\n-        res: Box<Any>,\n+        res: Box<dyn Any>,\n         sess: &Session,\n         _dep_graph: &DepGraph,\n         outputs: &OutputFilenames,\n@@ -512,6 +498,6 @@ fn save_incremental<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n-pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n+pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n     Box::new(CraneliftCodegenBackend)\n }"}, {"sha": "2bec64612aaae4aab0196ab33418a38d498e2631", "filename": "src/link_copied.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Flink_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Flink_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink_copied.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -9,6 +9,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Output, Stdio};\n \n use cc::windows_registry;\n+use log::info;\n \n use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;"}, {"sha": "c9cdb44d87d17f93b88601f851e295d71aefdb4f", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06202c007c7000148ed2901b9f50dc99de9b1d30/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=06202c007c7000148ed2901b9f50dc99de9b1d30", "patch": "@@ -1,5 +1,6 @@\n use rustc::middle::cstore::MetadataLoader;\n use rustc_data_structures::owning_ref::{self, OwningRef};\n+use rustc_data_structures::rustc_erase_owner;\n use std::fs::File;\n use std::path::Path;\n "}]}