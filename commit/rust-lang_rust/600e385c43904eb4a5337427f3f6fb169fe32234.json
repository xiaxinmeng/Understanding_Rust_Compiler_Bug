{"sha": "600e385c43904eb4a5337427f3f6fb169fe32234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMGUzODVjNDM5MDRlYjRhNTMzNzQyN2YzZjZmYjE2OWZlMzIyMzQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-24T22:03:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-24T22:03:35Z"}, "message": "review comments", "tree": {"sha": "8c2a87c00553f2003d66de01ecc8191bcbd93e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c2a87c00553f2003d66de01ecc8191bcbd93e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/600e385c43904eb4a5337427f3f6fb169fe32234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/600e385c43904eb4a5337427f3f6fb169fe32234", "html_url": "https://github.com/rust-lang/rust/commit/600e385c43904eb4a5337427f3f6fb169fe32234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/600e385c43904eb4a5337427f3f6fb169fe32234/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d493dccef7ae1d2ca739fe828bf9556b44dc460a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d493dccef7ae1d2ca739fe828bf9556b44dc460a", "html_url": "https://github.com/rust-lang/rust/commit/d493dccef7ae1d2ca739fe828bf9556b44dc460a"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "b2aec78c175adbd05d4cac88545ae523f230aa1d", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=600e385c43904eb4a5337427f3f6fb169fe32234", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // Visit to make sure there's a single `return` type to suggest `impl Trait`,\n         // otherwise suggest using `Box<dyn Trait>` or an enum.\n-        let mut visitor = ReturnsVisitor::new();\n+        let mut visitor = ReturnsVisitor::default();\n         visitor.visit_body(&body);\n \n         let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n@@ -742,7 +742,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         {\n             let body = hir.body(*body_id);\n             // Point at all the `return`s in the function as they have failed trait bounds.\n-            let mut visitor = ReturnsVisitor::new();\n+            let mut visitor = ReturnsVisitor::default();\n             visitor.visit_body(&body);\n             let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n             for expr in &visitor.returns {\n@@ -1696,17 +1696,12 @@ pub fn suggest_constraining_type_param(\n \n /// Collect all the returned expressions within the input expression.\n /// Used to point at the return spans when we want to suggest some change to them.\n+#[derive(Default)]\n struct ReturnsVisitor<'v> {\n     returns: Vec<&'v hir::Expr<'v>>,\n     in_block_tail: bool,\n }\n \n-impl ReturnsVisitor<'_> {\n-    fn new() -> Self {\n-        ReturnsVisitor { returns: vec![], in_block_tail: false }\n-    }\n-}\n-\n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     type Map = rustc::hir::map::Map<'v>;\n \n@@ -1715,6 +1710,10 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     }\n \n     fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+        // Visit every expression to detect `return` paths, either through the function's tail\n+        // expression or `return` statements. We walk all nodes to find `return` statements, but\n+        // we only care about tail expressions when `in_block_tail` is `true`, which means that\n+        // they're in the return path of the function body.\n         match ex.kind {\n             hir::ExprKind::Ret(Some(ex)) => {\n                 self.returns.push(ex);\n@@ -1741,7 +1740,7 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     }\n \n     fn visit_body(&mut self, body: &'v hir::Body<'v>) {\n-        let prev = self.in_block_tail;\n+        assert!(!self.in_block_tail);\n         if body.generator_kind().is_none() {\n             if let hir::ExprKind::Block(block, None) = body.value.kind {\n                 if block.expr.is_some() {\n@@ -1750,6 +1749,5 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n             }\n         }\n         hir::intravisit::walk_body(self, body);\n-        self.in_block_tail = prev;\n     }\n }"}, {"sha": "b62e4223fea10e6780e019f40dab56827d7decba", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=600e385c43904eb4a5337427f3f6fb169fe32234", "patch": "@@ -461,7 +461,7 @@ pub const MAX_HIGHLIGHT_LINES: usize = 6;\n /// Maximum number of lines we will print for a multiline suggestion; arbitrary.\n ///\n /// This should be replaced with a more involved mechanism to output multiline suggestions that\n-/// more closely mimmics the regular diagnostic output, where irrelevant code lines are ellided.\n+/// more closely mimmics the regular diagnostic output, where irrelevant code lines are elided.\n pub const MAX_SUGGESTION_HIGHLIGHT_LINES: usize = 20;\n /// Maximum number of suggestions to be shown\n ///"}, {"sha": "ca8319aa020dceea3f35a462540de4f30b896ec1", "filename": "src/test/ui/error-codes/E0746.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Ftest%2Fui%2Ferror-codes%2FE0746.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Ftest%2Fui%2Ferror-codes%2FE0746.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.fixed?ref=600e385c43904eb4a5337427f3f6fb169fe32234", "patch": "@@ -10,9 +10,9 @@ fn foo() -> impl Trait { Struct }\n \n fn bar() -> impl Trait { //~ ERROR E0746\n     if true {\n-        return 0u32;\n+        return 0;\n     }\n-    42u32\n+    42\n }\n \n fn main() {}"}, {"sha": "bf5ba8fff562a81ef091917b380e301f5255cac2", "filename": "src/test/ui/error-codes/E0746.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs?ref=600e385c43904eb4a5337427f3f6fb169fe32234", "patch": "@@ -10,9 +10,9 @@ fn foo() -> dyn Trait { Struct }\n \n fn bar() -> dyn Trait { //~ ERROR E0746\n     if true {\n-        return 0u32;\n+        return 0;\n     }\n-    42u32\n+    42\n }\n \n fn main() {}"}, {"sha": "e7a8fd304cabee33798925753507c153e2a49965", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600e385c43904eb4a5337427f3f6fb169fe32234/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=600e385c43904eb4a5337427f3f6fb169fe32234", "patch": "@@ -17,7 +17,7 @@ LL | fn bar() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `u32`, which implements `Trait`\n+help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bar() -> impl Trait {\n    |             ^^^^^^^^^^"}]}