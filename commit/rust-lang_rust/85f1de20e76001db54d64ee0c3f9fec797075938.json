{"sha": "85f1de20e76001db54d64ee0c3f9fec797075938", "node_id": "C_kwDOAAsO6NoAKDg1ZjFkZTIwZTc2MDAxZGI1NGQ2NGVlMGMzZjlmZWM3OTcwNzU5Mzg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-20T12:56:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T12:56:38Z"}, "message": "Rollup merge of #97149 - ChrisDenton:win_async_pipes, r=m-ou-se\n\nWindows: `CommandExt::async_pipes`\n\nDiscussed in https://github.com/tokio-rs/tokio/issues/4670 was the need for third party crates to be able to force `process::Command::spawn` to create pipes as async.\n\nThis implements the suggestion for a `async_pipes` method that gives third party crates that option.\n\n# Example:\n\n```rust\nuse std::process::{Command, Stdio};\n\nCommand::new(\"cmd\")\n    .async_pipes(true)\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .stderr(Stdio::piped())\n    .spawn()\n    .unwrap();\n```", "tree": {"sha": "a3a48b7d1e82a50ff787ec06c0e055becfd09981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a48b7d1e82a50ff787ec06c0e055becfd09981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85f1de20e76001db54d64ee0c3f9fec797075938", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisG6GCRBK7hj4Ov3rIwAAWN8IACxooihw99aApXN18vMnEACq\nCjaC3c0SDYbzkoIdjvBFrbf3Z2XLMS9tL8sthDiMBrfB24J/Yri1W461bCfIlgtO\n2irvGmCo/5B/jO3xabqgQBCFI6oFLnf7X4tni+Z/uniFm9VnoxwQTk9z0On5tuzh\nFzgoL/LKk7HPtUizFeVle6fVL6kGhCqwQp4q8hzq6QvLLrNmgh72G1Kh9Alh15dj\nXSLsQsyheATlqi9GhU1ZhqXSGXaT2M8xEEGgYVSalivezhKBtGGG2F/M/0dUnsrq\nOPfAO3xsIKsx1i4PLHK7QXK60KJoKQyPE6INq4GpOhcZJADklTz+dwZEdHdU3JQ=\n=d8Iq\n-----END PGP SIGNATURE-----\n", "payload": "tree a3a48b7d1e82a50ff787ec06c0e055becfd09981\nparent 625c929a9fecc7fbaf7142faaab787ba8125a62f\nparent 740a54c69b1c426c2b08329ea278140eb0059d42\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655729798 +0200\ncommitter GitHub <noreply@github.com> 1655729798 +0200\n\nRollup merge of #97149 - ChrisDenton:win_async_pipes, r=m-ou-se\n\nWindows: `CommandExt::async_pipes`\n\nDiscussed in https://github.com/tokio-rs/tokio/issues/4670 was the need for third party crates to be able to force `process::Command::spawn` to create pipes as async.\n\nThis implements the suggestion for a `async_pipes` method that gives third party crates that option.\n\n# Example:\n\n```rust\nuse std::process::{Command, Stdio};\n\nCommand::new(\"cmd\")\n    .async_pipes(true)\n    .stdin(Stdio::piped())\n    .stdout(Stdio::piped())\n    .stderr(Stdio::piped())\n    .spawn()\n    .unwrap();\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85f1de20e76001db54d64ee0c3f9fec797075938", "html_url": "https://github.com/rust-lang/rust/commit/85f1de20e76001db54d64ee0c3f9fec797075938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85f1de20e76001db54d64ee0c3f9fec797075938/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625c929a9fecc7fbaf7142faaab787ba8125a62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/625c929a9fecc7fbaf7142faaab787ba8125a62f", "html_url": "https://github.com/rust-lang/rust/commit/625c929a9fecc7fbaf7142faaab787ba8125a62f"}, {"sha": "740a54c69b1c426c2b08329ea278140eb0059d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/740a54c69b1c426c2b08329ea278140eb0059d42", "html_url": "https://github.com/rust-lang/rust/commit/740a54c69b1c426c2b08329ea278140eb0059d42"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "a6b75493e6e6000837853df23f5b9a396b46b0c3", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85f1de20e76001db54d64ee0c3f9fec797075938/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f1de20e76001db54d64ee0c3f9fec797075938/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=85f1de20e76001db54d64ee0c3f9fec797075938", "patch": "@@ -161,6 +161,37 @@ pub trait CommandExt: Sealed {\n     /// `CommandLineToArgvW` escaping rules.\n     #[stable(feature = \"windows_process_extensions_raw_arg\", since = \"1.62.0\")]\n     fn raw_arg<S: AsRef<OsStr>>(&mut self, text_to_append_as_is: S) -> &mut process::Command;\n+\n+    /// When [`process::Command`] creates pipes, request that our side is always async.\n+    ///\n+    /// By default [`process::Command`] may choose to use pipes where both ends\n+    /// are opened for synchronous read or write operations. By using\n+    /// `async_pipes(true)`, this behavior is overridden so that our side is\n+    /// always async.\n+    ///\n+    /// This is important because if doing async I/O a pipe or a file has to be\n+    /// opened for async access.\n+    ///\n+    /// The end of the pipe sent to the child process will always be synchronous\n+    /// regardless of this option.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(windows_process_extensions_async_pipes)]\n+    /// use std::os::windows::process::CommandExt;\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// # let program = \"\";\n+    ///\n+    /// Command::new(program)\n+    ///     .async_pipes(true)\n+    ///     .stdin(Stdio::piped())\n+    ///     .stdout(Stdio::piped())\n+    ///     .stderr(Stdio::piped());\n+    /// ```\n+    #[unstable(feature = \"windows_process_extensions_async_pipes\", issue = \"98289\")]\n+    fn async_pipes(&mut self, always_async: bool) -> &mut process::Command;\n }\n \n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n@@ -179,6 +210,15 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().raw_arg(raw_text.as_ref());\n         self\n     }\n+\n+    fn async_pipes(&mut self, always_async: bool) -> &mut process::Command {\n+        // FIXME: This currently has an intentional no-op implementation.\n+        // For the time being our side of the pipes will always be async.\n+        // Once the ecosystem has adjusted, we may then be able to start making\n+        // use of synchronous pipes within the standard library.\n+        let _ = always_async;\n+        self\n+    }\n }\n \n #[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]"}]}