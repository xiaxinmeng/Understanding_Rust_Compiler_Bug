{"sha": "4c934df45f6daf0076258fae3d5a6e1d3ccae5b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTM0ZGY0NWY2ZGFmMDA3NjI1OGZhZTNkNWE2ZTFkM2NjYWU1YjY=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-30T16:38:12Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-30T16:38:12Z"}, "message": "Properly evaluate non-consts in const prop", "tree": {"sha": "18d7f0655adc12422b5453a57e4f97aa28122096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d7f0655adc12422b5453a57e4f97aa28122096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c934df45f6daf0076258fae3d5a6e1d3ccae5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c934df45f6daf0076258fae3d5a6e1d3ccae5b6", "html_url": "https://github.com/rust-lang/rust/commit/4c934df45f6daf0076258fae3d5a6e1d3ccae5b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c934df45f6daf0076258fae3d5a6e1d3ccae5b6/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f227945f141deb0ae1540b0439cd8330d4df454", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f227945f141deb0ae1540b0439cd8330d4df454", "html_url": "https://github.com/rust-lang/rust/commit/9f227945f141deb0ae1540b0439cd8330d4df454"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "c6a193ba446318644d884d51cbc8f1a59246a852", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4c934df45f6daf0076258fae3d5a6e1d3ccae5b6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c934df45f6daf0076258fae3d5a6e1d3ccae5b6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=4c934df45f6daf0076258fae3d5a6e1d3ccae5b6", "patch": "@@ -393,8 +393,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             .filter(|ret_layout| {\n                 !ret_layout.is_zst() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n             })\n-            // hopefully all types will allocate, since large types have already been removed\n-            .and_then(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack).ok())\n+            .and_then(|ret_layout| {\n+                let alloc = ecx.allocate(ret_layout, MemoryKind::Stack);\n+                Self::check_interpresult(tcx, &alloc);\n+                alloc.ok()\n+            })\n             .map(Into::into);\n \n         ecx.push_stack_frame(\n@@ -418,11 +421,27 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n+    /// Some `InterpError`s could be ignored but must not be to ensure that queries are stable.\n+    fn check_interpresult<T>(tcx: TyCtxt<'tcx>, error: &InterpResult<'tcx, T>) {\n+        if let Err(e) = error {\n+            if matches!(\n+                e.kind(),\n+                InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n+            ) {\n+                // Memory errors can't be ignored since otherwise the amount of available\n+                // memory influences the result of optimization and the build. The error\n+                // doesn't need to be fatal since no code will actually be generated anyways.\n+                tcx.sess.fatal(\"memory exhausted during optimization\");\n+            }\n+        }\n+    }\n+\n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n         let op = match self.ecx.eval_place_to_op(place, None) {\n             Ok(op) => op,\n             Err(e) => {\n                 trace!(\"get_const failed: {}\", e);\n+                Self::check_interpresult::<()>(self.tcx, &Err(e));\n                 return None;\n             }\n         };\n@@ -524,7 +543,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Returns the value, if any, of evaluating `place`.\n     fn eval_place(&mut self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n-        self.use_ecx(|this| this.ecx.eval_place_to_op(place, None))\n+        let tcx = self.tcx;\n+        self.use_ecx(|this| {\n+            let val = this.ecx.eval_place_to_op(place, None);\n+            Self::check_interpresult(tcx, &val);\n+            val\n+        })\n     }\n \n     /// Returns the value, if any, of evaluating `op`. Calls upon `eval_constant`\n@@ -585,8 +609,17 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         right: &Operand<'tcx>,\n         source_info: SourceInfo,\n     ) -> Option<()> {\n-        let r = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(right, None)?));\n-        let l = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?));\n+        let tcx = self.tcx;\n+        let r = self.use_ecx(|this| {\n+            let val = this.ecx.read_immediate(&this.ecx.eval_operand(right, None)?);\n+            Self::check_interpresult(tcx, &val);\n+            val\n+        });\n+        let l = self.use_ecx(|this| {\n+            let val = this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?);\n+            Self::check_interpresult(tcx, &val);\n+            val\n+        });\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n         if op == BinOp::Shr || op == BinOp::Shl {\n             let r = r?;\n@@ -752,18 +785,24 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         rvalue: &Rvalue<'tcx>,\n         place: Place<'tcx>,\n     ) -> Option<()> {\n+        let tcx = self.tcx;\n         self.use_ecx(|this| {\n             match rvalue {\n                 Rvalue::BinaryOp(op, box (left, right))\n                 | Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n                     let l = this.ecx.eval_operand(left, None);\n                     let r = this.ecx.eval_operand(right, None);\n+                    Self::check_interpresult(tcx, &l);\n+                    Self::check_interpresult(tcx, &r);\n \n                     let const_arg = match (l, r) {\n                         (Ok(ref x), Err(_)) | (Err(_), Ok(ref x)) => this.ecx.read_immediate(x)?,\n                         (Err(e), Err(_)) => return Err(e),\n                         (Ok(_), Ok(_)) => {\n-                            this.ecx.eval_rvalue_into_place(rvalue, place)?;\n+                            Self::check_interpresult(\n+                                tcx,\n+                                &this.ecx.eval_rvalue_into_place(rvalue, place),\n+                            );\n                             return Ok(());\n                         }\n                     };\n@@ -799,12 +838,16 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            this.ecx.eval_rvalue_into_place(rvalue, place)?;\n+                            let res = this.ecx.eval_rvalue_into_place(rvalue, place);\n+                            Self::check_interpresult(tcx, &res);\n+                            res?\n                         }\n                     }\n                 }\n                 _ => {\n-                    this.ecx.eval_rvalue_into_place(rvalue, place)?;\n+                    let res = this.ecx.eval_rvalue_into_place(rvalue, place);\n+                    Self::check_interpresult(tcx, &res);\n+                    res?\n                 }\n             }\n "}]}