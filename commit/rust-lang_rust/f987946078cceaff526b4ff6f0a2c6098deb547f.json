{"sha": "f987946078cceaff526b4ff6f0a2c6098deb547f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODc5NDYwNzhjY2VhZmY1MjZiNGZmNmYwYTJjNjA5OGRlYjU0N2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-20T01:51:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-20T01:51:53Z"}, "message": "Merge pull request #2161 from topecongiro/issue-1807\n\nImplement RFC style for match pattern", "tree": {"sha": "3f00f107a0a06b9b51ce0d34ff4a47d7f8db0c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f00f107a0a06b9b51ce0d34ff4a47d7f8db0c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f987946078cceaff526b4ff6f0a2c6098deb547f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaEjU5CRBK7hj4Ov3rIwAAdHIIAAzf8y8iAdTfnr+7HGF4sRxx\nQAAMAe3Y4emiWEqwPOSk6LyZk7D5YKCmPI8mjJn5oZvjjbPKmNYvt3fNGfNNgL5/\nGM/90dZv39ba8hT2zFt6qkvH6gvoGeybpc1sA1A7nnCN1rw4tVWQS6Z1ml2b1n3K\naYflb4D4eqa4UEvp52ye2nSqZtj/VrpBz8EDpLkxKwKmkV0i2f1k366hcl7BsOSd\nAjn7eWD2xFMtb5utTswAFoGs80psRURwBl1aFGyJndtM4MzJ3nP9pSrU78l8pq8L\njII9vqIQbRhSLgk9rtNzaf4d3K1l2Mu4GrZkMmBlPL3r9Jo961OH+kJqpFQjcwI=\n=6qLU\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f00f107a0a06b9b51ce0d34ff4a47d7f8db0c90\nparent d230242e234cb81e8137177429732a548c024204\nparent 95d7619e345ac6fa997297af9565bfd44ef9e855\nauthor Nick Cameron <nrc@ncameron.org> 1511142713 +1300\ncommitter GitHub <noreply@github.com> 1511142713 +1300\n\nMerge pull request #2161 from topecongiro/issue-1807\n\nImplement RFC style for match pattern"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f987946078cceaff526b4ff6f0a2c6098deb547f", "html_url": "https://github.com/rust-lang/rust/commit/f987946078cceaff526b4ff6f0a2c6098deb547f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f987946078cceaff526b4ff6f0a2c6098deb547f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d230242e234cb81e8137177429732a548c024204", "url": "https://api.github.com/repos/rust-lang/rust/commits/d230242e234cb81e8137177429732a548c024204", "html_url": "https://github.com/rust-lang/rust/commit/d230242e234cb81e8137177429732a548c024204"}, {"sha": "95d7619e345ac6fa997297af9565bfd44ef9e855", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d7619e345ac6fa997297af9565bfd44ef9e855", "html_url": "https://github.com/rust-lang/rust/commit/95d7619e345ac6fa997297af9565bfd44ef9e855"}], "stats": {"total": 351, "additions": 206, "deletions": 145}, "files": [{"sha": "fdeb3cf428681e16d0765a40d3b37ac2588aef6d", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -164,13 +164,13 @@ enum TargetKind {\n impl TargetKind {\n     fn should_format(&self) -> bool {\n         match *self {\n-            TargetKind::Lib |\n-            TargetKind::Bin |\n-            TargetKind::Example |\n-            TargetKind::Test |\n-            TargetKind::Bench |\n-            TargetKind::CustomBuild |\n-            TargetKind::ProcMacro => true,\n+            TargetKind::Lib\n+            | TargetKind::Bin\n+            | TargetKind::Example\n+            | TargetKind::Test\n+            | TargetKind::Bench\n+            | TargetKind::CustomBuild\n+            | TargetKind::ProcMacro => true,\n             _ => false,\n         }\n     }"}, {"sha": "8a4b4257891050e94680b8c4cca147f46114d5ed", "filename": "src/chains.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -350,19 +350,19 @@ fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool\n         ast::ExprKind::Mac(..) | ast::ExprKind::Call(..) => {\n             context.use_block_indent() && repr.contains('\\n')\n         }\n-        ast::ExprKind::Struct(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) |\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::Block(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Match(..) => repr.contains('\\n'),\n-        ast::ExprKind::Paren(ref expr) |\n-        ast::ExprKind::Binary(_, _, ref expr) |\n-        ast::ExprKind::Index(_, ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) => is_block_expr(context, expr, repr),\n+        ast::ExprKind::Struct(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::Block(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Match(..) => repr.contains('\\n'),\n+        ast::ExprKind::Paren(ref expr)\n+        | ast::ExprKind::Binary(_, _, ref expr)\n+        | ast::ExprKind::Index(_, ref expr)\n+        | ast::ExprKind::Unary(_, ref expr) => is_block_expr(context, expr, repr),\n         _ => false,\n     }\n }\n@@ -396,9 +396,9 @@ fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext) -> Option<ast::Exp\n         ast::ExprKind::MethodCall(_, ref expressions) => {\n             Some(convert_try(&expressions[0], context))\n         }\n-        ast::ExprKind::TupField(ref subexpr, _) |\n-        ast::ExprKind::Field(ref subexpr, _) |\n-        ast::ExprKind::Try(ref subexpr) => Some(convert_try(subexpr, context)),\n+        ast::ExprKind::TupField(ref subexpr, _)\n+        | ast::ExprKind::Field(ref subexpr, _)\n+        | ast::ExprKind::Try(ref subexpr) => Some(convert_try(subexpr, context)),\n         _ => None,\n     }\n }"}, {"sha": "8290f1b09a13636b8f5554191bbef32a55500a1f", "filename": "src/closures.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -194,6 +194,7 @@ fn rewrite_closure_fn_decl(\n         context.codemap,\n         fn_decl.inputs.iter(),\n         \"|\",\n+        \",\",\n         |arg| span_lo_for_arg(arg),\n         |arg| span_hi_for_arg(context, arg),\n         |arg| arg.rewrite(context, arg_shape),\n@@ -328,17 +329,17 @@ where\n \n fn is_block_closure_forced(expr: &ast::Expr) -> bool {\n     match expr.node {\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) |\n-        ast::ExprKind::ForLoop(..) => true,\n-        ast::ExprKind::AddrOf(_, ref expr) |\n-        ast::ExprKind::Box(ref expr) |\n-        ast::ExprKind::Try(ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) |\n-        ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced(expr),\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::ForLoop(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced(expr),\n         _ => false,\n     }\n }"}, {"sha": "2511e5df216a6015646e72d658a09bc24eff7131", "filename": "src/comment.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -64,10 +64,10 @@ impl<'a> CommentStyle<'a> {\n \n     pub fn closer(&self) -> &'a str {\n         match *self {\n-            CommentStyle::DoubleSlash |\n-            CommentStyle::TripleSlash |\n-            CommentStyle::Custom(..) |\n-            CommentStyle::Doc => \"\",\n+            CommentStyle::DoubleSlash\n+            | CommentStyle::TripleSlash\n+            | CommentStyle::Custom(..)\n+            | CommentStyle::Doc => \"\",\n             CommentStyle::DoubleBullet => \" **/\",\n             CommentStyle::SingleBullet | CommentStyle::Exclamation => \" */\",\n         }\n@@ -648,9 +648,9 @@ enum FullCodeCharKind {\n impl FullCodeCharKind {\n     fn is_comment(&self) -> bool {\n         match *self {\n-            FullCodeCharKind::StartComment |\n-            FullCodeCharKind::InComment |\n-            FullCodeCharKind::EndComment => true,\n+            FullCodeCharKind::StartComment\n+            | FullCodeCharKind::InComment\n+            | FullCodeCharKind::EndComment => true,\n             _ => false,\n         }\n     }"}, {"sha": "9fbdfc2754b8cc4664ae6d4f5fd88b77f362cbc9", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -611,7 +611,7 @@ create_config! {\n         \"Force match arm bodies to be in a new lines\";\n     indent_match_arms: bool, true, false, \"Indent match arms instead of keeping them at the same \\\n                                     indentation level as the match keyword\";\n-    match_pattern_separator_break_point: SeparatorPlace, SeparatorPlace::Back, false,\n+    match_pattern_separator_break_point: SeparatorPlace, SeparatorPlace::Front, false,\n         \"Put a match sub-patterns' separator in front or back.\";\n     space_before_colon: bool, false, false, \"Leave a space before the colon\";\n     space_after_colon: bool, true, false, \"Leave a space after the colon\";"}, {"sha": "d3c3e760a2730ce7b1b07cc19ea723fdeb79d1a2", "filename": "src/expr.rs", "status": "modified", "additions": 77, "deletions": 33, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -99,12 +99,12 @@ pub fn format_expr(\n         ast::ExprKind::Tup(ref items) => {\n             rewrite_tuple(context, &ptr_vec_to_ref_vec(items), expr.span, shape)\n         }\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) => to_control_flow(expr, expr_type)\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..) => to_control_flow(expr, expr_type)\n             .and_then(|control_flow| control_flow.rewrite(context, shape)),\n         ast::ExprKind::Block(ref block) => {\n             match expr_type {\n@@ -161,10 +161,10 @@ pub fn format_expr(\n         ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n         }\n-        ast::ExprKind::Try(..) |\n-        ast::ExprKind::Field(..) |\n-        ast::ExprKind::TupField(..) |\n-        ast::ExprKind::MethodCall(..) => rewrite_chain(expr, context, shape),\n+        ast::ExprKind::Try(..)\n+        | ast::ExprKind::Field(..)\n+        | ast::ExprKind::TupField(..)\n+        | ast::ExprKind::MethodCall(..) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::Mac(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n@@ -430,6 +430,7 @@ where\n         context.codemap,\n         expr_iter,\n         \"]\",\n+        \",\",\n         |item| item.span.lo(),\n         |item| item.span.hi(),\n         |item| item.rewrite(context, nested_shape),\n@@ -1341,6 +1342,7 @@ fn rewrite_match_arms(\n             .zip(is_last_iter)\n             .map(|(arm, is_last)| ArmWrapper::new(arm, is_last)),\n         \"}\",\n+        \"|\",\n         |arm| arm.arm.span().lo(),\n         |arm| arm.arm.span().hi(),\n         |arm| arm.rewrite(context, arm_shape),\n@@ -1409,6 +1411,38 @@ fn rewrite_match_arm(\n     )\n }\n \n+/// Returns true if the given pattern is short. A short pattern is defined by the following grammer:\n+///\n+/// [small, ntp]:\n+///     - single token\n+///     - `&[single-line, ntp]`\n+///\n+/// [small]:\n+///     - `[small, ntp]`\n+///     - unary tuple constructor `([small, ntp])`\n+///     - `&[small]`\n+fn is_short_pattern(pat: &ast::Pat, pat_str: &str) -> bool {\n+    // We also require that the pattern is reasonably 'small' with its literal width.\n+    pat_str.len() <= 20 && !pat_str.contains(\"\\n\") && is_short_pattern_inner(pat)\n+}\n+\n+fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n+    match pat.node {\n+        ast::PatKind::Wild | ast::PatKind::Lit(_) => true,\n+        ast::PatKind::Ident(_, _, ref pat) => pat.is_none(),\n+        ast::PatKind::Struct(..)\n+        | ast::PatKind::Mac(..)\n+        | ast::PatKind::Slice(..)\n+        | ast::PatKind::Path(..)\n+        | ast::PatKind::Range(..) => false,\n+        ast::PatKind::Tuple(ref subpats, _) => subpats.len() <= 1,\n+        ast::PatKind::TupleStruct(ref path, ref subpats, _) => {\n+            path.segments.len() <= 1 && subpats.len() <= 1\n+        }\n+        ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) => is_short_pattern_inner(&*p),\n+    }\n+}\n+\n fn rewrite_match_pattern(\n     context: &RewriteContext,\n     pats: &[ptr::P<ast::Pat>],\n@@ -1423,13 +1457,20 @@ fn rewrite_match_pattern(\n         .map(|p| p.rewrite(context, pat_shape))\n         .collect::<Option<Vec<_>>>()?;\n \n+    let use_mixed_layout = pats.iter()\n+        .zip(pat_strs.iter())\n+        .all(|(pat, pat_str)| is_short_pattern(pat, pat_str));\n     let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n-    let tactic = definitive_tactic(\n-        &items,\n-        ListTactic::HorizontalVertical,\n-        Separator::VerticalBar,\n-        pat_shape.width,\n-    );\n+    let tactic = if use_mixed_layout {\n+        DefinitiveListTactic::Mixed\n+    } else {\n+        definitive_tactic(\n+            &items,\n+            ListTactic::HorizontalVertical,\n+            Separator::VerticalBar,\n+            pat_shape.width,\n+        )\n+    };\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \" |\",\n@@ -1874,6 +1915,7 @@ where\n         context.codemap,\n         args.iter(),\n         \")\",\n+        \",\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| item.rewrite(context, shape),\n@@ -2060,29 +2102,29 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n             (context.use_block_indent() && args_len == 1)\n                 || (context.config.indent_style() == IndentStyle::Visual && args_len > 1)\n         }\n-        ast::ExprKind::If(..) |\n-        ast::ExprKind::IfLet(..) |\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) => {\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..) => {\n             context.config.combine_control_expr() && context.use_block_indent() && args_len == 1\n         }\n         ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n             context.use_block_indent()\n                 || context.config.indent_style() == IndentStyle::Visual && args_len > 1\n         }\n-        ast::ExprKind::Array(..) |\n-        ast::ExprKind::Call(..) |\n-        ast::ExprKind::Mac(..) |\n-        ast::ExprKind::MethodCall(..) |\n-        ast::ExprKind::Struct(..) |\n-        ast::ExprKind::Tup(..) => context.use_block_indent() && args_len == 1,\n-        ast::ExprKind::AddrOf(_, ref expr) |\n-        ast::ExprKind::Box(ref expr) |\n-        ast::ExprKind::Try(ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) |\n-        ast::ExprKind::Cast(ref expr, _) => can_be_overflowed_expr(context, expr, args_len),\n+        ast::ExprKind::Array(..)\n+        | ast::ExprKind::Call(..)\n+        | ast::ExprKind::Mac(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Struct(..)\n+        | ast::ExprKind::Tup(..) => context.use_block_indent() && args_len == 1,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => can_be_overflowed_expr(context, expr, args_len),\n         _ => false,\n     }\n }\n@@ -2301,6 +2343,7 @@ fn rewrite_struct_lit<'a>(\n             context.codemap,\n             field_iter,\n             \"}\",\n+            \",\",\n             span_lo,\n             span_hi,\n             rewrite,\n@@ -2451,6 +2494,7 @@ where\n         context.codemap,\n         items,\n         \")\",\n+        \",\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| item.rewrite(context, nested_shape),"}, {"sha": "56d23fa98277ec372a55abdfe8b9cdf1a61e1173", "filename": "src/imports.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -27,9 +27,9 @@ use visitor::{rewrite_extern_crate, FmtVisitor};\n \n fn path_of(a: &ast::ViewPath_) -> &ast::Path {\n     match *a {\n-        ast::ViewPath_::ViewPathSimple(_, ref p) |\n-        ast::ViewPath_::ViewPathGlob(ref p) |\n-        ast::ViewPath_::ViewPathList(ref p, _) => p,\n+        ast::ViewPath_::ViewPathSimple(_, ref p)\n+        | ast::ViewPath_::ViewPathGlob(ref p)\n+        | ast::ViewPath_::ViewPathList(ref p, _) => p,\n     }\n }\n \n@@ -212,6 +212,7 @@ fn rewrite_imports(\n         context.codemap,\n         use_items.iter(),\n         \"\",\n+        \";\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| {\n@@ -366,10 +367,10 @@ impl<'a> ImportItem<'a> {\n \n     fn to_str(&self) -> Option<&str> {\n         match *self {\n-            ImportItem::SelfImport(s) |\n-            ImportItem::SnakeCase(s) |\n-            ImportItem::CamelCase(s) |\n-            ImportItem::AllCaps(s) => Some(s),\n+            ImportItem::SelfImport(s)\n+            | ImportItem::SnakeCase(s)\n+            | ImportItem::CamelCase(s)\n+            | ImportItem::AllCaps(s) => Some(s),\n             ImportItem::Invalid => None,\n         }\n     }\n@@ -442,6 +443,7 @@ fn rewrite_use_list(\n             context.codemap,\n             path_list.iter(),\n             \"}\",\n+            \",\",\n             |vpi| vpi.span.lo(),\n             |vpi| vpi.span.hi(),\n             rewrite_path_item,"}, {"sha": "3fe82f48ea53562bddf4dd1d9d47472076eb56bb", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -489,6 +489,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.codemap,\n                 enum_def.variants.iter(),\n                 \"}\",\n+                \",\",\n                 |f| if !f.node.attrs.is_empty() {\n                     f.node.attrs[0].span.lo()\n                 } else {\n@@ -2215,6 +2216,7 @@ fn rewrite_args(\n                 .map(ArgumentKind::Regular)\n                 .chain(variadic_arg),\n             \")\",\n+            \",\",\n             |arg| match *arg {\n                 ArgumentKind::Regular(arg) => span_lo_for_arg(arg),\n                 ArgumentKind::Variadic(start) => start,\n@@ -2436,6 +2438,7 @@ fn rewrite_generics_inner(\n         context.codemap,\n         generics_args,\n         \">\",\n+        \",\",\n         |arg| arg.span().lo(),\n         |arg| arg.span().hi(),\n         |arg| arg.rewrite(context, shape),\n@@ -2578,6 +2581,7 @@ fn rewrite_where_clause_rfc_style(\n         context.codemap,\n         where_clause.predicates.iter(),\n         terminator,\n+        \",\",\n         |pred| pred.span().lo(),\n         |pred| pred.span().hi(),\n         |pred| pred.rewrite(context, clause_shape),\n@@ -2691,6 +2695,7 @@ fn rewrite_where_clause(\n         context.codemap,\n         where_clause.predicates.iter(),\n         terminator,\n+        \",\",\n         |pred| pred.span().lo(),\n         |pred| pred.span().hi(),\n         |pred| pred.rewrite(context, Shape::legacy(budget, offset)),"}, {"sha": "b80d8d6541eb7a6334953760c5f248df1e891255", "filename": "src/lists.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -207,10 +207,18 @@ impl SeparatorPlace {\n         *self == SeparatorPlace::Back\n     }\n \n-    pub fn from_tactic(default: SeparatorPlace, tactic: DefinitiveListTactic) -> SeparatorPlace {\n+    pub fn from_tactic(\n+        default: SeparatorPlace,\n+        tactic: DefinitiveListTactic,\n+        sep: &str,\n+    ) -> SeparatorPlace {\n         match tactic {\n             DefinitiveListTactic::Vertical => default,\n-            _ => SeparatorPlace::Back,\n+            _ => if sep == \",\" {\n+                SeparatorPlace::Back\n+            } else {\n+                default\n+            },\n         }\n     }\n }\n@@ -269,7 +277,8 @@ where\n     let cloned_items = items.clone();\n     let mut iter = items.into_iter().enumerate().peekable();\n     let mut item_max_width: Option<usize> = None;\n-    let mut sep_place = SeparatorPlace::from_tactic(formatting.separator_place, tactic);\n+    let sep_place =\n+        SeparatorPlace::from_tactic(formatting.separator_place, tactic, formatting.separator);\n \n     let mut line_len = 0;\n     let indent_str = &formatting.shape.indent.to_string(formatting.config);\n@@ -278,7 +287,10 @@ where\n         let inner_item = item.item.as_ref()?;\n         let first = i == 0;\n         let last = iter.peek().is_none();\n-        let mut separate = !last || trailing_separator;\n+        let mut separate = match sep_place {\n+            SeparatorPlace::Front => !first,\n+            SeparatorPlace::Back => !last || trailing_separator,\n+        };\n         let item_sep_len = if separate { sep_len } else { 0 };\n \n         // Item string may be multi-line. Its length (used for block comment alignment)\n@@ -316,9 +328,6 @@ where\n                             trailing_separator = true;\n                         }\n                     }\n-                    sep_place = formatting.separator_place;\n-                } else {\n-                    sep_place = SeparatorPlace::Back;\n                 }\n \n                 if line_len > 0 {\n@@ -509,6 +518,7 @@ where\n     prev_span_end: BytePos,\n     next_span_start: BytePos,\n     terminator: &'a str,\n+    separator: &'a str,\n     leave_last: bool,\n }\n \n@@ -581,7 +591,7 @@ where\n                         }\n                     }\n                     let newline_index = post_snippet.find('\\n');\n-                    if let Some(separator_index) = post_snippet.find_uncommented(\",\") {\n+                    if let Some(separator_index) = post_snippet.find_uncommented(self.separator) {\n                         match (block_open_index, newline_index) {\n                             // Separator before comment, with the next item on same line.\n                             // Comment belongs to next item.\n@@ -677,6 +687,7 @@ pub fn itemize_list<'a, T, I, F1, F2, F3>(\n     codemap: &'a CodeMap,\n     inner: I,\n     terminator: &'a str,\n+    separator: &'a str,\n     get_lo: F1,\n     get_hi: F2,\n     get_item_string: F3,\n@@ -699,6 +710,7 @@ where\n         prev_span_end: prev_span_end,\n         next_span_start: next_span_start,\n         terminator: terminator,\n+        separator: separator,\n         leave_last: leave_last,\n     }\n }"}, {"sha": "f4bb59e5127ac69032d6b1ef9ac8d0faee91d29e", "filename": "src/patterns.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -151,6 +151,7 @@ fn rewrite_struct_pat(\n         context.codemap,\n         fields.iter(),\n         terminator,\n+        \",\",\n         |f| f.span.lo(),\n         |f| f.span.hi(),\n         |f| f.node.rewrite(context, v_shape),\n@@ -245,10 +246,10 @@ impl<'a> Spanned for TuplePatField<'a> {\n pub fn can_be_overflowed_pat(context: &RewriteContext, pat: &TuplePatField, len: usize) -> bool {\n     match *pat {\n         TuplePatField::Pat(pat) => match pat.node {\n-            ast::PatKind::Path(..) |\n-            ast::PatKind::Tuple(..) |\n-            ast::PatKind::Struct(..) |\n-            ast::PatKind::TupleStruct(..) => context.use_block_indent() && len == 1,\n+            ast::PatKind::Path(..)\n+            | ast::PatKind::Tuple(..)\n+            | ast::PatKind::Struct(..)\n+            | ast::PatKind::TupleStruct(..) => context.use_block_indent() && len == 1,\n             ast::PatKind::Ref(ref p, _) | ast::PatKind::Box(ref p) => {\n                 can_be_overflowed_pat(context, &TuplePatField::Pat(p), len)\n             }\n@@ -347,6 +348,7 @@ fn count_wildcard_suffix_len(\n         context.codemap,\n         patterns.iter(),\n         \")\",\n+        \",\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| item.rewrite(context, shape),"}, {"sha": "25bbd92b1089ae68043274891ba210b7205f3d09", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -231,6 +231,7 @@ fn rewrite_segment(\n                     context.codemap,\n                     param_list.into_iter(),\n                     \">\",\n+                    \",\",\n                     |param| param.get_span().lo(),\n                     |param| param.get_span().hi(),\n                     |seg| seg.rewrite(context, generics_shape),\n@@ -322,6 +323,7 @@ where\n             .map(|i| ArgumentKind::Regular(Box::new(i)))\n             .chain(variadic_arg),\n         \")\",\n+        \",\",\n         |arg| match *arg {\n             ArgumentKind::Regular(ref ty) => ty.span().lo(),\n             ArgumentKind::Variadic(start) => start,"}, {"sha": "d851dfda79dca7812f04ed450b06a0d2ad9226a7", "filename": "src/utils.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -240,10 +240,10 @@ pub fn semicolon_for_expr(context: &RewriteContext, expr: &ast::Expr) -> bool {\n pub fn semicolon_for_stmt(context: &RewriteContext, stmt: &ast::Stmt) -> bool {\n     match stmt.node {\n         ast::StmtKind::Semi(ref expr) => match expr.node {\n-            ast::ExprKind::While(..) |\n-            ast::ExprKind::WhileLet(..) |\n-            ast::ExprKind::Loop(..) |\n-            ast::ExprKind::ForLoop(..) => false,\n+            ast::ExprKind::While(..)\n+            | ast::ExprKind::WhileLet(..)\n+            | ast::ExprKind::Loop(..)\n+            | ast::ExprKind::ForLoop(..) => false,\n             ast::ExprKind::Break(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Ret(..) => {\n                 context.config.trailing_semicolon()\n             }\n@@ -450,18 +450,18 @@ pub fn paren_overhead(context: &RewriteContext) -> usize {\n \n pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n     match e.node {\n-        ast::ExprKind::InPlace(ref e, _) |\n-        ast::ExprKind::Call(ref e, _) |\n-        ast::ExprKind::Binary(_, ref e, _) |\n-        ast::ExprKind::Cast(ref e, _) |\n-        ast::ExprKind::Type(ref e, _) |\n-        ast::ExprKind::Assign(ref e, _) |\n-        ast::ExprKind::AssignOp(_, ref e, _) |\n-        ast::ExprKind::Field(ref e, _) |\n-        ast::ExprKind::TupField(ref e, _) |\n-        ast::ExprKind::Index(ref e, _) |\n-        ast::ExprKind::Range(Some(ref e), _, _) |\n-        ast::ExprKind::Try(ref e) => left_most_sub_expr(e),\n+        ast::ExprKind::InPlace(ref e, _)\n+        | ast::ExprKind::Call(ref e, _)\n+        | ast::ExprKind::Binary(_, ref e, _)\n+        | ast::ExprKind::Cast(ref e, _)\n+        | ast::ExprKind::Type(ref e, _)\n+        | ast::ExprKind::Assign(ref e, _)\n+        | ast::ExprKind::AssignOp(_, ref e, _)\n+        | ast::ExprKind::Field(ref e, _)\n+        | ast::ExprKind::TupField(ref e, _)\n+        | ast::ExprKind::Index(ref e, _)\n+        | ast::ExprKind::Range(Some(ref e), _, _)\n+        | ast::ExprKind::Try(ref e) => left_most_sub_expr(e),\n         _ => e,\n     }\n }"}, {"sha": "bb4bad7852e0432925ce229d9aa5742ee584dc65", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -231,6 +231,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         context.codemap,\n         fields.iter(),\n         \"}\",\n+        \",\",\n         |field| field.get_span().lo(),\n         |field| field.get_span().hi(),\n         |field| field.rewrite_aligned_item(context, item_shape, field_prefix_max_width),"}, {"sha": "79bade0cc20bb05d3be8792076313306f4c6acfd", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -750,6 +750,7 @@ impl Rewrite for ast::MetaItem {\n                     context.codemap,\n                     list.iter(),\n                     \")\",\n+                    \",\",\n                     |nested_meta_item| nested_meta_item.span.lo(),\n                     |nested_meta_item| nested_meta_item.span.hi(),\n                     |nested_meta_item| nested_meta_item.rewrite(context, item_shape),"}, {"sha": "08803e5db4e20d685b833a2d97c1afd8ccdcacdf", "filename": "tests/target/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -402,9 +402,9 @@ fn newlines_between_list_like_expr() {\n     ];\n \n     match x {\n-        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx |\n-        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyy |\n-        zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz => foo(a, b, c),\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+        | yyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n+        | zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz => foo(a, b, c),\n         _ => bar(),\n     };\n }"}, {"sha": "0430cc6295485ba73e234e725418c02ab2157fb1", "filename": "tests/target/issue-855.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/tests%2Ftarget%2Fissue-855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/tests%2Ftarget%2Fissue-855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-855.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -2,8 +2,8 @@ fn main() {\n     'running: loop {\n         for event in event_pump.poll_iter() {\n             match event {\n-                Event::Quit { .. } |\n-                Event::KeyDown {\n+                Event::Quit { .. }\n+                | Event::KeyDown {\n                     keycode: Some(Keycode::Escape),\n                     ..\n                 } => break 'running,\n@@ -16,8 +16,8 @@ fn main2() {\n     'running: loop {\n         for event in event_pump.poll_iter() {\n             match event {\n-                Event::Quit { .. } |\n-                Event::KeyDownXXXXXXXXXXXXX {\n+                Event::Quit { .. }\n+                | Event::KeyDownXXXXXXXXXXXXX {\n                     keycode: Some(Keycode::Escape),\n                     ..\n                 } => break 'running,"}, {"sha": "a14aadf0862c913639b012da90cb724667e38152", "filename": "tests/target/match.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f987946078cceaff526b4ff6f0a2c6098deb547f/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f987946078cceaff526b4ff6f0a2c6098deb547f/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=f987946078cceaff526b4ff6f0a2c6098deb547f", "patch": "@@ -17,12 +17,12 @@ fn foo() {\n             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n         }\n         Pattern1 | Pattern2 | Pattern3 => false,\n-        Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn |\n-        Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => blah,\n-        Patternnnnnnnnnnnnnnnnnnn |\n-        Patternnnnnnnnnnnnnnnnnnn |\n-        Patternnnnnnnnnnnnnnnnnnn |\n-        Patternnnnnnnnnnnnnnnnnnn => meh,\n+        Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\n+        | Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => blah,\n+        Patternnnnnnnnnnnnnnnnnnn\n+        | Patternnnnnnnnnnnnnnnnnnn\n+        | Patternnnnnnnnnnnnnnnnnnn\n+        | Patternnnnnnnnnnnnnnnnnnn => meh,\n \n         Patternnnnnnnnnnnnnnnnnnn | Patternnnnnnnnnnnnnnnnnnn if looooooooooooooooooong_guard => {\n             meh\n@@ -35,8 +35,9 @@ fn foo() {\n         }\n \n         // Test that earlier patterns can take the guard space\n-        (aaaa, bbbbb, ccccccc, aaaaa, bbbbbbbb, cccccc, aaaa, bbbbbbbb, cccccc, dddddd) |\n-        Patternnnnnnnnnnnnnnnnnnnnnnnnn if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n+        (aaaa, bbbbb, ccccccc, aaaaa, bbbbbbbb, cccccc, aaaa, bbbbbbbb, cccccc, dddddd)\n+        | Patternnnnnnnnnnnnnnnnnnnnnnnnn\n+            if loooooooooooooooooooooooooooooooooooooooooong_guard => {}\n \n         _ => {}\n         ast::PathParameters::AngleBracketedParameters(ref data)\n@@ -299,27 +300,17 @@ fn issue494() {\n fn issue386() {\n     match foo {\n         BiEq | BiLt | BiLe | BiNe | BiGt | BiGe => true,\n-        BiAnd |\n-        BiOr |\n-        BiAdd |\n-        BiSub |\n-        BiMul |\n-        BiDiv |\n-        BiRem |\n-        BiBitXor |\n-        BiBitAnd |\n-        BiBitOr |\n-        BiShl |\n-        BiShr => false,\n+        BiAnd | BiOr | BiAdd | BiSub | BiMul | BiDiv | BiRem | BiBitXor | BiBitAnd | BiBitOr\n+        | BiShl | BiShr => false,\n     }\n }\n \n fn guards() {\n     match foo {\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n             if foooooooooooooo && barrrrrrrrrrrr => {}\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n             if foooooooooooooo && barrrrrrrrrrrr => {}\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n             if fooooooooooooooooooooo\n@@ -438,12 +429,12 @@ fn match_with_near_max_width() {\n         _ => unimplemented!(),\n     };\n     match m {\n-        Variant::Tag |\n-        Variant::Tag2 |\n-        Variant::Tag3 |\n-        Variant::Tag4 |\n-        Variant::Tag5 |\n-        Variant::Tag6 => {}\n+        Variant::Tag\n+        | Variant::Tag2\n+        | Variant::Tag3\n+        | Variant::Tag4\n+        | Variant::Tag5\n+        | Variant::Tag6 => {}\n     }\n }\n "}]}