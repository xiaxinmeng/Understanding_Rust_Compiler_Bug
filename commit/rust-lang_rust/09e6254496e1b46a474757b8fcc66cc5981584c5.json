{"sha": "09e6254496e1b46a474757b8fcc66cc5981584c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZTYyNTQ0OTZlMWI0NmE0NzQ3NTdiOGZjYzY2Y2M1OTgxNTg0YzU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:17Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:34Z"}, "message": "review, small cleanup", "tree": {"sha": "1845cd312141ef21bffd3c43a310610026ae4753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1845cd312141ef21bffd3c43a310610026ae4753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e6254496e1b46a474757b8fcc66cc5981584c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e6254496e1b46a474757b8fcc66cc5981584c5", "html_url": "https://github.com/rust-lang/rust/commit/09e6254496e1b46a474757b8fcc66cc5981584c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e6254496e1b46a474757b8fcc66cc5981584c5/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b275d08ad6299a1f9b31650ba906a18846d5461", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b275d08ad6299a1f9b31650ba906a18846d5461", "html_url": "https://github.com/rust-lang/rust/commit/1b275d08ad6299a1f9b31650ba906a18846d5461"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "6abe62759b6b8570b6e487411accc1db814717ae", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/09e6254496e1b46a474757b8fcc66cc5981584c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e6254496e1b46a474757b8fcc66cc5981584c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=09e6254496e1b46a474757b8fcc66cc5981584c5", "patch": "@@ -30,24 +30,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     span: Span,\n ) -> Result<(), ErrorHandled> {\n     debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n-    if infcx.tcx.features().const_evaluatable_checked {\n-        if let Some(ct) = AbstractConst::new(infcx.tcx, def, substs) {\n-            for pred in param_env.caller_bounds() {\n-                match pred.skip_binders() {\n-                    ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n-                        debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n-                        if b_def == def && b_substs == substs {\n-                            debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n-                            return Ok(());\n-                        } else if AbstractConst::new(infcx.tcx, b_def, b_substs)\n-                            .map_or(false, |b_ct| try_unify(infcx.tcx, ct, b_ct))\n-                        {\n-                            debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n-                            return Ok(());\n-                        }\n+    // `AbstractConst::new` already returns `None` if `const_evaluatable_checked`\n+    // is not active, so we don't have to explicitly check for this here.\n+    if let Some(ct) = AbstractConst::new(infcx.tcx, def, substs) {\n+        for pred in param_env.caller_bounds() {\n+            match pred.skip_binders() {\n+                ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n+                    debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n+                    if b_def == def && b_substs == substs {\n+                        debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n+                        return Ok(());\n+                    } else if AbstractConst::new(infcx.tcx, b_def, b_substs)\n+                        .map_or(false, |b_ct| try_unify(infcx.tcx, ct, b_ct))\n+                    {\n+                        debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n+                        return Ok(());\n                     }\n-                    _ => {} // don't care\n                 }\n+                _ => {} // don't care\n             }\n         }\n     }\n@@ -394,14 +394,17 @@ pub(super) fn try_unify<'tcx>(\n             let a_ct = a_ct.subst(tcx, a.substs);\n             let b_ct = b_ct.subst(tcx, b.substs);\n             match (a_ct.val, b_ct.val) {\n+                // We can just unify errors with everything to reduce the amount of\n+                // emitted errors here.\n+                (ty::ConstKind::Error(_), _) | (_, ty::ConstKind::Error(_)) => true,\n                 (ty::ConstKind::Param(a_param), ty::ConstKind::Param(b_param)) => {\n                     a_param == b_param\n                 }\n                 (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => a_val == b_val,\n                 // If we have `fn a<const N: usize>() -> [u8; N + 1]` and `fn b<const M: usize>() -> [u8; 1 + M]`\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n-                // means that we can't do anything with inference variables here.\n-                (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => false,\n+                // means that we only allow inference variables if they are equal.\n+                (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n                 // FIXME(const_evaluatable_checked): We may want to either actually try\n                 // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n                 // this, for now we just return false here."}]}