{"sha": "d0785954c846dbfdc9116084a731ccd44b0205ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzg1OTU0Yzg0NmRiZmRjOTExNjA4NGE3MzFjY2Q0NGIwMjA1Y2U=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-18T02:21:31Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-12-18T02:21:31Z"}, "message": "Fix trim_right/trim_left deprecation warnings (#3252)", "tree": {"sha": "b89f09563f845c4454138ad9804b642d3abef6c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89f09563f845c4454138ad9804b642d3abef6c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0785954c846dbfdc9116084a731ccd44b0205ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0785954c846dbfdc9116084a731ccd44b0205ce", "html_url": "https://github.com/rust-lang/rust/commit/d0785954c846dbfdc9116084a731ccd44b0205ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0785954c846dbfdc9116084a731ccd44b0205ce/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16c292dcf8974d72bf1474a9653566e1e160d393", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c292dcf8974d72bf1474a9653566e1e160d393", "html_url": "https://github.com/rust-lang/rust/commit/16c292dcf8974d72bf1474a9653566e1e160d393"}], "stats": {"total": 131, "additions": 68, "deletions": 63}, "files": [{"sha": "adccd08380716c7c2a8b620abeafc539feef8e67", "filename": "build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -36,7 +36,7 @@ fn main() {\n fn commit_info() -> String {\n     match (channel(), commit_hash(), commit_date()) {\n         (channel, Some(hash), Some(date)) => {\n-            format!(\"{} ({} {})\", channel, hash.trim_right(), date)\n+            format!(\"{} ({} {})\", channel, hash.trim_end(), date)\n         }\n         _ => String::new(),\n     }"}, {"sha": "6f229414e0d678a303c6f8bf6e75bbc9e0a9154c", "filename": "src/comment.rs", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -291,7 +291,7 @@ fn identify_comment(\n         let mut hbl = false;\n \n         for line in orig.lines() {\n-            let trimmed_line = line.trim_left();\n+            let trimmed_line = line.trim_start();\n             if trimmed_line.is_empty() {\n                 hbl = true;\n                 break;\n@@ -308,22 +308,22 @@ fn identify_comment(\n \n     let (has_bare_lines, first_group_ending) = match style {\n         CommentStyle::DoubleSlash | CommentStyle::TripleSlash | CommentStyle::Doc => {\n-            let line_start = style.line_start().trim_left();\n+            let line_start = style.line_start().trim_start();\n             consume_same_line_comments(style, orig, line_start)\n         }\n         CommentStyle::Custom(opener) => {\n-            let trimmed_opener = opener.trim_right();\n+            let trimmed_opener = opener.trim_end();\n             consume_same_line_comments(style, orig, trimmed_opener)\n         }\n         // for a block comment, search for the closing symbol\n         CommentStyle::DoubleBullet | CommentStyle::SingleBullet | CommentStyle::Exclamation => {\n-            let closer = style.closer().trim_left();\n+            let closer = style.closer().trim_start();\n             let mut closing_symbol_offset = 0;\n             let mut hbl = false;\n             let mut first = true;\n             for line in orig.lines() {\n                 closing_symbol_offset += compute_len(&orig[closing_symbol_offset..], line);\n-                let mut trimmed_line = line.trim_left();\n+                let mut trimmed_line = line.trim_start();\n                 if !trimmed_line.starts_with('*')\n                     && !trimmed_line.starts_with(\"//\")\n                     && !trimmed_line.starts_with(\"/*\")\n@@ -333,7 +333,7 @@ fn identify_comment(\n \n                 // Remove opener from consideration when searching for closer\n                 if first {\n-                    let opener = style.opener().trim_right();\n+                    let opener = style.opener().trim_end();\n                     trimmed_line = &trimmed_line[opener.len()..];\n                     first = false;\n                 }\n@@ -367,22 +367,27 @@ fn identify_comment(\n     if rest.is_empty() {\n         Some(rewritten_first_group)\n     } else {\n-        identify_comment(rest.trim_left(), block_style, shape, config, is_doc_comment).map(\n-            |rest_str| {\n-                format!(\n-                    \"{}\\n{}{}{}\",\n-                    rewritten_first_group,\n-                    // insert back the blank line\n-                    if has_bare_lines && style.is_line_comment() {\n-                        \"\\n\"\n-                    } else {\n-                        \"\"\n-                    },\n-                    shape.indent.to_string(config),\n-                    rest_str\n-                )\n-            },\n+        identify_comment(\n+            rest.trim_start(),\n+            block_style,\n+            shape,\n+            config,\n+            is_doc_comment,\n         )\n+        .map(|rest_str| {\n+            format!(\n+                \"{}\\n{}{}{}\",\n+                rewritten_first_group,\n+                // insert back the blank line\n+                if has_bare_lines && style.is_line_comment() {\n+                    \"\\n\"\n+                } else {\n+                    \"\"\n+                },\n+                shape.indent.to_string(config),\n+                rest_str\n+            )\n+        })\n     }\n }\n \n@@ -427,7 +432,7 @@ struct ItemizedBlock {\n impl ItemizedBlock {\n     /// Returns true if the line is formatted as an item\n     fn is_itemized_line(line: &str) -> bool {\n-        let trimmed = line.trim_left();\n+        let trimmed = line.trim_start();\n         trimmed.starts_with(\"* \") || trimmed.starts_with(\"- \")\n     }\n \n@@ -537,7 +542,7 @@ impl<'a> CommentRewrite<'a> {\n         while let Some(line) = iter.next() {\n             result.push_str(line);\n             result.push_str(match iter.peek() {\n-                Some(next_line) if next_line.is_empty() => sep.trim_right(),\n+                Some(next_line) if next_line.is_empty() => sep.trim_end(),\n                 Some(..) => &sep,\n                 None => \"\",\n             });\n@@ -757,15 +762,15 @@ fn rewrite_comment_inner(\n ) -> Option<String> {\n     let mut rewriter = CommentRewrite::new(orig, block_style, shape, config);\n \n-    let line_breaks = count_newlines(orig.trim_right());\n+    let line_breaks = count_newlines(orig.trim_end());\n     let lines = orig\n         .lines()\n         .enumerate()\n         .map(|(i, mut line)| {\n-            line = trim_right_unless_two_whitespaces(line.trim_left(), is_doc_comment);\n+            line = trim_end_unless_two_whitespaces(line.trim_start(), is_doc_comment);\n             // Drop old closer.\n             if i == line_breaks && line.ends_with(\"*/\") && !line.starts_with(\"//\") {\n-                line = line[..(line.len() - 2)].trim_right();\n+                line = line[..(line.len() - 2)].trim_end();\n             }\n \n             line\n@@ -774,7 +779,7 @@ fn rewrite_comment_inner(\n         .map(|(line, has_leading_whitespace)| {\n             if orig.starts_with(\"/*\") && line_breaks == 0 {\n                 (\n-                    line.trim_left(),\n+                    line.trim_start(),\n                     has_leading_whitespace || config.normalize_comments(),\n                 )\n             } else {\n@@ -794,7 +799,7 @@ fn rewrite_comment_inner(\n const RUSTFMT_CUSTOM_COMMENT_PREFIX: &str = \"//#### \";\n \n fn hide_sharp_behind_comment(s: &str) -> Cow<str> {\n-    if s.trim_left().starts_with(\"# \") {\n+    if s.trim_start().starts_with(\"# \") {\n         Cow::from(format!(\"{}{}\", RUSTFMT_CUSTOM_COMMENT_PREFIX, s))\n     } else {\n         Cow::from(s)\n@@ -804,9 +809,9 @@ fn hide_sharp_behind_comment(s: &str) -> Cow<str> {\n fn trim_custom_comment_prefix(s: &str) -> String {\n     s.lines()\n         .map(|line| {\n-            let left_trimmed = line.trim_left();\n+            let left_trimmed = line.trim_start();\n             if left_trimmed.starts_with(RUSTFMT_CUSTOM_COMMENT_PREFIX) {\n-                left_trimmed.trim_left_matches(RUSTFMT_CUSTOM_COMMENT_PREFIX)\n+                left_trimmed.trim_start_matches(RUSTFMT_CUSTOM_COMMENT_PREFIX)\n             } else {\n                 line\n             }\n@@ -866,11 +871,11 @@ pub fn recover_missing_comment_in_span(\n }\n \n /// Trim trailing whitespaces unless they consist of two or more whitespaces.\n-fn trim_right_unless_two_whitespaces(s: &str, is_doc_comment: bool) -> &str {\n+fn trim_end_unless_two_whitespaces(s: &str, is_doc_comment: bool) -> &str {\n     if is_doc_comment && s.ends_with(\"  \") {\n         s\n     } else {\n-        s.trim_right()\n+        s.trim_end()\n     }\n }\n \n@@ -898,7 +903,7 @@ fn light_rewrite_comment(\n                 \"\"\n             };\n             // Preserve markdown's double-space line break syntax in doc comment.\n-            trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n+            trim_end_unless_two_whitespaces(left_trimmed, is_doc_comment)\n         })\n         .collect();\n     lines.join(&format!(\"\\n{}\", offset.to_string(config)))\n@@ -918,7 +923,7 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> (&'a str,\n         if line.starts_with(opener) {\n             (&line[opener.len()..], true)\n         } else {\n-            (&line[opener.trim_right().len()..], false)\n+            (&line[opener.trim_end().len()..], false)\n         }\n     } else if line.starts_with(\"/* \")\n         || line.starts_with(\"// \")"}, {"sha": "9509f0f49804534babe8784a81909719ef3a5345", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -1252,12 +1252,12 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                         format!(\n                             \"{}{}\",\n                             new_indent.to_string(context.config),\n-                            line.trim_left()\n+                            line.trim_start()\n                         )\n                     })\n                     .collect::<Vec<_>>()\n                     .join(\"\\n\")\n-                    .trim_left(),\n+                    .trim_start(),\n             );\n             return wrap_str(indented_string_lit, context.config.max_width(), shape);\n         } else {"}, {"sha": "f8721456aa7a5de86ea2639a0518c5a1c2f0d112", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -50,7 +50,7 @@ impl<'a> FmtVisitor<'a> {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = mk_sp(self.last_pos, source!(self, span).lo());\n-                let trimmed_snippet = self.snippet(prev_span).trim_right();\n+                let trimmed_snippet = self.snippet(prev_span).trim_end();\n                 let span_end = self.last_pos + BytePos(trimmed_snippet.len() as u32);\n                 self.format_missing(span_end);\n                 // We have an excessive newline from the removed import."}, {"sha": "8298ffee7fa4363e7866b5048e117b8194e9097f", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -1249,7 +1249,7 @@ pub fn format_struct_struct(\n     {\n         result.push('\\n');\n         result.push_str(&offset.to_string(context.config));\n-        result.push_str(generics_str.trim_left());\n+        result.push_str(generics_str.trim_start());\n     } else {\n         result.push_str(&generics_str);\n     }\n@@ -1493,7 +1493,7 @@ fn rewrite_type_item<R: Rewrite>(\n         result.push_str(suffix);\n     } else {\n         result.push_str(&indent.to_string_with_newline(context.config));\n-        result.push_str(suffix.trim_left());\n+        result.push_str(suffix.trim_start());\n     }\n \n     // 1 = \";\"\n@@ -1619,7 +1619,7 @@ pub fn rewrite_struct_field(\n     let field_str = rewrite_assign_rhs(context, prefix, &*field.ty, shape)?;\n     // Remove a leading white-space from `rewrite_assign_rhs()` when rewriting a tuple struct.\n     let field_str = if is_prefix_empty {\n-        field_str.trim_left()\n+        field_str.trim_start()\n     } else {\n         &field_str\n     };\n@@ -1986,7 +1986,7 @@ fn rewrite_fn_base(\n     let snuggle_angle_bracket = generics_str\n         .lines()\n         .last()\n-        .map_or(false, |l| l.trim_left().len() == 1);\n+        .map_or(false, |l| l.trim_start().len() == 1);\n \n     // Note that the width and indent don't really matter, we'll re-layout the\n     // return type later anyway."}, {"sha": "eebebfcf3063347c1e1327dcf9674306b506386e", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -177,11 +177,11 @@ impl ListItem {\n     pub fn has_single_line_comment(&self) -> bool {\n         self.pre_comment\n             .as_ref()\n-            .map_or(false, |comment| comment.trim_left().starts_with(\"//\"))\n+            .map_or(false, |comment| comment.trim_start().starts_with(\"//\"))\n             || self\n                 .post_comment\n                 .as_ref()\n-                .map_or(false, |comment| comment.trim_left().starts_with(\"//\"))\n+                .map_or(false, |comment| comment.trim_start().starts_with(\"//\"))\n     }\n \n     pub fn has_comment(&self) -> bool {\n@@ -463,7 +463,7 @@ where\n                     || comment.trim().len() > width;\n \n                 rewrite_comment(\n-                    comment.trim_left(),\n+                    comment.trim_start(),\n                     block_style,\n                     comment_shape,\n                     formatting.config,"}, {"sha": "9ce5c913ca55f48a82cadc4c00923098d9025281", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -1290,7 +1290,7 @@ impl MacroBranch {\n \n         // Indent the body since it is in a block.\n         let indent_str = body_indent.to_string(&config);\n-        let mut new_body = LineClasses::new(new_body.trim_right())\n+        let mut new_body = LineClasses::new(new_body.trim_end())\n             .enumerate()\n             .fold(\n                 (String::new(), true),"}, {"sha": "d414527a61bb092685c4eb8d7fa7f13864055fc9", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -63,7 +63,7 @@ impl<'a> FmtVisitor<'a> {\n     pub fn format_missing_with_indent(&mut self, end: BytePos) {\n         let config = self.config;\n         self.format_missing_inner(end, |this, last_snippet, snippet| {\n-            this.push_str(last_snippet.trim_right());\n+            this.push_str(last_snippet.trim_end());\n             if last_snippet == snippet && !this.output_at_start() {\n                 // No new lines in the snippet.\n                 this.push_str(\"\\n\");\n@@ -75,7 +75,7 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn format_missing_no_indent(&mut self, end: BytePos) {\n         self.format_missing_inner(end, |this, last_snippet, _| {\n-            this.push_str(last_snippet.trim_right());\n+            this.push_str(last_snippet.trim_end());\n         })\n     }\n "}, {"sha": "609c425ef4ba8ec0fe569335270b94187957ea73", "filename": "src/pairs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -184,7 +184,7 @@ where\n {\n     let tab_spaces = context.config.tab_spaces();\n     let lhs_overhead = match separator_place {\n-        SeparatorPlace::Back => shape.used_width() + pp.prefix.len() + pp.infix.trim_right().len(),\n+        SeparatorPlace::Back => shape.used_width() + pp.prefix.len() + pp.infix.trim_end().len(),\n         SeparatorPlace::Front => shape.used_width(),\n     };\n     let lhs_shape = Shape {\n@@ -238,8 +238,8 @@ where\n         }\n     };\n     let infix = match separator_place {\n-        SeparatorPlace::Back => pp.infix.trim_right(),\n-        SeparatorPlace::Front => pp.infix.trim_left(),\n+        SeparatorPlace::Back => pp.infix.trim_end(),\n+        SeparatorPlace::Front => pp.infix.trim_start(),\n     };\n     if separator_place == SeparatorPlace::Front {\n         rhs_shape = rhs_shape.offset_left(infix.len())?;"}, {"sha": "668324b4d8fe598e43998311a0b5b97e163d720e", "filename": "src/string.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -107,7 +107,7 @@ pub fn rewrite_string<'a>(\n             for (i, grapheme) in graphemes[cur_start..].iter().enumerate() {\n                 if is_line_feed(grapheme) {\n                     // take care of blank lines\n-                    result = trim_right_but_line_feed(fmt.trim_end, result);\n+                    result = trim_end_but_line_feed(fmt.trim_end, result);\n                     result.push_str(\"\\n\");\n                     if !is_bareline_ok && cur_start + i + 1 < graphemes.len() {\n                         result.push_str(&indent_without_newline);\n@@ -117,7 +117,7 @@ pub fn rewrite_string<'a>(\n                     result.push_str(grapheme);\n                 }\n             }\n-            result = trim_right_but_line_feed(fmt.trim_end, result);\n+            result = trim_end_but_line_feed(fmt.trim_end, result);\n             break;\n         }\n \n@@ -138,7 +138,7 @@ pub fn rewrite_string<'a>(\n             }\n             SnippetState::EndWithLineFeed(line, len) => {\n                 if line == \"\\n\" && fmt.trim_end {\n-                    result = result.trim_right().to_string();\n+                    result = result.trim_end().to_string();\n                 }\n                 result.push_str(&line);\n                 if is_bareline_ok {\n@@ -188,11 +188,11 @@ fn detect_url(s: &[&str], index: usize) -> Option<usize> {\n }\n \n /// Trims whitespaces to the right except for the line feed character.\n-fn trim_right_but_line_feed(trim_end: bool, result: String) -> String {\n+fn trim_end_but_line_feed(trim_end: bool, result: String) -> String {\n     let whitespace_except_line_feed = |c: char| c.is_whitespace() && c != '\\n';\n     if trim_end && result.ends_with(whitespace_except_line_feed) {\n         result\n-            .trim_right_matches(whitespace_except_line_feed)\n+            .trim_end_matches(whitespace_except_line_feed)\n             .to_string()\n     } else {\n         result\n@@ -244,7 +244,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n                 if i <= index_minus_ws {\n                     let mut line = &input[0..i].concat()[..];\n                     if trim_end {\n-                        line = line.trim_right();\n+                        line = line.trim_end();\n                     }\n                     return SnippetState::EndWithLineFeed(format!(\"{}\\n\", line), i + 1);\n                 }"}, {"sha": "d27d1f13f98d7308dacfea021f7b1f791d0c02e0", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -399,7 +399,7 @@ where\n             \"{}\\n{}{}\",\n             args,\n             list_shape.indent.to_string(context.config),\n-            output.trim_left()\n+            output.trim_start()\n         ))\n     }\n }\n@@ -422,7 +422,7 @@ impl Rewrite for ast::WherePredicate {\n                 ..\n             }) => {\n                 let type_str = bounded_ty.rewrite(context, shape)?;\n-                let colon = type_bound_colon(context).trim_right();\n+                let colon = type_bound_colon(context).trim_end();\n                 let lhs = if let Some(lifetime_str) =\n                     rewrite_lifetime_param(context, shape, bound_generic_params)\n                 {"}, {"sha": "a6a46df6ddc193908347efe2c6792dd839dc0c27", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -514,7 +514,7 @@ pub fn remove_trailing_white_spaces(text: &str) -> String {\n /// ```\n pub fn trim_left_preserve_layout(orig: &str, indent: Indent, config: &Config) -> Option<String> {\n     let mut lines = LineClasses::new(orig);\n-    let first_line = lines.next().map(|(_, s)| s.trim_right().to_owned())?;\n+    let first_line = lines.next().map(|(_, s)| s.trim_end().to_owned())?;\n     let mut trimmed_lines = Vec::with_capacity(16);\n \n     let mut veto_trim = false;"}, {"sha": "61272e7db02009db1ecf711afd34e7118b0941b3", "filename": "src/vertical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0785954c846dbfdc9116084a731ccd44b0205ce/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=d0785954c846dbfdc9116084a731ccd44b0205ce", "patch": "@@ -141,14 +141,14 @@ pub fn rewrite_with_alignment<T: AlignedItem>(\n         );\n \n         let snippet = context.snippet(missing_span);\n-        if snippet.trim_left().starts_with(\"//\") {\n+        if snippet.trim_start().starts_with(\"//\") {\n             let offset = snippet.lines().next().map_or(0, |l| l.len());\n             // 2 = \",\" + \"\\n\"\n             init_hi + BytePos(offset as u32 + 2)\n-        } else if snippet.trim_left().starts_with(\"/*\") {\n+        } else if snippet.trim_start().starts_with(\"/*\") {\n             let comment_lines = snippet\n                 .lines()\n-                .position(|line| line.trim_right().ends_with(\"*/\"))\n+                .position(|line| line.trim_end().ends_with(\"*/\"))\n                 .unwrap_or(0);\n \n             let offset = snippet"}]}