{"sha": "a992f95e34cd9ccc514c4706812f0f14b130332c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OTJmOTVlMzRjZDljY2M1MTRjNDcwNjgxMmYwZjE0YjEzMDMzMmM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2020-05-03T14:01:14Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2020-05-04T13:17:02Z"}, "message": "Add examples for std::f32 constants.\n\nAnd also point people to use the associated constants of f32 instead.", "tree": {"sha": "66160ea8ee7bdf1bf03ad008afd89e024fe804b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66160ea8ee7bdf1bf03ad008afd89e024fe804b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a992f95e34cd9ccc514c4706812f0f14b130332c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a992f95e34cd9ccc514c4706812f0f14b130332c", "html_url": "https://github.com/rust-lang/rust/commit/a992f95e34cd9ccc514c4706812f0f14b130332c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a992f95e34cd9ccc514c4706812f0f14b130332c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d626e4dadc37d7027d65f087da0ad1ddb460959f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d626e4dadc37d7027d65f087da0ad1ddb460959f", "html_url": "https://github.com/rust-lang/rust/commit/d626e4dadc37d7027d65f087da0ad1ddb460959f"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "cdbdd70d6a1ed9009bc3c8cf5a333c0917af9655", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/a992f95e34cd9ccc514c4706812f0f14b130332c/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a992f95e34cd9ccc514c4706812f0f14b130332c/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=a992f95e34cd9ccc514c4706812f0f14b130332c", "patch": "@@ -18,15 +18,45 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n /// Use [`f32::RADIX`](../../std/primitive.f32.html#associatedconstant.RADIX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let r = std::f32::RADIX;\n+///\n+/// // correct way\n+/// let r = f32::RADIX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n /// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f32::MANTISSA_DIGITS;\n+///\n+/// // correct way\n+/// let d = f32::MANTISSA_DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n /// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let d = std::f32::DIGITS;\n+///\n+/// // correct way\n+/// let d = f32::DIGITS;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n@@ -36,50 +66,160 @@ pub const DIGITS: u32 = f32::DIGITS;\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let e = std::f32::EPSILON;\n+///\n+/// // correct way\n+/// let e = f32::EPSILON;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n /// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN;\n+///\n+/// // correct way\n+/// let min = f32::MIN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = f32::MIN;\n /// Smallest positive normal `f32` value.\n /// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_POSITIVE;\n+///\n+/// // correct way\n+/// let min = f32::MIN_POSITIVE;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n /// Largest finite `f32` value.\n /// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX;\n+///\n+/// // correct way\n+/// let max = f32::MAX;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n /// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_EXP;\n+///\n+/// // correct way\n+/// let min = f32::MIN_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n /// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX_EXP;\n+///\n+/// // correct way\n+/// let max = f32::MAX_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n /// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let min = std::f32::MIN_10_EXP;\n+///\n+/// // correct way\n+/// let min = f32::MIN_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n /// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let max = std::f32::MAX_10_EXP;\n+///\n+/// // correct way\n+/// let max = f32::MAX_10_EXP;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n /// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let nan = std::f32::NAN;\n+///\n+/// // correct way\n+/// let nan = f32::NAN;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f32 = f32::NAN;\n /// Infinity (\u221e).\n /// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let inf = std::f32::INFINITY;\n+///\n+/// // correct way\n+/// let inf = f32::INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f32 = f32::INFINITY;\n /// Negative infinity (\u2212\u221e).\n /// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// // deprecated way\n+/// let ninf = std::f32::NEG_INFINITY;\n+///\n+/// // correct way\n+/// let ninf = f32::NEG_INFINITY;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n "}]}