{"sha": "49edcbd32ad044c626b66ae7645bd31d7c71786b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZWRjYmQzMmFkMDQ0YzYyNmI2NmFlNzY0NWJkMzFkN2M3MTc4NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T23:40:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T23:40:31Z"}, "message": "Auto merge of #45580 - kennytm:sdkmanager, r=alexcrichton\n\nci: Upgrade Android SDK/NDK and refactor to use sdkmanager/avdmanager.\n\n* SDK tools is upgraded to 27.0.0.\n\n* Stopped using the deprecated `android` tool, instead use the recommended `sdkmanager` and `avdmanager`.\n\n* NDK is upgrade to r15c.\n\n    The r15 series [dropped support for android-9](https://github.com/android-ndk/ndk/wiki/Changelog-r15) (2.3 / Gingerbread), the minimal supported version is now android-14 (4.0 / Ice Cream Sandwich).\n\nr? @alexcrichton\n\n(WIP, haven't confirmed if the change really works yet)", "tree": {"sha": "2633903ad7f79b282eee6df8b993961b365133a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2633903ad7f79b282eee6df8b993961b365133a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49edcbd32ad044c626b66ae7645bd31d7c71786b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49edcbd32ad044c626b66ae7645bd31d7c71786b", "html_url": "https://github.com/rust-lang/rust/commit/49edcbd32ad044c626b66ae7645bd31d7c71786b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49edcbd32ad044c626b66ae7645bd31d7c71786b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "269cf5026cdac6ff47f886a948e99101316d7091", "url": "https://api.github.com/repos/rust-lang/rust/commits/269cf5026cdac6ff47f886a948e99101316d7091", "html_url": "https://github.com/rust-lang/rust/commit/269cf5026cdac6ff47f886a948e99101316d7091"}, {"sha": "c46b04cbdd1bdf0183b121fac18513c0609962ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46b04cbdd1bdf0183b121fac18513c0609962ee", "html_url": "https://github.com/rust-lang/rust/commit/c46b04cbdd1bdf0183b121fac18513c0609962ee"}], "stats": {"total": 149, "additions": 97, "deletions": 52}, "files": [{"sha": "e531fdaf2923bd4048e2ae35f99dae2eb83e7f20", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -84,7 +84,7 @@ pub fn find(build: &mut Build) {\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n             cfg.compiler(cc);\n         } else {\n-            set_compiler(&mut cfg, \"gcc\", target, config, build);\n+            set_compiler(&mut cfg, Language::C, target, config, build);\n         }\n \n         let compiler = cfg.get_compiler();\n@@ -112,7 +112,7 @@ pub fn find(build: &mut Build) {\n         if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n         } else {\n-            set_compiler(&mut cfg, \"g++\", host, config, build);\n+            set_compiler(&mut cfg, Language::CPlusPlus, host, config, build);\n         }\n         let compiler = cfg.get_compiler();\n         build.verbose(&format!(\"CXX_{} = {:?}\", host, compiler.path()));\n@@ -121,7 +121,7 @@ pub fn find(build: &mut Build) {\n }\n \n fn set_compiler(cfg: &mut cc::Build,\n-                gnu_compiler: &str,\n+                compiler: Language,\n                 target: Interned<String>,\n                 config: Option<&Target>,\n                 build: &Build) {\n@@ -132,7 +132,7 @@ fn set_compiler(cfg: &mut cc::Build,\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n                 let target = target.replace(\"armv7\", \"arm\");\n-                let compiler = format!(\"{}-{}\", target, gnu_compiler);\n+                let compiler = format!(\"{}-{}\", target, compiler.clang());\n                 cfg.compiler(ndk.join(\"bin\").join(compiler));\n             }\n         }\n@@ -141,6 +141,7 @@ fn set_compiler(cfg: &mut cc::Build,\n         // which is a gcc version from ports, if this is the case.\n         t if t.contains(\"openbsd\") => {\n             let c = cfg.get_compiler();\n+            let gnu_compiler = compiler.gcc();\n             if !c.path().ends_with(gnu_compiler) {\n                 return\n             }\n@@ -183,3 +184,29 @@ fn set_compiler(cfg: &mut cc::Build,\n         _ => {}\n     }\n }\n+\n+/// The target programming language for a native compiler.\n+enum Language {\n+    /// The compiler is targeting C.\n+    C,\n+    /// The compiler is targeting C++.\n+    CPlusPlus,\n+}\n+\n+impl Language {\n+    /// Obtains the name of a compiler in the GCC collection.\n+    fn gcc(self) -> &'static str {\n+        match self {\n+            Language::C => \"gcc\",\n+            Language::CPlusPlus => \"g++\",\n+        }\n+    }\n+\n+    /// Obtains the name of a compiler in the clang suite.\n+    fn clang(self) -> &'static str {\n+        match self {\n+            Language::C => \"clang\",\n+            Language::CPlusPlus => \"clang++\",\n+        }\n+    }\n+}"}, {"sha": "f2773a720cfbcf3ae063950c6d22efc5ab96ab78", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -5,29 +5,35 @@ RUN sh /scripts/android-base-apt-get.sh\n \n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n-    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm 9\n+    download_and_make_toolchain android-ndk-r15c-linux-x86_64.zip arm 14\n \n+# Note:\n+# Do not upgrade to `openjdk-9-jre-headless`, as it will cause certificate error\n+# when installing the Android SDK (see PR #45193). This is unfortunate, but\n+# every search result suggested either disabling HTTPS or replacing JDK 9 by\n+# JDK 8 as the solution (e.g. https://stackoverflow.com/q/41421340). :|\n RUN dpkg --add-architecture i386 && \\\n     apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n   libgl1-mesa-glx \\\n   libpulse0 \\\n   libstdc++6:i386 \\\n-  openjdk-9-jre-headless \\\n+  openjdk-8-jre-headless \\\n   tzdata\n \n COPY scripts/android-sdk.sh /scripts/\n RUN . /scripts/android-sdk.sh && \\\n-    download_and_create_avd tools_r25.2.5-linux.zip armeabi-v7a 18\n+    download_and_create_avd 4333796 armeabi-v7a 18\n \n+ENV PATH=$PATH:/android/sdk/emulator\n ENV PATH=$PATH:/android/sdk/tools\n ENV PATH=$PATH:/android/sdk/platform-tools\n \n ENV TARGETS=arm-linux-androideabi\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n-      --arm-linux-androideabi-ndk=/android/ndk/arm-9\n+      --arm-linux-androideabi-ndk=/android/ndk/arm-14\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n "}, {"sha": "ce5e8cfaf09582b86bf32643b210cb55542c32be", "filename": "src/ci/docker/disabled/dist-aarch64-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -5,7 +5,7 @@ RUN sh /scripts/android-base-apt-get.sh\n \n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n-    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm64 21\n+    download_and_make_toolchain android-ndk-r15c-linux-x86_64.zip arm64 21\n \n ENV PATH=$PATH:/android/ndk/arm64-21/bin\n "}, {"sha": "3177fa2147fa16b63eea51e7b9e26d71ca6bfe55", "filename": "src/ci/docker/disabled/dist-armv7-android/Dockerfile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -5,17 +5,17 @@ RUN sh /scripts/android-base-apt-get.sh\n \n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n-    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n-    make_standalone_toolchain arm 9 && \\\n+    download_ndk android-ndk-r15c-linux-x86_64.zip && \\\n+    make_standalone_toolchain arm 14 && \\\n     make_standalone_toolchain arm 21 && \\\n     remove_ndk\n \n RUN chmod 777 /android/ndk && \\\n     ln -s /android/ndk/arm-21 /android/ndk/arm\n \n-ENV PATH=$PATH:/android/ndk/arm-9/bin\n+ENV PATH=$PATH:/android/ndk/arm-14/bin\n \n-ENV DEP_Z_ROOT=/android/ndk/arm-9/sysroot/usr/\n+ENV DEP_Z_ROOT=/android/ndk/arm-14/sysroot/usr/\n \n ENV HOSTS=armv7-linux-androideabi\n \n@@ -27,18 +27,18 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-extended \\\n       --enable-cargo-openssl-static\n \n-# We support api level 9, but api level 21 is required to build llvm. To\n+# We support api level 14, but api level 21 is required to build llvm. To\n # overcome this problem we use a ndk with api level 21 to build llvm and then\n-# switch to a ndk with api level 9 to complete the build. When the linker is\n+# switch to a ndk with api level 14 to complete the build. When the linker is\n # invoked there are missing symbols (like sigsetempty, not available with api\n-# level 9), the default linker behavior is to generate an error, to allow the\n+# level 14), the default linker behavior is to generate an error, to allow the\n # build to finish we use --warn-unresolved-symbols. Note that the missing\n # symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n ENV SCRIPT \\\n   python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n   (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n     rm /android/ndk/arm && \\\n-    ln -s /android/ndk/arm-9 /android/ndk/arm && \\\n+    ln -s /android/ndk/arm-14 /android/ndk/arm && \\\n     python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n \n COPY scripts/sccache.sh /scripts/"}, {"sha": "ace9c4feb4f3be307a18613afcd733e559cae28a", "filename": "src/ci/docker/disabled/dist-i686-android/Dockerfile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -5,17 +5,17 @@ RUN sh /scripts/android-base-apt-get.sh\n \n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n-    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n-    make_standalone_toolchain x86 9 && \\\n+    download_ndk android-ndk-r15c-linux-x86_64.zip && \\\n+    make_standalone_toolchain x86 14 && \\\n     make_standalone_toolchain x86 21 && \\\n     remove_ndk\n \n RUN chmod 777 /android/ndk && \\\n     ln -s /android/ndk/x86-21 /android/ndk/x86\n \n-ENV PATH=$PATH:/android/ndk/x86-9/bin\n+ENV PATH=$PATH:/android/ndk/x86-14/bin\n \n-ENV DEP_Z_ROOT=/android/ndk/x86-9/sysroot/usr/\n+ENV DEP_Z_ROOT=/android/ndk/x86-14/sysroot/usr/\n \n ENV HOSTS=i686-linux-android\n \n@@ -27,18 +27,18 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-extended \\\n       --enable-cargo-openssl-static\n \n-# We support api level 9, but api level 21 is required to build llvm. To\n+# We support api level 14, but api level 21 is required to build llvm. To\n # overcome this problem we use a ndk with api level 21 to build llvm and then\n-# switch to a ndk with api level 9 to complete the build. When the linker is\n+# switch to a ndk with api level 14 to complete the build. When the linker is\n # invoked there are missing symbols (like sigsetempty, not available with api\n-# level 9), the default linker behavior is to generate an error, to allow the\n+# level 14), the default linker behavior is to generate an error, to allow the\n # build to finish we use --warn-unresolved-symbols. Note that the missing\n # symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n ENV SCRIPT \\\n   python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n   (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n     rm /android/ndk/x86 && \\\n-    ln -s /android/ndk/x86-9 /android/ndk/x86 && \\\n+    ln -s /android/ndk/x86-14 /android/ndk/x86 && \\\n     python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n \n COPY scripts/sccache.sh /scripts/"}, {"sha": "322d26f0adc4ce226987ca691ab76b14d7880461", "filename": "src/ci/docker/disabled/dist-x86_64-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -5,7 +5,7 @@ RUN sh /scripts/android-base-apt-get.sh\n \n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n-    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip x86_64 21\n+    download_and_make_toolchain android-ndk-r15c-linux-x86_64.zip x86_64 21\n \n ENV PATH=$PATH:/android/ndk/x86_64-21/bin\n "}, {"sha": "5d7545a3c2a956d812d09611e0db36ae2fad5dd2", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -6,9 +6,9 @@ RUN sh /scripts/android-base-apt-get.sh\n # ndk\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n-    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n-    make_standalone_toolchain arm 9 && \\\n-    make_standalone_toolchain x86 9 && \\\n+    download_ndk android-ndk-r15c-linux-x86_64.zip && \\\n+    make_standalone_toolchain arm 14 && \\\n+    make_standalone_toolchain x86 14 && \\\n     make_standalone_toolchain arm64 21 && \\\n     make_standalone_toolchain x86_64 21 && \\\n     remove_ndk\n@@ -23,9 +23,9 @@ ENV TARGETS=$TARGETS,x86_64-linux-android\n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n       --enable-extended \\\n-      --arm-linux-androideabi-ndk=/android/ndk/arm-9 \\\n-      --armv7-linux-androideabi-ndk=/android/ndk/arm-9 \\\n-      --i686-linux-android-ndk=/android/ndk/x86-9 \\\n+      --arm-linux-androideabi-ndk=/android/ndk/arm-14 \\\n+      --armv7-linux-androideabi-ndk=/android/ndk/arm-14 \\\n+      --i686-linux-android-ndk=/android/ndk/x86-14 \\\n       --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n       --x86_64-linux-android-ndk=/android/ndk/x86_64-21\n "}, {"sha": "99c5776c2e849a95b45d56dfdee5ed21d3a39e49", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/49edcbd32ad044c626b66ae7645bd31d7c71786b/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=49edcbd32ad044c626b66ae7645bd31d7c71786b", "patch": "@@ -10,44 +10,56 @@\n \n set -ex\n \n-URL=https://dl.google.com/android/repository\n+export ANDROID_HOME=/android/sdk\n+PATH=$PATH:\"${ANDROID_HOME}/tools/bin\"\n \n download_sdk() {\n-    mkdir -p /android/sdk\n-    cd /android/sdk\n-    curl -fO $URL/$1\n-    unzip -q $1\n-    rm -rf $1\n+    mkdir -p /android\n+    curl -fo sdk.zip \"https://dl.google.com/android/repository/sdk-tools-linux-$1.zip\"\n+    unzip -q sdk.zip -d \"$ANDROID_HOME\"\n+    rm -f sdk.zip\n }\n \n download_sysimage() {\n-    # See https://developer.android.com/studio/tools/help/android.html\n     abi=$1\n     api=$2\n \n-    filter=\"platform-tools,android-$api\"\n-    filter=\"$filter,sys-img-$abi-android-$api\"\n-\n-    # Keep printing yes to accept the licenses\n-    while true; do echo yes; sleep 10; done | \\\n-        /android/sdk/tools/android update sdk -a --no-ui \\\n-            --filter \"$filter\" --no-https\n+    # See https://developer.android.com/studio/command-line/sdkmanager.html for\n+    # usage of `sdkmanager`.\n+    #\n+    # The output from sdkmanager is so noisy that it will occupy all of the 4 MB\n+    # log extremely quickly. Thus we must silence all output.\n+    yes | sdkmanager --licenses > /dev/null\n+    sdkmanager platform-tools emulator \\\n+        \"platforms;android-$api\" \\\n+        \"system-images;android-$api;default;$abi\" > /dev/null\n }\n \n create_avd() {\n-    # See https://developer.android.com/studio/tools/help/android.html\n     abi=$1\n     api=$2\n \n-    echo no | \\\n-        /android/sdk/tools/android create avd \\\n-            --name $abi-$api \\\n-            --target android-$api \\\n-            --abi $abi\n+    # See https://developer.android.com/studio/command-line/avdmanager.html for\n+    # usage of `avdmanager`.\n+    echo no | avdmanager create avd \\\n+        -n \"$abi-$api\" \\\n+        -k \"system-images;android-$api;default;$abi\"\n }\n \n download_and_create_avd() {\n     download_sdk $1\n     download_sysimage $2 $3\n     create_avd $2 $3\n }\n+\n+# Usage:\n+#\n+#       setup_android_sdk 4333796 armeabi-v7a 18\n+#\n+# 4333796 =>\n+#   SDK tool version.\n+#   Copy from https://developer.android.com/studio/index.html#command-tools\n+# armeabi-v7a =>\n+#   System image ABI\n+# 18 =>\n+#   Android API Level (18 = Android 4.3 = Jelly Bean MR2)"}]}