{"sha": "17412bae30db7f8f72218387925b8931f42eb08a", "node_id": "C_kwDOAAsO6NoAKDE3NDEyYmFlMzBkYjdmOGY3MjIxODM4NzkyNWI4OTMxZjQyZWIwOGE", "commit": {"author": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-04-07T06:26:08Z"}, "committer": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-05T01:54:28Z"}, "message": "Removed use of iteration through a HashMap/HashSet in rustc_incremental and replaced with IndexMap/IndexSet", "tree": {"sha": "804561f5de88ef86048b048f5aed5fb2425383ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/804561f5de88ef86048b048f5aed5fb2425383ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17412bae30db7f8f72218387925b8931f42eb08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17412bae30db7f8f72218387925b8931f42eb08a", "html_url": "https://github.com/rust-lang/rust/commit/17412bae30db7f8f72218387925b8931f42eb08a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17412bae30db7f8f72218387925b8931f42eb08a/comments", "author": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5", "html_url": "https://github.com/rust-lang/rust/commit/dcf3571c513a29a60a5061ce84c3c618cf5e4cd5"}], "stats": {"total": 95, "additions": 47, "deletions": 48}, "files": [{"sha": "24968e00cc8e5051a8e466d5296bac5bbcd5a4ea", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -34,7 +34,7 @@ use rustc_codegen_ssa::back::write::{\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, FatalError, Handler, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n@@ -356,7 +356,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n+    ) -> Result<(CodegenResults, FxIndexMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")"}, {"sha": "701d0d73ad38c60f2288b05f3a5ccec4710a2c04", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -9,7 +9,7 @@ use crate::{\n };\n use jobserver::{Acquired, Client};\n use rustc_ast::attr;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::profiling::TimingGuard;\n@@ -498,8 +498,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n     sess: &Session,\n     compiled_modules: &CompiledModules,\n-) -> FxHashMap<WorkProductId, WorkProduct> {\n-    let mut work_products = FxHashMap::default();\n+) -> FxIndexMap<WorkProductId, WorkProduct> {\n+    let mut work_products = FxIndexMap::default();\n \n     if sess.opts.incremental.is_none() {\n         return work_products;\n@@ -1885,7 +1885,7 @@ pub struct OngoingCodegen<B: ExtraBackendMethods> {\n }\n \n impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n-    pub fn join(self, sess: &Session) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n+    pub fn join(self, sess: &Session) -> (CodegenResults, FxIndexMap<WorkProductId, WorkProduct>) {\n         let _timer = sess.timer(\"finish_ongoing_codegen\");\n \n         self.shared_emitter_main.check(sess, true);"}, {"sha": "b3c9ecf8b938b71e19c6b573cf368a59ac6dd811", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -6,7 +6,7 @@ use crate::back::write::TargetMachineFactoryFn;\n use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::{DynSend, DynSync};\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n@@ -101,7 +101,7 @@ pub trait CodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed>;\n+    ) -> Result<(CodegenResults, FxIndexMap<WorkProductId, WorkProduct>), ErrorGuaranteed>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n     ///"}, {"sha": "52a84b204d00bf6f6a0e3a3727da35673d3809a1", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -35,7 +35,7 @@\n \n use crate::errors;\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n use rustc_graphviz as dot;\n use rustc_hir as hir;\n@@ -258,7 +258,7 @@ fn dump_graph(query: &DepGraphQuery) {\n }\n \n #[allow(missing_docs)]\n-pub struct GraphvizDepGraph(FxHashSet<DepKind>, Vec<(DepKind, DepKind)>);\n+pub struct GraphvizDepGraph(FxIndexSet<DepKind>, Vec<(DepKind, DepKind)>);\n \n impl<'a> dot::GraphWalk<'a> for GraphvizDepGraph {\n     type Node = DepKind;\n@@ -303,7 +303,7 @@ impl<'a> dot::Labeller<'a> for GraphvizDepGraph {\n fn node_set<'q>(\n     query: &'q DepGraphQuery,\n     filter: &DepNodeFilter,\n-) -> Option<FxHashSet<&'q DepNode>> {\n+) -> Option<FxIndexSet<&'q DepNode>> {\n     debug!(\"node_set(filter={:?})\", filter);\n \n     if filter.accepts_all() {\n@@ -315,9 +315,9 @@ fn node_set<'q>(\n \n fn filter_nodes<'q>(\n     query: &'q DepGraphQuery,\n-    sources: &Option<FxHashSet<&'q DepNode>>,\n-    targets: &Option<FxHashSet<&'q DepNode>>,\n-) -> FxHashSet<DepKind> {\n+    sources: &Option<FxIndexSet<&'q DepNode>>,\n+    targets: &Option<FxIndexSet<&'q DepNode>>,\n+) -> FxIndexSet<DepKind> {\n     if let Some(sources) = sources {\n         if let Some(targets) = targets {\n             walk_between(query, sources, targets)\n@@ -333,10 +333,10 @@ fn filter_nodes<'q>(\n \n fn walk_nodes<'q>(\n     query: &'q DepGraphQuery,\n-    starts: &FxHashSet<&'q DepNode>,\n+    starts: &FxIndexSet<&'q DepNode>,\n     direction: Direction,\n-) -> FxHashSet<DepKind> {\n-    let mut set = FxHashSet::default();\n+) -> FxIndexSet<DepKind> {\n+    let mut set = FxIndexSet::default();\n     for &start in starts {\n         debug!(\"walk_nodes: start={:?} outgoing?={:?}\", start, direction == OUTGOING);\n         if set.insert(start.kind) {\n@@ -357,9 +357,9 @@ fn walk_nodes<'q>(\n \n fn walk_between<'q>(\n     query: &'q DepGraphQuery,\n-    sources: &FxHashSet<&'q DepNode>,\n-    targets: &FxHashSet<&'q DepNode>,\n-) -> FxHashSet<DepKind> {\n+    sources: &FxIndexSet<&'q DepNode>,\n+    targets: &FxIndexSet<&'q DepNode>,\n+) -> FxIndexSet<DepKind> {\n     // This is a bit tricky. We want to include a node only if it is:\n     // (a) reachable from a source and (b) will reach a target. And we\n     // have to be careful about cycles etc. Luckily efficiency is not\n@@ -426,8 +426,8 @@ fn walk_between<'q>(\n     }\n }\n \n-fn filter_edges(query: &DepGraphQuery, nodes: &FxHashSet<DepKind>) -> Vec<(DepKind, DepKind)> {\n-    let uniq: FxHashSet<_> = query\n+fn filter_edges(query: &DepGraphQuery, nodes: &FxIndexSet<DepKind>) -> Vec<(DepKind, DepKind)> {\n+    let uniq: FxIndexSet<_> = query\n         .edges()\n         .into_iter()\n         .map(|(s, t)| (s.kind, t.kind))"}, {"sha": "82c787605d7d3b06ac19896679998059edffbfcd", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -24,7 +24,7 @@\n \n use crate::errors;\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::mir::mono::CodegenUnitNameBuilder;\n use rustc_middle::ty::TyCtxt;\n@@ -52,7 +52,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n struct AssertModuleSource<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    available_cgus: FxHashSet<Symbol>,\n+    available_cgus: FxIndexSet<Symbol>,\n }\n \n impl<'tcx> AssertModuleSource<'tcx> {"}, {"sha": "b9171fad55ba335aca180d9be2c62a1f5faa9753", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -4,7 +4,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "848b81b9d3496b2bbc20a1922735c95e625c92b2", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -21,7 +21,7 @@\n \n use crate::errors;\n use rustc_ast::{self as ast, Attribute, NestedMetaItem};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit;\n use rustc_hir::Node as HirNode;\n@@ -125,7 +125,7 @@ const LABELS_ADT: &[&[&str]] = &[BASE_HIR, BASE_STRUCT];\n //\n //     type_of for these.\n \n-type Labels = FxHashSet<String>;\n+type Labels = FxIndexSet<String>;\n \n /// Represents the requested configuration by rustc_clean/dirty\n struct Assertion {"}, {"sha": "463481f16f371068ce94786cb19bb63a0e751358", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -104,7 +104,7 @@\n //! implemented.\n \n use crate::errors;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_errors::ErrorGuaranteed;\n@@ -635,8 +635,8 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // First do a pass over the crate directory, collecting lock files and\n     // session directories\n-    let mut session_directories = FxHashSet::default();\n-    let mut lock_files = FxHashSet::default();\n+    let mut session_directories = FxIndexSet::default();\n+    let mut lock_files = FxIndexSet::default();\n \n     for dir_entry in crate_directory.read_dir()? {\n         let Ok(dir_entry) = dir_entry else {\n@@ -659,7 +659,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     }\n \n     // Now map from lock files to session directories\n-    let lock_file_to_session_dir: FxHashMap<String, Option<String>> = lock_files\n+    let lock_file_to_session_dir: FxIndexMap<String, Option<String>> = lock_files\n         .into_iter()\n         .map(|lock_file_name| {\n             assert!(lock_file_name.ends_with(LOCK_FILE_EXT));\n@@ -705,7 +705,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     }\n \n     // Filter out `None` directories\n-    let lock_file_to_session_dir: FxHashMap<String, String> = lock_file_to_session_dir\n+    let lock_file_to_session_dir: FxIndexMap<String, String> = lock_file_to_session_dir\n         .into_iter()\n         .filter_map(|(lock_file_name, directory_name)| directory_name.map(|n| (lock_file_name, n)))\n         .collect();\n@@ -846,7 +846,7 @@ fn delete_old(sess: &Session, path: &Path) {\n \n fn all_except_most_recent(\n     deletion_candidates: Vec<(SystemTime, PathBuf, Option<flock::Lock>)>,\n-) -> FxHashMap<PathBuf, Option<flock::Lock>> {\n+) -> FxIndexMap<PathBuf, Option<flock::Lock>> {\n     let most_recent = deletion_candidates.iter().map(|&(timestamp, ..)| timestamp).max();\n \n     if let Some(most_recent) = most_recent {\n@@ -856,7 +856,7 @@ fn all_except_most_recent(\n             .map(|(_, path, lock)| (path, lock))\n             .collect()\n     } else {\n-        FxHashMap::default()\n+        FxIndexMap::default()\n     }\n }\n "}, {"sha": "0f7db109127979301eb7fc0cc6f688f965782825", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -1,7 +1,7 @@\n //! Code to save/load the dep-graph from files.\n \n use crate::errors;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::query::on_disk_cache::OnDiskCache;\n@@ -16,7 +16,7 @@ use super::file_format;\n use super::fs::*;\n use super::work_product;\n \n-type WorkProductMap = FxHashMap<WorkProductId, WorkProduct>;\n+type WorkProductMap = FxIndexMap<WorkProductId, WorkProduct>;\n \n #[derive(Debug)]\n /// Represents the result of an attempt to load incremental compilation data.\n@@ -147,7 +147,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     let report_incremental_info = sess.opts.unstable_opts.incremental_info;\n     let expected_hash = sess.opts.dep_tracking_hash(false);\n \n-    let mut prev_work_products = FxHashMap::default();\n+    let mut prev_work_products = FxIndexMap::default();\n \n     // If we are only building with -Zquery-dep-graph but without an actual\n     // incr. comp. session directory, we skip this. Otherwise we'd fail"}, {"sha": "bcffba466413cf2ecbae6a74b7db7e5cf6782b19", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -1,5 +1,5 @@\n use crate::errors;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::join;\n use rustc_middle::dep_graph::{DepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n@@ -79,7 +79,7 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n pub fn save_work_product_index(\n     sess: &Session,\n     dep_graph: &DepGraph,\n-    new_work_products: FxHashMap<WorkProductId, WorkProduct>,\n+    new_work_products: FxIndexMap<WorkProductId, WorkProduct>,\n ) {\n     if sess.opts.incremental.is_none() {\n         return;\n@@ -119,7 +119,7 @@ pub fn save_work_product_index(\n }\n \n fn encode_work_product_index(\n-    work_products: &FxHashMap<WorkProductId, WorkProduct>,\n+    work_products: &FxIndexMap<WorkProductId, WorkProduct>,\n     encoder: &mut FileEncoder,\n ) {\n     let serialized_products: Vec<_> = work_products\n@@ -146,7 +146,7 @@ fn encode_query_cache(tcx: TyCtxt<'_>, encoder: FileEncoder) -> FileEncodeResult\n pub fn build_dep_graph(\n     sess: &Session,\n     prev_graph: SerializedDepGraph,\n-    prev_work_products: FxHashMap<WorkProductId, WorkProduct>,\n+    prev_work_products: FxIndexMap<WorkProductId, WorkProduct>,\n ) -> Option<DepGraph> {\n     if sess.opts.incremental.is_none() {\n         // No incremental compilation."}, {"sha": "a1dc78596a9ef8e4cdc385ed7ee16ec4f0186b72", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -4,7 +4,7 @@\n \n use crate::errors;\n use crate::persist::fs::*;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_fs_util::link_or_copy;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::Session;\n@@ -20,7 +20,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     debug!(?cgu_name, ?files);\n     sess.opts.incremental.as_ref()?;\n \n-    let mut saved_files = FxHashMap::default();\n+    let mut saved_files = FxIndexMap::default();\n     for (ext, path) in files {\n         let file_name = format!(\"{cgu_name}.{ext}\");\n         let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);"}, {"sha": "54eaa1d4a7f99ba77526413888a191f273d674d0", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17412bae30db7f8f72218387925b8931f42eb08a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=17412bae30db7f8f72218387925b8931f42eb08a", "patch": "@@ -1,6 +1,6 @@\n use parking_lot::Mutex;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::profiling::{EventId, QueryInvocationId, SelfProfilerRef};\n use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -93,7 +93,7 @@ pub struct DepGraphData<K: DepKind> {\n     /// things available to us. If we find that they are not dirty, we\n     /// load the path to the file storing those work-products here into\n     /// this map. We can later look for and extract that data.\n-    previous_work_products: FxHashMap<WorkProductId, WorkProduct>,\n+    previous_work_products: FxIndexMap<WorkProductId, WorkProduct>,\n \n     dep_node_debug: Lock<FxHashMap<DepNode<K>, String>>,\n \n@@ -116,7 +116,7 @@ impl<K: DepKind> DepGraph<K> {\n     pub fn new(\n         profiler: &SelfProfilerRef,\n         prev_graph: SerializedDepGraph<K>,\n-        prev_work_products: FxHashMap<WorkProductId, WorkProduct>,\n+        prev_work_products: FxIndexMap<WorkProductId, WorkProduct>,\n         encoder: FileEncoder,\n         record_graph: bool,\n         record_stats: bool,\n@@ -688,7 +688,7 @@ impl<K: DepKind> DepGraph<K> {\n \n     /// Access the map of work-products created during the cached run. Only\n     /// used during saving of the dep-graph.\n-    pub fn previous_work_products(&self) -> &FxHashMap<WorkProductId, WorkProduct> {\n+    pub fn previous_work_products(&self) -> &FxIndexMap<WorkProductId, WorkProduct> {\n         &self.data.as_ref().unwrap().previous_work_products\n     }\n \n@@ -1048,7 +1048,7 @@ pub struct WorkProduct {\n     ///\n     /// By convention, file extensions are currently used as identifiers, i.e. the key \"o\" maps to\n     /// the object file's path, and \"dwo\" to the dwarf object file's path.\n-    pub saved_files: FxHashMap<String, String>,\n+    pub saved_files: FxIndexMap<String, String>,\n }\n \n // Index type for `DepNodeData`'s edges."}]}