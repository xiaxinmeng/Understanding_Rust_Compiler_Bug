{"sha": "4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMDNiNGQyZjBlOTY3YjA2ODFiYmRiNTlmYTgyNzFlZDNiZTAzNGY=", "commit": {"author": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-04-06T18:10:41Z"}, "committer": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-04-18T06:32:13Z"}, "message": "Added final lint and tests", "tree": {"sha": "d927ddf74b9bf434a139f763ba0877087c34d94c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d927ddf74b9bf434a139f763ba0877087c34d94c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "html_url": "https://github.com/rust-lang/rust/commit/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/comments", "author": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "html_url": "https://github.com/rust-lang/rust/commit/7c52e51d79696ae99e4f8499bb51f81b464d5a1a"}], "stats": {"total": 704, "additions": 660, "deletions": 44}, "files": [{"sha": "155a93de4facfd5aeaef5a3e77397e6bd3c345c1", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 117, "deletions": 34, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{higher, in_macro, span_lint_and_sugg};\n+use crate::utils::{higher, in_macro, match_qpath, span_lint_and_sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -9,17 +9,17 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// **What it does:** Checks for implicit saturating subtraction.\n     ///\n-    /// **Why is this bad?** Simplicity and readability. Instead we can easily use an inbuilt function.\n+    /// **Why is this bad?** Simplicity and readability. Instead we can easily use an builtin function.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// let end = 10;\n-    /// let start = 5;\n+    /// let end: u32 = 10;\n+    /// let start: u32 = 5;\n     ///\n-    /// let mut i = end - start;\n+    /// let mut i: u32 = end - start;\n     ///\n     /// // Bad\n     /// if i != 0 {\n@@ -28,13 +28,13 @@ declare_clippy_lint! {\n     /// ```\n     /// Use instead:\n     /// ```rust\n-    /// let end = 10;\n-    /// let start = 5;\n+    /// let end: u32 = 10;\n+    /// let start: u32 = 5;\n     ///\n-    /// let mut i = end - start;\n+    /// let mut i: u32 = end - start;\n     ///\n     /// // Good\n-    /// i.saturating_sub(1);\n+    /// i = i.saturating_sub(1);\n     /// ```\n     pub IMPLICIT_SATURATING_SUB,\n     pedantic,\n@@ -50,41 +50,124 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitSaturatingSub {\n         }\n         if_chain! {\n             if let Some((ref cond, ref then, None)) = higher::if_block(&expr);\n+\n             // Check if the conditional expression is a binary operation\n-            if let ExprKind::Binary(ref op, ref left, ref right) = cond.kind;\n-            // Ensure that the binary operator is > or !=\n-            if BinOpKind::Ne == op.node || BinOpKind::Gt == op.node;\n-            if let ExprKind::Path(ref cond_path) = left.kind;\n-            // Get the literal on the right hand side\n-            if let ExprKind::Lit(ref lit) = right.kind;\n-            if let LitKind::Int(0, _) = lit.node;\n+            if let ExprKind::Binary(ref cond_op, ref cond_left, ref cond_right) = cond.kind;\n+\n+            // Ensure that the binary operator is >, != and <\n+            if BinOpKind::Ne == cond_op.node || BinOpKind::Gt == cond_op.node || BinOpKind::Lt == cond_op.node;\n+\n             // Check if the true condition block has only one statement\n             if let ExprKind::Block(ref block, _) = then.kind;\n-            if block.stmts.len() == 1;\n+            if block.stmts.len() == 1 && block.expr.is_none();\n+\n             // Check if assign operation is done\n             if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n-            if let ExprKind::AssignOp(ref op1, ref target, ref value) = e.kind;\n-            if BinOpKind::Sub == op1.node;\n+            if let Some(target) = subtracts_one(cx, e);\n+\n+            // Extracting out the variable name\n             if let ExprKind::Path(ref assign_path) = target.kind;\n-            // Check if the variable in the condition and assignment statement are the same\n-            if let (QPath::Resolved(_, ref cres_path), QPath::Resolved(_, ref ares_path)) = (cond_path, assign_path);\n-            if cres_path.res == ares_path.res;\n-            if let ExprKind::Lit(ref lit1) = value.kind;\n-            if let LitKind::Int(assign_lit, _) = lit1.node;\n+            if let QPath::Resolved(_, ref ares_path) = assign_path;\n+\n             then {\n+                // Handle symmetric conditions in the if statement\n+                let (cond_var, cond_num_val) = if SpanlessEq::new(cx).eq_expr(cond_left, target) {\n+                    if BinOpKind::Gt == cond_op.node || BinOpKind::Ne == cond_op.node {\n+                        (cond_left, cond_right)\n+                    } else {\n+                        return;\n+                    }\n+                } else if SpanlessEq::new(cx).eq_expr(cond_right, target) {\n+                    if BinOpKind::Lt == cond_op.node || BinOpKind::Ne == cond_op.node {\n+                        (cond_right, cond_left)\n+                    } else {\n+                        return;\n+                    }\n+                } else {\n+                    return;\n+                };\n+\n+                // Check if the variable in the condition statement is an integer\n+                if !cx.tables.expr_ty(cond_var).is_integral() {\n+                    return;\n+                }\n+\n                 // Get the variable name\n                 let var_name = ares_path.segments[0].ident.name.as_str();\n-                let applicability = Applicability::MaybeIncorrect;\n-                span_lint_and_sugg(\n-                    cx,\n-                    IMPLICIT_SATURATING_SUB,\n-                    expr.span,\n-                    \"Implicitly performing saturating subtraction\",\n-                    \"try\",\n-                    format!(\"{}.saturating_sub({});\", var_name, assign_lit.to_string()),\n-                    applicability\n-                );\n+                const INT_TYPES: [&str; 5] = [\"i8\", \"i16\", \"i32\", \"i64\", \"i128\"];\n+\n+                match cond_num_val.kind {\n+                    ExprKind::Lit(ref cond_lit) => {\n+                        // Check if the constant is zero\n+                        if let LitKind::Int(0, _) = cond_lit.node {\n+                            if cx.tables.expr_ty(cond_left).is_signed() {\n+                            } else {\n+                                print_lint_and_sugg(cx, &var_name, expr);\n+                            };\n+                        }\n+                    },\n+                    ExprKind::Path(ref cond_num_path) => {\n+                        if INT_TYPES.iter().any(|int_type| match_qpath(cond_num_path, &[int_type, \"MIN\"])) {\n+                            print_lint_and_sugg(cx, &var_name, expr);\n+                        };\n+                    },\n+                    ExprKind::Call(ref func, _) => {\n+                        if let ExprKind::Path(ref cond_num_path) = func.kind {\n+                            if INT_TYPES.iter().any(|int_type| match_qpath(cond_num_path, &[int_type, \"min_value\"])) {\n+                                print_lint_and_sugg(cx, &var_name, expr);\n+                            }\n+                        };\n+                    },\n+                    _ => (),\n+                }\n             }\n         }\n     }\n }\n+\n+fn subtracts_one<'a>(cx: &LateContext<'_, '_>, expr: &Expr<'a>) -> Option<&'a Expr<'a>> {\n+    match expr.kind {\n+        ExprKind::AssignOp(ref op1, ref target, ref value) => {\n+            if_chain! {\n+                if BinOpKind::Sub == op1.node;\n+                // Check if literal being subtracted is one\n+                if let ExprKind::Lit(ref lit1) = value.kind;\n+                if let LitKind::Int(1, _) = lit1.node;\n+                then {\n+                    Some(target)\n+                } else {\n+                    None\n+                }\n+            }\n+        },\n+        ExprKind::Assign(ref target, ref value, _) => {\n+            if_chain! {\n+                if let ExprKind::Binary(ref op1, ref left1, ref right1) = value.kind;\n+                if BinOpKind::Sub == op1.node;\n+\n+                if SpanlessEq::new(cx).eq_expr(left1, target);\n+\n+                if let ExprKind::Lit(ref lit1) = right1.kind;\n+                if let LitKind::Int(1, _) = lit1.node;\n+                then {\n+                    Some(target)\n+                } else {\n+                    None\n+                }\n+            }\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn print_lint_and_sugg(cx: &LateContext<'_, '_>, var_name: &str, expr: &Expr<'_>) {\n+    span_lint_and_sugg(\n+        cx,\n+        IMPLICIT_SATURATING_SUB,\n+        expr.span,\n+        \"Implicitly performing saturating subtraction\",\n+        \"try\",\n+        format!(\"{} = {}.saturating_sub({});\", var_name, var_name, 1.to_string()),\n+        Applicability::MachineApplicable,\n+    );\n+}"}, {"sha": "830d180442e57abb96db422b2be776a736200e0a", "filename": "tests/ui/implicit_saturating_sub.fixed", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/tests%2Fui%2Fimplicit_saturating_sub.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/tests%2Fui%2Fimplicit_saturating_sub.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.fixed?ref=4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "patch": "@@ -0,0 +1,160 @@\n+// run-rustfix\n+#![allow(unused_assignments, unused_mut)]\n+#![warn(clippy::implicit_saturating_sub)]\n+\n+fn main() {\n+    // Tests for unsigned integers\n+\n+    let end_8: u8 = 10;\n+    let start_8: u8 = 5;\n+    let mut u_8: u8 = end_8 - start_8;\n+\n+    // Lint\n+    u_8 = u_8.saturating_sub(1);\n+\n+    match end_8 {\n+        10 => {\n+            // Lint\n+            u_8 = u_8.saturating_sub(1);\n+        },\n+        11 => u_8 += 1,\n+        _ => u_8 = 0,\n+    }\n+\n+    let end_16: u16 = 35;\n+    let start_16: u16 = 40;\n+\n+    let mut u_16: u16 = end_16 - start_16;\n+\n+    // Lint\n+    u_16 = u_16.saturating_sub(1);\n+\n+    let mut end_32: u32 = 7000;\n+    let mut start_32: u32 = 7010;\n+\n+    let mut u_32: u32 = end_32 - start_32;\n+\n+    // Lint\n+    u_32 = u_32.saturating_sub(1);\n+\n+    // No Lint\n+    if u_32 > 0 {\n+        u_16 += 1;\n+    }\n+\n+    // No Lint\n+    if u_32 != 0 {\n+        end_32 -= 1;\n+        start_32 += 1;\n+    }\n+\n+    let mut end_64: u64 = 75001;\n+    let mut start_64: u64 = 75000;\n+\n+    let mut u_64: u64 = end_64 - start_64;\n+\n+    // Lint\n+    u_64 = u_64.saturating_sub(1);\n+\n+    // Lint\n+    u_64 = u_64.saturating_sub(1);\n+\n+    // Lint\n+    u_64 = u_64.saturating_sub(1);\n+\n+    // No Lint\n+    if u_64 >= 1 {\n+        u_64 -= 1;\n+    }\n+\n+    // No Lint\n+    if u_64 > 0 {\n+        end_64 -= 1;\n+    }\n+\n+    // Tests for usize\n+    let end_usize: usize = 8054;\n+    let start_usize: usize = 8050;\n+\n+    let mut u_usize: usize = end_usize - start_usize;\n+\n+    // Lint\n+    u_usize = u_usize.saturating_sub(1);\n+\n+    // Tests for signed integers\n+\n+    let endi_8: i8 = 10;\n+    let starti_8: i8 = 50;\n+\n+    let mut i_8: i8 = endi_8 - starti_8;\n+\n+    // Lint\n+    i_8 = i_8.saturating_sub(1);\n+\n+    // Lint\n+    i_8 = i_8.saturating_sub(1);\n+\n+    // Lint\n+    i_8 = i_8.saturating_sub(1);\n+\n+    // Lint\n+    i_8 = i_8.saturating_sub(1);\n+\n+    let endi_16: i16 = 45;\n+    let starti_16: i16 = 44;\n+\n+    let mut i_16: i16 = endi_16 - starti_16;\n+\n+    // Lint\n+    i_16 = i_16.saturating_sub(1);\n+\n+    // Lint\n+    i_16 = i_16.saturating_sub(1);\n+\n+    // Lint\n+    i_16 = i_16.saturating_sub(1);\n+\n+    // Lint\n+    i_16 = i_16.saturating_sub(1);\n+\n+    let endi_32: i32 = 45;\n+    let starti_32: i32 = 44;\n+\n+    let mut i_32: i32 = endi_32 - starti_32;\n+\n+    // Lint\n+    i_32 = i_32.saturating_sub(1);\n+\n+    // Lint\n+    i_32 = i_32.saturating_sub(1);\n+\n+    // Lint\n+    i_32 = i_32.saturating_sub(1);\n+\n+    // Lint\n+    i_32 = i_32.saturating_sub(1);\n+\n+    let endi_64: i64 = 45;\n+    let starti_64: i64 = 44;\n+\n+    let mut i_64: i64 = endi_64 - starti_64;\n+\n+    // Lint\n+    i_64 = i_64.saturating_sub(1);\n+\n+    // Lint\n+    i_64 = i_64.saturating_sub(1);\n+\n+    // Lint\n+    i_64 = i_64.saturating_sub(1);\n+\n+    // No Lint\n+    if i_64 > 0 {\n+        i_64 -= 1;\n+    }\n+\n+    // No Lint\n+    if i_64 != 0 {\n+        i_64 -= 1;\n+    }\n+}"}, {"sha": "36da4f97163a4922faced679de4fa006dfd63ff4", "filename": "tests/ui/implicit_saturating_sub.rs", "status": "modified", "additions": 195, "deletions": 10, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/tests%2Fui%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/tests%2Fui%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.rs?ref=4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "patch": "@@ -1,21 +1,206 @@\n+// run-rustfix\n+#![allow(unused_assignments, unused_mut)]\n #![warn(clippy::implicit_saturating_sub)]\n \n fn main() {\n-    let mut end = 10;\n-    let mut start = 5;\n-    let mut i: u32 = end - start;\n+    // Tests for unsigned integers\n \n-    if i > 0 {\n-        i -= 1;\n+    let end_8: u8 = 10;\n+    let start_8: u8 = 5;\n+    let mut u_8: u8 = end_8 - start_8;\n+\n+    // Lint\n+    if u_8 > 0 {\n+        u_8 -= 1;\n     }\n \n-    match end {\n+    match end_8 {\n         10 => {\n-            if i > 0 {\n-                i -= 1;\n+            // Lint\n+            if u_8 > 0 {\n+                u_8 -= 1;\n             }\n         },\n-        11 => i += 1,\n-        _ => i = 0,\n+        11 => u_8 += 1,\n+        _ => u_8 = 0,\n+    }\n+\n+    let end_16: u16 = 35;\n+    let start_16: u16 = 40;\n+\n+    let mut u_16: u16 = end_16 - start_16;\n+\n+    // Lint\n+    if u_16 > 0 {\n+        u_16 -= 1;\n+    }\n+\n+    let mut end_32: u32 = 7000;\n+    let mut start_32: u32 = 7010;\n+\n+    let mut u_32: u32 = end_32 - start_32;\n+\n+    // Lint\n+    if u_32 != 0 {\n+        u_32 -= 1;\n+    }\n+\n+    // No Lint\n+    if u_32 > 0 {\n+        u_16 += 1;\n+    }\n+\n+    // No Lint\n+    if u_32 != 0 {\n+        end_32 -= 1;\n+        start_32 += 1;\n+    }\n+\n+    let mut end_64: u64 = 75001;\n+    let mut start_64: u64 = 75000;\n+\n+    let mut u_64: u64 = end_64 - start_64;\n+\n+    // Lint\n+    if u_64 > 0 {\n+        u_64 -= 1;\n+    }\n+\n+    // Lint\n+    if 0 < u_64 {\n+        u_64 -= 1;\n+    }\n+\n+    // Lint\n+    if 0 != u_64 {\n+        u_64 -= 1;\n+    }\n+\n+    // No Lint\n+    if u_64 >= 1 {\n+        u_64 -= 1;\n+    }\n+\n+    // No Lint\n+    if u_64 > 0 {\n+        end_64 -= 1;\n+    }\n+\n+    // Tests for usize\n+    let end_usize: usize = 8054;\n+    let start_usize: usize = 8050;\n+\n+    let mut u_usize: usize = end_usize - start_usize;\n+\n+    // Lint\n+    if u_usize > 0 {\n+        u_usize -= 1;\n+    }\n+\n+    // Tests for signed integers\n+\n+    let endi_8: i8 = 10;\n+    let starti_8: i8 = 50;\n+\n+    let mut i_8: i8 = endi_8 - starti_8;\n+\n+    // Lint\n+    if i_8 > i8::MIN {\n+        i_8 -= 1;\n+    }\n+\n+    // Lint\n+    if i_8 > i8::min_value() {\n+        i_8 -= 1;\n+    }\n+\n+    // Lint\n+    if i_8 != i8::MIN {\n+        i_8 -= 1;\n+    }\n+\n+    // Lint\n+    if i_8 != i8::min_value() {\n+        i_8 -= 1;\n+    }\n+\n+    let endi_16: i16 = 45;\n+    let starti_16: i16 = 44;\n+\n+    let mut i_16: i16 = endi_16 - starti_16;\n+\n+    // Lint\n+    if i_16 > i16::MIN {\n+        i_16 -= 1;\n+    }\n+\n+    // Lint\n+    if i_16 > i16::min_value() {\n+        i_16 -= 1;\n+    }\n+\n+    // Lint\n+    if i_16 != i16::MIN {\n+        i_16 -= 1;\n+    }\n+\n+    // Lint\n+    if i_16 != i16::min_value() {\n+        i_16 -= 1;\n+    }\n+\n+    let endi_32: i32 = 45;\n+    let starti_32: i32 = 44;\n+\n+    let mut i_32: i32 = endi_32 - starti_32;\n+\n+    // Lint\n+    if i_32 > i32::MIN {\n+        i_32 -= 1;\n+    }\n+\n+    // Lint\n+    if i_32 > i32::min_value() {\n+        i_32 -= 1;\n+    }\n+\n+    // Lint\n+    if i_32 != i32::MIN {\n+        i_32 -= 1;\n+    }\n+\n+    // Lint\n+    if i_32 != i32::min_value() {\n+        i_32 -= 1;\n+    }\n+\n+    let endi_64: i64 = 45;\n+    let starti_64: i64 = 44;\n+\n+    let mut i_64: i64 = endi_64 - starti_64;\n+\n+    // Lint\n+    if i64::min_value() < i_64 {\n+        i_64 -= 1;\n+    }\n+\n+    // Lint\n+    if i64::MIN != i_64 {\n+        i_64 -= 1;\n+    }\n+\n+    // Lint\n+    if i64::MIN < i_64 {\n+        i_64 -= 1;\n+    }\n+\n+    // No Lint\n+    if i_64 > 0 {\n+        i_64 -= 1;\n+    }\n+\n+    // No Lint\n+    if i_64 != 0 {\n+        i_64 -= 1;\n     }\n }"}, {"sha": "256dbe0c245f4c82c0a88cdf2fd2d5af5260311f", "filename": "tests/ui/implicit_saturating_sub.stderr", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/tests%2Fui%2Fimplicit_saturating_sub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d03b4d2f0e967b0681bbdb59fa8271ed3be034f/tests%2Fui%2Fimplicit_saturating_sub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.stderr?ref=4d03b4d2f0e967b0681bbdb59fa8271ed3be034f", "patch": "@@ -0,0 +1,188 @@\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:13:5\n+   |\n+LL | /     if u_8 > 0 {\n+LL | |         u_8 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_8 = u_8.saturating_sub(1);`\n+   |\n+   = note: `-D clippy::implicit-saturating-sub` implied by `-D warnings`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:20:13\n+   |\n+LL | /             if u_8 > 0 {\n+LL | |                 u_8 -= 1;\n+LL | |             }\n+   | |_____________^ help: try: `u_8 = u_8.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:34:5\n+   |\n+LL | /     if u_16 > 0 {\n+LL | |         u_16 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_16 = u_16.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:44:5\n+   |\n+LL | /     if u_32 != 0 {\n+LL | |         u_32 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_32 = u_32.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:65:5\n+   |\n+LL | /     if u_64 > 0 {\n+LL | |         u_64 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_64 = u_64.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:70:5\n+   |\n+LL | /     if 0 < u_64 {\n+LL | |         u_64 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_64 = u_64.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:75:5\n+   |\n+LL | /     if 0 != u_64 {\n+LL | |         u_64 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_64 = u_64.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:96:5\n+   |\n+LL | /     if u_usize > 0 {\n+LL | |         u_usize -= 1;\n+LL | |     }\n+   | |_____^ help: try: `u_usize = u_usize.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:108:5\n+   |\n+LL | /     if i_8 > i8::MIN {\n+LL | |         i_8 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:113:5\n+   |\n+LL | /     if i_8 > i8::min_value() {\n+LL | |         i_8 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:118:5\n+   |\n+LL | /     if i_8 != i8::MIN {\n+LL | |         i_8 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:123:5\n+   |\n+LL | /     if i_8 != i8::min_value() {\n+LL | |         i_8 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_8 = i_8.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:133:5\n+   |\n+LL | /     if i_16 > i16::MIN {\n+LL | |         i_16 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:138:5\n+   |\n+LL | /     if i_16 > i16::min_value() {\n+LL | |         i_16 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:143:5\n+   |\n+LL | /     if i_16 != i16::MIN {\n+LL | |         i_16 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:148:5\n+   |\n+LL | /     if i_16 != i16::min_value() {\n+LL | |         i_16 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_16 = i_16.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:158:5\n+   |\n+LL | /     if i_32 > i32::MIN {\n+LL | |         i_32 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:163:5\n+   |\n+LL | /     if i_32 > i32::min_value() {\n+LL | |         i_32 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:168:5\n+   |\n+LL | /     if i_32 != i32::MIN {\n+LL | |         i_32 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:173:5\n+   |\n+LL | /     if i_32 != i32::min_value() {\n+LL | |         i_32 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_32 = i_32.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:183:5\n+   |\n+LL | /     if i64::min_value() < i_64 {\n+LL | |         i_64 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_64 = i_64.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:188:5\n+   |\n+LL | /     if i64::MIN != i_64 {\n+LL | |         i_64 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_64 = i_64.saturating_sub(1);`\n+\n+error: Implicitly performing saturating subtraction\n+  --> $DIR/implicit_saturating_sub.rs:193:5\n+   |\n+LL | /     if i64::MIN < i_64 {\n+LL | |         i_64 -= 1;\n+LL | |     }\n+   | |_____^ help: try: `i_64 = i_64.saturating_sub(1);`\n+\n+error: aborting due to 23 previous errors\n+"}]}