{"sha": "98a483423720bda1f51a22f01b378fa8e8e8b9a3", "node_id": "C_kwDOAAsO6NoAKDk4YTQ4MzQyMzcyMGJkYTFmNTFhMjJmMDFiMzc4ZmE4ZThlOGI5YTM", "commit": {"author": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-02T19:07:00Z"}, "committer": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-08T15:41:28Z"}, "message": "Split `fuzzy_provenance_casts` into lossy and fuzzy, feature gate and test it\n\n* split `fuzzy_provenance_casts` into a ptr2int and a int2ptr lint\n* feature gate both lints\n* update documentation to be more realistic short term\n* add tests for these lints", "tree": {"sha": "e50134ec6c786368347afef03cc053a7d5ca4d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e50134ec6c786368347afef03cc053a7d5ca4d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a483423720bda1f51a22f01b378fa8e8e8b9a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a483423720bda1f51a22f01b378fa8e8e8b9a3", "html_url": "https://github.com/rust-lang/rust/commit/98a483423720bda1f51a22f01b378fa8e8e8b9a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a483423720bda1f51a22f01b378fa8e8e8b9a3/comments", "author": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7", "html_url": "https://github.com/rust-lang/rust/commit/1040cab53b95aa47c2ea8e1a6de73eddadc57aa7"}], "stats": {"total": 316, "additions": 281, "deletions": 35}, "files": [{"sha": "8340a0b360ef7f08549580373253d327ba5ba640", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -505,6 +505,8 @@ declare_features! (\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n     /// Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n+    /// Allows lints part of the strict provenance effort.\n+    (active, strict_provenance, \"1.61.0\", Some(95228), None),\n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n     /// Allows using `#[thread_local]` on `static` items."}, {"sha": "89ce307d12cd707f0bc6bc550bf64baf0aea5add", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 72, "deletions": 16, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -2654,33 +2654,88 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n+    /// ```rust\n+    /// #![feature(strict_provenance)]\n+    /// #![warn(fuzzy_provenance_casts)]\n+    ///\n     /// fn main() {\n-    ///     let my_ref = &0;\n-    ///     let my_addr = my_ref as usize;\n+    ///     let _dangling = 16_usize as *const u8;\n     /// }\n     /// ```\n     ///\n     /// {{produces}}\n     ///\n     /// ### Explanation\n     ///\n-    /// Casting a pointer to an integer or an integer to a pointer is a lossy operation,\n-    /// because beyond just an *address* a pointer may be associated with a particular\n-    /// *provenance* and *segment*. This information is required by both the compiler\n-    /// and the hardware to correctly execute your code. If you need to do this kind\n-    /// of operation, use ptr::addr and ptr::with_addr.\n+    /// This lint is part of the strict provenance effort, see [issue #95228].\n+    /// Casting an integer to a pointer is considered bad style, as a pointer\n+    /// contains, besides the *address* also a *provenance*, indicating what\n+    /// memory the pointer is allowed to read/write. Casting an integer, which\n+    /// doesn't have provenance, to a pointer requires the compiler to assign\n+    /// (guess) provenance. The compiler assigns \"all exposed valid\" (see the\n+    /// docs of [`ptr::from_exposed_addr`] for more information about this\n+    /// \"exposing\"). This penalizes the optimiser and is not well suited for\n+    /// dynamic analysis/dynamic program verification (e.g. Miri or CHERI\n+    /// platforms).\n     ///\n-    /// This is a [future-incompatible] lint to transition this to a hard error\n-    /// in the future. See [issue #9999999] for more details.\n+    /// It is much better to use [`ptr::with_addr`] instead to specify the\n+    /// provenance you want. If using this function is not possible because the\n+    /// code relies on exposed provenance then there is as an escape hatch\n+    /// [`ptr::from_exposed_addr`].\n     ///\n-    /// [future-incompatible]: ../index.md#future-incompatible-lints\n-    /// [issue #9999999]: https://github.com/rust-lang/rust/issues/9999999\n+    /// [issue #95228]: https://github.com/rust-lang/rust/issues/95228\n+    /// [`ptr::with_addr`]: https://doc.rust-lang.org/core/ptr/fn.with_addr\n+    /// [`ptr::from_exposed_addr`]: https://doc.rust-lang.org/core/ptr/fn.from_exposed_addr\n     pub FUZZY_PROVENANCE_CASTS,\n-    Warn,\n-    \"A lossy pointer-integer integer cast is used\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #9999999 <https://github.com/rust-lang/rust/issues/9999999>\",\n-    };\n+    Allow,\n+    \"a fuzzy integer to pointer cast is used\",\n+    @feature_gate = sym::strict_provenance;\n+}\n+\n+declare_lint! {\n+    /// The `lossy_provenance_casts` lint detects an `as` cast between a pointer\n+    /// and an integer.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(strict_provenance)]\n+    /// #![warn(lossy_provenance_casts)]\n+    ///\n+    /// fn main() {\n+    ///     let x: u8 = 37;\n+    ///     let _addr: usize = &x as *const u8 as usize;\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This lint is part of the strict provenance effort, see [issue #95228].\n+    /// Casting a pointer to an integer is a lossy operation, because beyond\n+    /// just an *address* a pointer may be associated with a particular\n+    /// *provenance*. This information is used by the optimiser and for dynamic\n+    /// analysis/dynamic program verification (e.g. Miri or CHERI platforms).\n+    ///\n+    /// Since this cast is lossy, it is considered good style to use the\n+    /// [`ptr::addr`] method instead, which has a similar effect, but doesn't\n+    /// \"expose\" the pointer provenance. This improves optimisation potential.\n+    /// See the docs of [`ptr::addr`] and [`ptr::expose_addr`] for more information\n+    /// about exposing pointer provenance.\n+    ///\n+    /// If your code can't comply with strict provenance and needs to expose\n+    /// the provenance, then there is [`ptr::expose_addr`] as an escape hatch,\n+    /// which preserves the behaviour of `as usize` casts while being explicit\n+    /// about the semantics.\n+    ///\n+    /// [issue #95228]: https://github.com/rust-lang/rust/issues/95228\n+    /// [`ptr::addr`]: https://doc.rust-lang.org/core/ptr/fn.addr\n+    /// [`ptr::expose_addr`]: https://doc.rust-lang.org/core/ptr/fn.expose_addr\n+    pub LOSSY_PROVENANCE_CASTS,\n+    Allow,\n+    \"a lossy pointer to integer cast is used\",\n+    @feature_gate = sym::strict_provenance;\n }\n \n declare_lint! {\n@@ -3137,6 +3192,7 @@ declare_lint_pass! {\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n         FUZZY_PROVENANCE_CASTS,\n+        LOSSY_PROVENANCE_CASTS,\n         CONST_EVALUATABLE_UNCHECKED,\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n         MUST_NOT_SUSPEND,"}, {"sha": "dc4d10f699c7517b7e8a900d26c8c6051d369367", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -1348,6 +1348,7 @@ symbols! {\n         str_trim,\n         str_trim_end,\n         str_trim_start,\n+        strict_provenance,\n         stringify,\n         stringify_macro,\n         struct_field_attributes,"}, {"sha": "6091b8fee00b679f8ad0d57da0146a1696976aff", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -809,12 +809,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n \n             // ptr-addr-cast\n-            (Ptr(m_expr), Int(_)) => {\n-                self.fuzzy_provenance_ptr2int_lint(fcx, t_from);\n+            (Ptr(m_expr), Int(t_c)) => {\n+                self.lossy_provenance_ptr2int_lint(fcx, t_c);\n                 self.check_ptr_addr_cast(fcx, m_expr)\n             }\n             (FnPtr, Int(_)) => {\n-                self.fuzzy_provenance_ptr2int_lint(fcx, t_from);\n+                // FIXME(#95489): there should eventually be a lint for these casts\n                 Ok(CastKind::FnPtrAddrCast)\n             }\n             // addr-ptr-cast\n@@ -945,7 +945,6 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         fcx: &FnCtxt<'a, 'tcx>,\n         m_cast: TypeAndMut<'tcx>,\n     ) -> Result<CastKind, CastError> {\n-        self.fuzzy_provenance_int2ptr_lint(fcx);\n         // ptr-addr cast. pointer must be thin.\n         match fcx.pointer_kind(m_cast.ty, self.span)? {\n             None => Err(CastError::UnknownCastPtrKind),\n@@ -986,25 +985,36 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         }\n     }\n \n-    fn fuzzy_provenance_ptr2int_lint(&self, fcx: &FnCtxt<'a, 'tcx>, t_from: CastTy<'tcx>) {\n+    fn lossy_provenance_ptr2int_lint(&self, fcx: &FnCtxt<'a, 'tcx>, t_c: ty::cast::IntTy) {\n         fcx.tcx.struct_span_lint_hir(\n-            lint::builtin::FUZZY_PROVENANCE_CASTS,\n+            lint::builtin::LOSSY_PROVENANCE_CASTS,\n             self.expr.hir_id,\n             self.span,\n             |err| {\n                 let mut err = err.build(&format!(\n-                    \"strict provenance disallows casting pointer `{}` to integer `{}`\",\n+                    \"under strict provenance it is considered bad style to cast pointer `{}` to integer `{}`\",\n                     self.expr_ty, self.cast_ty\n                 ));\n \n-                if let CastTy::FnPtr = t_from {\n-                    err.help(\n-                        \"use `(... as *const u8).addr()` to obtain \\\n-                         the address of a function pointer\",\n+                let msg = \"use `.addr()` to obtain the address of a pointer\";\n+                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                    let scalar_cast = match t_c {\n+                        ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n+                        _ => format!(\" as {}\", self.cast_ty),\n+                    };\n+                    err.span_suggestion(\n+                        self.span,\n+                        msg,\n+                        format!(\"({}).addr(){}\", snippet, scalar_cast),\n+                        Applicability::MaybeIncorrect\n                     );\n                 } else {\n-                    err.help(\"use `.addr()` to obtain the address of a pointer\");\n+                    err.help(msg);\n                 }\n+                err.help(\n+                    \"if you can't comply with strict provenance and need to expose the pointer\\\n+                    provenance you can use `.expose_addr()` instead\"\n+                );\n \n                 err.emit();\n             },\n@@ -1017,15 +1027,28 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             self.expr.hir_id,\n             self.span,\n             |err| {\n-                err.build(&format!(\n+\n+                let mut err = err.build(&format!(\n                     \"strict provenance disallows casting integer `{}` to pointer `{}`\",\n                     self.expr_ty, self.cast_ty\n-                ))\n-                .help(\n-                    \"use `.with_addr(...)` to adjust a valid pointer \\\n-                     in the same allocation, to this address\",\n-                )\n-                .emit();\n+                ));\n+                let msg = \"use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\";\n+                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                    err.span_suggestion(\n+                        self.span,\n+                        msg,\n+                        format!(\"(...).with_addr({})\", snippet),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                } else {\n+                    err.help(msg);\n+                }\n+                err.help(\n+                    \"if you can't comply with strict provenance and don't have a pointer with \\\n+                    the correct provenance you can use `std::ptr::from_exposed_addr()` instead\"\n+                 );\n+\n+                err.emit();\n             },\n         );\n     }"}, {"sha": "dc60f3f375d3c5b3bfad30fbd210e827380d33dc", "filename": "src/doc/unstable-book/src/language-features/strict-provenance.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstrict-provenance.md", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstrict-provenance.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstrict-provenance.md?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,22 @@\n+# `strict_provenance`\n+\n+The tracking issue for this feature is: [#95228]\n+\n+[#95228]: https://github.com/rust-lang/rust/issues/95228\n+-----\n+\n+The `strict_provenance` feature allows to enable the `fuzzy_provenance_casts` and `lossy_provenance_casts` lints.\n+These lint on casts between integers and pointers, that are recommended against or invalid in the strict provenance model.\n+The same feature gate is also used for the experimental strict provenance API in `std` (actually `core`).\n+\n+## Example\n+\n+```rust\n+#![feature(strict_provenance)]\n+#![warn(fuzzy_provenance_casts)]\n+\n+fn main() {\n+    let _dangling = 16_usize as *const u8;\n+    //~^ WARNING: strict provenance disallows casting integer `usize` to pointer `*const u8`\n+}\n+```"}, {"sha": "75d0ee5700d075af3f05920c77163935ae01a10c", "filename": "src/test/ui/feature-gates/feature-gate-strict_provenance.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![deny(fuzzy_provenance_casts)]\n+//~^ WARNING unknown lint: `fuzzy_provenance_casts`\n+//~| WARNING unknown lint: `fuzzy_provenance_casts`\n+//~| WARNING unknown lint: `fuzzy_provenance_casts`\n+#![deny(lossy_provenance_casts)]\n+//~^ WARNING unknown lint: `lossy_provenance_casts`\n+//~| WARNING unknown lint: `lossy_provenance_casts`\n+//~| WARNING unknown lint: `lossy_provenance_casts`\n+\n+fn main() {\n+    // no warnings emitted since the lints are not activated\n+\n+    let _dangling = 16_usize as *const u8;\n+\n+    let x: u8 = 37;\n+    let _addr: usize = &x as *const u8 as usize;\n+}"}, {"sha": "34bd240c304a744edc68c084d678286d79fa8193", "filename": "src/test/ui/feature-gates/feature-gate-strict_provenance.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,63 @@\n+warning: unknown lint: `fuzzy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:3:1\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `fuzzy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `lossy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:7:1\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `lossy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `fuzzy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:3:1\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `fuzzy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `lossy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:7:1\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `lossy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `fuzzy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:3:1\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `fuzzy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `lossy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:7:1\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `lossy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "d2d72a68f139676a3d9f20a988348a3b4c1ac7e9", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,7 @@\n+#![feature(strict_provenance)]\n+#![deny(fuzzy_provenance_casts)]\n+\n+fn main() {\n+    let dangling = 16_usize as *const u8;\n+    //~^ ERROR strict provenance disallows casting integer `usize` to pointer `*const u8`\n+}"}, {"sha": "e50d243b6ad6db566de4cae586a49cb47d3261e2", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,19 @@\n+error: strict provenance disallows casting integer `usize` to pointer `*const u8`\n+  --> $DIR/lint-strict-provenance-fuzzy-casts.rs:5:20\n+   |\n+LL |     let dangling = 16_usize as *const u8;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-strict-provenance-fuzzy-casts.rs:2:9\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: if you can't comply with strict provenance and don't have a pointer with the correct provenance you can use `std::ptr::from_exposed_addr()` instead\n+help: use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\n+   |\n+LL |     let dangling = (...).with_addr(16_usize);\n+   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "3690fbc904d9933927825de609ffba6f6c8b74ee", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,11 @@\n+#![feature(strict_provenance)]\n+#![deny(lossy_provenance_casts)]\n+\n+fn main() {\n+    let x: u8 = 37;\n+    let addr: usize = &x as *const u8 as usize;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+\n+    let addr_32bit = &x as *const u8 as u32;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+}"}, {"sha": "489cb03ddd316352b922a8420619a4f7cc7cf607", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a483423720bda1f51a22f01b378fa8e8e8b9a3/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr?ref=98a483423720bda1f51a22f01b378fa8e8e8b9a3", "patch": "@@ -0,0 +1,23 @@\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:6:23\n+   |\n+LL |     let addr: usize = &x as *const u8 as usize;\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr()`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:2:9\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: if you can't comply with strict provenance and need to expose the pointerprovenance you can use `.expose_addr()` instead\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:9:22\n+   |\n+LL |     let addr_32bit = &x as *const u8 as u32;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr() as u32`\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointerprovenance you can use `.expose_addr()` instead\n+\n+error: aborting due to 2 previous errors\n+"}]}