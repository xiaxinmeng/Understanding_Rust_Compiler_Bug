{"sha": "e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMWE5ZmE1MmEzZjM3MmRhZGQ2ZGIzZDNmMmVkN2RjMjYyMWRjYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-24T04:54:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-24T04:54:10Z"}, "message": "Auto merge of #84501 - JohnTitor:rollup-wxu1thu, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #83990 (implement `TrustedRandomAccess` for `Take` iterator adapter)\n - #84250 (bootstrap: use bash on illumos to run install scripts)\n - #84320 (Use details tag for trait implementors.)\n - #84436 (Make a few functions private)\n - #84453 (Document From implementations for Waker and RawWaker)\n - #84458 (Remove unnecessary fields and parameters in rustdoc)\n - #84485 (Add some associated type bounds tests)\n - #84489 (Mention FusedIterator case in Iterator::fuse doc)\n - #84492 (rustdoc: Remove unnecessary dummy span)\n - #84496 (Add some specialization tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "72d3be050eb98bab8554561f3673961f7fa47ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d3be050eb98bab8554561f3673961f7fa47ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "html_url": "https://github.com/rust-lang/rust/commit/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7aba58e9684175c5c5dfef8277c95ebc43f904a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7aba58e9684175c5c5dfef8277c95ebc43f904a", "html_url": "https://github.com/rust-lang/rust/commit/a7aba58e9684175c5c5dfef8277c95ebc43f904a"}, {"sha": "ec61abf9a98eaab0f83f32be70306559bdea511f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec61abf9a98eaab0f83f32be70306559bdea511f", "html_url": "https://github.com/rust-lang/rust/commit/ec61abf9a98eaab0f83f32be70306559bdea511f"}], "stats": {"total": 476, "additions": 324, "deletions": 152}, "files": [{"sha": "52a6e4ff924f45c61069c83a19670b318d09f03f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -797,7 +797,7 @@ pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n \n-pub fn default_configuration(sess: &Session) -> CrateConfig {\n+fn default_configuration(sess: &Session) -> CrateConfig {\n     let end = &sess.target.endian;\n     let arch = &sess.target.arch;\n     let wordsz = sess.target.pointer_width.to_string();\n@@ -892,7 +892,7 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     user_cfg\n }\n \n-pub fn build_target_config(opts: &Options, target_override: Option<Target>) -> Target {\n+pub(super) fn build_target_config(opts: &Options, target_override: Option<Target>) -> Target {\n     let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple), Ok);\n     let target = target_result.unwrap_or_else(|e| {\n         early_error("}, {"sha": "528ee4ff1542cf5a54cda4d4011847f4244e634c", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -87,6 +87,9 @@ pub trait Wake {\n \n #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n+    /// Use a `Wake`-able type as a `Waker`.\n+    ///\n+    /// No heap allocations or atomic operations are used for this conversion.\n     fn from(waker: Arc<W>) -> Waker {\n         // SAFETY: This is safe because raw_waker safely constructs\n         // a RawWaker from Arc<W>.\n@@ -96,6 +99,9 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n \n #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n+    /// Use a `Wake`-able type as a `RawWaker`.\n+    ///\n+    /// No heap allocations or atomic operations are used for this conversion.\n     fn from(waker: Arc<W>) -> RawWaker {\n         raw_waker(waker)\n     }"}, {"sha": "54a47f1323ebf3f17d03e50318410013e58c54c2", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1,5 +1,8 @@\n use crate::cmp;\n-use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::iter::{\n+    adapters::zip::try_get_unchecked, adapters::SourceIter, FusedIterator, InPlaceIterable,\n+    TrustedLen, TrustedRandomAccess,\n+};\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -111,6 +114,15 @@ where\n \n         self.try_fold(init, ok(fold)).unwrap()\n     }\n+\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <I as Iterator>::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: the caller must uphold the contract for\n+        // `Iterator::__iterator_get_unchecked`.\n+        unsafe { try_get_unchecked(&mut self.iter, idx) }\n+    }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n@@ -207,3 +219,12 @@ impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccess for Take<I>\n+where\n+    I: TrustedRandomAccess,\n+{\n+    const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n+}"}, {"sha": "7977d599ae725a0b88c0d8f478fe6bc5218da415", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1495,7 +1495,12 @@ pub trait Iterator {\n     /// [`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n     /// [`None`] is given, it will always return [`None`] forever.\n     ///\n+    /// Note that the [`Fuse`] wrapper is a no-op on iterators that implement\n+    /// the [`FusedIterator`] trait. `fuse()` may therefore behave incorrectly\n+    /// if the [`FusedIterator`] trait is improperly implemented.\n+    ///\n     /// [`Some(T)`]: Some\n+    /// [`FusedIterator`]: crate::iter::FusedIterator\n     ///\n     /// # Examples\n     ///"}, {"sha": "13ee909afd5e408897a32d1a23395dd0efe5629e", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -17,6 +17,11 @@ use crate::Compiler;\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::{Config, TargetSelection};\n \n+#[cfg(target_os = \"illumos\")]\n+const SHELL: &str = \"bash\";\n+#[cfg(not(target_os = \"illumos\"))]\n+const SHELL: &str = \"sh\";\n+\n fn install_sh(\n     builder: &Builder<'_>,\n     package: &str,\n@@ -37,7 +42,7 @@ fn install_sh(\n     let empty_dir = builder.out.join(\"tmp/empty_dir\");\n     t!(fs::create_dir_all(&empty_dir));\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SHELL);\n     cmd.current_dir(&empty_dir)\n         .arg(sanitize_sh(&tarball.decompressed_output().join(\"install.sh\")))\n         .arg(format!(\"--prefix={}\", prepare_dir(prefix)))"}, {"sha": "b8ef3384c59083aa54b58222555a39b1bbd71e27", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::{edition::Edition, Symbol};\n+use rustc_span::Symbol;\n \n use crate::clean;\n use crate::config::RenderOptions;\n@@ -23,7 +23,6 @@ crate trait FormatRenderer<'tcx>: Sized {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error>;\n@@ -35,19 +34,15 @@ crate trait FormatRenderer<'tcx>: Sized {\n     fn item(&mut self, item: clean::Item) -> Result<(), Error>;\n \n     /// Renders a module (should not handle recursing into children).\n-    fn mod_item_in(&mut self, item: &clean::Item, item_name: &str) -> Result<(), Error>;\n+    fn mod_item_in(&mut self, item: &clean::Item) -> Result<(), Error>;\n \n     /// Runs after recursively rendering all sub-items of a module.\n-    fn mod_item_out(&mut self, item_name: &str) -> Result<(), Error>;\n+    fn mod_item_out(&mut self) -> Result<(), Error> {\n+        Ok(())\n+    }\n \n     /// Post processing hook for cleanup and dumping output to files.\n-    ///\n-    /// A handler is available if the renderer wants to report errors.\n-    fn after_krate(\n-        &mut self,\n-        crate_name: Symbol,\n-        diag: &rustc_errors::Handler,\n-    ) -> Result<(), Error>;\n+    fn after_krate(&mut self) -> Result<(), Error>;\n \n     fn cache(&self) -> &Cache;\n }\n@@ -57,37 +52,31 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     options: RenderOptions,\n     cache: Cache,\n-    diag: &rustc_errors::Handler,\n-    edition: Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n     let prof = &tcx.sess.prof;\n \n     let emit_crate = options.should_emit_crate();\n     let (mut format_renderer, krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n-        .run(|| T::init(krate, options, edition, cache, tcx))?;\n+        .run(|| T::init(krate, options, cache, tcx))?;\n \n     if !emit_crate {\n         return Ok(());\n     }\n \n     // Render the crate documentation\n-    let crate_name = krate.name;\n     let mut work = vec![(format_renderer.make_child_renderer(), krate.module)];\n \n     let unknown = Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n         if item.is_mod() && T::RUN_ON_MODULE {\n             // modules are special because they add a namespace. We also need to\n             // recurse into the items of the module as well.\n-            let name = item.name.as_ref().unwrap().to_string();\n-            if name.is_empty() {\n-                panic!(\"Unexpected module with empty name\");\n-            }\n-            let _timer = prof.generic_activity_with_arg(\"render_mod_item\", name.as_str());\n+            let _timer =\n+                prof.generic_activity_with_arg(\"render_mod_item\", item.name.unwrap().to_string());\n \n-            cx.mod_item_in(&item, &name)?;\n+            cx.mod_item_in(&item)?;\n             let module = match *item.kind {\n                 clean::StrippedItem(box clean::ModuleItem(m)) | clean::ModuleItem(m) => m,\n                 _ => unreachable!(),\n@@ -97,7 +86,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n                 work.push((cx.make_child_renderer(), it));\n             }\n \n-            cx.mod_item_out(&name)?;\n+            cx.mod_item_out()?;\n         // FIXME: checking `item.name.is_some()` is very implicit and leads to lots of special\n         // cases. Use an explicit match instead.\n         } else if item.name.is_some() && !item.is_extern_crate() {\n@@ -106,5 +95,5 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         }\n     }\n     prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n-        .run(|| format_renderer.after_krate(crate_name, diag))\n+        .run(|| format_renderer.after_krate())\n }"}, {"sha": "9cffcef9749f8a25a735189b9c6d2650e9a74038", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::FileName;\n-use rustc_span::{symbol::sym, Symbol};\n+use rustc_span::symbol::sym;\n \n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n@@ -111,8 +111,6 @@ crate struct SharedContext<'tcx> {\n     crate static_root_path: Option<String>,\n     /// The fs handle we are working with.\n     crate fs: DocFS,\n-    /// The default edition used to parse doctests.\n-    crate edition: Edition,\n     pub(super) codes: ErrorCodes,\n     pub(super) playground: Option<markdown::Playground>,\n     all: RefCell<AllTypes>,\n@@ -141,6 +139,10 @@ impl SharedContext<'_> {\n     crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n         if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n     }\n+\n+    crate fn edition(&self) -> Edition {\n+        self.tcx.sess.edition()\n+    }\n }\n \n impl<'tcx> Context<'tcx> {\n@@ -346,7 +348,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,\n-        edition: Edition,\n         mut cache: Cache,\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n@@ -435,7 +436,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             resource_suffix,\n             static_root_path,\n             fs: DocFS::new(sender),\n-            edition,\n             codes: ErrorCodes::from(unstable_features.is_nightly_build()),\n             playground,\n             all: RefCell::new(AllTypes::new()),\n@@ -494,11 +494,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         }\n     }\n \n-    fn after_krate(\n-        &mut self,\n-        crate_name: Symbol,\n-        diag: &rustc_errors::Handler,\n-    ) -> Result<(), Error> {\n+    fn after_krate(&mut self) -> Result<(), Error> {\n+        let crate_name = self.tcx().crate_name(LOCAL_CRATE);\n         let final_file = self.dst.join(&*crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n \n@@ -572,15 +569,16 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         // Flush pending errors.\n         Rc::get_mut(&mut self.shared).unwrap().fs.close();\n-        let nb_errors = self.shared.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n+        let nb_errors =\n+            self.shared.errors.iter().map(|err| self.tcx().sess.struct_err(&err).emit()).count();\n         if nb_errors > 0 {\n             Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n         } else {\n             Ok(())\n         }\n     }\n \n-    fn mod_item_in(&mut self, item: &clean::Item, item_name: &str) -> Result<(), Error> {\n+    fn mod_item_in(&mut self, item: &clean::Item) -> Result<(), Error> {\n         // Stripped modules survive the rustdoc passes (i.e., `strip-private`)\n         // if they contain impls for public types. These modules can also\n         // contain items such as publicly re-exported structures.\n@@ -592,8 +590,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             self.render_redirect_pages = item.is_stripped();\n         }\n         let scx = &self.shared;\n-        self.dst.push(item_name);\n-        self.current.push(item_name.to_owned());\n+        let item_name = item.name.as_ref().unwrap().to_string();\n+        self.dst.push(&item_name);\n+        self.current.push(item_name);\n \n         info!(\"Recursing into {}\", self.dst.display());\n \n@@ -619,7 +618,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         Ok(())\n     }\n \n-    fn mod_item_out(&mut self, _item_name: &str) -> Result<(), Error> {\n+    fn mod_item_out(&mut self) -> Result<(), Error> {\n         info!(\"Recursed; leaving {}\", self.dst.display());\n \n         // Go back to where we were at"}, {"sha": "f6d6b34f8bef9e2daf3dacd1a97eb08aef1472d9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -530,7 +530,7 @@ fn render_markdown(\n             &links,\n             &mut ids,\n             cx.shared.codes,\n-            cx.shared.edition,\n+            cx.shared.edition(),\n             &cx.shared.playground\n         )\n         .into_string()\n@@ -660,7 +660,7 @@ fn short_item_info(\n                 &note,\n                 &mut ids,\n                 error_codes,\n-                cx.shared.edition,\n+                cx.shared.edition(),\n                 &cx.shared.playground,\n             );\n             message.push_str(&format!(\": {}\", html.into_string()));\n@@ -702,7 +702,7 @@ fn short_item_info(\n                     &unstable_reason.as_str(),\n                     &mut ids,\n                     error_codes,\n-                    cx.shared.edition,\n+                    cx.shared.edition(),\n                     &cx.shared.playground,\n                 )\n                 .into_string()\n@@ -1284,6 +1284,7 @@ fn render_impl(\n     let cache = cx.cache();\n     let traits = &cache.traits;\n     let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n+    let mut close_tags = String::new();\n \n     if render_mode == RenderMode::Normal {\n         let id = cx.derive_id(match i.inner_impl().trait_ {\n@@ -1302,7 +1303,12 @@ fn render_impl(\n             format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n         };\n         if let Some(use_absolute) = use_absolute {\n-            write!(w, \"<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\", id, aliases);\n+            write!(\n+                w,\n+                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\"><summary><h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\",\n+                id, aliases\n+            );\n+            close_tags.insert_str(0, \"</details>\");\n             write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n             if show_def_docs {\n                 for it in &i.inner_impl().items {\n@@ -1325,11 +1331,12 @@ fn render_impl(\n         } else {\n             write!(\n                 w,\n-                \"<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n+                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\"><summary><h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n                 id,\n                 aliases,\n                 i.inner_impl().print(false, cx)\n             );\n+            close_tags.insert_str(0, \"</details>\");\n         }\n         write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n         render_stability_since_raw(\n@@ -1341,6 +1348,7 @@ fn render_impl(\n         );\n         write_srclink(cx, &i.impl_item, w);\n         w.write_str(\"</h3>\");\n+        w.write_str(\"</summary>\");\n \n         if trait_.is_some() {\n             if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n@@ -1358,7 +1366,7 @@ fn render_impl(\n                     &i.impl_item.links(cx),\n                     &mut ids,\n                     cx.shared.codes,\n-                    cx.shared.edition,\n+                    cx.shared.edition(),\n                     &cx.shared.playground\n                 )\n                 .into_string()\n@@ -1542,6 +1550,7 @@ fn render_impl(\n     }\n \n     w.write_str(\"<div class=\\\"impl-items\\\">\");\n+    close_tags.insert_str(0, \"</div>\");\n     for trait_item in &i.inner_impl().items {\n         doc_impl_item(\n             w,\n@@ -1612,7 +1621,7 @@ fn render_impl(\n             );\n         }\n     }\n-    w.write_str(\"</div>\");\n+    w.write_str(&close_tags);\n }\n \n fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {"}, {"sha": "8e10c696df05d3f9fa452f446ee7299d1a0c5805", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -425,7 +425,7 @@ pub(super) fn write_shared(\n             md_opts.output = cx.dst.clone();\n             md_opts.external_html = (*cx.shared).layout.external_html.clone();\n \n-            crate::markdown::render(&index_page, md_opts, cx.shared.edition)\n+            crate::markdown::render(&index_page, md_opts, cx.shared.edition())\n                 .map_err(|e| Error::new(e, &index_page))?;\n         } else {\n             let dst = cx.dst.join(\"index.html\");"}, {"sha": "5a2a165191a604fb60d7099d64fd9cd084f9c247", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -129,7 +129,7 @@ impl SourceCollector<'_, 'tcx> {\n             &self.scx.layout,\n             &page,\n             \"\",\n-            |buf: &mut _| print_src(buf, contents, self.scx.edition),\n+            |buf: &mut _| print_src(buf, contents, self.scx.edition()),\n             &self.scx.style_files,\n         );\n         self.scx.fs.write(&cur, v.as_bytes())?;"}, {"sha": "2e3e148eaf6957734f67bb3be9b38225775db52c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1207,31 +1207,18 @@ function hideThemeButtonState() {\n             if (!next) {\n                 return;\n             }\n-            if (hasClass(e, \"impl\") &&\n-                (next.getElementsByClassName(\"method\").length > 0 ||\n-                 next.getElementsByClassName(\"associatedconstant\").length > 0)) {\n-                var newToggle = toggle.cloneNode(true);\n-                insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n-                // In case the option \"auto-collapse implementors\" is not set to false, we collapse\n-                // all implementors.\n-                if (hideImplementors === true && e.parentNode.id === \"implementors-list\") {\n-                    collapseDocs(newToggle, \"hide\");\n-                }\n-            }\n         };\n \n         onEachLazy(document.getElementsByClassName(\"method\"), func);\n         onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n-        onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n         var impl_call = function() {};\n-        // Large items are hidden by default in the HTML. If the setting overrides that, show 'em.\n-        if (!hideLargeItemContents) {\n-            onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n-                if (hasClass(e, \"type-contents-toggle\")) {\n-                    e.open = true;\n-                }\n-            });\n-        }\n+        onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n+            var showLargeItem = !hideLargeItemContents && hasClass(e, \"type-contents-toggle\");\n+            var showImplementor = !hideImplementors && hasClass(e, \"implementors-toggle\");\n+            if (showLargeItem || showImplementor) {\n+                e.open = true;\n+            }\n+        });\n         if (hideMethodDocs === true) {\n             impl_call = function(e, newToggle) {\n                 if (e.id.match(/^impl(?:-\\d+)?$/) === null) {"}, {"sha": "a024fa49b0e8bf11b6723a76ab1c11308533f1dd", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1573,6 +1573,10 @@ h4 > .notable-traits {\n \t\tleft: -10px;\n \t}\n \n+\t.item-list > details.rustdoc-toggle > summary:not(.hideme)::before {\n+\t\tleft: -10px;\n+\t}\n+\n \t#all-types {\n \t\tmargin: 10px;\n \t}\n@@ -1787,14 +1791,16 @@ details.rustdoc-toggle > summary::before {\n \tfont-weight: 300;\n \tfont-size: 0.8em;\n \tletter-spacing: 1px;\n+\tcursor: pointer;\n }\n \n details.rustdoc-toggle > summary.hideme::before {\n \tposition: relative;\n }\n \n details.rustdoc-toggle > summary:not(.hideme)::before {\n-\tfloat: left;\n+\tposition: absolute;\n+\tleft: -23px;\n }\n \n /* When a \"hideme\" summary is open and the \"Expand description\" or \"Show"}, {"sha": "b048e7f919fa4a0f07ad7a528aafe44c6ec407f9", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -14,7 +14,6 @@ use std::rc::Rc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::{edition::Edition, Symbol};\n \n use rustdoc_json_types as types;\n \n@@ -134,7 +133,6 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        _edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n@@ -183,7 +181,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn mod_item_in(&mut self, item: &clean::Item, _module_name: &str) -> Result<(), Error> {\n+    fn mod_item_in(&mut self, item: &clean::Item) -> Result<(), Error> {\n         use clean::types::ItemKind::*;\n         if let ModuleItem(m) = &*item.kind {\n             for item in &m.items {\n@@ -200,15 +198,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn mod_item_out(&mut self, _item_name: &str) -> Result<(), Error> {\n-        Ok(())\n-    }\n-\n-    fn after_krate(\n-        &mut self,\n-        _crate_name: Symbol,\n-        _diag: &rustc_errors::Handler,\n-    ) -> Result<(), Error> {\n+    fn after_krate(&mut self) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());"}, {"sha": "26aaf0db6f6204edf85b8f4d67d74ddb37c57bfa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -656,14 +656,13 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     renderopts: config::RenderOptions,\n     cache: formats::cache::Cache,\n-    diag: &rustc_errors::Handler,\n-    edition: rustc_span::edition::Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, cache, &diag, edition, tcx) {\n+    match formats::run_format::<T>(krate, renderopts, cache, tcx) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n-            let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n+            let mut msg =\n+                tcx.sess.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n             let file = e.file.display().to_string();\n             if file.is_empty() {\n                 msg.emit()\n@@ -692,7 +691,6 @@ fn main_options(options: config::Options) -> MainResult {\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't create the Handler ahead of time because it's not Send\n-    let diag_opts = (options.error_format, options.edition, options.debugging_opts.clone());\n     let show_coverage = options.show_coverage;\n     let run_check = options.run_check;\n \n@@ -758,28 +756,12 @@ fn main_options(options: config::Options) -> MainResult {\n                 }\n \n                 info!(\"going to format\");\n-                let (error_format, edition, debugging_options) = diag_opts;\n-                let diag = core::new_handler(error_format, None, &debugging_options);\n                 match output_format {\n                     config::OutputFormat::Html => sess.time(\"render_html\", || {\n-                        run_renderer::<html::render::Context<'_>>(\n-                            krate,\n-                            render_opts,\n-                            cache,\n-                            &diag,\n-                            edition,\n-                            tcx,\n-                        )\n+                        run_renderer::<html::render::Context<'_>>(krate, render_opts, cache, tcx)\n                     }),\n                     config::OutputFormat::Json => sess.time(\"render_json\", || {\n-                        run_renderer::<json::JsonRenderer<'_>>(\n-                            krate,\n-                            render_opts,\n-                            cache,\n-                            &diag,\n-                            edition,\n-                            tcx,\n-                        )\n+                        run_renderer::<json::JsonRenderer<'_>>(krate, render_opts, cache, tcx)\n                     }),\n                 }\n             })"}, {"sha": "d852728b74962bbe209c163d6677f1105a2c3521", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -71,9 +71,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n+        let span = krate.item.inner;\n         let mut top_level_module = self.visit_mod_contents(\n-            krate.item.inner,\n-            &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n+            span,\n+            &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item,\n             self.cx.tcx.crate_name,\n@@ -130,7 +131,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_mod_contents(\n         &mut self,\n         span: Span,\n-        vis: &'tcx hir::Visibility<'_>,\n+        vis: &hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,"}, {"sha": "77432ba1539555518449c178ca4a36d911073a31", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -8,7 +8,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]/h3/code' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//h3/code' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "1e644bb9739877c203b19acbf7b83e6d5dd80d6a", "filename": "src/test/rustdoc/duplicate_impls/issue-33054.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1,8 +1,8 @@\n // @has issue_33054/impls/struct.Foo.html\n // @has - '//code' 'impl Foo'\n // @has - '//code' 'impl Bar for Foo'\n-// @count - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"main\"]/*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"main\"]/details/summary/*[@class=\"impl\"]' 1\n // @has issue_33054/impls/bar/trait.Bar.html\n // @has - '//code' 'impl Bar for Foo'\n // @count - '//*[@class=\"struct\"]' 1"}, {"sha": "5de26abace6fab01d1b20f6570358578468f4c88", "filename": "src/test/rustdoc/issue-21474.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-21474.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21474.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -7,5 +7,5 @@ mod inner {\n pub trait Blah { }\n \n // @count issue_21474/struct.What.html \\\n-//        '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]' 1\n+//        '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n pub struct What;"}, {"sha": "2b25da77d7e7b23df6d65ef8f3809602909dfde6", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -5,7 +5,7 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']/h3[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']//h3[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n impl<T> MyTrait for T where T: fmt::Debug {\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)"}, {"sha": "8a5f0413826a910ff7f7ceaa72db9c2438a4ecd7", "filename": "src/test/rustdoc/issue-45584.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-45584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-45584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-45584.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -4,12 +4,12 @@ pub trait Bar<T, U> {}\n \n // @has 'foo/struct.Foo1.html'\n pub struct Foo1;\n-// @count - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n // @has - '//*[@class=\"impl\"]' \"impl Bar<Foo1, &'static Foo1> for Foo1\"\n impl Bar<Foo1, &'static Foo1> for Foo1 {}\n \n // @has 'foo/struct.Foo2.html'\n pub struct Foo2;\n-// @count - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n // @has - '//*[@class=\"impl\"]' \"impl Bar<&'static Foo2, Foo2> for u8\"\n impl Bar<&'static Foo2, Foo2> for u8 {}"}, {"sha": "0820512e521402e57912a0c79740e1592622b097", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -13,8 +13,8 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n // @has issue_50159/struct.Switch.html\n // @has - '//code' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n // @has - '//code' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n-// @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 5\n+// @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 5\n pub struct Switch<B: Signal> {\n     pub inner: <B as Signal2>::Item2,\n }"}, {"sha": "d018c948162d9c076459be355be9f9da2fa0e3c3", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -7,7 +7,7 @@ pub mod traits {\n }\n \n // @has issue_51236/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> Send for \\\n // Owned<T> where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,"}, {"sha": "daebe059f8ef68c7971b7398a3830199553672ed", "filename": "src/test/rustdoc/issue-53812.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53812.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -12,9 +12,9 @@ macro_rules! array_impls {\n     }\n }\n \n-// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]//h3[1]' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]//h3[2]' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]//h3[3]' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]//h3[4]' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]//h3[5]' 'MyStruct<[T; 10]>'\n+// @has issue_53812/trait.MyIterator.html '//*[@id=\"implementors-list\"]/details[1]/summary/h3' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/details[2]/summary/h3' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/details[3]/summary/h3' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/details[4]/summary/h3' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/details[5]/summary/h3' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}, {"sha": "47da94a4ccf4c88ab39ea62e213afcb66976e14d", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -3,10 +3,10 @@ pub trait ScopeHandle<'scope> {}\n \n \n // @has issue_54705/struct.ScopeFutureContents.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n // Send for ScopeFutureContents<'scope, S> where S: Sync\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n // Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,"}, {"sha": "d1877f39ba761e1d4b98f787678cac20972d0ddf", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1,16 +1,16 @@\n #![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n-// @has - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]//code' \"impl !Send for A\"\n-// @has - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]//code' \"impl !Sync for A\"\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//code' \"impl !Send for A\"\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//code' \"impl !Sync for A\"\n pub struct A();\n \n impl !Send for A {}\n impl !Sync for A {}\n \n // @has issue_55321/struct.B.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n // B<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n // B<T>\"\n pub struct B<T: ?Sized>(A, Box<T>);"}, {"sha": "b932a3d34749cc364e48a7ead86e918f819b6da0", "filename": "src/test/rustdoc/issue-56822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -17,7 +17,7 @@ impl<'a, T> MyTrait for Inner<'a, T> {\n }\n \n // @has issue_56822/struct.Parser.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'a> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'a> Send for \\\n // Parser<'a>\"\n pub struct Parser<'a> {\n     field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output"}, {"sha": "79b8b70c5452572c5e468e56f0b1b66f10206026", "filename": "src/test/rustdoc/issue-60726.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-60726.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -26,9 +26,9 @@ where\n {}\n \n // @has issue_60726/struct.IntoIter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n // IntoIter<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n // IntoIter<T>\"\n pub struct IntoIter<T>{\n     hello:DynTrait<FooInterface<T>>,"}, {"sha": "0dd3a3f7a86c5884e5586d6364b727f6702b6698", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1,8 +1,8 @@\n // @has basic/struct.Foo.html\n // @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n // @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n-// @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 5\n+// @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 5\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "d951a20e2dec04820e90b610884f10b07e3b2a89", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -20,7 +20,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'a, T, K: \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'a, T, K: \\\n // ?Sized> Send for Outer<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "05c88f10822ca1563d345f48a8b4d94eba81fbc8", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -9,10 +9,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "88ddd57349a29565fd7fc4241450e044f1c3d382", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -1,12 +1,12 @@\n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' 'impl<T> Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' 'impl<T> Sync for \\\n // Foo<T> where T: Sync'\n //\n-// @has - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]//code' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//code' \\\n // 'impl<T> Send for Foo<T>'\n //\n-// @count - '//*[@id=\"trait-implementations-list\"]/*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 4\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 4\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "53801542c95205c13dc3bfb5304964329a93ec37", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -3,10 +3,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n // Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> \\\n // !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "d4d93a87ffc9b891c22981e069fc98138e029c05", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -9,10 +9,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' 'impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' 'impl<T> Send for \\\n // Foo<T> where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "3a23dc2cf9576c295ce5ee7ab886b621821feef7", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -9,7 +9,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> Send for \\\n // Outer<T> where T: Copy + Send\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "060491e3cf10f7c5a2487306d217e9471f8cfc63", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -23,10 +23,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "ecdbdf41b2025f6f5c2b1bdeb7071c1bea90805c", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -23,7 +23,7 @@ impl<T> Pattern for Wrapper<T> {\n \n \n // @has self_referential/struct.WriteAndThen.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<P1> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<P1> Send for \\\n // WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "a10e694c1b2817c79974d87b4d3fdad374aac792", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -3,7 +3,7 @@ pub trait OwnedTrait<'a> {\n }\n \n // @has static_region/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//code' \"impl<T> Send for \\\n // Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,"}, {"sha": "d2aa54ab9512e507c9d02bc5f03e413d557586aa", "filename": "src/test/ui/associated-type-bounds/issue-81193.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-81193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-81193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-81193.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(associated_type_bounds)]\n+\n+trait A<'a, 'b> {}\n+\n+trait B<'a, 'b, 'c> {}\n+\n+fn err<'u, 'a, F>()\n+where\n+    for<'b> F: Iterator<Item: for<'c> B<'a, 'b, 'c> + for<'c> A<'a, 'c>>,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "8f0a9ea3566fb0a423784e16811e0deb4d73a05d", "filename": "src/test/ui/associated-type-bounds/issue-83017.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,39 @@\n+#![feature(associated_type_bounds)]\n+\n+trait TraitA<'a> {\n+    type AsA;\n+}\n+\n+trait TraitB<'a, 'b> {\n+    type AsB;\n+}\n+\n+trait TraitC<'a, 'b, 'c> {}\n+\n+struct X;\n+\n+impl<'a, 'b, 'c> TraitC<'a, 'b, 'c> for X {}\n+\n+struct Y;\n+\n+impl<'a, 'b> TraitB<'a, 'b> for Y {\n+    type AsB = X;\n+}\n+\n+struct Z;\n+\n+impl<'a> TraitA<'a> for Z {\n+    type AsA = Y;\n+}\n+\n+fn foo<T>()\n+where\n+    for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n+{\n+}\n+\n+fn main() {\n+    foo::<Z>();\n+    //~^ ERROR: the trait bound `for<'a, 'b> <Z as TraitA<'a>>::AsA: TraitB<'a, 'b>` is not satisfied\n+    //~| ERROR: the trait bound `for<'a, 'b, 'c> <<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB: TraitC<'a, 'b, 'c>` is not satisfied\n+}"}, {"sha": "4eb71fd0287e0354e9ad34c9d6f0365ec6bd65e9", "filename": "src/test/ui/associated-type-bounds/issue-83017.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `for<'a, 'b> <Z as TraitA<'a>>::AsA: TraitB<'a, 'b>` is not satisfied\n+  --> $DIR/issue-83017.rs:36:5\n+   |\n+LL | fn foo<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n+   |                                ------------------------------------------------------- required by this bound in `foo`\n+...\n+LL |     foo::<Z>();\n+   |     ^^^^^^^^ the trait `for<'a, 'b> TraitB<'a, 'b>` is not implemented for `<Z as TraitA<'a>>::AsA`\n+\n+error[E0277]: the trait bound `for<'a, 'b, 'c> <<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB: TraitC<'a, 'b, 'c>` is not satisfied\n+  --> $DIR/issue-83017.rs:36:5\n+   |\n+LL | fn foo<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n+   |                                                            -------------------------- required by this bound in `foo`\n+...\n+LL |     foo::<Z>();\n+   |     ^^^^^^^^ the trait `for<'a, 'b, 'c> TraitC<'a, 'b, 'c>` is not implemented for `<<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4d19230df6badfacbed2d791e4fb94bb56fdf3c8", "filename": "src/test/ui/specialization/issue-33017.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,45 @@\n+// Test to ensure that trait bounds are propertly\n+// checked on specializable associated types\n+\n+#![allow(incomplete_features)]\n+#![feature(specialization)]\n+\n+trait UncheckedCopy: Sized {\n+    type Output: From<Self> + Copy + Into<Self>;\n+}\n+\n+impl<T> UncheckedCopy for T {\n+    default type Output = Self;\n+    //~^ ERROR: the trait bound `T: Copy` is not satisfied\n+}\n+\n+fn unchecked_copy<T: UncheckedCopy>(other: &T::Output) -> T {\n+    (*other).into()\n+}\n+\n+fn bug(origin: String) {\n+    // Turn the String into it's Output type...\n+    // Which we can just do by `.into()`, the assoc type states `From<Self>`.\n+    let origin_output = origin.into();\n+\n+    // Make a copy of String::Output, which is a String...\n+    let mut copy: String = unchecked_copy::<String>(&origin_output);\n+\n+    // Turn the Output type into a String again,\n+    // Which we can just do by `.into()`, the assoc type states `Into<Self>`.\n+    let mut origin: String = origin_output.into();\n+\n+    // assert both Strings use the same buffer.\n+    assert_eq!(copy.as_ptr(), origin.as_ptr());\n+\n+    // Any use of the copy we made becomes invalid,\n+    drop(origin);\n+\n+    // OH NO! UB UB UB UB!\n+    copy.push_str(\" world!\");\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(String::from(\"hello\"));\n+}"}, {"sha": "bff4618d0be4c3b7294a43c6ce551623bf78871e", "filename": "src/test/ui/specialization/issue-33017.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/issue-33017.rs:12:5\n+   |\n+LL |     type Output: From<Self> + Copy + Into<Self>;\n+   |                               ---- required by this bound in `UncheckedCopy::Output`\n+...\n+LL |     default type Output = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::marker::Copy> UncheckedCopy for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3cd0711ae42c641e9df857cf60a3c4ad3a9a6ed5", "filename": "src/test/ui/specialization/issue-51892.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,19 @@\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+#![feature(const_evaluatable_checked)]\n+#![feature(specialization)]\n+\n+pub trait Trait {\n+    type Type;\n+}\n+\n+impl<T: ?Sized> Trait for T {\n+    default type Type = [u8; 1];\n+}\n+\n+impl<T: Trait> Trait for *const T {\n+    type Type = [u8; std::mem::size_of::<<T as Trait>::Type>()];\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn main() {}"}, {"sha": "2d30164380a8ee6ad1c91328be81113c1a09781d", "filename": "src/test/ui/specialization/issue-51892.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr?ref=e11a9fa52a3f372dadd6db3d3f2ed7dc2621dcc4", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/issue-51892.rs:15:5\n+   |\n+LL |     type Type = [u8; std::mem::size_of::<<T as Trait>::Type>()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<<T as Trait>::Type>()]:`\n+\n+error: aborting due to previous error\n+"}]}