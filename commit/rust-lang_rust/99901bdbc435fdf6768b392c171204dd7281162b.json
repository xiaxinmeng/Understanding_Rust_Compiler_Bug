{"sha": "99901bdbc435fdf6768b392c171204dd7281162b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OTAxYmRiYzQzNWZkZjY3NjhiMzkyYzE3MTIwNGRkNzI4MTE2MmI=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-02T23:12:00Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-03T00:35:51Z"}, "message": "Add FIXMEs around type handling in trans_if, trans_alt", "tree": {"sha": "b159b6e88c45be826311d3b7a9b2cbce42d827fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b159b6e88c45be826311d3b7a9b2cbce42d827fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99901bdbc435fdf6768b392c171204dd7281162b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99901bdbc435fdf6768b392c171204dd7281162b", "html_url": "https://github.com/rust-lang/rust/commit/99901bdbc435fdf6768b392c171204dd7281162b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99901bdbc435fdf6768b392c171204dd7281162b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/21fb49ad95601f2ae06e2218cca84e5b2fc45a51", "html_url": "https://github.com/rust-lang/rust/commit/21fb49ad95601f2ae06e2218cca84e5b2fc45a51"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "2e4f1d8511845f32e2f2ca338a467ba02bbee790", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99901bdbc435fdf6768b392c171204dd7281162b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99901bdbc435fdf6768b392c171204dd7281162b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=99901bdbc435fdf6768b392c171204dd7281162b", "patch": "@@ -3086,6 +3086,7 @@ fn trans_if(@block_ctxt cx, @ast.expr cond,\n \n             // If we have an else expression, then the entire\n             // if expression can have a non-nil type.\n+            // FIXME: This isn't quite right, particularly re: dynamic types\n             auto expr_ty = ty.expr_ty(elexpr);\n             if (ty.type_has_dynamic_size(expr_ty)) {\n                 expr_llty = T_typaram_ptr(cx.fcx.ccx.tn);\n@@ -3576,6 +3577,7 @@ fn trans_alt(@block_ctxt cx, @ast.expr expr,\n     auto default_res = trans_fail(default_cx, expr.span,\n                                   \"non-exhaustive match failure\");\n \n+    // FIXME: This isn't quite right, particularly re: dynamic types\n     auto expr_ty = ty.ann_to_type(ann);\n     auto expr_llty;\n     if (ty.type_has_dynamic_size(expr_ty)) {"}]}