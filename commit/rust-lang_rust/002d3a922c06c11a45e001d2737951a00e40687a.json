{"sha": "002d3a922c06c11a45e001d2737951a00e40687a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMmQzYTkyMmMwNmMxMWE0NWUwMDFkMjczNzk1MWEwMGU0MDY4N2E=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-21T04:23:23Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Don't give misleading errors for `f::A`, where f is in the value namespace", "tree": {"sha": "ac2ae3be55443ec06026b441080ce9d9c88f1a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2ae3be55443ec06026b441080ce9d9c88f1a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002d3a922c06c11a45e001d2737951a00e40687a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002d3a922c06c11a45e001d2737951a00e40687a", "html_url": "https://github.com/rust-lang/rust/commit/002d3a922c06c11a45e001d2737951a00e40687a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002d3a922c06c11a45e001d2737951a00e40687a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e6ebd11aaea9fc412d78371fd3060468625056", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e6ebd11aaea9fc412d78371fd3060468625056", "html_url": "https://github.com/rust-lang/rust/commit/f4e6ebd11aaea9fc412d78371fd3060468625056"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "ed411bf2b8dabcb77f62c666ae20ff788d366801", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/002d3a922c06c11a45e001d2737951a00e40687a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002d3a922c06c11a45e001d2737951a00e40687a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=002d3a922c06c11a45e001d2737951a00e40687a", "patch": "@@ -57,6 +57,9 @@ enum ResolutionFailure<'a> {\n     /// This resolved, but with the wrong namespace.\n     /// `Namespace` is the expected namespace (as opposed to the actual).\n     WrongNamespace(Res, Namespace),\n+    /// This has a partial resolution, but is not in the TypeNS and so cannot\n+    /// have associated items or fields.\n+    CannotHaveAssociatedItems(Res, Namespace),\n     /// `String` is the base name of the path (not necessarily the whole link)\n     NotInScope(Cow<'a, str>),\n     /// this is a primitive type without an impls (no associated methods)\n@@ -90,7 +93,8 @@ impl ResolutionFailure<'a> {\n             | NoPrimitiveImpl(res, _)\n             | NotAnEnum(res)\n             | NotAVariant(res, _)\n-            | WrongNamespace(res, _) => Some(*res),\n+            | WrongNamespace(res, _)\n+            | CannotHaveAssociatedItems(res, _) => Some(*res),\n             NotInScope(_) | NoParentItem | Dummy => None,\n         }\n     }\n@@ -360,21 +364,39 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 }));\n             }\n \n-            let (_, ty_res) = cx\n+            let ty_res = cx\n                 .enter_resolver(|resolver| {\n                     // only types can have associated items\n                     resolver.resolve_str_path_error(DUMMY_SP, &path_root, TypeNS, module_id)\n                 })\n-                .map_err(|_| {\n-                    ErrorKind::Resolve(ResolutionFailure::NotInScope(path_root.clone().into()))\n-                })?;\n-            if let Res::Err = ty_res {\n-                return if ns == Namespace::ValueNS {\n-                    self.variant_field(path_str, current_item, module_id)\n-                } else {\n-                    Err(ErrorKind::Resolve(ResolutionFailure::NotInScope(path_root.into())))\n-                };\n-            }\n+                .map(|(_, res)| res);\n+            let ty_res = match ty_res {\n+                Err(()) | Ok(Res::Err) => {\n+                    return if ns == Namespace::ValueNS {\n+                        self.variant_field(path_str, current_item, module_id)\n+                    } else {\n+                        // See if it only broke because of the namespace.\n+                        let kind = cx.enter_resolver(|resolver| {\n+                            for &ns in &[MacroNS, ValueNS] {\n+                                match resolver\n+                                    .resolve_str_path_error(DUMMY_SP, &path_root, ns, module_id)\n+                                {\n+                                    Ok((_, Res::Err)) | Err(()) => {}\n+                                    Ok((_, res)) => {\n+                                        let res = res.map_id(|_| panic!(\"unexpected node_id\"));\n+                                        return ResolutionFailure::CannotHaveAssociatedItems(\n+                                            res, ns,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                            ResolutionFailure::NotInScope(path_root.into())\n+                        });\n+                        Err(ErrorKind::Resolve(kind))\n+                    };\n+                }\n+                Ok(res) => res,\n+            };\n             let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n             let res = match ty_res {\n                 Res::Def(\n@@ -1006,14 +1028,12 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             Ok(res) => (res, extra_fragment),\n                             Err(mut kind) => {\n                                 // `macro_resolve` only looks in the macro namespace. Try to give a better error if possible.\n-                                //if kind.res().is_none() {\n                                 for &ns in &[TypeNS, ValueNS] {\n                                     if let Some(res) = check_full_res(self, ns) {\n                                         kind = ResolutionFailure::WrongNamespace(res, MacroNS);\n                                         break;\n                                     }\n                                 }\n-                                //}\n                                 resolution_failure(\n                                     cx,\n                                     &item,\n@@ -1456,6 +1476,20 @@ fn resolution_failure(\n                             diag.note(&note);\n                         }\n                     }\n+                    ResolutionFailure::CannotHaveAssociatedItems(res, _) => {\n+                        let (item, _) = item(res);\n+                        diag.note(&format!(\"this link partially resolves to {}\", item));\n+                        if let Res::Def(kind, def_id) = res {\n+                            let name = cx.tcx.item_name(def_id);\n+                            let note = format!(\n+                                \"`{}` is {} {}, not a module or type, and cannot have associated items\",\n+                                name,\n+                                kind.article(),\n+                                kind.descr(def_id)\n+                            );\n+                            diag.note(&note);\n+                        }\n+                    }\n                     // TODO: is there ever a case where this happens?\n                     ResolutionFailure::NotAnEnum(res) => {\n                         let (item, comma) = item(res);"}, {"sha": "1a2f24cef2423fb83f373e02d8ecbc5a49d5c23f", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/002d3a922c06c11a45e001d2737951a00e40687a/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002d3a922c06c11a45e001d2737951a00e40687a/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=002d3a922c06c11a45e001d2737951a00e40687a", "patch": "@@ -7,14 +7,14 @@\n // FIXME: this could say which path was the first to not be found (in this case, `path`)\n /// [path::to::nonexistent::module]\n //~^ ERROR unresolved link\n-//~| NOTE no item named `path::to::nonexistent` is in scope\n+//~| NOTE no item named `path::to` is in scope\n //~| HELP to escape\n \n // TODO: why does this say `f` and not `f::A`??\n /// [f::A]\n //~^ ERROR unresolved link\n-//~| NOTE no item named `f` is in scope\n-//~| HELP to escape\n+//~| NOTE this link partially resolves\n+//~| NOTE `f` is a function, not a module\n \n /// [S::A]\n //~^ ERROR unresolved link"}, {"sha": "0244d2bfde8d9c0d5e09a7b51feb23ea47aac6e6", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/002d3a922c06c11a45e001d2737951a00e40687a/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002d3a922c06c11a45e001d2737951a00e40687a/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=002d3a922c06c11a45e001d2737951a00e40687a", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: no item named `path::to::nonexistent` is in scope\n+   = note: no item named `path::to` is in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `f::A`\n@@ -18,8 +18,8 @@ error: unresolved link to `f::A`\n LL | /// [f::A]\n    |      ^^^^\n    |\n-   = note: no item named `f` is in scope\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+   = note: this link partially resolves to the function `f`\n+   = note: `f` is a function, not a module or type, and cannot have associated items\n \n error: unresolved link to `S::A`\n   --> $DIR/intra-link-errors.rs:19:6"}]}