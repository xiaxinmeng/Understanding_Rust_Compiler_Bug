{"sha": "15495767324ec173a01b6ff0197b5c4fceb61d21", "node_id": "C_kwDOAAsO6NoAKDE1NDk1NzY3MzI0ZWMxNzNhMDFiNmZmMDE5N2I1YzRmY2ViNjFkMjE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-16T19:38:32Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-06T20:55:53Z"}, "message": "Point at closure args too", "tree": {"sha": "15d378c88403fb662c0f81e4e763c8a3714a5717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d378c88403fb662c0f81e4e763c8a3714a5717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15495767324ec173a01b6ff0197b5c4fceb61d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15495767324ec173a01b6ff0197b5c4fceb61d21", "html_url": "https://github.com/rust-lang/rust/commit/15495767324ec173a01b6ff0197b5c4fceb61d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15495767324ec173a01b6ff0197b5c4fceb61d21/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf47bfd32836dd2db6840b591014a90114245bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf47bfd32836dd2db6840b591014a90114245bb", "html_url": "https://github.com/rust-lang/rust/commit/7bf47bfd32836dd2db6840b591014a90114245bb"}], "stats": {"total": 178, "additions": 97, "deletions": 81}, "files": [{"sha": "90b59df472cadf0f32d8fa2893c28b2174e7b915", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -59,7 +59,7 @@ pub fn check_legal_trait_for_method_call(\n \n enum CallStep<'tcx> {\n     Builtin(Ty<'tcx>),\n-    DeferredClosure(ty::FnSig<'tcx>),\n+    DeferredClosure(DefId, ty::FnSig<'tcx>),\n     /// E.g., enum variant constructors.\n     Overloaded(MethodCallee<'tcx>),\n }\n@@ -107,8 +107,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.confirm_builtin_call(call_expr, callee_expr, callee_ty, arg_exprs, expected)\n             }\n \n-            Some(CallStep::DeferredClosure(fn_sig)) => {\n-                self.confirm_deferred_closure_call(call_expr, arg_exprs, expected, fn_sig)\n+            Some(CallStep::DeferredClosure(def_id, fn_sig)) => {\n+                self.confirm_deferred_closure_call(call_expr, arg_exprs, expected, def_id, fn_sig)\n             }\n \n             Some(CallStep::Overloaded(method_callee)) => {\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             closure_substs: substs,\n                         },\n                     );\n-                    return Some(CallStep::DeferredClosure(closure_sig));\n+                    return Some(CallStep::DeferredClosure(def_id, closure_sig));\n                 }\n             }\n \n@@ -533,6 +533,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &'tcx hir::Expr<'tcx>,\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         expected: Expectation<'tcx>,\n+        closure_def_id: DefId,\n         fn_sig: ty::FnSig<'tcx>,\n     ) -> Ty<'tcx> {\n         // `fn_sig` is the *signature* of the closure being called. We\n@@ -555,7 +556,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             arg_exprs,\n             fn_sig.c_variadic,\n             TupleArgumentsFlag::TupleArguments,\n-            None,\n+            Some(closure_def_id),\n         );\n \n         fn_sig.output()"}, {"sha": "3a501196ed2896a6c905cd48fba6124df7e2b889", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 49, "deletions": 73, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -24,7 +24,7 @@ use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n@@ -523,24 +523,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"arguments to this {} are incorrect\", call_name),\n                     );\n                     // Call out where the function is defined\n-                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                        let mut spans: MultiSpan = def_span.into();\n-\n-                        let params = tcx\n-                            .hir()\n-                            .get_if_local(def_id)\n-                            .and_then(|node| node.body_id())\n-                            .into_iter()\n-                            .map(|id| tcx.hir().body(id).params)\n-                            .flatten();\n-\n-                        for param in params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n-\n-                        let def_kind = tcx.def_kind(def_id);\n-                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-                    }\n+                    label_fn_like(tcx, &mut err, fn_def_id);\n                     err.emit();\n                     break 'errors;\n                 }\n@@ -558,24 +541,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         DiagnosticId::Error(err_code.to_owned()),\n                     );\n                     // Call out where the function is defined\n-                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                        let mut spans: MultiSpan = def_span.into();\n-\n-                        let params = tcx\n-                            .hir()\n-                            .get_if_local(def_id)\n-                            .and_then(|node| node.body_id())\n-                            .into_iter()\n-                            .map(|id| tcx.hir().body(id).params)\n-                            .flatten();\n-\n-                        for param in params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n-\n-                        let def_kind = tcx.def_kind(def_id);\n-                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-                    }\n+                    label_fn_like(tcx, &mut err, fn_def_id);\n                     err.multipart_suggestion(\n                         \"use parentheses to construct a tuple\",\n                         vec![(start, '('.to_string()), (end, ')'.to_string())],\n@@ -613,24 +579,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"arguments to this {} are incorrect\", call_name),\n                     );\n                     // Call out where the function is defined\n-                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                        let mut spans: MultiSpan = def_span.into();\n-\n-                        let params = tcx\n-                            .hir()\n-                            .get_if_local(def_id)\n-                            .and_then(|node| node.body_id())\n-                            .into_iter()\n-                            .map(|id| tcx.hir().body(id).params)\n-                            .flatten();\n-\n-                        for param in params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n-\n-                        let def_kind = tcx.def_kind(def_id);\n-                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-                    }\n+                    label_fn_like(tcx, &mut err, fn_def_id);\n                     err.emit();\n                     break 'errors;\n                 }\n@@ -948,24 +897,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // Call out where the function is defined\n-            if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                let mut spans: MultiSpan = def_span.into();\n-\n-                let params = tcx\n-                    .hir()\n-                    .get_if_local(def_id)\n-                    .and_then(|node| node.body_id())\n-                    .into_iter()\n-                    .flat_map(|id| tcx.hir().body(id).params)\n-                    ;\n-\n-                for param in params {\n-                    spans.push_span_label(param.span, String::new());\n-                }\n-\n-                let def_kind = tcx.def_kind(def_id);\n-                err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-            }\n+            label_fn_like(tcx, &mut err, fn_def_id);\n \n             // And add a suggestion block for all of the parameters\n             let suggestion_text = match suggestion_text {\n@@ -1790,3 +1722,47 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn label_fn_like<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    err: &mut rustc_errors::DiagnosticBuilder<'tcx, rustc_errors::ErrorGuaranteed>,\n+    def_id: Option<DefId>,\n+) {\n+    let Some(def_id) = def_id else {\n+        return;\n+    };\n+\n+    if let Some(def_span) = tcx.def_ident_span(def_id) {\n+        let mut spans: MultiSpan = def_span.into();\n+\n+        let params = tcx\n+            .hir()\n+            .get_if_local(def_id)\n+            .and_then(|node| node.body_id())\n+            .into_iter()\n+            .map(|id| tcx.hir().body(id).params)\n+            .flatten();\n+\n+        for param in params {\n+            spans.push_span_label(param.span, String::new());\n+        }\n+\n+        let def_kind = tcx.def_kind(def_id);\n+        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+    } else {\n+        match tcx.hir().get_if_local(def_id) {\n+            Some(hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure(_, _, _, span, ..),\n+                ..\n+            })) => {\n+                let spans: MultiSpan = (*span).into();\n+\n+                // Note: We don't point to param spans here because they overlap\n+                // with the closure span itself\n+\n+                err.span_note(spans, \"closure defined here\");\n+            }\n+            _ => {}\n+        }\n+    }\n+}"}, {"sha": "3e96322d67efb815cbf227a383db2b0e0d4afd23", "filename": "src/test/ui/argument-suggestions/basic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -22,4 +22,7 @@ fn main() {\n     missing(); //~ ERROR this function takes\n     swapped(\"\", 1); //~ ERROR arguments to this function are incorrect\n     permuted(Y {}, Z {}, X {}); //~ ERROR arguments to this function are incorrect\n+\n+    let closure = |x| x;\n+    closure(); //~ ERROR this function takes\n }"}, {"sha": "8300a22c5483dcdbf630d0f7eb30d80bb5af3655", "filename": "src/test/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -81,7 +81,23 @@ help: reorder these arguments\n LL |     permuted(X {}, Y {}, Z {});\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 5 previous errors\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/basic.rs:27:5\n+   |\n+LL |     closure();\n+   |     ^^^^^^^-- an argument is missing\n+   |\n+note: closure defined here\n+  --> $DIR/basic.rs:26:19\n+   |\n+LL |     let closure = |x| x;\n+   |                   ^^^\n+help: provide the argument\n+   |\n+LL |     closure({_});\n+   |     ~~~~~~~~~~~~\n+\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0061, E0308.\n-For more information about an error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0057, E0061, E0308.\n+For more information about an error, try `rustc --explain E0057`."}, {"sha": "4b4d30a8387fe762134ade788d221ed8bfa3b00d", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -4,6 +4,11 @@ error[E0057]: this function takes 1 argument but 0 arguments were supplied\n LL |     let a = f();\n    |             ^-- an argument is missing\n    |\n+note: closure defined here\n+  --> $DIR/E0057.rs:2:13\n+   |\n+LL |     let f = |x| x * 3;\n+   |             ^^^\n help: provide the argument\n    |\n LL |     let a = f({_});\n@@ -15,6 +20,11 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n LL |     let c = f(2, 3);\n    |             ^    - argument unexpected\n    |\n+note: closure defined here\n+  --> $DIR/E0057.rs:2:13\n+   |\n+LL |     let f = |x| x * 3;\n+   |             ^^^\n help: remove the extra argument\n    |\n LL |     let c = f(2);"}, {"sha": "f8dfc4cd043cd07c4310b7c14575f14c7cbe3620", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -8,6 +8,11 @@ LL | |         let b = 1;\n LL | |     });\n    | |_____- argument unexpected\n    |\n+note: closure defined here\n+  --> $DIR/wrong_argument_ice-4.rs:2:6\n+   |\n+LL |     (|| {})(|| {\n+   |      ^^\n help: remove the extra argument\n    |\n LL |     (|| {})();"}, {"sha": "3241c9f8521c0811b9dae14916c3443f2c8b6ccf", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15495767324ec173a01b6ff0197b5c4fceb61d21/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=15495767324ec173a01b6ff0197b5c4fceb61d21", "patch": "@@ -6,6 +6,11 @@ LL |     let z = f(1_usize, 2);\n    |             |\n    |             arguments to this function are incorrect\n    |\n+note: closure defined here\n+  --> $DIR/unboxed-closures-type-mismatch.rs:4:17\n+   |\n+LL |     let mut f = |x: isize, y: isize| -> isize { x + y };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     let z = f(1_isize, 2);"}]}