{"sha": "479c23bb493e4ea801c125cfc54e70723a9aeeb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OWMyM2JiNDkzZTRlYTgwMWMxMjVjZmM1NGU3MDcyM2E5YWVlYjU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-20T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-21T11:17:20Z"}, "message": "Remove result type from raw standard streams constructors\n\nRaw standard streams constructors are infallible. Remove unnecessary\nresult type.", "tree": {"sha": "0e55f5ac72d4f5665022c17811801add186e7160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e55f5ac72d4f5665022c17811801add186e7160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479c23bb493e4ea801c125cfc54e70723a9aeeb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479c23bb493e4ea801c125cfc54e70723a9aeeb5", "html_url": "https://github.com/rust-lang/rust/commit/479c23bb493e4ea801c125cfc54e70723a9aeeb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479c23bb493e4ea801c125cfc54e70723a9aeeb5/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cb8d40eb4382bd67510c0f06fc855063f0fde8", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cb8d40eb4382bd67510c0f06fc855063f0fde8", "html_url": "https://github.com/rust-lang/rust/commit/32cb8d40eb4382bd67510c0f06fc855063f0fde8"}], "stats": {"total": 150, "additions": 71, "deletions": 79}, "files": [{"sha": "f91264af531d55bfbac5e5200daf8153d1fa32f6", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -50,8 +50,8 @@ struct StderrRaw(stdio::Stderr);\n /// handles is **not** available to raw handles returned from this function.\n ///\n /// The returned handle has no external synchronization or buffering.\n-fn stdin_raw() -> io::Result<StdinRaw> {\n-    stdio::Stdin::new().map(StdinRaw)\n+fn stdin_raw() -> StdinRaw {\n+    StdinRaw(stdio::Stdin::new())\n }\n \n /// Constructs a new raw handle to the standard output stream of this process.\n@@ -63,8 +63,8 @@ fn stdin_raw() -> io::Result<StdinRaw> {\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-fn stdout_raw() -> io::Result<StdoutRaw> {\n-    stdio::Stdout::new().map(StdoutRaw)\n+fn stdout_raw() -> StdoutRaw {\n+    StdoutRaw(stdio::Stdout::new())\n }\n \n /// Constructs a new raw handle to the standard error stream of this process.\n@@ -74,8 +74,8 @@ fn stdout_raw() -> io::Result<StdoutRaw> {\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-fn stderr_raw() -> io::Result<StderrRaw> {\n-    stdio::Stderr::new().map(StderrRaw)\n+fn stderr_raw() -> StderrRaw {\n+    StderrRaw(stdio::Stderr::new())\n }\n \n impl Read for StdinRaw {\n@@ -356,11 +356,7 @@ pub fn stdin() -> Stdin {\n \n     fn stdin_init() -> Arc<Mutex<BufReader<Maybe<StdinRaw>>>> {\n         // This must not reentrantly access `INSTANCE`\n-        let stdin = match stdin_raw() {\n-            Ok(stdin) => Maybe::Real(stdin),\n-            _ => Maybe::Fake,\n-        };\n-\n+        let stdin = Maybe::Real(stdin_raw());\n         Arc::new(Mutex::new(BufReader::with_capacity(stdio::STDIN_BUF_SIZE, stdin)))\n     }\n }\n@@ -602,10 +598,7 @@ pub fn stdout() -> Stdout {\n \n     fn stdout_init() -> Arc<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>> {\n         // This must not reentrantly access `INSTANCE`\n-        let stdout = match stdout_raw() {\n-            Ok(stdout) => Maybe::Real(stdout),\n-            _ => Maybe::Fake,\n-        };\n+        let stdout = Maybe::Real(stdout_raw());\n         unsafe {\n             let ret = Arc::new(ReentrantMutex::new(RefCell::new(LineWriter::new(stdout))));\n             ret.init();\n@@ -788,9 +781,8 @@ pub fn stderr() -> Stderr {\n     static INIT: Once = Once::new();\n     INIT.call_once(|| unsafe {\n         INSTANCE.init();\n-        if let Ok(stderr) = stderr_raw() {\n-            *INSTANCE.lock().borrow_mut() = Maybe::Real(stderr);\n-        }\n+        let stderr = stderr_raw();\n+        *INSTANCE.lock().borrow_mut() = Maybe::Real(stderr);\n     });\n     Stderr { inner: &INSTANCE }\n }"}, {"sha": "d564f4f7f40b235bfe864d57b3df9f9ef2119703", "filename": "library/std/src/sys/cloudabi/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -6,8 +6,8 @@ pub struct Stdout(());\n pub struct Stderr(());\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -18,8 +18,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -37,8 +37,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n \n@@ -62,5 +62,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "359ea13c2befc08be5033ac81928eab5549a3f47", "filename": "library/std/src/sys/hermit/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -7,8 +7,8 @@ pub struct Stdout;\n pub struct Stderr;\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n+    pub fn new() -> Stdin {\n+        Stdin\n     }\n }\n \n@@ -28,8 +28,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -69,8 +69,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub fn new() -> Stderr {\n+        Stderr\n     }\n }\n \n@@ -116,5 +116,5 @@ pub fn is_ebadf(_err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "d771a39ea851e8140bdc32d45b8fc9a03d711455", "filename": "library/std/src/sys/sgx/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -19,8 +19,8 @@ fn with_std_fd<F: FnOnce(&FileDesc) -> R, R>(fd: abi::Fd, f: F) -> R {\n }\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -31,8 +31,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -47,8 +47,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n "}, {"sha": "bbf5dd65fa5d9d24936be3cd5c4240aa77971727", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -7,8 +7,8 @@ pub struct Stdout(());\n pub struct Stderr(());\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -28,8 +28,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -53,8 +53,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n \n@@ -84,5 +84,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "7e60e0712dd9d2bbd8f2494f7cc7e5a770916bff", "filename": "library/std/src/sys/unsupported/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -5,8 +5,8 @@ pub struct Stdout;\n pub struct Stderr;\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n+    pub fn new() -> Stdin {\n+        Stdin\n     }\n }\n \n@@ -17,8 +17,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -33,8 +33,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub fn new() -> Stderr {\n+        Stderr\n     }\n }\n "}, {"sha": "e99d2d583467ee77c60e01f5eae27fb3cb1a670a", "filename": "library/std/src/sys/vxworks/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -6,8 +6,8 @@ pub struct Stdout(());\n pub struct Stderr(());\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -21,8 +21,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -40,8 +40,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n \n@@ -65,5 +65,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "cc27e2ee5833c1b2ea506b965fa369df954b1647", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -7,8 +7,8 @@ pub struct Stdout;\n pub struct Stderr;\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n+    pub fn new() -> Stdin {\n+        Stdin\n     }\n \n     #[inline]\n@@ -33,8 +33,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub fn new() -> Stdout {\n+        Stdout\n     }\n \n     #[inline]\n@@ -62,8 +62,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub fn new() -> Stderr {\n+        Stderr\n     }\n \n     #[inline]\n@@ -98,5 +98,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "b2e5458c0d2220b3e155bf3ae8636da17fbe7fd0", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -131,8 +131,8 @@ fn write_u16s(handle: c::HANDLE, data: &[u16]) -> io::Result<usize> {\n }\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin { surrogate: 0 })\n+    pub fn new() -> Stdin {\n+        Stdin { surrogate: 0 }\n     }\n }\n \n@@ -255,8 +255,8 @@ fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -271,8 +271,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub fn new() -> Stderr {\n+        Stderr\n     }\n }\n \n@@ -291,5 +291,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "0016f5dcd011240f992ea109e7f3bebd09e84d64", "filename": "library/std/src/sys/windows/stdio_uwp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479c23bb493e4ea801c125cfc54e70723a9aeeb5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs?ref=479c23bb493e4ea801c125cfc54e70723a9aeeb5", "patch": "@@ -30,8 +30,8 @@ fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n }\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin {})\n+    pub fn new() -> Stdin {\n+        Stdin {}\n     }\n }\n \n@@ -44,8 +44,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -60,8 +60,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub fn new() -> Stderr {\n+        Stderr\n     }\n }\n \n@@ -80,5 +80,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}]}