{"sha": "b49ecafd40f3dd6c9c55d14c392b8c10ce682b84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OWVjYWZkNDBmM2RkNmM5YzU1ZDE0YzM5MmI4YzEwY2U2ODJiODQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-18T09:38:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-18T10:06:22Z"}, "message": "find_path: Builtins are always in scope\n\nFixes #3977.", "tree": {"sha": "a601f0c2fd13404a0118fa4592b54ff9ed578bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a601f0c2fd13404a0118fa4592b54ff9ed578bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84", "html_url": "https://github.com/rust-lang/rust/commit/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09489321454bad8552c180448ac185c7805d7b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/09489321454bad8552c180448ac185c7805d7b79", "html_url": "https://github.com/rust-lang/rust/commit/09489321454bad8552c180448ac185c7805d7b79"}], "stats": {"total": 75, "additions": 50, "deletions": 25}, "files": [{"sha": "0f872b5c047487140eff04e8ea57db9cb9b77659", "filename": "crates/ra_hir_def/src/builtin_type.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs?ref=b49ecafd40f3dd6c9c55d14c392b8c10ce682b84", "patch": "@@ -5,7 +5,7 @@\n \n use std::fmt;\n \n-use hir_expand::name::{name, Name};\n+use hir_expand::name::{name, AsName, Name};\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum Signedness {\n@@ -75,33 +75,39 @@ impl BuiltinType {\n     ];\n }\n \n-impl fmt::Display for BuiltinType {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let type_name = match self {\n-            BuiltinType::Char => \"char\",\n-            BuiltinType::Bool => \"bool\",\n-            BuiltinType::Str => \"str\",\n+impl AsName for BuiltinType {\n+    fn as_name(&self) -> Name {\n+        match self {\n+            BuiltinType::Char => name![char],\n+            BuiltinType::Bool => name![bool],\n+            BuiltinType::Str => name![str],\n             BuiltinType::Int(BuiltinInt { signedness, bitness }) => match (signedness, bitness) {\n-                (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n-                (Signedness::Signed, IntBitness::X8) => \"i8\",\n-                (Signedness::Signed, IntBitness::X16) => \"i16\",\n-                (Signedness::Signed, IntBitness::X32) => \"i32\",\n-                (Signedness::Signed, IntBitness::X64) => \"i64\",\n-                (Signedness::Signed, IntBitness::X128) => \"i128\",\n-\n-                (Signedness::Unsigned, IntBitness::Xsize) => \"usize\",\n-                (Signedness::Unsigned, IntBitness::X8) => \"u8\",\n-                (Signedness::Unsigned, IntBitness::X16) => \"u16\",\n-                (Signedness::Unsigned, IntBitness::X32) => \"u32\",\n-                (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n-                (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n+                (Signedness::Signed, IntBitness::Xsize) => name![isize],\n+                (Signedness::Signed, IntBitness::X8) => name![i8],\n+                (Signedness::Signed, IntBitness::X16) => name![i16],\n+                (Signedness::Signed, IntBitness::X32) => name![i32],\n+                (Signedness::Signed, IntBitness::X64) => name![i64],\n+                (Signedness::Signed, IntBitness::X128) => name![i128],\n+\n+                (Signedness::Unsigned, IntBitness::Xsize) => name![usize],\n+                (Signedness::Unsigned, IntBitness::X8) => name![u8],\n+                (Signedness::Unsigned, IntBitness::X16) => name![u16],\n+                (Signedness::Unsigned, IntBitness::X32) => name![u32],\n+                (Signedness::Unsigned, IntBitness::X64) => name![u64],\n+                (Signedness::Unsigned, IntBitness::X128) => name![u128],\n             },\n             BuiltinType::Float(BuiltinFloat { bitness }) => match bitness {\n-                FloatBitness::X32 => \"f32\",\n-                FloatBitness::X64 => \"f64\",\n+                FloatBitness::X32 => name![f32],\n+                FloatBitness::X64 => name![f64],\n             },\n-        };\n-        f.write_str(type_name)\n+        }\n+    }\n+}\n+\n+impl fmt::Display for BuiltinType {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let type_name = self.as_name();\n+        type_name.fmt(f)\n     }\n }\n "}, {"sha": "81eff5bfef1d9d2a98d514217b84044b5bfec259", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49ecafd40f3dd6c9c55d14c392b8c10ce682b84/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=b49ecafd40f3dd6c9c55d14c392b8c10ce682b84", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     visibility::Visibility,\n     CrateId, ModuleDefId, ModuleId,\n };\n-use hir_expand::name::{known, Name};\n+use hir_expand::name::{known, AsName, Name};\n use test_utils::tested_by;\n \n const MAX_PATH_LEN: usize = 15;\n@@ -113,6 +113,11 @@ fn find_path_inner(\n         }\n     }\n \n+    // - if the item is a builtin, it's in scope\n+    if let ItemInNs::Types(ModuleDefId::BuiltinType(builtin)) = item {\n+        return Some(ModPath::from_segments(PathKind::Plain, vec![builtin.as_name()]));\n+    }\n+\n     // Recursive case:\n     // - if the item is an enum variant, refer to it via the enum\n     if let Some(ModuleDefId::EnumVariantId(variant)) = item.as_module_def_id() {\n@@ -523,4 +528,18 @@ mod tests {\n         \"#;\n         check_found_path(code, \"megaalloc::Arc\");\n     }\n+\n+    #[test]\n+    fn builtins_are_in_scope() {\n+        let code = r#\"\n+        //- /main.rs\n+        <|>\n+\n+        pub mod primitive {\n+            pub use u8;\n+        }\n+        \"#;\n+        check_found_path(code, \"u8\");\n+        check_found_path(code, \"u16\");\n+    }\n }"}]}