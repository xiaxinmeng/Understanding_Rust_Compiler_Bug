{"sha": "2713ad43425bef040e3c7d55618d18035fe68c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTNhZDQzNDI1YmVmMDQwZTNjN2Q1NTYxOGQxODAzNWZlNjhjMWE=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-13T13:27:42Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-13T13:40:01Z"}, "message": "Properly lint macro arguments for `explicit_deref_methods`", "tree": {"sha": "00379039b67947a0b8c429ec2346bfb3c17200de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00379039b67947a0b8c429ec2346bfb3c17200de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2713ad43425bef040e3c7d55618d18035fe68c1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBMwLMACgkQ2lnoZDo37QbWpQD/a2lhKCxDIZ+0rWyLeTiA5Gzw\nbNvFT71QjlYY0AQ/k8wBAOvuTyAm6TjBQiiywUy9NMqDcNOHJrkSMxynhTolW6EA\n=K7OZ\n-----END PGP SIGNATURE-----", "payload": "tree 00379039b67947a0b8c429ec2346bfb3c17200de\nparent 704f7a8e5025cdf5765493b4369290b65230c5d1\nauthor Jason Newcomb <jsnewcomb@pm.me> 1615642062 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1615642801 -0500\n\nProperly lint macro arguments for `explicit_deref_methods`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2713ad43425bef040e3c7d55618d18035fe68c1a", "html_url": "https://github.com/rust-lang/rust/commit/2713ad43425bef040e3c7d55618d18035fe68c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2713ad43425bef040e3c7d55618d18035fe68c1a/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704f7a8e5025cdf5765493b4369290b65230c5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/704f7a8e5025cdf5765493b4369290b65230c5d1", "html_url": "https://github.com/rust-lang/rust/commit/704f7a8e5025cdf5765493b4369290b65230c5d1"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "40ed6d8d1541e09bf9dc414bc658aabd641b2a9e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2713ad43425bef040e3c7d55618d18035fe68c1a/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2713ad43425bef040e3c7d55618d18035fe68c1a/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=2713ad43425bef040e3c7d55618d18035fe68c1a", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                 match kind {\n                     RefOp::Method(target_mut)\n                         if !is_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n-                            && is_linted_explicit_deref_position(parent, expr.hir_id) =>\n+                            && is_linted_explicit_deref_position(parent, expr.hir_id, expr.span) =>\n                     {\n                         self.state = Some((\n                             State::DerefMethod {\n@@ -189,9 +189,9 @@ fn deref_method_same_type(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n \n // Checks whether the parent node is a suitable context for switching from a deref method to the\n // deref operator.\n-fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n+fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId, child_span: Span) -> bool {\n     let parent = match parent {\n-        Some(Node::Expr(e)) => e,\n+        Some(Node::Expr(e)) if e.span.ctxt() == child_span.ctxt() => e,\n         _ => return true,\n     };\n     match parent.kind {"}, {"sha": "51d0468e47ca41392103bb164d31ebf005e04154", "filename": "tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2713ad43425bef040e3c7d55618d18035fe68c1a/tests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2713ad43425bef040e3c7d55618d18035fe68c1a/tests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.fixed?ref=2713ad43425bef040e3c7d55618d18035fe68c1a", "patch": "@@ -76,6 +76,8 @@ fn main() {\n     }\n     let b: &str = expr_deref!(a);\n \n+    let b: &str = expr_deref!(&*a);\n+\n     // The struct does not implement Deref trait\n     #[derive(Copy, Clone)]\n     struct NoLint(u32);"}, {"sha": "680664bd4f6f26ac3facdd7efa2f10cd5e12c948", "filename": "tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2713ad43425bef040e3c7d55618d18035fe68c1a/tests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2713ad43425bef040e3c7d55618d18035fe68c1a/tests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.rs?ref=2713ad43425bef040e3c7d55618d18035fe68c1a", "patch": "@@ -76,6 +76,8 @@ fn main() {\n     }\n     let b: &str = expr_deref!(a);\n \n+    let b: &str = expr_deref!(a.deref());\n+\n     // The struct does not implement Deref trait\n     #[derive(Copy, Clone)]\n     struct NoLint(u32);"}, {"sha": "8035d77d18d5c8c333dfae8fc96bef73d371d476", "filename": "tests/ui/explicit_deref_methods.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2713ad43425bef040e3c7d55618d18035fe68c1a/tests%2Fui%2Fexplicit_deref_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2713ad43425bef040e3c7d55618d18035fe68c1a/tests%2Fui%2Fexplicit_deref_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.stderr?ref=2713ad43425bef040e3c7d55618d18035fe68c1a", "patch": "@@ -66,5 +66,11 @@ error: explicit `deref` method call\n LL |     let b = opt_a.unwrap().deref();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*opt_a.unwrap()`\n \n-error: aborting due to 11 previous errors\n+error: explicit `deref` method call\n+  --> $DIR/explicit_deref_methods.rs:79:31\n+   |\n+LL |     let b: &str = expr_deref!(a.deref());\n+   |                               ^^^^^^^^^ help: try this: `&*a`\n+\n+error: aborting due to 12 previous errors\n "}]}