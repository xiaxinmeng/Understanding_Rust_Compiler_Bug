{"sha": "1c7b36d4db582cb47513a6c7176baaec1c3346ab", "node_id": "C_kwDOAAsO6NoAKDFjN2IzNmQ0ZGI1ODJjYjQ3NTEzYTZjNzE3NmJhYWVjMWMzMzQ2YWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-12T11:36:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-12T11:36:58Z"}, "message": "Auto merge of #99177 - Dylan-DPC:rollup-m0k9q2w, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #98622 (rustc_target: Flip the default for `TargetOptions::executables` to true)\n - #98633 (Fix last `let_chains` blocker)\n - #98972 (Suggest adding a missing zero to a floating point number)\n - #99038 (Some more `EarlyBinder` cleanups)\n - #99154 (use PlaceRef::iter_projections to fix old FIXME)\n - #99171 (Put back UI test regex)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e9fd931884a2a25de8541e399271ec90e875f3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fd931884a2a25de8541e399271ec90e875f3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7b36d4db582cb47513a6c7176baaec1c3346ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7b36d4db582cb47513a6c7176baaec1c3346ab", "html_url": "https://github.com/rust-lang/rust/commit/1c7b36d4db582cb47513a6c7176baaec1c3346ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7b36d4db582cb47513a6c7176baaec1c3346ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "html_url": "https://github.com/rust-lang/rust/commit/b3f4c3119957aa0a250cab08ab586b7a9a680ef1"}, {"sha": "87e25e4fd03a8da19718e800413d000030e0a10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e25e4fd03a8da19718e800413d000030e0a10c", "html_url": "https://github.com/rust-lang/rust/commit/87e25e4fd03a8da19718e800413d000030e0a10c"}], "stats": {"total": 1607, "additions": 1180, "deletions": 427}, "files": [{"sha": "0ecb83996a8af7ae6c9d238d0d1c820359208fb3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1111,11 +1111,9 @@ macro_rules! visit_place_fns {\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            // FIXME: Use PlaceRef::iter_projections, once that exists.\n-            let mut cursor = place_ref.projection;\n-            while let &[ref proj_base @ .., elem] = cursor {\n-                cursor = proj_base;\n-                self.visit_projection_elem(place_ref.local, cursor, elem, context, location);\n+            for (base, elem) in place_ref.iter_projections().rev() {\n+                let base_proj = base.projection;\n+                self.visit_projection_elem(place_ref.local, base_proj, elem, context, location);\n             }\n         }\n "}, {"sha": "add2df25884e3f1b7e1406b5e503f5dd9b0f0902", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -85,10 +85,10 @@ impl GenericParamDef {\n     ) -> Option<EarlyBinder<ty::GenericArg<'tcx>>> {\n         match self.kind {\n             GenericParamDefKind::Type { has_default, .. } if has_default => {\n-                Some(EarlyBinder(tcx.type_of(self.def_id).into()))\n+                Some(tcx.bound_type_of(self.def_id).map_bound(|t| t.into()))\n             }\n             GenericParamDefKind::Const { has_default } if has_default => {\n-                Some(EarlyBinder(tcx.const_param_default(self.def_id).into()))\n+                Some(tcx.bound_const_param_default(self.def_id).map_bound(|c| c.into()))\n             }\n             _ => None,\n         }"}, {"sha": "d663f1a3ec6e796c190c3589068505538c33259c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -932,6 +932,10 @@ impl<T> EarlyBinder<T> {\n         let value = f(self.0)?;\n         Ok(EarlyBinder(value))\n     }\n+\n+    pub fn rebind<U>(&self, value: U) -> EarlyBinder<U> {\n+        EarlyBinder(value)\n+    }\n }\n \n impl<T> EarlyBinder<Option<T>> {"}, {"sha": "4d2f69b23fa09adbe47a2a06f75dcce5b9d91c3f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -676,6 +676,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n         ty::EarlyBinder(self.item_bounds(def_id))\n     }\n+\n+    pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n+        ty::EarlyBinder(self.const_param_default(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "f3153a64820483513ca3d4fd1220e5ba7ad46204", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -537,13 +537,12 @@ fn build_call_shim<'tcx>(\n     };\n \n     let def_id = instance.def_id();\n-    let sig = tcx.fn_sig(def_id);\n-    let mut sig = tcx.erase_late_bound_regions(sig);\n+    let sig = tcx.bound_fn_sig(def_id);\n+    let sig = sig.map_bound(|sig| tcx.erase_late_bound_regions(sig));\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n-    if let Some(sig_substs) = sig_substs {\n-        sig = EarlyBinder(sig).subst(tcx, sig_substs);\n-    }\n+    let mut sig =\n+        if let Some(sig_substs) = sig_substs { sig.subst(tcx, sig_substs) } else { sig.0 };\n \n     if let CallKind::Indirect(fnty) = call_kind {\n         // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This"}, {"sha": "f9387e29262ae19684d8425f281ed78ae534c9dd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1393,7 +1393,9 @@ impl<'a> Parser<'a> {\n             self.parse_yield_expr(attrs)\n         } else if self.is_do_yeet() {\n             self.parse_yeet_expr(attrs)\n-        } else if self.eat_keyword(kw::Let) {\n+        } else if self.check_keyword(kw::Let) {\n+            self.manage_let_chains_context();\n+            self.bump();\n             self.parse_let_expr(attrs)\n         } else if self.eat_keyword(kw::Underscore) {\n             Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))\n@@ -2355,16 +2357,30 @@ impl<'a> Parser<'a> {\n         Ok(cond)\n     }\n \n+    // Checks if `let` is in an invalid position like `let x = let y = 1;` or\n+    // if the current `let` is in a let_chains context but nested in another\n+    // expression like `if let Some(_) = _opt && [1, 2, 3][let _ = ()] = 1`.\n+    //\n+    // This method expects that the current token is `let`.\n+    fn manage_let_chains_context(&mut self) {\n+        debug_assert!(matches!(self.token.kind, TokenKind::Ident(kw::Let, _)));\n+        let is_in_a_let_chains_context_but_nested_in_other_expr = self.let_expr_allowed\n+            && !matches!(\n+                self.prev_token.kind,\n+                TokenKind::AndAnd\n+                    | TokenKind::CloseDelim(Delimiter::Brace)\n+                    | TokenKind::Ident(kw::If, _)\n+                    | TokenKind::Ident(kw::While, _)\n+            );\n+        if !self.let_expr_allowed || is_in_a_let_chains_context_but_nested_in_other_expr {\n+            self.struct_span_err(self.token.span, \"expected expression, found `let` statement\")\n+                .emit();\n+        }\n+    }\n+\n     /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        if !self.let_expr_allowed {\n-            self.struct_span_err(\n-                self.prev_token.span,\n-                \"expected expression, found `let` statement\",\n-            )\n-            .emit();\n-        }\n         let lo = self.prev_token.span;\n         let pat = self.parse_pat_allow_top_alt(\n             None,"}, {"sha": "d3fd7051a1289c8fea2b32b41809760f275bdd9d", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+strict-align,+neon,+fp-armv8\".into(),\n-        executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(128),"}, {"sha": "6316abe1ba9f23b4be4083f0471668847b31af41", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+strict-align,-neon,-fp-armv8\".into(),\n-        executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(128),"}, {"sha": "9bfae46ef32d2301a4d158278a3121e3633f4e1a", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -25,7 +25,6 @@ pub fn opts(os: &'static str) -> TargetOptions {\n         function_sections: false,\n         dynamic_linking: true,\n         linker_is_gnu: false,\n-        executables: true,\n         families: cvs![\"unix\"],\n         is_like_osx: true,\n         default_dwarf_version: 2,"}, {"sha": "0328ea98c48cb62a93ea097fa458081179b31d59", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -54,7 +54,6 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n         abi: target_abi(arch).into(),\n         cpu: target_cpu(arch).into(),\n         dynamic_linking: false,\n-        executables: true,\n         link_env_remove: link_env_remove(arch),\n         has_thread_local: false,\n         ..super::apple_base::opts(os)"}, {"sha": "511693abe98072c15c81753e72b024a1f4e478af", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             abi: \"eabi\".into(),\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            executables: true,\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "5df4a0a1583fba6494ff1a3a44ccbde3ec3d5579", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             abi: \"eabihf\".into(),\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            executables: true,\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "1bba3939397b70656a52ae7862ed91b299658a55", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -23,7 +23,6 @@ pub fn target() -> Target {\n             abi: \"eabihf\".into(),\n             linker_flavor: LinkerFlavor::Gcc,\n             cpu: \"mpcore\".into(),\n-            executables: true,\n             families: cvs![\"unix\"],\n             linker: Some(\"arm-none-eabi-gcc\".into()),\n             relocation_model: RelocModel::Static,"}, {"sha": "cb5cbe15836fe5560853ca0c28ba4322c3962d59", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -22,7 +22,6 @@ pub fn target() -> Target {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".into(),\n-        executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(64),"}, {"sha": "fb5dd2e7574fc54787917470c0ee4d7ff66a33d0", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".into(),\n-        executables: true,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(64),"}, {"sha": "5f1da09b3172241f7498a9219e7272102cfc0f74", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             abi: \"eabi\".into(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            executables: true,\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "0038ed0df8bd3dc144180a69c04ada18ddf2a6f0", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             abi: \"eabihf\".into(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-            executables: true,\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "1d441e558ddcc257b9c88b16844b24aaf3ec5e97", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -16,7 +16,6 @@ pub fn target(target_cpu: &'static str, mmcu: &'static str) -> Target {\n             exe_suffix: \".elf\".into(),\n \n             linker: Some(\"avr-gcc\".into()),\n-            executables: true,\n             eh_frame_header: false,\n             pre_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[mmcu]),\n             late_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-lgcc\"]),"}, {"sha": "3c4da6f883d9dab420e3520d582ff68ff12a1ede", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -7,7 +7,6 @@ pub fn opts(endian: Endian) -> TargetOptions {\n         endian,\n         linker_flavor: LinkerFlavor::BpfLinker,\n         atomic_cas: false,\n-        executables: true,\n         dynamic_linking: true,\n         no_builtins: true,\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "de2be78179699f26de8b295ba58d04eab807a192", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"dragonfly\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "8c141aaaec34a95a70c6bf18defb8187a90c38e4", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"freebsd\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "df1e3275f73738932dc05ac8a57be68d0bb5ca20", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -23,7 +23,6 @@ pub fn opts() -> TargetOptions {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         pre_link_args,\n         pre_link_objects: crt_objects::new(&["}, {"sha": "8ab874410aa1ce11b078bc4e7446325766f0b7d4", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"haiku\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         relro_level: RelroLevel::Full,\n         ..Default::default()"}, {"sha": "562ccef7eba013b95fb75c31a1c3b38102f26b73", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -10,7 +10,6 @@ pub fn opts() -> TargetOptions {\n         os: \"hermit\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n-        executables: true,\n         has_thread_local: true,\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "cc2c78c69fe15f321728e662743d8e00984ef50d", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -11,7 +11,6 @@ pub fn target() -> Target {\n     base.has_rpath = true;\n     base.linker_is_gnu = false;\n     base.dynamic_linking = true;\n-    base.executables = true;\n \n     base.c_enum_min_bits = 8;\n "}, {"sha": "77e000474b86f31436cd07dc745ab53b96468039", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -27,7 +27,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"illumos\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         has_rpath: true,\n         families: cvs![\"unix\"],\n         is_like_solaris: true,"}, {"sha": "a08756861e5b265167baa9ad8cbc3c1b8d8baba4", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -5,7 +5,6 @@ pub fn opts() -> TargetOptions {\n         os: \"l4re\".into(),\n         env: \"uclibc\".into(),\n         linker_flavor: LinkerFlavor::L4Bender,\n-        executables: true,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,"}, {"sha": "f4fce3b4050aaf35fa13fc519fc6000cb1e9bc47", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"linux\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "cfc8ec21c2aef15d3007325e233490171e614ddd", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n             vendor: \"sony\".into(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips2\".into(),\n-            executables: true,\n             linker: Some(\"rust-lld\".into()),\n             relocation_model: RelocModel::Static,\n "}, {"sha": "fe2aa2de871ce606ecb70b2f0a3092aeb895f06a", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n             cpu: \"mips32r2\".into(),\n             features: \"+mips32r2,+soft-float,+noabicalls\".into(),\n             max_atomic_width: Some(32),\n-            executables: true,\n             linker: Some(\"rust-lld\".into()),\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "ef49fc8e968a815ec5a362e13e63dd4a29d30096", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1212,8 +1212,7 @@ pub struct TargetOptions {\n     pub dynamic_linking: bool,\n     /// If dynamic linking is available, whether only cdylibs are supported.\n     pub only_cdylib: bool,\n-    /// Whether executables are available on this target. iOS, for example, only allows static\n-    /// libraries. Defaults to false.\n+    /// Whether executables are available on this target. Defaults to true.\n     pub executables: bool,\n     /// Relocation model to use in object file. Corresponds to `llc\n     /// -relocation-model=$relocation_model`. Defaults to `Pic`.\n@@ -1520,7 +1519,7 @@ impl Default for TargetOptions {\n             features: \"\".into(),\n             dynamic_linking: false,\n             only_cdylib: false,\n-            executables: false,\n+            executables: true,\n             relocation_model: RelocModel::Pic,\n             code_model: None,\n             tls_model: TlsModel::GeneralDynamic,"}, {"sha": "6b09386ae3ee5464bda951793058e218b53c7e6c", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -9,7 +9,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             c_int_width: \"16\".into(),\n-            executables: true,\n \n             // The LLVM backend currently can't generate object files. To\n             // workaround this LLVM generates assembly files which then we feed"}, {"sha": "edb30b72bf68ddf667e72a74c0b81a328016cc95", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -7,7 +7,6 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         linker_flavor: LinkerFlavor::Msvc,\n-        executables: true,\n         is_like_windows: true,\n         is_like_msvc: true,\n         lld_flavor: LldFlavor::Link,"}, {"sha": "be94ea234658fbd4fc8f9413e97eb108915add87", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"netbsd\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         no_default_libraries: false,\n         has_rpath: true,"}, {"sha": "1c5b68001b957b00cc0b927c014022f3b1c25c95", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> Target {\n \n             // Needed to use `dylib` and `bin` crate types and the linker.\n             dynamic_linking: true,\n-            executables: true,\n \n             // Avoid using dylib because it contain metadata not supported\n             // by LLVM NVPTX backend."}, {"sha": "e7db14e05a4ec59f74614aa2d1700854b31060f0", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"openbsd\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,\n         abi_return_struct_as_int: true,"}, {"sha": "468fe478549b2468b42dc37a5ef0ca8ab8fd9c49", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -5,7 +5,6 @@ pub fn opts() -> TargetOptions {\n         os: \"redox\".into(),\n         env: \"relibc\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "232139db6cad0ebd69da0b78025291187e744ea9", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,"}, {"sha": "3e5d2887f431c5e2746be47c45e8895720ab518a", "filename": "compiler/rustc_target/src/spec/riscv32im_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32im_unknown_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             features: \"+m\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,"}, {"sha": "99317b9f1185f57fc077bf1009d649874c9ad14a", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(32),\n             features: \"+m,+a,+c\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,"}, {"sha": "a5de645c9846f65afe5dc45c33e7c06f74ac1763", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_xous_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_xous_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_xous_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_xous_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n             cpu: \"generic-rv32\".into(),\n             max_atomic_width: Some(32),\n             features: \"+m,+a,+c\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             ..Default::default()"}, {"sha": "03baef65c0d5b5cfba8f46d99a18bad496881653", "filename": "compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> Target {\n             atomic_cas: true,\n \n             features: \"+m,+c\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,"}, {"sha": "bf510d204a721f7540778cf3d3bbc6ec2d3fa751", "filename": "compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             features: \"+m,+c\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,"}, {"sha": "03b3cfd1eb11ca90a401e05c705b318e7f03d686", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n             cpu: \"generic-rv64\".into(),\n             max_atomic_width: Some(64),\n             features: \"+m,+a,+f,+d,+c\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),"}, {"sha": "2a94c9dd2337127096c6cacb10d4d9edf3a01412", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             cpu: \"generic-rv64\".into(),\n             max_atomic_width: Some(64),\n             features: \"+m,+a,+c\".into(),\n-            executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),"}, {"sha": "b7e8e8cf7f57772fbee59e3ad049094402b347ee", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"solaris\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         has_rpath: true,\n         families: cvs![\"unix\"],\n         is_like_solaris: true,"}, {"sha": "c585a6cd58ea20885a84d1d719a5de3d0a78e774", "filename": "compiler/rustc_target/src/spec/solid_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -5,6 +5,7 @@ pub fn opts(kernel: &str) -> TargetOptions {\n     TargetOptions {\n         os: format!(\"solid_{}\", kernel).into(),\n         vendor: \"kmc\".into(),\n+        executables: false,\n         frame_pointer: FramePointer::NonLeaf,\n         has_thread_local: true,\n         ..Default::default()"}, {"sha": "049142b89f1f19835ba1606847b2dd47232f4626", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -34,7 +34,6 @@ pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        executables: true,\n         // In most cases, LLD is good enough\n         linker: Some(\"rust-lld\".into()),\n         // Because these devices have very little resources having an unwinder is too onerous so we"}, {"sha": "aa4784b63e7aac7d994bc8961fa855ca6a158dae", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -8,7 +8,6 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"wr-c++\".into()),\n         exe_suffix: \".vxe\".into(),\n         dynamic_linking: true,\n-        executables: true,\n         families: cvs![\"unix\"],\n         has_rpath: true,\n         has_thread_local: true,"}, {"sha": "9216d3e7b65f60358424dd212d6f71c058d0b7fe", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -62,9 +62,6 @@ pub fn options() -> TargetOptions {\n         dynamic_linking: true,\n         only_cdylib: true,\n \n-        // This means we'll just embed a `#[start]` function in the wasm module\n-        executables: true,\n-\n         // relatively self-explanatory!\n         exe_suffix: \".wasm\".into(),\n         dll_prefix: \"\".into(),"}, {"sha": "90e0af3e38afead9a3d7bbe6a6e4798c73522ac2", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -67,7 +67,6 @@ pub fn opts() -> TargetOptions {\n         function_sections: false,\n         linker: Some(\"gcc\".into()),\n         dynamic_linking: true,\n-        executables: true,\n         dll_prefix: \"\".into(),\n         dll_suffix: \".dll\".into(),\n         exe_suffix: \".exe\".into(),"}, {"sha": "bae007dc9f3bc0ad21a7bcd0c555cd8a2ea2c298", "filename": "compiler/rustc_target/src/spec/windows_gnullvm_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -20,7 +20,6 @@ pub fn opts() -> TargetOptions {\n         abi: \"llvm\".into(),\n         linker: Some(\"clang\".into()),\n         dynamic_linking: true,\n-        executables: true,\n         dll_prefix: \"\".into(),\n         dll_suffix: \".dll\".into(),\n         exe_suffix: \".exe\".into(),"}, {"sha": "fa69b919cecd7b0831550cd8515824097c63a2c6", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -24,7 +24,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         abi: \"uwp\".into(),\n         vendor: \"uwp\".into(),\n-        executables: false,\n         limit_rdylib_exports: false,\n         late_link_args,\n         late_link_args_dynamic,"}, {"sha": "9d597ea2e62d6b1f3cb9ba0e023c0d4ccd63e52a", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -62,7 +62,6 @@ pub fn target() -> Target {\n         vendor: \"fortanix\".into(),\n         abi: \"fortanix\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        executables: true,\n         linker: Some(\"rust-lld\".into()),\n         max_atomic_width: Some(64),\n         cpu: \"x86-64\".into(),"}, {"sha": "809fd642d41143fd12a2df76959972de42d52f80", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -24,7 +24,6 @@ pub fn target() -> Target {\n         features:\n             \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n                 .into(),\n-        executables: true,\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         code_model: Some(CodeModel::Kernel),"}, {"sha": "4862631980e36ee9798a2ba5780cc2ef4e3f3bfb", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -12,7 +12,7 @@ use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, GenericParamDefKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n use rustc_span::def_id::DefId;\n \n@@ -555,7 +555,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                         let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n                         let bound =\n-                            EarlyBinder(bound.0.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n+                            bound.map_bound(|b| b.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n                     };\n                 let normalized_bound = normalize_with_depth_to("}, {"sha": "1d4e64b6bfc303c747062128738b77ab0f989c76", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -550,7 +550,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                            tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())\n                                 .into()\n                         } else {"}, {"sha": "1d3608048f2847460c72677343536df31b4e5d3d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -48,7 +48,7 @@ use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TypeVisitable};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n-use rustc_span::source_map::Span;\n+use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n@@ -2162,14 +2162,55 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if !expr_t.is_primitive_ty() {\n             self.ban_nonexisting_field(field, base, expr, expr_t);\n         } else {\n-            type_error_struct!(\n+            let field_name = field.to_string();\n+            let mut err = type_error_struct!(\n                 self.tcx().sess,\n                 field.span,\n                 expr_t,\n                 E0610,\n                 \"`{expr_t}` is a primitive type and therefore doesn't have fields\",\n-            )\n-            .emit();\n+            );\n+            let is_valid_suffix = |field: String| {\n+                if field == \"f32\" || field == \"f64\" {\n+                    return true;\n+                }\n+                let mut chars = field.chars().peekable();\n+                match chars.peek() {\n+                    Some('e') | Some('E') => {\n+                        chars.next();\n+                        if let Some(c) = chars.peek()\n+                            && !c.is_numeric() && *c != '-' && *c != '+'\n+                        {\n+                            return false;\n+                        }\n+                        while let Some(c) = chars.peek() {\n+                            if !c.is_numeric() {\n+                                break;\n+                            }\n+                            chars.next();\n+                        }\n+                    }\n+                    _ => (),\n+                }\n+                let suffix = chars.collect::<String>();\n+                suffix.is_empty() || suffix == \"f32\" || suffix == \"f64\"\n+            };\n+            if let ty::Infer(ty::IntVar(_)) = expr_t.kind()\n+                && let ExprKind::Lit(Spanned {\n+                    node: ast::LitKind::Int(_, ast::LitIntType::Unsuffixed),\n+                    ..\n+                }) = base.kind\n+                && !base.span.from_expansion()\n+                && is_valid_suffix(field_name)\n+            {\n+                err.span_suggestion_verbose(\n+                    field.span.shrink_to_lo(),\n+                    \"If the number is meant to be a floating point number, consider adding a `0` after the period\",\n+                    '0',\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            err.emit();\n         }\n \n         self.tcx().ty_error()"}, {"sha": "d15d40bc24756938d26c1d53113fdfdd232eb04d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1426,7 +1426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                            tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())\n                                 .into()\n                         } else {"}, {"sha": "2de225303560c3108a82c5112b7685fc8a379a30", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -21,9 +21,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, EarlyBinder, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{\n@@ -713,7 +711,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n \n             let (impl_ty, impl_substs) = self.impl_ty_and_substs(impl_def_id);\n-            let impl_ty = EarlyBinder(impl_ty).subst(self.tcx, impl_substs);\n+            let impl_ty = impl_ty.subst(self.tcx, impl_substs);\n \n             debug!(\"impl_ty: {:?}\", impl_ty);\n \n@@ -1811,9 +1809,12 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.erase_late_bound_regions(xform_fn_sig)\n     }\n \n-    /// Gets the type of an impl and generate substitutions with placeholders.\n-    fn impl_ty_and_substs(&self, impl_def_id: DefId) -> (Ty<'tcx>, SubstsRef<'tcx>) {\n-        (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n+    /// Gets the type of an impl and generate substitutions with inference vars.\n+    fn impl_ty_and_substs(\n+        &self,\n+        impl_def_id: DefId,\n+    ) -> (ty::EarlyBinder<Ty<'tcx>>, SubstsRef<'tcx>) {\n+        (self.tcx.bound_type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n     }\n \n     fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {"}, {"sha": "7534482cce9bba7f3deccbe62887ac6e42554efa", "filename": "compiler/rustc_typeck/src/outlives/explicit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -6,19 +6,19 @@ use super::utils::*;\n \n #[derive(Debug)]\n pub struct ExplicitPredicatesMap<'tcx> {\n-    map: FxHashMap<DefId, RequiredPredicates<'tcx>>,\n+    map: FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>>,\n }\n \n impl<'tcx> ExplicitPredicatesMap<'tcx> {\n     pub fn new() -> ExplicitPredicatesMap<'tcx> {\n         ExplicitPredicatesMap { map: FxHashMap::default() }\n     }\n \n-    pub fn explicit_predicates_of(\n+    pub(crate) fn explicit_predicates_of(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-    ) -> &RequiredPredicates<'tcx> {\n+    ) -> &ty::EarlyBinder<RequiredPredicates<'tcx>> {\n         self.map.entry(def_id).or_insert_with(|| {\n             let predicates = if def_id.is_local() {\n                 tcx.explicit_predicates_of(def_id)\n@@ -63,7 +63,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                 }\n             }\n \n-            required_predicates\n+            ty::EarlyBinder(required_predicates)\n         })\n     }\n }"}, {"sha": "257a9520eeb25f87fc269e8197fd32096430ba08", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -13,20 +13,19 @@ use super::utils::*;\n /// `global_inferred_outlives`: this is initially the empty map that\n ///     was generated by walking the items in the crate. This will\n ///     now be filled with inferred predicates.\n-pub fn infer_predicates<'tcx>(\n+pub(super) fn infer_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n-) -> FxHashMap<DefId, RequiredPredicates<'tcx>> {\n+) -> FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>> {\n     debug!(\"infer_predicates\");\n \n-    let mut predicates_added = true;\n+    let mut explicit_map = ExplicitPredicatesMap::new();\n \n     let mut global_inferred_outlives = FxHashMap::default();\n \n     // If new predicates were added then we need to re-calculate\n     // all crates since there could be new implied predicates.\n-    while predicates_added {\n-        predicates_added = false;\n+    'outer: loop {\n+        let mut predicates_added = false;\n \n         // Visit all the crates and infer predicates\n         for id in tcx.hir().items() {\n@@ -53,9 +52,9 @@ pub fn infer_predicates<'tcx>(\n                             tcx,\n                             field_ty,\n                             field_span,\n-                            &mut global_inferred_outlives,\n+                            &global_inferred_outlives,\n                             &mut item_required_predicates,\n-                            explicit_map,\n+                            &mut explicit_map,\n                         );\n                     }\n                 }\n@@ -70,12 +69,17 @@ pub fn infer_predicates<'tcx>(\n             // we walk the crates again and re-calculate predicates for all\n             // items.\n             let item_predicates_len: usize =\n-                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.len());\n+                global_inferred_outlives.get(&item_did.to_def_id()).map_or(0, |p| p.0.len());\n             if item_required_predicates.len() > item_predicates_len {\n                 predicates_added = true;\n-                global_inferred_outlives.insert(item_did.to_def_id(), item_required_predicates);\n+                global_inferred_outlives\n+                    .insert(item_did.to_def_id(), ty::EarlyBinder(item_required_predicates));\n             }\n         }\n+\n+        if !predicates_added {\n+            break 'outer;\n+        }\n     }\n \n     global_inferred_outlives\n@@ -85,7 +89,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     field_ty: Ty<'tcx>,\n     field_span: Span,\n-    global_inferred_outlives: &FxHashMap<DefId, RequiredPredicates<'tcx>>,\n+    global_inferred_outlives: &FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>>,\n     required_predicates: &mut RequiredPredicates<'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) {\n@@ -133,11 +137,13 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                 // 'a` holds for `Foo`.\n                 debug!(\"Adt\");\n                 if let Some(unsubstituted_predicates) = global_inferred_outlives.get(&def.did()) {\n-                    for (unsubstituted_predicate, &span) in unsubstituted_predicates {\n+                    for (unsubstituted_predicate, &span) in &unsubstituted_predicates.0 {\n                         // `unsubstituted_predicate` is `U: 'b` in the\n                         // example above.  So apply the substitution to\n                         // get `T: 'a` (or `predicate`):\n-                        let predicate = EarlyBinder(*unsubstituted_predicate).subst(tcx, substs);\n+                        let predicate = unsubstituted_predicates\n+                            .rebind(*unsubstituted_predicate)\n+                            .subst(tcx, substs);\n                         insert_outlives_predicate(\n                             tcx,\n                             predicate.0,\n@@ -224,7 +230,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n /// will give us `U: 'static` and `U: Foo`. The latter we\n /// can ignore, but we will want to process `U: 'static`,\n /// applying the substitution as above.\n-pub fn check_explicit_predicates<'tcx>(\n+fn check_explicit_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     substs: &[GenericArg<'tcx>],\n@@ -242,7 +248,7 @@ pub fn check_explicit_predicates<'tcx>(\n     );\n     let explicit_predicates = explicit_map.explicit_predicates_of(tcx, def_id);\n \n-    for (outlives_predicate, &span) in explicit_predicates {\n+    for (outlives_predicate, &span) in &explicit_predicates.0 {\n         debug!(\"outlives_predicate = {:?}\", &outlives_predicate);\n \n         // Careful: If we are inferring the effects of a `dyn Trait<..>`\n@@ -287,7 +293,7 @@ pub fn check_explicit_predicates<'tcx>(\n             continue;\n         }\n \n-        let predicate = EarlyBinder(*outlives_predicate).subst(tcx, substs);\n+        let predicate = explicit_predicates.rebind(*outlives_predicate).subst(tcx, substs);\n         debug!(\"predicate = {:?}\", &predicate);\n         insert_outlives_predicate(tcx, predicate.0, predicate.1, span, required_predicates);\n     }"}, {"sha": "8fa65d51e3ba16cad63b955716d377928eb33da7", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -88,9 +88,7 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     // for the type.\n \n     // Compute the inferred predicates\n-    let mut exp_map = explicit::ExplicitPredicatesMap::new();\n-\n-    let global_inferred_outlives = implicit_infer::infer_predicates(tcx, &mut exp_map);\n+    let global_inferred_outlives = implicit_infer::infer_predicates(tcx);\n \n     // Convert the inferred predicates into the \"collected\" form the\n     // global data structure expects.\n@@ -100,7 +98,7 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n     let predicates = global_inferred_outlives\n         .iter()\n         .map(|(&def_id, set)| {\n-            let predicates = &*tcx.arena.alloc_from_iter(set.iter().filter_map(\n+            let predicates = &*tcx.arena.alloc_from_iter(set.0.iter().filter_map(\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some(("}, {"sha": "b718ca942133674130857776d1bab4c34b215f12", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -7,12 +7,12 @@ use std::collections::BTreeMap;\n \n /// Tracks the `T: 'a` or `'a: 'a` predicates that we have inferred\n /// must be added to the struct header.\n-pub type RequiredPredicates<'tcx> =\n+pub(crate) type RequiredPredicates<'tcx> =\n     BTreeMap<ty::OutlivesPredicate<GenericArg<'tcx>, ty::Region<'tcx>>, Span>;\n \n /// Given a requirement `T: 'a` or `'b: 'a`, deduce the\n /// outlives_component and add it to `required_predicates`\n-pub fn insert_outlives_predicate<'tcx>(\n+pub(crate) fn insert_outlives_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     kind: GenericArg<'tcx>,\n     outlived_region: Region<'tcx>,"}, {"sha": "fb95ee5539acdacd510f5aaabad3791af397849a", "filename": "src/test/run-make-fulldeps/target-specs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2FMakefile?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -8,4 +8,4 @@ all:\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-x86_64-unknown-linux-gnu-platform --crate-type=lib --emit=asm\n \t$(RUSTC) -Z unstable-options --target=my-awesome-platform.json --print target-spec-json > $(TMPDIR)/test-platform.json && $(RUSTC) -Z unstable-options --target=$(TMPDIR)/test-platform.json --print target-spec-json | diff -q $(TMPDIR)/test-platform.json -\n \t$(RUSTC) foo.rs --target=definitely-not-builtin-target 2>&1 | $(CGREP) 'may not set is_builtin'\n-\t$(RUSTC) foo.rs --target=mismatching-data-layout\n+\t$(RUSTC) foo.rs --target=mismatching-data-layout --crate-type=lib"}, {"sha": "e166edf8b619cb99d36224b5a00bda7b582b3018", "filename": "src/test/rustdoc-ui/c-help.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fc-help.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n // compile-flags: -Chelp\n+// check-stdout\n+// regex-error-pattern: -C\\s+incremental\n \n pub struct Foo;"}, {"sha": "c7cf841b93707bae0974684fa0b41b75adb0ecbe", "filename": "src/test/rustdoc-ui/z-help.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n // compile-flags: -Zhelp\n+// check-stdout\n+// regex-error-pattern: -Z\\s+self-profile\n \n pub struct Foo;"}, {"sha": "d8febd273c96e6cbba1d8487231110197a803630", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -9,9 +9,11 @@ fn _if_let_guard() {\n \n         () if (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if (((let 0 = 1))) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if true && let 0 = 1 => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -23,13 +25,17 @@ fn _if_let_guard() {\n \n         () if (let 0 = 1) && true => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if true && (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if (let 0 = 1) && (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n+        //~| ERROR expected expression, found `let` statement\n \n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n         //~^ ERROR `if let` guards are experimental\n@@ -38,6 +44,7 @@ fn _if_let_guard() {\n         //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n         //~^ ERROR `if let` guards are experimental"}, {"sha": "52b5bca628ac7adeb887bf1bf7781ab2c26a8f50", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 66, "deletions": 24, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1,17 +1,59 @@\n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:59:16\n+  --> $DIR/feature-gate.rs:10:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:14:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:26:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:30:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:34:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:34:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:40:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:66:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:62:16\n+  --> $DIR/feature-gate.rs:69:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:71:15\n+  --> $DIR/feature-gate.rs:78:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -30,7 +72,7 @@ LL |         () if let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:16:12\n+  --> $DIR/feature-gate.rs:18:12\n    |\n LL |         () if true && let 0 = 1 => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -40,7 +82,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:20:12\n+  --> $DIR/feature-gate.rs:22:12\n    |\n LL |         () if let 0 = 1 && true => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +92,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:34:12\n+  --> $DIR/feature-gate.rs:40:12\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +102,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:42:12\n+  --> $DIR/feature-gate.rs:49:12\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,7 +112,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:67:12\n+  --> $DIR/feature-gate.rs:74:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -89,7 +131,7 @@ LL |         () if (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:13:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -98,7 +140,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:16:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -107,7 +149,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:20:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -116,7 +158,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:24:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -125,7 +167,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:27:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -134,7 +176,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -143,7 +185,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -152,7 +194,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -161,7 +203,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -170,7 +212,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -179,7 +221,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -188,7 +230,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -197,7 +239,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:42:15\n+  --> $DIR/feature-gate.rs:49:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -206,7 +248,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:59:16\n+  --> $DIR/feature-gate.rs:66:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -215,14 +257,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:62:16\n+  --> $DIR/feature-gate.rs:69:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 32 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "069d2dc414dea8b89baecb4013bfae59161790c0", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 123, "deletions": 45, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -28,47 +28,61 @@ fn main() {}\n fn _if() {\n     if (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if (let 0 = 1) && true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if true && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     if (let 0 = 1) && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n \n     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn _while() {\n     while (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while (let 0 = 1) && true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while true && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n \n     while (let 0 = 1) && (let 0 = 1) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n \n     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn _macros() {\n@@ -89,39 +103,64 @@ fn _macros() {\n }\n \n fn nested_within_if_expr() {\n-    if &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    if &let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    if !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    if *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR type `bool` cannot be dereferenced\n-    if -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR cannot apply unary operator `-` to type `bool`\n+    if !let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if *let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR type `bool` cannot be dereferenced\n+    //~| ERROR expected expression, found `let` statement\n+    if -let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR cannot apply unary operator `-` to type `bool`\n+    //~| ERROR expected expression, found `let` statement\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         if let 0 = 0? {}\n         //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n         Ok(())\n     }\n-    if (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+    if (let 0 = 0)? {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR the `?` operator can only be applied to values that implement `Try`\n     //~| ERROR the `?` operator can only be used in a function that returns `Result`\n+    //~| ERROR expected expression, found `let` statement\n \n-    if true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    if (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    if true && (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    if true || (true && let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    if true || let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if true && (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    if true || (true && let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n \n     let mut x = true;\n-    if x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    if x = let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    if true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    if ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    if (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    if true..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    if ..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    if (let 0 = 0).. {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n     // Binds as `(let ... = true)..true &&/|| false`.\n     if let Range { start: _, end: _ } = true..true && false {}\n@@ -151,42 +190,68 @@ fn nested_within_if_expr() {\n \n     if let true = let true = true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn nested_within_while_expr() {\n-    while &let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    while &let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    while !let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    while *let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR type `bool` cannot be dereferenced\n-    while -let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR cannot apply unary operator `-` to type `bool`\n+    while !let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while *let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR type `bool` cannot be dereferenced\n+    //~| ERROR expected expression, found `let` statement\n+    while -let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR cannot apply unary operator `-` to type `bool`\n+    //~| ERROR expected expression, found `let` statement\n \n     fn _check_try_binds_tighter() -> Result<(), ()> {\n         while let 0 = 0? {}\n         //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n         Ok(())\n     }\n-    while (let 0 = 0)? {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+    while (let 0 = 0)? {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR the `?` operator can only be applied to values that implement `Try`\n     //~| ERROR the `?` operator can only be used in a function that returns `Result`\n+    //~| ERROR expected expression, found `let` statement\n \n-    while true || let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    while (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    while true && (true || let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    while true || (true && let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n+    while true || let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while true && (true || let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    while true || (true && let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n \n     let mut x = true;\n-    while x = let 0 = 0 {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    while x = let 0 = 0 {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n-    while true..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    while ..(let 0 = 0) {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n-    while (let 0 = 0).. {} //~ ERROR `let` expressions are not supported here\n-    //~^ ERROR mismatched types\n+    while true..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    while ..(let 0 = 0) {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n+    while (let 0 = 0).. {}\n+    //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR expected expression, found `let` statement\n \n     // Binds as `(let ... = true)..true &&/|| false`.\n     while let Range { start: _, end: _ } = true..true && false {}\n@@ -216,6 +281,7 @@ fn nested_within_while_expr() {\n \n     while let true = let true = true {}\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n }\n \n fn not_error_because_clarified_intent() {\n@@ -316,15 +382,18 @@ fn inside_const_generic_arguments() {\n     impl<const B: bool> A<{B}> { const O: u32 = 5; }\n \n     if let A::<{\n-        true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        true && let 1 = 1\n+        //~^ ERROR `let` expressions are not supported here\n     }>::O = 5 {}\n \n     while let A::<{\n-        true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        true && let 1 = 1\n+        //~^ ERROR `let` expressions are not supported here\n     }>::O = 5 {}\n \n     if A::<{\n-        true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n+        true && let 1 = 1\n+        //~^ ERROR `let` expressions are not supported here\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out.\n@@ -345,28 +414,37 @@ fn with_parenthesis() {\n \n     if (let Some(a) = opt && true) {\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     }\n \n     if (let Some(a) = opt) && true {\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if (let Some(a) = opt) && (let Some(b) = a) {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if let Some(a) = opt && (true && true) {\n     }\n \n     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if (let Some(a) = opt && (let Some(b) = a)) && true {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n+    //~| ERROR expected expression, found `let` statement\n     }\n     if (let Some(a) = opt && (true)) && true {\n     //~^ ERROR `let` expressions are not supported here\n+    //~| ERROR expected expression, found `let` statement\n     }\n \n     if (true && (true)) && let Some(a) = opt {"}, {"sha": "cca5310ee0f3a7ee0e4b637c640211441840671d", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 506, "deletions": 212, "changes": 718, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1,113 +1,353 @@\n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:232:6\n+  --> $DIR/disallowed-positions.rs:29:9\n+   |\n+LL |     if (let 0 = 1) {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:33:11\n+   |\n+LL |     if (((let 0 = 1))) {}\n+   |           ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:37:9\n+   |\n+LL |     if (let 0 = 1) && true {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:41:17\n+   |\n+LL |     if true && (let 0 = 1) {}\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:45:9\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:45:24\n+   |\n+LL |     if (let 0 = 1) && (let 0 = 1) {}\n+   |                        ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:51:35\n+   |\n+LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:59:12\n+   |\n+LL |     while (let 0 = 1) {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:63:14\n+   |\n+LL |     while (((let 0 = 1))) {}\n+   |              ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:67:12\n+   |\n+LL |     while (let 0 = 1) && true {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:71:20\n+   |\n+LL |     while true && (let 0 = 1) {}\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:75:12\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:75:27\n+   |\n+LL |     while (let 0 = 1) && (let 0 = 1) {}\n+   |                           ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:81:38\n+   |\n+LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n+   |                                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:106:9\n+   |\n+LL |     if &let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:111:9\n+   |\n+LL |     if !let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:114:9\n+   |\n+LL |     if *let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:118:9\n+   |\n+LL |     if -let 0 = 0 {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:128:9\n+   |\n+LL |     if (let 0 = 0)? {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:134:16\n+   |\n+LL |     if true || let 0 = 0 {}\n+   |                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:137:17\n+   |\n+LL |     if (true || let 0 = 0) {}\n+   |                 ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:140:25\n+   |\n+LL |     if true && (true || let 0 = 0) {}\n+   |                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:147:12\n+   |\n+LL |     if x = let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:152:15\n+   |\n+LL |     if true..(let 0 = 0) {}\n+   |               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:156:11\n+   |\n+LL |     if ..(let 0 = 0) {}\n+   |           ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:160:9\n+   |\n+LL |     if (let 0 = 0).. {}\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:191:19\n+   |\n+LL |     if let true = let true = true {}\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:197:12\n+   |\n+LL |     while &let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:202:12\n+   |\n+LL |     while !let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:205:12\n+   |\n+LL |     while *let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:209:12\n+   |\n+LL |     while -let 0 = 0 {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:219:12\n+   |\n+LL |     while (let 0 = 0)? {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:225:19\n+   |\n+LL |     while true || let 0 = 0 {}\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:228:20\n+   |\n+LL |     while (true || let 0 = 0) {}\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:231:28\n+   |\n+LL |     while true && (true || let 0 = 0) {}\n+   |                            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:238:15\n+   |\n+LL |     while x = let 0 = 0 {}\n+   |               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:243:18\n+   |\n+LL |     while true..(let 0 = 0) {}\n+   |                  ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:247:14\n+   |\n+LL |     while ..(let 0 = 0) {}\n+   |              ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:251:12\n+   |\n+LL |     while (let 0 = 0).. {}\n+   |            ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:282:22\n+   |\n+LL |     while let true = let true = true {}\n+   |                      ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:298:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:236:6\n+  --> $DIR/disallowed-positions.rs:302:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:239:6\n+  --> $DIR/disallowed-positions.rs:305:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:243:6\n+  --> $DIR/disallowed-positions.rs:309:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:253:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:259:13\n+  --> $DIR/disallowed-positions.rs:325:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:262:14\n+  --> $DIR/disallowed-positions.rs:328:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:265:22\n+  --> $DIR/disallowed-positions.rs:331:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:270:9\n+  --> $DIR/disallowed-positions.rs:336:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:274:12\n+  --> $DIR/disallowed-positions.rs:340:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:277:8\n+  --> $DIR/disallowed-positions.rs:343:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:280:6\n+  --> $DIR/disallowed-positions.rs:346:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:284:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:289:6\n+  --> $DIR/disallowed-positions.rs:355:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:289:17\n+  --> $DIR/disallowed-positions.rs:355:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:296:25\n+  --> $DIR/disallowed-positions.rs:362:25\n    |\n LL |         let x = true && let y = 1;\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:302:19\n+  --> $DIR/disallowed-positions.rs:368:19\n    |\n LL |         [1, 2, 3][let _ = ()]\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:307:6\n+  --> $DIR/disallowed-positions.rs:373:6\n    |\n LL |     &let 0 = 0\n    |      ^^^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:337:9\n+  --> $DIR/disallowed-positions.rs:406:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -118,25 +358,79 @@ LL |         { true && let 1 = 1 }\n    |         +                   +\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:384:22\n+  --> $DIR/disallowed-positions.rs:415:9\n+   |\n+LL |     if (let Some(a) = opt && true) {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:420:9\n+   |\n+LL |     if (let Some(a) = opt) && true {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:424:9\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:424:32\n+   |\n+LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n+   |                                ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:433:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:433:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n+   |                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:439:9\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:439:31\n+   |\n+LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n+   |                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:445:9\n+   |\n+LL |     if (let Some(a) = opt && (true)) && true {\n+   |         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:462:22\n    |\n LL |     let x = (true && let y = 1);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:389:20\n+  --> $DIR/disallowed-positions.rs:467:20\n    |\n LL |         ([1, 2, 3][let _ = ()])\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n@@ -155,957 +449,957 @@ LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:32:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:32:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:38:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:38:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:41:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:41:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:41:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:41:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:48\n+  --> $DIR/disallowed-positions.rs:51:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:61\n+  --> $DIR/disallowed-positions.rs:51:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:52:12\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:52:12\n+  --> $DIR/disallowed-positions.rs:59:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:55:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:55:14\n+  --> $DIR/disallowed-positions.rs:63:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:58:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:58:12\n+  --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:61:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:61:20\n+  --> $DIR/disallowed-positions.rs:71:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:64:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:64:12\n+  --> $DIR/disallowed-positions.rs:75:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:64:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:64:27\n+  --> $DIR/disallowed-positions.rs:75:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:51\n+  --> $DIR/disallowed-positions.rs:81:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:68:64\n+  --> $DIR/disallowed-positions.rs:81:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:68:38\n+  --> $DIR/disallowed-positions.rs:81:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:16\n+  --> $DIR/disallowed-positions.rs:95:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:85:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:92:9\n+  --> $DIR/disallowed-positions.rs:106:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:95:9\n+  --> $DIR/disallowed-positions.rs:111:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:96:9\n+  --> $DIR/disallowed-positions.rs:114:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:98:9\n+  --> $DIR/disallowed-positions.rs:118:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:106:9\n+  --> $DIR/disallowed-positions.rs:128:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:106:9\n+  --> $DIR/disallowed-positions.rs:128:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:110:16\n+  --> $DIR/disallowed-positions.rs:134:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:110:13\n+  --> $DIR/disallowed-positions.rs:134:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:111:17\n+  --> $DIR/disallowed-positions.rs:137:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:111:14\n+  --> $DIR/disallowed-positions.rs:137:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:112:25\n+  --> $DIR/disallowed-positions.rs:140:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:112:22\n+  --> $DIR/disallowed-positions.rs:140:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:113:25\n+  --> $DIR/disallowed-positions.rs:143:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:113:17\n+  --> $DIR/disallowed-positions.rs:143:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:116:12\n+  --> $DIR/disallowed-positions.rs:147:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:119:15\n+  --> $DIR/disallowed-positions.rs:152:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:119:15\n+  --> $DIR/disallowed-positions.rs:152:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:121:11\n+  --> $DIR/disallowed-positions.rs:156:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:121:11\n+  --> $DIR/disallowed-positions.rs:156:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:123:9\n+  --> $DIR/disallowed-positions.rs:160:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:123:9\n+  --> $DIR/disallowed-positions.rs:160:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:127:8\n+  --> $DIR/disallowed-positions.rs:166:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:131:8\n+  --> $DIR/disallowed-positions.rs:170:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:138:8\n+  --> $DIR/disallowed-positions.rs:177:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:146:8\n+  --> $DIR/disallowed-positions.rs:185:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:152:19\n+  --> $DIR/disallowed-positions.rs:191:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:157:12\n+  --> $DIR/disallowed-positions.rs:197:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:160:12\n+  --> $DIR/disallowed-positions.rs:202:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:161:12\n+  --> $DIR/disallowed-positions.rs:205:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:163:12\n+  --> $DIR/disallowed-positions.rs:209:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:171:12\n+  --> $DIR/disallowed-positions.rs:219:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:171:12\n+  --> $DIR/disallowed-positions.rs:219:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:175:19\n+  --> $DIR/disallowed-positions.rs:225:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:175:16\n+  --> $DIR/disallowed-positions.rs:225:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:176:20\n+  --> $DIR/disallowed-positions.rs:228:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:176:17\n+  --> $DIR/disallowed-positions.rs:228:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:177:28\n+  --> $DIR/disallowed-positions.rs:231:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:177:25\n+  --> $DIR/disallowed-positions.rs:231:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:178:28\n+  --> $DIR/disallowed-positions.rs:234:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:178:20\n+  --> $DIR/disallowed-positions.rs:234:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:181:15\n+  --> $DIR/disallowed-positions.rs:238:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:184:18\n+  --> $DIR/disallowed-positions.rs:243:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:184:18\n+  --> $DIR/disallowed-positions.rs:243:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:186:14\n+  --> $DIR/disallowed-positions.rs:247:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:186:14\n+  --> $DIR/disallowed-positions.rs:247:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:188:12\n+  --> $DIR/disallowed-positions.rs:251:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:188:12\n+  --> $DIR/disallowed-positions.rs:251:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:192:11\n+  --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:196:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:203:11\n+  --> $DIR/disallowed-positions.rs:268:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:211:11\n+  --> $DIR/disallowed-positions.rs:276:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:217:22\n+  --> $DIR/disallowed-positions.rs:282:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:232:6\n+  --> $DIR/disallowed-positions.rs:298:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:236:6\n+  --> $DIR/disallowed-positions.rs:302:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:239:6\n+  --> $DIR/disallowed-positions.rs:305:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:243:6\n+  --> $DIR/disallowed-positions.rs:309:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:253:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:253:6\n+  --> $DIR/disallowed-positions.rs:319:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:259:13\n+  --> $DIR/disallowed-positions.rs:325:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:259:10\n+  --> $DIR/disallowed-positions.rs:325:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:262:14\n+  --> $DIR/disallowed-positions.rs:328:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:262:11\n+  --> $DIR/disallowed-positions.rs:328:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:265:22\n+  --> $DIR/disallowed-positions.rs:331:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:265:19\n+  --> $DIR/disallowed-positions.rs:331:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:270:9\n+  --> $DIR/disallowed-positions.rs:336:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:274:12\n+  --> $DIR/disallowed-positions.rs:340:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:274:12\n+  --> $DIR/disallowed-positions.rs:340:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:277:8\n+  --> $DIR/disallowed-positions.rs:343:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:277:8\n+  --> $DIR/disallowed-positions.rs:343:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:280:6\n+  --> $DIR/disallowed-positions.rs:346:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:280:6\n+  --> $DIR/disallowed-positions.rs:346:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:284:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:289:6\n+  --> $DIR/disallowed-positions.rs:355:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:289:6\n+  --> $DIR/disallowed-positions.rs:355:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:307:6\n+  --> $DIR/disallowed-positions.rs:373:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:319:17\n+  --> $DIR/disallowed-positions.rs:385:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:323:17\n+  --> $DIR/disallowed-positions.rs:390:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:327:17\n+  --> $DIR/disallowed-positions.rs:395:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:337:17\n+  --> $DIR/disallowed-positions.rs:406:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:346:9\n+  --> $DIR/disallowed-positions.rs:415:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:346:9\n+  --> $DIR/disallowed-positions.rs:415:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:350:9\n+  --> $DIR/disallowed-positions.rs:420:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:350:9\n+  --> $DIR/disallowed-positions.rs:420:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:353:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:353:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:353:32\n+  --> $DIR/disallowed-positions.rs:424:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:353:32\n+  --> $DIR/disallowed-positions.rs:424:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:360:9\n+  --> $DIR/disallowed-positions.rs:433:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:360:9\n+  --> $DIR/disallowed-positions.rs:433:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:360:31\n+  --> $DIR/disallowed-positions.rs:433:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:360:31\n+  --> $DIR/disallowed-positions.rs:433:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:364:9\n+  --> $DIR/disallowed-positions.rs:439:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:364:9\n+  --> $DIR/disallowed-positions.rs:439:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:364:31\n+  --> $DIR/disallowed-positions.rs:439:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:364:31\n+  --> $DIR/disallowed-positions.rs:439:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:368:9\n+  --> $DIR/disallowed-positions.rs:445:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:368:9\n+  --> $DIR/disallowed-positions.rs:445:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:92:8\n+  --> $DIR/disallowed-positions.rs:106:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1117,27 +1411,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:96:8\n+  --> $DIR/disallowed-positions.rs:114:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:98:8\n+  --> $DIR/disallowed-positions.rs:118:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:106:8\n+  --> $DIR/disallowed-positions.rs:128:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:106:19\n+  --> $DIR/disallowed-positions.rs:128:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1154,7 +1448,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:116:8\n+  --> $DIR/disallowed-positions.rs:147:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1165,7 +1459,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:119:8\n+  --> $DIR/disallowed-positions.rs:152:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1174,7 +1468,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:121:8\n+  --> $DIR/disallowed-positions.rs:156:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1183,7 +1477,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:123:8\n+  --> $DIR/disallowed-positions.rs:160:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1192,7 +1486,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:127:12\n+  --> $DIR/disallowed-positions.rs:166:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1203,7 +1497,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:127:8\n+  --> $DIR/disallowed-positions.rs:166:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1212,7 +1506,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:131:12\n+  --> $DIR/disallowed-positions.rs:170:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1223,7 +1517,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:131:8\n+  --> $DIR/disallowed-positions.rs:170:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1232,7 +1526,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:138:12\n+  --> $DIR/disallowed-positions.rs:177:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1243,20 +1537,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:138:41\n+  --> $DIR/disallowed-positions.rs:177:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:138:41: 138:43]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:177:41: 177:43]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:138:8\n+  --> $DIR/disallowed-positions.rs:177:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1265,7 +1559,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:146:12\n+  --> $DIR/disallowed-positions.rs:185:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1276,7 +1570,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:146:44\n+  --> $DIR/disallowed-positions.rs:185:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1288,7 +1582,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:146:8\n+  --> $DIR/disallowed-positions.rs:185:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1297,15 +1591,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:102:20\n+  --> $DIR/disallowed-positions.rs:124:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:157:11\n+  --> $DIR/disallowed-positions.rs:197:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1317,27 +1611,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:161:11\n+  --> $DIR/disallowed-positions.rs:205:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:163:11\n+  --> $DIR/disallowed-positions.rs:209:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:171:11\n+  --> $DIR/disallowed-positions.rs:219:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:171:22\n+  --> $DIR/disallowed-positions.rs:219:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1354,7 +1648,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:181:11\n+  --> $DIR/disallowed-positions.rs:238:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1365,7 +1659,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:184:11\n+  --> $DIR/disallowed-positions.rs:243:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1374,7 +1668,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:186:11\n+  --> $DIR/disallowed-positions.rs:247:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1383,7 +1677,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:188:11\n+  --> $DIR/disallowed-positions.rs:251:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1392,7 +1686,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:192:15\n+  --> $DIR/disallowed-positions.rs:257:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1403,7 +1697,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:192:11\n+  --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1412,7 +1706,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:196:15\n+  --> $DIR/disallowed-positions.rs:261:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1423,7 +1717,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:196:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1432,7 +1726,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:15\n+  --> $DIR/disallowed-positions.rs:268:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1443,20 +1737,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:44\n+  --> $DIR/disallowed-positions.rs:268:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:203:44: 203:46]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:268:44: 268:46]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:203:11\n+  --> $DIR/disallowed-positions.rs:268:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1465,7 +1759,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:211:15\n+  --> $DIR/disallowed-positions.rs:276:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1476,7 +1770,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:211:47\n+  --> $DIR/disallowed-positions.rs:276:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1488,7 +1782,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:211:11\n+  --> $DIR/disallowed-positions.rs:276:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1497,35 +1791,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:167:23\n+  --> $DIR/disallowed-positions.rs:215:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:239:5\n+  --> $DIR/disallowed-positions.rs:305:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:243:5\n+  --> $DIR/disallowed-positions.rs:309:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:253:5\n+  --> $DIR/disallowed-positions.rs:319:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:253:16\n+  --> $DIR/disallowed-positions.rs:319:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -1542,7 +1836,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:284:10\n+  --> $DIR/disallowed-positions.rs:350:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1553,7 +1847,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:307:5\n+  --> $DIR/disallowed-positions.rs:373:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1562,14 +1856,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:249:17\n+  --> $DIR/disallowed-positions.rs:315:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 156 previous errors\n+error: aborting due to 205 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "2b407ef510c5211a90234a1f5e553d846ef7a2e0", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -19,6 +19,11 @@ fn _if() {\n \n     if let Range { start: _, end: _ } = (true..true) && false {}\n     //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    if let 1 = 1 && let true = { true } && false {\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    }\n }\n \n fn _while() {"}, {"sha": "feea1c254d8da844f8c4fee012e93c21e2c5781f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1,17 +1,17 @@\n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:50:20\n+  --> $DIR/feature-gate.rs:55:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:40:17\n+  --> $DIR/feature-gate.rs:45:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:58:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -47,7 +47,25 @@ LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:27:19\n+  --> $DIR/feature-gate.rs:23:8\n+   |\n+LL |     if let 1 = 1 && let true = { true } && false {\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:23:21\n+   |\n+LL |     if let 1 = 1 && let true = { true } && false {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:32:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n@@ -56,7 +74,7 @@ LL |     while true && let 0 = 1 {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:11\n+  --> $DIR/feature-gate.rs:35:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n@@ -65,7 +83,7 @@ LL |     while let 0 = 1 && true {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:33:11\n+  --> $DIR/feature-gate.rs:38:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -74,7 +92,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:50:20\n+  --> $DIR/feature-gate.rs:55:20\n    |\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n@@ -83,14 +101,14 @@ LL |     #[cfg(FALSE)] (let 0 = 1);\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:17\n+  --> $DIR/feature-gate.rs:45:17\n    |\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a942d1f4cafbfaccc17095f143907126aa0e0bb0", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -1,17 +1,45 @@\n-// check-pass\n-// known-bug\n-\n #![feature(let_chains)]\n \n fn main() {\n     let _opt = Some(1i32);\n \n+    #[cfg(FALSE)]\n+    {\n+        let _ = &&let Some(x) = Some(42);\n+        //~^ ERROR expected expression, found `let` statement\n+    }\n+    #[cfg(FALSE)]\n+    {\n+        if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n+        //~^ ERROR expected expression, found `let` statement\n+        //~| ERROR expected expression, found `let` statement\n+            true\n+        }\n+    }\n+\n     #[cfg(FALSE)]\n     {\n         if let Some(elem) = _opt && {\n             [1, 2, 3][let _ = ()];\n+            //~^ ERROR expected expression, found `let` statement\n             true\n         } {\n         }\n     }\n+\n+    #[cfg(FALSE)]\n+    {\n+        if let Some(elem) = _opt && [1, 2, 3][let _ = ()] = 1 {\n+        //~^ ERROR expected expression, found `let` statement\n+            true\n+        }\n+    }\n+    #[cfg(FALSE)]\n+    {\n+        if let a = 1 && {\n+            let x = let y = 1;\n+            //~^ ERROR expected expression, found `let` statement\n+        } {\n+        }\n+    }\n }"}, {"sha": "d1ce83c723329d2bf7e64d75bc3fe9a48d370666", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -0,0 +1,38 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:8:19\n+   |\n+LL |         let _ = &&let Some(x) = Some(42);\n+   |                   ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:47\n+   |\n+LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n+   |                                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:57\n+   |\n+LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n+   |                                                         ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:23:23\n+   |\n+LL |             [1, 2, 3][let _ = ()];\n+   |                       ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:32:47\n+   |\n+LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = ()] = 1 {\n+   |                                               ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:40:21\n+   |\n+LL |             let x = let y = 1;\n+   |                     ^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "501f4b6ef9ebc42ac3f9826c49533ee43142ee65", "filename": "src/test/ui/typeck/do-not-suggest-adding-missing-zero-to-floating-point-number.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -0,0 +1,21 @@\n+macro_rules! num { () => { 1 } }\n+\n+fn main() {\n+    let x = 1i32;\n+    x.e10; //~ERROR `i32` is a primitive type and therefore doesn't have fields\n+\n+    let y = 1;\n+    y.e10; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    2u32.e10; //~ERROR `u32` is a primitive type and therefore doesn't have fields\n+\n+    num!().e10; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    2.e10foo; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    42._;\n+    //~^ERROR expected identifier, found reserved identifier `_`\n+    //~|ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    42.a; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+}"}, {"sha": "1ef1d4c28e47991519421807aeae5459391857a8", "filename": "src/test/ui/typeck/do-not-suggest-adding-missing-zero-to-floating-point-number.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.stderr?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -0,0 +1,51 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:16:8\n+   |\n+LL |     42._;\n+   |        ^ expected identifier, found reserved identifier\n+\n+error[E0610]: `i32` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:5:7\n+   |\n+LL |     x.e10;\n+   |       ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:8:7\n+   |\n+LL |     y.e10;\n+   |       ^^^\n+\n+error[E0610]: `u32` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:10:10\n+   |\n+LL |     2u32.e10;\n+   |          ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:12:12\n+   |\n+LL |     num!().e10;\n+   |            ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:14:7\n+   |\n+LL |     2.e10foo;\n+   |       ^^^^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:16:8\n+   |\n+LL |     42._;\n+   |        ^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:20:8\n+   |\n+LL |     42.a;\n+   |        ^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0610`."}, {"sha": "ba83e79005b33feea10a38698932daf020688978", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.fixed?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+fn main() {\n+    2.0e1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0E1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0f64; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0e+12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0e-12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0e1f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+}"}, {"sha": "c102447f6028849e5b32b719a55f110a693ef5ba", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+fn main() {\n+    2.e1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.E1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.f64; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.e+12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.e-12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.e1f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+}"}, {"sha": "e8e069708a864169516559a9ad01d9d0a4fe875f", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -0,0 +1,80 @@\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:4:7\n+   |\n+LL |     2.e1;\n+   |       ^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e1;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:5:7\n+   |\n+LL |     2.E1;\n+   |       ^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0E1;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:6:7\n+   |\n+LL |     2.f32;\n+   |       ^^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0f32;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:7:7\n+   |\n+LL |     2.f64;\n+   |       ^^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0f64;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:8:7\n+   |\n+LL |     2.e+12;\n+   |       ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e+12;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:9:7\n+   |\n+LL |     2.e-12;\n+   |       ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e-12;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:10:7\n+   |\n+LL |     2.e1f32;\n+   |       ^^^^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e1f32;\n+   |       +\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0610`."}, {"sha": "17f2b77dab052b65c97de24da48136ddde73dfc4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -60,6 +60,8 @@ impl EarlyProps {\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     pub error_patterns: Vec<String>,\n+    // Regexes that should be expected, in order, on standard out\n+    pub regex_error_patterns: Vec<String>,\n     // Extra flags to pass to the compiler\n     pub compile_flags: Vec<String>,\n     // Extra flags to pass when the compiled code is run (such as --bench)\n@@ -163,6 +165,7 @@ pub struct TestProps {\n \n mod directives {\n     pub const ERROR_PATTERN: &'static str = \"error-pattern\";\n+    pub const REGEX_ERROR_PATTERN: &'static str = \"regex-error-pattern\";\n     pub const COMPILE_FLAGS: &'static str = \"compile-flags\";\n     pub const RUN_FLAGS: &'static str = \"run-flags\";\n     pub const SHOULD_ICE: &'static str = \"should-ice\";\n@@ -200,6 +203,7 @@ impl TestProps {\n     pub fn new() -> Self {\n         TestProps {\n             error_patterns: vec![],\n+            regex_error_patterns: vec![],\n             compile_flags: vec![],\n             run_flags: None,\n             pp_exact: None,\n@@ -285,6 +289,12 @@ impl TestProps {\n                     &mut self.error_patterns,\n                     |r| r,\n                 );\n+                config.push_name_value_directive(\n+                    ln,\n+                    REGEX_ERROR_PATTERN,\n+                    &mut self.regex_error_patterns,\n+                    |r| r,\n+                );\n \n                 if let Some(flags) = config.parse_name_value_directive(ln, COMPILE_FLAGS) {\n                     self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));"}, {"sha": "5517b5a12c3935f5ac04a5b5cd9492e87ce84680", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7b36d4db582cb47513a6c7176baaec1c3346ab/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1c7b36d4db582cb47513a6c7176baaec1c3346ab", "patch": "@@ -323,12 +323,13 @@ impl<'test> TestCx<'test> {\n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n         if !expected_errors.is_empty() {\n-            if !self.props.error_patterns.is_empty() {\n+            if !self.props.error_patterns.is_empty() || !self.props.regex_error_patterns.is_empty()\n+            {\n                 self.fatal(\"both error pattern and expected errors specified\");\n             }\n             self.check_expected_errors(expected_errors, &proc_res);\n         } else {\n-            self.check_error_patterns(&output_to_check, &proc_res, pm);\n+            self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n         }\n         if self.props.should_ice {\n             match proc_res.status.code() {\n@@ -363,7 +364,7 @@ impl<'test> TestCx<'test> {\n \n         let output_to_check = self.get_output(&proc_res);\n         self.check_correct_failure_status(&proc_res);\n-        self.check_error_patterns(&output_to_check, &proc_res, pm);\n+        self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n     }\n \n     fn get_output(&self, proc_res: &ProcRes) -> String {\n@@ -1222,14 +1223,13 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_error_patterns(\n+    fn check_all_error_patterns(\n         &self,\n         output_to_check: &str,\n         proc_res: &ProcRes,\n         pm: Option<PassMode>,\n     ) {\n-        debug!(\"check_error_patterns\");\n-        if self.props.error_patterns.is_empty() {\n+        if self.props.error_patterns.is_empty() && self.props.regex_error_patterns.is_empty() {\n             if pm.is_some() {\n                 // FIXME(#65865)\n                 return;\n@@ -1243,13 +1243,8 @@ impl<'test> TestCx<'test> {\n \n         let mut missing_patterns: Vec<String> = Vec::new();\n \n-        for pattern in &self.props.error_patterns {\n-            if output_to_check.contains(pattern.trim()) {\n-                debug!(\"found error pattern {}\", pattern);\n-            } else {\n-                missing_patterns.push(pattern.to_string());\n-            }\n-        }\n+        self.check_error_patterns(output_to_check, &mut missing_patterns);\n+        self.check_regex_error_patterns(output_to_check, proc_res, &mut missing_patterns);\n \n         if missing_patterns.is_empty() {\n             return;\n@@ -1268,6 +1263,44 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn check_error_patterns(&self, output_to_check: &str, missing_patterns: &mut Vec<String>) {\n+        debug!(\"check_error_patterns\");\n+        for pattern in &self.props.error_patterns {\n+            if output_to_check.contains(pattern.trim()) {\n+                debug!(\"found error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n+            }\n+        }\n+    }\n+\n+    fn check_regex_error_patterns(\n+        &self,\n+        output_to_check: &str,\n+        proc_res: &ProcRes,\n+        missing_patterns: &mut Vec<String>,\n+    ) {\n+        debug!(\"check_regex_error_patterns\");\n+\n+        for pattern in &self.props.regex_error_patterns {\n+            let pattern = pattern.trim();\n+            let re = match Regex::new(pattern) {\n+                Ok(re) => re,\n+                Err(err) => {\n+                    self.fatal_proc_rec(\n+                        &format!(\"invalid regex error pattern '{}': {:?}\", pattern, err),\n+                        proc_res,\n+                    );\n+                }\n+            };\n+            if re.is_match(output_to_check) {\n+                debug!(\"found regex error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n+            }\n+        }\n+    }\n+\n     fn check_no_compiler_crash(&self, proc_res: &ProcRes, should_ice: bool) {\n         match proc_res.status.code() {\n             Some(101) if !should_ice => {\n@@ -1892,7 +1925,9 @@ impl<'test> TestCx<'test> {\n                 // If we are extracting and matching errors in the new\n                 // fashion, then you want JSON mode. Old-skool error\n                 // patterns still match the raw compiler output.\n-                if self.props.error_patterns.is_empty() {\n+                if self.props.error_patterns.is_empty()\n+                    && self.props.regex_error_patterns.is_empty()\n+                {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                     rustc.args(&[\"--json\", \"future-incompat\"]);\n                 }\n@@ -3268,10 +3303,11 @@ impl<'test> TestCx<'test> {\n                 self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n             }\n \n-            if !self.props.error_patterns.is_empty() {\n+            if !self.props.error_patterns.is_empty() || !self.props.regex_error_patterns.is_empty()\n+            {\n                 // \"// error-pattern\" comments\n                 let output_to_check = self.get_output(&proc_res);\n-                self.check_error_patterns(&output_to_check, &proc_res, pm);\n+                self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n             }\n         }\n \n@@ -3285,15 +3321,16 @@ impl<'test> TestCx<'test> {\n             self.props.error_patterns\n         );\n         if !explicit && self.config.compare_mode.is_none() {\n-            let check_patterns =\n-                should_run == WillExecute::No && !self.props.error_patterns.is_empty();\n+            let check_patterns = should_run == WillExecute::No\n+                && (!self.props.error_patterns.is_empty()\n+                    || !self.props.regex_error_patterns.is_empty());\n \n             let check_annotations = !check_patterns || !expected_errors.is_empty();\n \n             if check_patterns {\n                 // \"// error-pattern\" comments\n                 let output_to_check = self.get_output(&proc_res);\n-                self.check_error_patterns(&output_to_check, &proc_res, pm);\n+                self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n             }\n \n             if check_annotations {"}]}