{"sha": "e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTVjMjViY2Q4MWRjMWY5YTVhM2QyNWQ5YjQ4ZWQyZDU0NTMzNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-08T04:21:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-08T04:21:47Z"}, "message": "auto merge of #13393 : alexcrichton/rust/hopefully-fix-bsd, r=sfackler\n\nThis appears to be causing the BSD bots to lock up when looking at the core\r\ndumps I've managed to get. Dropping the `FileDesc` structure triggers the `Arc`\r\nit's contained in to get cleaned up, invoking free(). This instead just closes\r\nthe file descriptor (the arc itself is never cleaned up).\r\n\r\nI'm still not entirely sure why this is a problem because the pthreads runtime\r\nshould register hooks for fork() to prevent this sort of deadlock, but perhaps\r\nthat's only done on linux?", "tree": {"sha": "11f227be6b59967d9732ac2d5b551b0a59c5e1b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f227be6b59967d9732ac2d5b551b0a59c5e1b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b", "html_url": "https://github.com/rust-lang/rust/commit/e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a33330caaaedb9eef447ae862e9b87e3aa9880f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a33330caaaedb9eef447ae862e9b87e3aa9880f", "html_url": "https://github.com/rust-lang/rust/commit/9a33330caaaedb9eef447ae862e9b87e3aa9880f"}, {"sha": "7da210907e4bf04a208adf186691cf516f1ef930", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da210907e4bf04a208adf186691cf516f1ef930", "html_url": "https://github.com/rust-lang/rust/commit/7da210907e4bf04a208adf186691cf516f1ef930"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "c194e15d28b3586a9d30938f29fbba07db225d8e", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=e415c25bcd81dc1f9a5a3d25d9b48ed2d545336b", "patch": "@@ -524,7 +524,37 @@ fn spawn_process_os(config: p::ProcessConfig,\n                     Ok(..) => fail!(\"short read on the cloexec pipe\"),\n                 };\n             }\n-            drop(input);\n+            // And at this point we've reached a special time in the life of the\n+            // child. The child must now be considered hamstrung and unable to\n+            // do anything other than syscalls really. Consider the following\n+            // scenario:\n+            //\n+            //      1. Thread A of process 1 grabs the malloc() mutex\n+            //      2. Thread B of process 1 forks(), creating thread C\n+            //      3. Thread C of process 2 then attempts to malloc()\n+            //      4. The memory of process 2 is the same as the memory of\n+            //         process 1, so the mutex is locked.\n+            //\n+            // This situation looks a lot like deadlock, right? It turns out\n+            // that this is what pthread_atfork() takes care of, which is\n+            // presumably implemented across platforms. The first thing that\n+            // threads to *before* forking is to do things like grab the malloc\n+            // mutex, and then after the fork they unlock it.\n+            //\n+            // Despite this information, libnative's spawn has been witnessed to\n+            // deadlock on both OSX and FreeBSD. I'm not entirely sure why, but\n+            // all collected backtraces point at malloc/free traffic in the\n+            // child spawned process.\n+            //\n+            // For this reason, the block of code below should contain 0\n+            // invocations of either malloc of free (or their related friends).\n+            //\n+            // As an example of not having malloc/free traffic, we don't close\n+            // this file descriptor by dropping the FileDesc (which contains an\n+            // allocation). Instead we just close it manually. This will never\n+            // have the drop glue anyway because this code never returns (the\n+            // child will either exec() or invoke libc::exit)\n+            let _ = libc::close(input.fd());\n \n             fn fail(output: &mut file::FileDesc) -> ! {\n                 let errno = os::errno();"}]}