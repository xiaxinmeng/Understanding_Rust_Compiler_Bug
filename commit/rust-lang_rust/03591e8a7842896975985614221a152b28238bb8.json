{"sha": "03591e8a7842896975985614221a152b28238bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTkxZThhNzg0Mjg5Njk3NTk4NTYxNDIyMWExNTJiMjgyMzhiYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-02T12:27:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-02T12:27:54Z"}, "message": "Rollup merge of #70421 - Centril:recover-const-async-fn-ptr, r=estebank\n\nparse: recover on `const fn()` / `async fn()`\n\nRecover on `const fn()` and `async fn()` function pointers, suggesting to remove the qualifier.\nFor example:\n```\nerror: an `fn` pointer type cannot be `async`\n  --> $DIR/recover-const-async-fn-ptr.rs:6:11\n   |\nLL | type T3 = async fn();\n   |           -----^^^^^\n   |           |\n   |           `async` because of this\n   |           help: remove the `async` qualifier\n```\n\nr? @estebank", "tree": {"sha": "f6fa505cc4918e1fa231700309287ef1a66ef07e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6fa505cc4918e1fa231700309287ef1a66ef07e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03591e8a7842896975985614221a152b28238bb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehdpKCRBK7hj4Ov3rIwAAdHIIAKeLLCZjA1HcXcyY4hMEIcPi\nJuhYSSl91f5PIVwV5aMY+hV4YbfQ5Ry0o9NTMiRa2WZ218Em+eviZtRa/k1sVH/X\nEVBJm6AfmBbx/Jrf4EwHXtep0fa56afL+BueBzLhZjsVp4xuvOVNOp4Etq9c4b6Q\n/V77bjgzEZI0V0HS7nKF6+qFyQ4DWbXZOEhiviGm3Ga876W3R3UYC747Bv3NMQBZ\nv/oausdy0mD6nocH9R8XzNS/TaE226GuM83Uj0lX5VdU0FIV4cPzZuPkQyojjGZi\nsN265forytKZKIlluKPG4FVDv6Fm9HUWt87XShxcEmt2PkN7G9NRe4B3Lzdripo=\n=1/kP\n-----END PGP SIGNATURE-----\n", "payload": "tree f6fa505cc4918e1fa231700309287ef1a66ef07e\nparent cb81b41c9a474d403bd35fd2898ad226bc02657c\nparent af1146bd23634d34d953255114b1235e131f2c80\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585830474 +0200\ncommitter GitHub <noreply@github.com> 1585830474 +0200\n\nRollup merge of #70421 - Centril:recover-const-async-fn-ptr, r=estebank\n\nparse: recover on `const fn()` / `async fn()`\n\nRecover on `const fn()` and `async fn()` function pointers, suggesting to remove the qualifier.\nFor example:\n```\nerror: an `fn` pointer type cannot be `async`\n  --> $DIR/recover-const-async-fn-ptr.rs:6:11\n   |\nLL | type T3 = async fn();\n   |           -----^^^^^\n   |           |\n   |           `async` because of this\n   |           help: remove the `async` qualifier\n```\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03591e8a7842896975985614221a152b28238bb8", "html_url": "https://github.com/rust-lang/rust/commit/03591e8a7842896975985614221a152b28238bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03591e8a7842896975985614221a152b28238bb8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb81b41c9a474d403bd35fd2898ad226bc02657c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb81b41c9a474d403bd35fd2898ad226bc02657c", "html_url": "https://github.com/rust-lang/rust/commit/cb81b41c9a474d403bd35fd2898ad226bc02657c"}, {"sha": "af1146bd23634d34d953255114b1235e131f2c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1146bd23634d34d953255114b1235e131f2c80", "html_url": "https://github.com/rust-lang/rust/commit/af1146bd23634d34d953255114b1235e131f2c80"}], "stats": {"total": 238, "additions": 215, "deletions": 23}, "files": [{"sha": "798eb85f36f36579dfd46dc7251ae3760216ac3a", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -1496,7 +1496,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Is the current token the start of an `FnHeader` / not a valid parse?\n-    fn check_fn_front_matter(&mut self) -> bool {\n+    pub(super) fn check_fn_front_matter(&mut self) -> bool {\n         // We use an over-approximation here.\n         // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n         const QUALS: [Symbol; 4] = [kw::Const, kw::Async, kw::Unsafe, kw::Extern];\n@@ -1523,7 +1523,7 @@ impl<'a> Parser<'a> {\n     /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n     /// FnFrontMatter = FnQual? \"fn\" ;\n     /// ```\n-    fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n+    pub(super) fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n         let constness = self.parse_constness();\n         let asyncness = self.parse_asyncness();\n         let unsafety = self.parse_unsafety();"}, {"sha": "a6015504a32879fbeb319497fbdedc153be475f0", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -127,16 +127,16 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Underscore) {\n             // A type to be inferred `_`\n             TyKind::Infer\n-        } else if self.token_is_bare_fn_keyword() {\n+        } else if self.check_fn_front_matter() {\n             // Function pointer type\n-            self.parse_ty_bare_fn(Vec::new())?\n+            self.parse_ty_bare_fn(lo, Vec::new())?\n         } else if self.check_keyword(kw::For) {\n             // Function pointer type or bound list (trait object type) starting with a poly-trait.\n             //   `for<'lt> [unsafe] [extern \"ABI\"] fn (&'lt S) -> T`\n             //   `for<'lt> Trait1<'lt> + Trait2 + 'a`\n             let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-            if self.token_is_bare_fn_keyword() {\n-                self.parse_ty_bare_fn(lifetime_defs)?\n+            if self.check_fn_front_matter() {\n+                self.parse_ty_bare_fn(lo, lifetime_defs)?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n                 let parse_plus = allow_plus == AllowPlus::Yes && self.check_plus();\n@@ -291,13 +291,6 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::Typeof(expr))\n     }\n \n-    /// Is the current token one of the keywords that signals a bare function type?\n-    fn token_is_bare_fn_keyword(&mut self) -> bool {\n-        self.check_keyword(kw::Fn)\n-            || self.check_keyword(kw::Unsafe)\n-            || self.check_keyword(kw::Extern)\n-    }\n-\n     /// Parses a function pointer type (`TyKind::BareFn`).\n     /// ```\n     /// [unsafe] [extern \"ABI\"] fn (S) -> T\n@@ -306,12 +299,31 @@ impl<'a> Parser<'a> {\n     ///    |               |        |   Return type\n     /// Function Style    ABI  Parameter types\n     /// ```\n-    fn parse_ty_bare_fn(&mut self, generic_params: Vec<GenericParam>) -> PResult<'a, TyKind> {\n-        let unsafety = self.parse_unsafety();\n-        let ext = self.parse_extern()?;\n-        self.expect_keyword(kw::Fn)?;\n+    /// We actually parse `FnHeader FnDecl`, but we error on `const` and `async` qualifiers.\n+    fn parse_ty_bare_fn(&mut self, lo: Span, params: Vec<GenericParam>) -> PResult<'a, TyKind> {\n+        let ast::FnHeader { ext, unsafety, constness, asyncness } = self.parse_fn_front_matter()?;\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No)?;\n-        Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params, decl })))\n+        let whole_span = lo.to(self.prev_token.span);\n+        if let ast::Const::Yes(span) = constness {\n+            self.error_fn_ptr_bad_qualifier(whole_span, span, \"const\");\n+        }\n+        if let ast::Async::Yes { span, .. } = asyncness {\n+            self.error_fn_ptr_bad_qualifier(whole_span, span, \"async\");\n+        }\n+        Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params: params, decl })))\n+    }\n+\n+    /// Emit an error for the given bad function pointer qualifier.\n+    fn error_fn_ptr_bad_qualifier(&self, span: Span, qual_span: Span, qual: &str) {\n+        self.struct_span_err(span, &format!(\"an `fn` pointer type cannot be `{}`\", qual))\n+            .span_label(qual_span, format!(\"`{}` because of this\", qual))\n+            .span_suggestion_short(\n+                qual_span,\n+                &format!(\"remove the `{}` qualifier\", qual),\n+                String::new(),\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n     }\n \n     /// Parses an `impl B0 + ... + Bn` type."}, {"sha": "12aa059766b0653642a60d3f7aa60d4b7347560b", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -1,3 +1,3 @@\n-type A = extern::foo::bar; //~ ERROR expected `fn`, found `::`\n+type A = extern::foo::bar; //~ ERROR expected type, found keyword `extern`\n \n fn main() {}"}, {"sha": "20ecf6bac764cf843430b78ef491efa3e408f603", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -1,8 +1,8 @@\n-error: expected `fn`, found `::`\n-  --> $DIR/keyword-extern-as-identifier-type.rs:1:16\n+error: expected type, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-type.rs:1:10\n    |\n LL | type A = extern::foo::bar;\n-   |                ^^ expected `fn`\n+   |          ^^^^^^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "80a450dbd36912aeb08858c428308af1e5670629", "filename": "src/test/ui/parser/issue-63116.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -12,7 +12,7 @@ error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `;`\n LL | impl W <s(f;Y(;]\n    |            ^ expected one of 7 possible tokens\n \n-error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `->`, `...`, `::`, `<`, `>`, `?`, `[`, `_`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, lifetime, or path, found `;`\n+error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `->`, `...`, `::`, `<`, `>`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, lifetime, or path, found `;`\n   --> $DIR/issue-63116.rs:3:15\n    |\n LL | impl W <s(f;Y(;]"}, {"sha": "25af8772cedbdcd958e156bd8757907e60809a60", "filename": "src/test/ui/parser/recover-const-async-fn-ptr.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fparser%2Frecover-const-async-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fparser%2Frecover-const-async-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-const-async-fn-ptr.rs?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+\n+type T0 = const fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+type T1 = const extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+type T2 = const unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+type T3 = async fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+type T4 = async extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+type T5 = async unsafe extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+type T6 = const async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+type FT0 = for<'a> const fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+type FT1 = for<'a> const extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+type FT2 = for<'a> const unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+type FT3 = for<'a> async fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+type FT4 = for<'a> async extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+type FT5 = for<'a> async unsafe extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+type FT6 = for<'a> const async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+fn main() {\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+}"}, {"sha": "7012096b6445047ae4127401e3d6b95ee68718ae", "filename": "src/test/ui/parser/recover-const-async-fn-ptr.stderr", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fparser%2Frecover-const-async-fn-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03591e8a7842896975985614221a152b28238bb8/src%2Ftest%2Fui%2Fparser%2Frecover-const-async-fn-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-const-async-fn-ptr.stderr?ref=03591e8a7842896975985614221a152b28238bb8", "patch": "@@ -0,0 +1,155 @@\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:3:11\n+   |\n+LL | type T0 = const fn();\n+   |           -----^^^^^\n+   |           |\n+   |           `const` because of this\n+   |           help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:4:11\n+   |\n+LL | type T1 = const extern \"C\" fn();\n+   |           -----^^^^^^^^^^^^^^^^\n+   |           |\n+   |           `const` because of this\n+   |           help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:5:11\n+   |\n+LL | type T2 = const unsafe extern fn();\n+   |           -----^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           `const` because of this\n+   |           help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:6:11\n+   |\n+LL | type T3 = async fn();\n+   |           -----^^^^^\n+   |           |\n+   |           `async` because of this\n+   |           help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:7:11\n+   |\n+LL | type T4 = async extern fn();\n+   |           -----^^^^^^^^^^^^\n+   |           |\n+   |           `async` because of this\n+   |           help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:8:11\n+   |\n+LL | type T5 = async unsafe extern \"C\" fn();\n+   |           -----^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           `async` because of this\n+   |           help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:9:11\n+   |\n+LL | type T6 = const async unsafe extern \"C\" fn();\n+   |           -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           `const` because of this\n+   |           help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:9:11\n+   |\n+LL | type T6 = const async unsafe extern \"C\" fn();\n+   |           ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 `async` because of this\n+   |                 help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:13:12\n+   |\n+LL | type FT0 = for<'a> const fn();\n+   |            ^^^^^^^^-----^^^^^\n+   |                    |\n+   |                    `const` because of this\n+   |                    help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:14:12\n+   |\n+LL | type FT1 = for<'a> const extern \"C\" fn();\n+   |            ^^^^^^^^-----^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    `const` because of this\n+   |                    help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:15:12\n+   |\n+LL | type FT2 = for<'a> const unsafe extern fn();\n+   |            ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    `const` because of this\n+   |                    help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:16:12\n+   |\n+LL | type FT3 = for<'a> async fn();\n+   |            ^^^^^^^^-----^^^^^\n+   |                    |\n+   |                    `async` because of this\n+   |                    help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:17:12\n+   |\n+LL | type FT4 = for<'a> async extern fn();\n+   |            ^^^^^^^^-----^^^^^^^^^^^^\n+   |                    |\n+   |                    `async` because of this\n+   |                    help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:18:12\n+   |\n+LL | type FT5 = for<'a> async unsafe extern \"C\" fn();\n+   |            ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    `async` because of this\n+   |                    help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/recover-const-async-fn-ptr.rs:19:12\n+   |\n+LL | type FT6 = for<'a> const async unsafe extern \"C\" fn();\n+   |            ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    `const` because of this\n+   |                    help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/recover-const-async-fn-ptr.rs:19:12\n+   |\n+LL | type FT6 = for<'a> const async unsafe extern \"C\" fn();\n+   |            ^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          |\n+   |                          `async` because of this\n+   |                          help: remove the `async` qualifier\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-const-async-fn-ptr.rs:24:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 17 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}