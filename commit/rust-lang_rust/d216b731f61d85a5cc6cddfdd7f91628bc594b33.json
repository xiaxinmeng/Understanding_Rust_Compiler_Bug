{"sha": "d216b731f61d85a5cc6cddfdd7f91628bc594b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMTZiNzMxZjYxZDg1YTVjYzZjZGRmZGQ3ZjkxNjI4YmM1OTRiMzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T09:38:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "Remove duplicated code", "tree": {"sha": "8f3186d33ba03548c9ec63c16ee65bf48f18f7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3186d33ba03548c9ec63c16ee65bf48f18f7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d216b731f61d85a5cc6cddfdd7f91628bc594b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d216b731f61d85a5cc6cddfdd7f91628bc594b33", "html_url": "https://github.com/rust-lang/rust/commit/d216b731f61d85a5cc6cddfdd7f91628bc594b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d216b731f61d85a5cc6cddfdd7f91628bc594b33/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117", "html_url": "https://github.com/rust-lang/rust/commit/cb6dfeaf61ae7e0ef5f0d2d1637fa9c385874117"}], "stats": {"total": 74, "additions": 1, "deletions": 73}, "files": [{"sha": "6d3719b32d07e05c87286bbd33a5d3ce6ce68b3a", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d216b731f61d85a5cc6cddfdd7f91628bc594b33/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d216b731f61d85a5cc6cddfdd7f91628bc594b33/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d216b731f61d85a5cc6cddfdd7f91628bc594b33", "patch": "@@ -27,7 +27,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_span::source_map::SourceMap;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use syntax::ast;\n@@ -1427,74 +1426,3 @@ impl ArgKind {\n         }\n     }\n }\n-\n-/// Suggest restricting a type param with a new bound.\n-pub fn suggest_constraining_type_param(\n-    generics: &hir::Generics<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n-    param_name: &str,\n-    constraint: &str,\n-    source_map: &SourceMap,\n-    span: Span,\n-) -> bool {\n-    let restrict_msg = \"consider further restricting this bound\";\n-    if let Some(param) =\n-        generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next()\n-    {\n-        if param_name.starts_with(\"impl \") {\n-            // `impl Trait` in argument:\n-            // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n-            err.span_suggestion(\n-                param.span,\n-                restrict_msg,\n-                // `impl CurrentTrait + MissingTrait`\n-                format!(\"{} + {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else if generics.where_clause.predicates.is_empty() && param.bounds.is_empty() {\n-            // If there are no bounds whatsoever, suggest adding a constraint\n-            // to the type parameter:\n-            // `fn foo<T>(t: T) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n-            err.span_suggestion(\n-                param.span,\n-                \"consider restricting this bound\",\n-                format!(\"{}: {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else if !generics.where_clause.predicates.is_empty() {\n-            // There is a `where` clause, so suggest expanding it:\n-            // `fn foo<T>(t: T) where T: Debug {}` \u2192\n-            // `fn foo<T>(t: T) where T: Debug, T: Trait {}`\n-            err.span_suggestion(\n-                generics.where_clause.span().unwrap().shrink_to_hi(),\n-                &format!(\"consider further restricting type parameter `{}`\", param_name),\n-                format!(\", {}: {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else {\n-            // If there is no `where` clause lean towards constraining to the\n-            // type parameter:\n-            // `fn foo<X: Bar, T>(t: T, x: X) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n-            // `fn foo<T: Bar>(t: T) {}` \u2192 `fn foo<T: Bar + Trait>(t: T) {}`\n-            let sp = param.span.with_hi(span.hi());\n-            let span = source_map.span_through_char(sp, ':');\n-            if sp != param.span && sp != span {\n-                // Only suggest if we have high certainty that the span\n-                // covers the colon in `foo<T: Trait>`.\n-                err.span_suggestion(\n-                    span,\n-                    restrict_msg,\n-                    format!(\"{}: {} + \", param_name, constraint),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                err.span_label(\n-                    param.span,\n-                    &format!(\"consider adding a `where {}: {}` bound\", param_name, constraint),\n-                );\n-            }\n-        }\n-        return true;\n-    }\n-    false\n-}"}, {"sha": "810882d3bbdb841c3b5138bfbcbf8de865ef109e", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d216b731f61d85a5cc6cddfdd7f91628bc594b33/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d216b731f61d85a5cc6cddfdd7f91628bc594b33/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=d216b731f61d85a5cc6cddfdd7f91628bc594b33", "patch": "@@ -3,7 +3,7 @@ use rustc::mir::{\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n };\n-use rustc::traits::error_reporting::suggest_constraining_type_param;\n+use rustc::traits::error_reporting::suggestions::suggest_constraining_type_param;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};"}]}