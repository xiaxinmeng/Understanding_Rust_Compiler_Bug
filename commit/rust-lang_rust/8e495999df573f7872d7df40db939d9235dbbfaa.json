{"sha": "8e495999df573f7872d7df40db939d9235dbbfaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDk1OTk5ZGY1NzNmNzg3MmQ3ZGY0MGRiOTM5ZDkyMzVkYmJmYWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T03:23:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:22:11Z"}, "message": "fix normalizing associated types. this brings us up to 52 passing tests!", "tree": {"sha": "fd71409dcbaa275e616284715424e05332f9c0e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd71409dcbaa275e616284715424e05332f9c0e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e495999df573f7872d7df40db939d9235dbbfaa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/7MACgkQpp+NIls6\n19lEIA/+PM93CMwtvgjGSiVjJHn9tda1cX40HiVopEuDDucn0QD/Btq6OvfdwFMC\n5nsdrBBEF/wRyIuRyCAWaMgu2gUovCGT1l0pruxFav3UQUr7p31tqjRF6ejH28CK\n36f7FFal+RDiVVCeLqkYc3HQXiH+s8Yx9JnTYYgCqFBbXqjqFNDX3RJMCz21jJzq\nzJZNzWLFBMwY4fk/pgr+uT+nVzQcZHkt4/MmYoKWXA1X5OlOJemvHqFM4yafce0z\n78HmvXSsT8mtVaaSkY44/ko+9ZGwq22U9N7KRV4vhK673d74qeaYLNf186EwxPRp\nYCbLlr8TlXFcuG7Y5jWsIb65mec9abDWn1bFi3v3b+o1BvHsMprU1iCl5KU3S8Z5\nVwiO4QeHqFPgElJFouhK6QGoOYEURpRS7+lxYgp1dSZtU6AUDeXpHIN7QV/tHY/Q\ntztakWh5juFEwDIbZNpkZvGwlNgp+zmdpNbmvJ/sXnKpHkKCsgvUR5tQ83Z4ZNQ/\n7z5tKLfzKFSeMILrFgGTJOlkxMbpGBqlaOnQ1N22oWwobnwV/bUeTje9pw0lG1o9\nYTcGsNzoxRIWDcR56g00VRyOYvOFuOaMqTjfIQnBj/lJ4+y1PaVRB1nv7VlP6wRE\n5M/UwpOKDiD0Rb670MUzy6Ezi/hREu3Qibnoo7WPvM8UV/TT9OU=\n=9thT\n-----END PGP SIGNATURE-----", "payload": "tree fd71409dcbaa275e616284715424e05332f9c0e0\nparent bb6e5224da35fad23307ae0b5c17c7fc0eff63c1\nauthor Ralf Jung <post@ralfj.de> 1500002591 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970931 +0200\n\nfix normalizing associated types. this brings us up to 52 passing tests!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e495999df573f7872d7df40db939d9235dbbfaa", "html_url": "https://github.com/rust-lang/rust/commit/8e495999df573f7872d7df40db939d9235dbbfaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e495999df573f7872d7df40db939d9235dbbfaa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e5224da35fad23307ae0b5c17c7fc0eff63c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e5224da35fad23307ae0b5c17c7fc0eff63c1", "html_url": "https://github.com/rust-lang/rust/commit/bb6e5224da35fad23307ae0b5c17c7fc0eff63c1"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "421fc092b21e505297e4756c5dffd71eead42aaf", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e495999df573f7872d7df40db939d9235dbbfaa/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e495999df573f7872d7df40db939d9235dbbfaa/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=8e495999df573f7872d7df40db939d9235dbbfaa", "patch": "@@ -7,9 +7,10 @@ use rustc::hir;\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir;\n use rustc::traits::Reveal;\n-use rustc::ty;\n+use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::{Subst, Substs};\n+use rustc::infer::TransNormalize;\n \n use error::{EvalResult, EvalError};\n use eval_context::{EvalContext, StackPopCleanup};\n@@ -135,8 +136,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Validate(op, ref lvalues) => {\n                 for operand in lvalues {\n                     // We need to monomorphize ty *without* erasing lifetimes\n-                    let ty = operand.ty.subst(self.tcx, self.substs());\n-                    // TODO: do we have to self.tcx.normalize_associated_type(&{ty}) ?  That however seems to erase lifetimes.\n+                    let mut ty = operand.ty.subst(self.tcx, self.substs());\n+                    // This is essentially a copy of normalize_associated_type, but without erasure\n+                    if ty.has_projection_types() {\n+                        let param_env = ty::ParamEnv::empty(Reveal::All);\n+                        ty = self.tcx.infer_ctxt().enter(move |infcx| {\n+                            ty.trans_normalize(&infcx, param_env)\n+                        })\n+                    }\n+\n+                    // Now we can do validation at this type\n                     let lvalue = self.eval_lvalue(&operand.lval)?;\n                     self.validate(lvalue, ty, ValidationCtx::new(op))?;\n                 }"}]}