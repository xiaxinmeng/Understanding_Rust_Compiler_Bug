{"sha": "c76151529a79bf85f54d95cf41876d83a0fdad1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjE1MTUyOWE3OWJmODVmNTRkOTVjZjQxODc2ZDgzYTBmZGFkMWQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-29T04:02:04Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@palantir.com", "date": "2014-09-30T19:52:00Z"}, "message": "Fix cfg warnings for liblibc", "tree": {"sha": "89877437bbfba6c80b8420643d6837997661d08c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89877437bbfba6c80b8420643d6837997661d08c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76151529a79bf85f54d95cf41876d83a0fdad1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76151529a79bf85f54d95cf41876d83a0fdad1d", "html_url": "https://github.com/rust-lang/rust/commit/c76151529a79bf85f54d95cf41876d83a0fdad1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76151529a79bf85f54d95cf41876d83a0fdad1d/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92013a849da3dd9940933b687da6f83b6dd066a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/92013a849da3dd9940933b687da6f83b6dd066a8", "html_url": "https://github.com/rust-lang/rust/commit/92013a849da3dd9940933b687da6f83b6dd066a8"}], "stats": {"total": 201, "additions": 93, "deletions": 108}, "files": [{"sha": "affa452eb49de06b09d79e1f207cd97f8c88f6d0", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 93, "deletions": 108, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/c76151529a79bf85f54d95cf41876d83a0fdad1d/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76151529a79bf85f54d95cf41876d83a0fdad1d/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c76151529a79bf85f54d95cf41876d83a0fdad1d", "patch": "@@ -278,32 +278,31 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n #[cfg(windows)] pub use funcs::extra::winsock::{ioctlsocket};\n \n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")] #[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n \n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use funcs::posix01::unistd::{fdatasync};\n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use types::os::arch::extra::{sockaddr_ll};\n-#[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub use consts::os::extra::{AF_PACKET};\n \n-#[cfg(unix, not(target_os = \"freebsd\"))]\n+#[cfg(all(unix, not(target_os = \"freebsd\")))]\n pub use consts::os::extra::{MAP_STACK};\n \n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n pub use consts::os::bsd44::{TCP_KEEPIDLE};\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub use consts::os::bsd44::{TCP_KEEPALIVE};\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub use consts::os::extra::{F_FULLFSYNC};\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub use types::os::arch::extra::{mach_timebase_info};\n \n \n@@ -372,8 +371,7 @@ pub mod types {\n \n     // Standard types that are scalar but vary by OS and arch.\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -506,10 +504,10 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"x86\",\n+                  target_arch = \"arm\",\n+                  target_arch = \"mips\",\n+                  target_arch = \"mipsel\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -536,9 +534,9 @@ pub mod types {\n                 pub type intptr_t = i32;\n                 pub type uintptr_t = u32;\n             }\n-            #[cfg(target_arch = \"x86\")]\n-            #[cfg(target_arch = \"mips\")]\n-            #[cfg(target_arch = \"mipsel\")]\n+            #[cfg(any(target_arch = \"x86\",\n+                      target_arch = \"mips\",\n+                      target_arch = \"mipsel\"))]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n@@ -652,8 +650,7 @@ pub mod types {\n                     pub __size: [u32, ..9]\n                 }\n             }\n-            #[cfg(target_arch = \"mips\")]\n-            #[cfg(target_arch = \"mipsel\")]\n+            #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_long, c_ulong, time_t};\n                 use types::os::arch::posix88::{gid_t, ino_t};\n@@ -1660,8 +1657,7 @@ pub mod types {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n@@ -1793,8 +1789,7 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"x86\")]\n+        #[cfg(any(target_arch = \"arm\", target_arch = \"x86\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -2383,8 +2378,7 @@ pub mod consts {\n     }\n \n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -2407,9 +2401,9 @@ pub mod consts {\n         }\n         pub mod c99 {\n         }\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"x86_64\")]\n-        #[cfg(target_arch = \"arm\")]\n+        #[cfg(any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2621,8 +2615,7 @@ pub mod consts {\n             pub static EHWPOISON: c_int = 133;\n         }\n \n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2898,23 +2891,24 @@ pub mod consts {\n             #[cfg(target_os = \"android\")]\n             pub static PTHREAD_STACK_MIN: size_t = 8192;\n \n-            #[cfg(target_arch = \"arm\", target_os = \"linux\")]\n-            #[cfg(target_arch = \"x86\", target_os = \"linux\")]\n-            #[cfg(target_arch = \"x86_64\", target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\",\n+                      any(target_arch = \"arm\",\n+                          target_arch = \"x86\",\n+                          target_arch = \"x86_64\")))]\n             pub static PTHREAD_STACK_MIN: size_t = 16384;\n \n-            #[cfg(target_arch = \"mips\", target_os = \"linux\")]\n-            #[cfg(target_arch = \"mipsel\", target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\",\n+                      any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n             pub static PTHREAD_STACK_MIN: size_t = 131072;\n \n             pub static CLOCK_REALTIME: c_int = 0;\n             pub static CLOCK_MONOTONIC: c_int = 1;\n         }\n         pub mod posix08 {\n         }\n-        #[cfg(target_arch = \"arm\")]\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(any(target_arch = \"arm\",\n+                  target_arch = \"x86\",\n+                  target_arch = \"x86_64\"))]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -2961,8 +2955,7 @@ pub mod consts {\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n         }\n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -3007,9 +3000,9 @@ pub mod consts {\n             pub static SHUT_WR: c_int = 1;\n             pub static SHUT_RDWR: c_int = 2;\n         }\n-        #[cfg(target_arch = \"x86\")]\n-        #[cfg(target_arch = \"x86_64\")]\n-        #[cfg(target_arch = \"arm\")]\n+        #[cfg(any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n@@ -3036,8 +3029,7 @@ pub mod consts {\n             pub static MAP_NONBLOCK : c_int = 0x010000;\n             pub static MAP_STACK : c_int = 0x020000;\n         }\n-        #[cfg(target_arch = \"mips\")]\n-        #[cfg(target_arch = \"mipsel\")]\n+        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n@@ -3160,8 +3152,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -3421,10 +3412,11 @@ pub mod consts {\n             #[cfg(target_arch = \"arm\")]\n             pub static PTHREAD_STACK_MIN: size_t = 4096;\n \n-            #[cfg(target_os = \"freebsd\", target_arch = \"mips\")]\n-            #[cfg(target_os = \"freebsd\", target_arch = \"mipsel\")]\n-            #[cfg(target_os = \"freebsd\", target_arch = \"x86\")]\n-            #[cfg(target_os = \"freebsd\", target_arch = \"x86_64\")]\n+            #[cfg(all(target_os = \"freebsd\",\n+                      any(target_arch = \"mips\",\n+                          target_arch = \"mipsel\",\n+                          target_arch = \"x86\",\n+                          target_arch = \"x86_64\")))]\n             pub static PTHREAD_STACK_MIN: size_t = 2048;\n \n             #[cfg(target_os = \"dragonfly\")]\n@@ -3569,8 +3561,7 @@ pub mod consts {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -4261,13 +4252,12 @@ pub mod funcs {\n         }\n     }\n \n-\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -4278,11 +4268,11 @@ pub mod funcs {\n                 pub fn chmod(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"freebsd\")]\n-                #[cfg(target_os = \"dragonfly\")]\n-                #[cfg(target_os = \"android\")]\n-                #[cfg(target_os = \"ios\")]\n+                #[cfg(any(target_os = \"linux\",\n+                          target_os = \"freebsd\",\n+                          target_os = \"dragonfly\",\n+                          target_os = \"android\",\n+                          target_os = \"ios\"))]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -4292,11 +4282,11 @@ pub mod funcs {\n                 pub fn mkdir(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn mkfifo(path: *const c_char, mode: mode_t) -> c_int;\n \n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"freebsd\")]\n-                #[cfg(target_os = \"dragonfly\")]\n-                #[cfg(target_os = \"android\")]\n-                #[cfg(target_os = \"ios\")]\n+                #[cfg(any(target_os = \"linux\",\n+                          target_os = \"freebsd\",\n+                          target_os = \"dragonfly\",\n+                          target_os = \"android\",\n+                          target_os = \"ios\"))]\n                 pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -4481,23 +4471,23 @@ pub mod funcs {\n \n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod posix01 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n             use types::os::arch::posix01::stat;\n \n             extern {\n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"freebsd\")]\n-                #[cfg(target_os = \"dragonfly\")]\n-                #[cfg(target_os = \"android\")]\n-                #[cfg(target_os = \"ios\")]\n+                #[cfg(any(target_os = \"linux\",\n+                          target_os = \"freebsd\",\n+                          target_os = \"dragonfly\",\n+                          target_os = \"android\",\n+                          target_os = \"ios\"))]\n                 pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -4518,8 +4508,7 @@ pub mod funcs {\n \n                 pub fn fsync(fd: c_int) -> c_int;\n \n-                #[cfg(target_os = \"linux\")]\n-                #[cfg(target_os = \"android\")]\n+                #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n                 pub fn fdatasync(fd: c_int) -> c_int;\n \n                 pub fn setenv(name: *const c_char, val: *const c_char,\n@@ -4598,13 +4587,13 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"windows\")]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"windows\",\n+              target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod posix08 {\n         pub mod unistd {\n         }\n@@ -4687,10 +4676,10 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n         use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, c_ulong, size_t};\n@@ -4723,8 +4712,7 @@ pub mod funcs {\n     }\n \n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod bsd44 {\n         use types::common::c95::{c_void};\n         use types::os::arch::c95::{c_uchar, c_int, size_t};\n@@ -4744,8 +4732,7 @@ pub mod funcs {\n     pub mod bsd44 {\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub mod extra {\n         use types::os::arch::c95::{c_char, c_int};\n \n@@ -4755,13 +4742,11 @@ pub mod funcs {\n         }\n     }\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     pub mod extra {\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     pub mod extra {\n     }\n "}]}