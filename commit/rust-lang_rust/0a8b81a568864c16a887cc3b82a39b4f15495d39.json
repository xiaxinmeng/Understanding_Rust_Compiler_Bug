{"sha": "0a8b81a568864c16a887cc3b82a39b4f15495d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOGI4MWE1Njg4NjRjMTZhODg3Y2MzYjgyYTM5YjRmMTU0OTVkMzk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-15T20:41:33Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:27Z"}, "message": "Ignore drop check bools when testing for legal generator types", "tree": {"sha": "842407d722613d963585cf432b16a8686485f955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/842407d722613d963585cf432b16a8686485f955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8b81a568864c16a887cc3b82a39b4f15495d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8b81a568864c16a887cc3b82a39b4f15495d39", "html_url": "https://github.com/rust-lang/rust/commit/0a8b81a568864c16a887cc3b82a39b4f15495d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8b81a568864c16a887cc3b82a39b4f15495d39/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4628f8534f0bff482e22bc394e35934ff1573a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/4628f8534f0bff482e22bc394e35934ff1573a26", "html_url": "https://github.com/rust-lang/rust/commit/4628f8534f0bff482e22bc394e35934ff1573a26"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "9b9a6a0273e57b941e530821c48e934a0cc99198", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -27,6 +27,7 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     ty,\n     name,\n     source_info,\n+    internal,\n     is_user_variable\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });"}, {"sha": "7b71bc0e678a5f91d413636fb1a6aa0dbbdb230d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -411,6 +411,10 @@ pub struct LocalDecl<'tcx> {\n     /// True if this corresponds to a user-declared local variable.\n     pub is_user_variable: bool,\n \n+    /// True if this an internal local.\n+    /// Such locals are not checked against the legal types in a generator.\n+    pub internal: bool,\n+\n     /// Type of this local.\n     pub ty: Ty<'tcx>,\n \n@@ -436,6 +440,23 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n+            internal: false,\n+            is_user_variable: false\n+        }\n+    }\n+\n+    /// Create a new `LocalDecl` for a internal temporary.\n+    #[inline]\n+    pub fn new_internal(ty: Ty<'tcx>, span: Span) -> Self {\n+        LocalDecl {\n+            mutability: Mutability::Mut,\n+            ty,\n+            name: None,\n+            source_info: SourceInfo {\n+                span,\n+                scope: ARGUMENT_VISIBILITY_SCOPE\n+            },\n+            internal: true,\n             is_user_variable: false\n         }\n     }\n@@ -452,6 +473,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n+            internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n             is_user_variable: false\n         }"}, {"sha": "234583f7d791f4ac9bf29335239898c38650b8c8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -654,6 +654,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                     name: _,\n                     ref $($mutability)* source_info,\n+                    internal: _,\n                     is_user_variable: _,\n                 } = *local_decl;\n "}, {"sha": "702fc89fa129a68e7abfe3d29c06db7db517dd4a", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -712,6 +712,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ty: var_ty.clone(),\n             name: Some(name),\n             source_info: source_info,\n+            internal: false,\n             is_user_variable: true,\n         });\n         self.var_indices.insert(var_id, var);"}, {"sha": "7c65d50269f33c30b224e275dfbf37402eacf476", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -521,6 +521,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     span: pattern.map_or(self.fn_span, |pat| pat.span)\n                 },\n                 name: name,\n+                internal: false,\n                 is_user_variable: false,\n             });\n         }"}, {"sha": "fee9ff854cd31314c9fa690355727a5b81007979", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -128,6 +128,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     LocalDecl {\n         mutability, ty, name: None,\n         source_info: SourceInfo { scope: ARGUMENT_VISIBILITY_SCOPE, span },\n+        internal: false,\n         is_user_variable: false\n     }\n }"}, {"sha": "308a48677e58f97b86d7a404810c443606532d42", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -314,7 +314,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let patch = &mut self.patch;\n         debug!(\"create_drop_flag({:?})\", self.mir.span);\n         self.drop_flags.entry(index).or_insert_with(|| {\n-            patch.new_temp(tcx.types.bool, span)\n+            patch.new_internal(tcx.types.bool, span)\n         });\n     }\n "}, {"sha": "524b76b2e6be954d6ca1b536e862d55a4c10fbba", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -263,6 +263,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         ty: ret_ty,\n         name: None,\n         source_info,\n+        internal: false,\n         is_user_variable: false,\n     };\n     let new_ret_local = Local::new(mir.local_decls.len());\n@@ -314,7 +315,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let allowed = tcx.erase_regions(&interior.as_slice());\n \n     for (local, decl) in mir.local_decls.iter_enumerated() {\n-        if !live_locals.contains(&local) {\n+        if !live_locals.contains(&local) || decl.internal {\n             continue;\n         }\n         if !allowed.contains(&decl.ty) {\n@@ -340,6 +341,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             ty: unit,\n             name: None,\n             source_info,\n+            internal: false,\n             is_user_variable: false,\n         };\n         remap.insert(local, (var.ty, upvar_len + 1 + idx));\n@@ -482,6 +484,7 @@ fn generate_drop<'a, 'tcx>(\n         ty: tcx.mk_nil(),\n         name: None,\n         source_info,\n+        internal: false,\n         is_user_variable: false,\n     };\n \n@@ -496,6 +499,7 @@ fn generate_drop<'a, 'tcx>(\n         }),\n         name: None,\n         source_info,\n+        internal: false,\n         is_user_variable: false,\n     };\n "}, {"sha": "3cf7858406787122b421af5750fc67dddf6cdb85", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -101,6 +101,13 @@ impl<'tcx> MirPatch<'tcx> {\n         Local::new(index as usize)\n     }\n \n+    pub fn new_internal(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n+        let index = self.next_local;\n+        self.next_local += 1;\n+        self.new_locals.push(LocalDecl::new_internal(ty, span));\n+        Local::new(index as usize)\n+    }\n+\n     pub fn new_block(&mut self, data: BasicBlockData<'tcx>) -> BasicBlock {\n         let block = BasicBlock::new(self.patch_map.len());\n         debug!(\"MirPatch: new_block: {:?}: {:?}\", block, data);"}, {"sha": "f116620388f16eb61adceb96834dd4d892df00ff", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8b81a568864c16a887cc3b82a39b4f15495d39/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=0a8b81a568864c16a887cc3b82a39b4f15495d39", "patch": "@@ -66,9 +66,6 @@ pub fn find_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n-    // FIXME: Drop elaboration can insert bool types in the generator\n-    visitor.types.insert(fcx.tcx.types.bool);\n-\n     // Deduplicate types\n     let set: FxHashSet<_> = visitor.types.into_iter()\n         .map(|t| fcx.resolve_type_vars_if_possible(&t))"}]}