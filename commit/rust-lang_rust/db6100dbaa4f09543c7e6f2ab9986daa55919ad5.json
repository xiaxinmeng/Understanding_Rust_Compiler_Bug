{"sha": "db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNjEwMGRiYWE0ZjA5NTQzYzdlNmYyYWI5OTg2ZGFhNTU5MTlhZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-15T09:02:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T09:02:53Z"}, "message": "Merge #4889\n\n4889: Deprecate hir::Path::from_ast r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "165cdcd914e8f201fb44e4ab7e5c04cf72994195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/165cdcd914e8f201fb44e4ab7e5c04cf72994195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe5zk9CRBK7hj4Ov3rIwAAdHIIAHSe6MM//YyiQvLjSOyNcjHr\nmlf6YJXGUwq6pzSS4GrX300Hxm/PR1IBs/dsT/qT3Z9FsGRQEyaJxukGOz9jvftj\nCgxLJWAbogHG5T9GH8adogvJ4IkGKZF7hT+OKZaLyjNdfwRYPrE3gUmigv7WN8fb\nJgkKGc8GMz1bxDpkLyLsjTIpIYoFDodPnqJnMKpSm0vzIcvIGsffDDA5lCZiO/OC\nryByy2T+w+WjYHGdRq8xKi56BFJOUojbYtLbWIyETt9y6QOrPhCDKGyBRnIbq0Aq\nuLOdTQckxXcBHvqmqjcC4Qd0CwllnQF/5sgMemH5p5VlCLIPsY3iSn/BfasDQ1g=\n=vYod\n-----END PGP SIGNATURE-----\n", "payload": "tree 165cdcd914e8f201fb44e4ab7e5c04cf72994195\nparent 672d160b013df82b1729fd3db130ff7b6f9b5b31\nparent b5c4f2faa2a39bad9af35e7d90e9ed6151a6a0d5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592211773 +0000\ncommitter GitHub <noreply@github.com> 1592211773 +0000\n\nMerge #4889\n\n4889: Deprecate hir::Path::from_ast r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "html_url": "https://github.com/rust-lang/rust/commit/db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672d160b013df82b1729fd3db130ff7b6f9b5b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/672d160b013df82b1729fd3db130ff7b6f9b5b31", "html_url": "https://github.com/rust-lang/rust/commit/672d160b013df82b1729fd3db130ff7b6f9b5b31"}, {"sha": "b5c4f2faa2a39bad9af35e7d90e9ed6151a6a0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c4f2faa2a39bad9af35e7d90e9ed6151a6a0d5", "html_url": "https://github.com/rust-lang/rust/commit/b5c4f2faa2a39bad9af35e7d90e9ed6151a6a0d5"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "00fa95b6c3b456dcbb1394bd820b1573fee7cdf7", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -106,6 +106,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             _ => return None,\n         };\n         // FIXME: use `hir::Path::from_src` instead.\n+        #[allow(deprecated)]\n         let path = hir::Path::from_ast(path)?;\n         let resolution = self.source_scope.resolve_hir_path(&path)?;\n         match resolution {\n@@ -150,6 +151,7 @@ impl<'a> QualifyPaths<'a> {\n             return None;\n         }\n         // FIXME: use `hir::Path::from_src` instead.\n+        #[allow(deprecated)]\n         let hir_path = hir::Path::from_ast(p.clone());\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {"}, {"sha": "190d6d98d4bd223eac86029fe21cbf1a8fd3b184", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -154,7 +154,7 @@ pub enum GenericArg {\n \n impl Path {\n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n-    /// DEPRECATED: It does not handle `$crate` from macro call.\n+    #[deprecated = \"Doesn't handle hygiene, don't add new calls, remove old ones\"]\n     pub fn from_ast(path: ast::Path) -> Option<Path> {\n         lower::lower_path(path, &Hygiene::new_unhygienic())\n     }"}, {"sha": "560fb19e6a117709fe990099006c503266078285", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -381,6 +381,7 @@ impl<'a> CompletionContext<'a> {\n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n             self.has_type_args = segment.type_arg_list().is_some();\n \n+            #[allow(deprecated)]\n             if let Some(path) = hir::Path::from_ast(path.clone()) {\n                 if let Some(path_prefix) = path.qualifier() {\n                     self.path_prefix = Some(path_prefix);"}, {"sha": "6e72eea6646ce94424bc027dbc3c8bdb86e37a5b", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -50,10 +50,8 @@ fn expr_no_struct(p: &mut Parser) {\n }\n \n fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n-    match kind {\n-        BIN_EXPR | RANGE_EXPR | IF_EXPR => false,\n-        _ => true,\n-    }\n+    let forbid = matches!(kind, BIN_EXPR | RANGE_EXPR);\n+    !forbid\n }\n \n pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {"}, {"sha": "4e3fa704e6e00d1142ba86c1ea6396f177087329", "filename": "crates/ra_syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.rast", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -56,4 +56,3 @@ SOURCE_FILE@0..48\n       R_CURLY@46..47 \"}\"\n   WHITESPACE@47..48 \"\\n\"\n error 24..24: attributes are not allowed on BIN_EXPR\n-error 44..44: attributes are not allowed on IF_EXPR"}, {"sha": "981565cd7400c8fd3195219f2733cf0f0bec6701", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -10,17 +10,17 @@\n pub mod mark;\n \n use std::{\n-    fs,\n+    env, fs,\n     path::{Path, PathBuf},\n };\n \n-pub use ra_cfg::CfgOptions;\n+use serde_json::Value;\n use stdx::split1;\n+use text_size::{TextRange, TextSize};\n \n+pub use ra_cfg::CfgOptions;\n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use rustc_hash::FxHashMap;\n-use serde_json::Value;\n-use text_size::{TextRange, TextSize};\n \n pub use difference::Changeset as __Changeset;\n \n@@ -625,8 +625,6 @@ pub fn skip_slow_tests() -> bool {\n     should_skip\n }\n \n-const REWRITE: bool = false;\n-\n /// Asserts that `expected` and `actual` strings are equal. If they differ only\n /// in trailing or leading whitespace the test won't fail and\n /// the contents of `actual` will be written to the file located at `path`.\n@@ -642,7 +640,7 @@ fn assert_equal_text(expected: &str, actual: &str, path: &Path) {\n         fs::write(path, actual).unwrap();\n         return;\n     }\n-    if REWRITE {\n+    if env::var(\"UPDATE_EXPECTATIONS\").is_ok() {\n         println!(\"rewriting {}\", pretty_path.display());\n         fs::write(path, actual).unwrap();\n         return;"}, {"sha": "4cb5dfaa053f08f531a986ed93068e82c7226fcf", "filename": "docs/dev/README.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/db6100dbaa4f09543c7e6f2ab9986daa55919ad5/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=db6100dbaa4f09543c7e6f2ab9986daa55919ad5", "patch": "@@ -342,6 +342,12 @@ There are two kinds of tests:\n The purpose of inline tests is not to achieve full coverage by test cases, but to explain to the reader of the code what each particular `if` and `match` is responsible for.\n If you are tempted to add a large inline test, it might be a good idea to leave only the simplest example in place, and move the test to a manual `parser/ok` test.\n \n+To update test data, run with `UPDATE_EXPECTATIONS` variable:\n+\n+```bash\n+env UPDATE_EXPECTATIONS=1 cargo qt\n+```\n+\n # Logging\n \n Logging is done by both rust-analyzer and VS Code, so it might be tricky to"}]}