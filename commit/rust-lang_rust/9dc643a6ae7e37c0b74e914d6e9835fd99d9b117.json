{"sha": "9dc643a6ae7e37c0b74e914d6e9835fd99d9b117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzY0M2E2YWU3ZTM3YzBiNzRlOTE0ZDZlOTgzNWZkOTlkOWIxMTc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-19T14:33:03Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-01T06:57:08Z"}, "message": "Remove TODO from 'format_tuple_struct'", "tree": {"sha": "019068fbef2e82b43564fa7bbc11f7a689ac8929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/019068fbef2e82b43564fa7bbc11f7a689ac8929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117", "html_url": "https://github.com/rust-lang/rust/commit/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c5915176aa817644292064b865fb3adf23f745", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c5915176aa817644292064b865fb3adf23f745", "html_url": "https://github.com/rust-lang/rust/commit/68c5915176aa817644292064b865fb3adf23f745"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "7021f0c2ae594e9d2a09f9d897c254a7ec95a7f9", "filename": "src/items.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9dc643a6ae7e37c0b74e914d6e9835fd99d9b117", "patch": "@@ -1041,33 +1041,24 @@ fn format_tuple_struct(context: &RewriteContext,\n                                    .config\n                                    .max_width\n                                    .checked_sub(item_indent.width() + 3));\n+    let shape = Shape::legacy(item_budget, item_indent);\n \n-    let items =\n-        itemize_list(context.codemap,\n-                     fields.iter(),\n-                     \")\",\n-                     |field| {\n-                         // Include attributes and doc comments, if present\n-                         if !field.attrs.is_empty() {\n-                             field.attrs[0].span.lo\n-                         } else {\n-                             field.span.lo\n-                         }\n-                     },\n-                     |field| field.ty.span.hi,\n-                     |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n-                     context.codemap.span_after(span, \"(\"),\n-                     span.hi);\n-    let body_budget = try_opt!(context\n-                                   .config\n-                                   .max_width\n-                                   .checked_sub(offset.block_only().width() + result.len() +\n-                                                3));\n-    let body = try_opt!(list_helper(items,\n-                                    // TODO budget is wrong in block case\n-                                    Shape::legacy(body_budget, item_indent),\n-                                    context.config,\n-                                    tactic));\n+    let items = itemize_list(context.codemap,\n+                             fields.iter(),\n+                             \")\",\n+                             |field| {\n+                                 // Include attributes and doc comments, if present\n+                                 if !field.attrs.is_empty() {\n+                                     field.attrs[0].span.lo\n+                                 } else {\n+                                     field.span.lo\n+                                 }\n+                             },\n+                             |field| field.ty.span.hi,\n+                             |field| field.rewrite(context, shape),\n+                             context.codemap.span_after(span, \"(\"),\n+                             span.hi);\n+    let body = try_opt!(list_helper(items, shape, context.config, tactic));\n \n     if context.config.fn_args_layout == IndentStyle::Visual || !body.contains('\\n') {\n         result.push('(');"}, {"sha": "f7383fbc41e3b789d17870e0a05803950e89129f", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc643a6ae7e37c0b74e914d6e9835fd99d9b117/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9dc643a6ae7e37c0b74e914d6e9835fd99d9b117", "patch": "@@ -158,7 +158,7 @@ impl Indent {\n         let (num_tabs, num_spaces) = if config.hard_tabs {\n             (self.block_indent / config.tab_spaces, self.alignment)\n         } else {\n-            (0, self.block_indent + self.alignment)\n+            (0, self.width())\n         };\n         let num_chars = num_tabs + num_spaces;\n         let mut indent = String::with_capacity(num_chars);"}]}