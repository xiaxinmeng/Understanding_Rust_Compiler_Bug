{"sha": "8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNGJkYzJmM2Y3NTNlMGQwYjAwZWNjODkyYTgxM2U5Nzg2NjIxZTk=", "commit": {"author": {"name": "Matt Peterson", "email": "ricochet1k@gmail.com", "date": "2017-12-31T02:47:45Z"}, "committer": {"name": "Matt Peterson", "email": "ricochet1k@gmail.com", "date": "2017-12-31T02:47:45Z"}, "message": "refactor lifetime out of is_lifetime", "tree": {"sha": "fae8d9ab5c2d863b5b2b295f8fe90546ac56e94e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae8d9ab5c2d863b5b2b295f8fe90546ac56e94e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "html_url": "https://github.com/rust-lang/rust/commit/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9/comments", "author": {"login": "ricochet1k", "id": 76901, "node_id": "MDQ6VXNlcjc2OTAx", "avatar_url": "https://avatars.githubusercontent.com/u/76901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricochet1k", "html_url": "https://github.com/ricochet1k", "followers_url": "https://api.github.com/users/ricochet1k/followers", "following_url": "https://api.github.com/users/ricochet1k/following{/other_user}", "gists_url": "https://api.github.com/users/ricochet1k/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricochet1k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricochet1k/subscriptions", "organizations_url": "https://api.github.com/users/ricochet1k/orgs", "repos_url": "https://api.github.com/users/ricochet1k/repos", "events_url": "https://api.github.com/users/ricochet1k/events{/privacy}", "received_events_url": "https://api.github.com/users/ricochet1k/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ricochet1k", "id": 76901, "node_id": "MDQ6VXNlcjc2OTAx", "avatar_url": "https://avatars.githubusercontent.com/u/76901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricochet1k", "html_url": "https://github.com/ricochet1k", "followers_url": "https://api.github.com/users/ricochet1k/followers", "following_url": "https://api.github.com/users/ricochet1k/following{/other_user}", "gists_url": "https://api.github.com/users/ricochet1k/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricochet1k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricochet1k/subscriptions", "organizations_url": "https://api.github.com/users/ricochet1k/orgs", "repos_url": "https://api.github.com/users/ricochet1k/repos", "events_url": "https://api.github.com/users/ricochet1k/events{/privacy}", "received_events_url": "https://api.github.com/users/ricochet1k/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55242583cddf969c863ba8948682beb7d5bb99e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55242583cddf969c863ba8948682beb7d5bb99e", "html_url": "https://github.com/rust-lang/rust/commit/f55242583cddf969c863ba8948682beb7d5bb99e"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "eae558f002a4c9c7dfe21786caea12eb21a2fe14", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "patch": "@@ -2036,19 +2036,12 @@ impl<'a> Parser<'a> {\n \n     /// Parse single lifetime 'a or panic.\n     pub fn expect_lifetime(&mut self) -> Lifetime {\n-        let lifetime = match self.token {\n-            token::Lifetime(ident) =>\n-                Lifetime { ident: ident, span: self.span, id: ast::DUMMY_NODE_ID },\n-            token::Interpolated(ref nt) => match nt.0 {\n-                token::NtLifetime(lifetime) =>\n-                    lifetime,\n-                _ => self.span_bug(self.span, \"not a lifetime\")\n-            }\n-            _ => self.span_bug(self.span, \"not a lifetime\")\n-        };\n-\n-        self.bump();\n-        lifetime\n+        if let Some(lifetime) = self.token.lifetime(self.span) {\n+            self.bump();\n+            lifetime\n+        } else {\n+            self.span_bug(self.span, \"not a lifetime\")\n+        }\n     }\n \n     /// Parse mutability (`mut` or nothing)."}, {"sha": "bd4f7f9853d768e1a67376626464e2990df89ac3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "patch": "@@ -314,18 +314,26 @@ impl Token {\n         false\n     }\n \n-    /// Returns `true` if the token is a lifetime.\n-    pub fn is_lifetime(&self) -> bool {\n+    /// Returns a lifetime with the span and a dummy id if it is a lifetime,\n+    /// or the original lifetime if it is an interpolated lifetime, ignoring\n+    /// the span.\n+    pub fn lifetime(&self, span: Span) -> Option<ast::Lifetime> {\n         match *self {\n-            Lifetime(..) => true,\n+            Lifetime(ident) =>\n+                Some(ast::Lifetime { ident: ident, span: span, id: ast::DUMMY_NODE_ID }),\n             Interpolated(ref nt) => match nt.0 {\n-                NtLifetime(..) => true,\n-                _ => false,\n+                NtLifetime(lifetime) => Some(lifetime),\n+                _ => None,\n             },\n-            _ => false,\n+            _ => None,\n         }\n     }\n \n+    /// Returns `true` if the token is a lifetime.\n+    pub fn is_lifetime(&self) -> bool {\n+        self.lifetime(syntax_pos::DUMMY_SP).is_some()\n+    }\n+\n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n     pub fn is_mutability(&self) -> bool {\n         self.is_keyword(keywords::Mut) ||"}]}