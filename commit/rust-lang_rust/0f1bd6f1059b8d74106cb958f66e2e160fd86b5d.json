{"sha": "0f1bd6f1059b8d74106cb958f66e2e160fd86b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMWJkNmYxMDU5YjhkNzQxMDZjYjk1OGY2NmUyZTE2MGZkODZiNWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:25:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:25:00Z"}, "message": "rollup merge of #20623: jroesch/reject-non-param-bounds\n\nThis closes #20019, and should reject any where clauses placed on types not involving type parameters.\n\nr? @nikomatsakis", "tree": {"sha": "a695c8698c26dae758fa61dfd90238bb46e96f4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a695c8698c26dae758fa61dfd90238bb46e96f4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d", "html_url": "https://github.com/rust-lang/rust/commit/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ccfd3f2c88a50a5123aef9d24d575a351f2b144", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccfd3f2c88a50a5123aef9d24d575a351f2b144", "html_url": "https://github.com/rust-lang/rust/commit/6ccfd3f2c88a50a5123aef9d24d575a351f2b144"}, {"sha": "b683e879e4a88db5ab02b905486860e52d7ac600", "url": "https://api.github.com/repos/rust-lang/rust/commits/b683e879e4a88db5ab02b905486860e52d7ac600", "html_url": "https://github.com/rust-lang/rust/commit/b683e879e4a88db5ab02b905486860e52d7ac600"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "329ae85082f5fa08b1ebb86004d5fe4c4afb884c", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=0f1bd6f1059b8d74106cb958f66e2e160fd86b5d", "patch": "@@ -86,13 +86,14 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     {\n         let ccx = self.ccx;\n         let item_def_id = local_def(item.id);\n-        let polytype = ty::lookup_item_type(ccx.tcx, item_def_id);\n+        let type_scheme = ty::lookup_item_type(ccx.tcx, item_def_id);\n+        reject_non_type_param_bounds(ccx.tcx, item.span, &type_scheme.generics);\n         let param_env =\n             ty::construct_parameter_environment(ccx.tcx,\n-                                                &polytype.generics,\n+                                                &type_scheme.generics,\n                                                 item.id);\n         let inh = Inherited::new(ccx.tcx, param_env);\n-        let fcx = blank_fn_ctxt(ccx, &inh, ty::FnConverging(polytype.ty), item.id);\n+        let fcx = blank_fn_ctxt(ccx, &inh, ty::FnConverging(type_scheme.ty), item.id);\n         f(self, &fcx);\n         vtable::select_all_fcx_obligations_or_error(&fcx);\n         regionck::regionck_item(&fcx, item);\n@@ -143,10 +144,12 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                                         item.span,\n                                                         region::CodeExtent::from_node_id(item.id),\n                                                         Some(&mut this.cache));\n+\n             let type_scheme = ty::lookup_item_type(fcx.tcx(), local_def(item.id));\n             let item_ty = fcx.instantiate_type_scheme(item.span,\n                                                       &fcx.inh.param_env.free_substs,\n                                                       &type_scheme.ty);\n+\n             bounds_checker.check_traits_in_ty(item_ty);\n         });\n     }\n@@ -178,6 +181,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 None => { return; }\n                 Some(t) => { t }\n             };\n+\n             let trait_ref = fcx.instantiate_type_scheme(item.span,\n                                                         &fcx.inh.param_env.free_substs,\n                                                         &trait_ref);\n@@ -229,6 +233,35 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     }\n }\n \n+// Reject any predicates that do not involve a type parameter.\n+fn reject_non_type_param_bounds<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                      span: Span,\n+                                      generics: &ty::Generics<'tcx>) {\n+    for predicate in generics.predicates.iter() {\n+        match predicate {\n+            &ty::Predicate::Trait(ty::Binder(ref tr)) => {\n+                let self_ty = tr.self_ty();\n+                if !self_ty.walk().any(|t| is_ty_param(t)) {\n+                    tcx.sess.span_err(\n+                        span,\n+                        format!(\"cannot bound type `{}`, where clause \\\n+                                 bounds may only be attached to types involving \\\n+                                 type parameters\",\n+                                 self_ty.repr(tcx)).as_slice())\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn is_ty_param(ty: ty::Ty) -> bool {\n+        match &ty.sty {\n+            &ty::sty::ty_param(_) => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         self.check_item_well_formed(i);"}, {"sha": "61ef2dd36fcdcaa220a64446fc519402d0c2fc09", "filename": "src/test/compile-fail/where-clauses-not-parameter.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1bd6f1059b8d74106cb958f66e2e160fd86b5d/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs?ref=0f1bd6f1059b8d74106cb958f66e2e160fd86b5d", "patch": "@@ -8,17 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A;\n+fn equal<T>(_: &T, _: &T) -> bool where int : Eq {\n+    true //~^ ERROR cannot bound type `int`, where clause bounds may only be attached\n+}\n+\n+// This should be fine involves a type parameter.\n+fn test<T: Eq>() -> bool where Option<T> : Eq {}\n+\n+// This should be rejected as well.\n+fn test2() -> bool where Option<int> : Eq {}\n \n-trait U {}\n+#[derive(PartialEq)]\n+//~^ ERROR cannot bound type `int`, where clause bounds\n+enum Foo<T> where int : Eq { MkFoo }\n \n-// impl U for A {}\n+fn test3<T: Eq>() -> bool where Option<Foo<T>> : Eq {}\n+\n+fn test4() -> bool where Option<Foo<int>> : Eq {}\n+//~^ ERROR cannot bound type `core::option::Option<Foo<int>>`, where clause bounds\n+\n+trait Baz<T> where int : Eq {\n+    fn baz() where String : Eq;\n+}\n \n-fn equal<T>(_: &T, _: &T) -> bool where A : U {\n-    true\n+impl Baz<int> for int where int : Eq {\n+    //~^ ERROR cannot bound type `int`, where clause bounds\n+    fn baz() where String : Eq {}\n }\n \n fn main() {\n     equal(&0i, &0i);\n-    //~^ ERROR the trait `U` is not implemented for the type `A`\n }"}, {"sha": "bc5fc388ca1ea0f168b9c464d5bee1fc76ad5738", "filename": "src/test/run-pass/where-clauses-not-parameter.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ccfd3f2c88a50a5123aef9d24d575a351f2b144/src%2Ftest%2Frun-pass%2Fwhere-clauses-not-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccfd3f2c88a50a5123aef9d24d575a351f2b144/src%2Ftest%2Frun-pass%2Fwhere-clauses-not-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-not-parameter.rs?ref=6ccfd3f2c88a50a5123aef9d24d575a351f2b144", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn equal<T>(_: &T, _: &T) -> bool where int : Eq {\n-    true\n-}\n-\n-fn main() {\n-    equal(&0i, &0i);\n-}"}]}