{"sha": "37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZmJmYWYxODNhM2MzZjVmZTJhOTc3MzkyN2YyY2ViOTJjNGUyNDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-29T20:00:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-02-05T18:19:55Z"}, "message": "Add a local counter that tracks how many tasks are pushed or not pushed,\nso that we can still get assertion failures even when dep-graph\nconstruction is disabled.", "tree": {"sha": "f97ab0485133c47d9dc929b2629ad2bf57c795cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f97ab0485133c47d9dc929b2629ad2bf57c795cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "html_url": "https://github.com/rust-lang/rust/commit/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98422e8c156d9cf343c93da30f71d9a4cabda25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/98422e8c156d9cf343c93da30f71d9a4cabda25f", "html_url": "https://github.com/rust-lang/rust/commit/98422e8c156d9cf343c93da30f71d9a4cabda25f"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "c43b4b15b763b24fffdc322af8c0574d3428ef29", "filename": "src/librustc/dep_graph/thread.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fthread.rs?ref=37fbfaf183a3c3f5fe2a9773927f2ceb92c4e247", "patch": "@@ -19,6 +19,7 @@\n //! allocated (and both have a fairly large capacity).\n \n use rustc_data_structures::veccell::VecCell;\n+use std::cell::Cell;\n use std::sync::mpsc::{self, Sender, Receiver};\n use std::thread;\n \n@@ -39,6 +40,13 @@ pub enum DepMessage {\n pub struct DepGraphThreadData {\n     enabled: bool,\n \n+    // Local counter that just tracks how many tasks are pushed onto the\n+    // stack, so that we still get an error in the case where one is\n+    // missing. If dep-graph construction is enabled, we'd get the same\n+    // error when processing tasks later on, but that's annoying because\n+    // it lacks precision about the source of the error.\n+    tasks_pushed: Cell<usize>,\n+\n     // current buffer, where we accumulate messages\n     messages: VecCell<DepMessage>,\n \n@@ -59,18 +67,26 @@ impl DepGraphThreadData {\n         let (tx1, rx1) = mpsc::channel();\n         let (tx2, rx2) = mpsc::channel();\n         let (txq, rxq) = mpsc::channel();\n+\n         if enabled {\n             thread::spawn(move || main(rx1, tx2, txq));\n         }\n+\n         DepGraphThreadData {\n             enabled: enabled,\n+            tasks_pushed: Cell::new(0),\n             messages: VecCell::with_capacity(INITIAL_CAPACITY),\n             swap_in: rx2,\n             swap_out: tx1,\n             query_in: rxq,\n         }\n     }\n \n+    #[inline]\n+    pub fn enabled(&self) -> bool {\n+        self.enabled\n+    }\n+\n     /// Sends the current batch of messages to the thread. Installs a\n     /// new vector of messages.\n     fn swap(&self) {\n@@ -100,13 +116,40 @@ impl DepGraphThreadData {\n     /// the buffer is full, this may swap.)\n     #[inline]\n     pub fn enqueue(&self, message: DepMessage) {\n+        // Regardless of whether dep graph construction is enabled, we\n+        // still want to check that we always have a valid task on the\n+        // stack when a read/write/etc event occurs.\n+        match message {\n+            DepMessage::Read(_) | DepMessage::Write(_) =>\n+                if self.tasks_pushed.get() == 0 {\n+                    self.invalid_message(\"read/write but no current task\")\n+                },\n+            DepMessage::PushTask(_) | DepMessage::PushIgnore =>\n+                self.tasks_pushed.set(self.tasks_pushed.get() + 1),\n+            DepMessage::PopTask(_) | DepMessage::PopIgnore =>\n+                self.tasks_pushed.set(self.tasks_pushed.get() - 1),\n+            DepMessage::Query =>\n+                (),\n+        }\n+\n         if self.enabled {\n-            let len = self.messages.push(message);\n-            if len == INITIAL_CAPACITY {\n-                self.swap();\n-            }\n+            self.enqueue_enabled(message);\n         }\n     }\n+\n+    // Outline this fn since I expect it may want to be inlined\n+    // separately.\n+    fn enqueue_enabled(&self, message: DepMessage) {\n+        let len = self.messages.push(message);\n+        if len == INITIAL_CAPACITY {\n+            self.swap();\n+        }\n+    }\n+\n+    // Outline this too.\n+    fn invalid_message(&self, string: &str) {\n+        panic!(\"{}; see src/librustc/dep_graph/README.md for more information\", string)\n+    }\n }\n \n /// Definition of the depgraph thread."}]}