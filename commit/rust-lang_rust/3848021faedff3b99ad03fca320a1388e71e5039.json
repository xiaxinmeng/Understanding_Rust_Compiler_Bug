{"sha": "3848021faedff3b99ad03fca320a1388e71e5039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NDgwMjFmYWVkZmYzYjk5YWQwM2ZjYTMyMGExMzg4ZTcxZTUwMzk=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-10T21:55:37Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-20T09:16:56Z"}, "message": "Make Cell and RefCell use Unsafe<T>", "tree": {"sha": "c43cca0b5ff79539da09c6a73ac87580eaafd247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43cca0b5ff79539da09c6a73ac87580eaafd247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3848021faedff3b99ad03fca320a1388e71e5039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3848021faedff3b99ad03fca320a1388e71e5039", "html_url": "https://github.com/rust-lang/rust/commit/3848021faedff3b99ad03fca320a1388e71e5039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3848021faedff3b99ad03fca320a1388e71e5039/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2", "html_url": "https://github.com/rust-lang/rust/commit/710f13f0ad8f41c4c3d5de96b0d96ee4dea4c8b2"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "5733504c0d189b2727cbf4fea9afba14eacec1b3", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3848021faedff3b99ad03fca320a1388e71e5039/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3848021faedff3b99ad03fca320a1388e71e5039/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=3848021faedff3b99ad03fca320a1388e71e5039", "patch": "@@ -17,10 +17,11 @@ use fmt;\n use kinds::{marker, Pod};\n use ops::{Deref, DerefMut, Drop};\n use option::{None, Option, Some};\n+use ty::Unsafe;\n \n /// A mutable memory location that admits only `Pod` data.\n pub struct Cell<T> {\n-    priv value: T,\n+    priv value: Unsafe<T>,\n     priv marker1: marker::InvariantType<T>,\n     priv marker2: marker::NoFreeze,\n     priv marker3: marker::NoShare,\n@@ -30,7 +31,7 @@ impl<T:Pod> Cell<T> {\n     /// Creates a new `Cell` containing the given value.\n     pub fn new(value: T) -> Cell<T> {\n         Cell {\n-            value: value,\n+            value: Unsafe{value: value, marker1: marker::InvariantType::<T>},\n             marker1: marker::InvariantType::<T>,\n             marker2: marker::NoFreeze,\n             marker3: marker::NoShare,\n@@ -40,14 +41,14 @@ impl<T:Pod> Cell<T> {\n     /// Returns a copy of the contained value.\n     #[inline]\n     pub fn get(&self) -> T {\n-        self.value\n+        unsafe{ *self.value.get() }\n     }\n \n     /// Sets the contained value.\n     #[inline]\n     pub fn set(&self, value: T) {\n         unsafe {\n-            *cast::transmute_mut(&self.value) = value\n+            *self.value.get() = value;\n         }\n     }\n }\n@@ -66,13 +67,13 @@ impl<T:Eq + Pod> Eq for Cell<T> {\n \n impl<T: fmt::Show> fmt::Show for Cell<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f.buf, r\"Cell \\{ value: {} \\}\", self.value)\n+        write!(f.buf, r\"Cell \\{ value: {} \\}\", unsafe{*&self.value.get()})\n     }\n }\n \n /// A mutable memory location with dynamically checked borrow rules\n pub struct RefCell<T> {\n-    priv value: T,\n+    priv value: Unsafe<T>,\n     priv borrow: BorrowFlag,\n     priv marker1: marker::InvariantType<T>,\n     priv marker2: marker::NoFreeze,\n@@ -94,15 +95,15 @@ impl<T> RefCell<T> {\n             marker2: marker::NoFreeze,\n             marker3: marker::NoPod,\n             marker4: marker::NoShare,\n-            value: value,\n+            value: Unsafe{value: value, marker1: marker::InvariantType::<T>},\n             borrow: UNUSED,\n         }\n     }\n \n     /// Consumes the `RefCell`, returning the wrapped value.\n     pub fn unwrap(self) -> T {\n         assert!(self.borrow == UNUSED);\n-        self.value\n+        unsafe{self.value.unwrap()}\n     }\n \n     unsafe fn as_mut<'a>(&'a self) -> &'a mut RefCell<T> {\n@@ -202,7 +203,7 @@ impl<T> RefCell<T> {\n     #[inline]\n     pub fn set(&self, value: T) {\n         let mut reference = self.borrow_mut();\n-        *reference.get() = value\n+        *reference.get() = value;\n     }\n }\n \n@@ -251,14 +252,14 @@ impl<'b, T> Ref<'b, T> {\n     /// Retrieve an immutable reference to the stored value.\n     #[inline]\n     pub fn get<'a>(&'a self) -> &'a T {\n-        &self.parent.value\n+        unsafe{ &*self.parent.value.get() }\n     }\n }\n \n impl<'b, T> Deref<T> for Ref<'b, T> {\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n-        &self.parent.value\n+        unsafe{ &*self.parent.value.get() }\n     }\n }\n \n@@ -279,21 +280,21 @@ impl<'b, T> RefMut<'b, T> {\n     /// Retrieve a mutable reference to the stored value.\n     #[inline]\n     pub fn get<'a>(&'a mut self) -> &'a mut T {\n-        &mut self.parent.value\n+        unsafe{ &mut *self.parent.value.get() }\n     }\n }\n \n impl<'b, T> Deref<T> for RefMut<'b, T> {\n     #[inline]\n     fn deref<'a>(&'a self) -> &'a T {\n-        &self.parent.value\n+        unsafe{ &*self.parent.value.get() }\n     }\n }\n \n impl<'b, T> DerefMut<T> for RefMut<'b, T> {\n     #[inline]\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n-        &mut self.parent.value\n+        unsafe{ &mut *self.parent.value.get() }\n     }\n }\n "}, {"sha": "f06ccad7a28538688263b3b7025604c00c59f68d", "filename": "src/libstd/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3848021faedff3b99ad03fca320a1388e71e5039/src%2Flibstd%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3848021faedff3b99ad03fca320a1388e71e5039/src%2Flibstd%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fty.rs?ref=3848021faedff3b99ad03fca320a1388e71e5039", "patch": "@@ -76,4 +76,8 @@ impl<T> Unsafe<T> {\n     /// Gets a mutable pointer to the wrapped value\n     #[inline]\n     pub unsafe fn get(&self) -> *mut T { cast::transmute(&self.value) }\n+\n+    /// Unwraps the value\n+    #[inline]\n+    pub unsafe fn unwrap(self) -> T { self.value }\n }"}]}