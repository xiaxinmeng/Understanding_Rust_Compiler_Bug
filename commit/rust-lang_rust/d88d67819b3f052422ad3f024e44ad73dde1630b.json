{"sha": "d88d67819b3f052422ad3f024e44ad73dde1630b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OGQ2NzgxOWIzZjA1MjQyMmFkM2YwMjRlNDRhZDczZGRlMTYzMGI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-12T10:29:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-04-13T14:32:23Z"}, "message": "Handle `Self::Type` in trait definitions when referring to own associated type\n\nIt was implemented for other generic parameters for the trait, but not for `Self`.", "tree": {"sha": "990564fefe3e9b907ea7dea59563703e2165c08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990564fefe3e9b907ea7dea59563703e2165c08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d88d67819b3f052422ad3f024e44ad73dde1630b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d88d67819b3f052422ad3f024e44ad73dde1630b", "html_url": "https://github.com/rust-lang/rust/commit/d88d67819b3f052422ad3f024e44ad73dde1630b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d88d67819b3f052422ad3f024e44ad73dde1630b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c388130f5ffbcbe7d3131213a24d12d02f769b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/c388130f5ffbcbe7d3131213a24d12d02f769b87", "html_url": "https://github.com/rust-lang/rust/commit/c388130f5ffbcbe7d3131213a24d12d02f769b87"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "7b5990a47cfed1478c9063774b551355de7e38b7", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d88d67819b3f052422ad3f024e44ad73dde1630b/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88d67819b3f052422ad3f024e44ad73dde1630b/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=d88d67819b3f052422ad3f024e44ad73dde1630b", "patch": "@@ -360,13 +360,23 @@ impl Ty {\n             },\n             Some(TypeNs::GenericParam(param_id)) => {\n                 let predicates = ctx.db.generic_predicates_for_param(param_id);\n-                predicates\n+                let mut traits_: Vec<_> = predicates\n                     .iter()\n                     .filter_map(|pred| match &pred.value {\n                         GenericPredicate::Implemented(tr) => Some(tr.trait_),\n                         _ => None,\n                     })\n-                    .collect()\n+                    .collect();\n+                // Handle `Self::Type` referring to own associated type in trait definitions\n+                if let GenericDefId::TraitId(trait_id) = param_id.parent {\n+                    let generics = generics(ctx.db.upcast(), trait_id.into());\n+                    if generics.params.types[param_id.local_id].provenance\n+                        == TypeParamProvenance::TraitSelf\n+                    {\n+                        traits_.push(trait_id);\n+                    }\n+                }\n+                traits_\n             }\n             _ => return Ty::Unknown,\n         };"}, {"sha": "d69115a2f527bd32e81e2bf046799a8d6aeb4923", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d88d67819b3f052422ad3f024e44ad73dde1630b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88d67819b3f052422ad3f024e44ad73dde1630b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=d88d67819b3f052422ad3f024e44ad73dde1630b", "patch": "@@ -451,8 +451,7 @@ pub mod str {\n \"#,\n     );\n \n-    // should be Option<char>, but currently not because of Chalk ambiguity problem\n-    assert_eq!(\"(Option<{unknown}>, Option<{unknown}>)\", super::type_at_pos(&db, pos));\n+    assert_eq!(\"(Option<char>, Option<char>)\", super::type_at_pos(&db, pos));\n }\n \n #[test]"}, {"sha": "d088bf3096e4c2d30a622ea7cf5c741d19dd23b9", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d88d67819b3f052422ad3f024e44ad73dde1630b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88d67819b3f052422ad3f024e44ad73dde1630b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=d88d67819b3f052422ad3f024e44ad73dde1630b", "patch": "@@ -1803,7 +1803,7 @@ fn test<T, U>() where T::Item: Trait2, T: Trait<U::Item>, U: Trait<()> {\n }\n \n #[test]\n-fn unselected_projection_on_trait_self() {\n+fn unselected_projection_on_impl_self() {\n     assert_snapshot!(infer(\n         r#\"\n //- /main.rs\n@@ -1843,6 +1843,30 @@ impl Trait for S2 {\n     \"###);\n }\n \n+#[test]\n+fn unselected_projection_on_trait_self() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait {\n+    type Item;\n+\n+    fn f(&self) -> Self::Item { loop {} }\n+}\n+\n+struct S;\n+impl Trait for S {\n+    type Item = u32;\n+}\n+\n+fn test() {\n+    S.f()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"u32\");\n+}\n+\n #[test]\n fn trait_impl_self_ty() {\n     let t = type_at("}]}