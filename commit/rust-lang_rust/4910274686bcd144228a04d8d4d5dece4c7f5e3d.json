{"sha": "4910274686bcd144228a04d8d4d5dece4c7f5e3d", "node_id": "C_kwDOAAsO6NoAKDQ5MTAyNzQ2ODZiY2QxNDQyMjhhMDRkOGQ0ZDVkZWNlNGM3ZjVlM2Q", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-03T02:21:12Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-02-03T11:46:16Z"}, "message": "Genericize to_int_unchecked", "tree": {"sha": "64bbdb903ffb61063195d55618fee1a49611d162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64bbdb903ffb61063195d55618fee1a49611d162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4910274686bcd144228a04d8d4d5dece4c7f5e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4910274686bcd144228a04d8d4d5dece4c7f5e3d", "html_url": "https://github.com/rust-lang/rust/commit/4910274686bcd144228a04d8d4d5dece4c7f5e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4910274686bcd144228a04d8d4d5dece4c7f5e3d/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf65de2ce331f428a174f4ade13f60c8654472f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf65de2ce331f428a174f4ade13f60c8654472f", "html_url": "https://github.com/rust-lang/rust/commit/ebf65de2ce331f428a174f4ade13f60c8654472f"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "41f64e972d950cd03a450aa09b01e29c5adc8d00", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4910274686bcd144228a04d8d4d5dece4c7f5e3d/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4910274686bcd144228a04d8d4d5dece4c7f5e3d/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=4910274686bcd144228a04d8d4d5dece4c7f5e3d", "patch": "@@ -1,6 +1,7 @@\n #![cfg_attr(not(feature = \"std\"), no_std)]\n #![feature(\n     const_fn_trait_bound,\n+    convert_float_to_int,\n     decl_macro,\n     platform_intrinsics,\n     repr_simd,"}, {"sha": "f1724cbc26337ac1a6d494c17eacd3723fb1699e", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4910274686bcd144228a04d8d4d5dece4c7f5e3d/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4910274686bcd144228a04d8d4d5dece4c7f5e3d/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=4910274686bcd144228a04d8d4d5dece4c7f5e3d", "patch": "@@ -1,9 +1,10 @@\n use crate::simd::intrinsics;\n-use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use core::convert::FloatToInt;\n \n macro_rules! implement {\n     {\n-        $type:ty, $int_type:ty\n+        $type:ty\n     } => {\n         impl<const LANES: usize> Simd<$type, LANES>\n         where\n@@ -19,12 +20,16 @@ macro_rules! implement {\n             /// * Not be infinite\n             /// * Be representable in the return type, after truncating off its fractional part\n             #[inline]\n-            pub unsafe fn to_int_unchecked(self) -> Simd<$int_type, LANES> {\n+            pub unsafe fn to_int_unchecked<I>(self) -> Simd<I, LANES>\n+            where\n+                $type: FloatToInt<I>,\n+                I: SimdElement,\n+            {\n                 unsafe { intrinsics::simd_cast(self) }\n             }\n         }\n     }\n }\n \n-implement! { f32, i32 }\n-implement! { f64, i64 }\n+implement! { f32 }\n+implement! { f64 }"}, {"sha": "537323292376043cf4794f66d6f982e607c5697d", "filename": "crates/core_simd/tests/round.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4910274686bcd144228a04d8d4d5dece4c7f5e3d/crates%2Fcore_simd%2Ftests%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4910274686bcd144228a04d8d4d5dece4c7f5e3d/crates%2Fcore_simd%2Ftests%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fround.rs?ref=4910274686bcd144228a04d8d4d5dece4c7f5e3d", "patch": "@@ -64,11 +64,11 @@ macro_rules! float_rounding_test {\n                     runner.run(\n                         &test_helpers::array::UniformArrayStrategy::new(-MAX_REPRESENTABLE_VALUE..MAX_REPRESENTABLE_VALUE),\n                         |x| {\n-                            let result_1 = unsafe { Vector::from_array(x).to_int_unchecked().to_array() };\n+                            let result_1 = unsafe { Vector::from_array(x).to_int_unchecked::<IntScalar>().to_array() };\n                             let result_2 = {\n-                                let mut result = [0; LANES];\n+                                let mut result: [IntScalar; LANES] = [0; LANES];\n                                 for (i, o) in x.iter().zip(result.iter_mut()) {\n-                                    *o = unsafe { i.to_int_unchecked() };\n+                                    *o = unsafe { i.to_int_unchecked::<IntScalar>() };\n                                 }\n                                 result\n                             };"}]}