{"sha": "174a92c39ae67243a775953781ad60044054b12f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NGE5MmMzOWFlNjcyNDNhNzc1OTUzNzgxYWQ2MDA0NDA1NGIxMmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-12T10:41:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:33:47Z"}, "message": "detect when the user passes Miri's flags the old way, and support this for now", "tree": {"sha": "be015047fb7674581c88084ba7d0acfcea0dd810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be015047fb7674581c88084ba7d0acfcea0dd810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/174a92c39ae67243a775953781ad60044054b12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/174a92c39ae67243a775953781ad60044054b12f", "html_url": "https://github.com/rust-lang/rust/commit/174a92c39ae67243a775953781ad60044054b12f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/174a92c39ae67243a775953781ad60044054b12f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93bedd0a0920be8c26704a27ea0b0c754e438a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93bedd0a0920be8c26704a27ea0b0c754e438a4f", "html_url": "https://github.com/rust-lang/rust/commit/93bedd0a0920be8c26704a27ea0b0c754e438a4f"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "deb5733485d738ef3f2d603cdb1afed658a032fe", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/174a92c39ae67243a775953781ad60044054b12f/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174a92c39ae67243a775953781ad60044054b12f/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=174a92c39ae67243a775953781ad60044054b12f", "patch": "@@ -12,28 +12,21 @@ use rustc_version::VersionMeta;\n \n const XARGO_MIN_VERSION: (u32, u32, u32) = (0, 3, 22);\n \n-const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates and tests in Miri\n+const CARGO_MIRI_HELP: &str = r#\"Runs binary crates and tests in Miri\n \n Usage:\n-    cargo miri [subcommand] [<cargo options>...] [--] [<miri options>...] [--] [<program/test suite options>...]\n+    cargo miri [subcommand] [<cargo options>...] [--] [<program/test suite options>...]\n \n Subcommands:\n-    run                      Run binaries (default)\n+    run                      Run binaries\n     test                     Run tests\n     setup                    Only perform automatic setup, but without asking questions (for getting a proper libstd)\n \n-Common options:\n-    -h, --help               Print this message\n-    --features               Features to compile for the package\n-    -V, --version            Print version info and exit\n-\n-Other [options] are the same as `cargo check`.  Everything after the first \"--\" is\n-passed verbatim to Miri, which will pass everything after the second \"--\" verbatim\n-to the interpreted program.\n+The cargo options are exactly the same as for `cargo run` and `cargo test`, respectively.\n \n Examples:\n-    cargo miri run -- -Zmiri-disable-stacked-borrows\n-    cargo miri test -- -- test-suite-filter\n+    cargo miri run\n+    cargo miri test -- test-suite-filter\n \"#;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -393,7 +386,7 @@ fn phase_cargo_miri(mut args: env::Args) {\n         Some(\"run\") => MiriCommand::Run,\n         Some(\"setup\") => MiriCommand::Setup,\n         // Invalid command.\n-        _ => show_error(format!(\"`cargo miri` must be immediately followed by `test`, `run`, or `setup`.\")),\n+        _ => show_error(format!(\"`cargo miri` supports the following subcommands: `run`, `test`, and `setup`.\")),\n     };\n     let verbose = has_arg_flag(\"-v\");\n \n@@ -424,8 +417,44 @@ fn phase_cargo_miri(mut args: env::Args) {\n         host\n     };\n \n-    // Forward all further arguments.\n-    cmd.args(args);\n+    // Forward all further arguments. We do some processing here because we want to\n+    // detect people still using the old way of passing flags to Miri\n+    // (`cargo miri -- -Zmiri-foo`).\n+    while let Some(arg) = args.next() {\n+        cmd.arg(&arg);\n+        if arg == \"--\" {\n+            // Check if the next argument starts with `-Zmiri`. If yes, we assume\n+            // this is an old-style invocation.\n+            if let Some(next_arg) = args.next() {\n+                if next_arg.starts_with(\"-Zmiri\") {\n+                    eprintln!(\n+                        \"WARNING: it seems like you are setting Miri's flags in `cargo miri` the old way,\\n\\\n+                        i.e., by passing them after the first `--`. This style is deprecated; please set\\n\\\n+                        the MIRIFLAGS environment variable instead. `cargo miri run/test` now interprets\\n\\\n+                        arguments the exact same way as `cargo run/test`.\"\n+                    );\n+                    // Old-style invocation. Turn these into MIRIFLAGS.\n+                    let mut miriflags = env::var(\"MIRIFLAGS\").unwrap_or_default();\n+                    miriflags.push(' ');\n+                    miriflags.push_str(&next_arg);\n+                    while let Some(further_arg) = args.next() {\n+                        if further_arg == \"--\" {\n+                            // End of the Miri flags!\n+                            break;\n+                        }\n+                        miriflags.push(' ');\n+                        miriflags.push_str(&further_arg);\n+                    }\n+                    env::set_var(\"MIRIFLAGS\", miriflags);\n+                    // Pass the remaining flags to cargo.\n+                    cmd.args(args);\n+                    break;\n+                }\n+                // Not a Miri argument after all, make sure we pass it to cargo.\n+                cmd.arg(next_arg);\n+            }\n+        }\n+    }\n \n     // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}]}