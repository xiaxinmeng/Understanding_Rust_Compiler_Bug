{"sha": "26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTViYjBhNGVmYmU4OTRkMzNjZGUzYzFiYzNmNzEyZmNmMzNjZGU=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-11T14:07:47Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-11T14:07:47Z"}, "message": "missing match arms add tests for match expression diverging", "tree": {"sha": "4faa3fbc998fb2fc7cba414f680d5207217d3075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4faa3fbc998fb2fc7cba414f680d5207217d3075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde", "html_url": "https://github.com/rust-lang/rust/commit/26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1338354ca7afae7088f84756ed103ea94ce82f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1338354ca7afae7088f84756ed103ea94ce82f9", "html_url": "https://github.com/rust-lang/rust/commit/d1338354ca7afae7088f84756ed103ea94ce82f9"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "4be08e9a385471a9db4b98e2c2b996970a40fad1", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=26e5bb0a4efbe894d33cde3c1bc3f712fcf33cde", "patch": "@@ -1386,6 +1386,42 @@ mod tests {\n         // we don't create a diagnostic).\n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn expr_diverges() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match loop {} {\n+                    Either::A => (),\n+                    Either::B => (),\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn expr_loop_with_break() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match loop { break Foo::A } {\n+                    Either::A => (),\n+                    Either::B => (),\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n }\n \n #[cfg(test)]\n@@ -1455,4 +1491,45 @@ mod false_negatives {\n         // We do not currently handle patterns with internal `or`s.\n         check_no_diagnostic(content);\n     }\n+\n+    #[test]\n+    fn expr_diverges_missing_arm() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match loop {} {\n+                    Either::A => (),\n+                }\n+            }\n+        \";\n+\n+        // This is a false negative.\n+        // Even though the match expression diverges, rustc fails\n+        // to compile here since `Either::B` is missing.\n+        check_no_diagnostic(content);\n+    }\n+\n+    #[test]\n+    fn expr_loop_missing_arm() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match loop { break Foo::A } {\n+                    Either::A => (),\n+                }\n+            }\n+        \";\n+\n+        // This is a false negative.\n+        // We currently infer the type of `loop { break Foo::A }` to `!`, which\n+        // causes us to skip the diagnostic since `Either::A` doesn't type check\n+        // with `!`.\n+        check_no_diagnostic(content);\n+    }\n }"}]}