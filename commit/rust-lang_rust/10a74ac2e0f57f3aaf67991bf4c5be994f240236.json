{"sha": "10a74ac2e0f57f3aaf67991bf4c5be994f240236", "node_id": "C_kwDOAAsO6NoAKDEwYTc0YWMyZTBmNTdmM2FhZjY3OTkxYmY0YzViZTk5NGYyNDAyMzY", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-12T13:14:11Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:24Z"}, "message": "Use a more accurate `Span` for `'static` obligation from return type", "tree": {"sha": "9bba5012f3530840f58c293e9ced0961a4551419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bba5012f3530840f58c293e9ced0961a4551419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a74ac2e0f57f3aaf67991bf4c5be994f240236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a74ac2e0f57f3aaf67991bf4c5be994f240236", "html_url": "https://github.com/rust-lang/rust/commit/10a74ac2e0f57f3aaf67991bf4c5be994f240236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a74ac2e0f57f3aaf67991bf4c5be994f240236/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0fd105d86f4998a341b9a819735f1087423492", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0fd105d86f4998a341b9a819735f1087423492", "html_url": "https://github.com/rust-lang/rust/commit/ee0fd105d86f4998a341b9a819735f1087423492"}], "stats": {"total": 164, "additions": 85, "deletions": 79}, "files": [{"sha": "80bdccd4f2cf16bf152492642591b3bafc122f6c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -10,7 +10,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, ErasedMap, NestedVisitorMap, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, AssocItemContainer, RegionKind, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n@@ -186,10 +187,27 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 let parent_id = tcx.hir().get_parent_item(*hir_id);\n                 if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(parent_id) {\n                     let mut span: MultiSpan = fn_decl.output.span().into();\n-                    span.push_span_label(\n-                        fn_decl.output.span(),\n-                        \"requirement introduced by this return type\".to_string(),\n-                    );\n+                    let mut add_label = true;\n+                    if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+                        let mut v = StaticLifetimeVisitor(vec![], tcx.hir());\n+                        v.visit_ty(ty);\n+                        if !v.0.is_empty() {\n+                            span = v.0.clone().into();\n+                            for sp in v.0 {\n+                                span.push_span_label(\n+                                    sp,\n+                                    \"`'static` requirement introduced here\".to_string(),\n+                                );\n+                            }\n+                            add_label = false;\n+                        }\n+                    }\n+                    if add_label {\n+                        span.push_span_label(\n+                            fn_decl.output.span(),\n+                            \"requirement introduced by this return type\".to_string(),\n+                        );\n+                    }\n                     span.push_span_label(\n                         cause.span,\n                         \"because of this returned expression\".to_string(),"}, {"sha": "0bf457ca8a8247d27416e636d883c9e9684b6a2e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -1481,40 +1481,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         scope_def_id: LocalDefId,\n     ) -> Vec<&'tcx hir::Ty<'tcx>> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n-        let hir_output = match self.hir().get(hir_id) {\n-            Node::Item(hir::Item {\n-                kind:\n-                    ItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        ..,\n-                    ),\n-                ..\n-            })\n-            | Node::ImplItem(hir::ImplItem {\n-                kind:\n-                    hir::ImplItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        _,\n-                    ),\n-                ..\n-            })\n-            | Node::TraitItem(hir::TraitItem {\n-                kind:\n-                    hir::TraitItemKind::Fn(\n-                        hir::FnSig {\n-                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n-                            ..\n-                        },\n-                        _,\n-                    ),\n-                ..\n-            }) => ty,\n+        let hir_output = match self.hir().fn_decl_by_hir_id(hir_id) {\n+            Some(hir::FnDecl { output: hir::FnRetTy::Return(ty), .. }) => ty,\n             _ => return vec![],\n         };\n "}, {"sha": "1acb3ec57dea6e943533eb0d401f7ea5b4633f8c", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n+use rustc_span::Span;\n \n impl<'tcx> TyS<'tcx> {\n     /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n@@ -432,3 +433,22 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n         hir::intravisit::walk_ty(self, ty);\n     }\n }\n+\n+/// Collect al types that have an implicit `'static` obligation that we could suggest `'_` for.\n+pub struct StaticLifetimeVisitor<'tcx>(pub Vec<Span>, pub crate::hir::map::Map<'tcx>);\n+\n+impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n+    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+        hir::intravisit::NestedVisitorMap::None\n+    }\n+\n+    fn visit_lifetime(&mut self, lt: &'v hir::Lifetime) {\n+        if let hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static =\n+            lt.name\n+        {\n+            self.0.push(lt.span);\n+        }\n+    }\n+}"}, {"sha": "628023ad4710d59e7568b363d9b496e5565429fd", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -8,10 +8,10 @@ LL |     bar(foo, x)\n    |         ^^^  - ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/project-fn-ret-invariant.rs:45:32\n+  --> $DIR/project-fn-ret-invariant.rs:45:37\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n-   |                                ^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                     ^^^^^^^ `'static` requirement introduced here\n ...\n LL |     bar(foo, x)\n    |     ----------- because of this returned expression"}, {"sha": "bf1f93aebd55ae017b8eb75b84385a9b7aeb024a", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -141,12 +141,12 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:14:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:14:28\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                        ^^^^^^^^^^^^^^   ----------- because of this returned expression\n-   |                        |\n-   |                        requirement introduced by this return type\n+   |                            ^^^^^^^^^    ----------- because of this returned expression\n+   |                            |\n+   |                            `'static` requirement introduced here\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -161,12 +161,12 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     this data with lifetime `'a`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:33\n+  --> $DIR/must_outlive_least_region_or_bound.rs:16:37\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                                 ^^^^^^^^^^^^^^   ----------- because of this returned expression\n-   |                                 |\n-   |                                 requirement introduced by this return type\n+   |                                     ^^^^^^^^^    ----------- because of this returned expression\n+   |                                     |\n+   |                                     `'static` requirement introduced here\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n@@ -181,12 +181,12 @@ LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:40\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^   ----------- because of this returned expression\n-   |                        |\n-   |                        requirement introduced by this return type\n+   |                                        ^^^^^^^    ----------- because of this returned expression\n+   |                                        |\n+   |                                        `'static` requirement introduced here\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -203,12 +203,12 @@ LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:20:33\n+  --> $DIR/must_outlive_least_region_or_bound.rs:20:49\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^   ----------- because of this returned expression\n-   |                                 |\n-   |                                 requirement introduced by this return type\n+   |                                                 ^^^^^^^    ----------- because of this returned expression\n+   |                                                 |\n+   |                                                 `'static` requirement introduced here\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }"}, {"sha": "0308ecf8f64fbe98c4284d68c7b2f11838e3ae8b", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -8,10 +8,10 @@ LL |     ss.r\n    |     ^^^^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/object-lifetime-default-from-box-error.rs:14:33\n+  --> $DIR/object-lifetime-default-from-box-error.rs:14:37\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n-   |                                 ^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                     ^^^^^^^^^^^^^ `'static` requirement introduced here\n ...\n LL |     ss.r\n    |     ---- because of this returned expression"}, {"sha": "74683f1439ae8bac8a79c21eced4f119abaa4a4d", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -24,10 +24,10 @@ LL |     Box::new(v)\n    |              ^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/region-object-lifetime-in-coercion.rs:12:19\n+  --> $DIR/region-object-lifetime-in-coercion.rs:12:33\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                 ^^^^^^^ `'static` requirement introduced here\n LL |     Box::new(v)\n    |     ----------- because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n@@ -49,10 +49,10 @@ LL |     Box::new(v)\n    |              ^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/region-object-lifetime-in-coercion.rs:16:19\n+  --> $DIR/region-object-lifetime-in-coercion.rs:16:23\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n-   |                   ^^^^^^^^^^^^ requirement introduced by this return type\n+   |                       ^^^^^^^ `'static` requirement introduced here\n ...\n LL |     Box::new(v)\n    |     ----------- because of this returned expression"}, {"sha": "c914d91306c5863efa18e313a7b8f4d2286bfb8d", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -7,10 +7,10 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/regions-close-object-into-object-2.rs:8:48\n+  --> $DIR/regions-close-object-into-object-2.rs:8:60\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-   |                                                ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                            ^^^^^^^ `'static` requirement introduced here\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`"}, {"sha": "1f68db023a96bf3d77ba147f6cba69585034ce10", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -7,10 +7,10 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/regions-close-object-into-object-4.rs:8:40\n+  --> $DIR/regions-close-object-into-object-4.rs:8:52\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                    ^^^^^^^ `'static` requirement introduced here\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ------------------------------ because of this returned expression\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`"}, {"sha": "996576320355577f92e6c985dc5d513b182070ef", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -8,10 +8,10 @@ LL |     Box::new(move || { *x })\n    |              ^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/regions-proc-bound-capture.rs:7:30\n+  --> $DIR/regions-proc-bound-capture.rs:7:59\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                           ^^^^^^^ `'static` requirement introduced here\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n    |     ------------------------ because of this returned expression"}, {"sha": "42230ddd6955b2c207568fb17c8fcfe71f938930", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -47,10 +47,10 @@ note: ...and is required to live as long as `'static` here\n LL |     y.get_b() // ERROR\n    |     ^^^^^^^^^\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/type-checking-test-4.rs:26:40\n+  --> $DIR/type-checking-test-4.rs:26:48\n    |\n LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n ...\n LL |     y.get_b() // ERROR\n    |     --------- because of this returned expression\n@@ -64,10 +64,10 @@ LL |     <_ as Bar>::get_b(x) // ERROR\n    |     ^^^^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/type-checking-test-4.rs:32:40\n+  --> $DIR/type-checking-test-4.rs:32:48\n    |\n LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n LL |     <_ as Bar>::get_b(x) // ERROR\n    |     -------------------- because of this returned expression\n \n@@ -80,10 +80,10 @@ LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n    |     ----------^^------------- ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/type-checking-test-4.rs:37:40\n+  --> $DIR/type-checking-test-4.rs:37:48\n    |\n LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n    |     ---------------------------- because of this returned expression\n \n@@ -109,10 +109,10 @@ note: ...and is required to live as long as `'static` here\n LL |     z.get_b() // ERROR\n    |     ^^^^^^^^^\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/type-checking-test-4.rs:42:40\n+  --> $DIR/type-checking-test-4.rs:42:48\n    |\n LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n-   |                                        ^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                                                ^^^^^^^ `'static` requirement introduced here\n ...\n LL |     z.get_b() // ERROR\n    |     --------- because of this returned expression"}, {"sha": "b8552c872c11aa33bb508ef09ad52e7c39d76697", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a74ac2e0f57f3aaf67991bf4c5be994f240236/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=10a74ac2e0f57f3aaf67991bf4c5be994f240236", "patch": "@@ -10,10 +10,10 @@ LL |     Box::new(items.iter())\n    |              ...is captured and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/dyn-trait-underscore.rs:6:25\n+  --> $DIR/dyn-trait-underscore.rs:6:29\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ requirement introduced by this return type\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ `'static` requirement introduced here\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n    |     ---------------------- because of this returned expression"}]}