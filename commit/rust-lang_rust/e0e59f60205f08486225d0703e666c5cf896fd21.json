{"sha": "e0e59f60205f08486225d0703e666c5cf896fd21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZTU5ZjYwMjA1ZjA4NDg2MjI1ZDA3MDNlNjY2YzVjZjg5NmZkMjE=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-03T14:08:42Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-05-03T14:08:42Z"}, "message": "Simplify finiteness checking", "tree": {"sha": "49337c864060b9d9c6da3b9127de92d690ab6689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49337c864060b9d9c6da3b9127de92d690ab6689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e59f60205f08486225d0703e666c5cf896fd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e59f60205f08486225d0703e666c5cf896fd21", "html_url": "https://github.com/rust-lang/rust/commit/e0e59f60205f08486225d0703e666c5cf896fd21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e59f60205f08486225d0703e666c5cf896fd21/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d29554a8bf100d1a6c95eefb4cd258b4fd1605", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d29554a8bf100d1a6c95eefb4cd258b4fd1605", "html_url": "https://github.com/rust-lang/rust/commit/68d29554a8bf100d1a6c95eefb4cd258b4fd1605"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "b33b9666f7129bceade2eb6548ef9fb920139fb2", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e0e59f60205f08486225d0703e666c5cf896fd21/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e59f60205f08486225d0703e666c5cf896fd21/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=e0e59f60205f08486225d0703e666c5cf896fd21", "patch": "@@ -173,35 +173,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"frem_fast\" => mir::BinOp::Rem,\n                     _ => bug!(),\n                 };\n-                let a_valid = match a.layout.ty.kind() {\n-                    ty::Float(FloatTy::F32) => a.to_scalar()?.to_f32()?.is_finite(),\n-                    ty::Float(FloatTy::F64) => a.to_scalar()?.to_f64()?.is_finite(),\n-                    _ => bug!(\n-                        \"`{}` called with non-float input type {:?}\",\n+                let float_finite = |x: ImmTy<'tcx, _>| -> InterpResult<'tcx, bool> {\n+                    Ok(match x.layout.ty.kind() {\n+                        ty::Float(FloatTy::F32) => x.to_scalar()?.to_f32()?.is_finite(),\n+                        ty::Float(FloatTy::F64) => x.to_scalar()?.to_f64()?.is_finite(),\n+                        _ => bug!(\n+                            \"`{}` called with non-float input type {:?}\",\n+                            intrinsic_name,\n+                            x.layout.ty\n+                        ),\n+                    })\n+                };\n+                match (float_finite(a)?, float_finite(b)?) {\n+                    (false, false) => throw_ub_format!(\n+                        \"`{}` intrinsic called with non-finite value as both parameters\",\n                         intrinsic_name,\n-                        a.layout.ty\n                     ),\n-                };\n-                if !a_valid {\n-                    throw_ub_format!(\n+                    (false, _) => throw_ub_format!(\n                         \"`{}` intrinsic called with non-finite value as first parameter\",\n                         intrinsic_name,\n-                    );\n-                }\n-                let b_valid = match b.layout.ty.kind() {\n-                    ty::Float(FloatTy::F32) => b.to_scalar()?.to_f32()?.is_finite(),\n-                    ty::Float(FloatTy::F64) => b.to_scalar()?.to_f64()?.is_finite(),\n-                    _ => bug!(\n-                        \"`{}` called with non-float input type {:?}\",\n-                        intrinsic_name,\n-                        b.layout.ty\n                     ),\n-                };\n-                if !b_valid {\n-                    throw_ub_format!(\n+                    (_, false) => throw_ub_format!(\n                         \"`{}` intrinsic called with non-finite value as second parameter\",\n                         intrinsic_name,\n-                    );\n+                    ),\n+                    _ => {}\n                 }\n                 this.binop_ignore_overflow(op, &a, &b, dest)?;\n             }"}, {"sha": "844e4e95211f908bc83caaf6543141dc926e9c9e", "filename": "tests/compile-fail/fast_math_both.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e59f60205f08486225d0703e666c5cf896fd21/tests%2Fcompile-fail%2Ffast_math_both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e59f60205f08486225d0703e666c5cf896fd21/tests%2Fcompile-fail%2Ffast_math_both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffast_math_both.rs?ref=e0e59f60205f08486225d0703e666c5cf896fd21", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2); //~ ERROR `frem_fast` intrinsic called with non-finite value as first parameter\n+        let _x: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN); //~ ERROR `fsub_fast` intrinsic called with non-finite value as both parameters\n     }\n }"}, {"sha": "470ebe620050ffb95ee881916193d248cbc7a83c", "filename": "tests/compile-fail/fast_math_first.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e59f60205f08486225d0703e666c5cf896fd21/tests%2Fcompile-fail%2Ffast_math_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e59f60205f08486225d0703e666c5cf896fd21/tests%2Fcompile-fail%2Ffast_math_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffast_math_first.rs?ref=e0e59f60205f08486225d0703e666c5cf896fd21", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        let _x: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN); //~ ERROR `fsub_fast` intrinsic called with non-finite value as first parameter\n+        let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2); //~ ERROR `frem_fast` intrinsic called with non-finite value as first parameter\n     }\n }"}]}