{"sha": "86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YzBiODVkYTk4YTNjNjllMGZjOTAxNGUzNmUxYzg4YmQzYWU4ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-17T03:51:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-17T03:51:35Z"}, "message": "Auto merge of #74395 - Mark-Simulacrum:stage0-next, r=pietroalbini\n\nBump version to 1.47\n\nThis also bumps to a more recent rustfmt version, just to keep us relatively up to date (though almost nothing has changed in rustfmt we use beyond bumps to the parser infra). No formatting changes as a result of this.\n\nr? @pietroalbini", "tree": {"sha": "c3752892cdc43bf31324ebea11371fa503981bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3752892cdc43bf31324ebea11371fa503981bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "html_url": "https://github.com/rust-lang/rust/commit/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8534be72fc3b9c5f2f2dc4e4ee7b651a008e9a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8534be72fc3b9c5f2f2dc4e4ee7b651a008e9a3e", "html_url": "https://github.com/rust-lang/rust/commit/8534be72fc3b9c5f2f2dc4e4ee7b651a008e9a3e"}, {"sha": "8321b3fbe44b1edc9b6d012daeaf46ae2b6bc3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8321b3fbe44b1edc9b6d012daeaf46ae2b6bc3c8", "html_url": "https://github.com/rust-lang/rust/commit/8321b3fbe44b1edc9b6d012daeaf46ae2b6bc3c8"}], "stats": {"total": 100, "additions": 20, "deletions": 80}, "files": [{"sha": "51a9b0e0a52e14a853dd6b6edf32668da86b229b", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.46.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.47.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "68a3f369d16ebe1626662721f0911a04ae4206e3", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -159,13 +159,7 @@ fn copy_self_contained_objects(\n     compiler: &Compiler,\n     target: Interned<String>,\n ) -> Vec<(PathBuf, DependencyType)> {\n-    // cfg(bootstrap)\n-    // Remove when upgrading bootstrap compiler.\n-    let libdir_self_contained = if compiler.stage == 0 {\n-        builder.sysroot_libdir(*compiler, target).to_path_buf()\n-    } else {\n-        builder.sysroot_libdir(*compiler, target).join(\"self-contained\")\n-    };\n+    let libdir_self_contained = builder.sysroot_libdir(*compiler, target).join(\"self-contained\");\n     t!(fs::create_dir_all(&libdir_self_contained));\n     let mut target_deps = vec![];\n "}, {"sha": "436215839f7dd1d94177f4622321cf9f9d8efbd6", "filename": "src/ci/docker/host-x86_64/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -11,6 +11,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n+  zlib1g-dev \\\n+  lib32z1-dev \\\n   xz-utils\n \n "}, {"sha": "34a76f39668a727df3abf43ef3bb1e0691df42cb", "filename": "src/ci/docker/host-x86_64/i686-gnu/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -11,6 +11,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n+  zlib1g-dev \\\n+  lib32z1-dev \\\n   xz-utils\n \n "}, {"sha": "87aee950082e9cac6e217db63c3f4a0e901e2147", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -87,7 +87,6 @@\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(cow_is_borrowed)]\n #![feature(deque_range)]\n #![feature(dispatch_from_dyn)]"}, {"sha": "080760aa81f30013d37fd6f2f2ee7764530577be", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -1927,7 +1927,6 @@ extern \"rust-intrinsic\" {\n     /// The to-be-stabilized version of this intrinsic is\n     /// [`std::mem::variant_count`](../../std/mem/fn.variant_count.html)\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n-    #[cfg(not(bootstrap))]\n     pub fn variant_count<T>() -> usize;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `try_fn`\n@@ -1958,7 +1957,6 @@ extern \"rust-intrinsic\" {\n     /// Internal placeholder for injecting code coverage counters when the \"instrument-coverage\"\n     /// option is enabled. The placeholder is replaced with `llvm.instrprof.increment` during code\n     /// generation.\n-    #[cfg(not(bootstrap))]\n     #[lang = \"count_code_region\"]\n     pub fn count_code_region(index: u32, start_byte_pos: u32, end_byte_pos: u32);\n \n@@ -1968,7 +1966,6 @@ extern \"rust-intrinsic\" {\n     /// \"coverage map\", which is injected into the generated code, as additional data.\n     /// This marker identifies a code region and two other counters or counter expressions\n     /// whose sum is the number of times the code region was executed.\n-    #[cfg(not(bootstrap))]\n     pub fn coverage_counter_add(\n         index: u32,\n         left_index: u32,\n@@ -1980,7 +1977,6 @@ extern \"rust-intrinsic\" {\n     /// This marker identifies a code region and two other counters or counter expressions\n     /// whose difference is the number of times the code region was executed.\n     /// (See `coverage_counter_add` for more information.)\n-    #[cfg(not(bootstrap))]\n     pub fn coverage_counter_subtract(\n         index: u32,\n         left_index: u32,\n@@ -1992,17 +1988,14 @@ extern \"rust-intrinsic\" {\n     /// This marker identifies a code region to be added to the \"coverage map\" to indicate source\n     /// code that can never be reached.\n     /// (See `coverage_counter_add` for more information.)\n-    #[cfg(not(bootstrap))]\n     pub fn coverage_unreachable(start_byte_pos: u32, end_byte_pos: u32);\n \n     /// See documentation of `<*const T>::guaranteed_eq` for details.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_guaranteed_eq<T>(ptr: *const T, other: *const T) -> bool;\n \n     /// See documentation of `<*const T>::guaranteed_ne` for details.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg(not(bootstrap))]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n }\n "}, {"sha": "96436bb253df0c86f3dee44f0a06fab78f5f417d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -73,8 +73,6 @@\n #![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n-#![cfg_attr(bootstrap, feature(const_loop))]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n@@ -87,7 +85,7 @@\n #![feature(const_generics)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n-#![cfg_attr(not(bootstrap), feature(const_raw_ptr_comparison))]\n+#![feature(const_raw_ptr_comparison)]\n #![feature(const_result)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n@@ -121,13 +119,12 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![cfg_attr(not(bootstrap), feature(variant_count))]\n+#![feature(variant_count)]\n #![feature(doc_alias)]\n #![feature(mmx_target_feature)]\n #![feature(tbm_target_feature)]\n@@ -142,7 +139,7 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n+#![feature(const_fn_transmute)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit_slice)]\n@@ -293,7 +290,7 @@ pub mod primitive;\n )]\n // FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n-#[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n+#[allow(clashing_extern_declarations)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n mod core_arch;\n "}, {"sha": "d62de7617a00df5de0e4161462237247644e6a36", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -1037,7 +1037,6 @@ pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n /// assert_eq!(mem::variant_count::<Result<!, !>>(), 2);\n /// ```\n #[inline(always)]\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n pub const fn variant_count<T>() -> usize {"}, {"sha": "7392a678b0549277cb1efa95fbde7f52fd80455a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -21,14 +21,6 @@ macro_rules! try_opt {\n     };\n }\n \n-#[cfg(bootstrap)]\n-macro_rules! unlikely {\n-    ($e: expr) => {\n-        $e\n-    };\n-}\n-\n-#[cfg(not(bootstrap))]\n #[allow_internal_unstable(const_likely)]\n macro_rules! unlikely {\n     ($e: expr) => {\n@@ -1600,7 +1592,6 @@ $EndFeature, \"\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[allow(unused_attributes)]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n                  if self.is_negative() {\n@@ -1889,7 +1880,6 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[allow(unused_attributes)]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 if unlikely!(self == Self::MIN) {\n                     (Self::MIN, true)\n@@ -2182,7 +2172,6 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n             #[allow(unused_attributes)]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn abs(self) -> Self {"}, {"sha": "22a738d0bc1c0515c71e484aa7878d64a070052c", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -224,7 +224,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n #[must_use = \"closures are lazy and do nothing unless called\"]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n-    #[cfg_attr(not(bootstrap), lang = \"fn_once_output\")]\n+    #[lang = \"fn_once_output\"]\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n     type Output;\n "}, {"sha": "896ad740e1e692424a695f23fc0ca04576d326a8", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -324,7 +324,6 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[inline]\n-    #[cfg(not(bootstrap))]\n     pub const fn guaranteed_eq(self, other: *const T) -> bool\n     where\n         T: Sized,\n@@ -356,7 +355,6 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[inline]\n-    #[cfg(not(bootstrap))]\n     pub const fn guaranteed_ne(self, other: *const T) -> bool\n     where\n         T: Sized,"}, {"sha": "96856e7512cabdcf5cad84e732ad9de4f30c543c", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -305,7 +305,6 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[inline]\n-    #[cfg(not(bootstrap))]\n     pub const fn guaranteed_eq(self, other: *mut T) -> bool\n     where\n         T: Sized,\n@@ -337,7 +336,6 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     #[inline]\n-    #[cfg(not(bootstrap))]\n     pub const unsafe fn guaranteed_ne(self, other: *mut T) -> bool\n     where\n         T: Sized,"}, {"sha": "309a4ddb00657506181556b2c08dc3d3d34619ee", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -6233,14 +6233,8 @@ where\n             return false;\n         }\n \n-        #[cfg(bootstrap)]\n-        if self.as_ptr() == other.as_ptr() {\n-            return true;\n-        }\n-\n         // While performance would suffer if `guaranteed_eq` just returned `false`\n         // for all arguments, correctness and return value of this function are not affected.\n-        #[cfg(not(bootstrap))]\n         if self.as_ptr().guaranteed_eq(other.as_ptr()) {\n             return true;\n         }\n@@ -6259,14 +6253,8 @@ where\n             return false;\n         }\n \n-        #[cfg(bootstrap)]\n-        if self.as_ptr() == other.as_ptr() {\n-            return true;\n-        }\n-\n         // While performance would suffer if `guaranteed_eq` just returned `false`\n         // for all arguments, correctness and return value of this function are not affected.\n-        #[cfg(not(bootstrap))]\n         if self.as_ptr().guaranteed_eq(other.as_ptr()) {\n             return true;\n         }"}, {"sha": "cf52091f609edc90498e9e75bd5dd2954d485d1c", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -21,7 +21,7 @@\n use core::any::Any;\n \n #[rustc_std_internal_symbol]\n-#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n+#[allow(improper_ctypes_definitions)]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     unreachable!()\n }"}, {"sha": "72eab0763d8bcdf3e24122c64cc8e3e5bc2091cf", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -93,7 +93,7 @@ extern \"C\" {\n mod dwarf;\n \n #[rustc_std_internal_symbol]\n-#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n+#[allow(improper_ctypes_definitions)]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     Box::into_raw(imp::cleanup(payload))\n }"}, {"sha": "ca68db0b9f6474c70f7d81839c2601d21129a288", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -7,10 +7,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n #![feature(const_panic)]\n-#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n+#![feature(const_fn_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]"}, {"sha": "ab4eac9440b41ac3bdfc4fc720dab4a38aa9004c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "73d71063b23620931cd13ac56ea15e0c8b8e6df9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -5,7 +5,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n \n pub use emitter::ColorConfig;\n "}, {"sha": "37041923890cd3bf720dff2334b0d59c9b1ceeef", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -3,7 +3,6 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]"}, {"sha": "eaef4c7b54a625d05f72ce44e88acd074481f30d", "filename": "src/librustc_index/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_index%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_index%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -1,5 +1,4 @@\n #![feature(allow_internal_unstable)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(extend_one)]"}, {"sha": "0cd6585163c4e9ce2a6df197881ded29be98563e", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -17,7 +17,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_panic)]\n #![feature(extend_one)]\n #![feature(never_type)]"}, {"sha": "ab30d545edfc3111439c1ccdaf85c059da5d2981", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -34,7 +34,6 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "36300d9efee7f8f76a132f500c2474607c9104e5", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -15,7 +15,7 @@ pub struct RustString {\n \n /// Appending to a Rust string -- used by RawRustStringOstream.\n #[no_mangle]\n-#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n+#[allow(improper_ctypes_definitions)]\n pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(\n     sr: &RustString,\n     ptr: *const c_char,"}, {"sha": "b7dccb8d8ce6d3ef3aab403891855949f17bae76", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -27,10 +27,9 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n-#![cfg_attr(not(bootstrap), feature(const_fn_transmute))]\n+#![feature(const_fn_transmute)]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n #![feature(drain_filter)]\n@@ -42,7 +41,6 @@\n #![feature(or_patterns)]\n #![feature(range_is_empty)]\n #![feature(min_specialization)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![feature(trusted_len)]\n #![feature(stmt_expr_attributes)]\n #![feature(test)]"}, {"sha": "cd6c38997f18f6a7d843214aad8d2e2c00af0a81", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -10,8 +10,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n-#![cfg_attr(bootstrap, feature(const_loop))]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]"}, {"sha": "ed154b9dc6f11e86c68e5ca173d89ce7e18fd6ae", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "95b236ba1c9e4ee5de5d59f82fc2d5136aaf43e7", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -8,7 +8,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "e6e0bd5fe74d90df3eed3628f7b9f6da880eda2e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -2,7 +2,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![recursion_limit = \"256\"]\n \n use rustc_attr as attr;"}, {"sha": "b7615b25c4a6cb16bf3ab738f3b2a8cd1bf8c515", "filename": "src/librustc_query_system/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_query_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_query_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -1,6 +1,5 @@\n #![feature(bool_to_option)]\n #![feature(const_fn)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_panic)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]"}, {"sha": "9899569fa0ba924185017857aac5cf147307729e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![recursion_limit = \"256\"]\n \n mod dump_visitor;"}, {"sha": "666080028c10cfc0ab9c69b9d817eefc7e21cf1b", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(negative_impls)]"}, {"sha": "1d0dc660ee616ec37d5178ebad623d64958c1a7c", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -9,7 +9,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n-#![cfg_attr(bootstrap, feature(const_if_match))]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(nll)]"}, {"sha": "54fc35b20f7c95c76f7bff64e7321969d85b65a0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -320,7 +320,6 @@\n #![feature(toowned_clone_into)]\n #![feature(total_cmp)]\n #![feature(trace_macros)]\n-#![cfg_attr(bootstrap, feature(track_caller))]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(unsafe_block_in_unsafe_fn)]"}, {"sha": "9bc44a59482a029899da659c64720f9b3e9f8e9f", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -208,15 +208,15 @@ mod imp {\n         #[cfg(target_arch = \"aarch64\")]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel) -> NsId;\n-            #[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n+            #[allow(clashing_extern_declarations)]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, i: libc::c_ulong) -> NsId;\n         }\n \n         #[cfg(not(target_arch = \"aarch64\"))]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel, ...) -> NsId;\n-            #[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n+            #[allow(clashing_extern_declarations)]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }"}, {"sha": "4234ce4bac07dd84a56c8ef32ce2d17ec0ed8fb0", "filename": "src/stage0.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=86c0b85da98a3c69e0fc9014e36e1c88bd3ae8d7", "patch": "@@ -12,15 +12,15 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.(x+1).0` for Cargo where they were released on `date`.\n \n-date: 2020-06-16\n+date: 2020-07-16\n rustc: beta\n cargo: beta\n \n # We use a nightly rustfmt to format the source because it solves some\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-04-22\n+rustfmt: nightly-2020-07-12\n \n # When making a stable release the process currently looks like:\n #"}]}