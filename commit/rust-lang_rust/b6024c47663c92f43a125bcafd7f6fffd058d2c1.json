{"sha": "b6024c47663c92f43a125bcafd7f6fffd058d2c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MDI0YzQ3NjYzYzkyZjQzYTEyNWJjYWZkN2Y2ZmZmZDA1OGQyYzE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-11T15:36:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-11T15:36:55Z"}, "message": "Rollup merge of #68816 - estebank:fn-mut-closure, r=varkor\n\nTweak borrow error on `FnMut` when `Fn` is expected\n\nFix #31701, fix #66097.", "tree": {"sha": "afdb9449373dccbb428a45beb9e0c68c0cb20e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afdb9449373dccbb428a45beb9e0c68c0cb20e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6024c47663c92f43a125bcafd7f6fffd058d2c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQsoYCRBK7hj4Ov3rIwAAdHIIACt7+Irfv6UuCTjBOrKjJ/ig\nQ9kWYz+QQySyYD7FJHNzD/Ev1UiHhD9/naWUko2NlR71ToGUYyRvxd3dOT6O1rOh\niSeqfSjOYUW5vUX9ElKm8EyVtAZ/4vcUcj5aIWho5Q4UrVvVm8/qMuOPp/5Gvzxl\ntz5m22jDPRgu7cqnzDbkS0qCr5Zxkpc0lQtW+Bj+8HYrEbZ2VWphx2FX+iaPvmvg\nT1gGbGGiD2o4JU3JP821oUq6n4FMynlV2/+M38puDi3xgozJbZR7fRYFfYAsKwCZ\nkZga4EZblXdiHckH47qI9VSnpyOrDWhh1lu8Ir0ieWi/QcYZiLAjZz9+Xhk0LLU=\n=475o\n-----END PGP SIGNATURE-----\n", "payload": "tree afdb9449373dccbb428a45beb9e0c68c0cb20e64\nparent ec0cfd1d0150b3d9ba3d938b1d3d31cb6050524f\nparent d51f2bd9d76a493f321acd31c1a4c1eb35f254f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581435415 +0100\ncommitter GitHub <noreply@github.com> 1581435415 +0100\n\nRollup merge of #68816 - estebank:fn-mut-closure, r=varkor\n\nTweak borrow error on `FnMut` when `Fn` is expected\n\nFix #31701, fix #66097.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6024c47663c92f43a125bcafd7f6fffd058d2c1", "html_url": "https://github.com/rust-lang/rust/commit/b6024c47663c92f43a125bcafd7f6fffd058d2c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6024c47663c92f43a125bcafd7f6fffd058d2c1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0cfd1d0150b3d9ba3d938b1d3d31cb6050524f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0cfd1d0150b3d9ba3d938b1d3d31cb6050524f", "html_url": "https://github.com/rust-lang/rust/commit/ec0cfd1d0150b3d9ba3d938b1d3d31cb6050524f"}, {"sha": "d51f2bd9d76a493f321acd31c1a4c1eb35f254f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d51f2bd9d76a493f321acd31c1a4c1eb35f254f2", "html_url": "https://github.com/rust-lang/rust/commit/d51f2bd9d76a493f321acd31c1a4c1eb35f254f2"}], "stats": {"total": 605, "additions": 367, "deletions": 238}, "files": [{"sha": "d91f6edc9800c3063c3e13ad83fcc704227e488e", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 97, "deletions": 6, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -10,7 +10,7 @@ use rustc_span::Span;\n use crate::borrow_check::diagnostics::BorrowedContentSource;\n use crate::borrow_check::MirBorrowckCtxt;\n use crate::util::collect_writes::FindAssignments;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum AccessKind {\n@@ -412,11 +412,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: [ProjectionElem::Deref],\n                 // FIXME document what is this 1 magic number about\n             } if local == Local::new(1) && !self.upvars.is_empty() => {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_help(\n-                    self.body.span,\n-                    \"consider changing this to accept closures that implement `FnMut`\",\n-                );\n+                self.expected_fn_found_fn_mut_call(&mut err, span, act);\n             }\n \n             PlaceRef { local: _, projection: [.., ProjectionElem::Deref] } => {\n@@ -448,6 +444,101 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         err.buffer(&mut self.errors_buffer);\n     }\n+\n+    /// Targetted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n+    fn expected_fn_found_fn_mut_call(&self, err: &mut DiagnosticBuilder<'_>, sp: Span, act: &str) {\n+        err.span_label(sp, format!(\"cannot {}\", act));\n+\n+        let hir = self.infcx.tcx.hir();\n+        let closure_id = hir.as_local_hir_id(self.mir_def_id).unwrap();\n+        let fn_call_id = hir.get_parent_node(closure_id);\n+        let node = hir.get(fn_call_id);\n+        let item_id = hir.get_parent_item(fn_call_id);\n+        let mut look_at_return = true;\n+        // If we can detect the expression to be an `fn` call where the closure was an argument,\n+        // we point at the `fn` definition argument...\n+        match node {\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Call(func, args), .. }) => {\n+                let arg_pos = args\n+                    .iter()\n+                    .enumerate()\n+                    .filter(|(_, arg)| arg.span == self.body.span)\n+                    .map(|(pos, _)| pos)\n+                    .next();\n+                let def_id = hir.local_def_id(item_id);\n+                let tables = self.infcx.tcx.typeck_tables_of(def_id);\n+                if let Some(ty::FnDef(def_id, _)) =\n+                    tables.node_type_opt(func.hir_id).as_ref().map(|ty| &ty.kind)\n+                {\n+                    let arg = match hir.get_if_local(*def_id) {\n+                        Some(hir::Node::Item(hir::Item {\n+                            ident,\n+                            kind: hir::ItemKind::Fn(sig, ..),\n+                            ..\n+                        }))\n+                        | Some(hir::Node::TraitItem(hir::TraitItem {\n+                            ident,\n+                            kind: hir::TraitItemKind::Method(sig, _),\n+                            ..\n+                        }))\n+                        | Some(hir::Node::ImplItem(hir::ImplItem {\n+                            ident,\n+                            kind: hir::ImplItemKind::Method(sig, _),\n+                            ..\n+                        })) => Some(\n+                            arg_pos\n+                                .and_then(|pos| {\n+                                    sig.decl.inputs.get(\n+                                        pos + if sig.decl.implicit_self.has_implicit_self() {\n+                                            1\n+                                        } else {\n+                                            0\n+                                        },\n+                                    )\n+                                })\n+                                .map(|arg| arg.span)\n+                                .unwrap_or(ident.span),\n+                        ),\n+                        _ => None,\n+                    };\n+                    if let Some(span) = arg {\n+                        err.span_label(span, \"change this to accept `FnMut` instead of `Fn`\");\n+                        err.span_label(func.span, \"expects `Fn` instead of `FnMut`\");\n+                        if self.infcx.tcx.sess.source_map().is_multiline(self.body.span) {\n+                            err.span_label(self.body.span, \"in this closure\");\n+                        }\n+                        look_at_return = false;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        if look_at_return && hir.get_return_block(closure_id).is_some() {\n+            // ...otherwise we are probably in the tail expression of the function, point at the\n+            // return type.\n+            match hir.get(hir.get_parent_item(fn_call_id)) {\n+                hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(sig, ..), .. })\n+                | hir::Node::TraitItem(hir::TraitItem {\n+                    ident,\n+                    kind: hir::TraitItemKind::Method(sig, _),\n+                    ..\n+                })\n+                | hir::Node::ImplItem(hir::ImplItem {\n+                    ident,\n+                    kind: hir::ImplItemKind::Method(sig, _),\n+                    ..\n+                }) => {\n+                    err.span_label(ident.span, \"\");\n+                    err.span_label(\n+                        sig.decl.output.span(),\n+                        \"change this to return `FnMut` instead of `Fn`\",\n+                    );\n+                    err.span_label(self.body.span, \"in this closure\");\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n }\n \n fn suggest_ampmut_self<'tcx>("}, {"sha": "62e27bcf1643f5ca1d8b7913155960ed1e3baa99", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.rs?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -18,7 +18,10 @@ fn main() {\n         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n \n         let mut z = 0;\n-        let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+        let _h = to_fn_mut(|| {\n+            set(&mut z);\n+            to_fn(|| z = 42); //~ ERROR cannot assign\n+        });\n     }\n \n     // By-value captures\n@@ -33,3 +36,19 @@ fn main() {\n         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n     }\n }\n+\n+fn foo() -> Box<dyn Fn() -> usize> {\n+    let mut x = 0;\n+    Box::new(move || {\n+        x += 1; //~ ERROR cannot assign\n+        x\n+    })\n+}\n+\n+fn bar() -> impl Fn() -> usize {\n+    let mut x = 0;\n+    move || {\n+        x += 1; //~ ERROR cannot assign\n+        x\n+    }\n+}"}, {"sha": "3046b047d00f6eea0268cdbfd02472ab24bf2490", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 70, "deletions": 49, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -1,76 +1,97 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _f = to_fn(|| x = 42);\n-   |                           ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n-   |\n-LL |         let _f = to_fn(|| x = 42);\n-   |                        ^^^^^^^^^\n+   |                  -----    ^^^^^^ cannot assign\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _g = to_fn(|| set(&mut y));\n-   |                               ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n-   |\n-LL |         let _g = to_fn(|| set(&mut y));\n-   |                        ^^^^^^^^^^^^^^\n+   |                  -----        ^^^^^^ cannot borrow as mutable\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n-   |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                       ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n-   |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                    ^^^^^^^^^\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:23:22\n+   |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n+LL |             to_fn(|| z = 42);\n+   |             -----    ^^^^^^ cannot assign\n+   |             |\n+   |             expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n-   |\n-LL |         let _f = to_fn(move || x = 42);\n-   |                                ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:30:32\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _f = to_fn(move || x = 42);\n-   |                        ^^^^^^^^^^^^^^\n+   |                  -----         ^^^^^^ cannot assign\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:36\n-   |\n-LL |         let _g = to_fn(move || set(&mut y));\n-   |                                    ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:33:36\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _g = to_fn(move || set(&mut y));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                  -----             ^^^^^^ cannot borrow as mutable\n+   |                  |\n+   |                  expects `Fn` instead of `FnMut`\n \n error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:36:65\n    |\n+LL | fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                        - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                                 ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n-   |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                         ^^^^^^^^^^^^^^\n+   |                                                   -----         ^^^^^^ cannot assign\n+   |                                                   |\n+   |                                                   expects `Fn` instead of `FnMut`\n+\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:43:9\n+   |\n+LL |   fn foo() -> Box<dyn Fn() -> usize> {\n+   |      ---      ---------------------- change this to return `FnMut` instead of `Fn`\n+LL |       let mut x = 0;\n+LL |       Box::new(move || {\n+   |  ______________-\n+LL | |         x += 1;\n+   | |         ^^^^^^ cannot assign\n+LL | |         x\n+LL | |     })\n+   | |_____- in this closure\n+\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:51:9\n+   |\n+LL |   fn bar() -> impl Fn() -> usize {\n+   |      ---      ------------------ change this to return `FnMut` instead of `Fn`\n+LL |       let mut x = 0;\n+LL | /     move || {\n+LL | |         x += 1;\n+   | |         ^^^^^^ cannot assign\n+LL | |         x\n+LL | |     }\n+   | |_____- in this closure\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "44dde0fd80b0da01157c3e323868d75e0b4ba16a", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -27,32 +27,32 @@ LL |     f();\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:29:17\n    |\n-LL |         let y = &raw mut x;\n-   |                 ^^^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-raw-address-of-mutability.rs:28:21\n-   |\n+LL |   fn make_fn<F: Fn()>(f: F) -> F { f }\n+   |                          - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       let f = make_fn(|| {\n-   |  _____________________^\n+   |  _____________-------_-\n+   | |             |\n+   | |             expects `Fn` instead of `FnMut`\n LL | |         let y = &raw mut x;\n+   | |                 ^^^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:37:17\n    |\n-LL |         let y = &raw mut x;\n-   |                 ^^^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-raw-address-of-mutability.rs:36:21\n-   |\n+LL |   fn make_fn<F: Fn()>(f: F) -> F { f }\n+   |                          - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       let f = make_fn(move || {\n-   |  _____________________^\n+   |  _____________-------_-\n+   | |             |\n+   | |             expects `Fn` instead of `FnMut`\n LL | |         let y = &raw mut x;\n+   | |                 ^^^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5361ebe3916d712d5170d6ff8a6899a2ce487dfc", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -119,146 +119,146 @@ LL |     &mut (*f()).0;\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |         x = (1,);\n-   |         ^^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n+   | |         ^^^^^^^^ cannot assign\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |         x.0 = 1;\n-   |         ^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n+   | |         ^^^^^^^ cannot assign\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:42:9\n    |\n-LL |         &mut x;\n-   |         ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n+   | |         ^^^^^^ cannot borrow as mutable\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:43:9\n    |\n-LL |         &mut x.0;\n-   |         ^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:39:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n+   | |         ^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |         x = (1,);\n-   |         ^^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n+   | |         ^^^^^^^^ cannot assign\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |         x.0 = 1;\n-   |         ^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n+   | |         ^^^^^^^ cannot assign\n LL | |         &mut x;\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/mutability-errors.rs:48:9\n    |\n-LL |         &mut x;\n-   |         ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n+   | |         ^^^^^^ cannot borrow as mutable\n LL | |         &mut x.0;\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n   --> $DIR/mutability-errors.rs:49:9\n    |\n-LL |         &mut x.0;\n-   |         ^^^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/mutability-errors.rs:45:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         x = (1,);\n LL | |         x.0 = 1;\n LL | |         &mut x;\n LL | |         &mut x.0;\n+   | |         ^^^^^^^^ cannot borrow as mutable\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:54:5"}, {"sha": "0e427b9cf318f1b5802eddd0391e7d673d524cfd", "filename": "src/test/ui/fn/fn-closure-mutable-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.rs?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -1,11 +1,11 @@\n-pub fn bar<F: Fn()>(_f: F) {}\n+pub fn bar<F: Fn()>(_f: F) {} //~ NOTE change this to accept `FnMut` instead of `Fn`\n \n pub fn foo() {\n     let mut x = 0;\n     bar(move || x = 1);\n     //~^ ERROR cannot assign to `x`, as it is a captured variable in a `Fn` closure\n     //~| NOTE cannot assign\n-    //~| HELP consider changing this to accept closures that implement `FnMut`\n+    //~| NOTE expects `Fn` instead of `FnMut`\n }\n \n fn main() {}"}, {"sha": "d23c363ae1582182ab8f30b6a9df41f7d3573aaa", "filename": "src/test/ui/fn/fn-closure-mutable-capture.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-closure-mutable-capture.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -1,14 +1,13 @@\n error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/fn-closure-mutable-capture.rs:5:17\n    |\n+LL | pub fn bar<F: Fn()>(_f: F) {}\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |     bar(move || x = 1);\n-   |                 ^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/fn-closure-mutable-capture.rs:5:9\n-   |\n-LL |     bar(move || x = 1);\n-   |         ^^^^^^^^^^^^^\n+   |     ---         ^^^^^ cannot assign\n+   |     |\n+   |     expects `Fn` instead of `FnMut`\n \n error: aborting due to previous error\n "}, {"sha": "84c7106e89016b39f4938b9a50594d6f03135b53", "filename": "src/test/ui/issues/issue-21600.stderr", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -1,34 +1,33 @@\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:20\n    |\n+LL | fn call_it<F>(f: F) where F: Fn() { f(); }\n+   |                  - change this to accept `FnMut` instead of `Fn`\n+...\n LL |         call_it(|| x.gen_mut());\n-   |                    ^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/issue-21600.rs:14:17\n-   |\n-LL |         call_it(|| x.gen_mut());\n-   |                 ^^^^^^^^^^^^^^\n+   |         -------    ^ cannot borrow as mutable\n+   |         |\n+   |         expects `Fn` instead of `FnMut`\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:14:17\n    |\n-LL |         call_it(|| x.gen_mut());\n-   |                 ^^ - mutable borrow occurs due to use of `x` in closure\n-   |                 |\n-   |                 cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/issue-21600.rs:12:13\n-   |\n+LL |   fn call_it<F>(f: F) where F: Fn() { f(); }\n+   |                    - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       call_it(|| {\n-   |  _____________^\n+   |  _____-------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         call_it(|| x.gen());\n LL | |         call_it(|| x.gen_mut());\n+   | |                 ^^ - mutable borrow occurs due to use of `x` in closure\n+   | |                 |\n+   | |                 cannot borrow as mutable\n LL | |\n LL | |\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd5f32ef4f5818ada0ebca63c9fea0f43ef8ec7b", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -37,36 +37,36 @@ LL |         x = 1;\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:27:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |          x = 1;}\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:26:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |          x = 1;}\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:31:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |     x = 1;});\n-   |     - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:30:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |     x = 1;});\n-   | |___________^\n+   | |_____-_____- in this closure\n+   |       |\n+   |       mutable borrow occurs due to use of `x` in closure\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/closure-captures.rs:39:10\n@@ -80,19 +80,19 @@ LL |          x = 1;}\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:38:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |          x = 1;}\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:37:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |          x = 1;}\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/closure-captures.rs:43:5\n@@ -106,53 +106,53 @@ LL |     x = 1;});\n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:42:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |     x = 1;});\n-   |     - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:41:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |     x = 1;});\n-   | |___________^\n+   | |_____-_____- in this closure\n+   |       |\n+   |       mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:48:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |         *x = 1;});\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:47:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(|| {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |         *x = 1;});\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/closure-captures.rs:51:9\n    |\n-LL |         ||\n-   |         ^^ cannot borrow as mutable\n-LL |         *x = 1;});\n-   |          - mutable borrow occurs due to use of `x` in closure\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/closure-captures.rs:50:12\n-   |\n+LL |   fn fn_ref<F: Fn()>(f: F) -> F { f }\n+   |                         - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       fn_ref(move || {\n-   |  ____________^\n+   |  _____------_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         ||\n+   | |         ^^ cannot borrow as mutable\n LL | |         *x = 1;});\n-   | |________________^\n+   | |__________-_____- in this closure\n+   |            |\n+   |            mutable borrow occurs due to use of `x` in closure\n \n error: aborting due to 12 previous errors\n "}, {"sha": "48ec620d92ea7429dfe9cd072174bee2a72453b8", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -28,17 +28,17 @@ LL |         n += 1;\n error[E0594]: cannot assign to `n`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutate-upvar.rs:53:9\n    |\n-LL |         n += 1;\n-   |         ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/unboxed-closures-mutate-upvar.rs:52:23\n-   |\n+LL |   fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n+   |                          - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       let mut f = to_fn(move || {\n-   |  _______________________^\n+   |  _________________-----_-\n+   | |                 |\n+   | |                 expects `Fn` instead of `FnMut`\n LL | |         n += 1;\n+   | |         ^^^^^^ cannot assign\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to 4 previous errors\n "}, {"sha": "80e84fb7cad3f8e54b60366462951bccaf061091", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutated-upvar-from-fn-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6024c47663c92f43a125bcafd7f6fffd058d2c1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutated-upvar-from-fn-closure.stderr?ref=b6024c47663c92f43a125bcafd7f6fffd058d2c1", "patch": "@@ -1,18 +1,18 @@\n error[E0594]: cannot assign to `counter`, as it is a captured variable in a `Fn` closure\n   --> $DIR/unboxed-closures-mutated-upvar-from-fn-closure.rs:11:9\n    |\n-LL |         counter += 1;\n-   |         ^^^^^^^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/unboxed-closures-mutated-upvar-from-fn-closure.rs:10:10\n-   |\n+LL |   fn call<F>(f: F) where F : Fn() {\n+   |                 - change this to accept `FnMut` instead of `Fn`\n+...\n LL |       call(|| {\n-   |  __________^\n+   |  _____----_-\n+   | |     |\n+   | |     expects `Fn` instead of `FnMut`\n LL | |         counter += 1;\n+   | |         ^^^^^^^^^^^^ cannot assign\n LL | |\n LL | |     });\n-   | |_____^\n+   | |_____- in this closure\n \n error: aborting due to previous error\n "}]}