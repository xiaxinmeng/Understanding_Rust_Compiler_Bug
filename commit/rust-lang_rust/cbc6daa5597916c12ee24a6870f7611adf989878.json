{"sha": "cbc6daa5597916c12ee24a6870f7611adf989878", "node_id": "C_kwDOAAsO6NoAKGNiYzZkYWE1NTk3OTE2YzEyZWUyNGE2ODcwZjc2MTFhZGY5ODk4Nzg", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-05T13:59:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-05-05T19:33:44Z"}, "message": "Improve code to remove duplication", "tree": {"sha": "cba9af7d024d5f900e3415aba87a07887a0a6e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba9af7d024d5f900e3415aba87a07887a0a6e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc6daa5597916c12ee24a6870f7611adf989878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6daa5597916c12ee24a6870f7611adf989878", "html_url": "https://github.com/rust-lang/rust/commit/cbc6daa5597916c12ee24a6870f7611adf989878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6daa5597916c12ee24a6870f7611adf989878/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb160d5d3b30ad4a522149d309002fd76137b048", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb160d5d3b30ad4a522149d309002fd76137b048", "html_url": "https://github.com/rust-lang/rust/commit/fb160d5d3b30ad4a522149d309002fd76137b048"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "53b631b986d6ff8282819ab52574b0f61a95b980", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cbc6daa5597916c12ee24a6870f7611adf989878/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc6daa5597916c12ee24a6870f7611adf989878/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cbc6daa5597916c12ee24a6870f7611adf989878", "patch": "@@ -119,14 +119,25 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     });\n \n     let kind = ModuleItem(Module { items, span });\n-    let def_id = doc.def_id.to_def_id();\n+    generate_item_with_correct_attrs(cx, kind, doc.def_id, doc.name, doc.import_id, doc.renamed)\n+}\n+\n+fn generate_item_with_correct_attrs(\n+    cx: &mut DocContext<'_>,\n+    kind: ItemKind,\n+    local_def_id: LocalDefId,\n+    name: Symbol,\n+    import_id: Option<LocalDefId>,\n+    renamed: Option<Symbol>,\n+) -> Item {\n+    let def_id = local_def_id.to_def_id();\n     let target_attrs = inline::load_attrs(cx, def_id);\n-    let attrs = if let Some(import_id) = doc.import_id {\n+    let attrs = if let Some(import_id) = import_id {\n         let is_inline = inline::load_attrs(cx, import_id.to_def_id())\n             .lists(sym::doc)\n             .get_word_attr(sym::inline)\n             .is_some();\n-        let mut attrs = get_all_import_attributes(cx, import_id, doc.def_id, is_inline);\n+        let mut attrs = get_all_import_attributes(cx, import_id, local_def_id, is_inline);\n         add_without_unwanted_attributes(&mut attrs, target_attrs, is_inline, None);\n         attrs\n     } else {\n@@ -137,9 +148,9 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     let cfg = attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n     let attrs = Attributes::from_ast_iter(attrs.iter().map(|(attr, did)| (&**attr, *did)), false);\n \n-    let name = doc.renamed.or_else(|| Some(doc.name));\n+    let name = renamed.or(Some(name));\n     let mut item = Item::from_def_id_and_attrs_and_parts(def_id, name, kind, Box::new(attrs), cfg);\n-    item.inline_stmt_id = doc.import_id.map(|local| local.to_def_id());\n+    item.inline_stmt_id = import_id.map(|local| local.to_def_id());\n     item\n }\n \n@@ -2309,29 +2320,14 @@ fn clean_maybe_renamed_item<'tcx>(\n             _ => unreachable!(\"not yet converted\"),\n         };\n \n-        let target_attrs = inline::load_attrs(cx, def_id);\n-        let attrs = if let Some(import_id) = import_id {\n-            let is_inline = inline::load_attrs(cx, import_id.to_def_id())\n-                .lists(sym::doc)\n-                .get_word_attr(sym::inline)\n-                .is_some();\n-            let mut attrs =\n-                get_all_import_attributes(cx, import_id, item.owner_id.def_id, is_inline);\n-            add_without_unwanted_attributes(&mut attrs, target_attrs, is_inline, None);\n-            attrs\n-        } else {\n-            // We only keep the item's attributes.\n-            target_attrs.iter().map(|attr| (Cow::Borrowed(attr), None)).collect()\n-        };\n-\n-        let cfg = attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n-        let attrs =\n-            Attributes::from_ast_iter(attrs.iter().map(|(attr, did)| (&**attr, *did)), false);\n-\n-        let mut item =\n-            Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg);\n-        item.inline_stmt_id = import_id.map(|local| local.to_def_id());\n-        vec![item]\n+        vec![generate_item_with_correct_attrs(\n+            cx,\n+            kind,\n+            item.owner_id.def_id,\n+            name,\n+            import_id,\n+            renamed,\n+        )]\n     })\n }\n "}]}