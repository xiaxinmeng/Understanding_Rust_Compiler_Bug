{"sha": "a4cbbddc8e45ea4271636bc42fea8baf8bc51523", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0Y2JiZGRjOGU0NWVhNDI3MTYzNmJjNDJmZWE4YmFmOGJjNTE1MjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-03T13:27:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-03T13:27:23Z"}, "message": "merge parking test into general synchronization test", "tree": {"sha": "583154bda3afbdebc13f4d84abe1354c4b932dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583154bda3afbdebc13f4d84abe1354c4b932dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4cbbddc8e45ea4271636bc42fea8baf8bc51523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cbbddc8e45ea4271636bc42fea8baf8bc51523", "html_url": "https://github.com/rust-lang/rust/commit/a4cbbddc8e45ea4271636bc42fea8baf8bc51523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4cbbddc8e45ea4271636bc42fea8baf8bc51523/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b350c80a314b0b1a94fbfa2bb5d391df98388992", "url": "https://api.github.com/repos/rust-lang/rust/commits/b350c80a314b0b1a94fbfa2bb5d391df98388992", "html_url": "https://github.com/rust-lang/rust/commit/b350c80a314b0b1a94fbfa2bb5d391df98388992"}], "stats": {"total": 69, "additions": 30, "deletions": 39}, "files": [{"sha": "1ed742931fe6bf0bfbf02c85cc24cf1100f48fe9", "filename": "tests/run-pass/concurrency/parking.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Frun-pass%2Fconcurrency%2Fparking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Frun-pass%2Fconcurrency%2Fparking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fparking.rs?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -1,37 +0,0 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::thread;\n-use std::time::{Duration, Instant};\n-\n-// Normally, waiting in park/park_timeout may spuriously wake up early, but we\n-// know Miri's timed synchronization primitives do not do that.\n-\n-fn park_timeout() {\n-    let start = Instant::now();\n-\n-    thread::park_timeout(Duration::from_millis(200));\n-\n-    assert!((200..500).contains(&start.elapsed().as_millis()));\n-}\n-\n-fn park_unpark() {\n-    let t1 = thread::current();\n-    let t2 = thread::spawn(move || {\n-        thread::park();\n-        thread::sleep(Duration::from_millis(200));\n-        t1.unpark();\n-    });\n-\n-    let start = Instant::now();\n-\n-    t2.thread().unpark();\n-    thread::park();\n-\n-    assert!((200..500).contains(&start.elapsed().as_millis()));\n-}\n-\n-fn main() {\n-    park_timeout();\n-    park_unpark();\n-}"}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/concurrency/parking.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Frun-pass%2Fconcurrency%2Fparking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b350c80a314b0b1a94fbfa2bb5d391df98388992/tests%2Frun-pass%2Fconcurrency%2Fparking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fparking.stderr?ref=b350c80a314b0b1a94fbfa2bb5d391df98388992", "patch": "@@ -1,2 +0,0 @@\n-warning: thread support is experimental. For example, Miri does not detect data races yet.\n-"}, {"sha": "69943e5495e2ea0a96c5a118e72a04e955047879", "filename": "tests/run-pass/concurrency/sync.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a4cbbddc8e45ea4271636bc42fea8baf8bc51523/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4cbbddc8e45ea4271636bc42fea8baf8bc51523/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.rs?ref=a4cbbddc8e45ea4271636bc42fea8baf8bc51523", "patch": "@@ -312,6 +312,34 @@ fn check_rwlock_unlock_bug2() {\n     h.join().unwrap();\n }\n \n+fn park_timeout() {\n+    let start = Instant::now();\n+\n+    thread::park_timeout(Duration::from_millis(200));\n+    // Normally, waiting in park/park_timeout may spuriously wake up early, but we\n+    // know Miri's timed synchronization primitives do not do that.\n+\n+    assert!((200..500).contains(&start.elapsed().as_millis()));\n+}\n+\n+fn park_unpark() {\n+    let t1 = thread::current();\n+    let t2 = thread::spawn(move || {\n+        thread::park();\n+        thread::sleep(Duration::from_millis(200));\n+        t1.unpark();\n+    });\n+\n+    let start = Instant::now();\n+\n+    t2.thread().unpark();\n+    thread::park();\n+    // Normally, waiting in park/park_timeout may spuriously wake up early, but we\n+    // know Miri's timed synchronization primitives do not do that.\n+\n+    assert!((200..500).contains(&start.elapsed().as_millis()));\n+}\n+\n fn main() {\n     check_barriers();\n     check_conditional_variables_notify_one();\n@@ -327,4 +355,6 @@ fn main() {\n     check_once();\n     check_rwlock_unlock_bug1();\n     check_rwlock_unlock_bug2();\n+    park_timeout();\n+    park_unpark();\n }"}]}