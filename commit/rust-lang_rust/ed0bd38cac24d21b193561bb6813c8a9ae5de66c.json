{"sha": "ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMGJkMzhjYWMyNGQyMWIxOTM1NjFiYjY4MTNjOGE5YWU1ZGU2NmM=", "commit": {"author": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-08-03T22:05:05Z"}, "committer": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-08-24T02:06:07Z"}, "message": "Stabilize 'attr_literals' feature.", "tree": {"sha": "4d7d52a9357c9b095dd58e426082c864ee319ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7d52a9357c9b095dd58e426082c864ee319ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "html_url": "https://github.com/rust-lang/rust/commit/ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/comments", "author": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce5e0860634258205c313879cb81a125aef4fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5e0860634258205c313879cb81a125aef4fcb", "html_url": "https://github.com/rust-lang/rust/commit/5ce5e0860634258205c313879cb81a125aef4fcb"}], "stats": {"total": 294, "additions": 42, "deletions": 252}, "files": [{"sha": "6606f3c4e5c549c5789863165178cb13b5a1c9a0", "filename": "src/doc/unstable-book/src/language-features/attr-literals.md", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5e0860634258205c313879cb81a125aef4fcb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5e0860634258205c313879cb81a125aef4fcb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md?ref=5ce5e0860634258205c313879cb81a125aef4fcb", "patch": "@@ -1,30 +0,0 @@\n-# `attr_literals`\n-\n-The tracking issue for this feature is: [#34981]\n-\n-[#34981]: https://github.com/rust-lang/rust/issues/34981\n-\n-------------------------\n-\n-At present, literals are only accepted as the value of a key-value pair in\n-attributes. What's more, only _string_ literals are accepted. This means that\n-literals can only appear in forms of `#[attr(name = \"value\")]` or\n-`#[attr = \"value\"]`.\n-\n-The `attr_literals` unstable feature allows other types of literals to be used\n-in attributes. Here are some examples of attributes that can now be used with\n-this feature enabled:\n-\n-```rust,ignore\n-#[attr]\n-#[attr(true)]\n-#[attr(ident)]\n-#[attr(ident, 100, true, \"true\", ident = 100, ident = \"hello\", ident(100))]\n-#[attr(100)]\n-#[attr(enabled = true)]\n-#[enabled(true)]\n-#[attr(\"hello\")]\n-#[repr(C, align = 4)]\n-#[repr(C, align(4))]\n-```\n-"}, {"sha": "3a84f9e7e47ba03675da89abf666196db22bcc52", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(allocator_api)]\n #![feature(alloc_system)]\n-#![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(drain_filter)]"}, {"sha": "b2ffc9d77d771bcb32f8254fb093e66022105b75", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -77,7 +77,6 @@\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n-#![feature(attr_literals)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]"}, {"sha": "cae7b4a2862d6615692809f74fd7e5825abec148", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -4630,7 +4630,7 @@ field that requires non-trivial alignment.\n Erroneous code example:\n \n ```compile_fail,E0691\n-#![feature(repr_align, attr_literals)]\n+#![feature(repr_align)]\n \n #[repr(align(32))]\n struct ForceAlign32;\n@@ -4657,7 +4657,7 @@ Alternatively, `PhantomData<T>` has alignment 1 for all `T`, so you can use it\n if you need to keep the field for some reason:\n \n ```\n-#![feature(repr_align, attr_literals)]\n+#![feature(repr_align)]\n \n use std::marker::PhantomData;\n "}, {"sha": "8b4247167461056f0b1a66a4554dafb63482c77d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -244,7 +244,6 @@\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n-#![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]"}, {"sha": "23ce7fc6a65681bb10a90238a94410bae474839b", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -213,19 +213,18 @@ Delete the offending feature attribute.\n \"##,\n \n E0565: r##\"\n-A literal was used in an attribute that doesn't support literals.\n+A literal was used in a built-in attribute that doesn't support literals.\n \n Erroneous code example:\n \n ```ignore (compile_fail not working here; see Issue #43707)\n-#![feature(attr_literals)]\n-\n #[inline(\"always\")] // error: unsupported literal\n pub fn something() {}\n ```\n \n-Literals in attributes are new and largely unsupported. Work to support literals\n-where appropriate is ongoing. Try using an unquoted name instead:\n+Literals in attributes are new and largely unsupported in built-in attributes.\n+Work to support literals where appropriate is ongoing. Try using an unquoted\n+name instead:\n \n ```\n #[inline(always)]"}, {"sha": "4ed96d269061b7e25ab82cc749034081d16b403e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -289,9 +289,6 @@ declare_features! (\n     // Allows exhaustive pattern matching on types that contain uninhabited types\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n-    // Allows all literals in attribute lists and values of key-value pairs\n-    (active, attr_literals, \"1.13.0\", Some(34981), None),\n-\n     // Allows untagged unions `union U { ... }`\n     (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n@@ -654,6 +651,8 @@ declare_features! (\n     (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n     // Allows multi-segment paths in attributes and derives\n     (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n+    // Allows all literals in attribute lists and values of key-value pairs.\n+    (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1451,22 +1450,6 @@ impl<'a> PostExpansionVisitor<'a> {\n     }\n }\n \n-fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n-    use ast::MetaItemKind::*;\n-    use ast::NestedMetaItemKind::*;\n-\n-    match item.node {\n-        Word => false,\n-        NameValue(ref lit) => !lit.node.is_str(),\n-        List(ref list) => list.iter().any(|li| {\n-            match li.node {\n-                MetaItem(ref mi) => contains_novel_literal(mi),\n-                Literal(_) => true,\n-            }\n-        }),\n-    }\n-}\n-\n impl<'a> PostExpansionVisitor<'a> {\n     fn whole_crate_feature_gates(&mut self, _krate: &ast::Crate) {\n         for &(ident, span) in &*self.context.parse_sess.non_modrs_mods.borrow() {\n@@ -1526,28 +1509,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         if !self.context.features.unrestricted_attribute_tokens {\n-            // Unfortunately, `parse_meta` cannot be called speculatively because it can report\n-            // errors by itself, so we have to call it only if the feature is disabled.\n-            match attr.parse_meta(self.context.parse_sess) {\n-                Ok(meta) => {\n-                    // allow attr_literals in #[repr(align(x))] and #[repr(packed(n))]\n-                    let mut allow_attr_literal = false;\n-                    if attr.path == \"repr\" {\n-                        if let Some(content) = meta.meta_item_list() {\n-                            allow_attr_literal = content.iter().any(\n-                                |c| c.check_name(\"align\") || c.check_name(\"packed\"));\n-                        }\n-                    }\n-\n-                    if !allow_attr_literal && contains_novel_literal(&meta) {\n-                        gate_feature_post!(&self, attr_literals, attr.span,\n-                                        \"non-string literals in attributes, or string \\\n-                                        literals in top-level positions, are experimental\");\n-                    }\n-                }\n-                Err(mut err) => {\n-                    err.help(\"try enabling `#![feature(unrestricted_attribute_tokens)]`\").emit()\n-                }\n+            // Unfortunately, `parse_meta` cannot be called speculatively\n+            // because it can report errors by itself, so we have to call it\n+            // only if the feature is disabled.\n+            if let Err(mut err) = attr.parse_meta(self.context.parse_sess) {\n+                err.help(\"try enabling `#![feature(unrestricted_attribute_tokens)]`\").emit()\n             }\n         }\n     }"}, {"sha": "73aa31699630c8f1ea8a669db52c4af8557046cf", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -11,7 +11,7 @@\n // pp-exact\n // Tests literals in attributes.\n \n-#![feature(custom_attribute, attr_literals)]\n+#![feature(custom_attribute)]\n \n fn main() {\n     #![hello(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]"}, {"sha": "86d7cd54d973949b9f466e213ac09caca29c90f4", "filename": "src/test/run-pass-fulldeps/macro-crate-multi-decorator-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-multi-decorator-literals.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -11,7 +11,7 @@\n // aux-build:macro_crate_test.rs\n // ignore-stage1\n \n-#![feature(plugin, rustc_attrs, attr_literals)]\n+#![feature(plugin, rustc_attrs)]\n #![plugin(macro_crate_test)]\n \n #[macro_use]"}, {"sha": "6f89c5d377f54511501a1d12fce65cbee058094e", "filename": "src/test/run-pass/align-with-extern-c-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Frun-pass%2Falign-with-extern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Frun-pass%2Falign-with-extern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falign-with-extern-c-fn.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -11,7 +11,6 @@\n // #45662\n \n #![feature(repr_align)]\n-#![feature(attr_literals)]\n \n #[repr(align(16))]\n pub struct A(i64);"}, {"sha": "437907008777ad2fca85f7b5d998e2586606f320", "filename": "src/test/ui/attr-usage-repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n #![feature(repr_simd)]\n \n #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union"}, {"sha": "8d5e49a81f01cfc463e711d357f3a88eac909ba1", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -1,37 +1,37 @@\n error[E0517]: attribute should be applied to struct, enum or union\n-  --> $DIR/attr-usage-repr.rs:14:8\n+  --> $DIR/attr-usage-repr.rs:13:8\n    |\n LL | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n    |        ^\n LL | fn f() {}\n    | --------- not a struct, enum or union\n \n error[E0517]: attribute should be applied to enum\n-  --> $DIR/attr-usage-repr.rs:26:8\n+  --> $DIR/attr-usage-repr.rs:25:8\n    |\n LL | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n    |        ^^\n LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n error[E0517]: attribute should be applied to struct or union\n-  --> $DIR/attr-usage-repr.rs:32:8\n+  --> $DIR/attr-usage-repr.rs:31:8\n    |\n LL | #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n    |        ^^^^^^^^\n LL | enum EAlign { A, B }\n    | -------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct or union\n-  --> $DIR/attr-usage-repr.rs:35:8\n+  --> $DIR/attr-usage-repr.rs:34:8\n    |\n LL | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^^^\n LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct\n-  --> $DIR/attr-usage-repr.rs:38:8\n+  --> $DIR/attr-usage-repr.rs:37:8\n    |\n LL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^"}, {"sha": "d7cbb823013244696520876a6ed56379e354066a", "filename": "src/test/ui/error-codes/E0565-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n-\n // deprecated doesn't currently support literals\n #[deprecated(\"since\")] //~ ERROR E0565\n fn f() {  }"}, {"sha": "2a9bf92e9dd48fd7fec8beaaca4e5f7d7539a61a", "filename": "src/test/ui/error-codes/E0565-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -1,5 +1,5 @@\n error[E0565]: unsupported literal\n-  --> $DIR/E0565-1.rs:14:14\n+  --> $DIR/E0565-1.rs:12:14\n    |\n LL | #[deprecated(\"since\")] //~ ERROR E0565\n    |              ^^^^^^^"}, {"sha": "af8b10edab8a58fb84abfa3faba8cdb28697e2dc", "filename": "src/test/ui/error-codes/E0565.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n-\n // repr currently doesn't support literals\n #[repr(\"C\")] //~ ERROR E0565\n struct A {  }"}, {"sha": "abea4290f0a6861999ce0b3b231ff18c68b283d4", "filename": "src/test/ui/error-codes/E0565.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -1,5 +1,5 @@\n error[E0565]: unsupported literal\n-  --> $DIR/E0565.rs:14:8\n+  --> $DIR/E0565.rs:12:8\n    |\n LL | #[repr(\"C\")] //~ ERROR E0565\n    |        ^^^"}, {"sha": "ed8392ad7a3d1841a632fcfb1e8881d6db113807", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -10,7 +10,7 @@\n \n // Check that literals in attributes parse just fine.\n \n-#![feature(rustc_attrs, attr_literals)]\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "8d36745116b65b3b7e229833e9bd2a8cdcb123d0", "filename": "src/test/ui/gated-attr-literals.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5e0860634258205c313879cb81a125aef4fcb/src%2Ftest%2Fui%2Fgated-attr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5e0860634258205c313879cb81a125aef4fcb/src%2Ftest%2Fui%2Fgated-attr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-attr-literals.rs?ref=5ce5e0860634258205c313879cb81a125aef4fcb", "patch": "@@ -1,43 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Check that literals in attributes don't parse without the feature gate.\n-\n-// gate-test-attr_literals\n-\n-#![feature(custom_attribute)]\n-\n-#[fake_attr] // OK\n-#[fake_attr(100)]\n-    //~^ ERROR non-string literals in attributes\n-#[fake_attr(1, 2, 3)]\n-    //~^ ERROR non-string literals in attributes\n-#[fake_attr(\"hello\")]\n-    //~^ ERROR string literals in top-level positions, are experimental\n-#[fake_attr(name = \"hello\")] // OK\n-#[fake_attr(1, \"hi\", key = 12, true, false)]\n-    //~^ ERROR non-string literals in attributes, or string literals in top-level positions\n-#[fake_attr(key = \"hello\", val = 10)]\n-    //~^ ERROR non-string literals in attributes\n-#[fake_attr(key(\"hello\"), val(10))]\n-    //~^ ERROR non-string literals in attributes, or string literals in top-level positions\n-#[fake_attr(enabled = true, disabled = false)]\n-    //~^ ERROR non-string literals in attributes\n-#[fake_attr(true)]\n-    //~^ ERROR non-string literals in attributes\n-#[fake_attr(pi = 3.14159)]\n-    //~^ ERROR non-string literals in attributes\n-#[fake_attr(b\"hi\")]\n-    //~^ ERROR string literals in top-level positions, are experimental\n-#[fake_doc(r\"doc\")]\n-    //~^ ERROR string literals in top-level positions, are experimental\n-struct Q {  }\n-\n-fn main() { }"}, {"sha": "e69b6488599f9167c82e31c2f212a2627dc2c7ba", "filename": "src/test/ui/gated-attr-literals.stderr", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5e0860634258205c313879cb81a125aef4fcb/src%2Ftest%2Fui%2Fgated-attr-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5e0860634258205c313879cb81a125aef4fcb/src%2Ftest%2Fui%2Fgated-attr-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-attr-literals.stderr?ref=5ce5e0860634258205c313879cb81a125aef4fcb", "patch": "@@ -1,91 +0,0 @@\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:18:1\n-   |\n-LL | #[fake_attr(100)]\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:20:1\n-   |\n-LL | #[fake_attr(1, 2, 3)]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:22:1\n-   |\n-LL | #[fake_attr(\"hello\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:25:1\n-   |\n-LL | #[fake_attr(1, \"hi\", key = 12, true, false)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:27:1\n-   |\n-LL | #[fake_attr(key = \"hello\", val = 10)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:29:1\n-   |\n-LL | #[fake_attr(key(\"hello\"), val(10))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:31:1\n-   |\n-LL | #[fake_attr(enabled = true, disabled = false)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:33:1\n-   |\n-LL | #[fake_attr(true)]\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:35:1\n-   |\n-LL | #[fake_attr(pi = 3.14159)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:37:1\n-   |\n-LL | #[fake_attr(b\"hi\")]\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error[E0658]: non-string literals in attributes, or string literals in top-level positions, are experimental (see issue #34981)\n-  --> $DIR/gated-attr-literals.rs:39:1\n-   |\n-LL | #[fake_doc(r\"doc\")]\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(attr_literals)] to the crate attributes to enable\n-\n-error: aborting due to 11 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7875c16c0e496a3c03856fd8eb113959e48c603a", "filename": "src/test/ui/issues/issue-43925.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n-\n #[link(name=\"foo\", cfg(\"rlib\"))] //~ ERROR invalid argument for `cfg(..)`\n extern {}\n "}, {"sha": "e93ea9c7bc7a52f2f0969db2ae0bcb7d21fc148a", "filename": "src/test/ui/issues/issue-43925.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -1,5 +1,5 @@\n error: invalid argument for `cfg(..)`\n-  --> $DIR/issue-43925.rs:13:24\n+  --> $DIR/issue-43925.rs:11:24\n    |\n LL | #[link(name=\"foo\", cfg(\"rlib\"))] //~ ERROR invalid argument for `cfg(..)`\n    |                        ^^^^^^"}, {"sha": "f7a632dfaa1a012f744c9b2b3224a2571ded2c4d", "filename": "src/test/ui/parser/expected-comma-found-token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fparser%2Fexpected-comma-found-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fparser%2Fexpected-comma-found-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpected-comma-found-token.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -20,3 +20,5 @@\n )]\n trait T {}\n //~^^^ ERROR expected one of `)` or `,`, found `label`\n+\n+fn main() {  }"}, {"sha": "fa5f1a2f7fb80f1614f7d84c86d24265a058aa5c", "filename": "src/test/ui/repr/repr-transparent-other-reprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-reprs.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_align, attr_literals)]\n+#![feature(repr_align)]\n \n // See also repr-transparent.rs\n "}, {"sha": "230573247316edeee5186d10bdf80ea8923b5874", "filename": "src/test/ui/repr/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -13,7 +13,7 @@\n // - repr-transparent-other-reprs.rs\n // - repr-transparent-other-items.rs\n \n-#![feature(repr_align, attr_literals)]\n+#![feature(repr_align)]\n \n use std::marker::PhantomData;\n "}, {"sha": "35b43b4c460a428165b4613d94001a227185eb8f", "filename": "src/test/ui/rustc-args-required-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frustc-args-required-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frustc-args-required-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals, rustc_attrs, const_fn)]\n+#![feature(rustc_attrs, const_fn)]\n \n #[rustc_args_required_const(0)]\n fn foo(_a: i32) {"}, {"sha": "c4ca5a0ca5c5d68afecb3f66c2f75cedcfb7c915", "filename": "src/test/ui/rustc-args-required-const2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const2.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals, rustc_attrs, const_fn)]\n+#![feature(rustc_attrs, const_fn)]\n \n #[rustc_args_required_const(0)]\n fn foo(_a: i32) {"}, {"sha": "2e6c3994159cf82864ccd95925d35ecdf13777f4", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(attr_literals)]\n-\n #[path = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n #[path = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n #[path = 1u16] //~ ERROR: suffixed literals are not allowed in attributes"}, {"sha": "53ff60b0705e16ccefff7dd2d3f6809cb9f3722a", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0bd38cac24d21b193561bb6813c8a9ae5de66c/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=ed0bd38cac24d21b193561bb6813c8a9ae5de66c", "patch": "@@ -1,93 +1,93 @@\n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:13:10\n+  --> $DIR/suffixed-literal-meta.rs:11:10\n    |\n LL | #[path = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:14:10\n+  --> $DIR/suffixed-literal-meta.rs:12:10\n    |\n LL | #[path = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:15:10\n+  --> $DIR/suffixed-literal-meta.rs:13:10\n    |\n LL | #[path = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:16:10\n+  --> $DIR/suffixed-literal-meta.rs:14:10\n    |\n LL | #[path = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:17:10\n+  --> $DIR/suffixed-literal-meta.rs:15:10\n    |\n LL | #[path = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:18:10\n+  --> $DIR/suffixed-literal-meta.rs:16:10\n    |\n LL | #[path = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:19:10\n+  --> $DIR/suffixed-literal-meta.rs:17:10\n    |\n LL | #[path = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:20:10\n+  --> $DIR/suffixed-literal-meta.rs:18:10\n    |\n LL | #[path = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:21:10\n+  --> $DIR/suffixed-literal-meta.rs:19:10\n    |\n LL | #[path = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:22:10\n+  --> $DIR/suffixed-literal-meta.rs:20:10\n    |\n LL | #[path = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:23:10\n+  --> $DIR/suffixed-literal-meta.rs:21:10\n    |\n LL | #[path = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:24:10\n+  --> $DIR/suffixed-literal-meta.rs:22:10\n    |\n LL | #[path = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n    |          ^^^^^^"}]}