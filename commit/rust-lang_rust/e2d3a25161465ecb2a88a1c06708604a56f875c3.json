{"sha": "e2d3a25161465ecb2a88a1c06708604a56f875c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDNhMjUxNjE0NjVlY2IyYTg4YTFjMDY3MDg2MDRhNTZmODc1YzM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-11T05:24:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-11T05:24:32Z"}, "message": "Fix small typo\n\ntransmutting -> transmuting", "tree": {"sha": "db90e5325e3b16577f8adfb18970f7f8f363c736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db90e5325e3b16577f8adfb18970f7f8f363c736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d3a25161465ecb2a88a1c06708604a56f875c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3a25161465ecb2a88a1c06708604a56f875c3", "html_url": "https://github.com/rust-lang/rust/commit/e2d3a25161465ecb2a88a1c06708604a56f875c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3a25161465ecb2a88a1c06708604a56f875c3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d451f4b3bcbea68eb80856aeddf37af52991ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d451f4b3bcbea68eb80856aeddf37af52991ac", "html_url": "https://github.com/rust-lang/rust/commit/26d451f4b3bcbea68eb80856aeddf37af52991ac"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "ee90e9c54f69d4e484b112fbdd3b7435ec1491dd", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3a25161465ecb2a88a1c06708604a56f875c3/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3a25161465ecb2a88a1c06708604a56f875c3/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=e2d3a25161465ecb2a88a1c06708604a56f875c3", "patch": "@@ -78,7 +78,7 @@ impl ExprVisitor<'tcx> {\n                 return;\n             }\n \n-            // Special-case transmutting from `typeof(function)` and\n+            // Special-case transmuting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n             let from = unpack_option_like(self.tcx, from);\n             if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) {"}]}