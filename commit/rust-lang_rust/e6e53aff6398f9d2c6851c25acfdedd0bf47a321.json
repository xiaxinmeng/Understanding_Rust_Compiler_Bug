{"sha": "e6e53aff6398f9d2c6851c25acfdedd0bf47a321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTUzYWZmNjM5OGY5ZDJjNjg1MWMyNWFjZmRlZGQwYmY0N2EzMjE=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-07-22T18:50:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-23T21:33:12Z"}, "message": "Add `--expand` option to rustc to pretty-print expanded code.", "tree": {"sha": "ef176bad307f0028fcb3f8789105d820f5b0141a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef176bad307f0028fcb3f8789105d820f5b0141a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e53aff6398f9d2c6851c25acfdedd0bf47a321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e53aff6398f9d2c6851c25acfdedd0bf47a321", "html_url": "https://github.com/rust-lang/rust/commit/e6e53aff6398f9d2c6851c25acfdedd0bf47a321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e53aff6398f9d2c6851c25acfdedd0bf47a321/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63e77a3de1260e8424d46e4c46b9e6e5161fd011", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e77a3de1260e8424d46e4c46b9e6e5161fd011", "html_url": "https://github.com/rust-lang/rust/commit/63e77a3de1260e8424d46e4c46b9e6e5161fd011"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "86ab4042fd3e102644c8a496fc444a04c8b4cffc", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e6e53aff6398f9d2c6851c25acfdedd0bf47a321/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e53aff6398f9d2c6851c25acfdedd0bf47a321/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=e6e53aff6398f9d2c6851c25acfdedd0bf47a321", "patch": "@@ -153,7 +153,7 @@ fn compile_input(session::session sess, ast::crate_cfg cfg, str input,\n }\n \n fn pretty_print_input(session::session sess, ast::crate_cfg cfg,\n-                      str input, pp_mode ppm) {\n+                      str input, pp_mode ppm, bool expand) {\n     fn ann_paren_for_expr(&pprust::ann_node node) {\n         alt (node) {\n             case (pprust::node_expr(?s, ?expr)) {\n@@ -195,6 +195,7 @@ fn pretty_print_input(session::session sess, ast::crate_cfg cfg,\n     }\n \n     auto crate = parse_input(sess, cfg, input);\n+    if(expand) { crate = syntax::ext::expand::expand_crate(sess, crate); }\n     auto ann;\n     alt (ppm) {\n         case (ppm_typed) {\n@@ -238,6 +239,7 @@ options:\n     --lib              compile a library crate\n     --static           use or produce static libraries\n     --pretty [type]    pretty-print the input instead of compiling\n+    --expand [type]    expand and pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     --noverify         suppress LLVM verification step (slight speedup)\n@@ -395,15 +397,15 @@ fn parse_pretty(session::session sess, &str name) -> pp_mode {\n     } else if (str::eq(name, \"typed\")) {\n         ret ppm_typed;\n     } else if (str::eq(name, \"identified\")) { ret ppm_identified; }\n-    sess.fatal(\"argument to `pretty` must be one of `normal`, `typed`, or \" +\n-                 \"`identified`\");\n+    sess.fatal(\"argument to `pretty` or `expand` must be one of `normal`, \"\n+               + \"`typed`, or `identified`\");\n }\n \n fn opts() -> vec[getopts::opt] {\n     ret [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n          optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n-         optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"O\"),\n-         optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n+         optflagopt(\"expand\"), optflag(\"ls\"), optflag(\"parse-only\"),\n+         optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n@@ -451,18 +453,29 @@ fn main(vec[str] args) {\n     auto ifile = match.free.(0);\n     let str saved_out_filename = \"\";\n     auto cfg = build_configuration(sess, binary, ifile);\n+    auto expand =\n+        option::map[str,\n+                    pp_mode](bind parse_pretty(sess, _),\n+                             getopts::opt_default(match, \"expand\", \"normal\"));\n+    alt (expand) {\n+        case (some[pp_mode](?ppm)) {\n+            pretty_print_input(sess, cfg, ifile, ppm, true);\n+            ret;\n+        }\n+        case (none[pp_mode]) {/* continue */ }\n+    }\n     auto pretty =\n         option::map[str,\n                     pp_mode](bind parse_pretty(sess, _),\n                              getopts::opt_default(match, \"pretty\", \"normal\"));\n-    auto ls = opt_present(match, \"ls\");\n     alt (pretty) {\n         case (some[pp_mode](?ppm)) {\n-            pretty_print_input(sess, cfg, ifile, ppm);\n+            pretty_print_input(sess, cfg, ifile, ppm, false);\n             ret;\n         }\n         case (none[pp_mode]) {/* continue */ }\n     }\n+    auto ls = opt_present(match, \"ls\");\n     if (ls) {\n         metadata::creader::list_file_metadata(ifile, ioivec::stdout());\n         ret;"}]}