{"sha": "52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZGVjMGUxYzllMGZlNWJiYmU4MTM4NTUzMWU2OWMyYzQ2ZWY1NmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-07T11:56:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:35:39Z"}, "message": "Don't derive traits on packed structs", "tree": {"sha": "f2f6522832596d658d2644411abfcbdd1840b829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f6522832596d658d2644411abfcbdd1840b829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg58sACgkQpp+NIls6\n19makQ/+MYO4TO7Vw5mmmqcq8HeMZdMTyWyTDSPY6cvR19S20QAcYjGK24Z7kPLA\nAaKAd1E4nhxPlCCv8KpOeSTqzfbl60zEHwh3Oe04vr9MVK3+HZoaHW0q9moKHpk1\nJl12tNGirkqREENjl319yxPSYQHkQuifLu72CXYQF748qD3SiXHOeFp4HduPHuAm\nNqwYK4K6/1STxI36EHe0hvOHV8KdFqUotYbOQ/ARVSN6uxwEwxJTGh/YxJ8gV5Vr\n+7Sjfle2tsHe9W6ggJAtaxupWZW/lbR1aZtNyMlomY8/cS35A9TVYvTb4t/Pzkt6\nReOkVnfcFDYFarKCbrsLZ0jApMmvkdtoGjt+8qSD3rOXUI3ZpyjTmCYytWjRT3lG\nn7hVZy0+TAS0bNFrzTBA1s2Da0sMhIsi9ywYMDTK8OkymXAEHWznEq0ZA68XV7VH\nhK9p8IGyRxmYkBI+od+c7GSfiBJaQlklh8PKeOywx9QNrUbM8WAAlMMgzaks3/0P\naifPvEPcIZLfuyNZ9ci4k48+L4cnK54/45Xz59/OzeP32goJ7fSrxdfI9hSVzhdz\n+/Z4W8uifNmiAapNEf//aeifnT2mCi1BwAbLRQ3Oe914IYHh+su6wgOwGxQjM9I/\nGu7ZJvnhi+wz6dM8IjTnSS7yiX9fJAQm4YpjwhhKl+Aes1LJflU=\n=myYW\n-----END PGP SIGNATURE-----", "payload": "tree f2f6522832596d658d2644411abfcbdd1840b829\nparent 47e0bb59dbfe1010ed19bfd49c21fa7da4ab4f42\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520423808 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494539 +0100\n\nDon't derive traits on packed structs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e", "html_url": "https://github.com/rust-lang/rust/commit/52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e0bb59dbfe1010ed19bfd49c21fa7da4ab4f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e0bb59dbfe1010ed19bfd49c21fa7da4ab4f42", "html_url": "https://github.com/rust-lang/rust/commit/47e0bb59dbfe1010ed19bfd49c21fa7da4ab4f42"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "bf9a832519ad9afa70d0787da2839bab44bf33d1", "filename": "src/libsyntax_pos/span_encoding.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e/src%2Flibsyntax_pos%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e/src%2Flibsyntax_pos%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fspan_encoding.rs?ref=52dec0e1c9e0fe5bbbe81385531e69c2c46ef56e", "patch": "@@ -19,16 +19,37 @@ use hygiene::SyntaxContext;\n \n use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n+use std::hash::{Hash, Hasher};\n \n /// A compressed span.\n /// Contains either fields of `SpanData` inline if they are small, or index into span interner.\n /// The primary goal of `Span` is to be as small as possible and fit into other structures\n /// (that's why it uses `packed` as well). Decoding speed is the second priority.\n /// See `SpanData` for the info on span fields in decoded representation.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n #[repr(packed)]\n pub struct Span(u32);\n \n+impl Copy for Span {}\n+impl Clone for Span {\n+    fn clone(&self) -> Span {\n+        *self\n+    }\n+}\n+impl PartialEq for Span {\n+    fn eq(&self, other: &Span) -> bool {\n+        let a = self.0;\n+        let b = other.0;\n+        a == b\n+    }\n+}\n+impl Eq for Span {}\n+impl Hash for Span {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let a = self.0;\n+        a.hash(state)\n+    }\n+}\n+\n /// Dummy span, both position and length are zero, syntax context is zero as well.\n /// This span is kept inline and encoded with format 0.\n pub const DUMMY_SP: Span = Span(0);"}]}