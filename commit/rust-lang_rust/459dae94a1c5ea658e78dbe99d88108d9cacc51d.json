{"sha": "459dae94a1c5ea658e78dbe99d88108d9cacc51d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWRhZTk0YTFjNWVhNjU4ZTc4ZGJlOTlkODgxMDhkOWNhY2M1MWQ=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-11-07T21:22:52Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-11-08T05:22:47Z"}, "message": "fix #72680 by explicitly checking for or-pattern before test", "tree": {"sha": "cfd68c0de18cd4f398740ea282796adc4d5931ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfd68c0de18cd4f398740ea282796adc4d5931ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459dae94a1c5ea658e78dbe99d88108d9cacc51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459dae94a1c5ea658e78dbe99d88108d9cacc51d", "html_url": "https://github.com/rust-lang/rust/commit/459dae94a1c5ea658e78dbe99d88108d9cacc51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459dae94a1c5ea658e78dbe99d88108d9cacc51d/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d115f6db5172c961dfeb50de15f35784dbc7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d115f6db5172c961dfeb50de15f35784dbc7c9", "html_url": "https://github.com/rust-lang/rust/commit/b2d115f6db5172c961dfeb50de15f35784dbc7c9"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "e4bc4c0743243b39404e243e7b608d40493c81d1", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/459dae94a1c5ea658e78dbe99d88108d9cacc51d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459dae94a1c5ea658e78dbe99d88108d9cacc51d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=459dae94a1c5ea658e78dbe99d88108d9cacc51d", "patch": "@@ -671,6 +671,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             (&TestKind::Range { .. }, _) => None,\n \n             (&TestKind::Eq { .. } | &TestKind::Len { .. }, _) => {\n+                // We do call `test()` below to see what kind of test `match_pair` would require.\n+                // If it is the same test as `test`, then we can just use `test`.\n+                //\n+                // However, `test()` assumes that there won't be any or-patterns, so we need to\n+                // specially handle that here and return `None` (since the `test` clearly doesn't\n+                // apply to an or-pattern).\n+                if let PatKind::Or { .. } = &*match_pair.pattern.kind {\n+                    return None;\n+                }\n+\n                 // These are all binary tests.\n                 //\n                 // FIXME(#29623) we can be more clever here"}, {"sha": "3e8febb63add30ff8b0492ea19e5d6d89efb3614", "filename": "src/test/ui/match/issue-72680.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/459dae94a1c5ea658e78dbe99d88108d9cacc51d/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459dae94a1c5ea658e78dbe99d88108d9cacc51d/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs?ref=459dae94a1c5ea658e78dbe99d88108d9cacc51d", "patch": "@@ -0,0 +1,65 @@\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    assert_eq!(f(\"\", 0), true);\n+    assert_eq!(f(\"a\", 1), true);\n+    assert_eq!(f(\"b\", 1), true);\n+\n+    assert_eq!(f(\"\", 1), false);\n+    assert_eq!(f(\"a\", 0), false);\n+    assert_eq!(f(\"b\", 0), false);\n+\n+    assert_eq!(f(\"asdf\", 032), false);\n+\n+    ////\n+\n+    assert_eq!(g(true, true, true), false);\n+    assert_eq!(g(false, true, true), false);\n+    assert_eq!(g(true, false, true), false);\n+    assert_eq!(g(false, false, true), false);\n+    assert_eq!(g(true, true, false), false);\n+\n+    assert_eq!(g(false, true, false), true);\n+    assert_eq!(g(true, false, false), true);\n+    assert_eq!(g(false, false, false), true);\n+\n+    ////\n+\n+    assert_eq!(h(true, true, true), false);\n+    assert_eq!(h(false, true, true), false);\n+    assert_eq!(h(true, false, true), false);\n+    assert_eq!(h(false, false, true), false);\n+    assert_eq!(h(true, true, false), false);\n+\n+    assert_eq!(h(false, true, false), true);\n+    assert_eq!(h(true, false, false), true);\n+    assert_eq!(h(false, false, false), true);\n+}\n+\n+fn f(s: &str, num: usize) -> bool {\n+    match (s, num) {\n+        (\"\", 0) | (\"a\" | \"b\", 1) => true,\n+\n+        _ => false,\n+    }\n+}\n+\n+fn g(x: bool, y: bool, z: bool) -> bool {\n+    match (x, y, x, z) {\n+        (true | false, false, true, false) => true,\n+        (false, true | false, true | false, false) => true,\n+        (true | false, true | false, true | false, true) => false,\n+        (true, true | false, true | false, false) => false,\n+    }\n+}\n+\n+fn h(x: bool, y: bool, z: bool) -> bool {\n+    match (x, (y, (x, (z,)))) {\n+        (true | false, (false, (true, (false,)))) => true,\n+        (false, (true | false, (true | false, (false,)))) => true,\n+        (true | false, (true | false, (true | false, (true,)))) => false,\n+        (true, (true | false, (true | false, (false,)))) => false,\n+    }\n+}"}]}