{"sha": "d9a17229dcde2366c9a3fd300682f596318192c4", "node_id": "C_kwDOAAsO6NoAKGQ5YTE3MjI5ZGNkZTIzNjZjOWEzZmQzMDA2ODJmNTk2MzE4MTkyYzQ", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2022-04-10T07:04:04Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-09-11T06:04:17Z"}, "message": "test async diagnostics for feature(generator_clone)", "tree": {"sha": "9059c72eaf17647b336893882edf8eb377d8d867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9059c72eaf17647b336893882edf8eb377d8d867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a17229dcde2366c9a3fd300682f596318192c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a17229dcde2366c9a3fd300682f596318192c4", "html_url": "https://github.com/rust-lang/rust/commit/d9a17229dcde2366c9a3fd300682f596318192c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a17229dcde2366c9a3fd300682f596318192c4/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c", "html_url": "https://github.com/rust-lang/rust/commit/62112f4dc1b8bb9e148a3907c15c50b9ead42c7c"}], "stats": {"total": 242, "additions": 242, "deletions": 0}, "files": [{"sha": "97cbd9d9fb599c9479a16664513a0f6a14e720a6", "filename": "src/test/ui/generator/clone-impl-async.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d9a17229dcde2366c9a3fd300682f596318192c4/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a17229dcde2366c9a3fd300682f596318192c4/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.rs?ref=d9a17229dcde2366c9a3fd300682f596318192c4", "patch": "@@ -0,0 +1,71 @@\n+// edition:2021\n+// gate-test-generator_clone\n+// Verifies that feature(generator_clone) doesn't allow async blocks to be cloned/copied.\n+\n+#![feature(generators, generator_clone)]\n+\n+use std::future::ready;\n+\n+struct NonClone;\n+\n+fn main() {\n+    let inner_non_clone = async {\n+        let non_clone = NonClone;\n+        let () = ready(()).await;\n+        drop(non_clone);\n+    };\n+    check_copy(&inner_non_clone);\n+    //~^ ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+    check_clone(&inner_non_clone);\n+    //~^ ERROR the trait bound `impl Future<Output = [async output]>: Clone` is not satisfied\n+\n+    let non_clone = NonClone;\n+    let outer_non_clone = async move {\n+        drop(non_clone);\n+    };\n+    check_copy(&outer_non_clone);\n+    //~^ ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+    check_clone(&outer_non_clone);\n+    //~^ ERROR the trait bound `impl Future<Output = [async output]>: Clone` is not satisfied\n+\n+    let maybe_copy_clone = async move {};\n+    check_copy(&maybe_copy_clone);\n+    //~^ ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+    check_clone(&maybe_copy_clone);\n+    //~^ ERROR the trait bound `impl Future<Output = [async output]>: Clone` is not satisfied\n+\n+    let inner_non_clone_fn = the_inner_non_clone_fn();\n+    check_copy(&inner_non_clone_fn);\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    check_clone(&inner_non_clone_fn);\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+\n+    let outer_non_clone_fn = the_outer_non_clone_fn(NonClone);\n+    check_copy(&outer_non_clone_fn);\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    check_clone(&outer_non_clone_fn);\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+\n+    let maybe_copy_clone_fn = the_maybe_copy_clone_fn();\n+    check_copy(&maybe_copy_clone_fn);\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+    check_clone(&maybe_copy_clone_fn);\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+}\n+\n+async fn the_inner_non_clone_fn() {\n+    let non_clone = NonClone;\n+    let () = ready(()).await;\n+    drop(non_clone);\n+}\n+\n+async fn the_outer_non_clone_fn(non_clone: NonClone) {\n+    let () = ready(()).await;\n+    drop(non_clone);\n+}\n+\n+async fn the_maybe_copy_clone_fn() {\n+}\n+\n+fn check_copy<T: Copy>(_x: &T) {}\n+fn check_clone<T: Clone>(_x: &T) {}"}, {"sha": "6246d773f35b94f587eb55e5b58861fd18afc359", "filename": "src/test/ui/generator/clone-impl-async.stderr", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/d9a17229dcde2366c9a3fd300682f596318192c4/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a17229dcde2366c9a3fd300682f596318192c4/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-async.stderr?ref=d9a17229dcde2366c9a3fd300682f596318192c4", "patch": "@@ -0,0 +1,171 @@\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+  --> $DIR/clone-impl-async.rs:17:16\n+   |\n+LL |     check_copy(&inner_non_clone);\n+   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-async.rs:70:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Clone` is not satisfied\n+  --> $DIR/clone-impl-async.rs:19:17\n+   |\n+LL |     check_clone(&inner_non_clone);\n+   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = [async output]>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-async.rs:71:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+  --> $DIR/clone-impl-async.rs:26:16\n+   |\n+LL |     check_copy(&outer_non_clone);\n+   |     ---------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-async.rs:70:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Clone` is not satisfied\n+  --> $DIR/clone-impl-async.rs:28:17\n+   |\n+LL |     check_clone(&outer_non_clone);\n+   |     ----------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = [async output]>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-async.rs:71:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+  --> $DIR/clone-impl-async.rs:32:16\n+   |\n+LL |     check_copy(&maybe_copy_clone);\n+   |     ---------- ^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-async.rs:70:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Clone` is not satisfied\n+  --> $DIR/clone-impl-async.rs:34:17\n+   |\n+LL |     check_clone(&maybe_copy_clone);\n+   |     ----------- ^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = [async output]>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-async.rs:71:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+  --> $DIR/clone-impl-async.rs:38:16\n+   |\n+LL |     check_copy(&inner_non_clone_fn);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-async.rs:70:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+  --> $DIR/clone-impl-async.rs:40:17\n+   |\n+LL |     check_clone(&inner_non_clone_fn);\n+   |     ----------- ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-async.rs:71:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+  --> $DIR/clone-impl-async.rs:44:16\n+   |\n+LL |     check_copy(&outer_non_clone_fn);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-async.rs:70:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+  --> $DIR/clone-impl-async.rs:46:17\n+   |\n+LL |     check_clone(&outer_non_clone_fn);\n+   |     ----------- ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-async.rs:71:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n+  --> $DIR/clone-impl-async.rs:50:16\n+   |\n+LL |     check_copy(&maybe_copy_clone_fn);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-async.rs:70:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `impl Future<Output = ()>: Clone` is not satisfied\n+  --> $DIR/clone-impl-async.rs:52:17\n+   |\n+LL |     check_clone(&maybe_copy_clone_fn);\n+   |     ----------- ^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `impl Future<Output = ()>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-async.rs:71:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}