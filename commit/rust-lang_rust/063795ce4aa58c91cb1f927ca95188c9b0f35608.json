{"sha": "063795ce4aa58c91cb1f927ca95188c9b0f35608", "node_id": "C_kwDOAAsO6NoAKDA2Mzc5NWNlNGFhNThjOTFjYjFmOTI3Y2E5NTE4OGM5YjBmMzU2MDg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T10:26:43Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T10:26:43Z"}, "message": "Remove another use of clone_code", "tree": {"sha": "d064a647dba89f7e11930afb5d55672db8834b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d064a647dba89f7e11930afb5d55672db8834b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/063795ce4aa58c91cb1f927ca95188c9b0f35608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/063795ce4aa58c91cb1f927ca95188c9b0f35608", "html_url": "https://github.com/rust-lang/rust/commit/063795ce4aa58c91cb1f927ca95188c9b0f35608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/063795ce4aa58c91cb1f927ca95188c9b0f35608/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704bbe5210613c40fb997adba2375e54ea29b205", "url": "https://api.github.com/repos/rust-lang/rust/commits/704bbe5210613c40fb997adba2375e54ea29b205", "html_url": "https://github.com/rust-lang/rust/commit/704bbe5210613c40fb997adba2375e54ea29b205"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "43fb703456a46c48a4f88ed843f95ac80b0b7de7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/063795ce4aa58c91cb1f927ca95188c9b0f35608/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063795ce4aa58c91cb1f927ca95188c9b0f35608/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=063795ce4aa58c91cb1f927ca95188c9b0f35608", "patch": "@@ -12,7 +12,6 @@ use crate::check::{\n use crate::structured_errors::StructuredDiagnostic;\n \n use rustc_ast as ast;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticId, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -1601,24 +1600,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Peel derived obligation, because it's the type that originally\n             // started this inference chain that matters, not the one we wound\n             // up with at the end.\n-            fn unpeel_to_top(\n-                mut code: Lrc<ObligationCauseCode<'_>>,\n-            ) -> Lrc<ObligationCauseCode<'_>> {\n-                let mut result_code = code.clone();\n+            fn unpeel_to_top<'a, 'tcx>(\n+                mut code: &'a ObligationCauseCode<'tcx>,\n+            ) -> &'a ObligationCauseCode<'tcx> {\n+                let mut result_code = code;\n                 loop {\n-                    let parent = match &*code {\n-                        ObligationCauseCode::ImplDerivedObligation(c) => {\n-                            c.derived.parent_code.clone()\n-                        }\n+                    let parent = match code {\n+                        ObligationCauseCode::ImplDerivedObligation(c) => &c.derived.parent_code,\n                         ObligationCauseCode::BuiltinDerivedObligation(c)\n-                        | ObligationCauseCode::DerivedObligation(c) => c.parent_code.clone(),\n-                        _ => break,\n+                        | ObligationCauseCode::DerivedObligation(c) => &c.parent_code,\n+                        _ => break result_code,\n                     };\n-                    result_code = std::mem::replace(&mut code, parent);\n+                    (result_code, code) = (code, parent);\n                 }\n-                result_code\n             }\n-            let self_: ty::subst::GenericArg<'_> = match &*unpeel_to_top(error.obligation.cause.clone_code()) {\n+            let self_: ty::subst::GenericArg<'_> = match unpeel_to_top(error.obligation.cause.code()) {\n                 ObligationCauseCode::BuiltinDerivedObligation(code) |\n                 ObligationCauseCode::DerivedObligation(code) => {\n                     code.parent_trait_pred.self_ty().skip_binder().into()"}]}