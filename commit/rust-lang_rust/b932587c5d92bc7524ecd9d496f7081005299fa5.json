{"sha": "b932587c5d92bc7524ecd9d496f7081005299fa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MzI1ODdjNWQ5MmJjNzUyNGVjZDlkNDk2ZjcwODEwMDUyOTlmYTU=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-02-09T16:38:16Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-02-09T16:43:49Z"}, "message": "Add better turbofish extractor", "tree": {"sha": "4dc7b34fc7675c584b1a7b62ba02ab4f5d590c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc7b34fc7675c584b1a7b62ba02ab4f5d590c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b932587c5d92bc7524ecd9d496f7081005299fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b932587c5d92bc7524ecd9d496f7081005299fa5", "html_url": "https://github.com/rust-lang/rust/commit/b932587c5d92bc7524ecd9d496f7081005299fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b932587c5d92bc7524ecd9d496f7081005299fa5/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "233fe11ce9711a3652141fbe7e9191314fd701d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/233fe11ce9711a3652141fbe7e9191314fd701d5", "html_url": "https://github.com/rust-lang/rust/commit/233fe11ce9711a3652141fbe7e9191314fd701d5"}], "stats": {"total": 143, "additions": 120, "deletions": 23}, "files": [{"sha": "d9f906619a038580dd6e37da059e1d3b5fcec763", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b932587c5d92bc7524ecd9d496f7081005299fa5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b932587c5d92bc7524ecd9d496f7081005299fa5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b932587c5d92bc7524ecd9d496f7081005299fa5", "patch": "@@ -4095,7 +4095,8 @@ fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<\n         then {\n             // `expr` implements `FromIterator` trait\n             let iter_expr = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n-            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, ty);\n+            let turbofish = extract_turbofish(cx, expr, ty);\n+            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, turbofish);\n             span_lint_and_sugg(\n                 cx,\n                 FROM_ITER_INSTEAD_OF_COLLECT,\n@@ -4109,6 +4110,38 @@ fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<\n     }\n }\n \n+fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -> String {\n+    if_chain! {\n+        let call_site = expr.span.source_callsite();\n+        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(call_site);\n+        let snippet_split = snippet.split(\"::\").collect::<Vec<_>>();\n+        if let Some((_, elements)) = snippet_split.split_last();\n+\n+        then {\n+            // is there a type specifier? (i.e.: like `<u32>` in `collections::BTreeSet::<u32>::`)\n+            if let Some(type_specifier) = snippet_split.iter().find(|e| e.starts_with('<') && e.ends_with('>')) {\n+                // remove the type specifier from the path elements\n+                let without_ts = elements.iter().filter_map(|e| {\n+                    if e == type_specifier { None } else { Some((*e).to_string()) }\n+                }).collect::<Vec<_>>();\n+                // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n+                format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n+            } else {\n+                // type is not explicitly specified so wildcards are needed\n+                // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n+                let ty_str = ty.to_string();\n+                let start = ty_str.find('<').unwrap_or(0);\n+                let end = ty_str.find('>').unwrap_or_else(|| ty_str.len());\n+                let nb_wildcard = ty_str[start..end].split(',').count();\n+                let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n+                format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+            }\n+        } else {\n+            ty.to_string()\n+        }\n+    }\n+}\n+\n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n     expected.constness == actual.constness\n         && expected.unsafety == actual.unsafety"}, {"sha": "b5f548810e65a8c6dc3bb725ecc81bd5825fc616", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b932587c5d92bc7524ecd9d496f7081005299fa5/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b932587c5d92bc7524ecd9d496f7081005299fa5/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=b932587c5d92bc7524ecd9d496f7081005299fa5", "patch": "@@ -8,27 +8,41 @@ use std::iter::FromIterator;\n \n fn main() {\n     let iter_expr = std::iter::repeat(5).take(5);\n-    let _ = iter_expr.collect::<std::vec::Vec<i32>>();\n+    let _ = iter_expr.collect::<Vec<_>>();\n \n-    let _ = vec![5, 5, 5, 5].iter().enumerate().collect::<std::collections::HashMap<usize, &i8>>();\n+    let _ = vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>();\n \n     Vec::from_iter(vec![42u32]);\n \n     let a = vec![0, 1, 2];\n-    assert_eq!(a, (0..3).collect::<std::vec::Vec<i32>>());\n+    assert_eq!(a, (0..3).collect::<Vec<_>>());\n+    assert_eq!(a, (0..3).collect::<Vec<i32>>());\n \n-    let mut b = (0..3).collect::<std::collections::VecDeque<i32>>();\n+    let mut b = (0..3).collect::<VecDeque<_>>();\n     b.push_back(4);\n \n+    let mut b = (0..3).collect::<VecDeque<i32>>();\n+    b.push_back(4);\n+\n+    {\n+        use std::collections;\n+        let mut b = (0..3).collect::<collections::VecDeque<i32>>();\n+        b.push_back(4);\n+    }\n+\n     let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n-    let bm = values.iter().cloned().collect::<std::collections::BTreeMap<i32, char>>();\n-    let mut bar = bm.range(0..2).collect::<std::collections::BTreeMap<&i32, &char>>();\n+    let bm = values.iter().cloned().collect::<BTreeMap<_, _>>();\n+    let mut bar = bm.range(0..2).collect::<BTreeMap<_, _>>();\n     bar.insert(&4, &'e');\n \n-    let mut bts = (0..3).collect::<std::collections::BTreeSet<i32>>();\n+    let mut bts = (0..3).collect::<BTreeSet<_>>();\n     bts.insert(2);\n     {\n         use std::collections;\n-        let _ = (0..3).collect::<std::collections::BTreeSet<i32>>();\n+        let _ = (0..3).collect::<collections::BTreeSet<_>>();\n+        let _ = (0..3).collect::<collections::BTreeSet<u32>>();\n     }\n+\n+    for _i in [1, 2, 3].iter().collect::<Vec<_>>() {}\n+    for _i in [1, 2, 3].iter().collect::<Vec<&i32>>() {}\n }"}, {"sha": "b842b5451d1c8d70f45bcbec2b33d20510b4093f", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b932587c5d92bc7524ecd9d496f7081005299fa5/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b932587c5d92bc7524ecd9d496f7081005299fa5/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=b932587c5d92bc7524ecd9d496f7081005299fa5", "patch": "@@ -16,10 +16,20 @@ fn main() {\n \n     let a = vec![0, 1, 2];\n     assert_eq!(a, Vec::from_iter(0..3));\n+    assert_eq!(a, Vec::<i32>::from_iter(0..3));\n \n     let mut b = VecDeque::from_iter(0..3);\n     b.push_back(4);\n \n+    let mut b = VecDeque::<i32>::from_iter(0..3);\n+    b.push_back(4);\n+\n+    {\n+        use std::collections;\n+        let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n+        b.push_back(4);\n+    }\n+\n     let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n     let bm = BTreeMap::from_iter(values.iter().cloned());\n     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n@@ -30,5 +40,9 @@ fn main() {\n     {\n         use std::collections;\n         let _ = collections::BTreeSet::from_iter(0..3);\n+        let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n     }\n+\n+    for _i in Vec::from_iter([1, 2, 3].iter()) {}\n+    for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n }"}, {"sha": "434734c9a213df003383af8c16581dd76154560c", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b932587c5d92bc7524ecd9d496f7081005299fa5/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b932587c5d92bc7524ecd9d496f7081005299fa5/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=b932587c5d92bc7524ecd9d496f7081005299fa5", "patch": "@@ -2,51 +2,87 @@ error: usage of `FromIterator::from_iter`\n   --> $DIR/from_iter_instead_of_collect.rs:11:13\n    |\n LL |     let _ = Vec::from_iter(iter_expr);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<std::vec::Vec<i32>>()`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n   --> $DIR/from_iter_instead_of_collect.rs:13:13\n    |\n LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<std::collections::HashMap<usize, &i8>>()`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>()`\n \n error: usage of `FromIterator::from_iter`\n   --> $DIR/from_iter_instead_of_collect.rs:18:19\n    |\n LL |     assert_eq!(a, Vec::from_iter(0..3));\n-   |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::vec::Vec<i32>>()`\n+   |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:20:17\n+  --> $DIR/from_iter_instead_of_collect.rs:19:19\n+   |\n+LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:21:17\n    |\n LL |     let mut b = VecDeque::from_iter(0..3);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::collections::VecDeque<i32>>()`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:24:17\n+   |\n+LL |     let mut b = VecDeque::<i32>::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:29:21\n+   |\n+LL |         let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:24:14\n+  --> $DIR/from_iter_instead_of_collect.rs:34:14\n    |\n LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<std::collections::BTreeMap<i32, char>>()`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:25:19\n+  --> $DIR/from_iter_instead_of_collect.rs:35:19\n    |\n LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<std::collections::BTreeMap<&i32, &char>>()`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:28:19\n+  --> $DIR/from_iter_instead_of_collect.rs:38:19\n    |\n LL |     let mut bts = BTreeSet::from_iter(0..3);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::collections::BTreeSet<i32>>()`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:32:17\n+  --> $DIR/from_iter_instead_of_collect.rs:42:17\n    |\n LL |         let _ = collections::BTreeSet::from_iter(0..3);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<std::collections::BTreeSet<i32>>()`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:43:17\n+   |\n+LL |         let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<u32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:46:15\n+   |\n+LL |     for _i in Vec::from_iter([1, 2, 3].iter()) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:47:15\n+   |\n+LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<&i32>>()`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 14 previous errors\n "}]}