{"sha": "06511573f236a07b8ecd7c3e3d5fef1d53e59352", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NTExNTczZjIzNmEwN2I4ZWNkN2MzZTNkNWZlZjFkNTNlNTkzNTI=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-02-11T15:51:32Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-02-20T05:37:30Z"}, "message": "Remove sys::*::Stderr Write implementation", "tree": {"sha": "e4139c6119839145ee9380c34de3c5736e6bf1dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4139c6119839145ee9380c34de3c5736e6bf1dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06511573f236a07b8ecd7c3e3d5fef1d53e59352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06511573f236a07b8ecd7c3e3d5fef1d53e59352", "html_url": "https://github.com/rust-lang/rust/commit/06511573f236a07b8ecd7c3e3d5fef1d53e59352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06511573f236a07b8ecd7c3e3d5fef1d53e59352/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e35d270067afff72034312065c48e6d8cfba67", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e35d270067afff72034312065c48e6d8cfba67", "html_url": "https://github.com/rust-lang/rust/commit/74e35d270067afff72034312065c48e6d8cfba67"}], "stats": {"total": 93, "additions": 13, "deletions": 80}, "files": [{"sha": "4fd114884e367e988fdaeda737744d90e586b7f5", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -286,6 +286,9 @@ pub use self::stdio::{_print, _eprint};\n #[doc(no_inline, hidden)]\n pub use self::stdio::{set_panic, set_print};\n \n+// Used inside the standard library for panic output.\n+pub(crate) use self::stdio::stderr_raw;\n+\n pub mod prelude;\n mod buffered;\n mod cursor;"}, {"sha": "4fc11db3ff52ada781280f5604734a9f21ec21f8", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -32,7 +32,9 @@ struct StdoutRaw(stdio::Stdout);\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n /// the `std::io::stdio::stderr_raw` function.\n-struct StderrRaw(stdio::Stderr);\n+///\n+/// Not exposed, but used inside the standard library for panic output.\n+pub(crate) struct StderrRaw(stdio::Stderr);\n \n /// Constructs a new raw handle to the standard input of this process.\n ///\n@@ -61,7 +63,9 @@ fn stdout_raw() -> io::Result<StdoutRaw> { stdio::Stdout::new().map(StdoutRaw) }\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n+///\n+/// Not exposed, but used inside the standard library for panic output.\n+pub(crate) fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }"}, {"sha": "8ec92326dbd8ca80e0bfdc6ff33b91b7340cc03d", "filename": "src/libstd/sys/cloudabi/stdio.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -49,19 +49,6 @@ impl Stderr {\n     }\n }\n \n-// FIXME: right now this raw stderr handle is used in a few places because\n-//        std::io::stderr_raw isn't exposed, but once that's exposed this impl\n-//        should go away\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Stderr::write(self, data)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Stderr::flush(self)\n-    }\n-}\n-\n pub fn is_ebadf(err: &io::Error) -> bool {\n     err.raw_os_error() == Some(abi::errno::BADF as i32)\n }"}, {"sha": "66f84e17527521f3b98352f09db87528df6fdf24", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -47,25 +47,12 @@ impl Stderr {\n     }\n }\n \n-// FIXME: right now this raw stderr handle is used in a few places because\n-//        std::io::stderr_raw isn't exposed, but once that's exposed this impl\n-//        should go away\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Stderr::write(self, data)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Stderr::flush(self)\n-    }\n-}\n-\n pub fn is_ebadf(err: &io::Error) -> bool {\n     err.raw_os_error() == Some(::sys::syscall::EBADF as i32)\n }\n \n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    io::stderr_raw().ok()\n }"}, {"sha": "c8efb931d6fe5af15c394eda1d7ed9a026b40dbd", "filename": "src/libstd/sys/sgx/stdio.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -46,19 +46,6 @@ impl Stderr {\n     }\n }\n \n-// FIXME: right now this raw stderr handle is used in a few places because\n-//        std::io::stderr_raw isn't exposed, but once that's exposed this impl\n-//        should go away\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Stderr::write(self, data)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Stderr::flush(self)\n-    }\n-}\n-\n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {"}, {"sha": "e23723222be35da95eb7882245dc65c32ca6c8ad", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -47,25 +47,12 @@ impl Stderr {\n     }\n }\n \n-// FIXME: right now this raw stderr handle is used in a few places because\n-//        std::io::stderr_raw isn't exposed, but once that's exposed this impl\n-//        should go away\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Stderr::write(self, data)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Stderr::flush(self)\n-    }\n-}\n-\n pub fn is_ebadf(err: &io::Error) -> bool {\n     err.raw_os_error() == Some(libc::EBADF as i32)\n }\n \n pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    io::stderr_raw().ok()\n }"}, {"sha": "015d3f20660429d7bc220ed6a38ad51929016c5d", "filename": "src/libstd/sys/wasm/stdio.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -45,15 +45,6 @@ impl Stderr {\n     }\n }\n \n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        (&*self).write(data)\n-    }\n-    fn flush(&mut self) -> io::Result<()> {\n-        (&*self).flush()\n-    }\n-}\n-\n pub const STDIN_BUF_SIZE: usize = 0;\n \n pub fn is_ebadf(_err: &io::Error) -> bool {\n@@ -62,7 +53,7 @@ pub fn is_ebadf(_err: &io::Error) -> bool {\n \n pub fn panic_output() -> Option<impl io::Write> {\n     if cfg!(feature = \"wasm_syscall\") {\n-        Stderr::new().ok()\n+        io::stderr_raw().ok()\n     } else {\n         None\n     }"}, {"sha": "45a12d075bad0fe0dbd99a776899a1f70f1a435f", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06511573f236a07b8ecd7c3e3d5fef1d53e59352/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=06511573f236a07b8ecd7c3e3d5fef1d53e59352", "patch": "@@ -165,19 +165,6 @@ impl Stderr {\n     }\n }\n \n-// FIXME: right now this raw stderr handle is used in a few places because\n-//        std::io::stderr_raw isn't exposed, but once that's exposed this impl\n-//        should go away\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Stderr::write(self, data)\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Stderr::flush(self)\n-    }\n-}\n-\n impl Output {\n     pub fn handle(&self) -> c::HANDLE {\n         match *self {\n@@ -216,5 +203,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = 8 * 1024;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    io::stderr_raw().ok()\n }"}]}