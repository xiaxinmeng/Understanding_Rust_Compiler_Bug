{"sha": "f9615bfd6733142041cb8f32ce108cb31387752a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NjE1YmZkNjczMzE0MjA0MWNiOGYzMmNlMTA4Y2IzMTM4Nzc1MmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-08T13:54:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-08T13:54:33Z"}, "message": "Auto merge of #1159 - divergentdave:shim-seek, r=RalfJung\n\nAdd shim for seeking files\n\nThis adds a shim for `lseek64` (`lseek` on macOS). This enables the use of `<File as Seek>::seek`. Testing is included.", "tree": {"sha": "93bbcee2726513cbf9b1888608099da1ee441cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bbcee2726513cbf9b1888608099da1ee441cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9615bfd6733142041cb8f32ce108cb31387752a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9615bfd6733142041cb8f32ce108cb31387752a", "html_url": "https://github.com/rust-lang/rust/commit/f9615bfd6733142041cb8f32ce108cb31387752a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9615bfd6733142041cb8f32ce108cb31387752a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3cfb61ece273d59b62fb959ed17c99c04941d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cfb61ece273d59b62fb959ed17c99c04941d82", "html_url": "https://github.com/rust-lang/rust/commit/e3cfb61ece273d59b62fb959ed17c99c04941d82"}, {"sha": "98a1cac4ef4cb766c64fb476fabf7d162dd30361", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a1cac4ef4cb766c64fb476fabf7d162dd30361", "html_url": "https://github.com/rust-lang/rust/commit/98a1cac4ef4cb766c64fb476fabf7d162dd30361"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "5b40f3c690631a7b8cc4dbe0e199a800e5362252", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9615bfd6733142041cb8f32ce108cb31387752a/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9615bfd6733142041cb8f32ce108cb31387752a/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=f9615bfd6733142041cb8f32ce108cb31387752a", "patch": "@@ -489,6 +489,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            | \"lseek64\"\n+            | \"lseek\"\n+            => {\n+                let result = this.lseek64(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"unlink\" => {\n                 let result = this.unlink(args[0])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "f0efc073f75cb77c0a8f92dbf57f9665803e8fdf", "filename": "src/shims/fs.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f9615bfd6733142041cb8f32ce108cb31387752a/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9615bfd6733142041cb8f32ce108cb31387752a/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=f9615bfd6733142041cb8f32ce108cb31387752a", "patch": "@@ -1,7 +1,7 @@\n use std::collections::HashMap;\n use std::convert::{TryFrom, TryInto};\n use std::fs::{remove_file, File, OpenOptions};\n-use std::io::{Read, Write};\n+use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::PathBuf;\n use std::time::SystemTime;\n \n@@ -264,6 +264,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    fn lseek64(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        offset_op: OpTy<'tcx, Tag>,\n+        whence_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i64> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"lseek64\")?;\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let offset = this.read_scalar(offset_op)?.to_i64()?;\n+        let whence = this.read_scalar(whence_op)?.to_i32()?;\n+\n+        let seek_from = if whence == this.eval_libc_i32(\"SEEK_SET\")? {\n+            SeekFrom::Start(offset as u64)\n+        } else if whence == this.eval_libc_i32(\"SEEK_CUR\")? {\n+            SeekFrom::Current(offset)\n+        } else if whence == this.eval_libc_i32(\"SEEK_END\")? {\n+            SeekFrom::End(offset)\n+        } else {\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n+            return Ok(-1);\n+        };\n+\n+        if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n+            let result = handle.file.seek(seek_from).map(|offset| offset as i64);\n+            this.try_unwrap_io_result(result)\n+        } else {\n+            this.handle_not_found()\n+        }\n+    }\n+\n     fn unlink(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n "}, {"sha": "7483bf3ec8b8ab6114fa498f915f3dbee16cec2a", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f9615bfd6733142041cb8f32ce108cb31387752a/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9615bfd6733142041cb8f32ce108cb31387752a/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=f9615bfd6733142041cb8f32ce108cb31387752a", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: -Zmiri-disable-isolation\n \n use std::fs::{File, remove_file};\n-use std::io::{Read, Write, ErrorKind, Result};\n+use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n fn test_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n@@ -42,6 +42,23 @@ fn main() {\n     file.read_to_end(&mut contents).unwrap();\n     assert_eq!(bytes, contents.as_slice());\n \n+    // Test that seeking to the beginning and reading until EOF gets the text again.\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+    let mut contents = Vec::new();\n+    file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(bytes, contents.as_slice());\n+    // Test seeking relative to the end of the file.\n+    file.seek(SeekFrom::End(-1)).unwrap();\n+    let mut contents = Vec::new();\n+    file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(&bytes[bytes.len() - 1..], contents.as_slice());\n+    // Test seeking relative to the current position.\n+    file.seek(SeekFrom::Start(5)).unwrap();\n+    file.seek(SeekFrom::Current(-3)).unwrap();\n+    let mut contents = Vec::new();\n+    file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(&bytes[2..], contents.as_slice());\n+\n     // Test that metadata of an absolute path is correct.\n     test_metadata(bytes, &path).unwrap();\n     // Test that metadata of a relative path is correct."}]}