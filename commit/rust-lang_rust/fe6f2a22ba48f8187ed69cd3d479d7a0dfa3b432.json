{"sha": "fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNmYyYTIyYmE0OGY4MTg3ZWQ2OWNkM2Q0NzlkN2EwZGZhM2I0MzI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-30T17:03:53Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-07T12:26:34Z"}, "message": "Lint about consecutive ifs with same condition", "tree": {"sha": "bf13053eab50b1bc47cc3d264b30c5b05f1c823e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf13053eab50b1bc47cc3d264b30c5b05f1c823e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "html_url": "https://github.com/rust-lang/rust/commit/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba5d45509a62169dc4f6c0bac5ea6ac08d40883", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba5d45509a62169dc4f6c0bac5ea6ac08d40883", "html_url": "https://github.com/rust-lang/rust/commit/9ba5d45509a62169dc4f6c0bac5ea6ac08d40883"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "93921f01f6e05cc91cd81f9dc6737c58e40d0c82", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "patch": "@@ -47,6 +47,7 @@ name\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                   | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                   | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                 | warn    | consecutive `ifs` with the same condition\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases\n [invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                 | deny    | finds invalid regular expressions in `Regex::new(_)` invocations"}, {"sha": "33461a29670f59cd6014ada9595fea7ad6b9891c", "filename": "src/copies.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "patch": "@@ -0,0 +1,68 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::{get_parent_expr, is_exp_equal, span_lint};\n+\n+/// **What it does:** This lint checks for consecutive `ifs` with the same condition. This lint is\n+/// `Warn` by default.\n+///\n+/// **Why is this bad?** This is probably a copy & paste error.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:** `if a == b { .. } else if a == b { .. }`\n+declare_lint! {\n+    pub IFS_SAME_COND,\n+    Warn,\n+    \"consecutive `ifs` with the same condition\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct CopyAndPaste;\n+\n+impl LintPass for CopyAndPaste {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![\n+            IFS_SAME_COND\n+        ]\n+    }\n+}\n+\n+impl LateLintPass for CopyAndPaste {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        // skip ifs directly in else, it will be checked in the parent if\n+        if let Some(&Expr{node: ExprIf(_, _, Some(ref else_expr)), ..}) = get_parent_expr(cx, expr) {\n+            if else_expr.id == expr.id {\n+                return;\n+            }\n+        }\n+\n+        let conds = condition_sequence(expr);\n+\n+        for (n, i) in conds.iter().enumerate() {\n+            for j in conds.iter().skip(n+1) {\n+                if is_exp_equal(cx, i, j) {\n+                    span_lint(cx, IFS_SAME_COND, j.span, \"this if as the same condition as a previous if\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Return the list of conditions expression in a sequence of `if/else`.\n+/// Eg. would return `[a, b]` for the expression `if a {..} else if b {..}`.\n+fn condition_sequence(mut expr: &Expr) -> Vec<&Expr> {\n+    let mut result = vec![];\n+\n+    while let ExprIf(ref cond, _, ref else_expr) = expr.node {\n+        result.push(&**cond);\n+\n+        if let Some(ref else_expr) = *else_expr {\n+            expr = else_expr;\n+        }\n+        else {\n+            break;\n+        }\n+    }\n+\n+    result\n+}"}, {"sha": "6b2a43db795c04d88bd04f2274318eec2cdb384b", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "patch": "@@ -37,6 +37,7 @@ use rustc_plugin::Registry;\n \n #[macro_use]\n pub mod utils;\n+pub mod copies;\n pub mod consts;\n pub mod types;\n pub mod misc;\n@@ -157,6 +158,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);\n     reg.register_late_lint_pass(box types::AbsurdUnsignedComparisons);\n     reg.register_late_lint_pass(box regex::RegexPass);\n+    reg.register_late_lint_pass(box copies::CopyAndPaste);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -190,6 +192,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n+        copies::IFS_SAME_COND,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_NOT_EQ,\n         derive::EXPL_IMPL_CLONE_ON_COPY,"}, {"sha": "72c6fe94ce290d6dba16dc202ec0c0b97b61dc69", "filename": "src/utils.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "patch": "@@ -596,16 +596,38 @@ pub fn is_exp_equal(cx: &LateContext, left: &Expr, right: &Expr) -> bool {\n         }\n     }\n     match (&left.node, &right.node) {\n+        (&ExprAddrOf(ref lmut, ref le), &ExprAddrOf(ref rmut, ref re)) => {\n+            lmut == rmut && is_exp_equal(cx, le, re)\n+        }\n+        (&ExprBinary(lop, ref ll, ref lr), &ExprBinary(rop, ref rl, ref rr)) => {\n+            lop.node == rop.node && is_exp_equal(cx, ll, rl) && is_exp_equal(cx, lr, rr)\n+        }\n+        (&ExprCall(ref lfun, ref largs), &ExprCall(ref rfun, ref rargs)) => {\n+            is_exp_equal(cx, lfun, rfun) && is_exps_equal(cx, largs, rargs)\n+        }\n+        (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) => is_exp_equal(cx, lx, rx) && is_cast_ty_equal(lt, rt),\n         (&ExprField(ref lfexp, ref lfident), &ExprField(ref rfexp, ref rfident)) => {\n             lfident.node == rfident.node && is_exp_equal(cx, lfexp, rfexp)\n         }\n+        (&ExprIndex(ref la, ref li), &ExprIndex(ref ra, ref ri)) => {\n+            is_exp_equal(cx, la, ra) && is_exp_equal(cx, li, ri)\n+        }\n         (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n+        (&ExprMethodCall(ref lname, ref ltys, ref largs), &ExprMethodCall(ref rname, ref rtys, ref rargs)) => {\n+            // TODO: tys\n+            lname.node == rname.node && ltys.is_empty() && rtys.is_empty() && is_exps_equal(cx, largs, rargs)\n+        }\n         (&ExprPath(ref lqself, ref lsubpath), &ExprPath(ref rqself, ref rsubpath)) => {\n             both(lqself, rqself, is_qself_equal) && is_path_equal(lsubpath, rsubpath)\n         }\n         (&ExprTup(ref ltup), &ExprTup(ref rtup)) => is_exps_equal(cx, ltup, rtup),\n+        (&ExprTupField(ref le, li), &ExprTupField(ref re, ri)) => {\n+            li.node == ri.node && is_exp_equal(cx, le, re)\n+        }\n+        (&ExprUnary(lop, ref le), &ExprUnary(rop, ref re)) => {\n+            lop == rop && is_exp_equal(cx, le, re)\n+        }\n         (&ExprVec(ref l), &ExprVec(ref r)) => is_exps_equal(cx, l, r),\n-        (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) => is_exp_equal(cx, lx, rx) && is_cast_ty_equal(lt, rt),\n         _ => false,\n     }\n }"}, {"sha": "a29fd392c5e6be7439265d5b2326fce1164d4452", "filename": "tests/compile-fail/copies.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "patch": "@@ -0,0 +1,31 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+\n+fn foo() -> bool { unimplemented!() }\n+\n+fn main() {\n+    let a = 0;\n+\n+    if a == 1 {\n+    }\n+    else if a == 1 { //~ERROR this if as the same condition as a previous if\n+    }\n+\n+    if 2*a == 1 {\n+    }\n+    else if 2*a == 2 {\n+    }\n+    else if 2*a == 1 { //~ERROR this if as the same condition as a previous if\n+    }\n+    else if a == 1 {\n+    }\n+\n+    // Ok, maybe `foo` isn\u2019t pure and this actually makes sense. But you should probably refactor\n+    // this to make the intention clearer anyway.\n+    if foo() {\n+    }\n+    else if foo() { //~ERROR this if as the same condition as a previous if\n+    }\n+}"}]}