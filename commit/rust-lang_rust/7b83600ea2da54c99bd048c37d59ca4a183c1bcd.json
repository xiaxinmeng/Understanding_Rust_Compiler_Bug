{"sha": "7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiODM2MDBlYTJkYTU0Yzk5YmQwNDhjMzdkNTljYTRhMTgzYzFiY2Q=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-07-22T04:32:49Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-07-22T18:24:04Z"}, "message": "clarifying iterator trait documentation", "tree": {"sha": "25f3d133e0a1e4b9cbac7c5ca23a4278b9998e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f3d133e0a1e4b9cbac7c5ca23a4278b9998e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "html_url": "https://github.com/rust-lang/rust/commit/7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b83600ea2da54c99bd048c37d59ca4a183c1bcd/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfcde309e7748dfdf33418c2a1e6c6bdfbdcc8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfcde309e7748dfdf33418c2a1e6c6bdfbdcc8e2", "html_url": "https://github.com/rust-lang/rust/commit/bfcde309e7748dfdf33418c2a1e6c6bdfbdcc8e2"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "7706d01cbaed6bb3ee85d5994fa6359060866142", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b83600ea2da54c99bd048c37d59ca4a183c1bcd/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b83600ea2da54c99bd048c37d59ca4a183c1bcd/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=7b83600ea2da54c99bd048c37d59ca4a183c1bcd", "patch": "@@ -99,9 +99,10 @@ pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n     fn next(&mut self) -> Option<A>;\n \n-    /// Return a lower bound and upper bound on the remaining length of the iterator.\n+    /// Returns a lower and upper bound on the remaining length of the iterator.\n     ///\n-    /// The common use case for the estimate is pre-allocating space to store the results.\n+    /// An upper bound of `None` means either there is no known upper bound, or the upper bound\n+    /// does not fit within a `uint`.\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n \n@@ -644,6 +645,9 @@ pub trait Iterator<A> {\n }\n \n /// A range iterator able to yield elements from both ends\n+///\n+/// A `DoubleEndedIterator` can be thought of as a deque in that `next()` and `next_back()` exhaust\n+/// elements from the *same* range, and do not work independently of each other.\n pub trait DoubleEndedIterator<A>: Iterator<A> {\n     /// Yield an element from the end of the range, returning `None` if the range is empty.\n     fn next_back(&mut self) -> Option<A>;\n@@ -690,12 +694,15 @@ impl<'a, A, T: DoubleEndedIterator<&'a mut A>> MutableDoubleEndedIterator for T\n /// An object implementing random access indexing by `uint`\n ///\n /// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n+/// Calling `next()` or `next_back()` on a `RandomAccessIterator`\n+/// reduces the indexable range accordingly. That is, `it.idx(1)` will become `it.idx(0)`\n+/// after `it.next()` is called.\n pub trait RandomAccessIterator<A>: Iterator<A> {\n     /// Return the number of indexable elements. At most `std::uint::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n     fn indexable(&self) -> uint;\n \n-    /// Return an element at an index\n+    /// Return an element at an index, or `None` if the index is out of bounds\n     fn idx(&mut self, index: uint) -> Option<A>;\n }\n "}]}