{"sha": "572bb13ae537b198e7909911bf114d3cbb9f3d8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MmJiMTNhZTUzN2IxOThlNzkwOTkxMWJmMTE0ZDNjYmI5ZjNkOGU=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-05-17T20:58:09Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-05-17T21:13:04Z"}, "message": "Implement jackh726's suggestions", "tree": {"sha": "d7ea29794008bc093a88a56807163b94e95bbaad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ea29794008bc093a88a56807163b94e95bbaad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572bb13ae537b198e7909911bf114d3cbb9f3d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572bb13ae537b198e7909911bf114d3cbb9f3d8e", "html_url": "https://github.com/rust-lang/rust/commit/572bb13ae537b198e7909911bf114d3cbb9f3d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572bb13ae537b198e7909911bf114d3cbb9f3d8e/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d07d13266d321a2be15a18d335cf642dbd685c", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d07d13266d321a2be15a18d335cf642dbd685c", "html_url": "https://github.com/rust-lang/rust/commit/48d07d13266d321a2be15a18d335cf642dbd685c"}], "stats": {"total": 151, "additions": 137, "deletions": 14}, "files": [{"sha": "8bbd2da5375130f432ce85e73d8e0f6d8f09adf9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -689,17 +689,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // Blacklist traits for which it would be nonsensical to suggest borrowing.\n         // For instance, immutable references are always Copy, so suggesting to\n         // borrow would always succeed, but it's probably not what the user wanted.\n-        let blacklist: Vec<_> = [\n-            LangItem::Copy,\n-            LangItem::Clone,\n-            LangItem::Pin,\n-            LangItem::Unpin,\n-            LangItem::Sized,\n-            LangItem::Send,\n-        ]\n-        .iter()\n-        .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n-        .collect();\n+        let blacklist: Vec<_> =\n+            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized, LangItem::Send]\n+                .iter()\n+                .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n+                .collect();\n \n         let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n@@ -771,7 +765,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err.span_suggestion(\n                             span,\n                             &format!(\n-                                \"consider borrowing{} here\",\n+                                \"consider{} borrowing here\",\n                                 if mtbl { \" mutably\" } else { \"\" }\n                             ),\n                             format!(\"&{}{}\", if mtbl { \"mut \" } else { \"\" }, snippet),"}, {"sha": "bd060c92cd4699f3c8872bd3d7350a62d74180f6", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -24,7 +24,7 @@ LL |   foo(s);\n    |       ^\n    |       |\n    |       expected an implementor of trait `Trait`\n-   |       help: consider borrowing mutably here: `&mut s`\n+   |       help: consider mutably borrowing here: `&mut s`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6ed437b5eefd7f71493222d1f65d8b9b5fe7fd8", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -8,7 +8,7 @@ LL |     foo(a);\n    |         ^\n    |         |\n    |         expected an implementor of trait `Tr`\n-   |         help: consider borrowing mutably here: `&mut a`\n+   |         help: consider mutably borrowing here: `&mut a`\n \n error: aborting due to previous error\n "}, {"sha": "db954530b1bebe34acb5cb34ac2de3a2146e5880", "filename": "src/test/ui/suggestions/issue-84973-blacklist.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.rs?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -0,0 +1,29 @@\n+// Checks that certain traits for which we don't want to suggest borrowing\n+// are blacklisted and don't cause the suggestion to be issued.\n+\n+#![feature(generators)]\n+\n+fn f_copy<T: Copy>(t: T) {}\n+fn f_clone<T: Clone>(t: T) {}\n+fn f_unpin<T: Unpin>(t: T) {}\n+fn f_sized<T: Sized>(t: T) {}\n+fn f_send<T: Send>(t: T) {}\n+\n+struct S;\n+\n+fn main() {\n+    f_copy(\"\".to_string()); //~ ERROR: the trait bound `String: Copy` is not satisfied [E0277]\n+    f_clone(S); //~ ERROR: the trait bound `S: Clone` is not satisfied [E0277]\n+    f_unpin(static || { yield; });\n+    //~^ ERROR: cannot be unpinned [E0277]\n+\n+    let cl = || ();\n+    let ref_cl: &dyn Fn() -> () = &cl;\n+    f_sized(*ref_cl);\n+    //~^ ERROR: the size for values of type `dyn Fn()` cannot be known at compilation time [E0277]\n+    //~| ERROR: the size for values of type `dyn Fn()` cannot be known at compilation time [E0277]\n+\n+    use std::rc::Rc;\n+    let rc = Rc::new(0);\n+    f_send(rc); //~ ERROR: `Rc<{integer}>` cannot be sent between threads safely [E0277]\n+}"}, {"sha": "f1e6ef883ae904e964a384de5cac221d467d30d0", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -0,0 +1,64 @@\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/issue-84973-blacklist.rs:15:12\n+   |\n+LL | fn f_copy<T: Copy>(t: T) {}\n+   |              ---- required by this bound in `f_copy`\n+...\n+LL |     f_copy(\"\".to_string());\n+   |            ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+\n+error[E0277]: the trait bound `S: Clone` is not satisfied\n+  --> $DIR/issue-84973-blacklist.rs:16:13\n+   |\n+LL | fn f_clone<T: Clone>(t: T) {}\n+   |               ----- required by this bound in `f_clone`\n+...\n+LL |     f_clone(S);\n+   |             ^ the trait `Clone` is not implemented for `S`\n+\n+error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]` cannot be unpinned\n+  --> $DIR/issue-84973-blacklist.rs:17:5\n+   |\n+LL | fn f_unpin<T: Unpin>(t: T) {}\n+   |               ----- required by this bound in `f_unpin`\n+...\n+LL |     f_unpin(static || { yield; });\n+   |     ^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]`\n+   |\n+   = note: consider using `Box::pin`\n+\n+error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilation time\n+  --> $DIR/issue-84973-blacklist.rs:22:13\n+   |\n+LL | fn f_sized<T: Sized>(t: T) {}\n+   |            - required by this bound in `f_sized`\n+...\n+LL |     f_sized(*ref_cl);\n+   |             ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Fn()`\n+\n+error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n+  --> $DIR/issue-84973-blacklist.rs:28:12\n+   |\n+LL | fn f_send<T: Send>(t: T) {}\n+   |              ---- required by this bound in `f_send`\n+...\n+LL |     f_send(rc);\n+   |            ^^ `Rc<{integer}>` cannot be sent between threads safely\n+   |\n+   = help: the trait `Send` is not implemented for `Rc<{integer}>`\n+\n+error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilation time\n+  --> $DIR/issue-84973-blacklist.rs:22:5\n+   |\n+LL |     f_sized(*ref_cl);\n+   |     ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Fn()`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f339251e57dabd49ab830695553153409f4719a8", "filename": "src/test/ui/suggestions/issue-84973-negative.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.rs?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -0,0 +1,12 @@\n+// Checks that we only suggest borrowing if &T actually implements the trait.\n+\n+trait Tr {}\n+impl Tr for &f32 {}\n+fn bar<T: Tr>(t: T) {}\n+\n+fn main() {\n+    let a = 0i32;\n+    let b = 0.0f32;\n+    bar(a); //~ ERROR: the trait bound `i32: Tr` is not satisfied [E0277]\n+    bar(b); //~ ERROR: the trait bound `f32: Tr` is not satisfied [E0277]\n+}"}, {"sha": "94513eca0bf0994077ee5530cb8650f308e2f264", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572bb13ae537b198e7909911bf114d3cbb9f3d8e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=572bb13ae537b198e7909911bf114d3cbb9f3d8e", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `i32: Tr` is not satisfied\n+  --> $DIR/issue-84973-negative.rs:10:9\n+   |\n+LL | fn bar<T: Tr>(t: T) {}\n+   |           -- required by this bound in `bar`\n+...\n+LL |     bar(a);\n+   |         ^ the trait `Tr` is not implemented for `i32`\n+\n+error[E0277]: the trait bound `f32: Tr` is not satisfied\n+  --> $DIR/issue-84973-negative.rs:11:9\n+   |\n+LL | fn bar<T: Tr>(t: T) {}\n+   |           -- required by this bound in `bar`\n+...\n+LL |     bar(b);\n+   |         ^\n+   |         |\n+   |         expected an implementor of trait `Tr`\n+   |         help: consider borrowing here: `&b`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}