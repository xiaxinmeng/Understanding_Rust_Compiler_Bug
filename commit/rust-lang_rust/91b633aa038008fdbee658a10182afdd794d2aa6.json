{"sha": "91b633aa038008fdbee658a10182afdd794d2aa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjYzM2FhMDM4MDA4ZmRiZWU2NThhMTAxODJhZmRkNzk0ZDJhYTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-24T21:56:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-24T21:56:00Z"}, "message": "rollup merge of #23546: alexcrichton/hyphens\n\nThe compiler will now issue a warning for crates that have syntax of the form\n`extern crate \"foo\" as bar`, but it will still continue to accept this syntax.\nAdditionally, the string `foo-bar` will match the crate name `foo_bar` to assist\nin the transition period as well.\n\nThis patch will land hopefully in tandem with a Cargo patch that will start\ntranslating all crate names to have underscores instead of hyphens.\n\ncc #23533", "tree": {"sha": "9aace54d26dfdc7e66a1ec1b273f00770b801ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aace54d26dfdc7e66a1ec1b273f00770b801ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b633aa038008fdbee658a10182afdd794d2aa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b633aa038008fdbee658a10182afdd794d2aa6", "html_url": "https://github.com/rust-lang/rust/commit/91b633aa038008fdbee658a10182afdd794d2aa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b633aa038008fdbee658a10182afdd794d2aa6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed8733ea39927d267f4e99c16d3fdca671d8315", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed8733ea39927d267f4e99c16d3fdca671d8315", "html_url": "https://github.com/rust-lang/rust/commit/5ed8733ea39927d267f4e99c16d3fdca671d8315"}, {"sha": "eb2f1d925ffdb79d45c7b74cef549e54533c3951", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2f1d925ffdb79d45c7b74cef549e54533c3951", "html_url": "https://github.com/rust-lang/rust/commit/eb2f1d925ffdb79d45c7b74cef549e54533c3951"}], "stats": {"total": 289, "additions": 144, "deletions": 145}, "files": [{"sha": "7d8789c3cd1a81873f6a32c5ecb25781a6bbe9af", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -73,22 +73,24 @@ struct CrateInfo {\n }\n \n pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let err = |s: &str| {\n+    let say = |s: &str, warn: bool| {\n         match (sp, sess) {\n             (_, None) => panic!(\"{}\", s),\n+            (Some(sp), Some(sess)) if warn => sess.span_warn(sp, s),\n             (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+            (None, Some(sess)) if warn => sess.warn(s),\n             (None, Some(sess)) => sess.err(s),\n         }\n     };\n     if s.len() == 0 {\n-        err(\"crate name must not be empty\");\n-    } else if s.char_at(0) == '-' {\n-        err(&format!(\"crate name cannot start with a hyphen: {}\", s));\n+        say(\"crate name must not be empty\", false);\n+    } else if s.contains(\"-\") {\n+        say(&format!(\"crate names soon cannot contain hyphens: {}\", s), true);\n     }\n     for c in s.chars() {\n         if c.is_alphanumeric() { continue }\n         if c == '_' || c == '-' { continue }\n-        err(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s), false);\n     }\n     match sess {\n         Some(sess) => sess.abort_if_errors(),\n@@ -153,8 +155,9 @@ impl<'a> CrateReader<'a> {\n         }\n     }\n \n-    // Traverses an AST, reading all the information about use'd crates and extern\n-    // libraries necessary for later resolving, typechecking, linking, etc.\n+    // Traverses an AST, reading all the information about use'd crates and\n+    // extern libraries necessary for later resolving, typechecking, linking,\n+    // etc.\n     pub fn read_crates(&mut self, krate: &ast::Crate) {\n         self.process_crate(krate);\n         visit::walk_crate(self, krate);\n@@ -184,11 +187,10 @@ impl<'a> CrateReader<'a> {\n                 debug!(\"resolving extern crate stmt. ident: {} path_opt: {:?}\",\n                        ident, path_opt);\n                 let name = match *path_opt {\n-                    Some((ref path_str, _)) => {\n-                        let name = path_str.to_string();\n-                        validate_crate_name(Some(self.sess), &name[..],\n+                    Some(name) => {\n+                        validate_crate_name(Some(self.sess), name.as_str(),\n                                             Some(i.span));\n-                        name\n+                        name.as_str().to_string()\n                     }\n                     None => ident.to_string(),\n                 };\n@@ -304,7 +306,13 @@ impl<'a> CrateReader<'a> {\n                       -> Option<ast::CrateNum> {\n         let mut ret = None;\n         self.sess.cstore.iter_crate_data(|cnum, data| {\n-            if data.name != name { return }\n+            // For now we do a \"fuzzy match\" on crate names by considering\n+            // hyphens equal to underscores. This is purely meant to be a\n+            // transitionary feature while we deprecate the quote syntax of\n+            // `extern crate` statements.\n+            if data.name != name.replace(\"-\", \"_\") {\n+                return\n+            }\n \n             match hash {\n                 Some(hash) if *hash == data.hash() => { ret = Some(cnum); return }"}, {"sha": "327e5ab38822950ed2433a544687345e9fcc4e90", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -1165,7 +1165,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                 let name = get_ident(item.ident);\n                 let name = &name;\n                 let location = match *s {\n-                    Some((ref s, _)) => s.to_string(),\n+                    Some(s) => s.to_string(),\n                     None => name.to_string(),\n                 };\n                 let alias_span = self.span.span_for_last_ident(item.span);"}, {"sha": "3f813b30ecc1d748aad6cf52d173a93adc861de7", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             ast::ItemExternCrate(ref p) => {\n                 let path = match *p {\n                     None => None,\n-                    Some((ref x, _)) => Some(x.to_string()),\n+                    Some(x) => Some(x.to_string()),\n                 };\n                 om.extern_crates.push(ExternCrate {\n                     name: name,"}, {"sha": "fec67c7aef48f56213af98901842687da63e0c6d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -1771,8 +1771,8 @@ pub struct Item {\n pub enum Item_ {\n     /// An`extern crate` item, with optional original crate name,\n     ///\n-    /// e.g. `extern crate foo` or `extern crate \"foo-bar\" as foo`\n-    ItemExternCrate(Option<(InternedString, StrStyle)>),\n+    /// e.g. `extern crate foo` or `extern crate foo_bar as foo`\n+    ItemExternCrate(Option<Name>),\n     /// A `use` or `pub use` item\n     ItemUse(P<ViewPath>),\n "}, {"sha": "4e85176121221debe0a40f2ffa89fe8fd5daaa91", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -1060,7 +1060,7 @@ mod test {\n         let vitem_s = item_to_string(&*vitem);\n         assert_eq!(&vitem_s[..], ex_s);\n \n-        let ex_s = \"extern crate \\\"foo\\\" as bar;\";\n+        let ex_s = \"extern crate foo as bar;\";\n         let vitem = string_to_item(ex_s.to_string()).unwrap();\n         let vitem_s = item_to_string(&*vitem);\n         assert_eq!(&vitem_s[..], ex_s);"}, {"sha": "276be73823a421dec63d6a22791bfd239f634d43", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -24,6 +24,7 @@ use ptr::P;\n pub enum ObsoleteSyntax {\n     ClosureKind,\n     EmptyIndex,\n+    ExternCrateString,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -56,6 +57,11 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"write `[..]` instead\",\n                 false, // warning for now\n             ),\n+            ObsoleteSyntax::ExternCrateString => (\n+                \"\\\"crate-name\\\"\",\n+                \"use an identifier not in quotes instead\",\n+                false, // warning for now\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc, error);"}, {"sha": "220ea30256e03cba2014e41a1bdb663671b95e49", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -4986,37 +4986,28 @@ impl<'a> Parser<'a> {\n                                 attrs: Vec<Attribute>)\n                                 -> P<Item> {\n \n-        let span = self.span;\n         let (maybe_path, ident) = match self.token {\n             token::Ident(..) => {\n-                let the_ident = self.parse_ident();\n-                let path = if self.eat_keyword_noexpect(keywords::As) {\n-                    // skip the ident if there is one\n-                    if self.token.is_ident() { self.bump(); }\n-\n-                    self.span_err(span, \"expected `;`, found `as`\");\n-                    self.fileline_help(span,\n-                                   &format!(\"perhaps you meant to enclose the crate name `{}` in \\\n-                                           a string?\",\n-                                          the_ident.as_str()));\n-                    None\n+                let crate_name = self.parse_ident();\n+                if self.eat_keyword(keywords::As) {\n+                    (Some(crate_name.name), self.parse_ident())\n                 } else {\n-                    None\n-                };\n-                self.expect(&token::Semi);\n-                (path, the_ident)\n+                    (None, crate_name)\n+                }\n             },\n-            token::Literal(token::Str_(..), suf) | token::Literal(token::StrRaw(..), suf) => {\n+            token::Literal(token::Str_(..), suf) |\n+            token::Literal(token::StrRaw(..), suf) => {\n                 let sp = self.span;\n                 self.expect_no_suffix(sp, \"extern crate name\", suf);\n                 // forgo the internal suffix check of `parse_str` to\n                 // avoid repeats (this unwrap will always succeed due\n                 // to the restriction of the `match`)\n-                let (s, style, _) = self.parse_optional_str().unwrap();\n+                let (s, _, _) = self.parse_optional_str().unwrap();\n                 self.expect_keyword(keywords::As);\n                 let the_ident = self.parse_ident();\n-                self.expect(&token::Semi);\n-                (Some((s, style)), the_ident)\n+                self.obsolete(sp, ObsoleteSyntax::ExternCrateString);\n+                let s = token::intern(&s);\n+                (Some(s), the_ident)\n             },\n             _ => {\n                 let span = self.span;\n@@ -5027,6 +5018,7 @@ impl<'a> Parser<'a> {\n                                         token_str));\n             }\n         };\n+        self.expect(&token::Semi);\n \n         let last_span = self.last_span;\n         self.mk_item(lo,"}, {"sha": "2bc3fc1017ae6808e7940d2e7b75822fe8f8408d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -821,8 +821,13 @@ impl<'a> State<'a> {\n             ast::ItemExternCrate(ref optional_path) => {\n                 try!(self.head(&visibility_qualified(item.vis,\n                                                      \"extern crate\")));\n-                if let Some((ref p, style)) = *optional_path {\n-                    try!(self.print_string(p, style));\n+                if let Some(p) = *optional_path {\n+                    let val = token::get_name(p);\n+                    if val.contains(\"-\") {\n+                        try!(self.print_string(&val, ast::CookedStr));\n+                    } else {\n+                        try!(self.print_name(p));\n+                    }\n                     try!(space(&mut self.s));\n                     try!(word(&mut self.s, \"as\"));\n                     try!(space(&mut self.s));"}, {"sha": "0fa7e4f902c6c63dad243bd548c04e0d902212f8", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -54,8 +54,8 @@ impl fold::Folder for StandardLibraryInjector {\n \n         // The name to use in `extern crate \"name\" as std;`\n         let actual_crate_name = match self.alt_std_name {\n-            Some(ref s) => token::intern_and_get_ident(&s[..]),\n-            None => token::intern_and_get_ident(\"std\"),\n+            Some(ref s) => token::intern(&s),\n+            None => token::intern(\"std\"),\n         };\n \n         krate.module.items.insert(0, P(ast::Item {\n@@ -64,7 +64,7 @@ impl fold::Folder for StandardLibraryInjector {\n             attrs: vec!(\n                 attr::mk_attr_outer(attr::mk_attr_id(), attr::mk_word_item(\n                         InternedString::new(\"macro_use\")))),\n-            node: ast::ItemExternCrate(Some((actual_crate_name, ast::CookedStr))),\n+            node: ast::ItemExternCrate(Some(actual_crate_name)),\n             vis: ast::Inherited,\n             span: DUMMY_SP\n         }));"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/auxiliary/coherence_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence_lib.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/coherence-lib.rs"}, {"sha": "93d8fd3da88fb0a04fae16938dfdc12533b6aaf3", "filename": "src/test/auxiliary/coherence_orphan_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fcoherence_orphan_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fcoherence_orphan_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence_orphan_lib.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/coherence-orphan-lib.rs"}, {"sha": "249a1bab465e9b341fbd2c4fe422822b259c13c8", "filename": "src/test/auxiliary/issue_11680.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_11680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_11680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_11680.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/issue-11680.rs"}, {"sha": "a0234c1185a9789f8e449952538dba150886f0fa", "filename": "src/test/auxiliary/issue_12612_1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_12612_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_12612_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_12612_1.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/issue-12612-1.rs"}, {"sha": "b4ae4374b2e58001196decbb9e3cc814eb30f5f8", "filename": "src/test/auxiliary/issue_12612_2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_12612_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_12612_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_12612_2.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/issue-12612-2.rs"}, {"sha": "b3b04b4a5ac13534824b834bff6100ab2d5c2193", "filename": "src/test/auxiliary/issue_16725.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_16725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_16725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16725.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/issue-16725.rs"}, {"sha": "3657d39ff77e4824aa4362ab9feebca02eec8945", "filename": "src/test/auxiliary/issue_17718_const_privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_17718_const_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_17718_const_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_17718_const_privacy.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/issue-17718-const-privacy.rs"}, {"sha": "afdbf78aa8292ccf956343c257260e8b43ef9f12", "filename": "src/test/auxiliary/issue_21202.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_21202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fissue_21202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_21202.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/issue-21202.rs"}, {"sha": "2661b1f4eb49b7a93d03ca34e2563991eb2e37c3", "filename": "src/test/auxiliary/lint_unused_extern_crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Flint_unused_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Flint_unused_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_unused_extern_crate.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/lint-unused-extern-crate.rs"}, {"sha": "2fb9d9923cb76b6f50380b290485b0b5d1d77e69", "filename": "src/test/auxiliary/privacy_tuple_struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fprivacy_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fprivacy_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivacy_tuple_struct.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/privacy-tuple-struct.rs"}, {"sha": "9c0716e2cc2a5e7e92786906e996817858d2d54b", "filename": "src/test/auxiliary/regions_bounded_method_type_parameters_cross_crate_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fregions_bounded_method_type_parameters_cross_crate_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fregions_bounded_method_type_parameters_cross_crate_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fregions_bounded_method_type_parameters_cross_crate_lib.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/regions-bounded-method-type-parameters-cross-crate-lib.rs"}, {"sha": "e2c16ae8b5c492c6e9bedaacc27ea5bd39cdd9fb", "filename": "src/test/auxiliary/struct_field_privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fstruct_field_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Fstruct_field_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_field_privacy.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/struct-field-privacy.rs"}, {"sha": "d5437690acdc74705e1b6ea3831c035ca42462db", "filename": "src/test/auxiliary/trait_safety_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Ftrait_safety_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Ftrait_safety_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_safety_lib.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/trait-safety-lib.rs"}, {"sha": "5a7a3e7bcc6942ac1b5a7495bd8a569990674cd1", "filename": "src/test/auxiliary/typeck_default_trait_impl_cross_crate_coherence_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Ftypeck_default_trait_impl_cross_crate_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Ftypeck_default_trait_impl_cross_crate_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeck_default_trait_impl_cross_crate_coherence_lib.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/typeck-default-trait-impl-cross-crate-coherence-lib.rs"}, {"sha": "8ca85f20ab2f67e405e73429b664228c296fae44", "filename": "src/test/auxiliary/unreachable_variant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Funreachable_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fauxiliary%2Funreachable_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funreachable_variant.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "previous_filename": "src/test/auxiliary/unreachable-variant.rs"}, {"sha": "193666f826932f9bbf28fe51220c919824ba26a8", "filename": "src/test/compile-fail/bad-crate-id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fbad-crate-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fbad-crate-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-crate-id.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n extern crate \"\" as foo; //~ ERROR: crate name must not be empty\n+//~^ WARNING: obsolete syntax\n \n fn main() {}"}, {"sha": "29df0fa705e1a72c57624b3260078eac9d9a25ac", "filename": "src/test/compile-fail/bad-crate-id2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n extern crate \"#a\" as bar; //~ ERROR: invalid character `#` in crate name: `#a`\n+//~^ WARNING: obsolete syntax\n \n fn main() {}"}, {"sha": "7a5340041c21bd911f3eaa8646bcd9df766eb70d", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n impl<T> Remote1<T> for isize { }"}, {"sha": "32c5b6693814ecada9787e5c319975b574acdd7f", "filename": "src/test/compile-fail/coherence-bigint-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub struct BigInt;"}, {"sha": "475d7df1fdb4f7acb5ce91f7b5640f359813c5bd", "filename": "src/test/compile-fail/coherence-cow-no-cover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // Test that it's not ok for U to appear uncovered\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);"}, {"sha": "e78f392b386bbb0841a281e5e302ed2467b10ce7", "filename": "src/test/compile-fail/coherence-lone-type-parameter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote;\n \n impl<T> Remote for T { }"}, {"sha": "2243a0507f2d14cc4a32d8f70cbaf5ed2d79d55e", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// aux-build:coherence-orphan-lib.rs\n+// aux-build:coherence_orphan_lib.rs\n \n #![feature(optin_builtin_traits)]\n \n-extern crate \"coherence-orphan-lib\" as lib;\n+extern crate coherence_orphan_lib as lib;\n \n use lib::TheTrait;\n "}, {"sha": "ba9dc53e8680f6d683591f3a4b45e2193501e205", "filename": "src/test/compile-fail/coherence-overlapping-pairs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Foo;"}, {"sha": "f55efef14fade3b47adc5d4825f500310211f1a7", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -11,9 +11,9 @@\n // Test that the same coverage rules apply even if the local type appears in the\n // list of type parameters, not the self type.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::{Remote1, Pair};\n \n pub struct Local<T>(T);"}, {"sha": "0642dff4b28257baa2d9caf866fd3b28b0c2877e", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::{Remote, Pair};\n \n struct Local<T>(T);"}, {"sha": "d0cb4f23a8c2844a27094dd0a19db8393d5b0b86", "filename": "src/test/compile-fail/derive-no-std-not-supported.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderive-no-std-not-supported.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -13,7 +13,7 @@\n \n extern crate core;\n extern crate rand;\n-extern crate \"serialize\" as rustc_serialize;\n+extern crate serialize as rustc_serialize;\n \n #[derive(Rand)]  //~ ERROR this trait cannot be derived\n //~^ WARNING `#[derive(Rand)]` is deprecated"}, {"sha": "1bd7b0aa1c27913f4b6537354d0022d9736fb83e", "filename": "src/test/compile-fail/issue-11680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-11680.rs\n+// aux-build:issue_11680.rs\n \n-extern crate \"issue-11680\" as other;\n+extern crate issue_11680 as other;\n \n fn main() {\n     let _b = other::Foo::Bar(1);"}, {"sha": "f76d12d93fdf68cf9227aa2c3a5e97bb792861d9", "filename": "src/test/compile-fail/issue-12612.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-12612-1.rs\n+// aux-build:issue_12612_1.rs\n \n-extern crate \"issue-12612-1\" as foo;\n+extern crate issue_12612_1 as foo;\n \n use foo::bar;\n "}, {"sha": "cadf602a4cfc4aa962c34d062c130b721c7c7610", "filename": "src/test/compile-fail/issue-16725.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-16725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-16725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16725.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-16725.rs\n+// aux-build:issue_16725.rs\n \n-extern crate \"issue-16725\" as foo;\n+extern crate issue_16725 as foo;\n \n fn main() {\n     unsafe { foo::bar(); }"}, {"sha": "021edbee566ba526514ac87f515df1bb23c716fa", "filename": "src/test/compile-fail/issue-17718-const-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-17718-const-privacy.rs\n+// aux-build:issue_17718_const_privacy.rs\n \n-extern crate \"issue-17718-const-privacy\" as other;\n+extern crate issue_17718_const_privacy as other;\n \n use a::B; //~ ERROR: const `B` is private\n use other::{"}, {"sha": "2bce838c1cfdc926bc32f1643b67666322a16a71", "filename": "src/test/compile-fail/issue-21202.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-21202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fissue-21202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21202.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-21202.rs\n+// aux-build:issue_21202.rs\n \n-extern crate \"issue-21202\" as crate1;\n+extern crate issue_21202 as crate1;\n \n use crate1::A;\n "}, {"sha": "854c51d0769e71bfb6f31bcd8a8d21cc2fdd17eb", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:lint-unused-extern-crate.rs\n+// aux-build:lint_unused_extern_crate.rs\n \n #![deny(unused_extern_crates)]\n #![allow(unused_variables)]\n@@ -19,12 +19,12 @@\n \n extern crate libc; //~ ERROR: unused extern crate\n \n-extern crate \"collections\" as collecs; // no error, it is used\n+extern crate collections as collecs; // no error, it is used\n \n extern crate rand; // no error, the use marks it as used\n                    // even if imported objects aren't used\n \n-extern crate \"lint-unused-extern-crate\" as other; // no error, the use * marks it as used\n+extern crate lint_unused_extern_crate as other; // no error, the use * marks it as used\n \n #[allow(unused_imports)]\n use rand::isaac::IsaacRng;"}, {"sha": "4ca37fc2ad209f6fd1eaab56f01bf0e80b156759", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:privacy-tuple-struct.rs\n+// aux-build:privacy_tuple_struct.rs\n \n-extern crate \"privacy-tuple-struct\" as other;\n+extern crate privacy_tuple_struct as other;\n \n mod a {\n     pub struct A(());\n@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 of struct `privacy-tuple-struct::A` is private\n+    let other::A(()) = a; //~ ERROR: field #1 of struct `privacy_tuple_struct::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #1 of struct `privacy-tuple-struct::A` is private\n+    //~^ ERROR: field #1 of struct `privacy_tuple_struct::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 of struct `privacy-tuple-struct::B` is private\n+    let other::B(_b) = b; //~ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #1 of struct `privacy-tuple-struct::B` is private\n+    //~^ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #1 of struct `privacy-tuple-struct::B` is private\n+    //~^ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n+    //~^ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #2 of struct `privacy-tuple-struct::C` is private\n+    //~^ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}, {"sha": "82d05c5d716aabe1238e3f95d3f0faf085ecddd2", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:regions-bounded-method-type-parameters-cross-crate-lib.rs\n+// aux-build:regions_bounded_method_type_parameters_cross_crate_lib.rs\n \n // Check explicit region bounds on methods in the cross crate case.\n \n-extern crate \"regions-bounded-method-type-parameters-cross-crate-lib\" as lib;\n+extern crate regions_bounded_method_type_parameters_cross_crate_lib as lib;\n \n use lib::Inv;\n use lib::MaybeOwned;"}, {"sha": "04a731e847ad3801eaa1dffe167266973c4dfe0c", "filename": "src/test/compile-fail/static-array-across-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fstatic-array-across-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fstatic-array-across-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-array-across-crate.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:pub_static_array.rs\n \n-extern crate \"pub_static_array\" as array;\n+extern crate pub_static_array as array;\n \n use array::ARRAY;\n "}, {"sha": "a1b6b9a744c72c56da60b731c7d86318f7ea5044", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:struct-field-privacy.rs\n+// aux-build:struct_field_privacy.rs\n \n-extern crate \"struct-field-privacy\" as xc;\n+extern crate struct_field_privacy as xc;\n \n struct A {\n     a: isize,\n@@ -37,11 +37,11 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n     c.a;\n     c.b; //~ ERROR: field `b` of struct `inner::B` is private\n \n-    d.a; //~ ERROR: field `a` of struct `struct-field-privacy::A` is private\n+    d.a; //~ ERROR: field `a` of struct `struct_field_privacy::A` is private\n     d.b;\n \n     e.a;\n-    e.b; //~ ERROR: field `b` of struct `struct-field-privacy::B` is private\n+    e.b; //~ ERROR: field `b` of struct `struct_field_privacy::B` is private\n }\n \n fn main() {}"}, {"sha": "f987257d4eea93fc06ac32c7818c6e9d5dad25da", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:struct-field-privacy.rs\n+// aux-build:struct_field_privacy.rs\n \n-extern crate \"struct-field-privacy\" as xc;\n+extern crate struct_field_privacy as xc;\n \n use xc::B;\n \n@@ -22,9 +22,9 @@ struct A {\n fn main () {\n     // external crate struct\n     let k = B {\n-        aa: 20, //~ ERROR structure `struct-field-privacy::B` has no field named `aa`\n+        aa: 20, //~ ERROR structure `struct_field_privacy::B` has no field named `aa`\n         //~^ HELP did you mean `a`?\n-        bb: 20, //~ ERROR structure `struct-field-privacy::B` has no field named `bb`\n+        bb: 20, //~ ERROR structure `struct_field_privacy::B` has no field named `bb`\n     };\n     // local crate struct\n     let l = A {"}, {"sha": "6050b549b656f5bf5f228686136a98ab014ed14b", "filename": "src/test/compile-fail/trait-safety-trait-impl-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-trait-impl-cc.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:trait-safety-lib.rs\n+// aux-build:trait_safety_lib.rs\n \n // Check that unsafe traits require unsafe impls and that inherent\n // impls cannot be unsafe.\n \n-extern crate \"trait-safety-lib\" as lib;\n+extern crate trait_safety_lib as lib;\n \n struct Bar;\n impl lib::Foo for Bar { //~ ERROR requires an `unsafe impl` declaration"}, {"sha": "7d25c04882f24e0a459ab38aaabaf73c2e6edabe", "filename": "src/test/compile-fail/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:typeck-default-trait-impl-cross-crate-coherence-lib.rs\n+// aux-build:typeck_default_trait_impl_cross_crate_coherence_lib.rs\n \n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE).\n \n #![feature(optin_builtin_traits)]\n \n-extern crate \"typeck-default-trait-impl-cross-crate-coherence-lib\" as lib;\n+extern crate typeck_default_trait_impl_cross_crate_coherence_lib as lib;\n \n use lib::DefaultedTrait;\n "}, {"sha": "5983c83f8b401b59646632d17de96c19d0d6d3c4", "filename": "src/test/compile-fail/unreachable-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Funreachable-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fcompile-fail%2Funreachable-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-variant.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:unreachable-variant.rs\n+// aux-build:unreachable_variant.rs\n \n-extern crate \"unreachable-variant\" as other;\n+extern crate unreachable_variant as other;\n \n fn main() {\n     let _x = other::super_sekrit::sooper_sekrit::baz; //~ ERROR is private"}, {"sha": "9e5fe4ab8a986e8b8b3068afb7192677ee6a6ee4", "filename": "src/test/parse-fail/bad-lit-suffixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -11,6 +11,7 @@\n \n extern crate\n     \"foo\"suffix //~ ERROR extern crate name with a suffix is illegal\n+                //~^ WARNING: obsolete syntax\n      as foo;\n \n extern"}, {"sha": "5cc52f6f6dbff8c052a3f9c6a4a183b24bc59176", "filename": "src/test/parse-fail/extern-crate-as-no-string-help.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ed8733ea39927d267f4e99c16d3fdca671d8315/src%2Ftest%2Fparse-fail%2Fextern-crate-as-no-string-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed8733ea39927d267f4e99c16d3fdca671d8315/src%2Ftest%2Fparse-fail%2Fextern-crate-as-no-string-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fextern-crate-as-no-string-help.rs?ref=5ed8733ea39927d267f4e99c16d3fdca671d8315", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests that the proper help is displayed in the error message\n-\n-extern crate foo as bar;\n-//~^ ERROR expected `;`, found `as`\n-//~^^ HELP perhaps you meant to enclose the crate name `foo` in a string?"}, {"sha": "1ff4368dac5e2fac4824caf06e11d4b2657266be", "filename": "src/test/parse-fail/extern-foreign-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fparse-fail%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fparse-fail%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fextern-foreign-crate.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -11,4 +11,4 @@\n // Verifies that the expected token errors for `extern crate` are\n // raised\n \n-extern crate foo {} //~ERROR expected `;`, found `{`\n+extern crate foo {} //~ERROR expected one of `;` or `as`, found `{`"}, {"sha": "c2ed10ce6a18746d07edd9bf7d11f44537459f6d", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -3,7 +3,7 @@\n #[prelude_import]\n use std::prelude::v1::*;\n #[macro_use]\n-extern crate \"std\" as std;\n+extern crate std as std;\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "bce78e4f4c1f8cff3ce5d94c870e981bbb278ce8", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -13,6 +13,6 @@\n #![feature(asm)]\n \n #[cfg(foo = r#\"just parse this\"#)]\n-extern crate r##\"blah\"## as blah;\n+extern crate blah as blah;\n \n fn main() { unsafe { asm!(r###\"blah\"###); } }"}, {"sha": "2172ed888b1423c69ce20b32f0e8fff483660596", "filename": "src/test/run-make/weird-output-filenames/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -12,4 +12,4 @@ all:\n \t\t| grep \"invalid character.*in crate name:\"\n \tcp foo.rs $(TMPDIR)/-foo.rs\n \t$(RUSTC) $(TMPDIR)/-foo.rs 2>&1 \\\n-\t\t| grep \"crate name cannot start with a hyphen:\"\n+\t\t| grep \"soon cannot contain hyphens:\""}, {"sha": "9ad4f6b9d75c732c384efa422ee0cfb73575b6e5", "filename": "src/test/run-pass/coherence-bigint-int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub struct BigInt;"}, {"sha": "ac4b98cfc8c8186c5f4bf094fcf423fe7068dba5", "filename": "src/test/run-pass/coherence-bigint-vecint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub struct BigInt;"}, {"sha": "32743aafa823669a2280ad55a8016d54ee6d9fe8", "filename": "src/test/run-pass/coherence-blanket.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n pub trait Local {"}, {"sha": "890470d8ac242e5f51f721b1d889774a8c42b504", "filename": "src/test/run-pass/coherence-covered-type-parameter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Foo<T>(T);"}, {"sha": "31f6c9af0202433693e8ff734c0901a6ac18e5b5", "filename": "src/test/run-pass/coherence-cow-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-cow-1.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // Test that it's ok for T to appear first in the self-type, as long\n // as it's covered somewhere.\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);"}, {"sha": "ccda8440ea228d5bad2fd424cdd407bbd8bf31f6", "filename": "src/test/run-pass/coherence-cow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-cow-2.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // Test that it's ok for T to appear second in the self-type, as long\n // as it's covered somewhere.\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::{Remote,Pair};\n \n pub struct Cover<T>(T);"}, {"sha": "04a6cd58827893c14d6e95f2612a0df543e95248", "filename": "src/test/run-pass/coherence-iterator-vec-any-elem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec-any-elem.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n struct Foo<T>(T);"}, {"sha": "8a3301dee273dbf32ef931a6b984a0d5d59ad309", "filename": "src/test/run-pass/coherence-iterator-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote1;\n \n struct Foo<T>(T);"}, {"sha": "21faa30245d9a55549eb559d590f0d968994150b", "filename": "src/test/run-pass/coherence-local-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local;"}, {"sha": "5fd3e8ca86ef791d8e0eb740c1e8df959c44b096", "filename": "src/test/run-pass/coherence-local-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:coherence-lib.rs\n+// aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"coherence-lib\" as lib;\n+extern crate coherence_lib as lib;\n use lib::Remote;\n \n struct Local<T>(T);"}, {"sha": "bdf8f84a9597d711411dce041997ef19ee20ff04", "filename": "src/test/run-pass/issue-12612.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12612.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-12612-1.rs\n-// aux-build:issue-12612-2.rs\n+// aux-build:issue_12612_1.rs\n+// aux-build:issue_12612_2.rs\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"issue-12612-1\" as foo;\n-extern crate \"issue-12612-2\" as bar;\n+extern crate issue_12612_1 as foo;\n+extern crate issue_12612_2 as bar;\n \n mod test {\n     use bar::baz;"}, {"sha": "28f683c485ae47f38ad8f0d128f1c96f357a7d70", "filename": "src/test/run-pass/trait-safety-ok-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Ftrait-safety-ok-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b633aa038008fdbee658a10182afdd794d2aa6/src%2Ftest%2Frun-pass%2Ftrait-safety-ok-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-safety-ok-cc.rs?ref=91b633aa038008fdbee658a10182afdd794d2aa6", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:trait-safety-lib.rs\n+// aux-build:trait_safety_lib.rs\n \n // Simple smoke test that unsafe traits can be compiled across crates.\n \n // pretty-expanded FIXME #23616\n \n-extern crate \"trait-safety-lib\" as lib;\n+extern crate trait_safety_lib as lib;\n \n use lib::Foo;\n "}]}