{"sha": "002af4d0c7aac6607ca4e0a6629ab679df20aeac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMmFmNGQwYzdhYWM2NjA3Y2E0ZTBhNjYyOWFiNjc5ZGYyMGFlYWM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-13T06:45:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-16T22:28:22Z"}, "message": "Avoid storing `SymbolStr` in a struct.\n\nIt's intended only for very temporary use.", "tree": {"sha": "81c1f86951475b18b34666efa2121b33c2772900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c1f86951475b18b34666efa2121b33c2772900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002af4d0c7aac6607ca4e0a6629ab679df20aeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002af4d0c7aac6607ca4e0a6629ab679df20aeac", "html_url": "https://github.com/rust-lang/rust/commit/002af4d0c7aac6607ca4e0a6629ab679df20aeac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002af4d0c7aac6607ca4e0a6629ab679df20aeac/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0080801da75c596cd8548ffb539bb8f046fa62", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0080801da75c596cd8548ffb539bb8f046fa62", "html_url": "https://github.com/rust-lang/rust/commit/9f0080801da75c596cd8548ffb539bb8f046fa62"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "1d4772bb3d606a41a5dd4af3d1b9d9d8dd332ee1", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/002af4d0c7aac6607ca4e0a6629ab679df20aeac/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002af4d0c7aac6607ca4e0a6629ab679df20aeac/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=002af4d0c7aac6607ca4e0a6629ab679df20aeac", "patch": "@@ -8,7 +8,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{Ident, SymbolStr};\n+use rustc_span::symbol::{Ident, Symbol};\n use std::cmp::Ordering;\n \n declare_clippy_lint! {\n@@ -75,7 +75,7 @@ pub struct NonExpressiveNames {\n impl_lint_pass!(NonExpressiveNames => [SIMILAR_NAMES, MANY_SINGLE_CHAR_NAMES, JUST_UNDERSCORES_AND_DIGITS]);\n \n struct ExistingName {\n-    interned: SymbolStr,\n+    interned: Symbol,\n     span: Span,\n     len: usize,\n     exemptions: &'static [&'static str],\n@@ -218,18 +218,19 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             let mut split_at = None;\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n-                    if existing_name.len - count != 1 || levenstein_not_1(&interned_name, &existing_name.interned) {\n+                    if existing_name.len - count != 1 || levenstein_not_1(&interned_name, &existing_name.interned.as_str()) {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n-                    if count - existing_name.len != 1 || levenstein_not_1(&existing_name.interned, &interned_name) {\n+                    if count - existing_name.len != 1 || levenstein_not_1(&existing_name.interned.as_str(), &interned_name) {\n                         continue;\n                     }\n                 },\n                 Ordering::Equal => {\n                     let mut interned_chars = interned_name.chars();\n-                    let mut existing_chars = existing_name.interned.chars();\n+                    let interned_str = existing_name.interned.as_str();\n+                    let mut existing_chars = interned_str.chars();\n                     let first_i = interned_chars.next().expect(\"we know we have at least one char\");\n                     let first_e = existing_chars.next().expect(\"we know we have at least one char\");\n                     let eq_or_numeric = |(a, b): (char, char)| a == b || a.is_numeric() && b.is_numeric();\n@@ -302,7 +303,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         }\n         self.0.names.push(ExistingName {\n             exemptions: get_exemptions(&interned_name).unwrap_or(&[]),\n-            interned: interned_name,\n+            interned: ident.name,\n             span: ident.span,\n             len: count,\n         });"}, {"sha": "154082a0fdb530b8e81d1d4e47f3abced3f96b6b", "filename": "src/tools/clippy/clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/002af4d0c7aac6607ca4e0a6629ab679df20aeac/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002af4d0c7aac6607ca4e0a6629ab679df20aeac/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=002af4d0c7aac6607ca4e0a6629ab679df20aeac", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ast::{Item, ItemKind, UseTree, UseTreeKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{Ident, SymbolStr};\n+use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n@@ -73,6 +73,6 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n }\n \n #[must_use]\n-fn contains_unsafe(name: &SymbolStr) -> bool {\n+fn contains_unsafe(name: &str) -> bool {\n     name.contains(\"Unsafe\") || name.contains(\"unsafe\")\n }"}]}