{"sha": "b8bb663df787511c6b91bf3182b59d140a9c8e02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YmI2NjNkZjc4NzUxMWM2YjkxYmYzMTgyYjU5ZDE0MGE5YzhlMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-27T21:50:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-27T23:03:10Z"}, "message": "Don't ever raise unique kinds of pinned kinds to shared (again)\n\nSo *resource, ~resource, [resource] are all pinned. This is counter to the\ndesign of the kind system, but this way is a much clearer path to type safety.\nOnce we've established a good baseline with lots of tests, then we can try to\nmake raising pinned kinds work.", "tree": {"sha": "157792f952836504216eb4ba2715327a7afd361a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/157792f952836504216eb4ba2715327a7afd361a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8bb663df787511c6b91bf3182b59d140a9c8e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bb663df787511c6b91bf3182b59d140a9c8e02", "html_url": "https://github.com/rust-lang/rust/commit/b8bb663df787511c6b91bf3182b59d140a9c8e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8bb663df787511c6b91bf3182b59d140a9c8e02/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e50580aa669efc91e5d374e4357bd48dd594169d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e50580aa669efc91e5d374e4357bd48dd594169d", "html_url": "https://github.com/rust-lang/rust/commit/e50580aa669efc91e5d374e4357bd48dd594169d"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "c7f37e95c8ccadd0d71c2987b082f6c87d327736", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -142,22 +142,6 @@ fn need_shared_lhs_rhs(tcx: ty::ctxt, a: @ast::expr, b: @ast::expr, op: str) {\n     need_expr_kind(tcx, b, ast::kind_shared, op + \" rhs\");\n }\n \n-// Additional checks for copyability that require a little more nuance\n-fn check_copy(tcx: ty::ctxt, e: @ast::expr) {\n-    alt ty::struct(tcx, ty::expr_ty(tcx, e)) {\n-      // Unique boxes most not contain pinned kinds\n-      ty::ty_uniq(mt) {\n-        demand_kind(tcx, e.span, mt.ty, ast::kind_shared,\n-                    \"unique box interior\");\n-      }\n-      ty::ty_vec(mt) {\n-        demand_kind(tcx, e.span, mt.ty, ast::kind_shared,\n-                    \"vector interior\");\n-      }\n-      _ { }\n-    }\n-}\n-\n fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n     alt e.node {\n \n@@ -168,16 +152,13 @@ fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n       ast::expr_move(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<-\"); }\n       ast::expr_assign(a, b) {\n         need_shared_lhs_rhs(tcx, a, b, \"=\");\n-        check_copy(tcx, b);\n       }\n       ast::expr_assign_op(_, a, b) {\n         need_shared_lhs_rhs(tcx, a, b, \"op=\");\n-        check_copy(tcx, b);\n       }\n       ast::expr_swap(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<->\"); }\n       ast::expr_copy(a) {\n         need_expr_kind(tcx, a, ast::kind_shared, \"'copy' operand\");\n-        check_copy(tcx, a);\n       }\n       ast::expr_ret(option::some(a)) {\n         need_expr_kind(tcx, a, ast::kind_shared, \"'ret' operand\");\n@@ -221,9 +202,11 @@ fn check_stmt(tcx: ty::ctxt, stmt: @ast::stmt) {\n                 need_expr_kind(tcx, expr,\n                                ast::kind_shared,\n                                \"local initializer\");\n-                check_copy(tcx, expr);\n               }\n-              _ { /* fall through */ }\n+              option::some({op: ast::init_move., expr}) {\n+                // FIXME: Same as above\n+              }\n+              option::none. { /* fall through */ }\n             }\n         }\n       }"}, {"sha": "3e76ce2f93e5d07d50cf90ebd0422785e4bb8397", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -1022,7 +1022,14 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       // Pointers and unique containers raise pinned to shared.\n       ty_ptr(tm) | ty_vec(tm) | ty_uniq(tm) {\n         let k = type_kind(cx, tm.ty);\n-        if k == ast::kind_pinned { k = ast::kind_shared; }\n+\n+        // FIXME (984) Doing this implies a lot of subtle rules about what can\n+        // and can't be copied, so I'm going to start by not raising unique of\n+        // pinned to shared, make sure that's relatively safe, then we can try\n+        // to make this work.\n+\n+        // if k == ast::kind_pinned { k = ast::kind_shared; }\n+\n         result = kind::lower_kind(result, k);\n       }\n       // Records lower to the lowest of their members."}, {"sha": "ccb05f0ce29df091bd9d91d796c5914e1767ad68", "filename": "src/lib/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -5,9 +5,9 @@ native \"rust-intrinsic\" mod rusti {\n     fn ptr_offset<T>(ptr: *T, count: uint) -> *T;\n }\n \n-fn addr_of<T>(val: T) -> *mutable T { ret rusti::addr_of(val); }\n-fn offset<T>(ptr: *T, count: uint) -> *T {\n+fn addr_of<@T>(val: T) -> *mutable T { ret rusti::addr_of(val); }\n+fn offset<@T>(ptr: *T, count: uint) -> *T {\n     ret rusti::ptr_offset(ptr, count);\n }\n \n-fn null<T>() -> *T { ret unsafe::reinterpret_cast(0u); }\n+fn null<@T>() -> *T { ret unsafe::reinterpret_cast(0u); }"}, {"sha": "3bb03afb4834e7346378872b5f2ac5607fb90587", "filename": "src/lib/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -345,18 +345,18 @@ mod unsafe {\n         ret rustrt::vec_from_buf_shared(ptr, elts);\n     }\n \n-    fn set_len<T>(&v: [T], new_len: uint) {\n+    fn set_len<@T>(&v: [T], new_len: uint) {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         (**repr).fill = new_len * sys::size_of::<T>();\n     }\n \n-    fn to_ptr<T>(v: [T]) -> *T {\n+    fn to_ptr<@T>(v: [T]) -> *T {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         ret ::unsafe::reinterpret_cast(addr_of((**repr).data));\n     }\n }\n \n-fn to_ptr<T>(v: [T]) -> *T { ret unsafe::to_ptr(v); }\n+fn to_ptr<@T>(v: [T]) -> *T { ret unsafe::to_ptr(v); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "030872a1348ab7f589bea8e173d1a6e6e4840734", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -1,7 +1,4 @@\n-// error-pattern:Copying a non-copyable type\n-\n-// This is still not properly checked\n-// xfail-test\n+// error-pattern:mismatched kinds\n \n resource foo(i: int) { }\n "}, {"sha": "33570b4061fc38cafee922c0658021c9c4f5bb3d", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -1,5 +1,4 @@\n-// xfail-test\n-// expected error: mismatched kinds\n+// error-pattern: mismatched kinds\n \n resource r(i: @mutable int) {\n     *i = *i + 1;"}, {"sha": "c2d751483fb91068adf8e8037222611a2a09e750", "filename": "src/test/compile-fail/unique-swap2.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Funique-swap2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Funique-swap2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-swap2.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -1,3 +1,4 @@\n+// error-pattern:mismatched kinds\n \n resource r(i: @mutable int) {\n     *i += 1;\n@@ -9,6 +10,8 @@ fn test1() {\n     {\n         let x <- ~r(i);\n         let y <- ~r(j);\n+        // This is currently not allowed because ~resource is pinned.\n+        // Note that ~resource is supposed to be shared.\n         x <-> y;\n         assert ***x == 200;\n         assert ***y == 100;", "previous_filename": "src/test/run-pass/unique-swap2.rs"}, {"sha": "94c5e538f98192c7c9bc7957bc25fadcc1ec1537", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -1,5 +1,4 @@\n-// xfail-test\n-// expected error: mismatched kinds\n+// error-pattern: mismatched kinds\n \n resource r(i: @mutable int) {\n     *i = *i + 1;"}, {"sha": "b8f9a39f50bd9b163fe433f6dfbba23da8a191a9", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8bb663df787511c6b91bf3182b59d140a9c8e02/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=b8bb663df787511c6b91bf3182b59d140a9c8e02", "patch": "@@ -4,6 +4,6 @@\n use std;\n import std::unsafe;\n \n-fn null<T>() -> *T { unsafe::reinterpret_cast(0) }\n+fn null<@T>() -> *T { unsafe::reinterpret_cast(0) }\n \n fn main() { null::<int>(); }"}]}