{"sha": "1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNmM5NjA1ZTQxYjdjN2RjMjNlMGU2ZjYzM2YwNTkxMmQwNDYzZGQ=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-07T05:54:09Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-15T22:29:17Z"}, "message": "use field init shorthand EVERYWHERE\n\nLike #43008 (f668999), but _much more aggressive_.", "tree": {"sha": "2482313e8e0761fd8e3ecddc8baad7bf96689b07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2482313e8e0761fd8e3ecddc8baad7bf96689b07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "html_url": "https://github.com/rust-lang/rust/commit/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82be83cf744611a016fb09ae1afbffc04b3ed2e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/82be83cf744611a016fb09ae1afbffc04b3ed2e1", "html_url": "https://github.com/rust-lang/rust/commit/82be83cf744611a016fb09ae1afbffc04b3ed2e1"}], "stats": {"total": 2752, "additions": 1376, "deletions": 1376}, "files": [{"sha": "cf6ebb48b2c6c2bc9cc393181052f02a064e940d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -193,7 +193,7 @@ pub struct ShouldRun<'a> {\n impl<'a> ShouldRun<'a> {\n     fn new(builder: &'a Builder) -> ShouldRun<'a> {\n         ShouldRun {\n-            builder: builder,\n+            builder,\n             paths: BTreeSet::new(),\n             is_really_default: true, // by default no additional conditions\n         }\n@@ -278,9 +278,9 @@ impl<'a> Builder<'a> {\n         };\n \n         let builder = Builder {\n-            build: build,\n+            build,\n             top_stage: build.config.stage.unwrap_or(2),\n-            kind: kind,\n+            kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n         };\n@@ -309,9 +309,9 @@ impl<'a> Builder<'a> {\n         };\n \n         let builder = Builder {\n-            build: build,\n+            build,\n             top_stage: build.config.stage.unwrap_or(2),\n-            kind: kind,\n+            kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n         };"}, {"sha": "92fb2105b7c5d57133c6425069cc09ae853ae5a8", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -872,7 +872,7 @@ impl Step for CrateLibrustc {\n             builder.ensure(CrateLibrustc {\n                 compiler,\n                 target: run.target,\n-                test_kind: test_kind,\n+                test_kind,\n                 krate: name,\n             });\n         };\n@@ -934,8 +934,8 @@ impl Step for Crate {\n             builder.ensure(Crate {\n                 compiler,\n                 target: run.target,\n-                mode: mode,\n-                test_kind: test_kind,\n+                mode,\n+                test_kind,\n                 krate: name,\n             });\n         };"}, {"sha": "78bc225447bd0b920e9a7189b51b6314f66b1805", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -74,13 +74,13 @@ impl Step for Std {\n             let from = builder.compiler(1, build.build);\n             builder.ensure(Std {\n                 compiler: from,\n-                target: target,\n+                target,\n             });\n             println!(\"Uplifting stage1 std ({} -> {})\", from.host, target);\n             builder.ensure(StdLink {\n                 compiler: from,\n                 target_compiler: compiler,\n-                target: target,\n+                target,\n             });\n             return;\n         }\n@@ -100,7 +100,7 @@ impl Step for Std {\n         builder.ensure(StdLink {\n             compiler: builder.compiler(compiler.stage, build.build),\n             target_compiler: compiler,\n-            target: target,\n+            target,\n         });\n     }\n }\n@@ -202,7 +202,7 @@ impl Step for StdLink {\n \n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n-            target: target,\n+            target,\n             mode: Mode::Libstd,\n         });\n     }\n@@ -326,13 +326,13 @@ impl Step for Test {\n         if build.force_use_stage1(compiler, target) {\n             builder.ensure(Test {\n                 compiler: builder.compiler(1, build.build),\n-                target: target,\n+                target,\n             });\n             println!(\"Uplifting stage1 test ({} -> {})\", &build.build, target);\n             builder.ensure(TestLink {\n                 compiler: builder.compiler(1, build.build),\n                 target_compiler: compiler,\n-                target: target,\n+                target,\n             });\n             return;\n         }\n@@ -351,7 +351,7 @@ impl Step for Test {\n         builder.ensure(TestLink {\n             compiler: builder.compiler(compiler.stage, build.build),\n             target_compiler: compiler,\n-            target: target,\n+            target,\n         });\n     }\n }\n@@ -398,7 +398,7 @@ impl Step for TestLink {\n                     &libtest_stamp(build, compiler, target));\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n-            target: target,\n+            target,\n             mode: Mode::Libtest,\n         });\n     }\n@@ -445,7 +445,7 @@ impl Step for Rustc {\n         if build.force_use_stage1(compiler, target) {\n             builder.ensure(Rustc {\n                 compiler: builder.compiler(1, build.build),\n-                target: target,\n+                target,\n             });\n             println!(\"Uplifting stage1 rustc ({} -> {})\", &build.build, target);\n             builder.ensure(RustcLink {\n@@ -581,7 +581,7 @@ impl Step for RustcLink {\n                        &librustc_stamp(build, compiler, target));\n         builder.ensure(tool::CleanTools {\n             compiler: target_compiler,\n-            target: target,\n+            target,\n             mode: Mode::Librustc,\n         });\n     }"}, {"sha": "5ade2c279e2fb88c63af966629865059ac159446", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -213,13 +213,13 @@ impl Step for TheBook {\n         let name = self.name;\n         // build book first edition\n         builder.ensure(Rustbook {\n-            target: target,\n+            target,\n             name: INTERNER.intern_string(format!(\"{}/first-edition\", name)),\n         });\n \n         // build book second edition\n         builder.ensure(Rustbook {\n-            target: target,\n+            target,\n             name: INTERNER.intern_string(format!(\"{}/second-edition\", name)),\n         });\n "}, {"sha": "a84d43d3deedef29b70483cfcfc7e29d36e9d702", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -274,14 +274,14 @@ Arguments:\n             }\n             \"test\" => {\n                 Subcommand::Test {\n-                    paths: paths,\n+                    paths,\n                     test_args: matches.opt_strs(\"test-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),\n                 }\n             }\n             \"bench\" => {\n                 Subcommand::Bench {\n-                    paths: paths,\n+                    paths,\n                     test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n@@ -297,12 +297,12 @@ Arguments:\n             }\n             \"dist\" => {\n                 Subcommand::Dist {\n-                    paths: paths,\n+                    paths,\n                 }\n             }\n             \"install\" => {\n                 Subcommand::Install {\n-                    paths: paths,\n+                    paths,\n                 }\n             }\n             _ => {\n@@ -324,7 +324,7 @@ Arguments:\n \n         Flags {\n             verbose: matches.opt_count(\"verbose\"),\n-            stage: stage,\n+            stage,\n             on_fail: matches.opt_str(\"on-fail\"),\n             keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n             build: matches.opt_str(\"build\").map(|s| INTERNER.intern_string(s)),\n@@ -333,9 +333,9 @@ Arguments:\n             target: split(matches.opt_strs(\"target\"))\n                 .into_iter().map(|x| INTERNER.intern_string(x)).collect::<Vec<_>>(),\n             config: cfg_file,\n-            src: src,\n+            src,\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n-            cmd: cmd,\n+            cmd,\n             incremental: matches.opt_present(\"incremental\"),\n         }\n     }"}, {"sha": "17f8bcdf03da1438f62ecd7368b295a261b72f4a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -314,19 +314,19 @@ impl Build {\n             hosts: config.hosts.clone(),\n             targets: config.targets.clone(),\n \n-            config: config,\n-            src: src,\n-            out: out,\n+            config,\n+            src,\n+            out,\n \n-            rust_info: rust_info,\n-            cargo_info: cargo_info,\n-            rls_info: rls_info,\n+            rust_info,\n+            cargo_info,\n+            rls_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             crates: HashMap::new(),\n             lldb_version: None,\n             lldb_python_dir: None,\n-            is_sudo: is_sudo,\n+            is_sudo,\n             ci_env: CiEnv::current(),\n             delayed_failures: Cell::new(0),\n         }"}, {"sha": "5f1df1d26e27382516e6d0afc94254ae20d7076b", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -75,10 +75,10 @@ fn build_krate(build: &mut Build, krate: &str) {\n                 doc_step: format!(\"doc-crate-{}\", name),\n                 test_step: format!(\"test-crate-{}\", name),\n                 bench_step: format!(\"bench-crate-{}\", name),\n-                name: name,\n+                name,\n                 version: package.version,\n                 deps: Vec::new(),\n-                path: path,\n+                path,\n             });\n         }\n     }"}, {"sha": "b967eaaaab5b1ca7b22e525f582345fb5b44d987", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -278,7 +278,7 @@ impl<T> Arc<T> {\n         let x: Box<_> = box ArcInner {\n             strong: atomic::AtomicUsize::new(1),\n             weak: atomic::AtomicUsize::new(1),\n-            data: data,\n+            data,\n         };\n         Arc { ptr: Shared::from(Box::into_unique(x)) }\n     }"}, {"sha": "57640af816a57a3308e0e4a4d136d5f8a9b6ad6d", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -853,9 +853,9 @@ impl<'a, T> Hole<'a, T> {\n         debug_assert!(pos < data.len());\n         let elt = ptr::read(&data[pos]);\n         Hole {\n-            data: data,\n+            data,\n             elt: Some(elt),\n-            pos: pos,\n+            pos,\n         }\n     }\n \n@@ -1203,7 +1203,7 @@ where T: Clone + Ord {\n         let place = Placer::make_place(self.data.place_back());\n         BinaryHeapPlace {\n             heap: ptr,\n-            place: place,\n+            place,\n         }\n     }\n }"}, {"sha": "c0d43d9c52755d3086c480ff23dff7222d546bee", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -169,7 +169,7 @@ fn make_place<T>() -> IntermediateBox<T> {\n \n     IntermediateBox {\n         ptr: p,\n-        layout: layout,\n+        layout,\n         marker: marker::PhantomData,\n     }\n }"}, {"sha": "f733c3332e282e402f17fce6bafa6d1adf856919", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -234,7 +234,7 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n         match search::search_tree(self.root.as_mut(), key) {\n             Found(handle) => {\n                 Some(OccupiedEntry {\n-                         handle: handle,\n+                         handle,\n                          length: &mut self.length,\n                          _marker: PhantomData,\n                      }\n@@ -250,8 +250,8 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n             Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n             GoDown(handle) => {\n                 VacantEntry {\n-                    key: key,\n-                    handle: handle,\n+                    key,\n+                    handle,\n                     length: &mut self.length,\n                     _marker: PhantomData,\n                 }\n@@ -695,7 +695,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         match search::search_tree(self.root.as_mut(), key) {\n             Found(handle) => {\n                 Some(OccupiedEntry {\n-                         handle: handle,\n+                         handle,\n                          length: &mut self.length,\n                          _marker: PhantomData,\n                      }\n@@ -866,15 +866,15 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         match search::search_tree(self.root.as_mut(), &key) {\n             Found(handle) => {\n                 Occupied(OccupiedEntry {\n-                    handle: handle,\n+                    handle,\n                     length: &mut self.length,\n                     _marker: PhantomData,\n                 })\n             }\n             GoDown(handle) => {\n                 Vacant(VacantEntry {\n-                    key: key,\n-                    handle: handle,\n+                    key,\n+                    handle,\n                     length: &mut self.length,\n                     _marker: PhantomData,\n                 })"}, {"sha": "b057c18fca8952c43aee42eb5c6ea747196535e8", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -776,8 +776,8 @@ impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, mar\n         debug_assert!(idx < node.len());\n \n         Handle {\n-            node: node,\n-            idx: idx,\n+            node,\n+            idx,\n             _marker: PhantomData\n         }\n     }\n@@ -850,8 +850,8 @@ impl<BorrowType, K, V, NodeType>\n         debug_assert!(idx <= node.len());\n \n         Handle {\n-            node: node,\n-            idx: idx,\n+            node,\n+            idx,\n             _marker: PhantomData\n         }\n     }\n@@ -1149,7 +1149,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             let mut new_root = Root {\n                 node: BoxedNode::from_internal(new_node),\n-                height: height\n+                height,\n             };\n \n             for i in 0..(new_len+1) {\n@@ -1449,12 +1449,12 @@ impl<BorrowType, K, V, HandleType>\n     > {\n         match self.node.force() {\n             ForceResult::Leaf(node) => ForceResult::Leaf(Handle {\n-                node: node,\n+                node,\n                 idx: self.idx,\n                 _marker: PhantomData\n             }),\n             ForceResult::Internal(node) => ForceResult::Internal(Handle {\n-                node: node,\n+                node,\n                 idx: self.idx,\n                 _marker: PhantomData\n             })"}, {"sha": "f9512cbe977a41f942031f7fc9ee7051f3157273", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -140,7 +140,7 @@ impl<T> Node<T> {\n         Node {\n             next: None,\n             prev: None,\n-            element: element,\n+            element,\n         }\n     }\n \n@@ -924,7 +924,7 @@ impl<'a, T> IterMut<'a, T> {\n                 let node = Some(Shared::from(Box::into_unique(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n-                    element: element,\n+                    element,\n                 })));\n \n                 prev.as_mut().next = node;"}, {"sha": "9a8614895f30c30bca9fe18600624674c439a049", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -60,8 +60,8 @@ impl<T, A: Alloc> RawVec<T, A> {\n         // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n         RawVec {\n             ptr: Unique::empty(),\n-            cap: cap,\n-            a: a,\n+            cap,\n+            a,\n         }\n     }\n \n@@ -104,8 +104,8 @@ impl<T, A: Alloc> RawVec<T, A> {\n \n             RawVec {\n                 ptr: Unique::new_unchecked(ptr as *mut _),\n-                cap: cap,\n-                a: a,\n+                cap,\n+                a,\n             }\n         }\n     }\n@@ -159,8 +159,8 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub unsafe fn from_raw_parts_in(ptr: *mut T, cap: usize, a: A) -> Self {\n         RawVec {\n             ptr: Unique::new_unchecked(ptr),\n-            cap: cap,\n-            a: a,\n+            cap,\n+            a,\n         }\n     }\n }\n@@ -176,7 +176,7 @@ impl<T> RawVec<T, Heap> {\n     pub unsafe fn from_raw_parts(ptr: *mut T, cap: usize) -> Self {\n         RawVec {\n             ptr: Unique::new_unchecked(ptr),\n-            cap: cap,\n+            cap,\n             a: Heap,\n         }\n     }"}, {"sha": "9783aed895f7d689e44582ba0b2ebb65b2598dcf", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -311,7 +311,7 @@ impl<T> Rc<T> {\n             ptr: Shared::from(Box::into_unique(box RcBox {\n                 strong: Cell::new(1),\n                 weak: Cell::new(1),\n-                value: value,\n+                value,\n             })),\n         }\n     }"}, {"sha": "356ca7a5f5e0cee6adf9372629a330b886cc3774", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -1886,7 +1886,7 @@ fn merge_sort<T, F>(v: &mut [T], mut is_less: F)\n \n         // Push this run onto the stack.\n         runs.push(Run {\n-            start: start,\n+            start,\n             len: end - start,\n         });\n         end = start;"}, {"sha": "76ee0158a62336c003fe84a662e5d6c39f105699", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -1378,8 +1378,8 @@ impl String {\n         let chars_iter = self[start..end].chars();\n \n         Drain {\n-            start: start,\n-            end: end,\n+            start,\n+            end,\n             iter: chars_iter,\n             string: self_ptr,\n         }\n@@ -1442,11 +1442,11 @@ impl String {\n         let chars_iter = self[start..end].chars();\n \n         Splice {\n-            start: start,\n-            end: end,\n+            start,\n+            end,\n             iter: chars_iter,\n             string: self_ptr,\n-            replace_with: replace_with\n+            replace_with,\n         }\n     }\n "}, {"sha": "77e22a3ceb294d207a24a1cae29ed49e7a492178", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -1728,9 +1728,9 @@ impl<T> IntoIterator for Vec<T> {\n             mem::forget(self);\n             IntoIter {\n                 buf: Shared::new_unchecked(begin),\n-                cap: cap,\n+                cap,\n                 ptr: begin,\n-                end: end,\n+                end,\n             }\n         }\n     }"}, {"sha": "bf9069200297d8e3a52132a3b83e1e9f94097bdb", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -2442,7 +2442,7 @@ impl<T> From<Vec<T>> for VecDeque<T> {\n             VecDeque {\n                 tail: 0,\n                 head: len,\n-                buf: buf,\n+                buf,\n             }\n         }\n     }"}, {"sha": "8125097d7d1056573e82d36c7297e36af77a2053", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -18,7 +18,7 @@ struct PadAdapter<'a, 'b: 'a> {\n impl<'a, 'b: 'a> PadAdapter<'a, 'b> {\n     fn new(fmt: &'a mut fmt::Formatter<'b>) -> PadAdapter<'a, 'b> {\n         PadAdapter {\n-            fmt: fmt,\n+            fmt,\n             on_newline: false,\n         }\n     }\n@@ -94,8 +94,8 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n                                 -> DebugStruct<'a, 'b> {\n     let result = fmt.write_str(name);\n     DebugStruct {\n-        fmt: fmt,\n-        result: result,\n+        fmt,\n+        result,\n         has_fields: false,\n     }\n }\n@@ -185,8 +185,8 @@ pub struct DebugTuple<'a, 'b: 'a> {\n pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugTuple<'a, 'b> {\n     let result = fmt.write_str(name);\n     DebugTuple {\n-        fmt: fmt,\n-        result: result,\n+        fmt,\n+        result,\n         fields: 0,\n         empty_name: name.is_empty(),\n     }\n@@ -317,8 +317,8 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n     let result = write!(fmt, \"{{\");\n     DebugSet {\n         inner: DebugInner {\n-            fmt: fmt,\n-            result: result,\n+            fmt,\n+            result,\n             has_fields: false,\n         },\n     }\n@@ -388,8 +388,8 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n     let result = write!(fmt, \"[\");\n     DebugList {\n         inner: DebugInner {\n-            fmt: fmt,\n-            result: result,\n+            fmt,\n+            result,\n             has_fields: false,\n         },\n     }\n@@ -460,8 +460,8 @@ pub struct DebugMap<'a, 'b: 'a> {\n pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b> {\n     let result = write!(fmt, \"{{\");\n     DebugMap {\n-        fmt: fmt,\n-        result: result,\n+        fmt,\n+        result,\n         has_fields: false,\n     }\n }"}, {"sha": "cf6262bda9748355deef2461e76e919e5561ad94", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -334,9 +334,9 @@ impl<'a> Arguments<'a> {\n     pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n-            pieces: pieces,\n+            pieces,\n             fmt: None,\n-            args: args\n+            args,\n         }\n     }\n \n@@ -353,9 +353,9 @@ impl<'a> Arguments<'a> {\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {\n         Arguments {\n-            pieces: pieces,\n+            pieces,\n             fmt: Some(fmt),\n-            args: args\n+            args,\n         }\n     }\n "}, {"sha": "ebedfe1d743bb37583c7ac4ccd70f670a19dc5ac", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -840,8 +840,8 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n     type Item = (A::Item, B::Item);\n     default fn new(a: A, b: B) -> Self {\n         Zip {\n-            a: a,\n-            b: b,\n+            a,\n+            b,\n             index: 0, // unused\n             len: 0, // unused\n         }\n@@ -903,10 +903,10 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n     fn new(a: A, b: B) -> Self {\n         let len = cmp::min(a.len(), b.len());\n         Zip {\n-            a: a,\n-            b: b,\n+            a,\n+            b,\n             index: 0,\n-            len: len,\n+            len,\n         }\n     }\n "}, {"sha": "2af129a67bddf94ef471a45538f090a46b68234a", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -744,7 +744,7 @@ impl<I, T, E> ResultShunt<I, E>\n \n     fn new(iter: I) -> Self {\n         ResultShunt {\n-            iter: iter,\n+            iter,\n             error: None,\n         }\n     }"}, {"sha": "97bcba2f2ffbc8b9da881fe3bdcdb789b5c3ee8e", "filename": "src/libcore/num/diy_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fnum%2Fdiy_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fnum%2Fdiy_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdiy_float.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -86,7 +86,7 @@ impl Fp {\n         assert_eq!(self.f << edelta >> edelta, self.f);\n         Fp {\n             f: self.f << edelta,\n-            e: e,\n+            e,\n         }\n     }\n }"}, {"sha": "beaa6e140a6993b978c6b60bf63f7eb775bb2199", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -442,7 +442,7 @@ pub fn to_shortest_str<'a, T, F>(mut format_shortest: F, v: T,\n         }\n         FullDecoded::Finite(ref decoded) => {\n             let (len, exp) = format_shortest(decoded, buf);\n-            Formatted { sign: sign,\n+            Formatted { sign,\n                         parts: digits_to_dec_str(&buf[..len], exp, frac_digits, parts) }\n         }\n     }\n@@ -581,7 +581,7 @@ pub fn to_exact_exp_str<'a, T, F>(mut format_exact: F, v: T,\n \n             let trunc = if ndigits < maxlen { ndigits } else { maxlen };\n             let (len, exp) = format_exact(decoded, &mut buf[..trunc], i16::MIN);\n-            Formatted { sign: sign,\n+            Formatted { sign,\n                         parts: digits_to_exp_str(&buf[..len], exp, ndigits, upper, parts) }\n         }\n     }\n@@ -652,7 +652,7 @@ pub fn to_exact_fixed_str<'a, T, F>(mut format_exact: F, v: T,\n                     Formatted { sign: sign, parts: &parts[..1] }\n                 }\n             } else {\n-                Formatted { sign: sign,\n+                Formatted { sign,\n                             parts: digits_to_dec_str(&buf[..len], exp, frac_digits, parts) }\n             }\n         }"}, {"sha": "0509936153c39c5d244ca0be69c8991eb1d2ceb9", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -300,7 +300,7 @@ impl<T> SliceExt for [T] {\n     {\n         Split {\n             v: self,\n-            pred: pred,\n+            pred,\n             finished: false\n         }\n     }"}, {"sha": "a5f6e49a53b4f7cff5238d4b2a85b8edce0c589c", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -2233,7 +2233,7 @@ impl StrExt for str {\n     fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> {\n         SplitN(SplitNInternal {\n             iter: self.split(pat).0,\n-            count: count,\n+            count,\n         })\n     }\n "}, {"sha": "edb7bed4520fb0e1df9f5635cc96a6eebc1078ff", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -290,7 +290,7 @@ impl<'a, C: CharEq> Pattern<'a> for CharEqPattern<C> {\n     fn into_searcher(self, haystack: &'a str) -> CharEqSearcher<'a, C> {\n         CharEqSearcher {\n             ascii_only: self.0.only_ascii(),\n-            haystack: haystack,\n+            haystack,\n             char_eq: self.0,\n             char_indices: haystack.char_indices(),\n         }\n@@ -596,8 +596,8 @@ impl<'a, 'b> StrSearcher<'a, 'b> {\n     fn new(haystack: &'a str, needle: &'b str) -> StrSearcher<'a, 'b> {\n         if needle.is_empty() {\n             StrSearcher {\n-                haystack: haystack,\n-                needle: needle,\n+                haystack,\n+                needle,\n                 searcher: StrSearcherImpl::Empty(EmptyNeedle {\n                     position: 0,\n                     end: haystack.len(),\n@@ -607,8 +607,8 @@ impl<'a, 'b> StrSearcher<'a, 'b> {\n             }\n         } else {\n             StrSearcher {\n-                haystack: haystack,\n-                needle: needle,\n+                haystack,\n+                needle,\n                 searcher: StrSearcherImpl::TwoWay(\n                     TwoWaySearcher::new(needle.as_bytes(), haystack.len())\n                 ),\n@@ -899,13 +899,13 @@ impl TwoWaySearcher {\n                 TwoWaySearcher::reverse_maximal_suffix(needle, period, true));\n \n             TwoWaySearcher {\n-                crit_pos: crit_pos,\n-                crit_pos_back: crit_pos_back,\n-                period: period,\n+                crit_pos,\n+                crit_pos_back,\n+                period,\n                 byteset: Self::byteset_create(&needle[..period]),\n \n                 position: 0,\n-                end: end,\n+                end,\n                 memory: 0,\n                 memory_back: needle.len(),\n             }\n@@ -918,13 +918,13 @@ impl TwoWaySearcher {\n             // reverse search.\n \n             TwoWaySearcher {\n-                crit_pos: crit_pos,\n+                crit_pos,\n                 crit_pos_back: crit_pos,\n                 period: cmp::max(crit_pos, needle.len() - crit_pos) + 1,\n                 byteset: Self::byteset_create(needle),\n \n                 position: 0,\n-                end: end,\n+                end,\n                 memory: usize::MAX, // Dummy value to signify that the period is long\n                 memory_back: usize::MAX,\n             }"}, {"sha": "ed6923929d6b0b15d0ac294c67fd159c5105af98", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -392,7 +392,7 @@ pub struct CycleIter<'a, T: 'a> {\n pub fn cycle<T>(data: &[T]) -> CycleIter<T> {\n     CycleIter {\n         index: 0,\n-        data: data,\n+        data,\n     }\n }\n "}, {"sha": "6bac55575fb1817d72abfe7f0522c1d551cf1da8", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -53,7 +53,7 @@ fn test_get_resource() {\n \n     fn r(i: Rc<RefCell<isize>>) -> R {\n         R {\n-            i: i\n+            i,\n         }\n     }\n "}, {"sha": "43345c6d0977b3e2d07675418fdb94bba4d4f295", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -284,7 +284,7 @@ impl<'a> Parser<'a> {\n \n         Argument {\n             position: pos,\n-            format: format,\n+            format,\n         }\n     }\n "}, {"sha": "83f2de54023158d9a954df22aba65103e413e988", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -250,28 +250,28 @@ impl OptGroup {\n             (0, _) => {\n                 Opt {\n                     name: Long((long_name)),\n-                    hasarg: hasarg,\n-                    occur: occur,\n+                    hasarg,\n+                    occur,\n                     aliases: Vec::new(),\n                 }\n             }\n             (1, 0) => {\n                 Opt {\n                     name: Short(short_name.chars().next().unwrap()),\n-                    hasarg: hasarg,\n-                    occur: occur,\n+                    hasarg,\n+                    occur,\n                     aliases: Vec::new(),\n                 }\n             }\n             (1, _) => {\n                 Opt {\n                     name: Long((long_name)),\n-                    hasarg: hasarg,\n-                    occur: occur,\n+                    hasarg,\n+                    occur,\n                     aliases: vec![Opt {\n                                       name: Short(short_name.chars().next().unwrap()),\n-                                      hasarg: hasarg,\n-                                      occur: occur,\n+                                      hasarg,\n+                                      occur,\n                                       aliases: Vec::new(),\n                                   }],\n                 }\n@@ -530,8 +530,8 @@ pub fn opt(short_name: &str,\n         long_name: long_name.to_owned(),\n         hint: hint.to_owned(),\n         desc: desc.to_owned(),\n-        hasarg: hasarg,\n-        occur: occur,\n+        hasarg,\n+        occur,\n     }\n }\n \n@@ -681,9 +681,9 @@ pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result {\n         }\n     }\n     Ok(Matches {\n-        opts: opts,\n-        vals: vals,\n-        free: free,\n+        opts,\n+        vals,\n+        free,\n     })\n }\n "}, {"sha": "d66fba18f475c0258932deec3bb486392a7cbe50", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -781,10 +781,10 @@ mod tests {\n \n     fn edge(from: usize, to: usize, label: &'static str, style: Style) -> Edge {\n         Edge {\n-            from: from,\n-            to: to,\n-            label: label,\n-            style: style,\n+            from,\n+            to,\n+            label,\n+            style,\n         }\n     }\n \n@@ -848,9 +848,9 @@ mod tests {\n                -> LabelledGraph {\n             let count = node_labels.len();\n             LabelledGraph {\n-                name: name,\n+                name,\n                 node_labels: node_labels.to_opt_strs(),\n-                edges: edges,\n+                edges,\n                 node_styles: match node_styles {\n                     Some(nodes) => nodes,\n                     None => vec![Style::None; count],"}, {"sha": "63e44f71a3a8f3d7249b084cd79e97fcd159580f", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -74,7 +74,7 @@ pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n     let exception = Box::new(Exception {\n         _uwe: uw::_Unwind_Exception {\n             exception_class: rust_exception_class(),\n-            exception_cleanup: exception_cleanup,\n+            exception_cleanup,\n             private: [0; uw::unwinder_private_data_size],\n         },\n         cause: Some(data),"}, {"sha": "188e71f3fa948271ff5052e21baff67b0c1bb778", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -127,9 +127,9 @@ impl GammaLargeShape {\n     fn new_raw(shape: f64, scale: f64) -> GammaLargeShape {\n         let d = shape - 1. / 3.;\n         GammaLargeShape {\n-            scale: scale,\n+            scale,\n             c: 1. / (9. * d).sqrt(),\n-            d: d,\n+            d,\n         }\n     }\n }"}, {"sha": "47967a719d397a8972d39bf4e90ac356721af550", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -149,7 +149,7 @@ impl<'a, T: Clone> WeightedChoice<'a, T> {\n                 \"WeightedChoice::new called with a total weight of 0\");\n \n         WeightedChoice {\n-            items: items,\n+            items,\n             // we're likely to be generating numbers in this range\n             // relatively often, so might as well cache it\n             weight_range: Range::new(0, running_total),"}, {"sha": "e1518dab21c2b9bb3215f6fa805547d39d44d40f", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -103,8 +103,8 @@ impl Normal {\n     pub fn new(mean: f64, std_dev: f64) -> Normal {\n         assert!(std_dev >= 0.0, \"Normal::new called with `std_dev` < 0\");\n         Normal {\n-            mean: mean,\n-            std_dev: std_dev,\n+            mean,\n+            std_dev,\n         }\n     }\n }"}, {"sha": "f2f8132e5b47ba18fa6910bb06abc7bf972728cc", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -104,7 +104,7 @@ macro_rules! integer_impl {\n                 let zone = unsigned_max - unsigned_max % range;\n \n                 Range {\n-                    low: low,\n+                    low,\n                     range: range as $ty,\n                     accept_zone: zone as $ty\n                 }\n@@ -143,7 +143,7 @@ macro_rules! float_impl {\n         impl SampleRange for $ty {\n             fn construct_range(low: $ty, high: $ty) -> Range<$ty> {\n                 Range {\n-                    low: low,\n+                    low,\n                     range: high - low,\n                     accept_zone: 0.0 // unused\n                 }"}, {"sha": "a1b6ddcb331a82de0dc8f9b6d16a8a439b1172ff", "filename": "src/librand/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -418,10 +418,10 @@ impl Rand for XorShiftRng {\n         }\n         let (x, y, z, w) = tuple;\n         XorShiftRng {\n-            x: x,\n-            y: y,\n-            z: z,\n-            w: w,\n+            x,\n+            y,\n+            z,\n+            w,\n         }\n     }\n }"}, {"sha": "804fe9dc63c5314924c3cdb9b0db88df12304dfa", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -38,10 +38,10 @@ impl<R: Rng, Rsdr: Reseeder<R>> ReseedingRng<R, Rsdr> {\n     /// * `reseeder`: the reseeding object to use.\n     pub fn new(rng: R, generation_threshold: usize, reseeder: Rsdr) -> ReseedingRng<R, Rsdr> {\n         ReseedingRng {\n-            rng: rng,\n-            generation_threshold: generation_threshold,\n+            rng,\n+            generation_threshold,\n             bytes_generated: 0,\n-            reseeder: reseeder,\n+            reseeder,\n         }\n     }\n "}, {"sha": "b8624722692e9addab9d8d70763f57f171764ece", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -630,8 +630,8 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor {\n-        tcx: tcx,\n-        live_symbols: live_symbols,\n+        tcx,\n+        live_symbols,\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "b8f27f8741dc5e937cbc4e594dc10ed4f1e181a4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -1695,8 +1695,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                          substs: &'tcx Substs<'tcx>)\n         -> Ty<'tcx> {\n             self.mk_ty(TyProjection(ProjectionTy {\n-                item_def_id: item_def_id,\n-                substs: substs,\n+                item_def_id,\n+                substs,\n             }))\n         }\n "}, {"sha": "c035817d66db0336381e2177ec286f7bc8af319f", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -253,7 +253,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n             let substs = relation.relate(&a.substs, &b.substs)?;\n             Ok(ty::ExistentialProjection {\n                 item_def_id: a.item_def_id,\n-                substs: substs,\n+                substs,\n                 ty,\n             })\n         }"}, {"sha": "e41eb079b3782dd9356af8ff4d87b02ac558aee8", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ProjectionTy {\n                 item_def_id: self.item_def_id,\n-                substs: substs,\n+                substs,\n             }\n         })\n     }"}, {"sha": "389c581ebe314b5ac363a3affc5753c0454955c4", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -569,7 +569,7 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n     pub fn trait_ref(&self, tcx: TyCtxt) -> ty::TraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::TraitRef {\n-            def_id: def_id,\n+            def_id,\n             substs: self.substs,\n         }\n     }\n@@ -874,7 +874,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n     pub fn trait_ref(&self, tcx: TyCtxt) -> ty::ExistentialTraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::ExistentialTraitRef{\n-            def_id: def_id,\n+            def_id,\n             substs: self.substs,\n         }\n     }"}, {"sha": "f99c6a29ff00a9cd71033aa40781b7a68c2027b4", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -36,9 +36,9 @@ pub fn modify(sess: &ParseSess,\n               krate: Crate,\n               handler: &rustc_errors::Handler) -> ast::Crate {\n     ExpandAllocatorDirectives {\n-        handler: handler,\n-        sess: sess,\n-        resolver: resolver,\n+        handler,\n+        sess,\n+        resolver,\n         found: false,\n     }.fold_crate(krate)\n }\n@@ -88,7 +88,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n         };\n         let ecfg = ExpansionConfig::default(name.to_string());\n         let mut f = AllocFnFactory {\n-            span: span,\n+            span,\n             kind: AllocatorKind::Global,\n             global: item.ident,\n             alloc: Ident::from_str(\"alloc\"),"}, {"sha": "4b02d0b60b8b59a43fc9baff50df77d7fc962b4c", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -97,7 +97,7 @@ pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,\n         executables: true,\n-        pre_link_args: pre_link_args,\n+        pre_link_args,\n         has_elf_tls: false,\n         .. super::apple_base::opts()\n     })"}, {"sha": "d95f6fa97cf422ce26e0bcb502f8c0065fb07074", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -25,7 +25,7 @@ pub fn opts() -> TargetOptions {\n         exe_allocation_crate: Some(\"alloc_system\".to_string()),\n         panic_strategy: PanicStrategy::Abort,\n         linker: \"ld\".to_string(),\n-        pre_link_args: pre_link_args,\n+        pre_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n     }"}, {"sha": "51eeae50e22ee17ece637332c51d82d5115f3342", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -25,8 +25,8 @@ pub fn target() -> TargetResult {\n         linker: \"pnacl-clang\".to_string(),\n         ar: \"pnacl-ar\".to_string(),\n \n-        pre_link_args: pre_link_args,\n-        post_link_args: post_link_args,\n+        pre_link_args,\n+        post_link_args,\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".pexe\".to_string(),"}, {"sha": "42ab19404049eee0cee5aa14aa19fe97f568ea40", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -38,7 +38,7 @@ pub fn target() -> Result<Target, String> {\n         obj_is_bitcode: true,\n         is_like_emscripten: true,\n         max_atomic_width: Some(32),\n-        post_link_args: post_link_args,\n+        post_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n     };"}, {"sha": "a0a2699d8f951c0fe1e4e99e1344d7796d517e6d", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -34,7 +34,7 @@ pub fn target() -> Result<Target, String> {\n         obj_is_bitcode: true,\n         is_like_emscripten: true,\n         max_atomic_width: Some(32),\n-        post_link_args: post_link_args,\n+        post_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n     };"}, {"sha": "e6aa745d54e9d8c8d625a164437c67e84730c792", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -78,7 +78,7 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,\n-        pre_link_args: pre_link_args,\n+        pre_link_args,\n         pre_link_objects_exe: vec![\n             \"crt2.o\".to_string(),    // mingw C runtime initialization for executables\n             \"rsbegin.o\".to_string(), // Rust compiler runtime initialization, see rsbegin.rs\n@@ -87,7 +87,7 @@ pub fn opts() -> TargetOptions {\n             \"dllcrt2.o\".to_string(), // mingw C runtime initialization for dlls\n             \"rsbegin.o\".to_string(),\n         ],\n-        late_link_args: late_link_args,\n+        late_link_args,\n         post_link_objects: vec![\n             \"rsend.o\".to_string()\n         ],"}, {"sha": "c82377173252f6630c5d23fd2822450fbbb4e1f8", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -194,10 +194,10 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let def_id = bccx.tcx.hir.body_owner_def_id(body.id());\n     let param_env = bccx.tcx.param_env(def_id);\n     let mut clcx = CheckLoanCtxt {\n-        bccx: bccx,\n-        dfcx_loans: dfcx_loans,\n-        move_data: move_data,\n-        all_loans: all_loans,\n+        bccx,\n+        dfcx_loans,\n+        move_data,\n+        all_loans,\n         param_env,\n     };\n     euv::ExprUseVisitor::new(&mut clcx, bccx.tcx, param_env, &bccx.region_maps, bccx.tables)"}, {"sha": "bca980c5ccf4c974b2823e5016a5349766b5b2aa", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -106,8 +106,8 @@ pub fn gather_move_from_expr<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     };\n     let move_info = GatherMoveInfo {\n         id: move_expr_id,\n-        kind: kind,\n-        cmt: cmt,\n+        kind,\n+        cmt,\n         span_path_opt: None,\n     };\n     gather_move(bccx, move_data, move_error_collector, move_info);\n@@ -163,7 +163,7 @@ pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let move_info = GatherMoveInfo {\n         id: move_pat.id,\n         kind: MovePat,\n-        cmt: cmt,\n+        cmt,\n         span_path_opt: pat_span_path_opt,\n     };\n "}, {"sha": "22de3c759139d8bf3aac6e9c32cb553e445574f9", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -37,10 +37,10 @@ pub fn guarantee_lifetime<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     debug!(\"guarantee_lifetime(cmt={:?}, loan_region={:?})\",\n            cmt, loan_region);\n     let ctxt = GuaranteeLifetimeContext {bccx: bccx,\n-                                         item_scope: item_scope,\n-                                         span: span,\n-                                         cause: cause,\n-                                         loan_region: loan_region,\n+                                         item_scope,\n+                                         span,\n+                                         cause,\n+                                         loan_region,\n                                          cmt_original: cmt.clone()};\n     ctxt.check(&cmt, None)\n }"}, {"sha": "4ff603b7eae01441e9f26a0e646b92a72c6aa12a", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -41,7 +41,7 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let def_id = bccx.tcx.hir.body_owner_def_id(body);\n     let param_env = bccx.tcx.param_env(def_id);\n     let mut glcx = GatherLoanCtxt {\n-        bccx: bccx,\n+        bccx,\n         all_loans: Vec::new(),\n         item_ub: region::CodeExtent::Misc(body.node_id),\n         move_data: MoveData::new(),\n@@ -230,8 +230,8 @@ fn check_mutability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             // Only mutable data can be lent as mutable.\n             if !cmt.mutbl.is_mutable() {\n                 Err(bccx.report(BckError { span: borrow_span,\n-                                           cause: cause,\n-                                           cmt: cmt,\n+                                           cause,\n+                                           cmt,\n                                            code: err_mutbl }))\n             } else {\n                 Ok(())\n@@ -389,13 +389,13 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n \n                 Loan {\n                     index: self.all_loans.len(),\n-                    loan_path: loan_path,\n+                    loan_path,\n                     kind: req_kind,\n-                    gen_scope: gen_scope,\n-                    kill_scope: kill_scope,\n+                    gen_scope,\n+                    kill_scope,\n                     span: borrow_span,\n-                    restricted_paths: restricted_paths,\n-                    cause: cause,\n+                    restricted_paths,\n+                    cause,\n                 }\n             }\n         };\n@@ -423,13 +423,13 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             //    let all_loans = &mut *self.all_loans; // FIXME(#5074)\n             //    Loan {\n             //        index: all_loans.len(),\n-            //        loan_path: loan_path,\n-            //        cmt: cmt,\n+            //        loan_path,\n+            //        cmt,\n             //        mutbl: ConstMutability,\n             //        gen_scope: borrow_id,\n-            //        kill_scope: kill_scope,\n+            //        kill_scope,\n             //        span: borrow_span,\n-            //        restrictions: restrictions\n+            //        restrictions,\n             //    }\n         // }\n     }"}, {"sha": "31a0312ef96995b87c21f38df048fc0112d6107f", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -49,8 +49,8 @@ impl<'tcx> MoveError<'tcx> {\n                           move_to: Option<MovePlace<'tcx>>)\n                           -> MoveError<'tcx> {\n         MoveError {\n-            move_from: move_from,\n-            move_to: move_to,\n+            move_from,\n+            move_to,\n         }\n     }\n }"}, {"sha": "bc01f22d3881ec6690c63732a5fc26365c63e8c2", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -34,10 +34,10 @@ pub fn compute_restrictions<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                       loan_region: ty::Region<'tcx>)\n                                       -> RestrictionResult<'tcx> {\n     let ctxt = RestrictionsContext {\n-        bccx: bccx,\n-        span: span,\n-        cause: cause,\n-        loan_region: loan_region,\n+        bccx,\n+        span,\n+        cause,\n+        loan_region,\n     };\n \n     ctxt.restrict(cmt)"}, {"sha": "9514b9b39fd3b244df6fec0c3869ef4c18ae1d1c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -180,7 +180,7 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n                                                       id_range,\n                                                       body);\n \n-    Some(AnalysisData { all_loans: all_loans,\n+    Some(AnalysisData { all_loans,\n                         loans: loan_dfcx,\n                         move_data:flowed_moves })\n }"}, {"sha": "5a08d63829159a68129bff598875f57f689e86f9", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                     parent: parent_index,\n                     first_move: InvalidMoveIndex,\n                     first_child: InvalidMovePathIndex,\n-                    next_sibling: next_sibling,\n+                    next_sibling,\n                 });\n \n                 index\n@@ -408,9 +408,9 @@ impl<'a, 'tcx> MoveData<'tcx> {\n \n         self.moves.borrow_mut().push(Move {\n             path: path_index,\n-            id: id,\n-            kind: kind,\n-            next_move: next_move\n+            id,\n+            kind,\n+            next_move,\n         });\n     }\n \n@@ -468,8 +468,8 @@ impl<'a, 'tcx> MoveData<'tcx> {\n         let assignment = Assignment {\n             path: path_index,\n             id: assign_id,\n-            span: span,\n-            assignee_id: assignee_id,\n+            span,\n+            assignee_id,\n         };\n \n         if self.is_var_path(path_index) {\n@@ -504,7 +504,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             path: path_index,\n             base_path: base_path_index,\n             id: pattern_id,\n-            mode: mode,\n+            mode,\n         };\n \n         self.variant_matches.borrow_mut().push(variant_match);\n@@ -680,9 +680,9 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n         dfcx_assign.propagate(cfg, body);\n \n         FlowedMoveData {\n-            move_data: move_data,\n-            dfcx_moves: dfcx_moves,\n-            dfcx_assign: dfcx_assign,\n+            move_data,\n+            dfcx_moves,\n+            dfcx_assign,\n         }\n     }\n "}, {"sha": "bc9aa9665c103520c7d378073522d4de37aa4abf", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -166,8 +166,8 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         let pattern_arena = TypedArena::new();\n \n         f(MatchCheckCtxt {\n-            tcx: tcx,\n-            module: module,\n+            tcx,\n+            module,\n             pattern_arena: &pattern_arena,\n             byte_array_map: FxHashMap(),\n         })\n@@ -296,7 +296,7 @@ impl<'tcx> Witness<'tcx> {\n         let sub_pattern_tys = constructor_sub_pattern_tys(cx, ctor, ty);\n         self.0.extend(sub_pattern_tys.into_iter().map(|ty| {\n             Pattern {\n-                ty: ty,\n+                ty,\n                 span: DUMMY_SP,\n                 kind: box PatternKind::Wild,\n             }\n@@ -344,7 +344,7 @@ impl<'tcx> Witness<'tcx> {\n                         if adt.variants.len() > 1 {\n                             PatternKind::Variant {\n                                 adt_def: adt,\n-                                substs: substs,\n+                                substs,\n                                 variant_index: ctor.variant_index_for_adt(adt),\n                                 subpatterns: pats\n                             }\n@@ -378,7 +378,7 @@ impl<'tcx> Witness<'tcx> {\n         };\n \n         self.0.push(Pattern {\n-            ty: ty,\n+            ty,\n             span: DUMMY_SP,\n             kind: Box::new(pat),\n         });\n@@ -673,7 +673,7 @@ fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(\n     let sub_pat_tys = constructor_sub_pattern_tys(cx, &ctor, lty);\n     let wild_patterns_owned: Vec<_> = sub_pat_tys.iter().map(|ty| {\n         Pattern {\n-            ty: ty,\n+            ty,\n             span: DUMMY_SP,\n             kind: box PatternKind::Wild,\n         }"}, {"sha": "2bed1950afc28000f1fae466f5a7ce7ab452b278", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -524,7 +524,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n /// FIXME: this should be done by borrowck.\n fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) {\n     let mut checker = MutationChecker {\n-        cx: cx,\n+        cx,\n     };\n     ExprUseVisitor::new(&mut checker, cx.tcx, cx.param_env, cx.region_maps, cx.tables)\n         .walk_expr(guard);"}, {"sha": "c7def0b834cfd4f32674c0b2c49c576f2ce93272", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -379,7 +379,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n             tcx,\n             param_env: cx.param_env,\n             tables: tcx.typeck_tables_of(def_id),\n-            substs: substs,\n+            substs,\n             fn_args: Some(call_args)\n           };\n           callee_cx.eval(&body.value)?"}, {"sha": "ba79f775ef73d50c0576db3bf179ab7d885152d1", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -407,8 +407,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n \n                 PatternKind::Binding {\n-                    mutability: mutability,\n-                    mode: mode,\n+                    mutability,\n+                    mode,\n                     name: ident.node,\n                     var: id,\n                     ty: var_ty,\n@@ -470,7 +470,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n         Pattern {\n             span: pat.span,\n-            ty: ty,\n+            ty,\n             kind: Box::new(kind),\n         }\n     }\n@@ -569,10 +569,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         _ => bug!(\"inappropriate type for def: {:?}\", ty.sty),\n                     };\n                     PatternKind::Variant {\n-                        adt_def: adt_def,\n-                        substs: substs,\n+                        adt_def,\n+                        substs,\n                         variant_index: adt_def.variant_index_with_id(variant_id),\n-                        subpatterns: subpatterns,\n+                        subpatterns,\n                     }\n                 } else {\n                     PatternKind::Leaf { subpatterns: subpatterns }\n@@ -626,8 +626,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         };\n \n         Pattern {\n-            span: span,\n-            ty: ty,\n+            span,\n+            ty,\n             kind: Box::new(kind),\n         }\n     }\n@@ -762,7 +762,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         };\n \n         Pattern {\n-            span: span,\n+            span,\n             ty: pat_ty,\n             kind: Box::new(kind),\n         }"}, {"sha": "1e67461e0556dd7af0c22212832cb8296b01eba4", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -281,8 +281,8 @@ impl<A: Array> IntoIterator for ArrayVec<A> {\n         let indices = 0..self.count;\n         mem::forget(self);\n         Iter {\n-            indices: indices,\n-            store: store,\n+            indices,\n+            store,\n         }\n     }\n }"}, {"sha": "7331016c2d26c17f83b3f09f662c748395f68f10", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -151,7 +151,7 @@ impl BitMatrix {\n         // element. Round up to an even number of u64s.\n         let u64s_per_row = u64s(columns);\n         BitMatrix {\n-            columns: columns,\n+            columns,\n             vector: vec![0; rows * u64s_per_row],\n         }\n     }"}, {"sha": "65dd336fdbd2fa31045f65cf13c3fcd3179ab885", "filename": "src/librustc_data_structures/control_flow_graph/dominators/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -71,8 +71,8 @@ pub fn dominators_given_rpo<G: ControlFlowGraph>(graph: &G,\n     }\n \n     Dominators {\n-        post_order_rank: post_order_rank,\n-        immediate_dominators: immediate_dominators,\n+        post_order_rank,\n+        immediate_dominators,\n     }\n }\n \n@@ -181,7 +181,7 @@ impl<Node: Idx> Dominators<Node> {\n         }\n         DominatorTree {\n             root: root.unwrap(),\n-            children: children,\n+            children,\n         }\n     }\n }"}, {"sha": "f04b536bc185ffab4d3d9fd607f9524e7072b197", "filename": "src/librustc_data_structures/control_flow_graph/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftest.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -26,7 +26,7 @@ impl TestGraph {\n     pub fn new(start_node: usize, edges: &[(usize, usize)]) -> Self {\n         let mut graph = TestGraph {\n             num_nodes: start_node + 1,\n-            start_node: start_node,\n+            start_node,\n             successors: HashMap::new(),\n             predecessors: HashMap::new(),\n         };"}, {"sha": "163d65c089c33c1ff698b736c44969b06d71302f", "filename": "src/librustc_data_structures/control_flow_graph/transpose.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftranspose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftranspose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftranspose.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -23,8 +23,8 @@ impl<G: ControlFlowGraph> TransposedGraph<G> {\n \n     pub fn with_start(base_graph: G, start_node: G::Node) -> Self {\n         TransposedGraph {\n-            base_graph: base_graph,\n-            start_node: start_node,\n+            base_graph,\n+            start_node,\n         }\n     }\n }"}, {"sha": "eb8342530ab54d2ae13f8f2f944f6ec37eef7deb", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -153,7 +153,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         let idx = self.next_node_index();\n         self.nodes.push(Node {\n             first_edge: [INVALID_EDGE_INDEX, INVALID_EDGE_INDEX],\n-            data: data,\n+            data,\n         });\n         idx\n     }\n@@ -189,9 +189,9 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         // as the next pointers\n         self.edges.push(Edge {\n             next_edge: [source_first, target_first],\n-            source: source,\n-            target: target,\n-            data: data,\n+            source,\n+            target,\n+            data,\n         });\n \n         // adjust the firsts for each node target be the next object.\n@@ -269,7 +269,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         let first_edge = self.node(source).first_edge[direction.repr];\n         AdjacentEdges {\n             graph: self,\n-            direction: direction,\n+            direction,\n             next: first_edge,\n         }\n     }\n@@ -482,10 +482,10 @@ impl<'g, N: Debug, E: Debug> DepthFirstTraversal<'g, N, E> {\n     pub fn new(graph: &'g Graph<N, E>, direction: Direction) -> Self {\n         let visited = BitVector::new(graph.len_nodes());\n         DepthFirstTraversal {\n-            graph: graph,\n+            graph,\n             stack: vec![],\n-            visited: visited,\n-            direction: direction,\n+            visited,\n+            direction,\n         }\n     }\n \n@@ -496,10 +496,10 @@ impl<'g, N: Debug, E: Debug> DepthFirstTraversal<'g, N, E> {\n         let mut visited = BitVector::new(graph.len_nodes());\n         visited.insert(start_node.node_id());\n         DepthFirstTraversal {\n-            graph: graph,\n+            graph,\n             stack: vec![start_node],\n-            visited: visited,\n-            direction: direction,\n+            visited,\n+            direction,\n         }\n     }\n "}, {"sha": "5a5bc67b59234b87d1f8cfa3c1e9d634edf50a90", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -269,7 +269,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 let backtrace = self.error_at(index);\n                 errors.push(Error {\n                     error: error.clone(),\n-                    backtrace: backtrace,\n+                    backtrace,\n                 });\n             }\n         }\n@@ -346,7 +346,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     let backtrace = self.error_at(index);\n                     errors.push(Error {\n                         error: err,\n-                        backtrace: backtrace,\n+                        backtrace,\n                     });\n                 }\n             }\n@@ -357,8 +357,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // changed.\n             return Outcome {\n                 completed: vec![],\n-                errors: errors,\n-                stalled: stalled,\n+                errors,\n+                stalled,\n             };\n         }\n \n@@ -372,8 +372,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         Outcome {\n             completed: completed_obligations,\n-            errors: errors,\n-            stalled: stalled,\n+            errors,\n+            stalled,\n         }\n     }\n \n@@ -638,8 +638,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n impl<O> Node<O> {\n     fn new(parent: Option<NodeIndex>, obligation: O) -> Node<O> {\n         Node {\n-            obligation: obligation,\n-            parent: parent,\n+            obligation,\n+            parent,\n             state: Cell::new(NodeState::Pending),\n             dependents: vec![],\n         }"}, {"sha": "c9c50e1acb61f16a4c8c59d2267425fd57fc45f8", "filename": "src/librustc_data_structures/unify/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Funify%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_data_structures%2Funify%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Funify%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -87,8 +87,8 @@ impl<K: UnifyKey> VarValue<K> {\n     fn new(parent: K, value: K::Value, rank: u32) -> VarValue<K> {\n         VarValue {\n             parent: parent, // this is a root\n-            value: value,\n-            rank: rank,\n+            value,\n+            rank,\n         }\n     }\n \n@@ -98,8 +98,8 @@ impl<K: UnifyKey> VarValue<K> {\n \n     fn root(self, rank: u32, value: K::Value) -> VarValue<K> {\n         VarValue {\n-            rank: rank,\n-            value: value,\n+            rank,\n+            value,\n             ..self\n         }\n     }"}, {"sha": "8a12aa1f7ae6a3835289ebf74f5918498c5638d3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -401,8 +401,8 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n              out_dir: &'a Option<PathBuf>)\n              -> Self {\n         CompileState {\n-            input: input,\n-            session: session,\n+            input,\n+            session,\n             out_dir: out_dir.as_ref().map(|s| &**s),\n             out_file: None,\n             arena: None,\n@@ -868,7 +868,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n         },\n-        hir_forest: hir_forest,\n+        hir_forest,\n     })\n }\n "}, {"sha": "a726a792767e20ecf40fab1205640141dec1ae3f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -802,7 +802,7 @@ impl RustcDefaultCalls {\n                     let mut cfgs = Vec::new();\n                     for &(name, ref value) in sess.parse_sess.config.iter() {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            name: name,\n+                            name,\n                             node: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });"}, {"sha": "8a61a3092508383e143f099b4458f362c8ace5b7", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -174,22 +174,22 @@ impl PpSourceMode {\n         match *self {\n             PpmNormal | PpmEveryBodyLoops | PpmExpanded => {\n                 let annotation = NoAnn {\n-                    sess: sess,\n+                    sess,\n                     hir_map: hir_map.map(|m| m.clone()),\n                 };\n                 f(&annotation)\n             }\n \n             PpmIdentified | PpmExpandedIdentified => {\n                 let annotation = IdentifiedAnnotation {\n-                    sess: sess,\n+                    sess,\n                     hir_map: hir_map.map(|m| m.clone()),\n                 };\n                 f(&annotation)\n             }\n             PpmExpandedHygiene => {\n                 let annotation = HygieneAnnotation {\n-                    sess: sess,\n+                    sess,\n                 };\n                 f(&annotation)\n             }\n@@ -211,15 +211,15 @@ impl PpSourceMode {\n         match *self {\n             PpmNormal => {\n                 let annotation = NoAnn {\n-                    sess: sess,\n+                    sess,\n                     hir_map: Some(hir_map.clone()),\n                 };\n                 f(&annotation, hir_map.forest.krate())\n             }\n \n             PpmIdentified => {\n                 let annotation = IdentifiedAnnotation {\n-                    sess: sess,\n+                    sess,\n                     hir_map: Some(hir_map.clone()),\n                 };\n                 f(&annotation, hir_map.forest.krate())\n@@ -235,7 +235,7 @@ impl PpSourceMode {\n                                                                  |tcx, _, _, _| {\n                     let empty_tables = ty::TypeckTables::empty(None);\n                     let annotation = TypedAnnotation {\n-                        tcx: tcx,\n+                        tcx,\n                         tables: Cell::new(&empty_tables)\n                     };\n                     let _ignore = tcx.dep_graph.in_ignore();\n@@ -680,7 +680,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n                     })\n                     .into_iter()\n                     .collect(),\n-                rules: rules,\n+                rules,\n                 id: ast::DUMMY_NODE_ID,\n                 span: syntax_pos::DUMMY_SP,\n             })\n@@ -739,7 +739,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n         hir_map: &tcx.hir,\n         cfg: &cfg,\n         name: format!(\"node_{}\", code.id()),\n-        labelled_edges: labelled_edges,\n+        labelled_edges,\n     };\n \n     match code {\n@@ -758,7 +758,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n \n             let lcfg = borrowck_dot::DataflowLabeller {\n                 inner: lcfg,\n-                variants: variants,\n+                variants,\n                 borrowck_ctxt: &bccx,\n                 analysis_data: &analysis_data,\n             };"}, {"sha": "6c52eabd66d1219826b3c9cc5575e2366f61ae59", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -83,9 +83,9 @@ impl Diagnostic {\n \n     pub fn new_with_code(level: Level, code: Option<String>, message: &str) -> Self {\n         Diagnostic {\n-            level: level,\n+            level,\n             message: vec![(message.to_owned(), Style::NoStyle)],\n-            code: code,\n+            code,\n             span: MultiSpan::new(),\n             children: vec![],\n             suggestions: vec![],\n@@ -306,10 +306,10 @@ impl Diagnostic {\n            span: MultiSpan,\n            render_span: Option<RenderSpan>) {\n         let sub = SubDiagnostic {\n-            level: level,\n+            level,\n             message: vec![(message.to_owned(), Style::NoStyle)],\n-            span: span,\n-            render_span: render_span,\n+            span,\n+            render_span,\n         };\n         self.children.push(sub);\n     }\n@@ -322,10 +322,10 @@ impl Diagnostic {\n                            span: MultiSpan,\n                            render_span: Option<RenderSpan>) {\n         let sub = SubDiagnostic {\n-            level: level,\n-            message: message,\n-            span: span,\n-            render_span: render_span,\n+            level,\n+            message,\n+            span,\n+            render_span,\n         };\n         self.children.push(sub);\n     }"}, {"sha": "ee0bd9498982c775d1ffed48651db2dcdbceb368", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -179,7 +179,7 @@ impl<'a> DiagnosticBuilder<'a> {\n                          message: &str)\n                          -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder {\n-            handler: handler,\n+            handler,\n             diagnostic: Diagnostic::new_with_code(level, code, message)\n         }\n     }"}, {"sha": "22b6a888f257ac6858636d03190e9d29c047b399", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -120,7 +120,7 @@ impl EmitterWriter {\n         if color_config.use_color() {\n             let dst = Destination::from_stderr();\n             EmitterWriter {\n-                dst: dst,\n+                dst,\n                 cm: code_map,\n             }\n         } else {\n@@ -156,7 +156,7 @@ impl EmitterWriter {\n                     }\n                     // We don't have a line yet, create one\n                     slot.lines.push(Line {\n-                        line_index: line_index,\n+                        line_index,\n                         annotations: vec![ann],\n                     });\n                     slot.lines.sort();\n@@ -165,9 +165,9 @@ impl EmitterWriter {\n             }\n             // This is the first time we're seeing the file\n             file_vec.push(FileWithAnnotatedLines {\n-                file: file,\n+                file,\n                 lines: vec![Line {\n-                                line_index: line_index,\n+                                line_index,\n                                 annotations: vec![ann],\n                             }],\n                 multiline_depth: 0,"}, {"sha": "3459771459a021e1c63d67c7ae8c082444dc7b06", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -155,8 +155,8 @@ impl CodeSuggestion {\n         let lo = primary_spans.iter().map(|sp| sp.0.lo).min().unwrap();\n         let hi = primary_spans.iter().map(|sp| sp.0.hi).min().unwrap();\n         let bounding_span = Span {\n-            lo: lo,\n-            hi: hi,\n+            lo,\n+            hi,\n             ctxt: NO_EXPANSION,\n         };\n         let lines = cm.span_to_lines(bounding_span).unwrap();\n@@ -292,8 +292,8 @@ impl Handler {\n         Handler {\n             err_count: Cell::new(0),\n             emitter: RefCell::new(e),\n-            can_emit_warnings: can_emit_warnings,\n-            treat_err_as_bug: treat_err_as_bug,\n+            can_emit_warnings,\n+            treat_err_as_bug,\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n         }"}, {"sha": "1d58d17996090b7b11a49f78d123831d0cf8cec2", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -76,7 +76,7 @@ pub fn assert_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     // Find annotations supplied by user (if any).\n     let (if_this_changed, then_this_would_need) = {\n-        let mut visitor = IfThisChanged { tcx: tcx,\n+        let mut visitor = IfThisChanged { tcx,\n                                           if_this_changed: vec![],\n                                           then_this_would_need: vec![] };\n         visitor.process_attrs(ast::CRATE_NODE_ID, &tcx.hir.krate().attrs);"}, {"sha": "126057fd043f82cc787f91986aacb95d50a3f43e", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -83,15 +83,15 @@ pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"query-nodes: {:?}\", query.nodes());\n     let krate = tcx.hir.krate();\n     let mut dirty_clean_visitor = DirtyCleanVisitor {\n-        tcx: tcx,\n+        tcx,\n         query: &query,\n-        dirty_inputs: dirty_inputs,\n+        dirty_inputs,\n         checked_attrs: FxHashSet(),\n     };\n     krate.visit_all_item_likes(&mut dirty_clean_visitor);\n \n     let mut all_attrs = FindAllAttrs {\n-        tcx: tcx,\n+        tcx,\n         attr_names: vec![ATTR_DIRTY, ATTR_CLEAN],\n         found_attrs: vec![],\n     };\n@@ -243,15 +243,15 @@ pub fn check_dirty_clean_metadata<'a, 'tcx>(\n     tcx.dep_graph.with_ignore(||{\n         let krate = tcx.hir.krate();\n         let mut dirty_clean_visitor = DirtyCleanMetadataVisitor {\n-            tcx: tcx,\n-            prev_metadata_hashes: prev_metadata_hashes,\n-            current_metadata_hashes: current_metadata_hashes,\n+            tcx,\n+            prev_metadata_hashes,\n+            current_metadata_hashes,\n             checked_attrs: FxHashSet(),\n         };\n         intravisit::walk_crate(&mut dirty_clean_visitor, krate);\n \n         let mut all_attrs = FindAllAttrs {\n-            tcx: tcx,\n+            tcx,\n             attr_names: vec![ATTR_DIRTY_METADATA, ATTR_CLEAN_METADATA],\n             found_attrs: vec![],\n         };"}, {"sha": "9d762a74bfe670510d2760b61626834d9fa0154c", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -38,8 +38,8 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n                incremental_hashes_map: &'a IncrementalHashesMap)\n                -> Self {\n         HashContext {\n-            tcx: tcx,\n-            incremental_hashes_map: incremental_hashes_map,\n+            tcx,\n+            incremental_hashes_map,\n             metadata_hashes: FxHashMap(),\n             crate_hashes: FxHashMap(),\n         }"}, {"sha": "aa29afd543c77f8f400ff256d3bf276f07334e53", "filename": "src/librustc_incremental/persist/preds/compress/classify/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fclassify%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fclassify%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fclassify%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'g, N, I, O> Classify<'a, 'g, N, I, O>\n {\n     pub(super) fn new(r: &'a mut GraphReduce<'g, N, I, O>) -> Self {\n         Classify {\n-            r: r,\n+            r,\n             colors: vec![Color::White; r.in_graph.len_nodes()],\n             stack: vec![],\n             dag: Dag {"}, {"sha": "5483134523c47daa5515ad5c87f465f59d273aea", "filename": "src/librustc_incremental/persist/preds/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -103,8 +103,8 @@ impl<'q> Predecessors<'q> {\n \n         Predecessors {\n             reduced_graph: graph,\n-            bootstrap_outputs: bootstrap_outputs,\n-            hashes: hashes,\n+            bootstrap_outputs,\n+            hashes,\n         }\n     }\n }"}, {"sha": "e20d7a006b0ddb0844ec0a88f54eba4624447c36", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -57,7 +57,7 @@ pub fn save_trans_partition(sess: &Session,\n     let work_product = WorkProduct {\n         cgu_name: cgu_name.to_string(),\n         input_hash: partition_hash,\n-        saved_files: saved_files,\n+        saved_files,\n     };\n \n     sess.dep_graph.insert_work_product(&work_product_id, work_product);"}, {"sha": "6c3626cd880b2f8cedd1d6c9ed05823a46f25a7c", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -94,7 +94,7 @@ impl<'a> Iterator for Iter<'a> {\n             ::last_error().map(Err)\n         } else {\n             Some(Ok(Child {\n-                ptr: ptr,\n+                ptr,\n                 _data: marker::PhantomData,\n             }))\n         }"}, {"sha": "c5cdf6566921c4c9d10acb7397da9435800ab0eb", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -82,12 +82,12 @@ impl OptimizationDiagnostic {\n         }\n \n         OptimizationDiagnostic {\n-            kind: kind,\n+            kind,\n             pass_name: pass_name.expect(\"got a non-UTF8 pass name from LLVM\"),\n-            function: function,\n-            line: line,\n-            column: column,\n-            filename: filename,\n+            function,\n+            line,\n+            column,\n+            filename,\n             message: message.expect(\"got a non-UTF8 OptimizationDiagnostic message from LLVM\")\n         }\n     }"}, {"sha": "b1b3e92347a213468421455ec178ffe7f74aef8c", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n             body: lazy_body,\n             tables: lazy_tables,\n             nested_bodies: lazy_nested_bodies,\n-            rvalue_promotable_to_static: rvalue_promotable_to_static\n+            rvalue_promotable_to_static,\n         })\n     }\n }"}, {"sha": "4c25d03b441eaba7a9961c9804e4484a7cb0714f", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -162,8 +162,8 @@ enum LoadResult {\n impl<'a> CrateLoader<'a> {\n     pub fn new(sess: &'a Session, cstore: &'a CStore, local_crate_name: &str) -> Self {\n         CrateLoader {\n-            sess: sess,\n-            cstore: cstore,\n+            sess,\n+            cstore,\n             next_crate_num: cstore.next_crate_num(),\n             local_crate_name: Symbol::intern(local_crate_name),\n         }\n@@ -184,7 +184,7 @@ impl<'a> CrateLoader<'a> {\n                 };\n                 Some(ExternCrateInfo {\n                     ident: i.ident.name,\n-                    name: name,\n+                    name,\n                     id: i.id,\n                     dep_kind: if attr::contains_name(&i.attrs, \"no_link\") {\n                         DepKind::UnexportedMacrosOnly\n@@ -325,25 +325,25 @@ impl<'a> CrateLoader<'a> {\n             });\n \n         let mut cmeta = cstore::CrateMetadata {\n-            name: name,\n+            name,\n             extern_crate: Cell::new(None),\n             def_path_table: Rc::new(def_path_table),\n-            exported_symbols: exported_symbols,\n-            trait_impls: trait_impls,\n+            exported_symbols,\n+            trait_impls,\n             proc_macros: crate_root.macro_derive_registrar.map(|_| {\n                 self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n             }),\n             root: crate_root,\n             blob: metadata,\n             cnum_map: RefCell::new(cnum_map),\n-            cnum: cnum,\n+            cnum,\n             codemap_import_info: RefCell::new(vec![]),\n             attribute_cache: RefCell::new([Vec::new(), Vec::new()]),\n             dep_kind: Cell::new(dep_kind),\n             source: cstore::CrateSource {\n-                dylib: dylib,\n-                rlib: rlib,\n-                rmeta: rmeta,\n+                dylib,\n+                rlib,\n+                rmeta,\n             },\n             // Initialize this with an empty set. The field is populated below\n             // after we were able to deserialize its contents.\n@@ -388,14 +388,14 @@ impl<'a> CrateLoader<'a> {\n             info!(\"falling back to a load\");\n             let mut locate_ctxt = locator::Context {\n                 sess: self.sess,\n-                span: span,\n-                ident: ident,\n+                span,\n+                ident,\n                 crate_name: name,\n                 hash: hash.map(|a| &*a),\n                 filesearch: self.sess.target_filesearch(path_kind),\n                 target: &self.sess.target.target,\n                 triple: &self.sess.opts.target_triple,\n-                root: root,\n+                root,\n                 rejected_via_hash: vec![],\n                 rejected_via_triple: vec![],\n                 rejected_via_kind: vec![],\n@@ -547,7 +547,7 @@ impl<'a> CrateLoader<'a> {\n         let mut target_only = false;\n         let mut locate_ctxt = locator::Context {\n             sess: self.sess,\n-            span: span,\n+            span,\n             ident: info.ident,\n             crate_name: info.name,\n             hash: None,\n@@ -596,9 +596,9 @@ impl<'a> CrateLoader<'a> {\n         };\n \n         ExtensionCrate {\n-            metadata: metadata,\n+            metadata,\n             dylib: dylib.map(|p| p.0),\n-            target_only: target_only,\n+            target_only,\n         }\n     }\n \n@@ -1221,9 +1221,9 @@ impl<'a> CrateLoader<'a> {\n                 .collect();\n             let lib = NativeLibrary {\n                 name: n,\n-                kind: kind,\n-                cfg: cfg,\n-                foreign_items: foreign_items,\n+                kind,\n+                cfg,\n+                foreign_items,\n             };\n             register_native_lib(self.sess, self.cstore, Some(m.span), lib);\n         }"}, {"sha": "3419d121088282a542ba2e193255e7fdc7152a14", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -114,7 +114,7 @@ impl CStore {\n             statically_included_foreign_items: RefCell::new(FxHashSet()),\n             dllimport_foreign_items: RefCell::new(FxHashSet()),\n             visible_parent_map: RefCell::new(FxHashMap()),\n-            metadata_loader: metadata_loader,\n+            metadata_loader,\n         }\n     }\n "}, {"sha": "cfba11b5151a2ea28fadd6c6baf1d22b7232ae75", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -282,15 +282,15 @@ impl CrateStore for cstore::CStore {\n     {\n         self.get_crate_data(cnum).root.plugin_registrar_fn.map(|index| DefId {\n             krate: cnum,\n-            index: index\n+            index,\n         })\n     }\n \n     fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>\n     {\n         self.get_crate_data(cnum).root.macro_derive_registrar.map(|index| DefId {\n             krate: cnum,\n-            index: index\n+            index,\n         })\n     }\n "}, {"sha": "5c37333fc7e82d5903ecc58af49540bec498060f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -69,7 +69,7 @@ pub trait Metadata<'a, 'tcx>: Copy {\n             opaque: opaque::Decoder::new(self.raw_bytes(), pos),\n             cdata: self.cdata(),\n             sess: self.sess().or(tcx.map(|tcx| tcx.sess)),\n-            tcx: tcx,\n+            tcx,\n             last_filemap_index: 0,\n             lazy_state: LazyState::NoNode,\n         }\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> CrateMetadata {\n     fn local_def_id(&self, index: DefIndex) -> DefId {\n         DefId {\n             krate: self.cnum,\n-            index: index,\n+            index,\n         }\n     }\n \n@@ -703,7 +703,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         for child_index in child.children.decode((self, sess)) {\n                             if let Some(def) = self.get_def(child_index) {\n                                 callback(def::Export {\n-                                    def: def,\n+                                    def,\n                                     ident: Ident::with_empty_ctxt(self.item_name(child_index)),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                 });\n@@ -835,8 +835,8 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         ty::AssociatedItem {\n-            name: name,\n-            kind: kind,\n+            name,\n+            kind,\n             vis: item.visibility.decode(self),\n             defaultness: container.defaultness(),\n             def_id: self.local_def_id(id),"}, {"sha": "1dc5d695348c17644b8d1569486f2bdd137be264", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -422,16 +422,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 None\n             },\n \n-            crate_deps: crate_deps,\n-            dylib_dependency_formats: dylib_dependency_formats,\n-            lang_items: lang_items,\n-            lang_items_missing: lang_items_missing,\n-            native_libraries: native_libraries,\n-            codemap: codemap,\n-            def_path_table: def_path_table,\n-            impls: impls,\n-            exported_symbols: exported_symbols,\n-            index: index,\n+            crate_deps,\n+            dylib_dependency_formats,\n+            lang_items,\n+            lang_items_missing,\n+            native_libraries,\n+            codemap,\n+            def_path_table,\n+            impls,\n+            exported_symbols,\n+            index,\n         });\n \n         let total_bytes = self.position();\n@@ -719,23 +719,23 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     };\n                     FnData {\n                         constness: hir::Constness::NotConst,\n-                        arg_names: arg_names,\n+                        arg_names,\n                         sig: self.lazy(&tcx.fn_sig(def_id)),\n                     }\n                 } else {\n                     bug!()\n                 };\n                 EntryKind::Method(self.lazy(&MethodData {\n-                    fn_data: fn_data,\n-                    container: container,\n+                    fn_data,\n+                    container,\n                     has_self: trait_item.method_has_self_argument,\n                 }))\n             }\n             ty::AssociatedKind::Type => EntryKind::AssociatedType(container),\n         };\n \n         Entry {\n-            kind: kind,\n+            kind,\n             visibility: self.lazy(&trait_item.vis),\n             span: self.lazy(&ast_item.span),\n             attributes: self.encode_attributes(&ast_item.attrs),\n@@ -805,8 +805,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     bug!()\n                 };\n                 EntryKind::Method(self.lazy(&MethodData {\n-                    fn_data: fn_data,\n-                    container: container,\n+                    fn_data,\n+                    container,\n                     has_self: impl_item.method_has_self_argument,\n                 }))\n             }\n@@ -828,7 +828,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         };\n \n         Entry {\n-            kind: kind,\n+            kind,\n             visibility: self.lazy(&impl_item.vis),\n             span: self.lazy(&ast_item.span),\n             attributes: self.encode_attributes(&ast_item.attrs),\n@@ -915,7 +915,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n             hir::ItemFn(_, _, constness, .., body) => {\n                 let data = FnData {\n-                    constness: constness,\n+                    constness,\n                     arg_names: self.encode_fn_arg_names_for_body(body),\n                     sig: self.lazy(&tcx.fn_sig(def_id)),\n                 };\n@@ -946,7 +946,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 EntryKind::Struct(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n-                    struct_ctor: struct_ctor,\n+                    struct_ctor,\n                     ctor_sig: None,\n                 }), repr_options)\n             }\n@@ -998,10 +998,10 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     });\n \n                 let data = ImplData {\n-                    polarity: polarity,\n-                    defaultness: defaultness,\n+                    polarity,\n+                    defaultness,\n                     parent_impl: parent,\n-                    coerce_unsized_info: coerce_unsized_info,\n+                    coerce_unsized_info,\n                     trait_ref: trait_ref.map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n \n@@ -1023,7 +1023,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         };\n \n         Entry {\n-            kind: kind,\n+            kind,\n             visibility: self.lazy(&ty::Visibility::from_hir(&item.vis, item.id, tcx)),\n             span: self.lazy(&item.span),\n             attributes: self.encode_attributes(&item.attrs),\n@@ -1333,7 +1333,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         debug!(\"IsolatedEncoder::encode_impls()\");\n         let tcx = self.tcx;\n         let mut visitor = ImplVisitor {\n-            tcx: tcx,\n+            tcx,\n             impls: FxHashMap(),\n         };\n         tcx.hir.krate().visit_all_item_likes(&mut visitor);\n@@ -1412,7 +1412,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         };\n \n         Entry {\n-            kind: kind,\n+            kind,\n             visibility: self.lazy(&ty::Visibility::from_hir(&nitem.vis, nitem.id, tcx)),\n             span: self.lazy(&nitem.span),\n             attributes: self.encode_attributes(&nitem.attrs),\n@@ -1653,14 +1653,14 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (root, metadata_hashes) = {\n         let mut ecx = EncodeContext {\n             opaque: opaque::Encoder::new(&mut cursor),\n-            tcx: tcx,\n-            link_meta: link_meta,\n-            exported_symbols: exported_symbols,\n+            tcx,\n+            link_meta,\n+            exported_symbols,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),\n             metadata_hashes: EncodedMetadataHashes::new(),\n-            compute_ich: compute_ich,\n+            compute_ich,\n         };\n \n         // Encode the rustc version string in a predictable location."}, {"sha": "1d2b6cc33d46a0942f968d938049b3bfd758b60a", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self {\n         IndexBuilder {\n             items: Index::new(ecx.tcx.hir.definitions().def_index_counts_lo_hi()),\n-            ecx: ecx,\n+            ecx,\n         }\n     }\n \n@@ -137,7 +137,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n         if let Some(hash) = fingerprint {\n             ecx.metadata_hashes.hashes.push(EncodedMetadataHash {\n                 def_index: id.index,\n-                hash: hash,\n+                hash,\n             });\n         }\n "}, {"sha": "b9ad9086c039a6b2835734f66ab35c5288901a92", "filename": "src/librustc_metadata/isolated_encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fisolated_encoder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -32,8 +32,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let tcx = ecx.tcx;\n         let compute_ich = ecx.compute_ich;\n         IsolatedEncoder {\n-            tcx: tcx,\n-            ecx: ecx,\n+            tcx,\n+            ecx,\n             hcx: if compute_ich {\n                 // We are always hashing spans for things in metadata because\n                 // don't know if a downstream crate will use them or not."}, {"sha": "257af2f2850cd531777220e2dc341d13a472805a", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -518,9 +518,9 @@ impl<'a> Context<'a> {\n             if let Some((h, m)) = slot {\n                 libraries.insert(h,\n                                  Library {\n-                                     dylib: dylib,\n-                                     rlib: rlib,\n-                                     rmeta: rmeta,\n+                                     dylib,\n+                                     rlib,\n+                                     rmeta,\n                                      metadata: m,\n                                  });\n             }\n@@ -808,10 +808,10 @@ impl<'a> Context<'a> {\n         match slot {\n             Some((_, metadata)) => {\n                 Some(Library {\n-                    dylib: dylib,\n-                    rlib: rlib,\n-                    rmeta: rmeta,\n-                    metadata: metadata,\n+                    dylib,\n+                    rlib,\n+                    rmeta,\n+                    metadata,\n                 })\n             }\n             None => None,"}, {"sha": "b71f4d0d98cf9aba4d7e3950d17e7cf4c4677704", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -84,7 +84,7 @@ pub struct Lazy<T> {\n impl<T> Lazy<T> {\n     pub fn with_position(position: usize) -> Lazy<T> {\n         Lazy {\n-            position: position,\n+            position,\n             _marker: PhantomData,\n         }\n     }\n@@ -141,8 +141,8 @@ impl<T> LazySeq<T> {\n \n     pub fn with_position_and_length(position: usize, len: usize) -> LazySeq<T> {\n         LazySeq {\n-            len: len,\n-            position: position,\n+            len,\n+            position,\n             _marker: PhantomData,\n         }\n     }\n@@ -199,7 +199,7 @@ pub struct Tracked<T> {\n impl<T> Tracked<T> {\n     pub fn new(state: T) -> Tracked<T> {\n         Tracked {\n-            state: state,\n+            state,\n         }\n     }\n "}, {"sha": "b390e2888f26c2c177e8ce32224fe9c9e835c7c2", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> CFG<'tcx> {\n                            source_info: SourceInfo,\n                            extent: CodeExtent) {\n         self.push(block, Statement {\n-            source_info: source_info,\n+            source_info,\n             kind: StatementKind::EndRegion(extent),\n         });\n     }\n@@ -60,7 +60,7 @@ impl<'tcx> CFG<'tcx> {\n                        lvalue: &Lvalue<'tcx>,\n                        rvalue: Rvalue<'tcx>) {\n         self.push(block, Statement {\n-            source_info: source_info,\n+            source_info,\n             kind: StatementKind::Assign(lvalue.clone(), rvalue)\n         });\n     }\n@@ -93,8 +93,8 @@ impl<'tcx> CFG<'tcx> {\n                       block,\n                       self.block_data(block));\n         self.block_data_mut(block).terminator = Some(Terminator {\n-            source_info: source_info,\n-            kind: kind,\n+            source_info,\n+            kind,\n         });\n     }\n }"}, {"sha": "c74378bdadce52ccb9d63ec371896de007a9f091", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if let Some(scope) = scope {\n                     // schedule a shallow free of that memory, lest we unwind:\n                     this.cfg.push(block, Statement {\n-                        source_info: source_info,\n+                        source_info,\n                         kind: StatementKind::StorageLive(result.clone())\n                     });\n                     this.schedule_drop(expr_span, scope, &result, value.ty);"}, {"sha": "4f248ddb0e2cfde09771e0622510dafce7817d26", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         if !expr_ty.is_never() && temp_lifetime.is_some() {\n             this.cfg.push(block, Statement {\n-                source_info: source_info,\n+                source_info,\n                 kind: StatementKind::StorageLive(temp.clone())\n             });\n         }"}, {"sha": "576b1059e59972348cc6fc43b07c706a33cbbb0c", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -240,8 +240,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let cleanup = this.diverge_cleanup();\n                     this.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: fun,\n-                        args: args,\n-                        cleanup: cleanup,\n+                        args,\n+                        cleanup,\n                         destination: if diverges {\n                             None\n                         } else {"}, {"sha": "0da722f72a15a2a4770b9a0ccab1309da686f4a0", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -127,11 +127,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     unpack!(block = this.as_local_operand(block, input))\n                 }).collect();\n                 this.cfg.push(block, Statement {\n-                    source_info: source_info,\n+                    source_info,\n                     kind: StatementKind::InlineAsm {\n                         asm: box asm.clone(),\n-                        outputs: outputs,\n-                        inputs: inputs\n+                        outputs,\n+                        inputs,\n                     },\n                 });\n                 block.unit()"}, {"sha": "78805ba87ec22f017db686d50f5af7d54ac0b6e6", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -69,8 +69,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         span: pattern.span,\n                         match_pairs: vec![MatchPair::new(discriminant_lvalue.clone(), pattern)],\n                         bindings: vec![],\n-                        guard: guard,\n-                        arm_index: arm_index,\n+                        guard,\n+                        arm_index,\n                     }\n                 })\n                 .collect();\n@@ -179,7 +179,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 var_scope = Some(this.new_visibility_scope(scope_span));\n             }\n             let source_info = SourceInfo {\n-                span: span,\n+                span,\n                 scope: var_scope.unwrap()\n             };\n             this.declare_binding(source_info, mutability, name, var, ty);\n@@ -193,7 +193,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let local_id = self.var_indices[&var];\n         let source_info = self.source_info(span);\n         self.cfg.push(block, Statement {\n-            source_info: source_info,\n+            source_info,\n             kind: StatementKind::StorageLive(Lvalue::Local(local_id))\n         });\n         Lvalue::Local(local_id)\n@@ -708,10 +708,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                var_id, name, var_ty, source_info);\n \n         let var = self.local_decls.push(LocalDecl::<'tcx> {\n-            mutability: mutability,\n+            mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n-            source_info: source_info,\n+            source_info,\n             is_user_variable: true,\n         });\n         self.var_indices.insert(var_id, var);"}, {"sha": "6e3eef5735233aaf8a0ecf589f28f64f3a10a75a", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -71,8 +71,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             PatternKind::Binding { name, mutability, mode, var, ty, ref subpattern } => {\n                 candidate.bindings.push(Binding {\n-                    name: name,\n-                    mutability: mutability,\n+                    name,\n+                    mutability,\n                     span: match_pair.pattern.span,\n                     source: match_pair.lvalue.clone(),\n                     var_id: var,"}, {"sha": "dc15163ecc12eef7039a3d3ddf7349ca9bb18ad2", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     discr: Operand::Consume(discr),\n                     switch_ty: discr_ty,\n                     values: From::from(values),\n-                    targets: targets\n+                    targets,\n                 });\n                 target_blocks\n             }\n@@ -249,9 +249,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ).collect();\n                     (targets.clone(), TerminatorKind::SwitchInt {\n                         discr: Operand::Consume(lvalue.clone()),\n-                        switch_ty: switch_ty,\n+                        switch_ty,\n                         values: From::from(values),\n-                        targets: targets,\n+                        targets,\n                     })\n                 };\n                 self.cfg.terminate(block, source_info, terminator);\n@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         }),\n                         args: vec![val, expect],\n                         destination: Some((eq_result.clone(), eq_block)),\n-                        cleanup: cleanup,\n+                        cleanup,\n                     });\n \n                     // check the result"}, {"sha": "3e303865ac423e40d75e2f6bb80096333569c170", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                   .map(|(idx, subpattern)| {\n                       let elem = ProjectionElem::ConstantIndex {\n                           offset: idx as u32,\n-                          min_length: min_length,\n+                          min_length,\n                           from_end: false,\n                       };\n                       let lvalue = lvalue.clone().elem(elem);\n@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                   .map(|(idx, subpattern)| {\n                       let elem = ProjectionElem::ConstantIndex {\n                           offset: (idx+1) as u32,\n-                          min_length: min_length,\n+                          min_length,\n                           from_end: true,\n                       };\n                       let lvalue = lvalue.clone().elem(elem);\n@@ -80,8 +80,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n impl<'pat, 'tcx> MatchPair<'pat, 'tcx> {\n     pub fn new(lvalue: Lvalue<'tcx>, pattern: &'pat Pattern<'tcx>) -> MatchPair<'pat, 'tcx> {\n         MatchPair {\n-            lvalue: lvalue,\n-            pattern: pattern,\n+            lvalue,\n+            pattern,\n             slice_len_checked: false,\n         }\n     }"}, {"sha": "0e4aac4299111670b9fd71fdb4b870035ad0711f", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -41,9 +41,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                            literal: Literal<'tcx>)\n                            -> Operand<'tcx> {\n         let constant = box Constant {\n-            span: span,\n-            ty: ty,\n-            literal: literal,\n+            span,\n+            ty,\n+            literal,\n         };\n         Operand::Constant(constant)\n     }"}, {"sha": "0c7a78c980a48b93bbd65816a04615937f6fbdc4", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -121,7 +121,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n \n         // Convert the Mir to global types.\n         let mut globalizer = GlobalizeMir {\n-            tcx: tcx,\n+            tcx,\n             span: mir.span\n         };\n         globalizer.visit_mir(&mut mir);\n@@ -179,7 +179,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // Convert the Mir to global types.\n             let tcx = infcx.tcx.global_tcx();\n             let mut globalizer = GlobalizeMir {\n-                tcx: tcx,\n+                tcx,\n                 span: mir.span\n             };\n             globalizer.visit_mir(&mut mir);\n@@ -380,7 +380,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n             };\n             let mut decl = UpvarDecl {\n                 debug_name: keywords::Invalid.name(),\n-                by_ref: by_ref\n+                by_ref,\n             };\n             if let Some(hir::map::NodeLocal(pat)) = tcx.hir.find(var_node_id) {\n                 if let hir::PatKind::Binding(_, _, ref ident, _) = pat.node {\n@@ -437,10 +437,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n            return_ty: Ty<'tcx>)\n            -> Builder<'a, 'gcx, 'tcx> {\n         let mut builder = Builder {\n-            hir: hir,\n+            hir,\n             cfg: CFG { basic_blocks: IndexVec::new() },\n             fn_span: span,\n-            arg_count: arg_count,\n+            arg_count,\n             scopes: vec![],\n             visibility_scopes: IndexVec::new(),\n             visibility_scope: ARGUMENT_VISIBILITY_SCOPE,\n@@ -500,12 +500,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Not,\n-                ty: ty,\n+                ty,\n                 source_info: SourceInfo {\n                     scope: ARGUMENT_VISIBILITY_SCOPE,\n                     span: pattern.map_or(self.fn_span, |pat| pat.span)\n                 },\n-                name: name,\n+                name,\n                 is_user_variable: false,\n             });\n         }"}, {"sha": "d22969d5a1b2a08c13d3e839e80e0a2a3dbf59d0", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -213,7 +213,7 @@ impl<'tcx> Scope<'tcx> {\n     /// Given a span and this scope's visibility scope, make a SourceInfo.\n     fn source_info(&self, span: Span) -> SourceInfo {\n         SourceInfo {\n-            span: span,\n+            span,\n             scope: self.visibility_scope\n         }\n     }\n@@ -235,10 +235,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     {\n         let extent = self.topmost_scope();\n         let scope = BreakableScope {\n-            extent: extent,\n+            extent,\n             continue_block: loop_block,\n-            break_block: break_block,\n-            break_destination: break_destination,\n+            break_block,\n+            break_destination,\n         };\n         self.breakable_scopes.push(scope);\n         let res = f(self);\n@@ -386,7 +386,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let parent = self.visibility_scope;\n         let scope = VisibilityScope::new(self.visibility_scopes.len());\n         self.visibility_scopes.push(VisibilityScopeData {\n-            span: span,\n+            span,\n             parent_scope: Some(parent),\n         });\n         scope\n@@ -411,7 +411,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Given a span and the current visibility scope, make a SourceInfo.\n     pub fn source_info(&self, span: Span) -> SourceInfo {\n         SourceInfo {\n-            span: span,\n+            span,\n             scope: self.visibility_scope\n         }\n     }\n@@ -619,7 +619,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Drop {\n-                               location: location,\n+                               location,\n                                target: next_target,\n                                unwind: diverge_target,\n                            });\n@@ -637,8 +637,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::DropAndReplace {\n-                               location: location,\n-                               value: value,\n+                               location,\n+                               value,\n                                target: next_target,\n                                unwind: diverge_target,\n                            });\n@@ -661,11 +661,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Assert {\n-                               cond: cond,\n-                               expected: expected,\n-                               msg: msg,\n+                               cond,\n+                               expected,\n+                               msg,\n                                target: success_block,\n-                               cleanup: cleanup\n+                               cleanup,\n                            });\n \n         success_block\n@@ -716,7 +716,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n         match drop_data.location {\n             Lvalue::Local(index) if index.index() > arg_count => {\n                 cfg.push(block, Statement {\n-                    source_info: source_info,\n+                    source_info,\n                     kind: StatementKind::StorageDead(drop_data.location.clone())\n                 });\n             }\n@@ -748,7 +748,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(_tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n     let visibility_scope = scope.visibility_scope;\n     let source_info = |span| SourceInfo {\n-        span: span,\n+        span,\n         scope: visibility_scope\n     };\n \n@@ -776,7 +776,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(_tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             cfg.terminate(block, source_info(drop_data.span),\n                           TerminatorKind::Drop {\n                               location: drop_data.location.clone(),\n-                              target: target,\n+                              target,\n                               unwind: None\n                           });\n             *cached_block = Some(block);"}, {"sha": "a7894f0249972cbba2ad8382429ed051e6cc710a", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -76,9 +76,9 @@ pub(crate) fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         name_found(tcx.sess, attributes, \"borrowck_graphviz_postflow\");\n \n     let mut mbcx = DataflowBuilder {\n-        node_id: node_id,\n-        print_preflow_to: print_preflow_to,\n-        print_postflow_to: print_postflow_to,\n+        node_id,\n+        print_preflow_to,\n+        print_postflow_to,\n         flow_state: DataflowAnalysis::new(tcx, mir, dead_unwinds, bd),\n     };\n "}, {"sha": "ea855ee4d3e5fb075753e2c7b9f76453ec7ffcc1", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -410,12 +410,12 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n         });\n \n         DataflowAnalysis {\n-            mir: mir,\n-            dead_unwinds: dead_unwinds,\n+            mir,\n+            dead_unwinds,\n             flow_state: DataflowState {\n                 sets: AllSets {\n-                    bits_per_block: bits_per_block,\n-                    words_per_block: words_per_block,\n+                    bits_per_block,\n+                    words_per_block,\n                     gen_sets: zeroes.clone(),\n                     kill_sets: zeroes,\n                     on_entry_sets: on_entry,"}, {"sha": "173396f22457a6e4b95bd5f72e4d3df0e4ac4adb", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -58,9 +58,9 @@ impl<'tcx> Lift for LvalueElem<'tcx> {\n                 ProjectionElem::Subslice { from: from, to: to },\n             ProjectionElem::ConstantIndex {offset,min_length,from_end} =>\n                 ProjectionElem::ConstantIndex {\n-                    offset: offset,\n-                    min_length: min_length,\n-                    from_end: from_end\n+                    offset,\n+                    min_length,\n+                    from_end,\n                 },\n             ProjectionElem::Downcast(a, u) =>\n                 ProjectionElem::Downcast(a.clone(), u.clone()),"}, {"sha": "eff6883f170e7cb05b0a04105c5f3830a25637aa", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -212,9 +212,9 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         let mut path_map = IndexVec::new();\n \n         MoveDataBuilder {\n-            mir: mir,\n-            tcx: tcx,\n-            param_env: param_env,\n+            mir,\n+            tcx,\n+            param_env,\n             data: MoveData {\n                 moves: IndexVec::new(),\n                 loc_map: LocationMap::new(mir),\n@@ -224,8 +224,8 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                     }).collect(),\n                     projections: FxHashMap(),\n                 },\n-                move_paths: move_paths,\n-                path_map: path_map,\n+                move_paths,\n+                path_map,\n             }\n         }\n     }\n@@ -239,8 +239,8 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n         let move_path = move_paths.push(MovePath {\n             next_sibling: None,\n             first_child: None,\n-            parent: parent,\n-            lvalue: lvalue\n+            parent,\n+            lvalue,\n         });\n \n         if let Some(parent) = parent {"}, {"sha": "0324552cd56fd34bef71d04e0d05282f6473d90e", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -29,9 +29,9 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n         Block {\n             targeted_by_break: self.targeted_by_break,\n             extent: CodeExtent::Misc(self.id),\n-            opt_destruction_extent: opt_destruction_extent,\n+            opt_destruction_extent,\n             span: self.span,\n-            stmts: stmts,\n+            stmts,\n             expr: self.expr.to_ref(),\n         }\n     }\n@@ -79,7 +79,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             kind: StmtKind::Let {\n                                 remainder_scope: remainder_extent,\n                                 init_scope: CodeExtent::Misc(id),\n-                                pattern: pattern,\n+                                pattern,\n                                 initializer: local.init.to_ref(),\n                             },\n                             opt_destruction_extent: opt_dxn_ext,\n@@ -99,7 +99,7 @@ pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let temp_lifetime = cx.region_maps.temporary_scope(block.id);\n     let expr = Expr {\n         ty: block_ty,\n-        temp_lifetime: temp_lifetime,\n+        temp_lifetime,\n         span: block.span,\n         kind: ExprKind::Block { body: block },\n     };"}, {"sha": "944fb8e83329b3be20d833189b06350261de3c47", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n         // Next, wrap this up in the expr's scope.\n         expr = Expr {\n-            temp_lifetime: temp_lifetime,\n+            temp_lifetime,\n             ty: expr.ty,\n             span: self.span,\n             kind: ExprKind::Scope {\n@@ -54,11 +54,11 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n         // Finally, create a destruction scope, if any.\n         if let Some(extent) = cx.region_maps.opt_destruction_extent(self.id) {\n             expr = Expr {\n-                temp_lifetime: temp_lifetime,\n+                temp_lifetime,\n                 ty: expr.ty,\n                 span: self.span,\n                 kind: ExprKind::Scope {\n-                    extent: extent,\n+                    extent,\n                     value: expr.to_ref(),\n                 },\n             };\n@@ -136,7 +136,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                   }),\n                 span,\n                 kind: ExprKind::Borrow {\n-                    region: region,\n+                    region,\n                     borrow_kind: to_borrow_kind(m),\n                     arg: expr.to_ref(),\n                 },\n@@ -173,7 +173,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             ExprKind::Call {\n                 ty: expr.ty,\n                 fun: expr.to_ref(),\n-                args: args,\n+                args,\n             }\n         }\n \n@@ -191,7 +191,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 let arg_tys = args.iter().map(|e| cx.tables().expr_ty_adjusted(e));\n                 let tupled_args = Expr {\n                     ty: cx.tcx.mk_tup(arg_tys, false),\n-                    temp_lifetime: temp_lifetime,\n+                    temp_lifetime,\n                     span: expr.span,\n                     kind: ExprKind::Tuple { fields: args.iter().map(ToRef::to_ref).collect() },\n                 };\n@@ -228,8 +228,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         })\n                         .collect();\n                     ExprKind::Adt {\n-                        adt_def: adt_def,\n-                        substs: substs,\n+                        adt_def,\n+                        substs,\n                         variant_index: index,\n                         fields: field_refs,\n                         base: None,\n@@ -250,7 +250,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 _ => span_bug!(expr.span, \"type of & not region\"),\n             };\n             ExprKind::Borrow {\n-                region: region,\n+                region,\n                 borrow_kind: to_borrow_kind(mutbl),\n                 arg: expr.to_ref(),\n             }\n@@ -320,7 +320,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     _ => {\n                         let op = bin_op(op.node);\n                         ExprKind::Binary {\n-                            op: op,\n+                            op,\n                             lhs: lhs.to_ref(),\n                             rhs: rhs.to_ref(),\n                         }\n@@ -384,7 +384,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             ExprKind::Adt {\n                                 adt_def: adt,\n                                 variant_index: 0,\n-                                substs: substs,\n+                                substs,\n                                 fields: field_refs,\n                                 base: base.as_ref().map(|base| {\n                                     FruInfo {\n@@ -410,7 +410,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     ExprKind::Adt {\n                                         adt_def: adt,\n                                         variant_index: index,\n-                                        substs: substs,\n+                                        substs,\n                                         fields: field_refs,\n                                         base: None,\n                                     }\n@@ -446,8 +446,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             });\n             ExprKind::Closure {\n                 closure_id: def_id,\n-                substs: substs,\n-                upvars: upvars,\n+                substs,\n+                upvars,\n             }\n         }\n \n@@ -458,7 +458,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         hir::ExprInlineAsm(ref asm, ref outputs, ref inputs) => {\n             ExprKind::InlineAsm {\n-                asm: asm,\n+                asm,\n                 outputs: outputs.to_ref(),\n                 inputs: inputs.to_ref(),\n             }\n@@ -477,7 +477,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n             ExprKind::Repeat {\n                 value: v.to_ref(),\n-                count: count,\n+                count,\n             }\n         }\n         hir::ExprRet(ref v) => ExprKind::Return { value: v.to_ref() },\n@@ -570,10 +570,10 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     };\n \n     Expr {\n-        temp_lifetime: temp_lifetime,\n+        temp_lifetime,\n         ty: expr_ty,\n         span: expr.span,\n-        kind: kind,\n+        kind,\n     }\n }\n \n@@ -587,7 +587,7 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n          cx.tables().node_substs(expr.hir_id))\n     });\n     Expr {\n-        temp_lifetime: temp_lifetime,\n+        temp_lifetime,\n         ty: cx.tcx().mk_fn_def(def_id, substs),\n         span: expr.span,\n         kind: ExprKind::Literal {\n@@ -637,8 +637,8 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         Def::Const(def_id) |\n         Def::AssociatedConst(def_id) => ExprKind::Literal {\n             literal: Literal::Item {\n-                def_id: def_id,\n-                substs: substs,\n+                def_id,\n+                substs,\n             },\n         },\n \n@@ -649,9 +649,9 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 // We return a completely different ExprKind here to account for this special case.\n                 ty::TyAdt(adt_def, substs) => {\n                     ExprKind::Adt {\n-                        adt_def: adt_def,\n+                        adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n-                        substs: substs,\n+                        substs,\n                         fields: vec![],\n                         base: None,\n                     }\n@@ -712,12 +712,12 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                                        });\n                     Expr {\n                         ty: closure_ty,\n-                        temp_lifetime: temp_lifetime,\n+                        temp_lifetime,\n                         span: expr.span,\n                         kind: ExprKind::Deref {\n                             arg: Expr {\n                                 ty: ref_closure_ty,\n-                                temp_lifetime: temp_lifetime,\n+                                temp_lifetime,\n                                 span: expr.span,\n                                 kind: ExprKind::SelfRef,\n                             }\n@@ -733,12 +733,12 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                                        });\n                     Expr {\n                         ty: closure_ty,\n-                        temp_lifetime: temp_lifetime,\n+                        temp_lifetime,\n                         span: expr.span,\n                         kind: ExprKind::Deref {\n                             arg: Expr {\n                                 ty: ref_closure_ty,\n-                                temp_lifetime: temp_lifetime,\n+                                temp_lifetime,\n                                 span: expr.span,\n                                 kind: ExprKind::SelfRef,\n                             }.to_ref(),\n@@ -748,7 +748,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty::ClosureKind::FnOnce => {\n                     Expr {\n                         ty: closure_ty,\n-                        temp_lifetime: temp_lifetime,\n+                        temp_lifetime,\n                         span: expr.span,\n                         kind: ExprKind::SelfRef,\n                     }\n@@ -772,7 +772,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty::UpvarCapture::ByRef(borrow) => {\n                     ExprKind::Deref {\n                         arg: Expr {\n-                            temp_lifetime: temp_lifetime,\n+                            temp_lifetime,\n                             ty: cx.tcx.mk_ref(borrow.region,\n                                               ty::TypeAndMut {\n                                                   ty: var_ty,\n@@ -857,7 +857,7 @@ fn overloaded_lvalue<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let temp_lifetime = cx.region_maps.temporary_scope(expr.id);\n     let fun = method_callee(cx, expr, custom_callee);\n     let ref_expr = Expr {\n-        temp_lifetime: temp_lifetime,\n+        temp_lifetime,\n         ty: ref_ty,\n         span: expr.span,\n         kind: ExprKind::Call {\n@@ -887,7 +887,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let var_ty = cx.tables()\n                    .node_id_to_type(cx.tcx.hir.node_to_hir_id(var_node_id));\n     let captured_var = Expr {\n-        temp_lifetime: temp_lifetime,\n+        temp_lifetime,\n         ty: var_ty,\n         span: closure_expr.span,\n         kind: convert_var(cx, closure_expr, freevar.def),\n@@ -901,12 +901,12 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty::BorrowKind::MutBorrow => BorrowKind::Mut,\n             };\n             Expr {\n-                temp_lifetime: temp_lifetime,\n+                temp_lifetime,\n                 ty: freevar_ty,\n                 span: closure_expr.span,\n                 kind: ExprKind::Borrow {\n                     region: upvar_borrow.region,\n-                    borrow_kind: borrow_kind,\n+                    borrow_kind,\n                     arg: captured_var.to_ref(),\n                 },\n             }.to_ref()"}, {"sha": "6b4a8a2dcb7e4a81fc1c3bcaac7f1dca96e4d23d", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -303,7 +303,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n                 span\n             ));\n             statements.push(Statement {\n-                source_info: source_info,\n+                source_info,\n                 kind: StatementKind::Assign(\n                     Lvalue::Local(ref_rcvr),\n                     Rvalue::Ref(tcx.types.re_erased, BorrowKind::Mut, rcvr_l)\n@@ -317,7 +317,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         CallKind::Indirect => (rcvr, vec![]),\n         CallKind::Direct(def_id) => (\n             Operand::Constant(box Constant {\n-                span: span,\n+                span,\n                 ty: tcx.type_of(def_id),\n                 literal: Literal::Value {\n                     value: ConstVal::Function(def_id,\n@@ -351,7 +351,7 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n     // BB #0\n     block(&mut blocks, statements, TerminatorKind::Call {\n         func: callee,\n-        args: args,\n+        args,\n         destination: Some((Lvalue::Local(RETURN_POINTER),\n                            BasicBlock::new(1))),\n         cleanup: if let Adjustment::RefMut = rcvr_adjustment {\n@@ -423,7 +423,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n     let local_decls = local_decls_for_sig(&sig, span);\n \n     let source_info = SourceInfo {\n-        span: span,\n+        span,\n         scope: ARGUMENT_VISIBILITY_SCOPE\n     };\n \n@@ -436,7 +436,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n     // return = ADT(arg0, arg1, ...); return\n     let start_block = BasicBlockData {\n         statements: vec![Statement {\n-            source_info: source_info,\n+            source_info,\n             kind: StatementKind::Assign(\n                 Lvalue::Local(RETURN_POINTER),\n                 Rvalue::Aggregate(\n@@ -448,7 +448,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n             )\n         }],\n         terminator: Some(Terminator {\n-            source_info: source_info,\n+            source_info,\n             kind: TerminatorKind::Return,\n         }),\n         is_cleanup: false"}, {"sha": "3f14a6be8b25ed6d2ffb5d4188b0c8a9eee35b2e", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -75,7 +75,7 @@ impl AddCallGuards {\n                         statements: vec![],\n                         is_cleanup: block.is_cleanup,\n                         terminator: Some(Terminator {\n-                            source_info: source_info,\n+                            source_info,\n                             kind: TerminatorKind::Goto { target: *destination }\n                         })\n                     };"}, {"sha": "59b81f7e77c445b460208f42e03553748b9ef580", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -299,8 +299,8 @@ impl<'tcx> ConstantPropagationVisitor<'tcx> {\n     fn new(dest_local: Local, constant: Constant<'tcx>)\n            -> ConstantPropagationVisitor<'tcx> {\n         ConstantPropagationVisitor {\n-            dest_local: dest_local,\n-            constant: constant,\n+            dest_local,\n+            constant,\n             uses_replaced: 0,\n         }\n     }"}, {"sha": "97391452e596d8514f88faa6736b42e82f53be75", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -50,8 +50,8 @@ impl MirPass for ElaborateDrops {\n         let elaborate_patch = {\n             let mir = &*mir;\n             let env = MoveDataParamEnv {\n-                move_data: move_data,\n-                param_env: param_env\n+                move_data,\n+                param_env,\n             };\n             let dead_unwinds = find_dead_unwinds(tcx, mir, id, &env);\n             let flow_inits =\n@@ -64,11 +64,11 @@ impl MirPass for ElaborateDrops {\n                                       |bd, p| &bd.move_data().move_paths[p]);\n \n             ElaborateDropsCtxt {\n-                tcx: tcx,\n-                mir: mir,\n+                tcx,\n+                mir,\n                 env: &env,\n-                flow_inits: flow_inits,\n-                flow_uninits: flow_uninits,\n+                flow_inits,\n+                flow_uninits,\n                 drop_flags: FxHashMap(),\n                 patch: MirPatch::new(mir),\n             }.elaborate()\n@@ -510,7 +510,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 debug!(\"elaborate_drop_and_replace({:?}) - untracked {:?}\", terminator, parent);\n                 self.patch.patch_terminator(bb, TerminatorKind::Drop {\n                     location: location.clone(),\n-                    target: target,\n+                    target,\n                     unwind: Some(unwind)\n                 });\n             }\n@@ -519,7 +519,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n-            span: span,\n+            span,\n             ty: self.tcx.types.bool,\n             literal: Literal::Value { value: ConstVal::Bool(val) }\n         })))"}, {"sha": "fa51cd91be1b673b641b14ae2100374b9ac3417b", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -28,7 +28,7 @@ struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n         EraseRegionsVisitor {\n-            tcx: tcx,\n+            tcx,\n             in_validation_statement: false,\n         }\n     }"}, {"sha": "28aedc8d6749752c12de5a742fd4466c708f123f", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -90,8 +90,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     if let ty::TyFnDef(callee_def_id, substs) = f.ty.sty {\n                         callsites.push_back(CallSite {\n                             callee: callee_def_id,\n-                            substs: substs,\n-                            bb: bb,\n+                            substs,\n+                            bb,\n                             location: terminator.source_info\n                         });\n                     }\n@@ -136,8 +136,8 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                             if callsite.callee != callee_def_id {\n                                 callsites.push_back(CallSite {\n                                     callee: callee_def_id,\n-                                    substs: substs,\n-                                    bb: bb,\n+                                    substs,\n+                                    bb,\n                                     location: terminator.source_info\n                                 });\n                             }\n@@ -433,12 +433,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 let mut integrator = Integrator {\n                     block_idx: bb_len,\n                     args: &args,\n-                    local_map: local_map,\n-                    scope_map: scope_map,\n-                    promoted_map: promoted_map,\n+                    local_map,\n+                    scope_map,\n+                    promoted_map,\n                     _callsite: callsite,\n                     destination: dest,\n-                    return_block: return_block,\n+                    return_block,\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false\n                 };\n@@ -461,7 +461,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             kind => {\n                 caller_mir[callsite.bb].terminator = Some(Terminator {\n                     source_info: terminator.source_info,\n-                    kind: kind\n+                    kind,\n                 });\n                 false\n             }"}, {"sha": "6ccc886577ac664a1a90f6cbe9ddc261217c7551", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -76,8 +76,8 @@ struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n     fn new(mir: &'b Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'a, 'tcx> {\n         OptimizationFinder {\n-            mir: mir,\n-            tcx: tcx,\n+            mir,\n+            tcx,\n             optimizations: OptimizationList::default(),\n         }\n     }"}, {"sha": "e3e4265a7dbc6a603ec0ee643907079f353c7ae1", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -93,7 +93,7 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n         }\n     }\n     tcx.hir.krate().visit_all_item_likes(&mut GatherCtors {\n-        tcx: tcx,\n+        tcx,\n         set: &mut set,\n     }.as_deep_visitor());\n "}, {"sha": "bd02788df1653c63ed458c53a8b69bf5e92d5370", "filename": "src/librustc_mir/transform/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -27,7 +27,7 @@ struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n         NLLVisitor {\n-            infcx: infcx,\n+            infcx,\n             lookup_map: HashMap::new(),\n         }\n     }"}, {"sha": "1665cb2f15eb8be52ea99fb403e032b2395451c0", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n                     LvalueContext::Store |\n                     LvalueContext::Call => {\n                         *temp = TempState::Defined {\n-                            location: location,\n+                            location,\n                             uses: 0\n                         };\n                         return;\n@@ -140,7 +140,7 @@ pub fn collect_temps(mir: &Mir, rpo: &mut ReversePostorder) -> IndexVec<Local, T\n     let mut collector = TempCollector {\n         temps: IndexVec::from_elem(TempState::Undefined, &mir.local_decls),\n         span: mir.span,\n-        mir: mir,\n+        mir,\n     };\n     for (bb, data) in rpo {\n         collector.visit_basic_block_data(bb, data);\n@@ -165,7 +165,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             statements: vec![],\n             terminator: Some(Terminator {\n                 source_info: SourceInfo {\n-                    span: span,\n+                    span,\n                     scope: ARGUMENT_VISIBILITY_SCOPE\n                 },\n                 kind: TerminatorKind::Return\n@@ -179,7 +179,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let data = &mut self.promoted[last];\n         data.statements.push(Statement {\n             source_info: SourceInfo {\n-                span: span,\n+                span,\n                 scope: ARGUMENT_VISIBILITY_SCOPE\n             },\n             kind: StatementKind::Assign(Lvalue::Local(dest), rvalue)\n@@ -251,7 +251,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 Terminator {\n                     source_info: terminator.source_info,\n                     kind: mem::replace(&mut terminator.kind, TerminatorKind::Goto {\n-                        target: target\n+                        target,\n                     })\n                 }\n             };\n@@ -268,8 +268,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n                     *self.promoted[last].terminator_mut() = Terminator {\n                         kind: TerminatorKind::Call {\n-                            func: func,\n-                            args: args,\n+                            func,\n+                            args,\n                             cleanup: None,\n                             destination: Some((Lvalue::Local(new_temp), new_target))\n                         },\n@@ -289,7 +289,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n     fn promote_candidate(mut self, candidate: Candidate) {\n         let span = self.promoted.span;\n         let new_operand = Operand::Constant(box Constant {\n-            span: span,\n+            span,\n             ty: self.promoted.return_ty,\n             literal: Literal::Promoted {\n                 index: Promoted::new(self.source.promoted.len())\n@@ -387,7 +387,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n             promoted: Mir::new(\n                 IndexVec::new(),\n                 Some(VisibilityScopeData {\n-                    span: span,\n+                    span,\n                     parent_scope: None\n                 }).into_iter().collect(),\n                 IndexVec::new(),\n@@ -423,7 +423,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n             TerminatorKind::Drop { location: Lvalue::Local(index), target, .. } => {\n                 if promoted(index) {\n                     terminator.kind = TerminatorKind::Goto {\n-                        target: target\n+                        target,\n                     };\n                 }\n             }"}, {"sha": "ee99bb7d9d5207fbe6201c1dafa7058a5edff76e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -135,13 +135,13 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         let temps = promote_consts::collect_temps(mir, &mut rpo);\n         rpo.reset();\n         Qualifier {\n-            mode: mode,\n+            mode,\n             span: mir.span,\n-            def_id: def_id,\n-            mir: mir,\n-            rpo: rpo,\n-            tcx: tcx,\n-            param_env: param_env,\n+            def_id,\n+            mir,\n+            rpo,\n+            tcx,\n+            param_env,\n             temp_qualif: IndexVec::from_elem(None, &mir.local_decls),\n             return_qualif: None,\n             qualif: Qualif::empty(),"}, {"sha": "070250cda4d5d237358c4c422e3e202ca6fcd885", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -99,8 +99,8 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n         let basic_blocks = mir.basic_blocks_mut();\n \n         CfgSimplifier {\n-            basic_blocks: basic_blocks,\n-            pred_count: pred_count\n+            basic_blocks,\n+            pred_count,\n         }\n     }\n "}, {"sha": "4d81c016bd0a06840ae9407e49561b1f0273156c", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -108,8 +108,8 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n     fn new(cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>, mir: &'a Mir<'tcx>) -> Self {\n         TypeVerifier {\n-            cx: cx,\n-            mir: mir,\n+            cx,\n+            mir,\n             last_span: mir.span,\n             errors_reported: false\n         }\n@@ -235,8 +235,8 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                             }\n                         } else {\n                             LvalueTy::Downcast {\n-                                adt_def: adt_def,\n-                                substs: substs,\n+                                adt_def,\n+                                substs,\n                                 variant_index: index\n                             }\n                         }\n@@ -333,7 +333,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n            param_env: ty::ParamEnv<'gcx>)\n            -> Self {\n         TypeChecker {\n-            infcx: infcx,\n+            infcx,\n             fulfillment_cx: traits::FulfillmentContext::new(),\n             last_span: DUMMY_SP,\n             body_id,"}, {"sha": "8dc5e31445be69f5f09c4fbdaf367f4bd864a7c3", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -97,8 +97,8 @@ impl<'tcx> Visitor<'tcx> for DefUseFinder<'tcx> {\n                     location: Location) {\n         if let Some(ref mut info) = self.lvalue_mut_info(lvalue) {\n             info.defs_and_uses.push(Use {\n-                context: context,\n-                location: location,\n+                context,\n+                location,\n             })\n         }\n         self.super_lvalue(lvalue, context, location)\n@@ -140,8 +140,8 @@ impl<'tcx, F> MutateUseVisitor<'tcx, F> {\n            -> MutateUseVisitor<'tcx, F>\n            where F: for<'a> FnMut(&'a mut Lvalue<'tcx>, LvalueContext<'tcx>, Location) {\n         MutateUseVisitor {\n-            query: query,\n-            callback: callback,\n+            query,\n+            callback,\n             phantom: PhantomData,\n         }\n     }"}, {"sha": "d8a061f4b1991e549d7caba5c7dd04381e7ff5a0", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -521,7 +521,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n \n         let ref_ty = tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n-            ty: ty,\n+            ty,\n             mutbl: hir::Mutability::MutMutable\n         });\n         let ref_lvalue = self.new_temp(ref_ty);\n@@ -860,7 +860,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     fn drop_block<'a>(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block = TerminatorKind::Drop {\n             location: self.lvalue.clone(),\n-            target: target,\n+            target,\n             unwind: unwind.into_option()\n         };\n         self.new_block(unwind, block)"}, {"sha": "1af0b6c67f259f7cd59b2520095405aa5d8c54c6", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> MirPatch<'tcx> {\n             );\n             mir[loc.block].statements.insert(\n                 loc.statement_index, Statement {\n-                    source_info: source_info,\n+                    source_info,\n                     kind: stmt\n                 });\n             delta += 1;"}, {"sha": "763f885b4d005e4ede9408f9930dc61e53cfac85", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -470,7 +470,7 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut CheckCrateVisitor {\n-        tcx: tcx,\n+        tcx,\n         tables: &ty::TypeckTables::empty(None),\n         in_fn: false,\n         promotable: false,"}, {"sha": "1b2a07cd1a7b8d47407e6208fd920ac2d32b8fdc", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -51,7 +51,7 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n pub fn check_crate(sess: &Session, map: &Map) {\n     let krate = map.krate();\n     krate.visit_all_item_likes(&mut CheckLoopVisitor {\n-        sess: sess,\n+        sess,\n         hir_map: map,\n         cx: Normal,\n     }.as_deep_visitor());"}, {"sha": "987243b523473054a966f0efca0d3724389e56c5", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -91,8 +91,8 @@ pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>)\n                          -> Result<(), ErrorReported>\n {\n     let mut visitor = CheckCrateVisitor {\n-        sess: sess,\n-        hir_map: hir_map,\n+        sess,\n+        hir_map,\n         discriminant_map: NodeMap(),\n         detected_recursive_ids: NodeSet(),\n     };"}, {"sha": "aba56788928af2c9c332f7c4824bd2c4f8810505", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -91,7 +91,7 @@ pub fn load_plugins(sess: &Session,\n impl<'a> PluginLoader<'a> {\n     fn new(sess: &'a Session, cstore: &'a CStore, crate_name: &str) -> Self {\n         PluginLoader {\n-            sess: sess,\n+            sess,\n             reader: CrateLoader::new(sess, cstore, crate_name),\n             plugins: vec![],\n         }\n@@ -104,8 +104,8 @@ impl<'a> PluginLoader<'a> {\n             let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator, index);\n             let fun = self.dylink_registrar(span, lib, symbol);\n             self.plugins.push(PluginRegistrar {\n-                fun: fun,\n-                args: args,\n+                fun,\n+                args,\n             });\n         }\n     }"}, {"sha": "3f74093241d297e4861f62098e33d61823f879f0", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -67,9 +67,9 @@ impl<'a> Registry<'a> {\n     #[doc(hidden)]\n     pub fn new(sess: &'a Session, krate_span: Span) -> Registry<'a> {\n         Registry {\n-            sess: sess,\n+            sess,\n             args_hidden: None,\n-            krate_span: krate_span,\n+            krate_span,\n             syntax_exts: vec![],\n             early_lint_passes: vec![],\n             late_lint_passes: vec![],"}, {"sha": "959528612c346f750cb81df2c29fc3a38b531471", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -1496,9 +1496,9 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             item_def_id: self.tcx.hir.local_def_id(item_id),\n             span: self.tcx.hir.span(item_id),\n             min_visibility: ty::Visibility::Public,\n-            required_visibility: required_visibility,\n+            required_visibility,\n             has_pub_restricted: self.has_pub_restricted,\n-            has_old_errors: has_old_errors,\n+            has_old_errors,\n         }\n     }\n }\n@@ -1660,7 +1660,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Check privacy of names not checked in previous compilation stages.\n     let mut visitor = NamePrivacyVisitor {\n-        tcx: tcx,\n+        tcx,\n         tables: &empty_tables,\n         current_item: CRATE_NODE_ID,\n         empty_tables: &empty_tables,\n@@ -1670,7 +1670,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Check privacy of explicitly written types and traits as well as\n     // inferred types of expressions and patterns.\n     let mut visitor = TypePrivacyVisitor {\n-        tcx: tcx,\n+        tcx,\n         tables: &empty_tables,\n         current_item: DefId::local(CRATE_DEF_INDEX),\n         span: krate.span,\n@@ -1681,7 +1681,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n-        tcx: tcx,\n+        tcx,\n         access_levels: Default::default(),\n         prev_level: Some(AccessLevel::Public),\n         changed: false,\n@@ -1698,7 +1698,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     {\n         let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n-            tcx: tcx,\n+            tcx,\n             access_levels: &visitor.access_levels,\n             in_variant: false,\n             old_error_set: NodeSet(),\n@@ -1708,7 +1708,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         let has_pub_restricted = {\n             let mut pub_restricted_visitor = PubRestrictedVisitor {\n-                tcx: tcx,\n+                tcx,\n                 has_pub_restricted: false\n             };\n             intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n@@ -1717,8 +1717,8 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Check for private types and traits in public interfaces\n         let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n-            tcx: tcx,\n-            has_pub_restricted: has_pub_restricted,\n+            tcx,\n+            has_pub_restricted,\n             old_error_set: &visitor.old_error_set,\n             inner_visibility: ty::Visibility::Public,\n         };"}, {"sha": "47fa5357abf0d64b50e6ef7b131d8c4a7cbd2cc0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -172,7 +172,7 @@ impl<'a> Resolver<'a> {\n \n                         let subclass = SingleImport {\n                             target: binding,\n-                            source: source,\n+                            source,\n                             result: self.per_ns(|_, _| Cell::new(Err(Undetermined))),\n                             type_ns_only: false,\n                         };\n@@ -229,7 +229,7 @@ impl<'a> Resolver<'a> {\n                                 target: rename,\n                                 source: ident.node,\n                                 result: self.per_ns(|_, _| Cell::new(Err(Undetermined))),\n-                                type_ns_only: type_ns_only,\n+                                type_ns_only,\n                             };\n                             let id = source_item.node.id;\n                             self.add_import_directive(\n@@ -239,7 +239,7 @@ impl<'a> Resolver<'a> {\n                     }\n                     ViewPathGlob(_) => {\n                         let subclass = GlobImport {\n-                            is_prelude: is_prelude,\n+                            is_prelude,\n                             max_vis: Cell::new(ty::Visibility::Invisible),\n                         };\n                         self.add_import_directive(\n@@ -262,13 +262,13 @@ impl<'a> Resolver<'a> {\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n                     id: item.id,\n-                    parent: parent,\n+                    parent,\n                     imported_module: Cell::new(Some(module)),\n                     subclass: ImportDirectiveSubclass::ExternCrate,\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),\n-                    expansion: expansion,\n+                    expansion,\n                     used: Cell::new(used),\n                 });\n                 self.potentially_unused_imports.push(directive);\n@@ -618,10 +618,10 @@ impl<'a> Resolver<'a> {\n             parent: graph_root,\n             imported_module: Cell::new(Some(module)),\n             subclass: ImportDirectiveSubclass::MacroUse,\n-            span: span,\n+            span,\n             module_path: Vec::new(),\n             vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),\n-            expansion: expansion,\n+            expansion,\n             used: Cell::new(false),\n         });\n "}, {"sha": "05c227340d8685d7e89772f112628eb3fadcdc5d", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -135,7 +135,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n     }\n \n     let mut visitor = UnusedImportCheckVisitor {\n-        resolver: resolver,\n+        resolver,\n         unused_imports: NodeMap(),\n     };\n     visit::walk_crate(&mut visitor, krate);"}, {"sha": "2502f04ee6aef9594a8b00ecbed4fc2ff0365320", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -793,7 +793,7 @@ impl<'a> Rib<'a> {\n     fn new(kind: RibKind<'a>) -> Rib<'a> {\n         Rib {\n             bindings: FxHashMap(),\n-            kind: kind,\n+            kind,\n         }\n     }\n }\n@@ -875,9 +875,9 @@ impl<'a> ModuleData<'a> {\n            expansion: Mark,\n            span: Span) -> Self {\n         ModuleData {\n-            parent: parent,\n-            kind: kind,\n-            normal_ancestor_id: normal_ancestor_id,\n+            parent,\n+            kind,\n+            normal_ancestor_id,\n             resolutions: RefCell::new(FxHashMap()),\n             legacy_macro_resolutions: RefCell::new(Vec::new()),\n             macro_resolutions: RefCell::new(Vec::new()),\n@@ -887,8 +887,8 @@ impl<'a> ModuleData<'a> {\n             globs: RefCell::new((Vec::new())),\n             traits: RefCell::new(None),\n             populated: Cell::new(normal_ancestor_id.is_local()),\n-            span: span,\n-            expansion: expansion,\n+            span,\n+            expansion,\n         }\n     }\n \n@@ -1356,13 +1356,13 @@ impl<'a> Resolver<'a> {\n         macro_defs.insert(Mark::root(), root_def_id);\n \n         Resolver {\n-            session: session,\n+            session,\n \n-            definitions: definitions,\n+            definitions,\n \n             // The outermost module has def ID 0; this is not reflected in the\n             // AST.\n-            graph_root: graph_root,\n+            graph_root,\n             prelude: None,\n \n             has_self: FxHashSet(),\n@@ -1389,7 +1389,7 @@ impl<'a> Resolver<'a> {\n             freevars_seen: NodeMap(),\n             export_map: NodeMap(),\n             trait_map: NodeMap(),\n-            module_map: module_map,\n+            module_map,\n             block_map: NodeMap(),\n             extern_module_map: FxHashMap(),\n \n@@ -1404,7 +1404,7 @@ impl<'a> Resolver<'a> {\n             gated_errors: FxHashSet(),\n             disallowed_shadowing: Vec::new(),\n \n-            arenas: arenas,\n+            arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err),\n                 expansion: Mark::root(),\n@@ -1416,14 +1416,14 @@ impl<'a> Resolver<'a> {\n             use_extern_macros:\n                 features.use_extern_macros || features.proc_macro || features.decl_macro,\n \n-            crate_loader: crate_loader,\n+            crate_loader,\n             macro_names: FxHashSet(),\n             global_macros: FxHashMap(),\n             lexical_macro_resolutions: Vec::new(),\n             macro_map: FxHashMap(),\n             macro_exports: Vec::new(),\n-            invocations: invocations,\n-            macro_defs: macro_defs,\n+            invocations,\n+            macro_defs,\n             local_macro_def_scopes: FxHashMap(),\n             name_already_seen: FxHashMap(),\n             whitelisted_legacy_custom_derives: Vec::new(),\n@@ -1502,7 +1502,7 @@ impl<'a> Resolver<'a> {\n             NameBindingKind::Import { .. } => false,\n             NameBindingKind::Ambiguity { b1, b2, legacy } => {\n                 self.ambiguity_errors.push(AmbiguityError {\n-                    span: span, name: ident.name, lexical: false, b1: b1, b2: b2, legacy: legacy,\n+                    span: span, name: ident.name, lexical: false, b1: b1, b2: b2, legacy,\n                 });\n                 if legacy {\n                     self.record_use(ident, ns, b1, span);\n@@ -2915,7 +2915,7 @@ impl<'a> Resolver<'a> {\n                             if record_used {\n                                 vec.push(Freevar {\n                                     def: prev_def,\n-                                    span: span,\n+                                    span,\n                                 });\n                                 seen.insert(node_id, depth);\n                             }"}, {"sha": "f8dc341653eceb663ab938cb631e0c48d3bae78d", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -273,7 +273,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                         id: attr::mk_attr_id(),\n                         style: ast::AttrStyle::Outer,\n                         is_sugared_doc: false,\n-                        span: span,\n+                        span,\n                     });\n                 }\n             }\n@@ -491,7 +491,7 @@ impl<'a> Resolver<'a> {\n                             let name = ident.name;\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 span: path_span,\n-                                name: name,\n+                                name,\n                                 b1: shadower,\n                                 b2: binding,\n                                 lexical: true,"}, {"sha": "5616971e9d1f54ff50197e1e8f920778f9c94e96", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -165,7 +165,7 @@ impl<'a> Resolver<'a> {\n                        binding.def() != shadowed_glob.def() {\n                         self.ambiguity_errors.push(AmbiguityError {\n                             span: path_span,\n-                            name: name,\n+                            name,\n                             lexical: false,\n                             b1: binding,\n                             b2: shadowed_glob,\n@@ -265,13 +265,13 @@ impl<'a> Resolver<'a> {\n         let current_module = self.current_module;\n         let directive = self.arenas.alloc_import_directive(ImportDirective {\n             parent: current_module,\n-            module_path: module_path,\n+            module_path,\n             imported_module: Cell::new(None),\n-            subclass: subclass,\n-            span: span,\n-            id: id,\n+            subclass,\n+            span,\n+            id,\n             vis: Cell::new(vis),\n-            expansion: expansion,\n+            expansion,\n             used: Cell::new(false),\n         });\n \n@@ -311,13 +311,13 @@ impl<'a> Resolver<'a> {\n \n         self.arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Import {\n-                binding: binding,\n-                directive: directive,\n+                binding,\n+                directive,\n                 used: Cell::new(false),\n                 legacy_self_import: false,\n             },\n             span: directive.span,\n-            vis: vis,\n+            vis,\n             expansion: directive.expansion,\n         })\n     }\n@@ -661,8 +661,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             legacy_self_import = Some(directive);\n             let binding = this.arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Import {\n-                    binding: binding,\n-                    directive: directive,\n+                    binding,\n+                    directive,\n                     used: Cell::new(false),\n                     legacy_self_import: true,\n                 },"}, {"sha": "619ebbc5422e05401296bcebb726138711f54734", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -83,8 +83,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         DumpVisitor {\n             tcx: save_ctxt.tcx,\n-            save_ctxt: save_ctxt,\n-            dumper: dumper,\n+            save_ctxt,\n+            dumper,\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: HashSet::new(),\n@@ -1351,7 +1351,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                                 self.span_from_span(sub_span.expect(\"No span found for var ref\"));\n                             self.dumper.dump_ref(Ref {\n                                 kind: RefKind::Variable,\n-                                span: span,\n+                                span,\n                                 ref_id: ::id_from_def_id(def.struct_variant().fields[idx.node].did),\n                             });\n                         }"}, {"sha": "f16ce13b2d5c8b31d6b57653829e1df84ce3ba6b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -881,7 +881,7 @@ pub struct DumpHandler<'a> {\n impl<'a> DumpHandler<'a> {\n     pub fn new(odir: Option<&'a Path>, cratename: &str) -> DumpHandler<'a> {\n         DumpHandler {\n-            odir: odir,\n+            odir,\n             cratename: cratename.to_owned()\n         }\n     }\n@@ -976,9 +976,9 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     info!(\"Dumping crate {}\", cratename);\n \n     let save_ctxt = SaveContext {\n-        tcx: tcx,\n+        tcx,\n         tables: &ty::TypeckTables::empty(None),\n-        analysis: analysis,\n+        analysis,\n         span_utils: SpanUtils::new(&tcx.sess),\n         config: find_config(config),\n     };\n@@ -1048,7 +1048,7 @@ fn lower_attributes(attrs: Vec<Attribute>, scx: &SaveContext) -> Vec<rls_data::A\n         let value = value[2..value.len()-1].to_string();\n \n         rls_data::Attribute {\n-            value: value,\n+            value,\n             span: scx.span_from_span(attr.span),\n         }\n     }).collect()"}, {"sha": "c7e00245d63502b6b883ac079f79ff9cbfe1c636", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -149,7 +149,7 @@ fn merge_sigs(text: String, sigs: Vec<Signature>) -> Signature {\n \n fn text_sig(text: String) -> Signature {\n     Signature {\n-        text: text,\n+        text,\n         defs: vec![],\n         refs: vec![],\n     }\n@@ -706,8 +706,8 @@ impl Sig for ast::Variant_ {\n                 text.push('}');\n                 Ok(Signature {\n                     text,\n-                    defs: defs,\n-                    refs: refs,\n+                    defs,\n+                    refs,\n                 })\n             }\n             ast::VariantData::Tuple(ref fields, id) => {\n@@ -729,8 +729,8 @@ impl Sig for ast::Variant_ {\n                 text.push(')');\n                 Ok(Signature {\n                     text,\n-                    defs: defs,\n-                    refs: refs,\n+                    defs,\n+                    refs,\n                 })\n             }\n             ast::VariantData::Unit(id) => {"}, {"sha": "36e4d09c963f5b6bd1e8f9d813b77c4b82b45f81", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -32,7 +32,7 @@ pub struct SpanUtils<'a> {\n impl<'a> SpanUtils<'a> {\n     pub fn new(sess: &'a Session) -> SpanUtils<'a> {\n         SpanUtils {\n-            sess: sess,\n+            sess,\n             err_count: Cell::new(0),\n         }\n     }"}, {"sha": "5e50696b56009d7b0819cbb59c671bd644cbb09c", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -433,7 +433,7 @@ impl<'a, 'tcx> ArgType<'tcx> {\n     fn new(layout: TyLayout<'tcx>) -> ArgType<'tcx> {\n         ArgType {\n             kind: ArgKind::Direct,\n-            layout: layout,\n+            layout,\n             cast: None,\n             pad: None,\n             attrs: ArgAttributes::default()\n@@ -808,10 +808,10 @@ impl<'a, 'tcx> FnType<'tcx> {\n         }\n \n         FnType {\n-            args: args,\n-            ret: ret,\n+            args,\n+            ret,\n             variadic: sig.variadic,\n-            cconv: cconv\n+            cconv,\n         }\n     }\n "}, {"sha": "31dee241de440d1edddb9e5d597d52303ca6f45e", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -89,7 +89,7 @@ impl<'a> ArchiveBuilder<'a> {\n     /// by `config`.\n     pub fn new(config: ArchiveConfig<'a>) -> ArchiveBuilder<'a> {\n         ArchiveBuilder {\n-            config: config,\n+            config,\n             removals: Vec::new(),\n             additions: Vec::new(),\n             should_update_symbols: false,\n@@ -190,7 +190,7 @@ impl<'a> ArchiveBuilder<'a> {\n             Err(e) => return Err(io::Error::new(io::ErrorKind::Other, e)),\n         };\n         self.additions.push(Addition::Archive {\n-            archive: archive,\n+            archive,\n             skip: Box::new(skip),\n         });\n         Ok(())"}, {"sha": "d2c96a877fdb71f36b1b7122b8a63b8c7ea5b8cf", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -379,7 +379,7 @@ fn archive_config<'a>(sess: &'a Session,\n                       output: &Path,\n                       input: Option<&Path>) -> ArchiveConfig<'a> {\n     ArchiveConfig {\n-        sess: sess,\n+        sess,\n         dst: output.to_path_buf(),\n         src: input.map(|p| p.to_path_buf()),\n         lib_search_paths: archive_search_paths(sess),"}, {"sha": "ab401465b560b80b09ee460b9ad0d99cb99bbf9c", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -49,31 +49,31 @@ impl<'a, 'tcx> LinkerInfo {\n         match sess.linker_flavor() {\n             LinkerFlavor::Msvc => {\n                 Box::new(MsvcLinker {\n-                    cmd: cmd,\n-                    sess: sess,\n+                    cmd,\n+                    sess,\n                     info: self\n                 }) as Box<Linker>\n             }\n             LinkerFlavor::Em =>  {\n                 Box::new(EmLinker {\n-                    cmd: cmd,\n-                    sess: sess,\n+                    cmd,\n+                    sess,\n                     info: self\n                 }) as Box<Linker>\n             }\n             LinkerFlavor::Gcc =>  {\n                 Box::new(GccLinker {\n-                    cmd: cmd,\n-                    sess: sess,\n+                    cmd,\n+                    sess,\n                     info: self,\n                     hinted_static: false,\n                     is_ld: false,\n                 }) as Box<Linker>\n             }\n             LinkerFlavor::Ld => {\n                 Box::new(GccLinker {\n-                    cmd: cmd,\n-                    sess: sess,\n+                    cmd,\n+                    sess,\n                     info: self,\n                     hinted_static: false,\n                     is_ld: true,"}, {"sha": "8ed9daed49b8fd4a327ff3ec4fbdd79efc126ee3", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -237,7 +237,7 @@ impl ModuleConfig {\n     fn new(sess: &Session, passes: Vec<String>) -> ModuleConfig {\n         ModuleConfig {\n             tm: create_target_machine(sess),\n-            passes: passes,\n+            passes,\n             opt_level: None,\n             opt_size: None,\n \n@@ -426,8 +426,8 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     let tm = config.tm;\n \n     let fv = HandlerFreeVars {\n-        cgcx: cgcx,\n-        diag_handler: diag_handler,\n+        cgcx,\n+        diag_handler,\n     };\n     let fv = &fv as *const HandlerFreeVars as *mut c_void;\n \n@@ -1012,9 +1012,9 @@ fn build_work_item(mtrans: ModuleTranslation,\n                    -> WorkItem\n {\n     WorkItem {\n-        mtrans: mtrans,\n-        config: config,\n-        output_names: output_names\n+        mtrans,\n+        config,\n+        output_names,\n     }\n }\n \n@@ -1136,17 +1136,17 @@ fn start_executing_work(sess: &Session,\n \n     let cgcx = CodegenContext {\n         crate_types: sess.crate_types.borrow().clone(),\n-        each_linked_rlib_for_lto: each_linked_rlib_for_lto,\n+        each_linked_rlib_for_lto,\n         lto: sess.lto(),\n         no_landing_pads: sess.no_landing_pads(),\n         opts: Arc::new(sess.opts.clone()),\n         time_passes: sess.time_passes(),\n-        exported_symbols: exported_symbols,\n+        exported_symbols,\n         plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n         remark: sess.opts.cg.remark.clone(),\n         worker: 0,\n         incr_comp_session_dir: sess.incr_comp_session_dir_opt().map(|r| r.clone()),\n-        coordinator_send: coordinator_send,\n+        coordinator_send,\n         diag_emitter: shared_emitter.clone(),\n         time_graph,\n     };"}, {"sha": "354a85b4d29a5fe4b62d3c28d7453e1debbc3529", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -99,9 +99,9 @@ impl<'a, 'tcx> StatRecorder<'a, 'tcx> {\n     pub fn new(ccx: &'a CrateContext<'a, 'tcx>, name: String) -> StatRecorder<'a, 'tcx> {\n         let istart = ccx.stats().n_llvm_insns.get();\n         StatRecorder {\n-            ccx: ccx,\n+            ccx,\n             name: Some(name),\n-            istart: istart,\n+            istart,\n         }\n     }\n }\n@@ -1058,8 +1058,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let (llcx, llmod) =\n                 context::create_context_and_module(tcx.sess, \"allocator\");\n             let modules = ModuleLlvm {\n-                llmod: llmod,\n-                llcx: llcx,\n+                llmod,\n+                llcx,\n             };\n             time(tcx.sess.time_passes(), \"write allocator module\", || {\n                 allocator::trans(tcx, &modules, kind)"}, {"sha": "8a585e72f59ed2ba296ac721a6b48850beec033d", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -70,8 +70,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             llvm::LLVMCreateBuilderInContext(ccx.llcx())\n         };\n         Builder {\n-            llbuilder: llbuilder,\n-            ccx: ccx,\n+            llbuilder,\n+            ccx,\n         }\n     }\n "}, {"sha": "ae1b60ae7ba283b8b3aca1689df0c2b833a1bf06", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -331,8 +331,8 @@ fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n     {\n         let mut visitor = RootCollector {\n-            scx: scx,\n-            mode: mode,\n+            scx,\n+            mode,\n             exported_symbols,\n             output: &mut roots,\n         };\n@@ -1035,9 +1035,9 @@ fn collect_neighbours<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n     let mir = scx.tcx().instance_mir(instance.def);\n \n     let mut visitor = MirNeighborCollector {\n-        scx: scx,\n+        scx,\n         mir: &mir,\n-        output: output,\n+        output,\n         param_substs: instance.substs,\n         const_context,\n     };"}, {"sha": "09aa3d2335a6a06e4e83e8e9c58f9ad3866df1d5", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -177,7 +177,7 @@ pub struct Funclet {\n impl Funclet {\n     pub fn new(cleanuppad: ValueRef) -> Funclet {\n         Funclet {\n-            cleanuppad: cleanuppad,\n+            cleanuppad,\n             operand: OperandBundleDef::new(\"funclet\", &[cleanuppad]),\n         }\n     }"}, {"sha": "8c6bd302e4bfdb51fd495938024285a04b8ba25c", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -323,10 +323,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         let use_dll_storage_attrs = tcx.sess.target.target.options.is_like_msvc;\n \n         SharedCrateContext {\n-            tcx: tcx,\n-            check_overflow: check_overflow,\n-            use_dll_storage_attrs: use_dll_storage_attrs,\n-            output_filenames: output_filenames,\n+            tcx,\n+            check_overflow,\n+            use_dll_storage_attrs,\n+            output_filenames,\n         }\n     }\n \n@@ -395,10 +395,10 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n             };\n \n             let local_ccx = LocalCrateContext {\n-                llmod: llmod,\n-                llcx: llcx,\n+                llmod,\n+                llcx,\n                 stats: Stats::default(),\n-                codegen_unit: codegen_unit,\n+                codegen_unit,\n                 crate_trans_items,\n                 exported_symbols,\n                 instances: RefCell::new(FxHashMap()),\n@@ -416,7 +416,7 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n                 int_type: Type::from_ref(ptr::null_mut()),\n                 opaque_vec_type: Type::from_ref(ptr::null_mut()),\n                 str_slice_type: Type::from_ref(ptr::null_mut()),\n-                dbg_cx: dbg_cx,\n+                dbg_cx,\n                 eh_personality: Cell::new(None),\n                 eh_unwind_resume: Cell::new(None),\n                 rust_try_fn: Cell::new(None),\n@@ -462,7 +462,7 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n                  -> CrateContext<'a, 'tcx> {\n         assert!(local_ccxs.len() == 1);\n         CrateContext {\n-            shared: shared,\n+            shared,\n             local_ccx: &local_ccxs[0]\n         }\n     }"}, {"sha": "95f13ea87169f30233531f5cc65e5f6b7781a03d", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -129,7 +129,7 @@ fn make_mir_scope(ccx: &CrateContext,\n             loc.col.to_usize() as c_uint)\n     };\n     scopes[scope] = MirDebugScope {\n-        scope_metadata: scope_metadata,\n+        scope_metadata,\n         file_start_pos: loc.file.start_pos,\n         file_end_pos: loc.file.end_pos,\n     };"}, {"sha": "9aba075a20cdb4822aa9036bdc94006ca915b863", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -205,11 +205,11 @@ fn create_and_register_recursive_type_forward_declaration<'a, 'tcx>(\n     type_map.register_type_with_metadata(unfinished_type, metadata_stub);\n \n     UnfinishedMetadata {\n-        unfinished_type: unfinished_type,\n-        unique_type_id: unique_type_id,\n-        metadata_stub: metadata_stub,\n-        llvm_type: llvm_type,\n-        member_description_factory: member_description_factory,\n+        unfinished_type,\n+        unique_type_id,\n+        metadata_stub,\n+        llvm_type,\n+        member_description_factory,\n     }\n }\n \n@@ -847,8 +847,8 @@ struct MetadataCreationResult {\n impl MetadataCreationResult {\n     fn new(metadata: DIType, already_stored_in_typemap: bool) -> MetadataCreationResult {\n         MetadataCreationResult {\n-            metadata: metadata,\n-            already_stored_in_typemap: already_stored_in_typemap\n+            metadata,\n+            already_stored_in_typemap,\n         }\n     }\n }\n@@ -947,10 +947,10 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n             let offset = FixedMemberOffset { bytes: offsets[i].bytes() as usize};\n \n             MemberDescription {\n-                name: name,\n+                name,\n                 llvm_type: type_of::in_memory_type_of(cx, fty),\n                 type_metadata: type_metadata(cx, fty, self.span),\n-                offset: offset,\n+                offset,\n                 flags: DIFlags::FlagZero,\n             }\n         }).collect()\n@@ -987,9 +987,9 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         struct_llvm_type,\n         StructMDF(StructMemberDescriptionFactory {\n             ty: struct_type,\n-            variant: variant,\n-            substs: substs,\n-            span: span,\n+            variant,\n+            substs,\n+            span,\n         })\n     )\n }\n@@ -1052,7 +1052,7 @@ fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         TupleMDF(TupleMemberDescriptionFactory {\n             ty: tuple_type,\n             component_types: component_types.to_vec(),\n-            span: span,\n+            span,\n         })\n     )\n }\n@@ -1111,9 +1111,9 @@ fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         union_metadata_stub,\n         union_llvm_type,\n         UnionMDF(UnionMemberDescriptionFactory {\n-            variant: variant,\n-            substs: substs,\n-            span: span,\n+            variant,\n+            substs,\n+            span,\n         })\n     )\n }\n@@ -1462,14 +1462,14 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let member_description_factory =\n         VariantMDF(VariantMemberDescriptionFactory {\n             offsets: &struct_def.offsets[..],\n-            args: args,\n+            args,\n             discriminant_type_metadata: match discriminant_info {\n                 RegularDiscriminant(discriminant_type_metadata) => {\n                     Some(discriminant_type_metadata)\n                 }\n                 _ => None\n             },\n-            span: span,\n+            span,\n         });\n \n     (metadata_stub, variant_llvm_type, member_description_factory)\n@@ -1590,12 +1590,12 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         enum_metadata,\n         enum_llvm_type,\n         EnumMDF(EnumMemberDescriptionFactory {\n-            enum_type: enum_type,\n+            enum_type,\n             type_rep: type_rep.layout,\n-            discriminant_type_metadata: discriminant_type_metadata,\n-            containing_scope: containing_scope,\n-            file_metadata: file_metadata,\n-            span: span,\n+            discriminant_type_metadata,\n+            containing_scope,\n+            file_metadata,\n+            span,\n         }),\n     );\n "}, {"sha": "83366c13453bc4fc3cb8acbda8bb5f91339d7798", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -87,9 +87,9 @@ impl<'tcx> CrateDebugContext<'tcx> {\n         // DIBuilder inherits context from the module, so we'd better use the same one\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n         CrateDebugContext {\n-            llcontext: llcontext,\n-            llmod: llmod,\n-            builder: builder,\n+            llcontext,\n+            llmod,\n+            builder,\n             created_files: RefCell::new(FxHashMap()),\n             created_enum_disr_types: RefCell::new(FxHashMap()),\n             type_map: RefCell::new(TypeMap::new()),\n@@ -292,7 +292,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     // Initialize fn debug context (including scope map and namespace map)\n     let fn_debug_context = FunctionDebugContextData {\n-        fn_metadata: fn_metadata,\n+        fn_metadata,\n         source_locations_enabled: Cell::new(false),\n         defining_crate: def_id.krate,\n     };"}, {"sha": "7393802294aac38da8628d4de0df5700c6e2b95f", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -72,9 +72,9 @@ pub enum InternalDebugLocation {\n impl InternalDebugLocation {\n     pub fn new(scope: DIScope, line: usize, col: usize) -> InternalDebugLocation {\n         KnownLocation {\n-            scope: scope,\n-            line: line,\n-            col: col,\n+            scope,\n+            line,\n+            col,\n         }\n     }\n }"}, {"sha": "28fe1044e7454c849db2e8e70c0aeda7dfcb6fa8", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -673,8 +673,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         Ref(ptr, align)\n                     };\n                     let op = OperandRef {\n-                        val: val,\n-                        ty: ty\n+                        val,\n+                        ty,\n                     };\n                     self.trans_argument(bcx, op, llargs, fn_ty, next_idx, llfn, def);\n                 }\n@@ -697,7 +697,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     // If the tuple is immediate, the elements are as well\n                     let op = OperandRef {\n                         val: Immediate(elem),\n-                        ty: ty\n+                        ty,\n                     };\n                     self.trans_argument(bcx, op, llargs, fn_ty, next_idx, llfn, def);\n                 }\n@@ -713,7 +713,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     // Pair is always made up of immediates\n                     let op = OperandRef {\n                         val: Immediate(elem),\n-                        ty: ty\n+                        ty,\n                     };\n                     self.trans_argument(bcx, op, llargs, fn_ty, next_idx, llfn, def);\n                 }"}, {"sha": "293e6462de2797d210aca4acc70775f206051404", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -57,8 +57,8 @@ pub struct Const<'tcx> {\n impl<'tcx> Const<'tcx> {\n     pub fn new(llval: ValueRef, ty: Ty<'tcx>) -> Const<'tcx> {\n         Const {\n-            llval: llval,\n-            ty: ty\n+            llval,\n+            ty,\n         }\n     }\n \n@@ -158,7 +158,7 @@ impl<'tcx> Const<'tcx> {\n         };\n \n         OperandRef {\n-            val: val,\n+            val,\n             ty: self.ty\n         }\n     }\n@@ -247,9 +247,9 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n            args: IndexVec<mir::Local, Result<Const<'tcx>, ConstEvalErr<'tcx>>>)\n            -> MirConstContext<'a, 'tcx> {\n         let mut context = MirConstContext {\n-            ccx: ccx,\n-            mir: mir,\n-            substs: substs,\n+            ccx,\n+            mir,\n+            substs,\n             locals: (0..mir.local_decls.len()).map(|_| None).collect(),\n         };\n         for (i, arg) in args.into_iter().enumerate() {\n@@ -491,7 +491,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 };\n                 ConstLvalue {\n                     base: projected,\n-                    llextra: llextra,\n+                    llextra,\n                     ty: projected_ty\n                 }\n             }"}, {"sha": "89c76ccdd27c2d702c63040c34104b22d2be4723", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -380,7 +380,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 };\n                 LvalueRef {\n                     llval: llprojected,\n-                    llextra: llextra,\n+                    llextra,\n                     ty: projected_ty,\n                     alignment: align,\n                 }"}, {"sha": "a67fa070324c358fb0f2859d8db72e1a205ba2b9", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -228,19 +228,19 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     let (landing_pads, funclets) = create_funclets(&bcx, &cleanup_kinds, &block_bcxs);\n \n     let mut mircx = MirContext {\n-        mir: mir,\n-        llfn: llfn,\n-        fn_ty: fn_ty,\n-        ccx: ccx,\n+        mir,\n+        llfn,\n+        fn_ty,\n+        ccx,\n         llpersonalityslot: None,\n         blocks: block_bcxs,\n         unreachable_block: None,\n-        cleanup_kinds: cleanup_kinds,\n-        landing_pads: landing_pads,\n+        cleanup_kinds,\n+        landing_pads,\n         funclets: &funclets,\n-        scopes: scopes,\n+        scopes,\n         locals: IndexVec::new(),\n-        debug_context: debug_context,\n+        debug_context,\n         param_substs: {\n             assert!(!instance.substs.needs_infer());\n             instance.substs\n@@ -486,7 +486,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                 OperandValue::Immediate(llarg)\n             };\n             let operand = OperandRef {\n-                val: val,\n+                val,\n                 ty: arg_ty\n             };\n             return LocalRef::Operand(Some(operand.unpack_if_pair(bcx)));"}, {"sha": "9ce1749190ba17710228d41162c423ce42be2ba8", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -98,8 +98,8 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n             OperandValue::Immediate(C_null(llty))\n         };\n         OperandRef {\n-            val: val,\n-            ty: ty\n+            val,\n+            ty,\n         }\n     }\n \n@@ -122,7 +122,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n         };\n         LvalueRef {\n             llval: llptr,\n-            llextra: llextra,\n+            llextra,\n             ty: LvalueTy::from_ty(projected_ty),\n             alignment: Alignment::AbiAligned,\n         }"}, {"sha": "8051e04060a4ccaae281addfd40ce009464719a0", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -148,9 +148,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                     dest.llval, dest.ty, dest.alignment);\n                                 let field_index = active_field_index.unwrap_or(i);\n                                 val.ty = LvalueTy::Downcast {\n-                                    adt_def: adt_def,\n+                                    adt_def,\n                                     substs: self.monomorphize(&substs),\n-                                    variant_index: variant_index,\n+                                    variant_index,\n                                 };\n                                 let (lldest_i, align) = val.trans_field_ptr(&bcx, field_index);\n                                 self.store_operand(&bcx, lldest_i, align.to_align(), op);\n@@ -348,7 +348,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     }\n                 };\n                 let operand = OperandRef {\n-                    val: val,\n+                    val,\n                     ty: cast_ty\n                 };\n                 (bcx, operand)"}, {"sha": "38232ed1d113a7696b03290991b72857fcd47608", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -384,9 +384,9 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                omit_local_crate_name: bool)\n                -> Self {\n         DefPathBasedNames {\n-            tcx: tcx,\n-            omit_disambiguators: omit_disambiguators,\n-            omit_local_crate_name: omit_local_crate_name,\n+            tcx,\n+            omit_disambiguators,\n+            omit_local_crate_name,\n         }\n     }\n "}, {"sha": "32fa0534db618abf994697e9a6f3ea68f906c116", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -117,8 +117,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                     def_id: tcx.hir.local_def_id(id),\n-                    index: index,\n-                    name: name\n+                    index,\n+                    name,\n                 }))\n             }\n "}, {"sha": "e0e946a9c63fa7b367a5ef37c80da9ee7de024b0", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             cur_ty: self.resolve_type_vars_if_possible(&base_ty),\n             obligations: vec![],\n             at_start: true,\n-            span: span,\n+            span,\n         }\n     }\n "}, {"sha": "9c6cacb9d25f9e04e0dbf95664b27393be0d5d53", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -136,12 +136,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                span: Span)\n                -> Result<CastCheck<'tcx>, ErrorReported> {\n         let check = CastCheck {\n-            expr: expr,\n-            expr_ty: expr_ty,\n-            expr_diverges: expr_diverges,\n-            cast_ty: cast_ty,\n-            cast_span: cast_span,\n-            span: span,\n+            expr,\n+            expr_ty,\n+            expr_diverges,\n+            cast_ty,\n+            cast_span,\n+            span,\n         };\n \n         // For better error messages, check for some obviously unsized"}, {"sha": "48671e864b211b1a05dac0bcb3ffb33b7eab695a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -128,8 +128,8 @@ fn success<'tcx>(adj: Vec<Adjustment<'tcx>>,\n impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n     fn new(fcx: &'f FnCtxt<'f, 'gcx, 'tcx>, cause: ObligationCause<'tcx>) -> Self {\n         Coerce {\n-            fcx: fcx,\n-            cause: cause,\n+            fcx,\n+            cause,\n             use_lub: false,\n         }\n     }"}, {"sha": "cd2adfb7ab0c19d34d18e03913d56ccf15ed29cf", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -69,10 +69,10 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n            call_expr: &'gcx hir::Expr)\n            -> ConfirmContext<'a, 'gcx, 'tcx> {\n         ConfirmContext {\n-            fcx: fcx,\n-            span: span,\n-            self_expr: self_expr,\n-            call_expr: call_expr,\n+            fcx,\n+            span,\n+            self_expr,\n+            call_expr,\n         }\n     }\n "}, {"sha": "34cc6027a64210f84fc202b6b89e0e3c32be74a5", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -83,10 +83,10 @@ impl<'tcx> NoMatchData<'tcx> {\n                mode: probe::Mode)\n                -> Self {\n         NoMatchData {\n-            static_candidates: static_candidates,\n-            unsatisfied_predicates: unsatisfied_predicates,\n-            out_of_scope_traits: out_of_scope_traits,\n-            mode: mode,\n+            static_candidates,\n+            unsatisfied_predicates,\n+            out_of_scope_traits,\n+            mode,\n         }\n     }\n }\n@@ -331,7 +331,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                  ty::Predicate::WellFormed(method_ty)));\n \n         let callee = MethodCallee {\n-            def_id: def_id,\n+            def_id,\n             substs: trait_ref.substs,\n             sig: fn_sig,\n         };"}, {"sha": "4cb5eef4563293ad9806b289e643baa182f7a94e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         } else {\n             vec![CandidateStep {\n-                     self_ty: self_ty,\n+                     self_ty,\n                      autoderefs: 0,\n                      unsize: false,\n                  }]\n@@ -361,15 +361,15 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n            opt_simplified_steps: Option<Vec<ty::fast_reject::SimplifiedType>>)\n            -> ProbeContext<'a, 'gcx, 'tcx> {\n         ProbeContext {\n-            fcx: fcx,\n-            span: span,\n-            mode: mode,\n-            looking_for: looking_for,\n+            fcx,\n+            span,\n+            mode,\n+            looking_for,\n             inherent_candidates: Vec::new(),\n             extension_candidates: Vec::new(),\n             impl_dups: FxHashSet(),\n             steps: Rc::new(steps),\n-            opt_simplified_steps: opt_simplified_steps,\n+            opt_simplified_steps,\n             static_candidates: Vec::new(),\n             private_candidate: None,\n             unsatisfied_predicates: Vec::new(),"}, {"sha": "2337e989be46df22ead6f7224e1b4bbcb7afc02c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -584,7 +584,7 @@ pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a>\n     let borrow = tcx.all_traits.borrow();\n     assert!(borrow.is_some());\n     AllTraits {\n-        borrow: borrow,\n+        borrow,\n         idx: 0,\n     }\n }"}, {"sha": "bc03c9254173823f67e5e17b1d40547ab002b439", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -393,8 +393,8 @@ impl UnsafetyState {\n                     hir::DefaultBlock =>\n                         (unsafety, self.def, self.unsafe_push_count),\n                 };\n-                UnsafetyState{ def: def,\n-                               unsafety: unsafety,\n+                UnsafetyState{ def,\n+                               unsafety,\n                                unsafe_push_count: count,\n                                from_fn: false }\n             }\n@@ -609,7 +609,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             tables: MaybeInProgressTables {\n                 maybe_tables: infcx.in_progress_tables,\n             },\n-            infcx: infcx,\n+            infcx,\n             fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n             locals: RefCell::new(NodeMap()),\n             deferred_call_resolutions: RefCell::new(DefIdMap()),\n@@ -1697,7 +1697,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n-            body_id: body_id,\n+            body_id,\n             param_env,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n@@ -1709,7 +1709,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 stack: Vec::new(),\n                 by_id: NodeMap(),\n             }),\n-            inh: inh,\n+            inh,\n         }\n     }\n \n@@ -3783,7 +3783,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               };\n \n               let ctxt = BreakableCtxt {\n-                  coerce: coerce,\n+                  coerce,\n                   may_break: false, // will get updated if/when we find a `break`\n               };\n "}, {"sha": "73c243d27d1cfc406d790d1b00e55283c9a53399", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -232,8 +232,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                Subject(subject): Subject) -> RegionCtxt<'a, 'gcx, 'tcx> {\n         let region_maps = fcx.tcx.region_maps(subject);\n         RegionCtxt {\n-            fcx: fcx,\n-            region_maps: region_maps,\n+            fcx,\n+            region_maps,\n             repeating_scope: initial_repeating_scope,\n             body_id: initial_body_id,\n             call_site_scope: None,"}, {"sha": "f85835e3800f41777fbd6378ebff9a599578e4af", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n             let fcx = FnCtxt::new(&inh, param_env, id);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 tcx: fcx.tcx.global_tcx(),\n-                code: code\n+                code,\n             });\n             fcx.select_all_obligations_or_error();\n             fcx.regionck_item(id, span, &wf_tys);\n@@ -66,7 +66,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>)\n                -> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         CheckTypeWellFormedVisitor {\n-            tcx: tcx,\n+            tcx,\n             code: ObligationCauseCode::MiscObligation\n         }\n     }\n@@ -211,8 +211,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         CheckWfFcxBuilder {\n             inherited: Inherited::build(self.tcx, def_id),\n             code: self.code.clone(),\n-            id: id,\n-            span: span,\n+            id,\n+            span,\n             param_env: self.tcx.param_env(def_id),\n         }\n     }\n@@ -471,7 +471,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             ExplicitSelf::ByReference(region, mutbl) => {\n                 fcx.tcx.mk_ref(region, ty::TypeAndMut {\n                     ty: self_ty,\n-                    mutbl: mutbl\n+                    mutbl,\n                 })\n             }\n             ExplicitSelf::ByBox => fcx.tcx.mk_box(self_ty)"}, {"sha": "36c72fc4b19d60b5601023a03633c613fc90ea07", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -80,9 +80,9 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         let owner = fcx.tcx.hir.definitions().node_to_hir_id(body.id().node_id);\n \n         WritebackCx {\n-            fcx: fcx,\n+            fcx,\n             tables: ty::TypeckTables::empty(Some(DefId::local(owner.owner))),\n-            body: body\n+            body,\n         }\n     }\n \n@@ -445,8 +445,8 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n         Resolver {\n             tcx: fcx.tcx,\n             infcx: fcx,\n-            span: span,\n-            body: body,\n+            span,\n+            body,\n         }\n     }\n "}, {"sha": "ea86c570c82967db554ef10b161a23298f7bbe4a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -185,8 +185,8 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n            -> ItemCtxt<'a,'tcx> {\n         ItemCtxt {\n-            tcx: tcx,\n-            item_def_id: item_def_id,\n+            tcx,\n+            item_def_id,\n         }\n     }\n }\n@@ -630,10 +630,10 @@ fn convert_struct_variant<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }).collect();\n     ty::VariantDef {\n-        did: did,\n-        name: name,\n-        discr: discr,\n-        fields: fields,\n+        did,\n+        name,\n+        discr,\n+        fields,\n         ctor_kind: CtorKind::from_hir(def),\n     }\n }\n@@ -1028,7 +1028,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             types.extend(fv.iter().enumerate().map(|(i, _)| ty::TypeParameterDef {\n                 index: type_start + i as u32,\n                 name: Symbol::intern(\"<upvar>\"),\n-                def_id: def_id,\n+                def_id,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n                 pure_wrt_drop: false,\n@@ -1043,11 +1043,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,\n-        parent_regions: parent_regions,\n-        parent_types: parent_types,\n-        regions: regions,\n-        types: types,\n-        type_param_to_index: type_param_to_index,\n+        parent_regions,\n+        parent_types,\n+        regions,\n+        types,\n+        type_param_to_index,\n         has_self: has_self || parent_has_self,\n         has_late_bound_regions: has_late_bound_regions(tcx, node),\n     })\n@@ -1382,7 +1382,7 @@ fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                 ItemTrait(_, ref generics, .., ref items) => {\n                     is_trait = Some((ty::TraitRef {\n-                        def_id: def_id,\n+                        def_id,\n                         substs: Substs::identity_for_item(tcx, def_id)\n                     }, items));\n                     generics\n@@ -1441,7 +1441,7 @@ fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for param in early_bound_lifetimes_from_generics(tcx, ast_generics) {\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.lifetime.id),\n-            index: index,\n+            index,\n             name: param.lifetime.name\n         }));\n         index += 1;\n@@ -1560,7 +1560,7 @@ fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     ty::GenericPredicates {\n         parent: generics.parent,\n-        predicates: predicates\n+        predicates,\n     }\n }\n \n@@ -1611,10 +1611,10 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     };\n \n     Bounds {\n-        region_bounds: region_bounds,\n-        implicitly_sized: implicitly_sized,\n-        trait_bounds: trait_bounds,\n-        projection_bounds: projection_bounds,\n+        region_bounds,\n+        implicitly_sized,\n+        trait_bounds,\n+        projection_bounds,\n     }\n }\n "}, {"sha": "09c7487e635601924d223763cc3ab9dd3dd0615d", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -48,7 +48,7 @@ pub fn parameters_for<'tcx, T>(t: &T,\n \n     let mut collector = ParameterCollector {\n         parameters: vec![],\n-        include_nonconstraining: include_nonconstraining\n+        include_nonconstraining,\n     };\n     t.visit_with(&mut collector);\n     collector.parameters"}, {"sha": "40474a7933f80b701dcf68a27e68f2fe16f32028", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -73,11 +73,11 @@ pub fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>)\n     let invariant = terms_cx.arena.alloc(ConstantTerm(ty::Invariant));\n     let bivariant = terms_cx.arena.alloc(ConstantTerm(ty::Bivariant));\n     let mut constraint_cx = ConstraintContext {\n-        terms_cx: terms_cx,\n-        covariant: covariant,\n-        contravariant: contravariant,\n-        invariant: invariant,\n-        bivariant: bivariant,\n+        terms_cx,\n+        covariant,\n+        contravariant,\n+        invariant,\n+        bivariant,\n         constraints: Vec::new(),\n         dependencies: TransitiveRelation::new(),\n     };\n@@ -213,7 +213,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         debug!(\"add_constraint(index={}, variance={:?})\", index, variance);\n         self.constraints.push(Constraint {\n             inferred: InferredIndex(current.inferred_start.0 + index as usize),\n-            variance: variance,\n+            variance,\n         });\n     }\n "}, {"sha": "c624b11c5eca26179a0c1b8a3740fe1b890d8259", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -79,8 +79,8 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n                                                      arena: &'a mut TypedArena<VarianceTerm<'a>>)\n                                                      -> TermsContext<'a, 'tcx> {\n     let mut terms_cx = TermsContext {\n-        tcx: tcx,\n-        arena: arena,\n+        tcx,\n+        arena,\n         inferred_starts: NodeMap(),\n         inferred_terms: vec![],\n "}, {"sha": "5d39d1d27f4c321ee47ecc380cbffc2a828efe13", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -102,7 +102,7 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n         source: cx.tcx.def_span(did).clean(cx),\n         name: Some(name.clean(cx)),\n         attrs: load_attrs(cx, did),\n-        inner: inner,\n+        inner,\n         visibility: Some(clean::Public),\n         stability: cx.tcx.lookup_stability(did).clean(cx),\n         deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n@@ -142,7 +142,7 @@ pub fn build_external_trait(cx: &DocContext, did: DefId) -> clean::Trait {\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n     clean::Trait {\n         unsafety: cx.tcx.trait_def(did).unsafety,\n-        generics: generics,\n+        generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n     }\n@@ -162,7 +162,7 @@ fn build_external_function(cx: &DocContext, did: DefId) -> clean::Function {\n         decl: (did, sig).clean(cx),\n         generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n         unsafety: sig.unsafety(),\n-        constness: constness,\n+        constness,\n         abi: sig.abi(),\n     }\n }\n@@ -302,7 +302,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n             }),\n             source: tcx.def_span(did).clean(cx),\n             name: None,\n-            attrs: attrs,\n+            attrs,\n             visibility: Some(clean::Inherited),\n             stability: tcx.lookup_stability(did).clean(cx),\n             deprecation: tcx.lookup_deprecation(did).clean(cx),\n@@ -359,11 +359,11 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n                         };\n \n                         clean::MethodItem(clean::Method {\n-                            unsafety: unsafety,\n-                            constness: constness,\n-                            decl: decl,\n-                            generics: generics,\n-                            abi: abi\n+                            unsafety,\n+                            constness,\n+                            decl,\n+                            generics,\n+                            abi,\n                         })\n                     }\n                     ref r => panic!(\"not a tymethod: {:?}\", r),\n@@ -414,15 +414,15 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         inner: clean::ImplItem(clean::Impl {\n             unsafety: hir::Unsafety::Normal, // FIXME: this should be decoded\n             provided_trait_methods: provided,\n-            trait_: trait_,\n-            for_: for_,\n+            trait_,\n+            for_,\n             generics: (tcx.generics_of(did), &predicates).clean(cx),\n             items: trait_items,\n             polarity: Some(polarity.clean(cx)),\n         }),\n         source: tcx.def_span(did).clean(cx),\n         name: None,\n-        attrs: attrs,\n+        attrs,\n         visibility: Some(clean::Inherited),\n         stability: tcx.lookup_stability(did).clean(cx),\n         deprecation: tcx.lookup_deprecation(did).clean(cx),\n@@ -434,7 +434,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n     let mut items = Vec::new();\n     fill_in(cx, did, &mut items);\n     return clean::Module {\n-        items: items,\n+        items,\n         is_crate: false,\n     };\n "}, {"sha": "f4aef8ab377c01f53d2421b4e61769386d730368", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     visibility: Some(Public),\n                     stability: get_stability(cx, def_id),\n                     deprecation: get_deprecation(cx, def_id),\n-                    def_id: def_id,\n+                    def_id,\n                     inner: PrimitiveItem(prim),\n                 }\n             }));\n@@ -166,11 +166,11 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         let mut external_traits = cx.external_traits.borrow_mut();\n \n         Crate {\n-            name: name,\n-            src: src,\n+            name,\n+            src,\n             module: Some(module),\n-            externs: externs,\n-            primitives: primitives,\n+            externs,\n+            primitives,\n             access_levels: Arc::new(mem::replace(&mut access_levels, Default::default())),\n             external_traits: mem::replace(&mut external_traits, Default::default()),\n         }\n@@ -252,7 +252,7 @@ impl Clean<ExternalCrate> for CrateNum {\n             name: cx.tcx.crate_name(*self).to_string(),\n             src: PathBuf::from(krate_src),\n             attrs: cx.tcx.get_attrs(root).clean(cx),\n-            primitives: primitives,\n+            primitives,\n         }\n     }\n }\n@@ -474,7 +474,7 @@ impl Clean<Item> for doctree::Module {\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n-               items: items\n+               items,\n             })\n         }\n     }\n@@ -519,7 +519,7 @@ impl AttributesExt for [ast::Attribute] {\n         ListAttributesIter {\n             attrs: self.iter(),\n             current_list: Vec::new().into_iter(),\n-            name: name\n+            name,\n         }\n     }\n }\n@@ -673,9 +673,9 @@ impl TyParamBound {\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         TraitBound(PolyTrait {\n             trait_: ResolvedPath {\n-                path: path,\n+                path,\n                 typarams: None,\n-                did: did,\n+                did,\n                 is_generic: false,\n             },\n             lifetimes: vec![]\n@@ -715,9 +715,9 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n                 ty::TyTuple(ref tys, _) => tys.iter().map(|t| t.clean(cx)).collect(),\n                 _ => {\n                     return PathParameters::AngleBracketed {\n-                        lifetimes: lifetimes,\n+                        lifetimes,\n                         types: types.clean(cx),\n-                        bindings: bindings\n+                        bindings,\n                     }\n                 }\n             };\n@@ -728,15 +728,15 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n             //     _ => Some(types[1].clean(cx))\n             // };\n             PathParameters::Parenthesized {\n-                inputs: inputs,\n-                output: output\n+                inputs,\n+                output,\n             }\n         },\n         _ => {\n             PathParameters::AngleBracketed {\n-                lifetimes: lifetimes,\n+                lifetimes,\n                 types: types.clean(cx),\n-                bindings: bindings\n+                bindings,\n             }\n         }\n     }\n@@ -784,7 +784,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         TraitBound(\n             PolyTrait {\n                 trait_: ResolvedPath {\n-                    path: path,\n+                    path,\n                     typarams: None,\n                     did: self.def_id,\n                     is_generic: false,\n@@ -1181,7 +1181,7 @@ impl<'a> Clean<Arguments> for (&'a [P<hir::Ty>], &'a [Spanned<ast::Name>]) {\n                     name = \"_\".to_string();\n                 }\n                 Argument {\n-                    name: name,\n+                    name,\n                     type_: ty.clean(cx),\n                 }\n             }).collect()\n@@ -1359,7 +1359,7 @@ impl Clean<Item> for hir::TraitItem {\n             visibility: None,\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            inner: inner\n+            inner,\n         }\n     }\n }\n@@ -1391,7 +1391,7 @@ impl Clean<Item> for hir::ImplItem {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            inner: inner\n+            inner,\n         }\n     }\n }\n@@ -1438,8 +1438,8 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                 if provided {\n                     MethodItem(Method {\n                         unsafety: sig.unsafety(),\n-                        generics: generics,\n-                        decl: decl,\n+                        generics,\n+                        decl,\n                         abi: sig.abi(),\n \n                         // trait methods cannot (currently, at least) be const\n@@ -1448,8 +1448,8 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                 } else {\n                     TyMethodItem(TyMethod {\n                         unsafety: sig.unsafety(),\n-                        generics: generics,\n-                        decl: decl,\n+                        generics,\n+                        decl,\n                         abi: sig.abi(),\n                     })\n                 }\n@@ -1515,7 +1515,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             def_id: self.def_id,\n             attrs: inline::load_attrs(cx, self.def_id),\n             source: cx.tcx.def_span(self.def_id).clean(cx),\n-            inner: inner,\n+            inner,\n         }\n     }\n }\n@@ -1835,7 +1835,7 @@ impl Clean<Type> for hir::Ty {\n                 }\n                 let trait_path = hir::Path {\n                     span: self.span,\n-                    def: def,\n+                    def,\n                     segments: vec![].into(),\n                 };\n                 Type::QPath {\n@@ -1854,10 +1854,10 @@ impl Clean<Type> for hir::Ty {\n                             bounds.push(RegionBound(lifetime.clean(cx)));\n                         }\n                         ResolvedPath {\n-                            path: path,\n+                            path,\n                             typarams: Some(bounds),\n-                            did: did,\n-                            is_generic: is_generic,\n+                            did,\n+                            is_generic,\n                         }\n                     }\n                     _ => Infer // shouldn't happen\n@@ -1915,9 +1915,9 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                                          None, false, vec![], substs);\n                 ResolvedPath {\n-                    path: path,\n+                    path,\n                     typarams: None,\n-                    did: did,\n+                    did,\n                     is_generic: false,\n                 }\n             }\n@@ -1935,9 +1935,9 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n                         let bound = TraitBound(PolyTrait {\n                             trait_: ResolvedPath {\n-                                path: path,\n+                                path,\n                                 typarams: None,\n-                                did: did,\n+                                did,\n                                 is_generic: false,\n                             },\n                             lifetimes: vec![]\n@@ -1956,9 +1956,9 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n                         false, bindings, principal.0.substs);\n                     ResolvedPath {\n-                        path: path,\n+                        path,\n                         typarams: Some(typarams),\n-                        did: did,\n+                        did,\n                         is_generic: false,\n                     }\n                 } else {\n@@ -2274,7 +2274,7 @@ impl Path {\n             global: false,\n             def: Def::Err,\n             segments: vec![PathSegment {\n-                name: name,\n+                name,\n                 params: PathParameters::AngleBracketed {\n                     lifetimes: Vec::new(),\n                     types: Vec::new(),\n@@ -2549,9 +2549,9 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                 unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n                 provided_trait_methods: provided,\n-                trait_: trait_,\n+                trait_,\n                 for_: self.for_.clean(cx),\n-                items: items,\n+                items,\n                 polarity: Some(self.polarity.clean(cx)),\n             }),\n         });\n@@ -2745,7 +2745,7 @@ impl Clean<Item> for hir::ForeignItem {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n-            inner: inner,\n+            inner,\n         }\n     }\n }\n@@ -2871,7 +2871,7 @@ fn resolve_use_source(cx: &DocContext, path: Path) -> ImportSource {\n         } else {\n             Some(register_def(cx, path.def))\n         },\n-        path: path,\n+        path,\n     }\n }\n "}, {"sha": "58de0e1caecdbe0d563ade8bed6a4226f214e3e5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -121,18 +121,18 @@ pub fn run_core(search_paths: SearchPaths,\n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n     let sessopts = config::Options {\n-        maybe_sysroot: maybe_sysroot,\n-        search_paths: search_paths,\n+        maybe_sysroot,\n+        search_paths,\n         crate_types: vec![config::CrateTypeRlib],\n         lint_opts: if !allow_warnings { vec![(warning_lint, lint::Allow)] } else { vec![] },\n         lint_cap: Some(lint::Allow),\n-        externs: externs,\n+        externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n-            force_unstable_if_unmarked: force_unstable_if_unmarked,\n+            force_unstable_if_unmarked,\n             ..config::basic_debugging_options()\n         },\n         ..config::basic_options().clone()\n@@ -203,7 +203,7 @@ pub fn run_core(search_paths: SearchPaths,\n         };\n \n         let ctxt = DocContext {\n-            tcx: tcx,\n+            tcx,\n             populated_all_crate_impls: Cell::new(false),\n             access_levels: RefCell::new(access_levels),\n             external_traits: Default::default(),"}, {"sha": "54c57c9ac6eebf727d2b0885a83642f56471aa31", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -97,9 +97,8 @@ pub trait DocFolder : Sized {\n             _ => self.fold_inner_recur(inner),\n         };\n \n-        Some(Item { attrs: attrs, name: name, source: source, inner: inner,\n-                    visibility: visibility, stability: stability, deprecation: deprecation,\n-                    def_id: def_id })\n+        Some(Item { attrs, name, source, inner, visibility,\n+                    stability, deprecation, def_id })\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {"}, {"sha": "dfbf435d74a51e2ab19c86ab2597cc08f6871e36", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -164,8 +164,8 @@ impl<U: Write> Writer for U {\n impl<'a> Classifier<'a> {\n     pub fn new(lexer: lexer::StringReader<'a>, codemap: &'a CodeMap) -> Classifier<'a> {\n         Classifier {\n-            lexer: lexer,\n-            codemap: codemap,\n+            lexer,\n+            codemap,\n             in_attribute: false,\n             in_macro: false,\n             in_macro_nonterminal: false,"}, {"sha": "2d14c02bf8a592ad95f3ae3eff1140fa3e8a2cd3", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'b, I: Iterator<Item = Event<'a>>> HeadingLinks<'a, 'b, I> {\n     fn new(iter: I, toc: Option<&'b mut TocBuilder>) -> Self {\n         HeadingLinks {\n             inner: iter,\n-            toc: toc,\n+            toc,\n             buf: VecDeque::new(),\n         }\n     }\n@@ -1121,15 +1121,15 @@ mod tests {\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n             compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n             assert_eq!(LangString::parse(s), LangString {\n-                should_panic: should_panic,\n-                no_run: no_run,\n-                ignore: ignore,\n-                rust: rust,\n-                test_harness: test_harness,\n-                compile_fail: compile_fail,\n-                error_codes: error_codes,\n+                should_panic,\n+                no_run,\n+                ignore,\n+                rust,\n+                test_harness,\n+                compile_fail,\n+                error_codes,\n                 original: s.to_owned(),\n-                allow_fail: allow_fail,\n+                allow_fail,\n             })\n         }\n "}, {"sha": "6593d6dfd6cff7ff105ff7cf425b5bd0b9bc725a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -443,8 +443,8 @@ pub fn run(mut krate: clean::Crate,\n         None => PathBuf::new(),\n     };\n     let mut scx = SharedContext {\n-        src_root: src_root,\n-        passes: passes,\n+        src_root,\n+        passes,\n         include_sources: true,\n         local_sources: FxHashMap(),\n         issue_tracker_base_url: None,\n@@ -496,10 +496,10 @@ pub fn run(mut krate: clean::Crate,\n     krate = render_sources(&dst, &mut scx, krate)?;\n     let cx = Context {\n         current: Vec::new(),\n-        dst: dst,\n+        dst,\n         render_redirect_pages: false,\n         shared: Arc::new(scx),\n-        render_type: render_type,\n+        render_type,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -518,7 +518,7 @@ pub fn run(mut krate: clean::Crate,\n \n     let mut cache = Cache {\n         impls: FxHashMap(),\n-        external_paths: external_paths,\n+        external_paths,\n         paths: FxHashMap(),\n         implementors: FxHashMap(),\n         stack: Vec::new(),\n@@ -531,9 +531,9 @@ pub fn run(mut krate: clean::Crate,\n         access_levels: krate.access_levels.clone(),\n         orphan_impl_items: Vec::new(),\n         traits: mem::replace(&mut krate.external_traits, FxHashMap()),\n-        deref_trait_did: deref_trait_did,\n-        deref_mut_trait_did: deref_mut_trait_did,\n-        owned_box_did: owned_box_did,\n+        deref_trait_did,\n+        deref_mut_trait_did,\n+        owned_box_did,\n         typarams: external_typarams,\n     };\n \n@@ -823,8 +823,8 @@ fn render_sources(dst: &Path, scx: &mut SharedContext,\n     let dst = dst.join(\"src\").join(&krate.name);\n     try_err!(fs::create_dir_all(&dst), &dst);\n     let mut folder = SourceCollector {\n-        dst: dst,\n-        scx: scx,\n+        dst,\n+        scx,\n     };\n     Ok(folder.fold_crate(krate))\n }\n@@ -1068,7 +1068,7 @@ impl DocFolder for Cache {\n                             name: s.to_string(),\n                             path: path.join(\"::\").to_string(),\n                             desc: plain_summary_line(item.doc_value()),\n-                            parent: parent,\n+                            parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),\n                         });\n@@ -2038,7 +2038,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n            decl = Method {\n                decl: &f.decl,\n-               name_len: name_len,\n+               name_len,\n                indent: 0,\n            })?;\n     document(w, cx, it)\n@@ -2406,12 +2406,12 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                decl = Method {\n                    decl: d,\n                    name_len: head_len,\n-                   indent: indent,\n+                   indent,\n                },\n                where_clause = WhereClause {\n                    gens: g,\n-                   indent: indent,\n-                   end_newline: end_newline,\n+                   indent,\n+                   end_newline,\n                })\n     }\n     match item.inner {"}, {"sha": "fc5977f533cbbc263ddf854cca108b05593209ac", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -596,9 +596,9 @@\n             }\n \n             return {\n-                raw: raw,\n-                query: query,\n-                type: type,\n+                raw,\n+                query,\n+                type,\n                 id: query + type\n             };\n         }\n@@ -837,7 +837,7 @@\n \n                 searchWords.push(crate);\n                 searchIndex.push({\n-                    crate: crate,\n+                    crate,\n                     ty: 1, // == ExternCrate\n                     name: crate,\n                     path: \"\","}, {"sha": "67f371313d0d63214ca9989c2dde596646f3a1d7", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -161,10 +161,10 @@ impl TocBuilder {\n         }\n \n         self.chain.push(TocEntry {\n-            level: level,\n-            name: name,\n-            sec_number: sec_number,\n-            id: id,\n+            level,\n+            name,\n+            sec_number,\n+            id,\n             children: Toc { entries: Vec::new() }\n         });\n "}, {"sha": "4fc5159588d86f7512c4fb75fd77b403c0afbace", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -35,7 +35,7 @@ impl PluginManager {\n         PluginManager {\n             dylibs: Vec::new(),\n             callbacks: Vec::new(),\n-            prefix: prefix,\n+            prefix,\n         }\n     }\n "}, {"sha": "47e8d63f80aa0f08be6734929157aa993baa340e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -194,7 +194,7 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n         search_paths: libs,\n         crate_types: vec![config::CrateTypeExecutable],\n         output_types: outputs,\n-        externs: externs,\n+        externs,\n         cg: config::CodegenOptions {\n             prefer_dynamic: true,\n             .. config::basic_codegen_options()\n@@ -416,19 +416,19 @@ impl Collector {\n             tests: Vec::new(),\n             old_tests: HashMap::new(),\n             names: Vec::new(),\n-            cfgs: cfgs,\n-            libs: libs,\n-            externs: externs,\n+            cfgs,\n+            libs,\n+            externs,\n             cnt: 0,\n-            use_headers: use_headers,\n+            use_headers,\n             current_header: None,\n-            cratename: cratename,\n-            opts: opts,\n-            maybe_sysroot: maybe_sysroot,\n+            cratename,\n+            opts,\n+            maybe_sysroot,\n             position: DUMMY_SP,\n-            codemap: codemap,\n-            filename: filename,\n-            render_type: render_type,\n+            codemap,\n+            filename,\n+            render_type,\n         }\n     }\n \n@@ -499,7 +499,7 @@ impl Collector {\n                 ignore: should_ignore,\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n-                allow_fail: allow_fail,\n+                allow_fail,\n             },\n             testfn: testing::DynTestFn(box move |()| {\n                 let panic = io::set_panic(None);"}, {"sha": "e3426fba1bca18426e8aa8fd1e9bbb34216bedee", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         RustdocVisitor {\n             module: Module::new(None),\n             attrs: hir::HirVec::new(),\n-            cx: cx,\n+            cx,\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n@@ -99,8 +99,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let struct_type = struct_type_from_def(&*sd);\n         Struct {\n             id: item.id,\n-            struct_type: struct_type,\n-            name: name,\n+            struct_type,\n+            name,\n             vis: item.vis.clone(),\n             stab: self.stability(item.id),\n             depr: self.deprecation(item.id),\n@@ -118,8 +118,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let struct_type = struct_type_from_def(&*sd);\n         Union {\n             id: item.id,\n-            struct_type: struct_type,\n-            name: name,\n+            struct_type,\n+            name,\n             vis: item.vis.clone(),\n             stab: self.stability(item.id),\n             depr: self.deprecation(item.id),\n@@ -135,7 +135,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                           params: &hir::Generics) -> Enum {\n         debug!(\"Visiting enum\");\n         Enum {\n-            name: name,\n+            name,\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n@@ -169,13 +169,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             depr: self.deprecation(item.id),\n             attrs: item.attrs.clone(),\n             decl: fd.clone(),\n-            name: name,\n+            name,\n             whence: item.span,\n             generics: gen.clone(),\n             unsafety: *unsafety,\n-            constness: constness,\n+            constness,\n             abi: *abi,\n-            body: body,\n+            body,\n         }\n     }\n \n@@ -221,11 +221,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     };\n \n                     om.macros.push(Macro {\n-                        def_id: def_id,\n+                        def_id,\n                         attrs: def.attrs.clone().into(),\n                         name: def.ident.name,\n                         whence: def.span,\n-                        matchers: matchers,\n+                        matchers,\n                         stab: self.stability(def.id),\n                         depr: self.deprecation(def.id),\n                         imported_from: Some(imported_from),\n@@ -374,7 +374,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.extern_crates.push(ExternCrate {\n                     cnum: cstore.extern_mod_stmt_cnum(item.id)\n                                 .unwrap_or(LOCAL_CRATE),\n-                    name: name,\n+                    name,\n                     path: p.map(|x|x.to_string()),\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n@@ -408,7 +408,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n \n                 om.imports.push(Import {\n-                    name: name,\n+                    name,\n                     id: item.id,\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n@@ -438,7 +438,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let t = Typedef {\n                     ty: ty.clone(),\n                     gen: gen.clone(),\n-                    name: name,\n+                    name,\n                     id: item.id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     mutability: mut_.clone(),\n                     expr: exp.clone(),\n                     id: item.id,\n-                    name: name,\n+                    name,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     type_: ty.clone(),\n                     expr: exp.clone(),\n                     id: item.id,\n-                    name: name,\n+                    name,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -482,9 +482,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                                     .map(|ti| self.cx.tcx.hir.trait_item(ti.id).clone())\n                                     .collect();\n                 let t = Trait {\n-                    unsafety: unsafety,\n-                    name: name,\n-                    items: items,\n+                    unsafety,\n+                    name,\n+                    items,\n                     generics: gen.clone(),\n                     bounds: b.iter().cloned().collect(),\n                     id: item.id,\n@@ -511,13 +511,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                                         .map(|ii| self.cx.tcx.hir.impl_item(ii.id).clone())\n                                         .collect();\n                     let i = Impl {\n-                        unsafety: unsafety,\n-                        polarity: polarity,\n-                        defaultness: defaultness,\n+                        unsafety,\n+                        polarity,\n+                        defaultness,\n                         generics: gen.clone(),\n                         trait_: tr.clone(),\n                         for_: ty.clone(),\n-                        items: items,\n+                        items,\n                         attrs: item.attrs.clone(),\n                         id: item.id,\n                         whence: item.span,\n@@ -532,7 +532,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 // See comment above about ItemImpl.\n                 if !self.inlining {\n                     let i = DefaultImpl {\n-                        unsafety: unsafety,\n+                        unsafety,\n                         trait_: trait_ref.clone(),\n                         id: item.id,\n                         attrs: item.attrs.clone(),\n@@ -555,7 +555,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             attrs: def.attrs.clone(),\n             name: def.name,\n             whence: def.span,\n-            matchers: matchers,\n+            matchers,\n             stab: self.stability(def.id),\n             depr: self.deprecation(def.id),\n             imported_from: None,"}, {"sha": "7b5b27c5565cb3e456416471e12c41a26e617c66", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -37,7 +37,7 @@ pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b> {\n impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n     pub fn new(cx: &'a ::core::DocContext<'b, 'tcx>) -> LibEmbargoVisitor<'a, 'b, 'tcx> {\n         LibEmbargoVisitor {\n-            cx: cx,\n+            cx,\n             cstore: &*cx.sess().cstore,\n             access_levels: cx.access_levels.borrow_mut(),\n             prev_level: Some(AccessLevel::Public),"}, {"sha": "5e1c09641e183f14ceafd1d681155e4fc52c886f", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -717,7 +717,7 @@ impl<'a> PrettyEncoder<'a> {\n     /// Creates a new encoder whose output will be written to the specified writer\n     pub fn new(writer: &'a mut fmt::Write) -> PrettyEncoder<'a> {\n         PrettyEncoder {\n-            writer: writer,\n+            writer,\n             curr_indent: 0,\n             indent: 2,\n             is_emitting_map_key: false,\n@@ -1451,7 +1451,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n     /// Creates the JSON parser.\n     pub fn new(rdr: T) -> Parser<T> {\n         let mut p = Parser {\n-            rdr: rdr,\n+            rdr,\n             ch: Some('\\x00'),\n             line: 1,\n             col: 0,"}, {"sha": "f3475bd18ce693e88f1fccd8dfa063692a5670a7", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -153,8 +153,8 @@ pub struct Decoder<'a> {\n impl<'a> Decoder<'a> {\n     pub fn new(data: &'a [u8], position: usize) -> Decoder<'a> {\n         Decoder {\n-            data: data,\n-            position: position,\n+            data,\n+            position,\n         }\n     }\n "}, {"sha": "16b0c709986162dba88d59583067266a5042e156", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -419,7 +419,7 @@ fn search_hashed<K, V, M, F>(table: M, hash: SafeHash, mut is_match: F) -> Inter\n             Empty(bucket) => {\n                 // Found a hole!\n                 return InternalEntry::Vacant {\n-                    hash: hash,\n+                    hash,\n                     elem: NoElem(bucket, displacement),\n                 };\n             }\n@@ -433,7 +433,7 @@ fn search_hashed<K, V, M, F>(table: M, hash: SafeHash, mut is_match: F) -> Inter\n             // We can finish the search early if we hit any bucket\n             // with a lower distance to initial bucket than we've probed.\n             return InternalEntry::Vacant {\n-                hash: hash,\n+                hash,\n                 elem: NeqElem(full, probe_displacement),\n             };\n         }\n@@ -646,7 +646,7 @@ impl<K, V, S> HashMap<K, V, S>\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n         HashMap {\n-            hash_builder: hash_builder,\n+            hash_builder,\n             resize_policy: DefaultResizePolicy::new(),\n             table: RawTable::new(0),\n         }\n@@ -679,8 +679,8 @@ impl<K, V, S> HashMap<K, V, S>\n         let resize_policy = DefaultResizePolicy::new();\n         let raw_cap = resize_policy.raw_capacity(capacity);\n         HashMap {\n-            hash_builder: hash_builder,\n-            resize_policy: resize_policy,\n+            hash_builder,\n+            resize_policy,\n             table: RawTable::new(raw_cap),\n         }\n     }\n@@ -1496,14 +1496,14 @@ impl<'a, K, V> InternalEntry<K, V, &'a mut RawTable<K, V>> {\n             InternalEntry::Occupied { elem } => {\n                 Some(Occupied(OccupiedEntry {\n                     key: Some(key),\n-                    elem: elem,\n+                    elem,\n                 }))\n             }\n             InternalEntry::Vacant { hash, elem } => {\n                 Some(Vacant(VacantEntry {\n-                    hash: hash,\n-                    key: key,\n-                    elem: elem,\n+                    hash,\n+                    key,\n+                    elem,\n                 }))\n             }\n             InternalEntry::TableIsEmpty => None,"}, {"sha": "9771363d545cd41083caf0b3785a1dacf53db91f", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -337,7 +337,7 @@ impl<T, S> HashSet<T, S>\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference {\n             iter: self.iter(),\n-            other: other,\n+            other,\n         }\n     }\n \n@@ -391,7 +391,7 @@ impl<T, S> HashSet<T, S>\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         Intersection {\n             iter: self.iter(),\n-            other: other,\n+            other,\n         }\n     }\n "}, {"sha": "f1e8ff66af178c405ba326763f9d542dd9ed16b1", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -353,14 +353,14 @@ impl<K, V, M: Deref<Target = RawTable<K, V>>> Bucket<K, V, M> {\n         let ib_index = ib_index & table.capacity_mask;\n         Bucket {\n             raw: table.raw_bucket_at(ib_index),\n-            table: table,\n+            table,\n         }\n     }\n \n     pub fn first(table: M) -> Bucket<K, V, M> {\n         Bucket {\n             raw: table.raw_bucket_at(0),\n-            table: table,\n+            table,\n         }\n     }\n \n@@ -455,7 +455,7 @@ impl<K, V, M: Deref<Target = RawTable<K, V>>> EmptyBucket<K, V, M> {\n         match self.next().peek() {\n             Full(bucket) => {\n                 Ok(GapThenFull {\n-                    gap: gap,\n+                    gap,\n                     full: bucket,\n                 })\n             }\n@@ -860,8 +860,8 @@ impl<K, V> RawTable<K, V> {\n         // Replace the marker regardless of lifetime bounds on parameters.\n         IntoIter {\n             iter: RawBuckets {\n-                raw: raw,\n-                elems_left: elems_left,\n+                raw,\n+                elems_left,\n                 marker: marker::PhantomData,\n             },\n             table: self,\n@@ -873,8 +873,8 @@ impl<K, V> RawTable<K, V> {\n         // Replace the marker regardless of lifetime bounds on parameters.\n         Drain {\n             iter: RawBuckets {\n-                raw: raw,\n-                elems_left: elems_left,\n+                raw,\n+                elems_left,\n                 marker: marker::PhantomData,\n             },\n             table: Shared::from(self),"}, {"sha": "4ebd3554fd1428fc60f2854d7e1bc709fac70382", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -97,7 +97,7 @@ impl<R: Read> BufReader<R> {\n             buffer.set_len(cap);\n             inner.initializer().initialize(&mut buffer);\n             BufReader {\n-                inner: inner,\n+                inner,\n                 buf: buffer.into_boxed_slice(),\n                 pos: 0,\n                 cap: 0,"}, {"sha": "bb9383d3d6e02cb668740581d6c66393a8f6a6d6", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -252,8 +252,8 @@ impl Error {\n     fn _new(kind: ErrorKind, error: Box<error::Error+Send+Sync>) -> Error {\n         Error {\n             repr: Repr::Custom(Box::new(Custom {\n-                kind: kind,\n-                error: error,\n+                kind,\n+                error,\n             }))\n         }\n     }"}, {"sha": "9cef4e3cdf1ca971ae80f4cb83ef6b00533fe3f3", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -27,7 +27,7 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n         Lazy {\n             lock: Mutex::new(),\n             ptr: Cell::new(ptr::null_mut()),\n-            init: init\n+            init,\n         }\n     }\n "}, {"sha": "739dc4163feb381b175fe1bc6641f3afe18275bd", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -453,7 +453,7 @@ pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n     let mut any_data = 0;\n     let mut any_vtable = 0;\n     let mut data = Data {\n-        f: f,\n+        f,\n     };\n \n     let r = __rust_maybe_catch_panic(do_call::<F, R>,"}, {"sha": "4496de09b259097a9b15b72cdb97e20dbeed9cee", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -2049,7 +2049,7 @@ impl Path {\n         let prefix = parse_prefix(self.as_os_str());\n         Components {\n             path: self.as_u8_slice(),\n-            prefix: prefix,\n+            prefix,\n             has_physical_root: has_physical_root(self.as_u8_slice(), prefix),\n             front: State::Prefix,\n             back: State::Body,"}, {"sha": "a3a7e91dd807d61c9fe43528e9a951981232d877", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -126,7 +126,7 @@ impl AsInner<imp::Process> for Child {\n impl FromInner<(imp::Process, imp::StdioPipes)> for Child {\n     fn from_inner((handle, io): (imp::Process, imp::StdioPipes)) -> Child {\n         Child {\n-            handle: handle,\n+            handle,\n             stdin: io.stdin.map(ChildStdin::from_inner),\n             stdout: io.stdout.map(ChildStdout::from_inner),\n             stderr: io.stderr.map(ChildStderr::from_inner),\n@@ -1035,9 +1035,9 @@ impl Child {\n \n         let status = self.wait()?;\n         Ok(Output {\n-            status: status,\n-            stdout: stdout,\n-            stderr: stderr,\n+            status,\n+            stdout,\n+            stderr,\n         })\n     }\n }"}, {"sha": "c08bd6d133d06726fb2f230761b98a80d0090ceb", "filename": "src/libstd/sync/mpsc/blocking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -46,7 +46,7 @@ pub fn tokens() -> (WaitToken, SignalToken) {\n         inner: inner.clone(),\n     };\n     let signal_token = SignalToken {\n-        inner: inner\n+        inner,\n     };\n     (wait_token, signal_token)\n }"}, {"sha": "e49f4cff024034488d44f156be95143366cf5ea3", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -148,12 +148,12 @@ impl Select {\n         let id = self.next_id.get();\n         self.next_id.set(id + 1);\n         Handle {\n-            id: id,\n+            id,\n             selector: self.inner.get(),\n             next: ptr::null_mut(),\n             prev: ptr::null_mut(),\n             added: false,\n-            rx: rx,\n+            rx,\n             packet: rx,\n         }\n     }"}, {"sha": "90f12c826d68e52417fcf1423e15a9b10b22f7b0", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -177,7 +177,7 @@ impl<T> Packet<T> {\n             lock: Mutex::new(State {\n                 disconnected: false,\n                 blocker: NoneBlocked,\n-                cap: cap,\n+                cap,\n                 canceled: None,\n                 queue: Queue {\n                     head: ptr::null_mut(),"}, {"sha": "1a26257e4a7e2c6bcf774aa39eaf232c8ad76dbf", "filename": "src/libstd/sys/redox/net/dns/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fdns%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -206,10 +206,10 @@ impl Dns {\n         }\n \n         Ok(Dns {\n-            transaction_id: transaction_id,\n-            flags: flags,\n-            queries: queries,\n-            answers: answers,\n+            transaction_id,\n+            flags,\n+            queries,\n+            answers,\n         })\n     }\n }"}, {"sha": "e3ffbe88acd45c2492d03e9c5eefb339e66efda4", "filename": "src/libstd/sys/unix/backtrace/tracing/gcc_s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -43,7 +43,7 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n {\n     let mut cx = Context {\n         idx: 0,\n-        frames: frames,\n+        frames,\n     };\n     let result_unwind = unsafe {\n         uw::_Unwind_Backtrace(trace_fn,"}, {"sha": "f454f1fc47902a543673b7df91e6fe31ebe21507", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -141,8 +141,8 @@ impl SocketAddr {\n         }\n \n         Ok(SocketAddr {\n-            addr: addr,\n-            len: len,\n+            addr,\n+            len,\n         })\n     }\n "}, {"sha": "bc20a74f11464b7149bc515ed967a1d046fd3169", "filename": "src/libstd/sys/unix/process/magenta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmagenta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmagenta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmagenta.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -61,7 +61,7 @@ pub struct Handle {\n impl Handle {\n     pub fn new(raw: mx_handle_t) -> Handle {\n         Handle {\n-            raw: raw,\n+            raw,\n         }\n     }\n "}, {"sha": "689ccd78524a04f7ce12563170742198e0eb7c80", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -94,14 +94,14 @@ impl Command {\n         let program = os2c(program, &mut saw_nul);\n         Command {\n             argv: vec![program.as_ptr(), ptr::null()],\n-            program: program,\n+            program,\n             args: Vec::new(),\n             env: None,\n             envp: None,\n             cwd: None,\n             uid: None,\n             gid: None,\n-            saw_nul: saw_nul,\n+            saw_nul,\n             closures: Vec::new(),\n             stdin: None,\n             stdout: None,"}, {"sha": "18944be58ee7e6d3fc0618fd6bc003a140a70d2b", "filename": "src/libstd/sys/unix/weak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -49,7 +49,7 @@ pub struct Weak<F> {\n impl<F> Weak<F> {\n     pub const fn new(name: &'static str) -> Weak<F> {\n         Weak {\n-            name: name,\n+            name,\n             addr: AtomicUsize::new(1),\n             _marker: marker::PhantomData,\n         }"}, {"sha": "26b4cb90e0a89c8f16536667eeb6b462d2894023", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -68,8 +68,8 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n \n     let backtrace_context = BacktraceContext {\n         handle: process,\n-        SymCleanup: SymCleanup,\n-        dbghelp: dbghelp,\n+        SymCleanup,\n+        dbghelp,\n     };\n \n     // Initialize this process's symbols"}, {"sha": "452d720ce59333055bbeb374df16ea38e3d6440f", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -239,10 +239,10 @@ impl<'a> AsyncPipe<'a> {\n         };\n         overlapped.hEvent = event.raw();\n         Ok(AsyncPipe {\n-            pipe: pipe,\n-            overlapped: overlapped,\n-            event: event,\n-            dst: dst,\n+            pipe,\n+            overlapped,\n+            event,\n+            dst,\n             state: State::NotReading,\n         })\n     }"}, {"sha": "7ae9ed917bdba7c1d592af77246a2e576ebb6154", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -122,8 +122,8 @@ struct Node {\n \n unsafe fn register_dtor(key: Key, dtor: Dtor) {\n     let mut node = Box::new(Node {\n-        key: key,\n-        dtor: dtor,\n+        key,\n+        dtor,\n         next: ptr::null_mut(),\n     });\n "}, {"sha": "7970042b1d67ded6faaccfdebb8e4bc762bfba0e", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -45,7 +45,7 @@ pub fn stack_guard() -> Option<usize> {\n pub fn set(stack_guard: Option<usize>, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n-        stack_guard: stack_guard,\n-        thread: thread,\n+        stack_guard,\n+        thread,\n     }));\n }"}, {"sha": "87ffd304e1a33b0bf2a44ccd602cdfc4e1ad8d1b", "filename": "src/libstd/sys_common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -128,7 +128,7 @@ impl StaticKey {\n     pub const fn new(dtor: Option<unsafe extern fn(*mut u8)>) -> StaticKey {\n         StaticKey {\n             key: atomic::AtomicUsize::new(0),\n-            dtor: dtor\n+            dtor,\n         }\n     }\n "}, {"sha": "7a9b642350fa62c10ae7f9174125baf53a07e691", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -258,8 +258,8 @@ impl<T: 'static> LocalKey<T> {\n     pub const unsafe fn new(inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n                             init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n-            inner: inner,\n-            init: init,\n+            inner,\n+            init,\n         }\n     }\n "}, {"sha": "d715a0d740b42a15ff4b75e19505aae384563e39", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -197,8 +197,8 @@ impl Duration {\n             }\n             debug_assert!(nanos < NANOS_PER_SEC);\n             Some(Duration {\n-                secs: secs,\n-                nanos: nanos,\n+                secs,\n+                nanos,\n             })\n         } else {\n             None\n@@ -268,8 +268,8 @@ impl Duration {\n             .and_then(|s| s.checked_add(extra_secs)) {\n             debug_assert!(nanos < NANOS_PER_SEC);\n             Some(Duration {\n-                secs: secs,\n-                nanos: nanos,\n+                secs,\n+                nanos,\n             })\n         } else {\n             None"}, {"sha": "1274b0625875bbf6199be96e1c1be4c71e90fba7", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -87,7 +87,7 @@ impl<I> Utf16Encoder<I> {\n         where I: Iterator<Item = char>\n     {\n         Utf16Encoder {\n-            chars: chars,\n+            chars,\n             extra: 0,\n         }\n     }"}, {"sha": "4e6641f4c50ed88c76d6bf161e616f81b161f54f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -135,7 +135,7 @@ impl PathSegment {\n     pub fn crate_root(span: Span) -> Self {\n         PathSegment {\n             identifier: Ident { ctxt: span.ctxt, ..keywords::CrateRoot.ident() },\n-            span: span,\n+            span,\n             parameters: None,\n         }\n     }\n@@ -1492,15 +1492,15 @@ impl Arg {\n         let infer_ty = P(Ty {\n             id: DUMMY_NODE_ID,\n             node: TyKind::ImplicitSelf,\n-            span: span,\n+            span,\n         });\n         let arg = |mutbl, ty| Arg {\n             pat: P(Pat {\n                 id: DUMMY_NODE_ID,\n                 node: PatKind::Ident(BindingMode::ByValue(mutbl), eself_ident, None),\n-                span: span,\n+                span,\n             }),\n-            ty: ty,\n+            ty,\n             id: DUMMY_NODE_ID,\n         };\n         match eself.node {\n@@ -1509,7 +1509,7 @@ impl Arg {\n             SelfKind::Region(lt, mutbl) => arg(Mutability::Immutable, P(Ty {\n                 id: DUMMY_NODE_ID,\n                 node: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl: mutbl }),\n-                span: span,\n+                span,\n             })),\n         }\n     }\n@@ -1738,7 +1738,7 @@ impl PolyTraitRef {\n         PolyTraitRef {\n             bound_lifetimes: lifetimes,\n             trait_ref: TraitRef { path: path, ref_id: DUMMY_NODE_ID },\n-            span: span,\n+            span,\n         }\n     }\n }"}, {"sha": "a6c4c404d62b5af5e7460560eec9746ed68c9a53", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -438,7 +438,7 @@ pub fn mk_attr_inner(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n /// Returns an inner attribute with the given value and span.\n pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: MetaItem) -> Attribute {\n     Attribute {\n-        id: id,\n+        id,\n         style: ast::AttrStyle::Inner,\n         path: ast::Path::from_ident(item.span, ast::Ident::with_empty_ctxt(item.name)),\n         tokens: item.node.tokens(item.span),\n@@ -456,7 +456,7 @@ pub fn mk_attr_outer(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n /// Returns an outer attribute with the given value and span.\n pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: MetaItem) -> Attribute {\n     Attribute {\n-        id: id,\n+        id,\n         style: ast::AttrStyle::Outer,\n         path: ast::Path::from_ident(item.span, ast::Ident::with_empty_ctxt(item.name)),\n         tokens: item.node.tokens(item.span),\n@@ -469,12 +469,12 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: Symbol, span: Span) -> Attribute {\n     let style = doc_comment_style(&text.as_str());\n     let lit = respan(span, LitKind::Str(text, ast::StrStyle::Cooked));\n     Attribute {\n-        id: id,\n-        style: style,\n+        id,\n+        style,\n         path: ast::Path::from_ident(span, ast::Ident::from_str(\"doc\")),\n         tokens: MetaItemKind::NameValue(lit).tokens(span),\n         is_sugared_doc: true,\n-        span: span,\n+        span,\n     }\n }\n \n@@ -718,8 +718,8 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                     match (since, reason) {\n                         (Some(since), Some(reason)) => {\n                             rustc_depr = Some(RustcDeprecation {\n-                                since: since,\n-                                reason: reason,\n+                                since,\n+                                reason,\n                             })\n                         }\n                         (None, _) => {\n@@ -763,7 +763,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                         (Some(feature), reason, Some(issue)) => {\n                             stab = Some(Stability {\n                                 level: Unstable {\n-                                    reason: reason,\n+                                    reason,\n                                     issue: {\n                                         if let Ok(issue) = issue.as_str().parse() {\n                                             issue\n@@ -774,7 +774,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                         }\n                                     }\n                                 },\n-                                feature: feature,\n+                                feature,\n                                 rustc_depr: None,\n                             })\n                         }\n@@ -817,9 +817,9 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                         (Some(feature), Some(since)) => {\n                             stab = Some(Stability {\n                                 level: Stable {\n-                                    since: since,\n+                                    since,\n                                 },\n-                                feature: feature,\n+                                feature,\n                                 rustc_depr: None,\n                             })\n                         }"}, {"sha": "30ae7df93532e02bca75d4eac21d91cea980f3a1", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -115,7 +115,7 @@ impl CodeMap {\n         CodeMap {\n             files: RefCell::new(Vec::new()),\n             file_loader: Box::new(RealFileLoader),\n-            path_mapping: path_mapping,\n+            path_mapping,\n         }\n     }\n \n@@ -124,8 +124,8 @@ impl CodeMap {\n                             -> CodeMap {\n         CodeMap {\n             files: RefCell::new(Vec::new()),\n-            file_loader: file_loader,\n-            path_mapping: path_mapping,\n+            file_loader,\n+            path_mapping,\n         }\n     }\n \n@@ -215,13 +215,13 @@ impl CodeMap {\n \n         let filemap = Rc::new(FileMap {\n             name: filename,\n-            name_was_remapped: name_was_remapped,\n-            crate_of_origin: crate_of_origin,\n+            name_was_remapped,\n+            crate_of_origin,\n             src: None,\n-            src_hash: src_hash,\n+            src_hash,\n             external_src: RefCell::new(ExternalSource::AbsentOk),\n-            start_pos: start_pos,\n-            end_pos: end_pos,\n+            start_pos,\n+            end_pos,\n             lines: RefCell::new(file_local_lines),\n             multibyte_chars: RefCell::new(file_local_multibyte_chars),\n         });\n@@ -255,7 +255,7 @@ impl CodeMap {\n                 assert!(chpos >= linechpos);\n                 Loc {\n                     file: f,\n-                    line: line,\n+                    line,\n                     col: chpos - linechpos,\n                 }\n             }\n@@ -385,15 +385,15 @@ impl CodeMap {\n             let line_len = lo.file.get_line(line_index)\n                                   .map(|s| s.chars().count())\n                                   .unwrap_or(0);\n-            lines.push(LineInfo { line_index: line_index,\n-                                  start_col: start_col,\n+            lines.push(LineInfo { line_index,\n+                                  start_col,\n                                   end_col: CharPos::from_usize(line_len) });\n             start_col = CharPos::from_usize(0);\n         }\n \n         // For the last line, it extends from `start_col` to `hi.col`:\n         lines.push(LineInfo { line_index: hi.line - 1,\n-                              start_col: start_col,\n+                              start_col,\n                               end_col: hi.col });\n \n         Ok(FileLines {file: lo.file, lines: lines})\n@@ -426,7 +426,7 @@ impl CodeMap {\n                 return Err(SpanSnippetError::MalformedForCodemap(\n                     MalformedCodemapPositions {\n                         name: local_begin.fm.name.clone(),\n-                        source_len: source_len,\n+                        source_len,\n                         begin_pos: local_begin.pos,\n                         end_pos: local_end.pos,\n                     }));\n@@ -581,7 +581,7 @@ impl FilePathMapping {\n \n     pub fn new(mapping: Vec<(String, String)>) -> FilePathMapping {\n         FilePathMapping {\n-            mapping: mapping\n+            mapping,\n         }\n     }\n "}, {"sha": "14f1f8fbf8cb0f52acc78e2817f9cfdc076d2724", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -32,8 +32,8 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n     let features;\n     {\n         let mut strip_unconfigured = StripUnconfigured {\n-            should_test: should_test,\n-            sess: sess,\n+            should_test,\n+            sess,\n             features: None,\n         };\n \n@@ -105,10 +105,10 @@ impl<'a> StripUnconfigured<'a> {\n             self.process_cfg_attr(ast::Attribute {\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n-                path: path,\n-                tokens: tokens,\n+                path,\n+                tokens,\n                 is_sugared_doc: false,\n-                span: span,\n+                span,\n             })\n         } else {\n             None"}, {"sha": "5224f52c49629e765cd5956c55412f4a9e03d3f9", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -133,7 +133,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     // Add the error to the map.\n     with_registered_diagnostics(|diagnostics| {\n         let info = ErrorInfo {\n-            description: description,\n+            description,\n             use_site: None\n         };\n         if diagnostics.insert(code.name, info).is_some() {\n@@ -235,7 +235,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                 expr,\n             ),\n             vis: ast::Visibility::Public,\n-            span: span,\n+            span,\n             tokens: None,\n         })\n     ]))"}, {"sha": "e57d9c6fe896ad8fc5d4b00bd71f782b893435d7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -677,10 +677,10 @@ impl<'a> ExtCtxt<'a> {\n                resolver: &'a mut Resolver)\n                -> ExtCtxt<'a> {\n         ExtCtxt {\n-            parse_sess: parse_sess,\n-            ecfg: ecfg,\n+            parse_sess,\n+            ecfg,\n             crate_root: None,\n-            resolver: resolver,\n+            resolver,\n             resolve_err_count: 0,\n             current_expansion: ExpansionData {\n                 mark: Mark::root(),"}, {"sha": "cbdd00135930ef4f26d998bf49f22325d5d2e00d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -366,7 +366,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         path.segments.push(ast::PathSegment {\n             identifier: ident.node,\n             span: ident.span,\n-            parameters: parameters,\n+            parameters,\n         });\n \n         (ast::QSelf {\n@@ -377,15 +377,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy {\n         ast::MutTy {\n-            ty: ty,\n-            mutbl: mutbl\n+            ty,\n+            mutbl,\n         }\n     }\n \n     fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty> {\n         P(ast::Ty {\n             id: ast::DUMMY_NODE_ID,\n-            span: span,\n+            span,\n             node: ty\n         })\n     }\n@@ -444,15 +444,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             ident: id,\n             id: ast::DUMMY_NODE_ID,\n             attrs: attrs.into(),\n-            bounds: bounds,\n-            default: default,\n-            span: span\n+            bounds,\n+            default,\n+            span,\n         }\n     }\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef {\n         ast::TraitRef {\n-            path: path,\n+            path,\n             ref_id: ast::DUMMY_NODE_ID,\n         }\n     }\n@@ -461,7 +461,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::PolyTraitRef {\n             bound_lifetimes: Vec::new(),\n             trait_ref: self.trait_ref(path),\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -482,7 +482,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::LifetimeDef {\n             attrs: attrs.into(),\n             lifetime: self.lifetime(span, ident),\n-            bounds: bounds\n+            bounds,\n         }\n     }\n \n@@ -511,7 +511,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.pat_ident(sp, ident)\n         };\n         let local = P(ast::Local {\n-            pat: pat,\n+            pat,\n             ty: None,\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n@@ -539,7 +539,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.pat_ident(sp, ident)\n         };\n         let local = P(ast::Local {\n-            pat: pat,\n+            pat,\n             ty: Some(typ),\n             init: Some(ex),\n             id: ast::DUMMY_NODE_ID,\n@@ -560,13 +560,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             ty: Some(ty),\n             init: None,\n             id: ast::DUMMY_NODE_ID,\n-            span: span,\n+            span,\n             attrs: ast::ThinVec::new(),\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             node: ast::StmtKind::Local(local),\n-            span: span,\n+            span,\n         }\n     }\n \n@@ -587,18 +587,18 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n         P(ast::Block {\n-           stmts: stmts,\n+           stmts,\n            id: ast::DUMMY_NODE_ID,\n            rules: BlockCheckMode::Default,\n-           span: span,\n+           span,\n         })\n     }\n \n     fn expr(&self, span: Span, node: ast::ExprKind) -> P<ast::Expr> {\n         P(ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: node,\n-            span: span,\n+            node,\n+            span,\n             attrs: ast::ThinVec::new(),\n         })\n     }\n@@ -672,7 +672,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::Field {\n             ident: respan(span, name),\n             expr: e,\n-            span: span,\n+            span,\n             is_shorthand: false,\n             attrs: ast::ThinVec::new(),\n         }\n@@ -876,7 +876,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn arm(&self, _span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n             attrs: vec![],\n-            pats: pats,\n+            pats,\n             guard: None,\n             body: expr\n         }\n@@ -954,7 +954,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn arg(&self, span: Span, ident: ast::Ident, ty: P<ast::Ty>) -> ast::Arg {\n         let arg_pat = self.pat_ident(span, ident);\n         ast::Arg {\n-            ty: ty,\n+            ty,\n             pat: arg_pat,\n             id: ast::DUMMY_NODE_ID\n         }\n@@ -963,7 +963,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     // FIXME unused self\n     fn fn_decl(&self, inputs: Vec<ast::Arg>, output: P<ast::Ty>) -> P<ast::FnDecl> {\n         P(ast::FnDecl {\n-            inputs: inputs,\n+            inputs,\n             output: ast::FunctionRetTy::Ty(output),\n             variadic: false\n         })\n@@ -975,11 +975,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         // Rust coding conventions\n         P(ast::Item {\n             ident: name,\n-            attrs: attrs,\n+            attrs,\n             id: ast::DUMMY_NODE_ID,\n-            node: node,\n+            node,\n             vis: ast::Visibility::Inherited,\n-            span: span,\n+            span,\n             tokens: None,\n         })\n     }\n@@ -1022,7 +1022,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n             ast::StructField {\n                 span: ty.span,\n-                ty: ty,\n+                ty,\n                 ident: None,\n                 vis: ast::Visibility::Inherited,\n                 attrs: Vec::new(),\n@@ -1038,7 +1038,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n         respan(span,\n                ast::Variant_ {\n-                   name: name,\n+                   name,\n                    attrs: Vec::new(),\n                    data: vdata,\n                    disr_expr: None,\n@@ -1081,7 +1081,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs,\n             ast::ItemKind::Mod(ast::Mod {\n                 inner: inner_span,\n-                items: items,\n+                items,\n             })\n         )\n     }\n@@ -1147,7 +1147,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             ident: keywords::Invalid.ident(),\n             attrs: vec![],\n             node: ast::ItemKind::Use(vp),\n-            vis: vis,\n+            vis,\n             span: sp,\n             tokens: None,\n         })"}, {"sha": "d1172b1b2ce9468ebfc370a07cd25661ba7caeb7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             kind: InvocationKind::Derive { path: path.clone(), item: item },\n                             expansion_kind: invoc.expansion_kind,\n                             expansion_data: ExpansionData {\n-                                mark: mark,\n+                                mark,\n                                 ..invoc.expansion_data.clone()\n                             },\n                         });\n@@ -579,7 +579,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let pretty_name = Symbol::intern(&format!(\"derive({})\", path));\n         let span = path.span;\n         let attr = ast::Attribute {\n-            path: path, tokens: TokenStream::empty(), span: span,\n+            path, span,\n+            tokens: TokenStream::empty(),\n             // irrelevant:\n             id: ast::AttrId(0), style: ast::AttrStyle::Outer, is_sugared_doc: false,\n         };\n@@ -714,10 +715,10 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn collect(&mut self, expansion_kind: ExpansionKind, kind: InvocationKind) -> Expansion {\n         let mark = Mark::fresh(self.cx.current_expansion.mark);\n         self.invocations.push(Invocation {\n-            kind: kind,\n-            expansion_kind: expansion_kind,\n+            kind,\n+            expansion_kind,\n             expansion_data: ExpansionData {\n-                mark: mark,\n+                mark,\n                 depth: self.cx.current_expansion.depth + 1,\n                 ..self.cx.current_expansion.clone()\n             },\n@@ -876,7 +877,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                 item.and_then(|item| match item.node {\n                     ItemKind::Mac(mac) => {\n                         self.collect(ExpansionKind::Items, InvocationKind::Bang {\n-                            mac: mac,\n+                            mac,\n                             ident: Some(item.ident),\n                             span: item.span,\n                         }).make_items()\n@@ -1035,7 +1036,7 @@ macro_rules! feature_tests {\n impl<'feat> ExpansionConfig<'feat> {\n     pub fn default(crate_name: String) -> ExpansionConfig<'static> {\n         ExpansionConfig {\n-            crate_name: crate_name,\n+            crate_name,\n             features: None,\n             recursion_limit: 1024,\n             trace_mac: false,"}, {"sha": "4fc2b92d3cd5263cb53f8c4c786abbb815c04c80", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -35,7 +35,7 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n     let vis = ast::Visibility::Inherited;\n     let span = DUMMY_SP;\n     let expr_placeholder = || P(ast::Expr {\n-        id: id, span: span,\n+        id, span,\n         attrs: ast::ThinVec::new(),\n         node: ast::ExprKind::Mac(mac_placeholder()),\n     });\n@@ -44,30 +44,30 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n         ExpansionKind::Expr => Expansion::Expr(expr_placeholder()),\n         ExpansionKind::OptExpr => Expansion::OptExpr(Some(expr_placeholder())),\n         ExpansionKind::Items => Expansion::Items(SmallVector::one(P(ast::Item {\n-            id: id, span: span, ident: ident, vis: vis, attrs: attrs,\n+            id, span, ident, vis, attrs,\n             node: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n         }))),\n         ExpansionKind::TraitItems => Expansion::TraitItems(SmallVector::one(ast::TraitItem {\n-            id: id, span: span, ident: ident, attrs: attrs,\n+            id, span, ident, attrs,\n             node: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n         })),\n         ExpansionKind::ImplItems => Expansion::ImplItems(SmallVector::one(ast::ImplItem {\n-            id: id, span: span, ident: ident, vis: vis, attrs: attrs,\n+            id, span, ident, vis, attrs,\n             node: ast::ImplItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })),\n         ExpansionKind::Pat => Expansion::Pat(P(ast::Pat {\n-            id: id, span: span, node: ast::PatKind::Mac(mac_placeholder()),\n+            id, span, node: ast::PatKind::Mac(mac_placeholder()),\n         })),\n         ExpansionKind::Ty => Expansion::Ty(P(ast::Ty {\n-            id: id, span: span, node: ast::TyKind::Mac(mac_placeholder()),\n+            id, span, node: ast::TyKind::Mac(mac_placeholder()),\n         })),\n         ExpansionKind::Stmts => Expansion::Stmts(SmallVector::one({\n             let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ast::ThinVec::new()));\n-            ast::Stmt { id: id, span: span, node: ast::StmtKind::Mac(mac) }\n+            ast::Stmt { id, span, node: ast::StmtKind::Mac(mac) }\n         })),\n     }\n }\n@@ -81,9 +81,9 @@ pub struct PlaceholderExpander<'a, 'b: 'a> {\n impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n         PlaceholderExpander {\n-            cx: cx,\n+            cx,\n             expansions: HashMap::new(),\n-            monotonic: monotonic,\n+            monotonic,\n         }\n     }\n "}, {"sha": "c3f3a59c30212d818168c7a2af3db36885ce9628", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -383,7 +383,7 @@ pub fn unflatten(tts: Vec<TokenTree>) -> Vec<TokenTree> {\n             }\n             TokenTree::Token(span, token::CloseDelim(delim)) => {\n                 let tree = TokenTree::Delimited(span, Delimited {\n-                    delim: delim,\n+                    delim,\n                     tts: result.into_iter().map(TokenStream::from).collect::<TokenStream>().into(),\n                 });\n                 result = results.pop().unwrap();"}, {"sha": "aea48632d5dd6010ddeeb6a3f830ebdb108c474a", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -178,7 +178,7 @@ fn initial_matcher_pos(ms: Vec<TokenTree>, lo: BytePos) -> Box<MatcherPos> {\n         sep: None,\n         idx: 0,\n         up: None,\n-        matches: matches,\n+        matches,\n         match_lo: 0,\n         match_cur: 0,\n         match_hi: match_idx_hi,\n@@ -374,7 +374,7 @@ fn inner_parse_loop(sess: &ParseSess,\n                         stack: vec![],\n                         sep: seq.separator.clone(),\n                         idx: 0,\n-                        matches: matches,\n+                        matches,\n                         match_lo: item.match_cur,\n                         match_cur: item.match_cur,\n                         match_hi: item.match_cur + seq.num_captures,\n@@ -400,7 +400,7 @@ fn inner_parse_loop(sess: &ParseSess,\n                     let idx = item.idx;\n                     item.stack.push(MatcherTtFrame {\n                         elts: lower_elts,\n-                        idx: idx,\n+                        idx,\n                     });\n                     item.idx = 0;\n                     cur_items.push(item);"}, {"sha": "983b19c5bf073f7c678f57db62f9e6e459472c82", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -271,9 +271,9 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n \n     let expander: Box<_> = Box::new(MacroRulesMacroExpander {\n         name: def.ident,\n-        lhses: lhses,\n-        rhses: rhses,\n-        valid: valid,\n+        lhses,\n+        rhses,\n+        valid,\n     });\n \n     if body.legacy {"}, {"sha": "012d4a54b36f7e0508e2ae1b645e549829fa11d1", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -191,8 +191,8 @@ fn parse_tree<I>(tree: tokenstream::TokenTree,\n                 let name_captures = macro_parser::count_names(&sequence);\n                 TokenTree::Sequence(span, Rc::new(SequenceRepetition {\n                     tts: sequence,\n-                    separator: separator,\n-                    op: op,\n+                    separator,\n+                    op,\n                     num_captures: name_captures,\n                 }))\n             }"}, {"sha": "7b2a31b5705780cd2f085ed692727069ceb8cdb7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -1576,9 +1576,9 @@ pub fn check_crate(krate: &ast::Crate,\n                    unstable: UnstableFeatures) {\n     maybe_stage_features(&sess.span_diagnostic, krate, unstable);\n     let ctx = Context {\n-        features: features,\n+        features,\n         parse_sess: sess,\n-        plugin_attributes: plugin_attributes,\n+        plugin_attributes,\n     };\n     visit::walk_crate(&mut PostExpansionVisitor { context: &ctx }, krate);\n }"}, {"sha": "6fd0a2eab42359d95c70b4baf3ea44a3b6e5725a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -375,8 +375,8 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::BareFn(f) => {\n                 TyKind::BareFn(f.map(|BareFnTy {lifetimes, unsafety, abi, decl}| BareFnTy {\n                     lifetimes: fld.fold_lifetime_defs(lifetimes),\n-                    unsafety: unsafety,\n-                    abi: abi,\n+                    unsafety,\n+                    abi,\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n             }\n@@ -387,7 +387,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 let qself = qself.map(|QSelf { ty, position }| {\n                     QSelf {\n                         ty: fld.fold_ty(ty),\n-                        position: position\n+                        position,\n                     }\n                 });\n                 TyKind::Path(qself, fld.fold_path(path))\n@@ -415,7 +415,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n                                         fld: &mut T) -> ForeignMod {\n     ForeignMod {\n-        abi: abi,\n+        abi,\n         items: items.move_map(|x| fld.fold_foreign_item(x)),\n     }\n }\n@@ -658,7 +658,7 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n             FunctionRetTy::Ty(ty) => FunctionRetTy::Ty(fld.fold_ty(ty)),\n             FunctionRetTy::Default(span) => FunctionRetTy::Default(fld.new_span(span)),\n         },\n-        variadic: variadic\n+        variadic,\n     })\n }\n \n@@ -745,7 +745,7 @@ pub fn noop_fold_where_clause<T: Folder>(\n         predicates: predicates.move_map(|predicate| {\n             fld.fold_where_predicate(predicate)\n         }),\n-        span: span,\n+        span,\n     }\n }\n \n@@ -846,7 +846,7 @@ pub fn noop_fold_field<T: Folder>(f: Field, folder: &mut T) -> Field {\n pub fn noop_fold_mt<T: Folder>(MutTy {ty, mutbl}: MutTy, folder: &mut T) -> MutTy {\n     MutTy {\n         ty: folder.fold_ty(ty),\n-        mutbl: mutbl,\n+        mutbl,\n     }\n }\n \n@@ -864,7 +864,7 @@ pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n     b.map(|Block {id, stmts, rules, span}| Block {\n         id: folder.new_id(id),\n         stmts: stmts.move_flat_map(|s| folder.fold_stmt(s).into_iter()),\n-        rules: rules,\n+        rules,\n         span: folder.new_span(span),\n     })\n }\n@@ -998,10 +998,10 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n                                   folder: &mut T) -> Crate {\n     let mut items = folder.fold_item(P(ast::Item {\n         ident: keywords::Invalid.ident(),\n-        attrs: attrs,\n+        attrs,\n         id: ast::DUMMY_NODE_ID,\n         vis: ast::Visibility::Public,\n-        span: span,\n+        span,\n         node: ast::ItemKind::Mod(module),\n         tokens: None,\n     })).into_iter();\n@@ -1024,9 +1024,9 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n     };\n \n     Crate {\n-        module: module,\n-        attrs: attrs,\n-        span: span,\n+        module,\n+        attrs,\n+        span,\n     }\n }\n \n@@ -1048,7 +1048,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span,\n \n         // FIXME: if this is replaced with a call to `folder.fold_tts` it causes\n         //        an ICE during resolve... odd!\n-        tokens: tokens,\n+        tokens,\n     }\n }\n \n@@ -1264,7 +1264,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 let qself = qself.map(|QSelf { ty, position }| {\n                     QSelf {\n                         ty: folder.fold_ty(ty),\n-                        position: position\n+                        position,\n                     }\n                 });\n                 ExprKind::Path(qself, folder.fold_path(path))"}, {"sha": "19238c30670cc10f2d7ad29ecdbb810dfa3f1ce0", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -42,7 +42,7 @@ impl JsonEmitter {\n                   code_map: Rc<CodeMap>) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n-            registry: registry,\n+            registry,\n             cm: code_map,\n         }\n     }\n@@ -56,8 +56,8 @@ impl JsonEmitter {\n                registry: Option<Registry>,\n                code_map: Rc<CodeMap>) -> JsonEmitter {\n         JsonEmitter {\n-            dst: dst,\n-            registry: registry,\n+            dst,\n+            registry,\n             cm: code_map,\n         }\n     }\n@@ -251,7 +251,7 @@ impl DiagnosticSpan {\n             Box::new(DiagnosticSpanMacroExpansion {\n                 span: call_site,\n                 macro_decl_name: bt.macro_decl_name,\n-                def_site_span: def_site_span,\n+                def_site_span,\n             })\n         });\n         DiagnosticSpan {\n@@ -262,11 +262,11 @@ impl DiagnosticSpan {\n             line_end: end.line,\n             column_start: start.col.0 + 1,\n             column_end: end.col.0 + 1,\n-            is_primary: is_primary,\n+            is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n             suggested_replacement: suggestion.cloned(),\n             expansion: backtrace_step,\n-            label: label,\n+            label,\n         }\n     }\n \n@@ -351,7 +351,7 @@ impl DiagnosticCode {\n \n             DiagnosticCode {\n                 code: s,\n-                explanation: explanation,\n+                explanation,\n             }\n         })\n     }"}, {"sha": "5dc5a53e27907107ce389fe4840eb64accc997c7", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -141,11 +141,11 @@ impl<'a> Parser<'a> {\n \n         Ok(ast::Attribute {\n             id: attr::mk_attr_id(),\n-            style: style,\n-            path: path,\n-            tokens: tokens,\n+            style,\n+            path,\n+            tokens,\n             is_sugared_doc: false,\n-            span: span,\n+            span,\n         })\n     }\n "}, {"sha": "f65fffebe337a21b2a4cb5b5d47b692b5f8575fb", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -192,7 +192,7 @@ fn read_line_comments(rdr: &mut StringReader,\n     if !lines.is_empty() {\n         comments.push(Comment {\n             style: if code_to_the_left { Trailing } else { Isolated },\n-            lines: lines,\n+            lines,\n             pos: p,\n         });\n     }\n@@ -306,8 +306,8 @@ fn read_block_comment(rdr: &mut StringReader,\n     }\n     debug!(\"<<< block comment\");\n     comments.push(Comment {\n-        style: style,\n-        lines: lines,\n+        style,\n+        lines,\n         pos: p,\n     });\n }"}, {"sha": "527d2e413969e4264fab62af600b624a029a3554", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -160,18 +160,18 @@ impl<'a> StringReader<'a> {\n         let source_text = (*filemap.src.as_ref().unwrap()).clone();\n \n         StringReader {\n-            sess: sess,\n+            sess,\n             next_pos: filemap.start_pos,\n             pos: filemap.start_pos,\n             col: CharPos(0),\n             ch: Some('\\n'),\n-            filemap: filemap,\n+            filemap,\n             terminator: None,\n             save_new_lines_and_multibyte: true,\n             // dummy values; not read\n             peek_tok: token::Eof,\n             peek_span: syntax_pos::DUMMY_SP,\n-            source_text: source_text,\n+            source_text,\n             fatal_errs: Vec::new(),\n             token: token::Eof,\n             span: syntax_pos::DUMMY_SP,\n@@ -546,7 +546,7 @@ impl<'a> StringReader<'a> {\n                             };\n \n                             Some(TokenAndSpan {\n-                                tok: tok,\n+                                tok,\n                                 sp: self.mk_sp(start_bpos, self.pos),\n                             })\n                         })\n@@ -675,7 +675,7 @@ impl<'a> StringReader<'a> {\n             };\n \n             Some(TokenAndSpan {\n-                tok: tok,\n+                tok,\n                 sp: self.mk_sp(start_bpos, self.pos),\n             })\n         })"}, {"sha": "ad389ab510aaf070060dac472f0877d78c1cf17c", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -114,7 +114,7 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 Ok(TokenTree::Delimited(span, Delimited {\n-                    delim: delim,\n+                    delim,\n                     tts: tts.into(),\n                 }))\n             },"}, {"sha": "67b4954a8f15b357a281b2c2d2b4ab3b0c4b1056", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -69,7 +69,7 @@ impl ParseSess {\n             config: HashSet::new(),\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n             included_mod_stack: RefCell::new(vec![]),\n-            code_map: code_map\n+            code_map,\n         }\n     }\n "}, {"sha": "e251d136f238aac62a8bbddd1634e36646cac56a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -465,17 +465,17 @@ impl From<P<Expr>> for LhsExpr {\n /// Create a placeholder argument.\n fn dummy_arg(span: Span) -> Arg {\n     let spanned = Spanned {\n-        span: span,\n+        span,\n         node: keywords::Invalid.ident()\n     };\n     let pat = P(Pat {\n         id: ast::DUMMY_NODE_ID,\n         node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), spanned, None),\n-        span: span\n+        span,\n     });\n     let ty = Ty {\n         node: TyKind::Err,\n-        span: span,\n+        span,\n         id: ast::DUMMY_NODE_ID\n     };\n     Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n@@ -489,15 +489,15 @@ impl<'a> Parser<'a> {\n                desugar_doc_comments: bool)\n                -> Self {\n         let mut parser = Parser {\n-            sess: sess,\n+            sess,\n             token: token::Underscore,\n             span: syntax_pos::DUMMY_SP,\n             prev_span: syntax_pos::DUMMY_SP,\n             meta_var_span: None,\n             prev_token_kind: PrevTokenKind::Other,\n             restrictions: Restrictions::empty(),\n             obsolete_set: HashSet::new(),\n-            recurse_into_file_modules: recurse_into_file_modules,\n+            recurse_into_file_modules,\n             directory: Directory { path: PathBuf::new(), ownership: DirectoryOwnership::Owned },\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n@@ -508,7 +508,7 @@ impl<'a> Parser<'a> {\n                 }),\n                 stack: Vec::new(),\n             },\n-            desugar_doc_comments: desugar_doc_comments,\n+            desugar_doc_comments,\n             cfg_mods: true,\n         };\n \n@@ -1216,15 +1216,15 @@ impl<'a> Parser<'a> {\n         let (inputs, variadic) = self.parse_fn_args(false, true)?;\n         let ret_ty = self.parse_ret_ty()?;\n         let decl = P(FnDecl {\n-            inputs: inputs,\n+            inputs,\n             output: ret_ty,\n-            variadic: variadic\n+            variadic,\n         });\n         Ok(TyKind::BareFn(P(BareFnTy {\n-            abi: abi,\n-            unsafety: unsafety,\n+            abi,\n+            unsafety,\n             lifetimes: lifetime_defs,\n-            decl: decl\n+            decl,\n         })))\n     }\n \n@@ -1312,11 +1312,11 @@ impl<'a> Parser<'a> {\n \n             generics.where_clause = self.parse_where_clause()?;\n             let sig = ast::MethodSig {\n-                unsafety: unsafety,\n-                constness: constness,\n+                unsafety,\n+                constness,\n                 decl: d,\n-                generics: generics,\n-                abi: abi,\n+                generics,\n+                abi,\n             };\n \n             let body = match self.token {\n@@ -1344,8 +1344,8 @@ impl<'a> Parser<'a> {\n         Ok(TraitItem {\n             id: ast::DUMMY_NODE_ID,\n             ident: name,\n-            attrs: attrs,\n-            node: node,\n+            attrs,\n+            node,\n             span: lo.to(self.prev_span),\n             tokens: None,\n         })\n@@ -1625,7 +1625,7 @@ impl<'a> Parser<'a> {\n \n         Ok(Arg {\n             ty: t,\n-            pat: pat,\n+            pat,\n             id: ast::DUMMY_NODE_ID,\n         })\n     }\n@@ -1649,7 +1649,7 @@ impl<'a> Parser<'a> {\n         };\n         Ok(Arg {\n             ty: t,\n-            pat: pat,\n+            pat,\n             id: ast::DUMMY_NODE_ID\n         })\n     }\n@@ -1934,17 +1934,17 @@ impl<'a> Parser<'a> {\n         Ok(ast::Field {\n             ident: respan(lo.to(hi), fieldname),\n             span: lo.to(expr.span),\n-            expr: expr,\n-            is_shorthand: is_shorthand,\n+            expr,\n+            is_shorthand,\n             attrs: attrs.into(),\n         })\n     }\n \n     pub fn mk_expr(&mut self, span: Span, node: ExprKind, attrs: ThinVec<Attribute>) -> P<Expr> {\n         P(Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: node,\n-            span: span,\n+            node,\n+            span,\n             attrs: attrs.into(),\n         })\n     }\n@@ -1990,8 +1990,8 @@ impl<'a> Parser<'a> {\n         P(Expr {\n             id: ast::DUMMY_NODE_ID,\n             node: ExprKind::Mac(codemap::Spanned {node: m, span: span}),\n-            span: span,\n-            attrs: attrs,\n+            span,\n+            attrs,\n         })\n     }\n \n@@ -2006,7 +2006,7 @@ impl<'a> Parser<'a> {\n             id: ast::DUMMY_NODE_ID,\n             node: ExprKind::Lit(lv_lit),\n             span: *span,\n-            attrs: attrs,\n+            attrs,\n         })\n     }\n \n@@ -3153,9 +3153,9 @@ impl<'a> Parser<'a> {\n         }\n \n         Ok(ast::Arm {\n-            attrs: attrs,\n-            pats: pats,\n-            guard: guard,\n+            attrs,\n+            pats,\n+            guard,\n             body: expr,\n         })\n     }\n@@ -3361,7 +3361,7 @@ impl<'a> Parser<'a> {\n                                            node: ast::FieldPat {\n                                                ident: fieldname,\n                                                pat: subpat,\n-                                               is_shorthand: is_shorthand,\n+                                               is_shorthand,\n                                                attrs: attrs.into(),\n                                            }\n             });\n@@ -3597,12 +3597,12 @@ impl<'a> Parser<'a> {\n         };\n         let init = self.parse_initializer()?;\n         Ok(P(ast::Local {\n-            ty: ty,\n-            pat: pat,\n-            init: init,\n+            ty,\n+            pat,\n+            init,\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(self.prev_span),\n-            attrs: attrs,\n+            attrs,\n         }))\n     }\n \n@@ -3618,10 +3618,10 @@ impl<'a> Parser<'a> {\n         Ok(StructField {\n             span: lo.to(self.prev_span),\n             ident: Some(name),\n-            vis: vis,\n+            vis,\n             id: ast::DUMMY_NODE_ID,\n-            ty: ty,\n-            attrs: attrs,\n+            ty,\n+            attrs,\n         })\n     }\n \n@@ -3929,7 +3929,7 @@ impl<'a> Parser<'a> {\n                 Stmt {\n                     id: ast::DUMMY_NODE_ID,\n                     span: lo.to(hi),\n-                    node: node,\n+                    node,\n                 }\n             } else {\n                 // if it has a special ident, it's definitely an item\n@@ -3946,7 +3946,7 @@ impl<'a> Parser<'a> {\n                 let span = lo.to(hi);\n                 Stmt {\n                     id: ast::DUMMY_NODE_ID,\n-                    span: span,\n+                    span,\n                     node: StmtKind::Item({\n                         self.mk_item(\n                             span, id /*id is good here*/,\n@@ -4083,7 +4083,7 @@ impl<'a> Parser<'a> {\n         }\n \n         Ok(P(ast::Block {\n-            stmts: stmts,\n+            stmts,\n             id: ast::DUMMY_NODE_ID,\n             rules: s,\n             span: lo.to(self.prev_span),\n@@ -4227,11 +4227,11 @@ impl<'a> Parser<'a> {\n \n         Ok(TyParam {\n             attrs: preceding_attrs.into(),\n-            ident: ident,\n+            ident,\n             id: ast::DUMMY_NODE_ID,\n-            bounds: bounds,\n-            default: default,\n-            span: span,\n+            bounds,\n+            default,\n+            span,\n         })\n     }\n \n@@ -4253,8 +4253,8 @@ impl<'a> Parser<'a> {\n                 };\n                 lifetime_defs.push(LifetimeDef {\n                     attrs: attrs.into(),\n-                    lifetime: lifetime,\n-                    bounds: bounds,\n+                    lifetime,\n+                    bounds,\n                 });\n                 if seen_ty_param {\n                     self.span_err(self.prev_span,\n@@ -4297,7 +4297,7 @@ impl<'a> Parser<'a> {\n             self.expect_gt()?;\n             Ok(ast::Generics {\n                 lifetimes: lifetime_defs,\n-                ty_params: ty_params,\n+                ty_params,\n                 where_clause: WhereClause {\n                     id: ast::DUMMY_NODE_ID,\n                     predicates: Vec::new(),\n@@ -4334,8 +4334,8 @@ impl<'a> Parser<'a> {\n                 let ty = self.parse_ty()?;\n                 bindings.push(TypeBinding {\n                     id: ast::DUMMY_NODE_ID,\n-                    ident: ident,\n-                    ty: ty,\n+                    ident,\n+                    ty,\n                     span: lo.to(self.prev_span),\n                 });\n                 seen_binding = true;\n@@ -4404,8 +4404,8 @@ impl<'a> Parser<'a> {\n                 where_clause.predicates.push(ast::WherePredicate::RegionPredicate(\n                     ast::WhereRegionPredicate {\n                         span: lo.to(self.prev_span),\n-                        lifetime: lifetime,\n-                        bounds: bounds,\n+                        lifetime,\n+                        bounds,\n                     }\n                 ));\n             } else if self.check_type() {\n@@ -4427,7 +4427,7 @@ impl<'a> Parser<'a> {\n                             span: lo.to(self.prev_span),\n                             bound_lifetimes: lifetime_defs,\n                             bounded_ty: ty,\n-                            bounds: bounds,\n+                            bounds,\n                         }\n                     ));\n                 // FIXME: Decide what should be used here, `=` or `==`.\n@@ -4437,7 +4437,7 @@ impl<'a> Parser<'a> {\n                         ast::WhereEqPredicate {\n                             span: lo.to(self.prev_span),\n                             lhs_ty: ty,\n-                            rhs_ty: rhs_ty,\n+                            rhs_ty,\n                             id: ast::DUMMY_NODE_ID,\n                         }\n                     ));\n@@ -4518,7 +4518,7 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: args,\n             output: ret_ty,\n-            variadic: variadic\n+            variadic,\n         }))\n     }\n \n@@ -4679,7 +4679,7 @@ impl<'a> Parser<'a> {\n \n         Ok(P(FnDecl {\n             inputs: inputs_captures,\n-            output: output,\n+            output,\n             variadic: false\n         }))\n     }\n@@ -4694,12 +4694,12 @@ impl<'a> Parser<'a> {\n     fn mk_item(&mut self, span: Span, ident: Ident, node: ItemKind, vis: Visibility,\n                attrs: Vec<Attribute>) -> P<Item> {\n         P(Item {\n-            ident: ident,\n-            attrs: attrs,\n+            ident,\n+            attrs,\n             id: ast::DUMMY_NODE_ID,\n-            node: node,\n-            vis: vis,\n-            span: span,\n+            node,\n+            vis,\n+            span,\n             tokens: None,\n         })\n     }\n@@ -4799,10 +4799,10 @@ impl<'a> Parser<'a> {\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(self.prev_span),\n             ident: name,\n-            vis: vis,\n-            defaultness: defaultness,\n-            attrs: attrs,\n-            node: node,\n+            vis,\n+            defaultness,\n+            attrs,\n+            node,\n             tokens: None,\n         })\n     }\n@@ -4896,11 +4896,11 @@ impl<'a> Parser<'a> {\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n             Ok((ident, inner_attrs, ast::ImplItemKind::Method(ast::MethodSig {\n-                generics: generics,\n-                abi: abi,\n-                unsafety: unsafety,\n-                constness: constness,\n-                decl: decl\n+                generics,\n+                abi,\n+                unsafety,\n+                constness,\n+                decl,\n              }, body)))\n         }\n     }\n@@ -5151,11 +5151,11 @@ impl<'a> Parser<'a> {\n                 let ty = p.parse_ty()?;\n                 Ok(StructField {\n                     span: lo.to(p.span),\n-                    vis: vis,\n+                    vis,\n                     ident: None,\n                     id: ast::DUMMY_NODE_ID,\n-                    ty: ty,\n-                    attrs: attrs,\n+                    ty,\n+                    attrs,\n                 })\n             })?;\n \n@@ -5281,7 +5281,7 @@ impl<'a> Parser<'a> {\n \n         Ok(ast::Mod {\n             inner: inner_lo.to(hi),\n-            items: items\n+            items,\n         })\n     }\n \n@@ -5403,7 +5403,7 @@ impl<'a> Parser<'a> {\n         ModulePath {\n             name: mod_name,\n             path_exists: default_exists || secondary_exists,\n-            result: result,\n+            result,\n         }\n     }\n \n@@ -5418,7 +5418,7 @@ impl<'a> Parser<'a> {\n                     Some(\"mod.rs\") => DirectoryOwnership::Owned,\n                     _ => DirectoryOwnership::UnownedViaMod(true),\n                 },\n-                path: path,\n+                path,\n                 warn: false,\n             });\n         }\n@@ -5509,12 +5509,12 @@ impl<'a> Parser<'a> {\n         let hi = self.span;\n         self.expect(&token::Semi)?;\n         Ok(ast::ForeignItem {\n-            ident: ident,\n-            attrs: attrs,\n+            ident,\n+            attrs,\n             node: ForeignItemKind::Fn(decl, generics),\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            vis: vis\n+            vis,\n         })\n     }\n \n@@ -5529,12 +5529,12 @@ impl<'a> Parser<'a> {\n         let hi = self.span;\n         self.expect(&token::Semi)?;\n         Ok(ForeignItem {\n-            ident: ident,\n-            attrs: attrs,\n+            ident,\n+            attrs,\n             node: ForeignItemKind::Static(ty, mutbl),\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            vis: vis\n+            vis,\n         })\n     }\n \n@@ -5596,7 +5596,7 @@ impl<'a> Parser<'a> {\n \n         let prev_span = self.prev_span;\n         let m = ast::ForeignMod {\n-            abi: abi,\n+            abi,\n             items: foreign_items\n         };\n         let invalid = keywords::Invalid.ident();\n@@ -5647,7 +5647,7 @@ impl<'a> Parser<'a> {\n                 name: ident,\n                 attrs: variant_attrs,\n                 data: struct_def,\n-                disr_expr: disr_expr,\n+                disr_expr,\n             };\n             variants.push(respan(vlo.to(self.prev_span), vr));\n \n@@ -6162,7 +6162,7 @@ impl<'a> Parser<'a> {\n             let rename = this.parse_rename()?;\n             let node = ast::PathListItem_ {\n                 name: ident,\n-                rename: rename,\n+                rename,\n                 id: ast::DUMMY_NODE_ID\n             };\n             Ok(respan(lo.to(this.prev_span), node))"}, {"sha": "5c4bf47a6db435db4aea40cbe348becf76900618", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -246,7 +246,7 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n     let n: usize = 55 * linewidth;\n     debug!(\"mk_printer {}\", linewidth);\n     Printer {\n-        out: out,\n+        out,\n         buf_len: n,\n         margin: linewidth as isize,\n         space: linewidth as isize,"}, {"sha": "3be831e828c72138c1b7aff5c8615cbd28915c9a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -72,7 +72,7 @@ fn rust_printer<'a>(writer: Box<Write+'a>, ann: &'a PpAnn) -> State<'a> {\n         literals: vec![].into_iter().peekable(),\n         cur_cmnt: 0,\n         boxes: Vec::new(),\n-        ann: ann,\n+        ann,\n     }\n }\n \n@@ -145,11 +145,11 @@ impl<'a> State<'a> {\n         State {\n             s: pp::mk_printer(out, DEFAULT_COLUMNS),\n             cm: Some(cm),\n-            comments: comments,\n+            comments,\n             literals: literals.unwrap_or_default().into_iter().peekable(),\n             cur_cmnt: 0,\n             boxes: Vec::new(),\n-            ann: ann,\n+            ann,\n         }\n     }\n }"}, {"sha": "8ab2ba71ec1fab9daf3c9c656f82f0ddc22ee6f4", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -79,8 +79,8 @@ pub fn run(span_diagnostic: &errors::Handler,\n         None => return\n     };\n     let mut v = ShowSpanVisitor {\n-        span_diagnostic: span_diagnostic,\n-        mode: mode,\n+        span_diagnostic,\n+        mode,\n     };\n     visit::walk_crate(&mut v, krate);\n }"}, {"sha": "8977d701e5a2ba32e862903b26c8b7f5f0ae0a90", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -72,18 +72,18 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<Strin\n             tokens: TokenStream::empty(),\n             id: attr::mk_attr_id(),\n             is_sugared_doc: false,\n-            span: span,\n+            span,\n         }],\n         vis: ast::Visibility::Inherited,\n         node: ast::ItemKind::Use(P(codemap::dummy_spanned(ast::ViewPathGlob(ast::Path {\n             segments: [\"{{root}}\", name, \"prelude\", \"v1\"].into_iter().map(|name| {\n                 ast::PathSegment::from_ident(ast::Ident::from_str(name), DUMMY_SP)\n             }).collect(),\n-            span: span,\n+            span,\n         })))),\n         id: ast::DUMMY_NODE_ID,\n         ident: keywords::Invalid.ident(),\n-        span: span,\n+        span,\n         tokens: None,\n     }));\n "}, {"sha": "eeb8bf7214467874957163134ec74703525066a3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -202,18 +202,18 @@ impl fold::Folder for EntryPointCleaner {\n                                                               allow_dead_code_item);\n \n                     ast::Item {\n-                        id: id,\n-                        ident: ident,\n+                        id,\n+                        ident,\n                         attrs: attrs.into_iter()\n                             .filter(|attr| {\n                                 !attr.check_name(\"main\") && !attr.check_name(\"start\")\n                             })\n                             .chain(iter::once(allow_dead_code))\n                             .collect(),\n-                        node: node,\n-                        vis: vis,\n-                        span: span,\n-                        tokens: tokens,\n+                        node,\n+                        vis,\n+                        span,\n+                        tokens,\n                     }\n                 }),\n             EntryPointType::None |\n@@ -243,7 +243,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n \n     let reexport_mod = ast::Mod {\n         inner: DUMMY_SP,\n-        items: items,\n+        items,\n     };\n \n     let sym = Ident::with_empty_ctxt(Symbol::gensym(\"__test_reexports\"));\n@@ -273,12 +273,12 @@ fn generate_test_harness(sess: &ParseSess,\n \n     let mark = Mark::fresh(Mark::root());\n     let mut cx: TestCtxt = TestCtxt {\n-        sess: sess,\n+        sess,\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, ExpansionConfig::default(\"test\".to_string()), resolver),\n         path: Vec::new(),\n         testfns: Vec::new(),\n-        reexport_test_harness_main: reexport_test_harness_main,\n+        reexport_test_harness_main,\n         is_test_crate: is_test_crate(&krate),\n         toplevel_reexport: None,\n         ctxt: SyntaxContext::empty().apply_mark(mark),\n@@ -296,7 +296,7 @@ fn generate_test_harness(sess: &ParseSess,\n     });\n \n     TestHarnessGenerator {\n-        cx: cx,\n+        cx,\n         tests: Vec::new(),\n         tested_submods: Vec::new(),\n     }.fold_crate(krate)\n@@ -464,10 +464,10 @@ fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n     };\n     P(ast::Item {\n         id: ast::DUMMY_NODE_ID,\n-        ident: ident,\n+        ident,\n         node: vi,\n         attrs: vec![],\n-        vis: vis,\n+        vis,\n         span: sp,\n         tokens: None,\n     })"}, {"sha": "3742fb8c804d71993498fd7df05bd54d41be3b26", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -152,8 +152,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                     outputs.push(ast::InlineAsmOutput {\n                         constraint: output.unwrap_or(constraint),\n                         expr: out,\n-                        is_rw: is_rw,\n-                        is_indirect: is_indirect,\n+                        is_rw,\n+                        is_indirect,\n                     });\n                 }\n             }\n@@ -242,14 +242,14 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprKind::InlineAsm(P(ast::InlineAsm {\n-            asm: asm,\n+            asm,\n             asm_str_style: asm_str_style.unwrap(),\n-            outputs: outputs,\n-            inputs: inputs,\n+            outputs,\n+            inputs,\n             clobbers: clobs,\n-            volatile: volatile,\n-            alignstack: alignstack,\n-            dialect: dialect,\n+            volatile,\n+            alignstack,\n+            dialect,\n             ctxt: cx.backtrace(),\n         })),\n         span: sp,"}, {"sha": "0bc802283fb680b64d588ff72b9fc987aca9fcd7", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -34,9 +34,9 @@ pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n     let path = Path::new(v);\n \n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n-        path: path,\n+        path,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "71dd7abfab04a8499dfb1216dd1245d7cc1093f4", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -77,7 +77,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::clone::Clone),\n         additional_bounds: bounds,"}, {"sha": "0b57beeae858b687061214e855fa44fe887de8cb", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -28,7 +28,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n     let doc = cx.meta_list(span, Symbol::intern(\"doc\"), vec![hidden]);\n     let attrs = vec![cx.attribute(span, inline), cx.attribute(span, doc)];\n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::cmp::Eq),\n         additional_bounds: Vec::new(),"}, {"sha": "9b057aaceceb55cafec362ff7e1782a80b611ace", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -26,7 +26,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::cmp::Ord),\n         additional_bounds: Vec::new(),"}, {"sha": "e635c6bebcd6dd80d704f1ed2d86b382b0d14600", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -91,14 +91,14 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n     }\n \n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n-        methods: methods,\n+        methods,\n         associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "e7e1c108760ab5fb7a91a46bf4e2a0b97979b770", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -59,7 +59,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         generics: LifetimeBounds::empty(),\n         explicit_self: borrowed_explicit_self(),\n         args: vec![borrowed_self()],\n-        ret_ty: ret_ty,\n+        ret_ty,\n         attributes: attrs,\n         is_unsafe: false,\n         unify_fieldless_variants: true,\n@@ -82,14 +82,14 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n     };\n \n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: vec![],\n         path: path_std!(cx, core::cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n-        methods: methods,\n+        methods,\n         associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "54d71dd4b48e3a16c3dad8237f8291c026fc5da0", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -28,7 +28,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                    Borrowed(None, ast::Mutability::Mutable));\n \n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::fmt::Debug),\n         additional_bounds: Vec::new(),"}, {"sha": "517221af1d4bab574b76cc6c4d234223bec5fa2a", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -57,7 +57,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__D\");\n \n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: Path::new_(vec![krate, \"Decodable\"], None, vec![], true),\n         additional_bounds: Vec::new(),"}, {"sha": "0c8e3c3939576c331e66616a311fa5723da846c4", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -26,7 +26,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: path_std!(cx, core::default::Default),\n         additional_bounds: Vec::new(),"}, {"sha": "c2c862f043f24dc17f1f2f0fecf9533d6a5abff8", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -138,7 +138,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__S\");\n \n     let trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n         path: Path::new_(vec![krate, \"Encodable\"], None, vec![], true),\n         additional_bounds: Vec::new(),"}, {"sha": "674facd05fdc0bab34ed6a21282ff54e2b52bd72", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -381,10 +381,10 @@ fn find_type_parameters(ty: &ast::Ty,\n     }\n \n     let mut visitor = Visitor {\n-        ty_param_names: ty_param_names,\n+        ty_param_names,\n         types: Vec::new(),\n-        span: span,\n-        cx: cx,\n+        span,\n+        cx,\n     };\n \n     visit::Visitor::visit_ty(&mut visitor, ty);\n@@ -499,7 +499,7 @@ impl<'a> TraitDef<'a> {\n             ast::ImplItem {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n-                ident: ident,\n+                ident,\n                 vis: ast::Visibility::Inherited,\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n@@ -596,7 +596,7 @@ impl<'a> TraitDef<'a> {\n                         span: self.span,\n                         bound_lifetimes: vec![],\n                         bounded_ty: ty,\n-                        bounds: bounds,\n+                        bounds,\n                     };\n \n                     let predicate = ast::WherePredicate::BoundPredicate(predicate);\n@@ -606,10 +606,10 @@ impl<'a> TraitDef<'a> {\n         }\n \n         let trait_generics = Generics {\n-            lifetimes: lifetimes,\n-            ty_params: ty_params,\n-            where_clause: where_clause,\n-            span: span,\n+            lifetimes,\n+            ty_params,\n+            where_clause,\n+            span,\n         };\n \n         // Create the reference to the trait.\n@@ -807,11 +807,11 @@ impl<'a> MethodDef<'a> {\n                                 fields: &SubstructureFields)\n                                 -> P<Expr> {\n         let substructure = Substructure {\n-            type_ident: type_ident,\n+            type_ident,\n             method_ident: cx.ident_of(self.name),\n-            self_args: self_args,\n-            nonself_args: nonself_args,\n-            fields: fields,\n+            self_args,\n+            nonself_args,\n+            fields,\n         };\n         let mut f = self.combine_substructure.borrow_mut();\n         let f: &mut CombineSubstructureFunc = &mut *f;\n@@ -924,8 +924,8 @@ impl<'a> MethodDef<'a> {\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {\n                                                 generics: fn_generics,\n-                                                abi: abi,\n-                                                unsafety: unsafety,\n+                                                abi,\n+                                                unsafety,\n                                                 constness:\n                                                     dummy_spanned(ast::Constness::NotConst),\n                                                 decl: fn_decl,\n@@ -985,7 +985,7 @@ impl<'a> MethodDef<'a> {\n             let mut other_fields: Vec<vec::IntoIter<_>> = raw_fields.collect();\n             first_field.map(|(span, opt_id, field, attrs)| {\n                     FieldInfo {\n-                        span: span,\n+                        span,\n                         name: opt_id,\n                         self_: field,\n                         other: other_fields.iter_mut()\n@@ -995,7 +995,7 @@ impl<'a> MethodDef<'a> {\n                                 }\n                             })\n                             .collect(),\n-                        attrs: attrs,\n+                        attrs,\n                     }\n                 })\n                 .collect()\n@@ -1246,7 +1246,7 @@ impl<'a> MethodDef<'a> {\n                                     name: opt_ident,\n                                     self_: self_getter_expr,\n                                     other: others,\n-                                    attrs: attrs,\n+                                    attrs,\n                         }\n                     }).collect::<Vec<FieldInfo>>();\n \n@@ -1553,7 +1553,7 @@ impl<'a> TraitDef<'a> {\n                             span: Span { ctxt: self.span.ctxt, ..pat.span },\n                             node: ast::FieldPat {\n                                 ident: ident.unwrap(),\n-                                pat: pat,\n+                                pat,\n                                 is_shorthand: false,\n                                 attrs: ast::ThinVec::new(),\n                             },"}, {"sha": "47b5f40832ac037796ebeeaa71278f4f70bb4f8d", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -55,10 +55,10 @@ impl<'a> Path<'a> {\n                     global: bool)\n                     -> Path<'r> {\n         Path {\n-            path: path,\n-            lifetime: lifetime,\n-            params: params,\n-            global: global,\n+            path,\n+            lifetime,\n+            params,\n+            global,\n         }\n     }\n \n@@ -211,14 +211,14 @@ fn mk_ty_param(cx: &ExtCtxt,\n fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, span: Span)\n                -> Generics {\n     Generics {\n-        lifetimes: lifetimes,\n-        ty_params: ty_params,\n+        lifetimes,\n+        ty_params,\n         where_clause: ast::WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n-            span: span,\n+            span,\n         },\n-        span: span,\n+        span,\n     }\n }\n "}, {"sha": "6c78eea186d61fb7cb7d865f1cb4ae93c5c72b2a", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -30,9 +30,9 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n \n     let arg = Path::new_local(typaram);\n     let hash_trait_def = TraitDef {\n-        span: span,\n+        span,\n         attributes: Vec::new(),\n-        path: path,\n+        path,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "cd706f14a680dde01b80b4bb4fd2d1fac49f1aaa", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -173,6 +173,6 @@ fn call_intrinsic(cx: &ExtCtxt,\n         stmts: vec![cx.stmt_expr(call)],\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-        span: span,\n+        span,\n     }))\n }"}, {"sha": "764cedfcf2061924fb3edb8e25ba37a49decbfda", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -709,11 +709,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     };\n \n     let mut cx = Context {\n-        ecx: ecx,\n-        args: args,\n-        arg_types: arg_types,\n-        arg_unique_types: arg_unique_types,\n-        names: names,\n+        ecx,\n+        args,\n+        arg_types,\n+        arg_unique_types,\n+        names,\n         curarg: 0,\n         arg_index_map: Vec::new(),\n         count_args: Vec::new(),\n@@ -724,7 +724,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,\n-        macsp: macsp,\n+        macsp,\n         fmtsp: fmt.span,\n     };\n "}, {"sha": "99dae29d606b352c26daefeed51b223ba3036610", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -265,7 +265,7 @@ pub mod printf {\n     /// Returns an iterator over all substitutions in a given string.\n     pub fn iter_subs(s: &str) -> Substitutions {\n         Substitutions {\n-            s: s,\n+            s,\n         }\n     }\n \n@@ -553,12 +553,12 @@ pub mod printf {\n \n         let f = Format {\n             span: start.slice_between(end).unwrap(),\n-            parameter: parameter,\n-            flags: flags,\n-            width: width,\n-            precision: precision,\n-            length: length,\n-            type_: type_,\n+            parameter,\n+            flags,\n+            width,\n+            precision,\n+            length,\n+            type_,\n         };\n         Some((Substitution::Format(f), end.slice_after()))\n     }\n@@ -776,7 +776,7 @@ pub mod shell {\n     /// Returns an iterator over all substitutions in a given string.\n     pub fn iter_subs(s: &str) -> Substitutions {\n         Substitutions {\n-            s: s,\n+            s,\n         }\n     }\n \n@@ -933,7 +933,7 @@ mod strcursor {\n     impl<'a> StrCursor<'a> {\n         pub fn new_at_start(s: &'a str) -> StrCursor<'a> {\n             StrCursor {\n-                s: s,\n+                s,\n                 at: 0,\n             }\n         }"}, {"sha": "81226ba599ae64c7b57f53f26ca707585b1aaa59", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -56,7 +56,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemKind::GlobalAsm(P(ast::GlobalAsm {\n-            asm: asm,\n+            asm,\n             ctxt: cx.backtrace(),\n         })),\n         vis: ast::Visibility::Inherited,"}, {"sha": "a8a54a97ac3686ea034aecd831726c77eb8051fb", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -69,9 +69,9 @@ pub fn modify(sess: &ParseSess,\n             attr_macros: Vec::new(),\n             bang_macros: Vec::new(),\n             in_root: true,\n-            handler: handler,\n-            is_proc_macro_crate: is_proc_macro_crate,\n-            is_test_crate: is_test_crate,\n+            handler,\n+            is_proc_macro_crate,\n+            is_test_crate,\n         };\n         visit::walk_crate(&mut collect, &krate);\n         (collect.derives, collect.attr_macros, collect.bang_macros)\n@@ -183,7 +183,7 @@ impl<'a> CollectProcMacros<'a> {\n         if self.in_root && item.vis == ast::Visibility::Public {\n             self.derives.push(ProcMacroDerive {\n                 span: item.span,\n-                trait_name: trait_name,\n+                trait_name,\n                 function_name: item.ident,\n                 attrs: proc_attrs,\n             });"}, {"sha": "296a3b11aedc17397b9889a80b611587fdd67e65", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -161,7 +161,7 @@ impl SyntaxContext {\n                 syntax_contexts.push(SyntaxContextData {\n                     outer_mark: mark,\n                     prev_ctxt: self,\n-                    modern: modern,\n+                    modern,\n                 });\n                 SyntaxContext(syntax_contexts.len() as u32 - 1)\n             })"}, {"sha": "f5449061b87fabed7eb3d096ebb3c3b5945823b7", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -184,8 +184,8 @@ impl Span {\n             if !info.call_site.source_equal(&prev_span) {\n                 result.push(MacroBacktrace {\n                     call_site: info.call_site,\n-                    macro_decl_name: macro_decl_name,\n-                    def_site_span: def_site_span,\n+                    macro_decl_name,\n+                    def_site_span,\n                 });\n             }\n \n@@ -358,7 +358,7 @@ impl MultiSpan {\n \n         for &(span, ref label) in &self.span_labels {\n             span_labels.push(SpanLabel {\n-                span: span,\n+                span,\n                 is_primary: is_primary(span),\n                 label: Some(label.clone())\n             });\n@@ -367,7 +367,7 @@ impl MultiSpan {\n         for &span in &self.primary_spans {\n             if !span_labels.iter().any(|sl| sl.span == span) {\n                 span_labels.push(SpanLabel {\n-                    span: span,\n+                    span,\n                     is_primary: true,\n                     label: None\n                 });\n@@ -556,16 +556,16 @@ impl Decodable for FileMap {\n             let multibyte_chars: Vec<MultiByteChar> =\n                 d.read_struct_field(\"multibyte_chars\", 5, |d| Decodable::decode(d))?;\n             Ok(FileMap {\n-                name: name,\n-                name_was_remapped: name_was_remapped,\n+                name,\n+                name_was_remapped,\n                 // `crate_of_origin` has to be set by the importer.\n                 // This value matches up with rustc::hir::def_id::INVALID_CRATE.\n                 // That constant is not available here unfortunately :(\n                 crate_of_origin: ::std::u32::MAX - 1,\n-                start_pos: start_pos,\n-                end_pos: end_pos,\n+                start_pos,\n+                end_pos,\n                 src: None,\n-                src_hash: src_hash,\n+                src_hash,\n                 external_src: RefCell::new(ExternalSource::AbsentOk),\n                 lines: RefCell::new(lines),\n                 multibyte_chars: RefCell::new(multibyte_chars)\n@@ -594,13 +594,13 @@ impl FileMap {\n         let end_pos = start_pos.to_usize() + src.len();\n \n         FileMap {\n-            name: name,\n-            name_was_remapped: name_was_remapped,\n+            name,\n+            name_was_remapped,\n             crate_of_origin: 0,\n             src: Some(Rc::new(src)),\n-            src_hash: src_hash,\n+            src_hash,\n             external_src: RefCell::new(ExternalSource::Unneeded),\n-            start_pos: start_pos,\n+            start_pos,\n             end_pos: Pos::from_usize(end_pos),\n             lines: RefCell::new(Vec::new()),\n             multibyte_chars: RefCell::new(Vec::new()),\n@@ -687,8 +687,8 @@ impl FileMap {\n     pub fn record_multibyte_char(&self, pos: BytePos, bytes: usize) {\n         assert!(bytes >=2 && bytes <= 4);\n         let mbc = MultiByteChar {\n-            pos: pos,\n-            bytes: bytes,\n+            pos,\n+            bytes,\n         };\n         self.multibyte_chars.borrow_mut().push(mbc);\n     }"}, {"sha": "c5e68eed4072541a2e81630dcc15345a8bd09122", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -231,7 +231,7 @@ impl<T: Write + Send> TerminfoTerminal<T> {\n         };\n \n         TerminfoTerminal {\n-            out: out,\n+            out,\n             ti: terminfo,\n             num_colors: nc,\n         }"}, {"sha": "0cdea64db8bc09c74bf8d35d883130da52ab76f5", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -337,8 +337,8 @@ pub fn msys_terminfo() -> TermInfo {\n     TermInfo {\n         names: vec![\"cygwin\".to_string()], // msys is a fork of an older cygwin version\n         bools: HashMap::new(),\n-        numbers: numbers,\n-        strings: strings,\n+        numbers,\n+        strings,\n     }\n }\n "}, {"sha": "5451ec24aa8fca5021e7990eb01fe2a51010290b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -235,8 +235,8 @@ pub struct Metric {\n impl Metric {\n     pub fn new(value: f64, noise: f64) -> Metric {\n         Metric {\n-            value: value,\n-            noise: noise,\n+            value,\n+            noise,\n         }\n     }\n }\n@@ -492,17 +492,17 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     };\n \n     let test_opts = TestOpts {\n-        list: list,\n-        filter: filter,\n+        list,\n+        filter,\n         filter_exact: exact,\n-        run_ignored: run_ignored,\n-        run_tests: run_tests,\n-        bench_benchmarks: bench_benchmarks,\n-        logfile: logfile,\n-        nocapture: nocapture,\n-        color: color,\n-        quiet: quiet,\n-        test_threads: test_threads,\n+        run_ignored,\n+        run_tests,\n+        bench_benchmarks,\n+        logfile,\n+        nocapture,\n+        color,\n+        quiet,\n+        test_threads,\n         skip: matches.opt_strs(\"skip\"),\n         options: Options::new(),\n     };\n@@ -565,8 +565,8 @@ impl<T: Write> ConsoleTestState<T> {\n         };\n \n         Ok(ConsoleTestState {\n-            out: out,\n-            log_out: log_out,\n+            out,\n+            log_out,\n             use_color: use_color(opts),\n             quiet: opts.quiet,\n             total: 0,\n@@ -1330,7 +1330,7 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n                 let TestDescAndFn {desc, testfn} = test;\n                 Some(TestDescAndFn {\n                     desc: TestDesc { ignore: false, ..desc },\n-                    testfn: testfn,\n+                    testfn,\n                 })\n             } else {\n                 None\n@@ -1367,7 +1367,7 @@ pub fn convert_benchmarks_to_tests(tests: Vec<TestDescAndFn>) -> Vec<TestDescAnd\n         };\n         TestDescAndFn {\n             desc: x.desc,\n-            testfn: testfn,\n+            testfn,\n         }\n     }).collect()\n }\n@@ -1527,8 +1527,8 @@ impl MetricMap {\n     /// negative direction represents a regression.\n     pub fn insert_metric(&mut self, name: &str, value: f64, noise: f64) {\n         let m = Metric {\n-            value: value,\n-            noise: noise,\n+            value,\n+            noise,\n         };\n         let MetricMap(ref mut map) = *self;\n         map.insert(name.to_owned(), m);\n@@ -1689,7 +1689,7 @@ pub mod bench {\n                 let mb_s = bs.bytes * 1000 / ns_iter;\n \n                 BenchSamples {\n-                    ns_iter_summ: ns_iter_summ,\n+                    ns_iter_summ,\n                     mb_s: mb_s as usize,\n                 }\n             }"}, {"sha": "71e7d6d3477abfb3a317753d39f384f373f6b753", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -181,15 +181,15 @@ fn main() {\n     t!(io::stdin().read_to_string(&mut passphrase));\n \n     Builder {\n-        rust_release: rust_release,\n-        cargo_release: cargo_release,\n-        rls_release: rls_release,\n-        input: input,\n-        output: output,\n+        rust_release,\n+        cargo_release,\n+        rls_release,\n+        input,\n+        output,\n         gpg_passphrase: passphrase,\n         digests: BTreeMap::new(),\n-        s3_address: s3_address,\n-        date: date,\n+        s3_address,\n+        date,\n         rust_version: String::new(),\n         cargo_version: String::new(),\n         rls_version: String::new(),"}, {"sha": "b7fb3670165d6d928e5c1adaa2953edbdd320fcb", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -175,8 +175,8 @@ fn parse_expected(last_nonfollow_error: Option<usize>,\n            msg);\n     Some((which,\n           Error {\n-        line_num: line_num,\n-        kind: kind,\n-        msg: msg,\n+        line_num,\n+        kind,\n+        msg,\n     }))\n }"}, {"sha": "77ee93c30078b3b0d8908dfadc46c813cb67b40f", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -148,8 +148,8 @@ fn push_expected_errors(expected_errors: &mut Vec<Error>,\n             let kind = ErrorKind::from_str(&diagnostic.level).ok();\n             expected_errors.push(Error {\n                 line_num: span.line_start,\n-                kind: kind,\n-                msg: msg,\n+                kind,\n+                msg,\n             });\n         }\n     }"}, {"sha": "384ae3f45f60cced4636e9b85191662e48206e22", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -176,9 +176,9 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n         target: opt_str2(matches.opt_str(\"target\")),\n         host: opt_str2(matches.opt_str(\"host\")),\n-        gdb: gdb,\n-        gdb_version: gdb_version,\n-        gdb_native_rust: gdb_native_rust,\n+        gdb,\n+        gdb_version,\n+        gdb_native_rust,\n         lldb_version: extract_lldb_version(matches.opt_str(\"lldb-version\")),\n         llvm_version: matches.opt_str(\"llvm-version\"),\n         system_llvm: matches.opt_present(\"system-llvm\"),\n@@ -192,7 +192,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n         quiet: matches.opt_present(\"quiet\"),\n-        color: color,\n+        color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n@@ -470,8 +470,8 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testpaths),\n-            ignore: ignore,\n-            should_panic: should_panic,\n+            ignore,\n+            should_panic,\n             allow_fail: false,\n         },\n         testfn: make_test_closure(config, testpaths),"}, {"sha": "ffcc60e78529247e1cd3ccd97a78c02d4a10b38f", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -97,7 +97,7 @@ pub fn run(lib_path: &str,\n     let Output { status, stdout, stderr } = process.wait_with_output().unwrap();\n \n     Ok(Result {\n-        status: status,\n+        status,\n         out: String::from_utf8(stdout).unwrap(),\n         err: String::from_utf8(stderr).unwrap(),\n     })"}, {"sha": "02511ac6d98bc6d01e2398b7c3eb8158ed2b160d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6c9605e41b7c7dc23e0e6f633f05912d0463dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1b6c9605e41b7c7dc23e0e6f633f05912d0463dd", "patch": "@@ -59,7 +59,7 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n \n     let base_cx = TestCx { config: &config,\n                            props: &base_props,\n-                           testpaths: testpaths,\n+                           testpaths,\n                            revision: None };\n     base_cx.init_all();\n \n@@ -72,7 +72,7 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n             let rev_cx = TestCx {\n                 config: &config,\n                 props: &revision_props,\n-                testpaths: testpaths,\n+                testpaths,\n                 revision: Some(revision)\n             };\n             rev_cx.run_revision();\n@@ -354,7 +354,7 @@ impl<'test> TestCx<'test> {\n         args.extend(self.props.compile_flags.iter().cloned());\n         ProcArgs {\n             prog: self.config.rustc_path.to_str().unwrap().to_owned(),\n-            args: args,\n+            args,\n         }\n     }\n \n@@ -416,7 +416,7 @@ actual:\\n\\\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         ProcArgs {\n             prog: self.config.rustc_path.to_str().unwrap().to_owned(),\n-            args: args,\n+            args,\n         }\n     }\n \n@@ -595,10 +595,10 @@ actual:\\n\\\n                 };\n \n                 debugger_run_result = ProcRes {\n-                    status: status,\n+                    status,\n                     stdout: out,\n                     stderr: err,\n-                    cmdline: cmdline\n+                    cmdline,\n                 };\n                 if process.kill().is_err() {\n                     println!(\"Adb process is already finished.\");\n@@ -852,7 +852,7 @@ actual:\\n\\\n \n         self.dump_output(&out, &err);\n         ProcRes {\n-            status: status,\n+            status,\n             stdout: out,\n             stderr: err,\n             cmdline: format!(\"{:?}\", cmd)\n@@ -899,9 +899,9 @@ actual:\\n\\\n         }\n \n         DebuggerCommands {\n-            commands: commands,\n-            check_lines: check_lines,\n-            breakpoint_lines: breakpoint_lines,\n+            commands,\n+            check_lines,\n+            breakpoint_lines,\n         }\n     }\n \n@@ -1206,7 +1206,7 @@ actual:\\n\\\n         let args = ProcArgs {\n             prog: self.config.rustdoc_path\n                 .as_ref().expect(\"--rustdoc-path passed\").to_str().unwrap().to_owned(),\n-            args: args,\n+            args,\n         };\n         self.compose_and_run_compiler(args, None)\n     }\n@@ -1482,7 +1482,7 @@ actual:\\n\\\n         args.extend(self.props.compile_flags.iter().cloned());\n         ProcArgs {\n             prog: self.config.rustc_path.to_str().unwrap().to_owned(),\n-            args: args,\n+            args,\n         }\n     }\n \n@@ -1532,8 +1532,8 @@ actual:\\n\\\n \n         let prog = args.remove(0);\n          ProcArgs {\n-            prog: prog,\n-            args: args,\n+            prog,\n+            args,\n         }\n     }\n \n@@ -1585,10 +1585,10 @@ actual:\\n\\\n                          working_dir).expect(&format!(\"failed to exec `{}`\", prog));\n         self.dump_output(&out, &err);\n         ProcRes {\n-            status: status,\n+            status,\n             stdout: out,\n             stderr: err,\n-            cmdline: cmdline,\n+            cmdline,\n         }\n     }\n "}]}