{"sha": "016ea6b319e12df6ed568a147f9e5f06ceccbfff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmVhNmIzMTllMTJkZjZlZDU2OGExNDdmOWU1ZjA2Y2VjY2JmZmY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-27T17:36:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-08T16:48:02Z"}, "message": "Use a side-table of consts instead of matching on the DepKind enum.", "tree": {"sha": "13a3dcaca1ee589d98201b49e000512ce5f477d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a3dcaca1ee589d98201b49e000512ce5f477d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016ea6b319e12df6ed568a147f9e5f06ceccbfff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016ea6b319e12df6ed568a147f9e5f06ceccbfff", "html_url": "https://github.com/rust-lang/rust/commit/016ea6b319e12df6ed568a147f9e5f06ceccbfff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016ea6b319e12df6ed568a147f9e5f06ceccbfff/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1220fdedf030049a22a3ae430e15fda2a3f4477", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1220fdedf030049a22a3ae430e15fda2a3f4477", "html_url": "https://github.com/rust-lang/rust/commit/d1220fdedf030049a22a3ae430e15fda2a3f4477"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "516184f4629e5831e5129f01637e78ba2bea5247", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/016ea6b319e12df6ed568a147f9e5f06ceccbfff/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016ea6b319e12df6ed568a147f9e5f06ceccbfff/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=016ea6b319e12df6ed568a147f9e5f06ceccbfff", "patch": "@@ -70,6 +70,20 @@ use std::hash::Hash;\n \n pub use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n \n+/// This struct stores metadata about each DepKind.\n+///\n+/// Information is retrieved by indexing the `DEP_KINDS` array using the integer value\n+/// of the `DepKind`. Overall, this allows to implement `DepContext` using this manual\n+/// jump table instead of large matches.\n+pub struct DepKindStruct {}\n+\n+impl std::ops::Deref for DepKind {\n+    type Target = DepKindStruct;\n+    fn deref(&self) -> &DepKindStruct {\n+        &DEP_KINDS[*self as usize]\n+    }\n+}\n+\n // erase!() just makes tokens go away. It's used to specify which macro argument\n // is repeated (i.e., which sub-expression of the macro we are in) but don't need\n // to actually use any of the arguments.\n@@ -103,14 +117,46 @@ macro_rules! contains_eval_always_attr {\n     ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n \n+#[allow(non_upper_case_globals)]\n+pub mod dep_kind {\n+    use super::*;\n+\n+    // We use this for most things when incr. comp. is turned off.\n+    pub const Null: DepKindStruct = DepKindStruct {};\n+\n+    // Represents metadata from an extern crate.\n+    pub const CrateMetadata: DepKindStruct = DepKindStruct {};\n+\n+    pub const TraitSelect: DepKindStruct = DepKindStruct {};\n+\n+    pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {};\n+\n+    macro_rules! define_query_dep_kinds {\n+        ($(\n+            [$($attrs:tt)*]\n+            $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n+        ,)*) => (\n+            $(pub const $variant: DepKindStruct = {\n+                DepKindStruct {\n+                }\n+            };)*\n+        );\n+    }\n+\n+    rustc_dep_node_append!([define_query_dep_kinds!][]);\n+}\n+\n macro_rules! define_dep_nodes {\n     (<$tcx:tt>\n     $(\n         [$($attrs:tt)*]\n         $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n       ,)*\n     ) => (\n-        #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n+        static DEP_KINDS: &[DepKindStruct] = &[ $(dep_kind::$variant),* ];\n+\n+        /// This enum serves as an index into the `DEP_KINDS` array.\n+        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n         #[allow(non_camel_case_types)]\n         pub enum DepKind {\n             $($variant),*"}, {"sha": "b1c901633a71b24eb4ce891c5ebbacb8bbd43b82", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/016ea6b319e12df6ed568a147f9e5f06ceccbfff/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016ea6b319e12df6ed568a147f9e5f06ceccbfff/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=016ea6b319e12df6ed568a147f9e5f06ceccbfff", "patch": "@@ -61,7 +61,7 @@ pub trait DepContext: Copy {\n }\n \n /// Describe the different families of dependency nodes.\n-pub trait DepKind: Copy + fmt::Debug + Eq + Ord + Hash {\n+pub trait DepKind: Copy + fmt::Debug + Eq + Hash {\n     const NULL: Self;\n \n     /// Return whether this kind always require evaluation."}]}