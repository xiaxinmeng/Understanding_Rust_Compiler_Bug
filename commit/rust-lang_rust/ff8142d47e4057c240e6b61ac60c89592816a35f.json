{"sha": "ff8142d47e4057c240e6b61ac60c89592816a35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmODE0MmQ0N2U0MDU3YzI0MGU2YjYxYWM2MGM4OTU5MjgxNmEzNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-30T10:30:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-30T10:30:38Z"}, "message": "internal: touch up dev readme", "tree": {"sha": "133ea384281566797fa36b150690dc66b1b825fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133ea384281566797fa36b150690dc66b1b825fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff8142d47e4057c240e6b61ac60c89592816a35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8142d47e4057c240e6b61ac60c89592816a35f", "html_url": "https://github.com/rust-lang/rust/commit/ff8142d47e4057c240e6b61ac60c89592816a35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff8142d47e4057c240e6b61ac60c89592816a35f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797185e1b66fb0d6ec1dedf206616890b5e3fef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/797185e1b66fb0d6ec1dedf206616890b5e3fef3", "html_url": "https://github.com/rust-lang/rust/commit/797185e1b66fb0d6ec1dedf206616890b5e3fef3"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "eab21a7653b00a2af8dd43d8b20ee7784bf8faa3", "filename": "docs/dev/README.md", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ff8142d47e4057c240e6b61ac60c89592816a35f/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff8142d47e4057c240e6b61ac60c89592816a35f/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=ff8142d47e4057c240e6b61ac60c89592816a35f", "patch": "@@ -1,7 +1,7 @@\n # Contributing Quick Start\n \n-Rust Analyzer is an ordinary Rust project, which is organized as a Cargo\n-workspace, builds on stable and doesn't depend on C libraries. So, just\n+Rust Analyzer is an ordinary Rust project, which is organized as a Cargo workspace, builds on stable and doesn't depend on C libraries.\n+So, just\n \n ```\n $ cargo test\n@@ -13,9 +13,8 @@ To learn more about how rust-analyzer works, see [./architecture.md](./architect\n It also explains the high-level layout of the source code.\n Do skim through that document.\n \n-We also publish rustdoc docs to pages:\n-\n-https://rust-analyzer.github.io/rust-analyzer/ide/\n+We also publish rustdoc docs to pages: https://rust-analyzer.github.io/rust-analyzer/ide/.\n+Note though, that internal documentation is very incomplete.\n \n Various organizational and process issues are discussed in this document.\n \n@@ -49,21 +48,28 @@ https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\n   Also a kind of fun.\n   These issues should generally include a link to a Zulip discussion thread.\n \n-# CI\n+# Code Style & Review Process\n+\n+Do see [./style.md](./style.md).\n \n-We use GitHub Actions for CI. Most of the things, including formatting, are checked by\n-`cargo test` so, if `cargo test` passes locally, that's a good sign that CI will\n-be green as well. The only exception is that some long-running tests are skipped locally by default.\n+# Cookbook\n+\n+## CI\n+\n+We use GitHub Actions for CI.\n+Most of the things, including formatting, are checked by `cargo test`.\n+If `cargo test` passes locally, that's a good sign that CI will be green as well.\n+The only exception is that some long-running tests are skipped locally by default.\n Use `env RUN_SLOW_TESTS=1 cargo test` to run the full suite.\n \n We use bors-ng to enforce the [not rocket science](https://graydon2.dreamwidth.org/1597.html) rule.\n \n-# Launching rust-analyzer\n+## Launching rust-analyzer\n \n Debugging the language server can be tricky.\n LSP is rather chatty, so driving it from the command line is not really feasible, driving it via VS Code requires interacting with two processes.\n \n-For this reason, the best way to see how rust-analyzer works is to find a relevant test and execute it.\n+For this reason, the best way to see how rust-analyzer works is to **find a relevant test and execute it**.\n VS Code & Emacs include an action for running a single test.\n \n Launching a VS Code instance with a locally built language server is also possible.\n@@ -107,49 +113,38 @@ cd editors/code\n npm ci\n npm run lint\n ```\n-\n-# Code Style & Review Process\n-\n-Do see [./style.md](./style.md).\n-\n-# How to ...\n+## How to ...\n \n * ... add an assist? [#7535](https://github.com/rust-analyzer/rust-analyzer/pull/7535)\n * ... add a new protocol extension? [#4569](https://github.com/rust-analyzer/rust-analyzer/pull/4569)\n * ... add a new configuration option? [#7451](https://github.com/rust-analyzer/rust-analyzer/pull/7451)\n * ... add a new completion? [#6964](https://github.com/rust-analyzer/rust-analyzer/pull/6964)\n * ... allow new syntax in the parser? [#7338](https://github.com/rust-analyzer/rust-analyzer/pull/7338)\n \n-# Logging\n+## Logging\n \n-Logging is done by both rust-analyzer and VS Code, so it might be tricky to\n-figure out where logs go.\n+Logging is done by both rust-analyzer and VS Code, so it might be tricky to figure out where logs go.\n \n-Inside rust-analyzer, we use the standard `log` crate for logging, and\n-`env_logger` for logging frontend. By default, log goes to stderr, but the\n-stderr itself is processed by VS Code.\n+Inside rust-analyzer, we use the standard `log` crate for logging, and `env_logger` for logging frontend.\n+By default, log goes to stderr, but the stderr itself is processed by VS Code.\n+`--log-file <PATH>` CLI argument allows logging to file.\n \n-To see stderr in the running VS Code instance, go to the \"Output\" tab of the\n-panel and select `rust-analyzer`. This shows `eprintln!` as well. Note that\n-`stdout` is used for the actual protocol, so `println!` will break things.\n+To see stderr in the running VS Code instance, go to the \"Output\" tab of the panel and select `rust-analyzer`.\n+This shows `eprintln!` as well.\n+Note that `stdout` is used for the actual protocol, so `println!` will break things.\n \n To log all communication between the server and the client, there are two choices:\n \n * You can log on the server side, by running something like\n   ```\n   env RA_LOG=lsp_server=debug code .\n   ```\n+* You can log on the client side, by enabling `\"rust-analyzer.trace.server\": \"verbose\"` workspace setting.\n+  These logs are shown in a separate tab in the output and could be used with LSP inspector.\n+  Kudos to [@DJMcNab](https://github.com/DJMcNab) for setting this awesome infra up!\n \n-  By default, logs go to stderr, `--log-file <PATH>` CLI argument overrides\n-  that.\n \n-* You can log on the client side, by enabling `\"rust-analyzer.trace.server\":\n-  \"verbose\"` workspace setting. These logs are shown in a separate tab in the\n-  output and could be used with LSP inspector. Kudos to\n-  [@DJMcNab](https://github.com/DJMcNab) for setting this awesome infra up!\n-\n-\n-There are also two VS Code commands which might be of interest:\n+There are also several VS Code commands which might be of interest:\n \n * `Rust Analyzer: Status` shows some memory-usage statistics.\n \n@@ -167,7 +162,7 @@ There are also two VS Code commands which might be of interest:\n \n   ![demo](https://user-images.githubusercontent.com/36276403/78225773-6636a480-74d3-11ea-9d9f-1c9d42da03b0.png)\n \n-# Profiling\n+## Profiling\n \n We have a built-in hierarchical profiler, you can enable it by using `RA_PROFILE` env-var:\n \n@@ -195,7 +190,9 @@ $ cargo run --release -p rust-analyzer -- analysis-bench ../chalk/ --highlight .\n $ cargo run --release -p rust-analyzer -- analysis-bench ../chalk/ --complete ../chalk/chalk-engine/src/logic.rs:94:0\n ```\n \n-# Release Process\n+Look for `fn benchmark_xxx` tests for a quick way to reproduce performance problems.\n+\n+## Release Process\n \n Release process is handled by `release`, `dist` and `promote` xtasks, `release` being the main one.\n \n@@ -232,7 +229,7 @@ Make sure to remove the new changelog post created when running `cargo xtask rel\n We release \"nightly\" every night automatically and promote the latest nightly to \"stable\" manually, every week.\n We don't do \"patch\" releases, unless something truly egregious comes up.\n \n-# Permissions\n+## Permissions\n \n There are three sets of people with extra permissions:\n "}]}