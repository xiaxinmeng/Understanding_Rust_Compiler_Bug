{"sha": "2065ee9accc87a461897d06414195cfa3e92fb89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNjVlZTlhY2NjODdhNDYxODk3ZDA2NDE0MTk1Y2ZhM2U5MmZiODk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-20T20:18:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-26T22:34:07Z"}, "message": "metadata: Eliminate `FullProcMacro`\n\nFix caching of loaded proc macros", "tree": {"sha": "469d4cb2bfb8478ce3bf4bf5b79b744a963aa8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/469d4cb2bfb8478ce3bf4bf5b79b744a963aa8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2065ee9accc87a461897d06414195cfa3e92fb89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2065ee9accc87a461897d06414195cfa3e92fb89", "html_url": "https://github.com/rust-lang/rust/commit/2065ee9accc87a461897d06414195cfa3e92fb89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2065ee9accc87a461897d06414195cfa3e92fb89/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c62eaae42ebc0efe370848a142c2858ac7fffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c62eaae42ebc0efe370848a142c2858ac7fffc", "html_url": "https://github.com/rust-lang/rust/commit/52c62eaae42ebc0efe370848a142c2858ac7fffc"}], "stats": {"total": 78, "additions": 28, "deletions": 50}, "files": [{"sha": "5bf4067431f24a6b73a8e08ee4c2df3895377021", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=2065ee9accc87a461897d06414195cfa3e92fb89", "patch": "@@ -95,11 +95,6 @@ pub struct CrateMetadata {\n     pub raw_proc_macros: Option<&'static [ProcMacro]>,\n }\n \n-pub struct FullProcMacro {\n-    pub name: ast::Name,\n-    pub ext: Lrc<SyntaxExtension>\n-}\n-\n pub struct CStore {\n     metas: RwLock<IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n@@ -109,7 +104,7 @@ pub struct CStore {\n \n pub enum LoadedMacro {\n     MacroDef(ast::Item),\n-    ProcMacro(Lrc<SyntaxExtension>),\n+    ProcMacro(SyntaxExtension),\n }\n \n impl CStore {"}, {"sha": "5bfb315da473fa8b03bde89fda3cfc7d92e51d6d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=2065ee9accc87a461897d06414195cfa3e92fb89", "patch": "@@ -434,7 +434,7 @@ impl cstore::CStore {\n     pub fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n         let data = self.get_crate_data(id.krate);\n         if data.is_proc_macro_crate() {\n-            return LoadedMacro::ProcMacro(data.get_proc_macro(id.index, sess).ext);\n+            return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n         }\n \n         let def = data.get_macro(id.index);"}, {"sha": "c777b5ea409a4315f45d103d4464c71314fda646", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2065ee9accc87a461897d06414195cfa3e92fb89", "patch": "@@ -1,6 +1,6 @@\n // Decoding metadata from a single crate's metadata\n \n-use crate::cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule, FullProcMacro};\n+use crate::cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule};\n use crate::schema::*;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -512,26 +512,8 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(index).span.decode((self, sess))\n     }\n \n-\n-    pub fn get_proc_macro(&self, id: DefIndex, sess: &Session) -> FullProcMacro {\n-        if sess.opts.debugging_opts.dual_proc_macros {\n-            let host_lib = self.host_lib.as_ref().unwrap();\n-            self.load_proc_macro(\n-                &host_lib.metadata.get_root(),\n-                id,\n-                sess\n-            )\n-        } else {\n-            self.load_proc_macro(&self.root, id, sess)\n-        }\n-    }\n-\n-    fn load_proc_macro(&self, root: &CrateRoot<'_>,\n-                        id: DefIndex,\n-                        sess: &Session)\n-                        -> FullProcMacro {\n-        let raw_macro = self.raw_proc_macro(id);\n-        let (name, kind, helper_attrs) = match *raw_macro {\n+    crate fn load_proc_macro(&self, id: DefIndex, sess: &Session) -> SyntaxExtension {\n+        let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {\n             ProcMacro::CustomDerive { trait_name, attributes, client } => {\n                 let helper_attrs =\n                     attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n@@ -550,20 +532,21 @@ impl<'a, 'tcx> CrateMetadata {\n                 name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new()\n             )\n         };\n-        let name = Symbol::intern(name);\n-\n-        FullProcMacro {\n-            name,\n-            ext: Lrc::new(SyntaxExtension::new(\n-                &sess.parse_sess,\n-                kind,\n-                self.get_span(id, sess),\n-                helper_attrs,\n-                root.edition,\n-                name,\n-                &self.get_attributes(&self.entry(id), sess),\n-            )),\n-        }\n+        let edition = if sess.opts.debugging_opts.dual_proc_macros {\n+            self.host_lib.as_ref().unwrap().metadata.get_root().edition\n+        } else {\n+            self.root.edition\n+        };\n+\n+        SyntaxExtension::new(\n+            &sess.parse_sess,\n+            kind,\n+            self.get_span(id, sess),\n+            helper_attrs,\n+            edition,\n+            Symbol::intern(name),\n+            &self.get_attributes(&self.entry(id), sess),\n+        )\n     }\n \n     pub fn get_trait_def(&self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {"}, {"sha": "165a4c707bb6db54bf3e156fa719fd52ce9ae9ce", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2065ee9accc87a461897d06414195cfa3e92fb89", "patch": "@@ -150,12 +150,12 @@ impl<'a> Resolver<'a> {\n             return Some(ext.clone());\n         }\n \n-        let macro_def = match self.cstore.load_macro_untracked(def_id, &self.session) {\n-            LoadedMacro::MacroDef(macro_def) => macro_def,\n-            LoadedMacro::ProcMacro(ext) => return Some(ext),\n-        };\n+        let ext = Lrc::new(match self.cstore.load_macro_untracked(def_id, &self.session) {\n+            LoadedMacro::MacroDef(item) =>\n+                self.compile_macro(&item, self.cstore.crate_edition_untracked(def_id.krate)),\n+            LoadedMacro::ProcMacro(ext) => ext,\n+        });\n \n-        let ext = self.compile_macro(&macro_def, self.cstore.crate_edition_untracked(def_id.krate));\n         self.macro_map.insert(def_id, ext.clone());\n         Some(ext)\n     }\n@@ -1104,7 +1104,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = parent_scope.expansion;\n         let (ext, ident, span, is_legacy) = match &item.node {\n             ItemKind::MacroDef(def) => {\n-                let ext = self.r.compile_macro(item, self.r.session.edition());\n+                let ext = Lrc::new(self.r.compile_macro(item, self.r.session.edition()));\n                 (ext, item.ident, item.span, def.legacy)\n             }\n             ItemKind::Fn(..) => match Self::proc_macro_stub(item) {"}, {"sha": "cc78e928380a85a98dfc3662dd8c07bd43c4fc64", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2065ee9accc87a461897d06414195cfa3e92fb89/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2065ee9accc87a461897d06414195cfa3e92fb89", "patch": "@@ -800,7 +800,7 @@ impl<'a> Resolver<'a> {\n \n     /// Compile the macro into a `SyntaxExtension` and possibly replace it with a pre-defined\n     /// extension partially or entirely for built-in macros and legacy plugin macros.\n-    crate fn compile_macro(&mut self, item: &ast::Item, edition: Edition) -> Lrc<SyntaxExtension> {\n+    crate fn compile_macro(&mut self, item: &ast::Item, edition: Edition) -> SyntaxExtension {\n         let mut result = macro_rules::compile(\n             &self.session.parse_sess, self.session.features_untracked(), item, edition\n         );\n@@ -822,6 +822,6 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        Lrc::new(result)\n+        result\n     }\n }"}]}