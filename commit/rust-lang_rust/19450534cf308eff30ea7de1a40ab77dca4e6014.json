{"sha": "19450534cf308eff30ea7de1a40ab77dca4e6014", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDUwNTM0Y2YzMDhlZmYzMGVhN2RlMWE0MGFiNzdkY2E0ZTYwMTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T08:28:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T08:28:55Z"}, "message": "Cleanup hir diagnostics API", "tree": {"sha": "c2becab63418e6ffd88af4bfdd1b129b305cff6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2becab63418e6ffd88af4bfdd1b129b305cff6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19450534cf308eff30ea7de1a40ab77dca4e6014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19450534cf308eff30ea7de1a40ab77dca4e6014", "html_url": "https://github.com/rust-lang/rust/commit/19450534cf308eff30ea7de1a40ab77dca4e6014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19450534cf308eff30ea7de1a40ab77dca4e6014/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fdbf81181356854b692fe0407bac75aba6ea942", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdbf81181356854b692fe0407bac75aba6ea942", "html_url": "https://github.com/rust-lang/rust/commit/1fdbf81181356854b692fe0407bac75aba6ea942"}], "stats": {"total": 97, "additions": 49, "deletions": 48}, "files": [{"sha": "42c9ca189f208eab25b6c5023cb5d8728da8916a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=19450534cf308eff30ea7de1a40ab77dca4e6014", "patch": "@@ -24,7 +24,6 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef,\n-    diagnostics::{expr::ExprValidator, unsafe_check::UnsafeValidator},\n     display::{HirDisplayError, HirFormatter},\n     method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs,\n     TraitEnvironment, Ty, TyDefId, TypeCtor,\n@@ -678,13 +677,7 @@ impl Function {\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n-        let _p = profile(\"Function::diagnostics\");\n-        let infer = db.infer(self.id.into());\n-        infer.add_diagnostics(db, self.id, sink);\n-        let mut validator = ExprValidator::new(self.id, infer.clone(), sink);\n-        validator.validate_body(db);\n-        let mut validator = UnsafeValidator::new(self.id, infer, sink);\n-        validator.validate_body(db);\n+        hir_ty::diagnostics::validate_body(db, self.id.into(), sink)\n     }\n }\n "}, {"sha": "d9c2b1214f0eb7c242f9a0016dbe54c6bd8bdec3", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=19450534cf308eff30ea7de1a40ab77dca4e6014", "patch": "@@ -6,12 +6,25 @@ pub mod unsafe_check;\n use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n+use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n-pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm, path::Path};\n+pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm, path::Path, DefWithBodyId};\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n \n+use crate::db::HirDatabase;\n+\n+pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut DiagnosticSink<'_>) {\n+    let _p = profile(\"validate_body\");\n+    let infer = db.infer(owner);\n+    infer.add_diagnostics(db, owner, sink);\n+    let mut validator = expr::ExprValidator::new(owner, infer.clone(), sink);\n+    validator.validate_body(db);\n+    let mut validator = unsafe_check::UnsafeValidator::new(owner, infer, sink);\n+    validator.validate_body(db);\n+}\n+\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub file: HirFileId,"}, {"sha": "239be779fa18e69a05204ee3864116439149c965", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=19450534cf308eff30ea7de1a40ab77dca4e6014", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{path::path, resolver::HasResolver, AdtId, FunctionId};\n+use hir_def::{path::path, resolver::HasResolver, AdtId, DefWithBodyId};\n use hir_expand::diagnostics::DiagnosticSink;\n use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashSet;\n@@ -30,23 +30,23 @@ pub use hir_def::{\n     LocalFieldId, Lookup, VariantId,\n };\n \n-pub struct ExprValidator<'a, 'b: 'a> {\n-    func: FunctionId,\n+pub(super) struct ExprValidator<'a, 'b: 'a> {\n+    owner: DefWithBodyId,\n     infer: Arc<InferenceResult>,\n     sink: &'a mut DiagnosticSink<'b>,\n }\n \n impl<'a, 'b> ExprValidator<'a, 'b> {\n-    pub fn new(\n-        func: FunctionId,\n+    pub(super) fn new(\n+        owner: DefWithBodyId,\n         infer: Arc<InferenceResult>,\n         sink: &'a mut DiagnosticSink<'b>,\n     ) -> ExprValidator<'a, 'b> {\n-        ExprValidator { func, infer, sink }\n+        ExprValidator { owner, infer, sink }\n     }\n \n-    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let body = db.body(self.func.into());\n+    pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n+        let body = db.body(self.owner.into());\n \n         for (id, expr) in body.exprs.iter() {\n             if let Some((variant_def, missed_fields, true)) =\n@@ -96,7 +96,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n-        let (_, source_map) = db.body_with_source_map(self.func.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner.into());\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             let root = source_ptr.file_syntax(db.upcast());\n@@ -125,7 +125,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n-        let (_, source_map) = db.body_with_source_map(self.func.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner.into());\n \n         if let Ok(source_ptr) = source_map.pat_syntax(id) {\n             if let Some(expr) = source_ptr.value.as_ref().left() {\n@@ -181,7 +181,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let mut arg_count = args.len();\n \n         if arg_count != param_count {\n-            let (_, source_map) = db.body_with_source_map(self.func.into());\n+            let (_, source_map) = db.body_with_source_map(self.owner.into());\n             if let Ok(source_ptr) = source_map.expr_syntax(call_id) {\n                 if is_method_call {\n                     param_count -= 1;\n@@ -208,7 +208,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         infer: Arc<InferenceResult>,\n     ) {\n         let (body, source_map): (Arc<Body>, Arc<BodySourceMap>) =\n-            db.body_with_source_map(self.func.into());\n+            db.body_with_source_map(self.owner.into());\n \n         let match_expr_ty = match infer.type_of_expr.get(match_expr) {\n             Some(ty) => ty,\n@@ -289,7 +289,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         let core_result_path = path![core::result::Result];\n \n-        let resolver = self.func.resolver(db.upcast());\n+        let resolver = self.owner.resolver(db.upcast());\n         let core_result_enum = match resolver.resolve_known_enum(db.upcast(), &core_result_path) {\n             Some(it) => it,\n             _ => return,\n@@ -304,7 +304,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         if params.len() == 2 && params[0] == mismatch.actual {\n-            let (_, source_map) = db.body_with_source_map(self.func.into());\n+            let (_, source_map) = db.body_with_source_map(self.owner.into());\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 self.sink"}, {"sha": "b8ff95ee1ebac111111a6f4de6bb06defa5b2444", "filename": "crates/ra_hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=19450534cf308eff30ea7de1a40ab77dca4e6014", "patch": "@@ -6,7 +6,7 @@ use std::sync::Arc;\n use hir_def::{\n     body::Body,\n     expr::{Expr, ExprId, UnaryOp},\n-    DefWithBodyId, FunctionId,\n+    DefWithBodyId,\n };\n use hir_expand::diagnostics::DiagnosticSink;\n \n@@ -15,26 +15,29 @@ use crate::{\n     InferenceResult, Ty, TypeCtor,\n };\n \n-pub struct UnsafeValidator<'a, 'b: 'a> {\n-    func: FunctionId,\n+pub(super) struct UnsafeValidator<'a, 'b: 'a> {\n+    owner: DefWithBodyId,\n     infer: Arc<InferenceResult>,\n     sink: &'a mut DiagnosticSink<'b>,\n }\n \n impl<'a, 'b> UnsafeValidator<'a, 'b> {\n-    pub fn new(\n-        func: FunctionId,\n+    pub(super) fn new(\n+        owner: DefWithBodyId,\n         infer: Arc<InferenceResult>,\n         sink: &'a mut DiagnosticSink<'b>,\n     ) -> UnsafeValidator<'a, 'b> {\n-        UnsafeValidator { func, infer, sink }\n+        UnsafeValidator { owner, infer, sink }\n     }\n \n-    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let def = self.func.into();\n+    pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n+        let def = self.owner.into();\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n-        let func_data = db.function_data(self.func);\n-        if func_data.is_unsafe\n+        let is_unsafe = match self.owner {\n+            DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe,\n+            DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n+        };\n+        if is_unsafe\n             || unsafe_expressions\n                 .iter()\n                 .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)"}, {"sha": "28f32a0a4de302310819b22748999fe0baaed6be", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=19450534cf308eff30ea7de1a40ab77dca4e6014", "patch": "@@ -168,7 +168,7 @@ impl InferenceResult {\n     pub fn add_diagnostics(\n         &self,\n         db: &dyn HirDatabase,\n-        owner: FunctionId,\n+        owner: DefWithBodyId,\n         sink: &mut DiagnosticSink,\n     ) {\n         self.diagnostics.iter().for_each(|it| it.add_to(db, owner, sink))\n@@ -760,7 +760,7 @@ impl std::ops::BitOrAssign for Diverges {\n }\n \n mod diagnostics {\n-    use hir_def::{expr::ExprId, FunctionId};\n+    use hir_def::{expr::ExprId, DefWithBodyId};\n     use hir_expand::diagnostics::DiagnosticSink;\n \n     use crate::{\n@@ -778,17 +778,17 @@ mod diagnostics {\n         pub(super) fn add_to(\n             &self,\n             db: &dyn HirDatabase,\n-            owner: FunctionId,\n+            owner: DefWithBodyId,\n             sink: &mut DiagnosticSink,\n         ) {\n             match self {\n                 InferenceDiagnostic::NoSuchField { expr, field } => {\n-                    let (_, source_map) = db.body_with_source_map(owner.into());\n+                    let (_, source_map) = db.body_with_source_map(owner);\n                     let field = source_map.field_syntax(*expr, *field);\n                     sink.push(NoSuchField { file: field.file_id, field: field.value })\n                 }\n                 InferenceDiagnostic::BreakOutsideOfLoop { expr } => {\n-                    let (_, source_map) = db.body_with_source_map(owner.into());\n+                    let (_, source_map) = db.body_with_source_map(owner);\n                     let ptr = source_map\n                         .expr_syntax(*expr)\n                         .expect(\"break outside of loop in synthetic syntax\");"}, {"sha": "daf2b909eb14bfde107b8860a42c080d1290b2c3", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19450534cf308eff30ea7de1a40ab77dca4e6014/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=19450534cf308eff30ea7de1a40ab77dca4e6014", "patch": "@@ -13,10 +13,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::format_to;\n use test_utils::extract_annotations;\n \n-use crate::{\n-    db::HirDatabase,\n-    diagnostics::{expr::ExprValidator, unsafe_check::UnsafeValidator, Diagnostic},\n-};\n+use crate::diagnostics::{validate_body, Diagnostic};\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -118,13 +115,8 @@ impl TestDB {\n             }\n \n             for f in fns {\n-                let infer = self.infer(f.into());\n                 let mut sink = DiagnosticSink::new(&mut cb);\n-                infer.add_diagnostics(self, f, &mut sink);\n-                let mut validator = ExprValidator::new(f, infer.clone(), &mut sink);\n-                validator.validate_body(self);\n-                let mut validator = UnsafeValidator::new(f, infer, &mut sink);\n-                validator.validate_body(self);\n+                validate_body(self, f.into(), &mut sink);\n             }\n         }\n     }"}]}