{"sha": "2a028c5ab8363d9263d0cda09d6ab884c5b73978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMDI4YzVhYjgzNjNkOTI2M2QwY2RhMDlkNmFiODg0YzViNzM5Nzg=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-24T22:01:43Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:57Z"}, "message": "Convert newtype \"dereference\" to trans::adt.\n\nNote that in the ByValue case (which can't happen? yet?) we're still\neffectively bitcasting, I think.  So this change adds a way to assert\nthat that's safe.\n\nNote also, for future reference, that LLVM's instcombine pass will turn\na bitcast into a GEP(0, 0, ...) if possible.", "tree": {"sha": "cb05d9a5667c60c4f15f429d5dbef536551e0fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb05d9a5667c60c4f15f429d5dbef536551e0fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a028c5ab8363d9263d0cda09d6ab884c5b73978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a028c5ab8363d9263d0cda09d6ab884c5b73978", "html_url": "https://github.com/rust-lang/rust/commit/2a028c5ab8363d9263d0cda09d6ab884c5b73978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a028c5ab8363d9263d0cda09d6ab884c5b73978/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80844f993d8964ca89630115c5c0f7e8beb315cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/80844f993d8964ca89630115c5c0f7e8beb315cb", "html_url": "https://github.com/rust-lang/rust/commit/80844f993d8964ca89630115c5c0f7e8beb315cb"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "7e457fffd597b1725768c39cd850fddfbf49c053", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a028c5ab8363d9263d0cda09d6ab884c5b73978/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a028c5ab8363d9263d0cda09d6ab884c5b73978/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=2a028c5ab8363d9263d0cda09d6ab884c5b73978", "patch": "@@ -378,3 +378,12 @@ fn const_struct_field(ccx: @CrateContext, val: ValueRef, ix: uint)\n         real_ix = real_ix + 1;\n     }\n }\n+\n+/// Is it safe to bitcast a value to the one field of its one variant?\n+pub fn is_newtypeish(r: &Repr) -> bool {\n+    match *r {\n+        Univariant(ref st, DtorAbsent)\n+        | Univariant(ref st, NoDtor) => st.fields.len() == 1,\n+        _ => false\n+    }\n+}"}, {"sha": "79fd1dde5411c56e94ca686c03eb4c14327dffe7", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a028c5ab8363d9263d0cda09d6ab884c5b73978/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a028c5ab8363d9263d0cda09d6ab884c5b73978/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=2a028c5ab8363d9263d0cda09d6ab884c5b73978", "patch": "@@ -90,6 +90,7 @@ use core::prelude::*;\n use lib;\n use lib::llvm::ValueRef;\n use middle::borrowck::{RootInfo, root_map_key};\n+use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n@@ -677,15 +678,17 @@ pub impl Datum {\n                     return (None, bcx);\n                 }\n \n+                let repr = adt::represent_type(ccx, self.ty);\n+                assert adt::is_newtypeish(&repr);\n                 let ty = ty::subst(ccx.tcx, substs, variants[0].args[0]);\n                 return match self.mode {\n                     ByRef => {\n                         // Recast lv.val as a pointer to the newtype\n                         // rather than a ptr to the enum type.\n-                        let llty = T_ptr(type_of::type_of(ccx, ty));\n                         (\n                             Some(Datum {\n-                                val: PointerCast(bcx, self.val, llty),\n+                                val: adt::trans_GEP(bcx, &repr, self.val,\n+                                                    0, 0),\n                                 ty: ty,\n                                 mode: ByRef,\n                                 source: ZeroMem\n@@ -715,6 +718,8 @@ pub impl Datum {\n                     return (None, bcx);\n                 }\n \n+                let repr = adt::represent_type(ccx, self.ty);\n+                assert adt::is_newtypeish(&repr);\n                 let ty = fields[0].mt.ty;\n                 return match self.mode {\n                     ByRef => {\n@@ -724,7 +729,8 @@ pub impl Datum {\n                         // destructors.\n                         (\n                             Some(Datum {\n-                                val: GEPi(bcx, self.val, [0, 0, 0]),\n+                                val: adt::trans_GEP(bcx, &repr, self.val,\n+                                                    0, 0),\n                                 ty: ty,\n                                 mode: ByRef,\n                                 source: ZeroMem"}]}