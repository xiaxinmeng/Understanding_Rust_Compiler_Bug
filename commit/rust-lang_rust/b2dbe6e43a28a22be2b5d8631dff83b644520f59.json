{"sha": "b2dbe6e43a28a22be2b5d8631dff83b644520f59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGJlNmU0M2EyOGEyMmJlMmI1ZDg2MzFkZmY4M2I2NDQ1MjBmNTk=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2020-12-30T17:23:00Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2021-01-07T19:01:33Z"}, "message": "Add fix to wrap return expression in Some", "tree": {"sha": "f68a822821336800792f80f3d4b1862c437956e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f68a822821336800792f80f3d4b1862c437956e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2dbe6e43a28a22be2b5d8631dff83b644520f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dbe6e43a28a22be2b5d8631dff83b644520f59", "html_url": "https://github.com/rust-lang/rust/commit/b2dbe6e43a28a22be2b5d8631dff83b644520f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2dbe6e43a28a22be2b5d8631dff83b644520f59/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "981a0d708ec352969f9ca075a3e0e50c6da48197", "url": "https://api.github.com/repos/rust-lang/rust/commits/981a0d708ec352969f9ca075a3e0e50c6da48197", "html_url": "https://github.com/rust-lang/rust/commit/981a0d708ec352969f9ca075a3e0e50c6da48197"}], "stats": {"total": 108, "additions": 87, "deletions": 21}, "files": [{"sha": "447faa04f18968f44bb216647ccd7292920b9a88", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -4,6 +4,6 @@ pub use hir_expand::diagnostics::{\n     Diagnostic, DiagnosticCode, DiagnosticSink, DiagnosticSinkBuilder,\n };\n pub use hir_ty::diagnostics::{\n-    IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,\n+    IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n     NoSuchField, RemoveThisSemicolon,\n };"}, {"sha": "3dd7c3cbba2628a9938642d0ca4d88ea7b3279d7", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -305,6 +305,7 @@ pub use hir_expand::name as __name;\n macro_rules! __known_path {\n     (core::iter::IntoIterator) => {};\n     (core::result::Result) => {};\n+    (core::option::Option) => {};\n     (core::ops::Range) => {};\n     (core::ops::RangeFrom) => {};\n     (core::ops::RangeFull) => {};"}, {"sha": "95d853b6da6fe333fb694582986a864b878c7c61", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -164,6 +164,7 @@ pub mod known {\n         future,\n         result,\n         boxed,\n+        option,\n         // Components of known path (type name)\n         Iterator,\n         IntoIterator,\n@@ -172,6 +173,7 @@ pub mod known {\n         Ok,\n         Future,\n         Result,\n+        Option,\n         Output,\n         Target,\n         Box,"}, {"sha": "c67a289f28328872c168eb088b9161a07fb677eb", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -186,9 +186,10 @@ impl Diagnostic for MissingMatchArms {\n     }\n }\n \n-// Diagnostic: missing-ok-in-tail-expr\n+// Diagnostic: missing-ok-or-some-in-tail-expr\n //\n-// This diagnostic is triggered if block that should return `Result` returns a value not wrapped in `Ok`.\n+// This diagnostic is triggered if a block that should return `Result` returns a value not wrapped in `Ok`,\n+// or if a block that should return `Option` returns a value not wrapped in `Some`.\n //\n // Example:\n //\n@@ -198,17 +199,19 @@ impl Diagnostic for MissingMatchArms {\n // }\n // ```\n #[derive(Debug)]\n-pub struct MissingOkInTailExpr {\n+pub struct MissingOkOrSomeInTailExpr {\n     pub file: HirFileId,\n     pub expr: AstPtr<ast::Expr>,\n+    // `Some` or `Ok` depending on whether the return type is Result or Option\n+    pub required: String,\n }\n \n-impl Diagnostic for MissingOkInTailExpr {\n+impl Diagnostic for MissingOkOrSomeInTailExpr {\n     fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"missing-ok-in-tail-expr\")\n+        DiagnosticCode(\"missing-ok-or-some-in-tail-expr\")\n     }\n     fn message(&self) -> String {\n-        \"wrap return expression in Ok\".to_string()\n+        format!(\"wrap return expression in {}\", self.required)\n     }\n     fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }"}, {"sha": "455b0d4aaa3044a56712ae41718d1946fc442b6f", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::{\n         match_check::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n-        MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields,\n+        MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr, MissingPatFields,\n         RemoveThisSemicolon,\n     },\n     utils::variant_data,\n@@ -306,27 +306,37 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         let core_result_path = path![core::result::Result];\n+        let core_option_path = path![core::option::Option];\n \n         let resolver = self.owner.resolver(db.upcast());\n         let core_result_enum = match resolver.resolve_known_enum(db.upcast(), &core_result_path) {\n             Some(it) => it,\n             _ => return,\n         };\n+        let core_option_enum = match resolver.resolve_known_enum(db.upcast(), &core_option_path) {\n+            Some(it) => it,\n+            _ => return,\n+        };\n \n         let core_result_ctor = TypeCtor::Adt(AdtId::EnumId(core_result_enum));\n-        let params = match &mismatch.expected {\n+        let core_option_ctor = TypeCtor::Adt(AdtId::EnumId(core_option_enum));\n+\n+        let (params, required) = match &mismatch.expected {\n             Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &core_result_ctor => {\n-                parameters\n-            }\n+                (parameters, \"Ok\".to_string())\n+            },\n+            Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &core_option_ctor => {\n+                (parameters, \"Some\".to_string())\n+            },\n             _ => return,\n         };\n \n-        if params.len() == 2 && params[0] == mismatch.actual {\n+        if params.len() > 0 && params[0] == mismatch.actual {\n             let (_, source_map) = db.body_with_source_map(self.owner.into());\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 self.sink\n-                    .push(MissingOkInTailExpr { file: source_ptr.file_id, expr: source_ptr.value });\n+                    .push(MissingOkOrSomeInTailExpr { file: source_ptr.file_id, expr: source_ptr.value, required });\n             }\n         }\n     }"}, {"sha": "0799999e4f1e7854db3a13315aa64ff8fe52d818", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -125,7 +125,7 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n-        .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n+        .on::<hir::diagnostics::MissingOkOrSomeInTailExpr, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n@@ -304,6 +304,40 @@ mod tests {\n         expect.assert_debug_eq(&diagnostics)\n     }\n \n+    #[test]\n+    fn test_wrap_return_type_option() {\n+        check_fix(\n+            r#\"\n+//- /main.rs crate:main deps:core\n+use core::option::Option::{self, Some, None};\n+\n+fn div(x: i32, y: i32) -> Option<i32> {\n+    if y == 0 {\n+        return None;\n+    }\n+    x / y<|>\n+}\n+//- /core/lib.rs crate:core\n+pub mod result {\n+    pub enum Result<T, E> { Ok(T), Err(E) }\n+}\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n+\"#,\n+            r#\"\n+use core::option::Option::{self, Some, None};\n+\n+fn div(x: i32, y: i32) -> Option<i32> {\n+    if y == 0 {\n+        return None;\n+    }\n+    Some(x / y)\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_wrap_return_type() {\n         check_fix(\n@@ -321,6 +355,9 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n \"#,\n             r#\"\n use core::result::Result::{self, Ok, Err};\n@@ -352,6 +389,9 @@ fn div<T>(x: T) -> Result<T, i32> {\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n \"#,\n             r#\"\n use core::result::Result::{self, Ok, Err};\n@@ -385,6 +425,9 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n \"#,\n             r#\"\n use core::result::Result::{self, Ok, Err};\n@@ -414,12 +457,15 @@ fn foo() -> Result<(), i32> { 0 }\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n \"#,\n         );\n     }\n \n     #[test]\n-    fn test_wrap_return_type_not_applicable_when_return_type_is_not_result() {\n+    fn test_wrap_return_type_not_applicable_when_return_type_is_not_result_or_option() {\n         check_no_diagnostics(\n             r#\"\n //- /main.rs crate:main deps:core\n@@ -433,6 +479,9 @@ fn foo() -> SomeOtherEnum { 0 }\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n \"#,\n         );\n     }"}, {"sha": "50c18d02b2ae12df546895ebc84305a6bc20cf35", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dbe6e43a28a22be2b5d8631dff83b644520f59/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=b2dbe6e43a28a22be2b5d8631dff83b644520f59", "patch": "@@ -3,7 +3,7 @@\n use hir::{\n     db::AstDatabase,\n     diagnostics::{\n-        Diagnostic, IncorrectCase, MissingFields, MissingOkInTailExpr, NoSuchField,\n+        Diagnostic, IncorrectCase, MissingFields, MissingOkOrSomeInTailExpr, NoSuchField,\n         RemoveThisSemicolon, UnresolvedModule,\n     },\n     HasSource, HirDisplay, InFile, Semantics, VariantDef,\n@@ -94,15 +94,16 @@ impl DiagnosticWithFix for MissingFields {\n     }\n }\n \n-impl DiagnosticWithFix for MissingOkInTailExpr {\n+impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n     fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let tail_expr = self.expr.to_node(&root);\n         let tail_expr_range = tail_expr.syntax().text_range();\n-        let edit = TextEdit::replace(tail_expr_range, format!(\"Ok({})\", tail_expr.syntax()));\n-        let source_change =\n-            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n-        Some(Fix::new(\"Wrap with ok\", source_change, tail_expr_range))\n+        let replacement = format!(\"{}({})\", self.required, tail_expr.syntax());\n+        let edit = TextEdit::replace(tail_expr_range, replacement);\n+        let source_change = SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+        let name = if self.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n+        Some(Fix::new(name, source_change, tail_expr_range))\n     }\n }\n "}]}