{"sha": "62f23c2b0b66fdda31ff03cc688d8baa5759cec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZjIzYzJiMGI2NmZkZGEzMWZmMDNjYzY4OGQ4YmFhNTc1OWNlYzA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:09:29Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:07:37Z"}, "message": "Add Const generic param to ty\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "4e22f0f24a00fc01bbac119bcba7b52b8ff41017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e22f0f24a00fc01bbac119bcba7b52b8ff41017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f23c2b0b66fdda31ff03cc688d8baa5759cec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f23c2b0b66fdda31ff03cc688d8baa5759cec0", "html_url": "https://github.com/rust-lang/rust/commit/62f23c2b0b66fdda31ff03cc688d8baa5759cec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f23c2b0b66fdda31ff03cc688d8baa5759cec0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "html_url": "https://github.com/rust-lang/rust/commit/f22dca0a1bef4141e75326caacc3cd59f3d5be8e"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "bd3dd78c9bb6782a7aa27c19d5cd5ebd59fd7017", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/62f23c2b0b66fdda31ff03cc688d8baa5759cec0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f23c2b0b66fdda31ff03cc688d8baa5759cec0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=62f23c2b0b66fdda31ff03cc688d8baa5759cec0", "patch": "@@ -837,7 +837,8 @@ pub enum GenericParamDefKind {\n         has_default: bool,\n         object_lifetime_default: ObjectLifetimeDefault,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n-    }\n+    },\n+    Const,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n@@ -880,6 +881,7 @@ impl GenericParamDef {\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n+    pub consts: usize,\n }\n \n /// Information about the formal type/lifetime parameters associated\n@@ -915,6 +917,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n                 GenericParamDefKind::Type { .. } => own_counts.types += 1,\n+                GenericParamDefKind::Const => own_counts.consts += 1,\n             };\n         }\n \n@@ -924,7 +927,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type { .. } => return true,\n+                GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => return true,\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }\n@@ -944,7 +947,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n-                ty::GenericParamDefKind::Lifetime => param,\n+                GenericParamDefKind::Lifetime => param,\n                 _ => bug!(\"expected lifetime parameter, but found another generic parameter\")\n             }\n         } else {\n@@ -961,14 +964,31 @@ impl<'a, 'gcx, 'tcx> Generics {\n         if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n-                ty::GenericParamDefKind::Type {..} => param,\n+                GenericParamDefKind::Type { .. } => param,\n                 _ => bug!(\"expected type parameter, but found another generic parameter\")\n             }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count > 0 but no parent?\"))\n                .type_param(param, tcx)\n         }\n     }\n+\n+    /// Returns the `ConstParameterDef` associated with this `ParamConst`.\n+    pub fn const_param(&'tcx self,\n+                       param: &ParamConst,\n+                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n+                       -> &GenericParamDef {\n+        if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n+            let param = &self.params[index as usize];\n+            match param.kind {\n+                GenericParamDefKind::Const => param,\n+                _ => bug!(\"expected const parameter, but found another generic parameter\")\n+            }\n+        } else {\n+            tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n+                .const_param(param, tcx)\n+        }\n+    }\n }\n \n /// Bounds on generics."}]}