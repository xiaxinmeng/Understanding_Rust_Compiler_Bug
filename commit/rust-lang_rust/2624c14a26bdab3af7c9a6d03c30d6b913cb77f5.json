{"sha": "2624c14a26bdab3af7c9a6d03c30d6b913cb77f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjRjMTRhMjZiZGFiM2FmN2M5YTZkMDNjMzBkNmI5MTNjYjc3ZjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-08T13:52:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:49:24Z"}, "message": "extract the handling of region constraints from queries", "tree": {"sha": "7ab923d513915dc1c131f239b777f23e2ac08432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab923d513915dc1c131f239b777f23e2ac08432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2624c14a26bdab3af7c9a6d03c30d6b913cb77f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2624c14a26bdab3af7c9a6d03c30d6b913cb77f5", "html_url": "https://github.com/rust-lang/rust/commit/2624c14a26bdab3af7c9a6d03c30d6b913cb77f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2624c14a26bdab3af7c9a6d03c30d6b913cb77f5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bebd3ff6666d3e3f9bf458c5fab6c71c038db54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bebd3ff6666d3e3f9bf458c5fab6c71c038db54f", "html_url": "https://github.com/rust-lang/rust/commit/bebd3ff6666d3e3f9bf458c5fab6c71c038db54f"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "88d5d10d3c2b94c316bfe729300745d1a1358387", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2624c14a26bdab3af7c9a6d03c30d6b913cb77f5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2624c14a26bdab3af7c9a6d03c30d6b913cb77f5/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=2624c14a26bdab3af7c9a6d03c30d6b913cb77f5", "patch": "@@ -22,15 +22,16 @@ use infer::canonical::{\n     Canonical, CanonicalVarValues, Canonicalize, Certainty, QueryRegionConstraint, QueryResult,\n };\n use infer::region_constraints::{Constraint, RegionConstraintData};\n-use infer::{InferCtxt, InferOk, InferResult};\n+use infer::{InferCtxt, InferOk, InferResult, RegionObligation};\n use rustc_data_structures::indexed_vec::Idx;\n use std::fmt::Debug;\n+use syntax::ast;\n use traits::query::NoSolution;\n use traits::{FulfillmentContext, TraitEngine};\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n-use ty::{self, CanonicalVar};\n+use ty::{self, CanonicalVar, TyCtxt};\n \n use rustc_data_structures::indexed_vec::IndexVec;\n \n@@ -120,45 +121,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         debug!(\"ambig_errors = {:#?}\", ambig_errors);\n \n         let region_obligations = self.take_registered_region_obligations();\n-\n         let region_constraints = self.with_region_constraints(|region_constraints| {\n-            let RegionConstraintData {\n-                constraints,\n-                verifys,\n-                givens,\n-            } = region_constraints;\n-\n-            assert!(verifys.is_empty());\n-            assert!(givens.is_empty());\n-\n-            let mut outlives: Vec<_> = constraints\n-            .into_iter()\n-            .map(|(k, _)| match *k {\n-                // Swap regions because we are going from sub (<=) to outlives\n-                // (>=).\n-                Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n-                    tcx.mk_region(ty::ReVar(v2)).into(),\n-                    tcx.mk_region(ty::ReVar(v1)),\n-                ),\n-                Constraint::VarSubReg(v1, r2) => {\n-                    ty::OutlivesPredicate(r2.into(), tcx.mk_region(ty::ReVar(v1)))\n-                }\n-                Constraint::RegSubVar(r1, v2) => {\n-                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n-                }\n-                Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n-            })\n-            .map(ty::Binder::dummy) // no bound regions in the code above\n-            .collect();\n-\n-            outlives.extend(\n-                region_obligations\n-                    .into_iter()\n-                    .map(|(_, r_o)| ty::OutlivesPredicate(r_o.sup_type.into(), r_o.sub_region))\n-                    .map(ty::Binder::dummy), // no bound regions in the code above\n-            );\n-\n-            outlives\n+            make_query_outlives(tcx, region_obligations, region_constraints)\n         });\n \n         let certainty = if ambig_errors.is_empty() {\n@@ -358,3 +322,49 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         })\n     }\n }\n+\n+/// Given the region obligations and constraints scraped from the infcx,\n+/// creates query region constraints.\n+fn make_query_outlives<'tcx>(\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n+    region_obligations: Vec<(ast::NodeId, RegionObligation<'tcx>)>,\n+    region_constraints: &RegionConstraintData<'tcx>,\n+) -> Vec<QueryRegionConstraint<'tcx>> {\n+    let RegionConstraintData {\n+        constraints,\n+        verifys,\n+        givens,\n+    } = region_constraints;\n+\n+    assert!(verifys.is_empty());\n+    assert!(givens.is_empty());\n+\n+    let mut outlives: Vec<_> = constraints\n+            .into_iter()\n+            .map(|(k, _)| match *k {\n+                // Swap regions because we are going from sub (<=) to outlives\n+                // (>=).\n+                Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n+                    tcx.mk_region(ty::ReVar(v2)).into(),\n+                    tcx.mk_region(ty::ReVar(v1)),\n+                ),\n+                Constraint::VarSubReg(v1, r2) => {\n+                    ty::OutlivesPredicate(r2.into(), tcx.mk_region(ty::ReVar(v1)))\n+                }\n+                Constraint::RegSubVar(r1, v2) => {\n+                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n+                }\n+                Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n+            })\n+            .map(ty::Binder::dummy) // no bound regions in the code above\n+            .collect();\n+\n+    outlives.extend(\n+        region_obligations\n+            .into_iter()\n+            .map(|(_, r_o)| ty::OutlivesPredicate(r_o.sup_type.into(), r_o.sub_region))\n+            .map(ty::Binder::dummy), // no bound regions in the code above\n+    );\n+\n+    outlives\n+}"}]}