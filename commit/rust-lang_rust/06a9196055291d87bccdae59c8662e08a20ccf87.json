{"sha": "06a9196055291d87bccdae59c8662e08a20ccf87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YTkxOTYwNTUyOTFkODdiY2NkYWU1OWM4NjYyZTA4YTIwY2NmODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T12:35:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T12:35:43Z"}, "message": "Rollup merge of #59408 - euclio:compiletest-normalization, r=oli-obk\n\ncompiletest: make path normalization smarter\n\nFixes #59109.", "tree": {"sha": "eec5d352cc88be8363a1a9c6ef05e61ba9118765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eec5d352cc88be8363a1a9c6ef05e61ba9118765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a9196055291d87bccdae59c8662e08a20ccf87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnL+fCRBK7hj4Ov3rIwAAdHIIAG/bIWQksry21y4CqzojJc4N\npGSx8o1G9pP/TpbDAtCqZitYHLh2PEc3UWbTfBZgS+Dyru+JqkSYtNw3h5n8tOwC\nkJ0YX8kKJfSNNlulcQmYniCtmx0xXjDRbNgLUogrc7e1S0xU6eQ24MFdxDDamXYl\nvqFqRR2Kxv9kD/hlL0mcUmaWeby/bERbxJ8wmHlfHXez9ZM9gsFzUJ9kIaxsk86Y\nQRZHXyL72wgggE+RTcBqf4G/l11TNrTHHiguBwPpRhIYr3LF/n/ugiO6Fso0DAoM\nBjHZPmDq5bh71n1bz7X5dbU0Vn8+nPXojJvkKwQwRAYwAS6nuTZU+hGuvJccAx0=\n=HApY\n-----END PGP SIGNATURE-----\n", "payload": "tree eec5d352cc88be8363a1a9c6ef05e61ba9118765\nparent b75b1655895e69f074936b73394a72e98aa067b9\nparent 695dfe7dff89b986d1a5eb551633189338a0af6e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553776543 +0100\ncommitter GitHub <noreply@github.com> 1553776543 +0100\n\nRollup merge of #59408 - euclio:compiletest-normalization, r=oli-obk\n\ncompiletest: make path normalization smarter\n\nFixes #59109.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a9196055291d87bccdae59c8662e08a20ccf87", "html_url": "https://github.com/rust-lang/rust/commit/06a9196055291d87bccdae59c8662e08a20ccf87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a9196055291d87bccdae59c8662e08a20ccf87/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75b1655895e69f074936b73394a72e98aa067b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b1655895e69f074936b73394a72e98aa067b9", "html_url": "https://github.com/rust-lang/rust/commit/b75b1655895e69f074936b73394a72e98aa067b9"}, {"sha": "695dfe7dff89b986d1a5eb551633189338a0af6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/695dfe7dff89b986d1a5eb551633189338a0af6e", "html_url": "https://github.com/rust-lang/rust/commit/695dfe7dff89b986d1a5eb551633189338a0af6e"}], "stats": {"total": 401, "additions": 247, "deletions": 154}, "files": [{"sha": "1a120dcb18654c0c321f99dfa5adcd491a2d710a", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "cebb14cba7c11b96d70648c3e43dff35159ae02b", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "7ee9ca47923954780e0e6d0887a6bd915a642acb", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "8ccc04a4c0bcd92a13f6ffaeebbe6f337351f490", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -5,29 +5,29 @@ LL | /// [error]\n    |      ^^^^^ cannot be resolved, ignoring\n    |\n    = note: #[warn(intra_doc_link_resolution_failure)] on by default\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error1]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning-crlf.rs:12:11\n    |\n LL | /// docs [error1]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error2]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning-crlf.rs:14:11\n    |\n LL | /// docs [error2]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning-crlf.rs:21:20\n    |\n LL |  * It also has an [error].\n    |                    ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n "}, {"sha": "1eec3c57b68ded3f7de10d5a2bb7f228c00b1829", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -5,71 +5,71 @@ LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                       ^^^^^^^^ cannot be resolved, ignoring\n    |\n    = note: #[warn(intra_doc_link_resolution_failure)] on by default\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Bar::foo]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:3:35\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                                   ^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Uniooon::X]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:4:13\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n    |             ^^^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Qux::Z]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:4:30\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n    |                              ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Uniooon::X]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:6:14\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |              ^^^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Qux::Z]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:6:31\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |                               ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Qux:Y]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:8:13\n    |\n LL |        /// [Qux:Y]\n    |             ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:51:30\n    |\n LL |  * time to introduce a link [error]*/\n    |                              ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:57:30\n    |\n LL |  * time to introduce a link [error]\n    |                              ^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:61:1\n@@ -81,19 +81,19 @@ LL | #[doc = \"single line [error]\"]\n            \n            single line [error]\n                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:64:1\n    |\n-LL | #[doc = \"single line with /\"escaping/\" [error]\"]\n+LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the link appears in this line:\n            \n            single line with \"escaping\" [error]\n                                         ^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:67:1\n@@ -107,72 +107,72 @@ LL | | /// [error]\n            \n            [error]\n             ^^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error1]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:73:11\n    |\n LL | /// docs [error1]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error2]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:75:11\n    |\n LL | /// docs [error2]\n    |           ^^^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarA]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:14:10\n    |\n LL | /// bar [BarA] bar\n    |          ^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarB]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:20:9\n    |\n LL |  * bar [BarB] bar\n    |         ^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarC]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:27:6\n    |\n LL | bar [BarC] bar\n    |      ^^^^ cannot be resolved, ignoring\n    |\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarD]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:38:1\n    |\n-LL | #[doc = \"Foo/nbar [BarD] bar/nbaz\"]\n+LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the link appears in this line:\n            \n            bar [BarD] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[BarF]` cannot be resolved, ignoring it...\n   --> $DIR/intra-links-warning.rs:43:9\n    |\n LL |         #[doc = $f]\n    |         ^^^^^^^^^^^\n ...\n-LL | f!(\"Foo/nbar [BarF] bar/nbaz\");\n+LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n    | ------------------------------- in this macro invocation\n    |\n    = note: the link appears in this line:\n            \n            bar [BarF] bar\n                 ^^^^\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n "}, {"sha": "b4ed747b44c817615aac7f67b384f5c8458603be", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -3,11 +3,11 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```\n    |  _____^\n-LL | | /// /__________pkt->size___________/          /_result->size_/ /__pkt->size__/\n+LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -35,11 +35,11 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```\n    |  _____^\n-LL | | /// /_\n+LL | | /// \\_\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -50,21 +50,21 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```rust\n    |  _____^\n-LL | | /// /_\n+LL | | /// \\_\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:41:9\n    |\n LL |   ///     code with bad syntax\n    |  _________^\n-LL | | ///     /_\n+LL | | ///     \\_\n    | |__________^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:55:9\n@@ -79,17 +79,17 @@ warning: could not parse code block as Rust code\n    |\n LL |   /// ```edition2018\n    |  _____^\n-LL | | /// /_\n+LL | | /// \\_\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: unknown start of token: /\n+   = note: error from rustc: unknown start of token: \\\n \n warning: doc comment contains an invalid Rust code block\n   --> $DIR/invalid-syntax.rs:63:1\n    |\n LL | / #[doc = \"```\"]\n-LL | | /// /_\n+LL | | /// \\_\n LL | | #[doc = \"```\"]\n    | |______________^\n    |"}, {"sha": "24db3453ec50983f66866b8a5b74a3c0729f0a16", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -27,7 +27,7 @@ note: lint level defined here\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: #[deny(intra_doc_link_resolution_failure)] implied by #[deny(rustdoc)]\n-   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+   = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: Missing code example in this documentation\n   --> $DIR/lint-group.rs:16:1"}, {"sha": "f0c9b8988903bcb33caab2111f3e223d2a82baa1", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -2,7 +2,7 @@ error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:4:23\n    |\n LL |     const XYZ: char = 0x1F888 as char;\n-   |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n+   |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'\\u{1F888}'`\n    |\n note: lint level defined here\n   --> $DIR/cast_char.rs:1:9\n@@ -14,7 +14,7 @@ error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:6:22\n    |\n LL |     const XY: char = 129160 as char;\n-   |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n+   |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'\\u{1F888}'`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a65825c7b6c65b6b7cc6f021894c1a44cf7779b", "filename": "src/test/ui/error-codes/E0648.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error[E0648]: `export_name` may not contain null characters\n   --> $DIR/E0648.rs:1:1\n    |\n-LL | #[export_name=\"/0foo\"]\n+LL | #[export_name=\"\\0foo\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "66d35a1b854d3cd1399ed43986040a5534a39f44", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,10 +1,10 @@\n error: incorrect unicode escape sequence\n   --> $DIR/format-string-error-2.rs:77:20\n    |\n-LL |     println!(\"/x7B}/u8 {\", 1);\n+LL |     println!(\"\\x7B}\\u8 {\", 1);\n    |                    ^^-\n    |                    |\n-   |                    help: format of unicode escape sequences uses braces: `/u{8}`\n+   |                    help: format of unicode escape sequences uses braces: `\\u{8}`\n \n error: invalid format string: expected `'}'`, found `'a'`\n   --> $DIR/format-string-error-2.rs:5:5\n@@ -19,28 +19,28 @@ LL |     a\");\n error: invalid format string: expected `'}'`, found `'b'`\n   --> $DIR/format-string-error-2.rs:9:5\n    |\n-LL |     format!(\"{ /\n+LL |     format!(\"{ \\\n    |              - because of this opening brace\n LL | \n LL |     b\");\n    |     ^ expected `}` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:11:18\n    |\n-LL |     format!(r#\"{ /\n+LL |     format!(r#\"{ \\\n    |                - ^ expected `}` in format string\n    |                |\n    |                because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:15:18\n    |\n-LL |     format!(r#\"{ /n\n+LL |     format!(r#\"{ \\n\n    |                - ^ expected `}` in format string\n    |                |\n    |                because of this opening brace\n@@ -50,9 +50,9 @@ LL |     format!(r#\"{ /n\n error: invalid format string: expected `'}'`, found `'e'`\n   --> $DIR/format-string-error-2.rs:21:5\n    |\n-LL |     format!(\"{ /n\n+LL |     format!(\"{ \\n\n    |              - because of this opening brace\n-LL | /n\n+LL | \\n\n LL |     e\");\n    |     ^ expected `}` in format string\n    |\n@@ -81,9 +81,9 @@ LL |     a\n error: invalid format string: expected `'}'`, found `'b'`\n   --> $DIR/format-string-error-2.rs:35:5\n    |\n-LL |     { /\n+LL |     { \\\n    |     - because of this opening brace\n-LL |         /\n+LL |         \\\n LL |     b\");\n    |     ^ expected `}` in format string\n    |\n@@ -92,28 +92,28 @@ LL |     b\");\n error: invalid format string: expected `'}'`, found `'b'`\n   --> $DIR/format-string-error-2.rs:40:5\n    |\n-LL |     { /\n+LL |     { \\\n    |     - because of this opening brace\n-LL |         /\n-LL |     b /\n+LL |         \\\n+LL |     b \\\n    |     ^ expected `}` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:45:8\n    |\n-LL | raw  { /\n+LL | raw  { \\\n    |      - ^ expected `}` in format string\n    |      |\n    |      because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error-2.rs:50:8\n    |\n-LL | raw  { /n\n+LL | raw  { \\n\n    |      - ^ expected `}` in format string\n    |      |\n    |      because of this opening brace\n@@ -123,9 +123,9 @@ LL | raw  { /n\n error: invalid format string: expected `'}'`, found `'e'`\n   --> $DIR/format-string-error-2.rs:57:5\n    |\n-LL |   { /n\n+LL |   { \\n\n    |   - because of this opening brace\n-LL | /n\n+LL | \\n\n LL |     e\");\n    |     ^ expected `}` in format string\n    |\n@@ -144,13 +144,13 @@ LL |     asdf}\n error: 1 positional argument in format string, but no arguments were given\n   --> $DIR/format-string-error-2.rs:70:17\n    |\n-LL |     println!(\"/t{}\");\n+LL |     println!(\"\\t{}\");\n    |                 ^^\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error-2.rs:74:27\n    |\n-LL |     println!(\"/x7B}/u{8} {\", 1);\n+LL |     println!(\"\\x7B}\\u{8} {\", 1);\n    |                          -^ expected `'}'` in format string\n    |                          |\n    |                          because of this opening brace\n@@ -160,23 +160,23 @@ LL |     println!(\"/x7B}/u{8} {\", 1);\n error: argument never used\n   --> $DIR/format-string-error-2.rs:77:28\n    |\n-LL |     println!(\"/x7B}/u8 {\", 1);\n+LL |     println!(\"\\x7B}\\u8 {\", 1);\n    |              ------------  ^ argument never used\n    |              |\n    |              formatting specifier missing\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error-2.rs:82:21\n    |\n-LL |     println!(r#\"/x7B}/u{8} {\"#, 1);\n+LL |     println!(r#\"\\x7B}\\u{8} {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error-2.rs:85:21\n    |\n-LL |     println!(r#\"/x7B}/u8 {\"#, 1);\n+LL |     println!(r#\"\\x7B}\\u8 {\"#, 1);\n    |                     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`"}, {"sha": "3dc122a7399dd53006efb1b630a2bb28161271e4", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -50,10 +50,10 @@ LL |     let _ = format!(\"}\");\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n-error: invalid format string: expected `'}'`, found `'/'`\n+error: invalid format string: expected `'}'`, found `'\\'`\n   --> $DIR/format-string-error.rs:17:23\n    |\n-LL |     let _ = format!(\"{/}\");\n+LL |     let _ = format!(\"{\\}\");\n    |                      -^ expected `}` in format string\n    |                      |\n    |                      because of this opening brace\n@@ -63,7 +63,7 @@ LL |     let _ = format!(\"{/}\");\n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error.rs:19:35\n    |\n-LL |     let _ = format!(\"/n/n/n{/n/n/n\");\n+LL |     let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n    |                            -      ^ expected `'}'` in format string\n    |                            |\n    |                            because of this opening brace"}, {"sha": "4d1066516249b8f9b7996675796a017e254458a0", "filename": "src/test/ui/issues/issue-13727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fissues%2Fissue-13727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fissues%2Fissue-13727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13727.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: unreachable pattern\n   --> $DIR/issue-13727.rs:7:5\n    |\n-LL |     512 => print!(\"0b1111/n\"),\n+LL |     512 => print!(\"0b1111\\n\"),\n    |     ^^^\n    |\n note: lint level defined here"}, {"sha": "e2f2f14dce3193bd73548b2b678dcee122e0db11", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: multiple unused formatting arguments\n   --> $DIR/format-foreign.rs:2:30\n    |\n-LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n+LL |     println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4);\n    |              --------------  ^^^^^^^^  ^^^^^^^  ^ argument never used\n    |              |               |         |\n    |              |               |         argument never used\n@@ -11,7 +11,7 @@ LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n help: format specifiers use curly braces\n    |\n-LL |     println!(\"{:.2$} {}!/n\", \"Hello,\", \"World\", 4);\n+LL |     println!(\"{:.2$} {}!\\n\", \"Hello,\", \"World\", 4);\n    |               ^^^^^^ ^^\n \n error: argument never used\n@@ -29,7 +29,7 @@ error: multiple unused formatting arguments\n    |\n LL |       println!(r###\"%.*3$s\n    |  ______________-\n-LL | |         %s!/n\n+LL | |         %s!\\n\n LL | | \"###, \"Hello,\", \"World\", 4);\n    | |    -  ^^^^^^^^  ^^^^^^^  ^ argument never used\n    | |    |  |         |\n@@ -41,7 +41,7 @@ LL | | \"###, \"Hello,\", \"World\", 4);\n help: format specifiers use curly braces\n    |\n LL |     println!(r###\"{:.2$}\n-LL |         {}!/n\n+LL |         {}!\\n\n    |\n \n error: argument never used"}, {"sha": "209ff09aea41b30a4b006b7fab28a63166140922", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: 1 positional argument in format string, but no arguments were given\n   --> $DIR/macro-backtrace-println.rs:14:30\n    |\n-LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"/n\")));\n+LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n    |                              ^^^^^^^^^^^^^^^^^^^\n ...\n LL |     myprintln!(\"{}\");"}, {"sha": "8a981e8d62e2bdf480f27f79fbd423ef6d13d71c", "filename": "src/test/ui/parser/ascii-only-character-escape.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,19 +1,19 @@\n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/ascii-only-character-escape.rs:4:16\n    |\n-LL |     let x = \"/x80\";\n+LL |     let x = \"\\x80\";\n    |                ^^\n \n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/ascii-only-character-escape.rs:5:16\n    |\n-LL |     let y = \"/xff\";\n+LL |     let y = \"\\xff\";\n    |                ^^\n \n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/ascii-only-character-escape.rs:6:16\n    |\n-LL |     let z = \"/xe2\";\n+LL |     let z = \"\\xe2\";\n    |                ^^\n \n error: aborting due to 3 previous errors"}, {"sha": "8e96ea22771b830104e4a831cc5fbca4a49f5211", "filename": "src/test/ui/parser/bad-char-literals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -4,21 +4,21 @@ error: character constant must be escaped: '\n LL |     ''';\n    |      ^\n \n-error: character constant must be escaped: /n\n+error: character constant must be escaped: \\n\n   --> $DIR/bad-char-literals.rs:11:6\n    |\n LL |       '\n    |  ______^\n LL | | ';\n    | |_\n \n-error: character constant must be escaped: /r\n+error: character constant must be escaped: \\r\n   --> $DIR/bad-char-literals.rs:16:6\n    |\n LL |     '\r';\n    |      ^\n \n-error: character constant must be escaped: /t\n+error: character constant must be escaped: \\t\n   --> $DIR/bad-char-literals.rs:19:6\n    |\n LL |     '    ';"}, {"sha": "28385f34f2ab2ed2a2a50935b4f2d0ffa9303c00", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,22 +1,22 @@\n error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:6:21\n    |\n-LL | static FOO: u8 = b'/f';\n+LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:9:8\n    |\n-LL |     b'/f';\n+LL |     b'\\f';\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-literals.rs:10:10\n    |\n-LL |     b'/x0Z';\n+LL |     b'\\x0Z';\n    |          ^\n \n-error: byte constant must be escaped: /t\n+error: byte constant must be escaped: \\t\n   --> $DIR/byte-literals.rs:11:7\n    |\n LL |     b'    ';\n@@ -28,7 +28,7 @@ error: byte constant must be escaped: '\n LL |     b''';\n    |       ^\n \n-error: byte constant must be ASCII. Use a /xHH escape for a non-ASCII byte\n+error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n   --> $DIR/byte-literals.rs:13:7\n    |\n LL |     b'\u00e9';"}, {"sha": "6701cfd8e66c2f1dddf9ecb74feb60d2f65d8c63", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,22 +1,22 @@\n error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:6:32\n    |\n-LL | static FOO: &'static [u8] = b\"/f\";\n+LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:9:8\n    |\n-LL |     b\"/f\";\n+LL |     b\"\\f\";\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-string-literals.rs:10:10\n    |\n-LL |     b\"/x0Z\";\n+LL |     b\"\\x0Z\";\n    |          ^\n \n-error: byte constant must be ASCII. Use a /xHH escape for a non-ASCII byte\n+error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n   --> $DIR/byte-string-literals.rs:11:7\n    |\n LL |     b\"\u00e9\";"}, {"sha": "295ba3b73e86196f104e24d1add52865ae98ba8c", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,118 +1,118 @@\n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:4:15\n    |\n-LL |     let _ = b\"/u{a66e}\";\n+LL |     let _ = b\"\\u{a66e}\";\n    |               ^^^^^^^^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:7:15\n    |\n-LL |     let _ = b'/u{a66e}';\n+LL |     let _ = b'\\u{a66e}';\n    |               ^^^^^^^^\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n-LL |     let _ = b'/u';\n+LL |     let _ = b'\\u';\n    |               ^^ incorrect unicode escape sequence\n    |\n-   = help: format of unicode escape sequences is `/u{...}`\n+   = help: format of unicode escape sequences is `\\u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n-LL |     let _ = b'/u';\n+LL |     let _ = b'\\u';\n    |               ^^\n \n error: numeric character escape is too short\n   --> $DIR/issue-23620-invalid-escapes.rs:14:17\n    |\n-LL |     let _ = b'/x5';\n+LL |     let _ = b'\\x5';\n    |                 ^\n \n error: invalid character in numeric character escape: x\n   --> $DIR/issue-23620-invalid-escapes.rs:17:17\n    |\n-LL |     let _ = b'/xxy';\n+LL |     let _ = b'\\xxy';\n    |                 ^\n \n error: invalid character in numeric character escape: y\n   --> $DIR/issue-23620-invalid-escapes.rs:17:18\n    |\n-LL |     let _ = b'/xxy';\n+LL |     let _ = b'\\xxy';\n    |                  ^\n \n error: numeric character escape is too short\n   --> $DIR/issue-23620-invalid-escapes.rs:21:16\n    |\n-LL |     let _ = '/x5';\n+LL |     let _ = '\\x5';\n    |                ^\n \n error: invalid character in numeric character escape: x\n   --> $DIR/issue-23620-invalid-escapes.rs:24:16\n    |\n-LL |     let _ = '/xxy';\n+LL |     let _ = '\\xxy';\n    |                ^\n \n error: invalid character in numeric character escape: y\n   --> $DIR/issue-23620-invalid-escapes.rs:24:17\n    |\n-LL |     let _ = '/xxy';\n+LL |     let _ = '\\xxy';\n    |                 ^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:28:15\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |               ^^^^^^^^\n \n error: invalid character in numeric character escape:  \n   --> $DIR/issue-23620-invalid-escapes.rs:28:27\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                           ^\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                            ^^ incorrect unicode escape sequence\n    |\n-   = help: format of unicode escape sequences is `/u{...}`\n+   = help: format of unicode escape sequences is `\\u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n+LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                            ^^\n \n error: invalid character in numeric character escape:  \n   --> $DIR/issue-23620-invalid-escapes.rs:34:17\n    |\n-LL |     let _ = \"/xf /u\";\n+LL |     let _ = \"\\xf \\u\";\n    |                 ^\n \n-error: this form of character escape may only be used with characters in the range [/x00-/x7f]\n+error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n   --> $DIR/issue-23620-invalid-escapes.rs:34:16\n    |\n-LL |     let _ = \"/xf /u\";\n+LL |     let _ = \"\\xf \\u\";\n    |                ^^\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:34:18\n    |\n-LL |     let _ = \"/xf /u\";\n+LL |     let _ = \"\\xf \\u\";\n    |                  ^^ incorrect unicode escape sequence\n    |\n-   = help: format of unicode escape sequences is `/u{...}`\n+   = help: format of unicode escape sequences is `\\u{...}`\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:39:14\n    |\n-LL |     let _ = \"/u8f\";\n+LL |     let _ = \"\\u8f\";\n    |              ^^--\n    |              |\n-   |              help: format of unicode escape sequences uses braces: `/u{8f}`\n+   |              help: format of unicode escape sequences uses braces: `\\u{8f}`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "69a54af3d82edced618941fafbbdc65529db6a01", "filename": "src/test/ui/parser/issue-43692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-43692.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: invalid start of unicode escape\n   --> $DIR/issue-43692.rs:2:9\n    |\n-LL |     '/u{_10FFFF}';\n+LL |     '\\u{_10FFFF}';\n    |         ^\n \n error: aborting due to previous error"}, {"sha": "414ad81512ae50e0873ef1c3f79c2056d2f401be", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,25 +1,25 @@\n error: numeric character escape is too short\n   --> $DIR/lex-bad-char-literals-1.rs:3:8\n    |\n-LL |     '/x1'\n+LL |     '\\x1'\n    |        ^\n \n error: numeric character escape is too short\n   --> $DIR/lex-bad-char-literals-1.rs:7:8\n    |\n-LL |     \"/x1\"\n+LL |     \"\\x1\"\n    |        ^\n \n-error: unknown character escape: /u{25cf}\n+error: unknown character escape: \\u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:11:7\n    |\n-LL |     '/\u25cf'\n+LL |     '\\\u25cf'\n    |       ^ unknown character escape\n \n-error: unknown character escape: /u{25cf}\n+error: unknown character escape: \\u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:15:7\n    |\n-LL |     \"/\u25cf\"\n+LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n \n error: aborting due to 4 previous errors"}, {"sha": "97c6338820d739745767c800a15532cd33a54724", "filename": "src/test/ui/parser/lex-bad-char-literals-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,21 +1,21 @@\n error: character literal may only contain one codepoint\n   --> $DIR/lex-bad-char-literals-5.rs:1:18\n    |\n-LL | static c: char = '/x10/x10';\n+LL | static c: char = '\\x10\\x10';\n    |                  ^^^^^^^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL | static c: char = \"/x10/x10\";\n+LL | static c: char = \"\\x10\\x10\";\n    |                  ^^^^^^^^^^\n \n error: character literal may only contain one codepoint\n   --> $DIR/lex-bad-char-literals-5.rs:5:20\n    |\n-LL |     let ch: &str = '/x10/x10';\n+LL |     let ch: &str = '\\x10\\x10';\n    |                    ^^^^^^^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-LL |     let ch: &str = \"/x10/x10\";\n+LL |     let ch: &str = \"\\x10\\x10\";\n    |                    ^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "43c43721b19f2754993a2e5ae281c854cc77fa7b", "filename": "src/test/ui/parser/lex-bad-token.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bad-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bad-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-token.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,4 +1,4 @@\n-error: unknown start of token: /u{25cf}\n+error: unknown start of token: \\u{25cf}\n   --> $DIR/lex-bad-token.rs:1:1\n    |\n LL | \u25cf"}, {"sha": "7d944569ca9c49980b2fbd0c0e33fbff9b21ac74", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -22,22 +22,22 @@ error: bare CR not allowed in block doc-comment\n LL |     /*! block doc comment with bare CR: '\r' */\n    |                                          ^\n \n-error: bare CR not allowed in string, use /r instead\n+error: bare CR not allowed in string, use \\r instead\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:21:18\n    |\n LL |     let _s = \"foo\rbar\";\n    |                  ^\n \n-error: bare CR not allowed in raw string, use /r instead\n+error: bare CR not allowed in raw string, use \\r instead\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:24:14\n    |\n LL |     let _s = r\"bar\rfoo\";\n    |              ^^^^^\n \n-error: unknown character escape: /r\n+error: unknown character escape: \\r\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n    |\n-LL |     let _s = \"foo/\rbar\";\n+LL |     let _s = \"foo\\\rbar\";\n    |                   ^ unknown character escape\n    |\n    = help: this is an isolated carriage return; consider checking your editor and version control settings"}, {"sha": "06dc0f2b537ba2dc6d616043ac7d8468d32fa192", "filename": "src/test/ui/parser/lex-stray-backslash.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-stray-backslash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Flex-stray-backslash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-stray-backslash.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n-error: unknown start of token: /\n+error: unknown start of token: \\\n   --> $DIR/lex-stray-backslash.rs:1:1\n    |\n-LL | /\n+LL | \\\n    | ^\n \n error: aborting due to previous error"}, {"sha": "a8da50951ddf302376c10b5f7ef3348c6330543c", "filename": "src/test/ui/parser/new-unicode-escapes-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-1.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: unterminated unicode escape (needed a `}`)\n   --> $DIR/new-unicode-escapes-1.rs:2:21\n    |\n-LL |     let s = \"/u{2603\";\n+LL |     let s = \"\\u{2603\";\n    |                     ^\n \n error: aborting due to previous error"}, {"sha": "ede49cdf7e1d11c33fa08f181516abcbcbe4eb3c", "filename": "src/test/ui/parser/new-unicode-escapes-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-2.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: overlong unicode escape (must have at most 6 hex digits)\n   --> $DIR/new-unicode-escapes-2.rs:2:17\n    |\n-LL |     let s = \"/u{260311111111}\";\n+LL |     let s = \"\\u{260311111111}\";\n    |                 ^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "59cfb988f2897c31d65d575efc9d2059ba89b996", "filename": "src/test/ui/parser/new-unicode-escapes-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-3.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,15 +1,15 @@\n error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:2:14\n    |\n-LL |     let s1 = \"/u{d805}\";\n+LL |     let s1 = \"\\u{d805}\";\n    |              ^^^^^^^^^^\n    |\n    = help: unicode escape must not be a surrogate\n \n error: invalid unicode character escape\n   --> $DIR/new-unicode-escapes-3.rs:3:14\n    |\n-LL |     let s2 = \"/u{ffffff}\";\n+LL |     let s2 = \"\\u{ffffff}\";\n    |              ^^^^^^^^^^^^\n    |\n    = help: unicode escape must be at most 10FFFF"}, {"sha": "ca96b00aa7bc55153b5e7137e4e7f016afa79acf", "filename": "src/test/ui/parser/new-unicode-escapes-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnew-unicode-escapes-4.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n error: invalid character in unicode escape: l\n   --> $DIR/new-unicode-escapes-4.rs:4:17\n    |\n-LL |     let s = \"/u{lol}\";\n+LL |     let s = \"\\u{lol}\";\n    |                 ^\n \n error: aborting due to previous error"}, {"sha": "a7f1af0a3474cf9988fc1e96c3e570cb514b51ab", "filename": "src/test/ui/parser/raw-byte-string-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,4 +1,4 @@\n-error: raw byte string must be ASCII: /u{e9}\n+error: raw byte string must be ASCII: \\u{e9}\n   --> $DIR/raw-byte-string-literals.rs:5:8\n    |\n LL |     br\"\u00e9\";"}, {"sha": "3687b9dd282d164193b0ffe22ff05e06bea15cfb", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,7 +1,7 @@\n-error: unknown character escape: /r\n+error: unknown character escape: \\r\n   --> $DIR/trailing-carriage-return-in-string.rs:10:25\n    |\n-LL |     let bad = \"This is /\r a test\";\n+LL |     let bad = \"This is \\\r a test\";\n    |                         ^ unknown character escape\n    |\n    = help: this is an isolated carriage return; consider checking your editor and version control settings"}, {"sha": "76bf6627a4bc40e84bff4c922592d7d3534cae5d", "filename": "src/test/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,4 +1,4 @@\n-error: unknown start of token: /u{37e}\n+error: unknown start of token: \\u{37e}\n   --> $DIR/unicode-chars.rs:2:14\n    |\n LL |     let y = 0\u037e"}, {"sha": "4a09ed75605e41463690662e51f50a1a9d4aa5cc", "filename": "src/test/ui/parser/unicode-quote-chars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,4 +1,4 @@\n-error: unknown start of token: /u{201c}\n+error: unknown start of token: \\u{201c}\n   --> $DIR/unicode-quote-chars.rs:4:14\n    |\n LL |     println!(\u201chello world\u201d);"}, {"sha": "1406b795ba8c34484953d59c4da74750ec977043", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -1,15 +1,15 @@\n error: unknown character escape: {\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n    |\n-LL |     let bad = \"/{it is wrong/}\";\n+LL |     let bad = \"\\{it is wrong\\}\";\n    |                 ^ unknown character escape\n    |\n    = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n error: unknown character escape: }\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n    |\n-LL |     let bad = \"/{it is wrong/}\";\n+LL |     let bad = \"\\{it is wrong\\}\";\n    |                              ^ unknown character escape\n    |\n    = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`"}, {"sha": "35f8dca79b5dc45c61f989d586cbc52d11334725", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 98, "deletions": 5, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a9196055291d87bccdae59c8662e08a20ccf87/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=06a9196055291d87bccdae59c8662e08a20ccf87", "patch": "@@ -10,7 +10,7 @@ use crate::errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n use crate::header::TestProps;\n use crate::json;\n-use regex::Regex;\n+use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n use crate::util::{logv, PathBufExt};\n \n@@ -3172,10 +3172,8 @@ impl<'test> TestCx<'test> {\n         normalized = Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+\").unwrap()\n             .replace_all(&normalized, \"SRC_DIR$1:LL:COL\").into_owned();\n \n-        normalized = normalized.replace(\"\\\\\\\\\", \"\\\\\") // denormalize for paths on windows\n-              .replace(\"\\\\\", \"/\") // normalize for paths on windows\n-              .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n-              .replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n+        normalized = Self::normalize_platform_differences(&normalized);\n+        normalized = normalized.replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n \n         // Remove test annotations like `//~ ERROR text` from the output,\n         // since they duplicate actual errors and make the output hard to read.\n@@ -3189,6 +3187,36 @@ impl<'test> TestCx<'test> {\n         normalized\n     }\n \n+    /// Normalize output differences across platforms. Generally changes Windows output to be more\n+    /// Unix-like.\n+    ///\n+    /// Replaces backslashes in paths with forward slashes, and replaces CRLF line endings\n+    /// with LF.\n+    fn normalize_platform_differences(output: &str) -> String {\n+        lazy_static! {\n+            /// Used to find Windows paths.\n+            ///\n+            /// It's not possible to detect paths in the error messages generally, but this is a\n+            /// decent enough heuristic.\n+            static ref PATH_BACKSLASH_RE: Regex = Regex::new(r#\"(?x)\n+                (?:\n+                  # Match paths that don't include spaces.\n+                  (?:\\\\[\\pL\\pN\\.\\-_']+)+\\.\\pL+\n+                |\n+                  # If the path starts with a well-known root, then allow spaces.\n+                  \\$(?:DIR|SRC_DIR|TEST_BUILD_DIR|BUILD_DIR|LIB_DIR)(?:\\\\[\\pL\\pN\\.\\-_' ]+)+\n+                )\"#\n+            ).unwrap();\n+        }\n+\n+        let output = output.replace(r\"\\\\\", r\"\\\");\n+\n+        PATH_BACKSLASH_RE.replace_all(&output, |caps: &Captures<'_>| {\n+            println!(\"{}\", &caps[0]);\n+            caps[0].replace(r\"\\\", \"/\")\n+        }).replace(\"\\r\\n\", \"\\n\")\n+    }\n+\n     fn expected_output_path(&self, kind: &str) -> PathBuf {\n         let mut path = expected_output_path(\n             &self.testpaths,\n@@ -3520,3 +3548,68 @@ fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n         stderr: stderr.into_bytes(),\n     })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::TestCx;\n+\n+    #[test]\n+    fn normalize_platform_differences() {\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\foo.rs\"),\n+            \"$DIR/foo.rs\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$BUILD_DIR\\..\\parser.rs\"),\n+            \"$BUILD_DIR/../parser.rs\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\bar.rs hello\\nworld\"),\n+            r\"$DIR/bar.rs hello\\nworld\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"either bar\\baz.rs or bar\\baz\\mod.rs\"),\n+            r\"either bar/baz.rs or bar/baz/mod.rs\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"`.\\some\\path.rs`\"),\n+            r\"`./some/path.rs`\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"`some\\path.rs`\"),\n+            r\"`some/path.rs`\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\path-with-dashes.rs\"),\n+            r\"$DIR/path-with-dashes.rs\"\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\path_with_underscores.rs\"),\n+            r\"$DIR/path_with_underscores.rs\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\foo.rs:12:11\"), \"$DIR/foo.rs:12:11\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\path with spaces 'n' quotes\"),\n+            \"$DIR/path with spaces 'n' quotes\",\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r\"$DIR\\file_with\\no_extension\"),\n+            \"$DIR/file_with/no_extension\",\n+        );\n+\n+        assert_eq!(TestCx::normalize_platform_differences(r\"\\n\"), r\"\\n\");\n+        assert_eq!(TestCx::normalize_platform_differences(r\"{ \\n\"), r\"{ \\n\");\n+        assert_eq!(TestCx::normalize_platform_differences(r\"`\\]`\"), r\"`\\]`\");\n+        assert_eq!(TestCx::normalize_platform_differences(r#\"\"\\{\"\"#), r#\"\"\\{\"\"#);\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r#\"write!(&mut v, \"Hello\\n\")\"#),\n+            r#\"write!(&mut v, \"Hello\\n\")\"#\n+        );\n+        assert_eq!(\n+            TestCx::normalize_platform_differences(r#\"println!(\"test\\ntest\")\"#),\n+            r#\"println!(\"test\\ntest\")\"#,\n+        );\n+    }\n+}"}]}