{"sha": "1594a4245ba9951039bb39bf5e3484605ab5d068", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTRhNDI0NWJhOTk1MTAzOWJiMzliZjVlMzQ4NDYwNWFiNWQwNjg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-05T22:54:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-05T22:54:24Z"}, "message": "Rollup merge of #55987 - Thomasdezeeuw:weak-ptr_eq, r=sfackler\n\nAdd Weak.ptr_eq\n\nI hope the doc tests alone are good enough.\n\nWe also might want to discuss the dangling pointer case (from `Weak::new()`).\n\nUpdates #55981.", "tree": {"sha": "e0be904baa14e34d479ca0e08d48e6f5f66289ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0be904baa14e34d479ca0e08d48e6f5f66289ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1594a4245ba9951039bb39bf5e3484605ab5d068", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCFcgCRBK7hj4Ov3rIwAAdHIIAHTF2Ye69c/uFjTqOEOSYs8I\nT4cYck3nSiOKhTBhDijC1h6JIQgGkiVnlncwvfcRANTTt+g7VfIe81DT1G7N6+KB\nj73ZGhP2FRpvFYf0WF7tECTMdSey4TeZLRdZRwnSKk/t5tVg8uK03lvQfG81UDUS\nVw+/bNC2HVcw87M9e7pwrM2wXM8DojHQM++8uUz5Qx4geRZn2H0Xxq4CKODx/6YM\n1HqRdbFNUoHxzzZgfDAfOLoGwmNOuG23fz8xDwmLIUOPy2cXjTwLdZ1TnjoVjoXY\nc7e8XQ0wIeVrGQ2x8R+we/Xpah0lLEhRIUPQtyqWgOnfc2MOZU/4stNDpzSSKag=\n=XNEB\n-----END PGP SIGNATURE-----\n", "payload": "tree e0be904baa14e34d479ca0e08d48e6f5f66289ad\nparent 66ba6b3a662c9bf33d120d5f341d4a87ad9a604a\nparent 38e21f92f1c09a597788062045b1e1d8c879e4f2\nauthor Pietro Albini <pietro@pietroalbini.org> 1544050464 +0100\ncommitter GitHub <noreply@github.com> 1544050464 +0100\n\nRollup merge of #55987 - Thomasdezeeuw:weak-ptr_eq, r=sfackler\n\nAdd Weak.ptr_eq\n\nI hope the doc tests alone are good enough.\n\nWe also might want to discuss the dangling pointer case (from `Weak::new()`).\n\nUpdates #55981.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1594a4245ba9951039bb39bf5e3484605ab5d068", "html_url": "https://github.com/rust-lang/rust/commit/1594a4245ba9951039bb39bf5e3484605ab5d068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1594a4245ba9951039bb39bf5e3484605ab5d068/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ba6b3a662c9bf33d120d5f341d4a87ad9a604a", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ba6b3a662c9bf33d120d5f341d4a87ad9a604a", "html_url": "https://github.com/rust-lang/rust/commit/66ba6b3a662c9bf33d120d5f341d4a87ad9a604a"}, {"sha": "38e21f92f1c09a597788062045b1e1d8c879e4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e21f92f1c09a597788062045b1e1d8c879e4f2", "html_url": "https://github.com/rust-lang/rust/commit/38e21f92f1c09a597788062045b1e1d8c879e4f2"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "c0a947e701108fe587a89cf43abf78598096a7a9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1594a4245ba9951039bb39bf5e3484605ab5d068/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594a4245ba9951039bb39bf5e3484605ab5d068/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1594a4245ba9951039bb39bf5e3484605ab5d068", "patch": "@@ -1187,8 +1187,9 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Weak<U>> for Weak<T> {}\n \n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating any memory.\n-    /// Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n+    /// Calling [`upgrade`] on the return value always gives [`None`].\n     ///\n+    /// [`upgrade`]: #method.upgrade\n     /// [`None`]: ../../std/option/enum.Option.html\n     ///\n     /// # Examples\n@@ -1260,6 +1261,52 @@ impl<T: ?Sized> Weak<T> {\n             Some(unsafe { self.ptr.as_ref() })\n         }\n     }\n+\n+    /// Returns true if the two `Weak`s point to the same value (not just values\n+    /// that compare as equal).\n+    ///\n+    /// # Notes\n+    ///\n+    /// Since this compares pointers it means that `Weak::new()` will equal each\n+    /// other, even though they don't point to any value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::rc::{Rc, Weak};\n+    ///\n+    /// let first_rc = Rc::new(5);\n+    /// let first = Rc::downgrade(&first_rc);\n+    /// let second = Rc::downgrade(&first_rc);\n+    ///\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Rc::new(5);\n+    /// let third = Rc::downgrade(&third_rc);\n+    ///\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    ///\n+    /// Comparing `Weak::new`.\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::rc::{Rc, Weak};\n+    ///\n+    /// let first = Weak::new();\n+    /// let second = Weak::new();\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Rc::new(());\n+    /// let third = Rc::downgrade(&third_rc);\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        this.ptr.as_ptr() == other.ptr.as_ptr()\n+    }\n }\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]"}, {"sha": "0a397f79103dbbf5826f61b8a54322e483485fc8", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1594a4245ba9951039bb39bf5e3484605ab5d068/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594a4245ba9951039bb39bf5e3484605ab5d068/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=1594a4245ba9951039bb39bf5e3484605ab5d068", "patch": "@@ -1130,6 +1130,53 @@ impl<T: ?Sized> Weak<T> {\n             Some(unsafe { self.ptr.as_ref() })\n         }\n     }\n+\n+    /// Returns true if the two `Weak`s point to the same value (not just values\n+    /// that compare as equal).\n+    ///\n+    /// # Notes\n+    ///\n+    /// Since this compares pointers it means that `Weak::new()` will equal each\n+    /// other, even though they don't point to any value.\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::sync::{Arc, Weak};\n+    ///\n+    /// let first_rc = Arc::new(5);\n+    /// let first = Arc::downgrade(&first_rc);\n+    /// let second = Arc::downgrade(&first_rc);\n+    ///\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Arc::new(5);\n+    /// let third = Arc::downgrade(&third_rc);\n+    ///\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    ///\n+    /// Comparing `Weak::new`.\n+    ///\n+    /// ```\n+    /// #![feature(weak_ptr_eq)]\n+    /// use std::sync::{Arc, Weak};\n+    ///\n+    /// let first = Weak::new();\n+    /// let second = Weak::new();\n+    /// assert!(Weak::ptr_eq(&first, &second));\n+    ///\n+    /// let third_rc = Arc::new(());\n+    /// let third = Arc::downgrade(&third_rc);\n+    /// assert!(!Weak::ptr_eq(&first, &third));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n+    pub fn ptr_eq(this: &Self, other: &Self) -> bool {\n+        this.ptr.as_ptr() == other.ptr.as_ptr()\n+    }\n }\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]"}]}