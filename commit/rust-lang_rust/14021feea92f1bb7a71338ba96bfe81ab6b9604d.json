{"sha": "14021feea92f1bb7a71338ba96bfe81ab6b9604d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MDIxZmVlYTkyZjFiYjdhNzEzMzhiYTk2YmZlODFhYjZiOTYwNGQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-26T17:09:05Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-06T10:18:31Z"}, "message": "Remove a field that is computed later anyway", "tree": {"sha": "999614b61372ba386d5f4bdf101a719de1d69d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/999614b61372ba386d5f4bdf101a719de1d69d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14021feea92f1bb7a71338ba96bfe81ab6b9604d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14021feea92f1bb7a71338ba96bfe81ab6b9604d", "html_url": "https://github.com/rust-lang/rust/commit/14021feea92f1bb7a71338ba96bfe81ab6b9604d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14021feea92f1bb7a71338ba96bfe81ab6b9604d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99805982b57eb7827da2b66a21121b4c76b41e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99805982b57eb7827da2b66a21121b4c76b41e9", "html_url": "https://github.com/rust-lang/rust/commit/d99805982b57eb7827da2b66a21121b4c76b41e9"}], "stats": {"total": 75, "additions": 30, "deletions": 45}, "files": [{"sha": "d0883f23a4e6bb9237a7c8b83aa17f0dca6beb2c", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/14021feea92f1bb7a71338ba96bfe81ab6b9604d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14021feea92f1bb7a71338ba96bfe81ab6b9604d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=14021feea92f1bb7a71338ba96bfe81ab6b9604d", "patch": "@@ -42,29 +42,6 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// lifetime parameter on `foo`.)\n     pub concrete_ty: Ty<'tcx>,\n \n-    /// Returns `true` if the `impl Trait` bounds include region bounds.\n-    /// For example, this would be true for:\n-    ///\n-    ///     fn foo<'a, 'b, 'c>() -> impl Trait<'c> + 'a + 'b\n-    ///\n-    /// but false for:\n-    ///\n-    ///     fn foo<'c>() -> impl Trait<'c>\n-    ///\n-    /// unless `Trait` was declared like:\n-    ///\n-    ///     trait Trait<'c>: 'c\n-    ///\n-    /// in which case it would be true.\n-    ///\n-    /// This is used during regionck to decide whether we need to\n-    /// impose any additional constraints to ensure that region\n-    /// variables in `concrete_ty` wind up being constrained to\n-    /// something from `substs` (or, at minimum, things that outlive\n-    /// the fn body). (Ultimately, writeback is responsible for this\n-    /// check.)\n-    pub has_required_region_bounds: bool,\n-\n     /// The origin of the opaque type.\n     pub origin: hir::OpaqueTyOrigin,\n }"}, {"sha": "4268fa0358439001003395dbedbffc16f0bdca4d", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/14021feea92f1bb7a71338ba96bfe81ab6b9604d/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14021feea92f1bb7a71338ba96bfe81ab6b9604d/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=14021feea92f1bb7a71338ba96bfe81ab6b9604d", "patch": "@@ -330,19 +330,36 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let span = tcx.def_span(def_id);\n \n-        // If there are required region bounds, we can use them.\n-        if opaque_defn.has_required_region_bounds {\n-            let bounds = tcx.explicit_item_bounds(def_id);\n-            debug!(\"{:#?}\", bounds);\n-            let bounds: Vec<_> =\n-                bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_type_key.substs)).collect();\n-            debug!(\"{:#?}\", bounds);\n-            let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n-\n-            let required_region_bounds =\n-                required_region_bounds(tcx, opaque_type, bounds.into_iter());\n-            debug_assert!(!required_region_bounds.is_empty());\n+        // Check if the `impl Trait` bounds include region bounds.\n+        // For example, this would be true for:\n+        //\n+        //     fn foo<'a, 'b, 'c>() -> impl Trait<'c> + 'a + 'b\n+        //\n+        // but false for:\n+        //\n+        //     fn foo<'c>() -> impl Trait<'c>\n+        //\n+        // unless `Trait` was declared like:\n+        //\n+        //     trait Trait<'c>: 'c\n+        //\n+        // in which case it would be true.\n+        //\n+        // This is used during regionck to decide whether we need to\n+        // impose any additional constraints to ensure that region\n+        // variables in `concrete_ty` wind up being constrained to\n+        // something from `substs` (or, at minimum, things that outlive\n+        // the fn body). (Ultimately, writeback is responsible for this\n+        // check.)\n+        let bounds = tcx.explicit_item_bounds(def_id);\n+        debug!(\"{:#?}\", bounds);\n+        let bounds: Vec<_> =\n+            bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_type_key.substs)).collect();\n+        debug!(\"{:#?}\", bounds);\n+        let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n \n+        let required_region_bounds = required_region_bounds(tcx, opaque_type, bounds.into_iter());\n+        if !required_region_bounds.is_empty() {\n             for required_region in required_region_bounds {\n                 concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n                     op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n@@ -979,9 +996,6 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         debug!(\"instantiate_opaque_types: bounds={:?}\", bounds);\n \n-        let required_region_bounds = required_region_bounds(tcx, ty, bounds.iter().copied());\n-        debug!(\"instantiate_opaque_types: required_region_bounds={:?}\", required_region_bounds);\n-\n         // Make sure that we are in fact defining the *entire* type\n         // (e.g., `type Foo<T: Bound> = impl Bar;` needs to be\n         // defined by a function like `fn foo<T: Bound>() -> Foo<T>`).\n@@ -997,13 +1011,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         self.opaque_types.insert(\n             OpaqueTypeKey { def_id, substs },\n-            OpaqueTypeDecl {\n-                opaque_type: ty,\n-                definition_span,\n-                concrete_ty: ty_var,\n-                has_required_region_bounds: !required_region_bounds.is_empty(),\n-                origin,\n-            },\n+            OpaqueTypeDecl { opaque_type: ty, definition_span, concrete_ty: ty_var, origin },\n         );\n         debug!(\"instantiate_opaque_types: ty_var={:?}\", ty_var);\n "}]}