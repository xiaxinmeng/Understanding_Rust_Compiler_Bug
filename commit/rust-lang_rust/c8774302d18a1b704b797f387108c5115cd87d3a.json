{"sha": "c8774302d18a1b704b797f387108c5115cd87d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Nzc0MzAyZDE4YTFiNzA0Yjc5N2YzODcxMDhjNTExNWNkODdkM2E=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-04T23:11:56Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-05T00:44:49Z"}, "message": "remove bespoke flock bindings", "tree": {"sha": "bc913a32b7ed3a01f407f90ffd2f3f37f90f7394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc913a32b7ed3a01f407f90ffd2f3f37f90f7394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8774302d18a1b704b797f387108c5115cd87d3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl4RMYMWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdDiWB/0dHDR5l6sb1W+BioWSFr7h+fcz\ngaK08KQ6aA5Xjo7H/pWwGYLm+TJSBjSk9SfMxFlc8qQdg/7p2Vga7dX+6J4gmzEL\nlZQ2zw2GRFHZNPpPWTb/ZKviTh9CpviZY8efQHh/ze0MIcUZRZejUdpFB/oAJHFK\nfjm+8rph6wKGJItzSb3pBuQNm3dbhXUZn1C6CHqBEiLtviX+2oiEMf4B5KwlJXxj\nIEqFf4aVa5mMnoToanax2iTUCpQElcmhNWH9hw/UK9i7pGv3gGr7zgwQTRoMWQHn\ne9TlKVAtvKr7QhjwWhgmZXH9BBaxPxV1OLDY9MPkSEO9VcYlnl57JZobDXeW\n=jN/B\n-----END PGP SIGNATURE-----", "payload": "tree bc913a32b7ed3a01f407f90ffd2f3f37f90f7394\nparent 760ce94c69ca510d44087291c311296f6d9ccdf5\nauthor Andy Russell <arussell123@gmail.com> 1578179516 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1578185089 -0500\n\nremove bespoke flock bindings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8774302d18a1b704b797f387108c5115cd87d3a", "html_url": "https://github.com/rust-lang/rust/commit/c8774302d18a1b704b797f387108c5115cd87d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8774302d18a1b704b797f387108c5115cd87d3a/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760ce94c69ca510d44087291c311296f6d9ccdf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/760ce94c69ca510d44087291c311296f6d9ccdf5", "html_url": "https://github.com/rust-lang/rust/commit/760ce94c69ca510d44087291c311296f6d9ccdf5"}], "stats": {"total": 121, "additions": 15, "deletions": 106}, "files": [{"sha": "e3282c5d276b039291dfc2b9566b166afcedff6b", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 15, "deletions": 106, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/c8774302d18a1b704b797f387108c5115cd87d3a/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8774302d18a1b704b797f387108c5115cd87d3a/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=c8774302d18a1b704b797f387108c5115cd87d3a", "patch": "@@ -13,96 +13,9 @@ use std::path::Path;\n cfg_if! {\n     if #[cfg(unix)] {\n         use std::ffi::{CString, OsStr};\n+        use std::mem;\n         use std::os::unix::prelude::*;\n \n-        #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"freebsd\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(any(target_os = \"dragonfly\",\n-                  target_os = \"netbsd\",\n-                  target_os = \"openbsd\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"haiku\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"solaris\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_sysid: libc::c_int,\n-                pub l_pid: libc::pid_t,\n-            }\n-        }\n-\n         #[derive(Debug)]\n         pub struct Lock {\n             fd: libc::c_int,\n@@ -132,19 +45,17 @@ cfg_if! {\n                 }\n \n                 let lock_type = if exclusive {\n-                    libc::F_WRLCK as libc::c_short\n+                    libc::F_WRLCK\n                 } else {\n-                    libc::F_RDLCK as libc::c_short\n+                    libc::F_RDLCK\n                 };\n \n-                let flock = os::flock {\n-                    l_start: 0,\n-                    l_len: 0,\n-                    l_pid: 0,\n-                    l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: lock_type,\n-                    l_sysid: 0,\n-                };\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = lock_type as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n                 let cmd = if wait { libc::F_SETLKW } else { libc::F_SETLK };\n                 let ret = unsafe {\n                     libc::fcntl(fd, cmd, &flock)\n@@ -161,14 +72,12 @@ cfg_if! {\n \n         impl Drop for Lock {\n             fn drop(&mut self) {\n-                let flock = os::flock {\n-                    l_start: 0,\n-                    l_len: 0,\n-                    l_pid: 0,\n-                    l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: libc::F_UNLCK as libc::c_short,\n-                    l_sysid: 0,\n-                };\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = libc::F_UNLCK as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n                 unsafe {\n                     libc::fcntl(self.fd, libc::F_SETLK, &flock);\n                     libc::close(self.fd);"}]}