{"sha": "aaaa142dc18ecae15bb357584b1de35395e3bdb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYWExNDJkYzE4ZWNhZTE1YmIzNTc1ODRiMWRlMzUzOTVlM2JkYjg=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T17:24:09Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T17:24:09Z"}, "message": "Rename all `link_name_sym` to `link_name` and remove the only remaining `let link_name = link_name_sym.as_str()`", "tree": {"sha": "6600d2cec5af115c85bf96842aabc0011ed2acc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6600d2cec5af115c85bf96842aabc0011ed2acc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaaa142dc18ecae15bb357584b1de35395e3bdb8", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYMeQuRUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLijtwEAhvRHNA3YFDIlyJQX1nH16KQrQ5M1\nePo2K/yi+vylXc0BANRRk9LgSGOLY1tWGhy4KBG0IcDf+tD9stWm8HJK9MAL\n=tOw3\n-----END PGP SIGNATURE-----", "payload": "tree 6600d2cec5af115c85bf96842aabc0011ed2acc4\nparent 9011524454aff19110a3efc1cd3bb68657a0f8ee\nauthor hyd-dev <yd-huang@outlook.com> 1623691449 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1623691449 +0800\n\nRename all `link_name_sym` to `link_name` and remove the only remaining `let link_name = link_name_sym.as_str()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaa142dc18ecae15bb357584b1de35395e3bdb8", "html_url": "https://github.com/rust-lang/rust/commit/aaaa142dc18ecae15bb357584b1de35395e3bdb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaaa142dc18ecae15bb357584b1de35395e3bdb8/comments", "author": null, "committer": null, "parents": [{"sha": "9011524454aff19110a3efc1cd3bb68657a0f8ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9011524454aff19110a3efc1cd3bb68657a0f8ee", "html_url": "https://github.com/rust-lang/rust/commit/9011524454aff19110a3efc1cd3bb68657a0f8ee"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "596f6c33d6474d8d318da9d0f7dab547e080a28b", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aaaa142dc18ecae15bb357584b1de35395e3bdb8/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaa142dc18ecae15bb357584b1de35395e3bdb8/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=aaaa142dc18ecae15bb357584b1de35395e3bdb8", "patch": "@@ -209,20 +209,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n-        let link_name_sym = this\n+        let link_name = this\n             .tcx\n             .sess\n             .first_attr_value_str_by_name(&attrs, sym::link_name)\n             .unwrap_or_else(|| this.tcx.item_name(def_id));\n-        let link_name = link_name_sym.as_str();\n         let tcx = this.tcx.tcx;\n \n         // First: functions that diverge.\n         let (dest, ret) = match ret {\n-            None => match &*link_name {\n+            None => match &*link_name.as_str() {\n                 \"miri_start_panic\" => {\n                     // `check_shim` happens inside `handle_miri_start_panic`.\n-                    this.handle_miri_start_panic(abi, link_name_sym, args, unwind)?;\n+                    this.handle_miri_start_panic(abi, link_name, args, unwind)?;\n                     return Ok(None);\n                 }\n                 // This matches calls to the foreign item `panic_impl`.\n@@ -231,7 +230,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // We don't use `check_shim` here because we are just forwarding to the lang\n                     // item. Argument count checking will be performed when the returned `Body` is\n                     // called.\n-                    this.check_abi_and_shim_symbol_clash(abi, Abi::Rust, link_name_sym)?;\n+                    this.check_abi_and_shim_symbol_clash(abi, Abi::Rust, link_name)?;\n                     let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n                     let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n                     return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n@@ -240,25 +239,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 | \"exit\"\n                 | \"ExitProcess\"\n                 => {\n-                    let exp_abi = if link_name == \"exit\" {\n+                    let exp_abi = if link_name.as_str() == \"exit\" {\n                         Abi::C { unwind: false }\n                     } else {\n                         Abi::System { unwind: false }\n                     };\n-                    let &[ref code] = this.check_shim(abi, exp_abi, link_name_sym, args)?;\n+                    let &[ref code] = this.check_shim(abi, exp_abi, link_name, args)?;\n                     // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n                     let code = this.read_scalar(code)?.to_i32()?;\n                     throw_machine_stop!(TerminationInfo::Exit(code.into()));\n                 }\n                 \"abort\" => {\n-                    let &[] =\n-                        this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                     throw_machine_stop!(TerminationInfo::Abort(\n                         \"the program aborted execution\".to_owned()\n                     ))\n                 }\n                 _ => {\n-                    if let Some(body) = this.lookup_exported_symbol(link_name_sym)? {\n+                    if let Some(body) = this.lookup_exported_symbol(link_name)? {\n                         return Ok(Some(body));\n                     }\n                     this.handle_unsupported(format!(\n@@ -272,14 +270,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         // Second: functions that return.\n-        match this.emulate_foreign_item_by_name(link_name_sym, abi, args, dest, ret)? {\n+        match this.emulate_foreign_item_by_name(link_name, abi, args, dest, ret)? {\n             EmulateByNameResult::NeedsJumping => {\n                 trace!(\"{:?}\", this.dump_place(**dest));\n                 this.go_to_block(ret);\n             }\n             EmulateByNameResult::AlreadyJumped => (),\n             EmulateByNameResult::NotSupported => {\n-                if let Some(body) = this.lookup_exported_symbol(link_name_sym)? {\n+                if let Some(body) = this.lookup_exported_symbol(link_name)? {\n                     return Ok(Some(body));\n                 }\n "}]}