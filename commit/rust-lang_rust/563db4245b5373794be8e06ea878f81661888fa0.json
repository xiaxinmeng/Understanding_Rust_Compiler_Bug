{"sha": "563db4245b5373794be8e06ea878f81661888fa0", "node_id": "C_kwDOAAsO6NoAKDU2M2RiNDI0NWI1MzczNzk0YmU4ZTA2ZWE4NzhmODE2NjE4ODhmYTA", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-12T14:18:13Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-20T19:19:31Z"}, "message": "Do not mention associated items when they introduce an obligation", "tree": {"sha": "b9749b6061dfafc730a6472a508251292e2f64d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9749b6061dfafc730a6472a508251292e2f64d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563db4245b5373794be8e06ea878f81661888fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563db4245b5373794be8e06ea878f81661888fa0", "html_url": "https://github.com/rust-lang/rust/commit/563db4245b5373794be8e06ea878f81661888fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563db4245b5373794be8e06ea878f81661888fa0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446b46673d111f5f00e89e7fa208eaf233b6a7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/446b46673d111f5f00e89e7fa208eaf233b6a7a8", "html_url": "https://github.com/rust-lang/rust/commit/446b46673d111f5f00e89e7fa208eaf233b6a7a8"}], "stats": {"total": 1037, "additions": 9, "deletions": 1028}, "files": [{"sha": "d5c7cf711169b504a5a18ad5fb952dd66c69034a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -1958,15 +1958,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     region, object_ty,\n                 ));\n             }\n-            ObligationCauseCode::ItemObligation(item_def_id) => {\n-                let item_name = tcx.def_path_str(item_def_id);\n-                let msg = format!(\"required by `{}`\", item_name);\n-                let sp = tcx\n-                    .hir()\n-                    .span_if_local(item_def_id)\n-                    .unwrap_or_else(|| tcx.def_span(item_def_id));\n-                let sp = tcx.sess.source_map().guess_head_span(sp);\n-                err.span_note(sp, &msg);\n+            ObligationCauseCode::ItemObligation(_item_def_id) => {\n+                // We hold the `DefId` of the item introducing the obligation, but displaying it\n+                // doesn't add user usable information. It always point at an associated item.\n             }\n             ObligationCauseCode::BindingObligation(item_def_id, span) => {\n                 let item_name = tcx.def_path_str(item_def_id);"}, {"sha": "8442d42c617fc63c2a0e138d36f5d8b21639cd76", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -232,7 +232,6 @@ fn compare_predicate_entailment<'tcx>(\n                 span,\n                 impl_m_hir_id,\n                 ObligationCauseCode::CompareImplMethodObligation {\n-                    item_name: impl_m.ident.name,\n                     impl_item_def_id: impl_m.def_id,\n                     trait_item_def_id: trait_m.def_id,\n                 },"}, {"sha": "e7a9ce94af4d9f52fc0c4c61e19f7097b2709c5d", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::alloc`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn alloc(&self, layout: Layout) -> *mut u8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -21,11 +16,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::dealloc`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -36,11 +26,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::realloc`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n@@ -51,11 +36,6 @@ LL | #[global_allocator]\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n-  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n-   |\n-LL |     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "86c62e7b7f12fe0a61b08cb88c8ee2230b253ba4", "filename": "src/test/ui/associated-consts/associated-const-array-len.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n    |\n LL | const X: [i32; <i32 as Foo>::ID] = [0, 1, 2];\n    |                ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `Foo::ID`\n-  --> $DIR/associated-const-array-len.rs:2:5\n-   |\n-LL |     const ID: usize;\n-   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "db39fd762c307c056ce5339d32377e95771a8198", "filename": "src/test/ui/associated-consts/issue-63496.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -9,11 +9,6 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |\n    = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `A::C`\n-  --> $DIR/issue-63496.rs:2:5\n-   |\n-LL |     const C: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n@@ -26,11 +21,6 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |\n    = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `A::C`\n-  --> $DIR/issue-63496.rs:2:5\n-   |\n-LL |     const C: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ae25a8c222206e27c305920f72a90c580232933", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -9,11 +9,6 @@ LL |     fn return_n(&self) -> [u8; Bar::X];\n    |\n    = note: cannot satisfy `_: Bar`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `Bar::X`\n-  --> $DIR/issue-48027.rs:2:5\n-   |\n-LL |     const X: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6"}, {"sha": "3eda22796e099aeb4bdf39a5c9ac395f81fa11ae", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     ToInt::to_int(&g.get())\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required by `ToInt::to_int`\n-  --> $DIR/associated-types-bound-failure.rs:6:5\n-   |\n-LL |     fn to_int(&self) -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting the associated type\n    |\n LL |     where G : GetToInt, <G as GetToInt>::R: ToInt"}, {"sha": "60ec23cf655ab162e80d3a1b6045cc4424fddab3", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Foo`\n-note: required by `Foo::bar`\n-  --> $DIR/associated-types-unconstrained.rs:5:5\n-   |\n-LL |     fn bar() -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "54f6556c083fd8b55e849b3e336716f9cc6828ae", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -9,11 +9,6 @@ note: required because of the requirements on the impl of `Visit` for `()`\n    |\n LL | impl<'a> Visit for () where\n    |          ^^^^^     ^^\n-note: required by `Visit::visit`\n-  --> $DIR/issue-44153.rs:6:5\n-   |\n-LL |     fn visit() {}\n-   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a94136cfea1fc44f162f9246256c1fd9c3e29db3", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -42,12 +42,10 @@ async fn bar() -> Result<(), ()> {\n     foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n     //~| HELP the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n-    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n-    //~| NOTE in this expansion of desugaring of operator `?`\n     Ok(())\n }\n \n@@ -67,12 +65,10 @@ async fn baz() -> Result<(), ()> {\n     t?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `T`\n     //~| HELP the trait `Try` is not implemented for `T`\n-    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n-    //~| NOTE in this expansion of desugaring of operator `?`\n \n \n     let _: i32 = tuple().0; //~ ERROR no field `0`"}, {"sha": "65c0bc695bfbc12732750ce08004c4027d6e705f", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,35 +5,25 @@ LL |     foo()?;\n    |     ^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n    = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     foo().await?;\n    |          ++++++\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/issue-61076.rs:67:5\n+  --> $DIR/issue-61076.rs:65:5\n    |\n LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n    |\n    = help: the trait `Try` is not implemented for `T`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     t.await?;\n    |      ++++++\n \n error[E0609]: no field `0` on type `impl Future<Output = Tuple>`\n-  --> $DIR/issue-61076.rs:78:26\n+  --> $DIR/issue-61076.rs:74:26\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -44,7 +34,7 @@ LL |     let _: i32 = tuple().await.0;\n    |                         ++++++\n \n error[E0609]: no field `a` on type `impl Future<Output = Struct>`\n-  --> $DIR/issue-61076.rs:82:28\n+  --> $DIR/issue-61076.rs:78:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -55,7 +45,7 @@ LL |     let _: i32 = struct_().await.a;\n    |                           ++++++\n \n error[E0599]: no method named `method` found for opaque type `impl Future<Output = Struct>` in the current scope\n-  --> $DIR/issue-61076.rs:86:15\n+  --> $DIR/issue-61076.rs:82:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future<Output = Struct>`\n@@ -66,13 +56,13 @@ LL |     struct_().await.method();\n    |               ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:94:9\n+  --> $DIR/issue-61076.rs:90:9\n    |\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/issue-61076.rs:58:21\n+  --> $DIR/issue-61076.rs:56:21\n    |\n LL | async fn tuple() -> Tuple {\n    |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type"}, {"sha": "eb24040404b90db8c60434af98708c8b523d84f7", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -25,11 +25,6 @@ LL |     [1; ().await];\n    |         ^^^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n-note: required by `poll`\n-  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n-   |\n-LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1e22373ba6ea10c7105ab0a90dbfa8143ffedfb5", "filename": "src/test/ui/async-await/issue-84841.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     test()?;\n    |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = ()>`\n    |\n    = help: the trait `Try` is not implemented for `impl Future<Output = ()>`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/issue-84841.rs:9:11\n@@ -25,11 +20,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e2ea72a1e617890583230fbc734040c272f528c6", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -34,11 +34,6 @@ LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-note: required by `poll`\n-  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n-   |\n-LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a55850d76c3d8c2e2b5818baad2cffd9b46cb1a0", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -11,11 +11,6 @@ LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-in-async.rs:17:10\n@@ -30,11 +25,6 @@ LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-in-async.rs:26:6\n@@ -49,11 +39,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2d400f9bbf5219024adacd9e7590d3cb4be7787c", "filename": "src/test/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -12,11 +12,6 @@ LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n    |\n    = help: the following implementations were found:\n              <() as Trait<3_u8>>\n-note: required by `WhereClause`\n-  --> $DIR/wfness.rs:8:1\n-   |\n-LL | struct WhereClause<const N: u8 = 2> where (): Trait<N>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Trait<1_u8>` is not satisfied\n   --> $DIR/wfness.rs:16:13"}, {"sha": "68ce61bd4a374d3118ba39ab1672716dfa178189", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `[Adt; _]: Foo` is not satisfied\n    |\n LL |         <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; _]`\n-   |\n-note: required by `Foo::bar`\n-  --> $DIR/dont-evaluate-array-len-on-err-1.rs:19:5\n-   |\n-LL |     fn bar() {}\n-   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1a8f4abf52aa3fe04891a0753f2fada263f1f79c", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -10,11 +10,6 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<101_u8>>\n              <() as Foo<102_u8>>\n            and 252 others\n-note: required by `Foo::test`\n-  --> $DIR/exhaustive-value.rs:2:5\n-   |\n-LL |     fn test() {}\n-   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cc874576cb7b95790db4a29a4b0b2f00520c23b1", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Clone)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a4870635de87001579455dc6a29d38689711bddc", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Clone)]\n LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "4507eeccc3aee51301a7212b8d4e8eb961b268e5", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a79be7f574d6f77fc83f67fe1d912a168107ebdb", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "dd2cfaf89bb8f7f13923bb9fec194dbef68026ff", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n-note: required by `std::default::Default::default`\n-  --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL |     fn default() -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "0674d635d3d0e2c234940954618897321787aeaa", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n-note: required by `std::default::Default::default`\n-  --> $SRC_DIR/core/src/default.rs:LL:COL\n-   |\n-LL |     fn default() -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7f24be959f01930b3b4a859f358d178871c9ad2a", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Hash)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ae2921a16b315a60556a42b319caf7e31ccc681b", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Hash)]\n LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "37b3af702a0c143fbce682529c90bebe6621f4ac", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "18624667d25ee77a798fce38827f50f88cd02deb", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-note: required by `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b52c5a0d6a504793f17d3234de0021d36006724b", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2ea0496ea0db784bbc0c2a8101e8aaa8737263f9", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "52cf0cf8cd75d9195089c26b7e1a4bc967b1f4ac", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ecdf8d8cb5931e5063c2ecfee74f28aa0b2a5b4a", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "fc8eb1ebfd3e2189576e73111a938400d7315801", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "38053495a0572aa5b3be11fe6d5271341fa6483f", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "1c07b98f983def4d70adb0f9238aaf9447f4fe6a", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "bf01252b07b8def98007e562d40bfb795cca07a1", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "d64b4509b260bc45981e381d7e8bfa933fde6f8e", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -47,11 +47,6 @@ LL | struct C {\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "8aedb4229e6d306a4f14e9f950232ae6879c4dea", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     f1.foo(1usize);\n    = help: the following implementations were found:\n              <Bar as Foo<i32>>\n              <Bar as Foo<u8>>\n-note: required by `Foo::foo`\n-  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:2:5\n-   |\n-LL |     fn foo(&self, a: A) -> A {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d6d5ce4d1a7d2b34c5249323e91e2d9123fd338a", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -10,11 +10,6 @@ LL |     f1.foo(1usize);\n              <Bar as Foo<i8>>\n              <Bar as Foo<u16>>\n            and 2 others\n-note: required by `Foo::foo`\n-  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:2:5\n-   |\n-LL |     fn foo(&self, a: A) -> A {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5381a717dc3cfd2312b14e3c2b0fecb6f88c48ae", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -12,11 +12,6 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n@@ -31,11 +26,6 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n@@ -51,11 +41,6 @@ LL |     Foo::<i32>::bar(&true);\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n            and 2 others\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7dcfe96b35c9a04b4a5600bcae3a93717bf76b7a", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     let cont: u32 = Generator::create();\n    |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Generator`\n-note: required by `Generator::create`\n-  --> $DIR/E0283.rs:2:5\n-   |\n-LL |     fn create() -> u32;\n-   |     ^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24\n@@ -29,11 +24,6 @@ LL | impl Into<u32> for Impl {\n    = note: and another `impl` found in the `core` crate:\n            - impl<T, U> Into<U> for T\n              where U: From<T>;\n-note: required by `into`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn into(self) -> T;\n-   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bee165437cb15152afa821ebf5f69210a9e56b43", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     format!(\"{:X}\", \"3\");\n    |                     ^^^ the trait `UpperHex` is not implemented for `str`\n    |\n    = note: required because of the requirements on the impl of `UpperHex` for `&str`\n-note: required by `std::fmt::UpperHex::fmt`\n-  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-   |\n-LL |     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "86a1c1a34e93036fc5213e83faf3c3de4c1239ab", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,8 +6,6 @@ fn main() {\n         //~| NOTE `&str` is not an iterator\n         //~| HELP the trait `Iterator` is not implemented for `&str`\n         //~| NOTE required because of the requirements on the impl of `IntoIterator` for `&str`\n-        //~| NOTE required by `into_iter`\n-        //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop"}, {"sha": "07ddc8ea78f391707e3a8b857fce0d3b0e916c1a", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     for c in \"asdf\" {\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0bdd75b3555be2f81d59822b2db16db1eb91fc0b", "filename": "src/test/ui/for/for-loop-bogosity.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     for x in bogus {\n    |\n    = help: the trait `Iterator` is not implemented for `MyStruct`\n    = note: required because of the requirements on the impl of `IntoIterator` for `MyStruct`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ee1afbe5b5843cf08116f79ad319255531e7f4ac", "filename": "src/test/ui/generator/yield-outside-generator-issue-78653.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -13,11 +13,6 @@ LL |     yield || for i in 0 { }\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "92e0f60079f72078831c52035ccfbb776c69b991", "filename": "src/test/ui/issues/issue-18400.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -12,11 +12,6 @@ LL | impl<'a, T, S> Set<&'a [T]> for S where\n    |                ^^^^^^^^^^^^     ^\n    = note: 128 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Set<&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>` for `{integer}`\n-note: required by `Set::contains`\n-  --> $DIR/issue-18400.rs:2:5\n-   |\n-LL |     fn contains(&self, _: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "41eefe3f8e9b54c605ec61a55fe3dbcbd7f6769e", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     for item in *things { *item = 0 }\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider mutably borrowing here\n    |\n LL |     for item in &mut *things { *item = 0 }"}, {"sha": "300c1272ef6c0eb9d4811a7b00148ffe81ae2ae6", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL | #[derive(Hash)]\n LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n-note: required by `std::hash::Hash::hash`\n-  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n-   |\n-LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "3beb9929244bfce2d248251636bbd5e8d299ab12", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:6:14\n@@ -21,11 +16,6 @@ LL |     for _ in false {}\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:9:28\n@@ -36,11 +26,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:2:13\n@@ -59,11 +44,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:22:28\n@@ -74,11 +54,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:25:14\n@@ -88,11 +63,6 @@ LL |     for _ in false {}\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:18:13"}, {"sha": "5570e887edce5752524df39fb77818b891334b27", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -11,11 +11,6 @@ LL | impl Foo for S5<u32> { fn xxx(&self) {} }\n    | ^^^^^^^^^^^^^^^^^^^^\n LL | impl Foo for S5<u64> { fn xxx(&self) {} }\n    | ^^^^^^^^^^^^^^^^^^^^\n-note: required by `Foo::xxx`\n-  --> $DIR/issue-29147.rs:10:13\n-   |\n-LL | trait Foo { fn xxx(&self); }\n-   |             ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b4c3f148e32b5e348f69eb422901bc0086e06529", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     Err(5)?;\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e7263148205d5e75192c61321bce72eba1815a04", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -22,11 +22,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n                   found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n@@ -37,11 +32,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-note: required by `std::iter::Iterator::next`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn next(&mut self) -> Option<Self::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "71e02f2fd86cc2426b7ee86332938ee673e23e78", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |                     in this derive macro expansion\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ffcac1f47057104c4e31cd06c3adc6277b0441a7", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -9,11 +9,6 @@ note: required because of the requirements on the impl of `Visit` for `()`\n    |\n LL | impl Visit for () where\n    |      ^^^^^     ^^\n-note: required by `Visit::visit`\n-  --> $DIR/issue-39970.rs:6:5\n-   |\n-LL |     fn visit() {}\n-   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "efe2ef504a2ba16fcea5c3a274b745f881dfd2f9", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -11,11 +11,6 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Tt`\n-note: required by `Tt::const_val`\n-  --> $DIR/issue-54954.rs:5:5\n-   |\n-LL |     const fn const_val<T: Sized>() -> usize {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0128b70e21643df4f287da95801adf708835f934", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -15,11 +15,6 @@ LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |\n    = note: cannot satisfy `_: Foo`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-note: required by `Foo::SIZE`\n-  --> $DIR/issue-58022.rs:2:5\n-   |\n-LL |     const SIZE: usize;\n-   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3356180974f88920d2c4244e03f9c3a87db00662", "filename": "src/test/ui/issues/issue-66353.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -11,12 +11,6 @@ LL |     _Func::< <() as _A>::AssocT >::func(());\n    |     ----------------------------------- ^^ the trait `_Func<_>` is not implemented for `()`\n    |     |\n    |     required by a bound introduced by this call\n-   |\n-note: required by `_Func::func`\n-  --> $DIR/issue-66353.rs:4:5\n-   |\n-LL |     fn func(_: Self);\n-   |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "da84a6b52da2bd28e6bdc888aea7619f450943ce", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -18,11 +18,6 @@ LL | impl Test<u32> for u64 {\n ...\n LL | impl Test<u64> for u64 {\n    | ^^^^^^^^^^^^^^^^^^^^^^\n-note: required by `Test::test`\n-  --> $DIR/issue-69455.rs:8:5\n-   |\n-LL |     fn test(self, rhs: Rhs) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider specifying the type argument in the method call\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum::<S>()));"}, {"sha": "629ccea2577bd70e81155f0666dc50ca3927542d", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:22\n@@ -27,11 +22,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-72690.rs:12:6\n@@ -48,11 +38,6 @@ LL |     |x| String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26\n@@ -68,11 +53,6 @@ LL |     |x| String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:18:17\n@@ -87,11 +67,6 @@ LL |     let _ = \"x\".as_ref();\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:22:5\n@@ -102,11 +77,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:22:22\n@@ -122,11 +92,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:29:5\n@@ -137,11 +102,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:29:22\n@@ -157,11 +117,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:38:5\n@@ -172,11 +127,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:38:22\n@@ -192,11 +142,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:5\n@@ -207,11 +152,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:22\n@@ -227,11 +167,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:54:5\n@@ -242,11 +177,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:54:22\n@@ -262,11 +192,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:63:5\n@@ -277,11 +202,6 @@ LL |     String::from(\"x\".as_ref());\n    = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n            - impl<> From<&String> for String;\n            - impl<> From<&str> for String;\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:63:22\n@@ -297,11 +217,6 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<Path> for str;\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}, {"sha": "5e2744bab95c1819b7bb067bd082df8a236ebc0d", "filename": "src/test/ui/iterators/integral.stderr", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     for _ in 42 {}\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u8` is not an iterator\n   --> $DIR/integral.rs:4:14\n@@ -22,11 +17,6 @@ LL |     for _ in 42 as u8 {}\n    = help: the trait `Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u8`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i8` is not an iterator\n   --> $DIR/integral.rs:6:14\n@@ -37,11 +27,6 @@ LL |     for _ in 42 as i8 {}\n    = help: the trait `Iterator` is not implemented for `i8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i8`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u16` is not an iterator\n   --> $DIR/integral.rs:8:14\n@@ -52,11 +37,6 @@ LL |     for _ in 42 as u16 {}\n    = help: the trait `Iterator` is not implemented for `u16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u16`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i16` is not an iterator\n   --> $DIR/integral.rs:10:14\n@@ -67,11 +47,6 @@ LL |     for _ in 42 as i16 {}\n    = help: the trait `Iterator` is not implemented for `i16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i16`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u32` is not an iterator\n   --> $DIR/integral.rs:12:14\n@@ -82,11 +57,6 @@ LL |     for _ in 42 as u32 {}\n    = help: the trait `Iterator` is not implemented for `u32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u32`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i32` is not an iterator\n   --> $DIR/integral.rs:14:14\n@@ -97,11 +67,6 @@ LL |     for _ in 42 as i32 {}\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i32`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u64` is not an iterator\n   --> $DIR/integral.rs:16:14\n@@ -112,11 +77,6 @@ LL |     for _ in 42 as u64 {}\n    = help: the trait `Iterator` is not implemented for `u64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u64`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i64` is not an iterator\n   --> $DIR/integral.rs:18:14\n@@ -127,11 +87,6 @@ LL |     for _ in 42 as i64 {}\n    = help: the trait `Iterator` is not implemented for `i64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i64`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `usize` is not an iterator\n   --> $DIR/integral.rs:20:14\n@@ -142,11 +97,6 @@ LL |     for _ in 42 as usize {}\n    = help: the trait `Iterator` is not implemented for `usize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `isize` is not an iterator\n   --> $DIR/integral.rs:22:14\n@@ -157,11 +107,6 @@ LL |     for _ in 42 as isize {}\n    = help: the trait `Iterator` is not implemented for `isize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `isize`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `{float}` is not an iterator\n   --> $DIR/integral.rs:24:14\n@@ -171,11 +116,6 @@ LL |     for _ in 42.0 {}\n    |\n    = help: the trait `Iterator` is not implemented for `{float}`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{float}`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "440a8960a4ca3a3543d89c02619de932abeb9520", "filename": "src/test/ui/iterators/ranges.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     for _ in ..10 {}\n    = help: the trait `Iterator` is not implemented for `RangeTo<{integer}>`\n    = note: `..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a bounded `Range`: `0..end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `RangeTo<{integer}>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `RangeToInclusive<{integer}>` is not an iterator\n   --> $DIR/ranges.rs:4:14\n@@ -22,11 +17,6 @@ LL |     for _ in ..=10 {}\n    = help: the trait `Iterator` is not implemented for `RangeToInclusive<{integer}>`\n    = note: `..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant to have a bounded `RangeInclusive`: `0..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `RangeToInclusive<{integer}>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d9c40fe1ba6a41aeca44a69db198d48b871a44c5", "filename": "src/test/ui/iterators/string.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     for _ in \"\".to_owned() {}\n    |\n    = help: the trait `Iterator` is not implemented for `String`\n    = note: required because of the requirements on the impl of `IntoIterator` for `String`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `&str` is not an iterator\n   --> $DIR/string.rs:4:14\n@@ -20,11 +15,6 @@ LL |     for _ in \"\" {}\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f33672433dee41c028d158f99d364d79c5d37ca3", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -20,11 +20,6 @@ LL | impl Foo for Vec<usize> {\n ...\n LL | impl Foo for Vec<isize> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by `Foo::foo`\n-  --> $DIR/method-ambig-one-trait-unknown-int-type.rs:6:5\n-   |\n-LL |     fn foo(&self) -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "a14253e384a3a52f9cf27e4068b14099ab83cb93", "filename": "src/test/ui/never_type/never-value-fallback-issue-66757.nofallback.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-value-fallback-issue-66757.nofallback.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     <E as From<_>>::from(never);\n    |\n    = help: the following implementations were found:\n              <E as From<!>>\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a62c21f2ee97168d4031711f53cb05f1c34e0478", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -11,11 +11,6 @@ LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "76aa128e242f922a88fbb099e7139470fa137b81", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:18\n@@ -22,11 +17,6 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:18\n@@ -37,11 +27,6 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:5"}, {"sha": "940763fae51b8096ebbf4591163393c76fe23441", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -7,11 +7,6 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/on-impl.rs:9:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5"}, {"sha": "4b191710c393ad141b0683173bc5f8b48a017146", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -25,11 +25,6 @@ LL | |     }.hi() {\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ce4e1553d28e52b54e970a233bda9994bc3c53b", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -12,11 +12,6 @@ LL |     for i in false..true {}\n    |\n    = note: required because of the requirements on the impl of `Iterator` for `std::ops::Range<bool>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `std::ops::Range<bool>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/range-1.rs:14:17"}, {"sha": "617afc995305e5956e7ce55582f718d7ae094991", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n@@ -25,11 +20,6 @@ LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n@@ -42,11 +32,6 @@ LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n@@ -59,11 +44,6 @@ LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n@@ -76,11 +56,6 @@ LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n@@ -93,11 +68,6 @@ LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-note: required by `std::cmp::PartialOrd::partial_cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::Range<usize>: Ord` is not satisfied\n@@ -109,11 +79,6 @@ LL | struct AllTheRanges {\n LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::Range<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: Ord` is not satisfied\n@@ -125,11 +90,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeTo<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: Ord` is not satisfied\n@@ -141,11 +101,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFrom<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFull: Ord` is not satisfied\n@@ -157,11 +112,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFull`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: Ord` is not satisfied\n@@ -173,11 +123,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: Ord` is not satisfied\n@@ -189,11 +134,6 @@ LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n-note: required by `std::cmp::Ord::cmp`\n-  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n-   |\n-LL |     fn cmp(&self, other: &Self) -> Ordering;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors"}, {"sha": "3fc5cb1b079734ad94d5a8df71daf9248b1fbaec", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -544,11 +544,6 @@ LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:44:19\n@@ -566,11 +561,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:54:8\n@@ -710,11 +700,6 @@ LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:94:11\n@@ -747,11 +732,6 @@ LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:108:22\n@@ -769,11 +749,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:118:11\n@@ -913,11 +888,6 @@ LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:171:5\n@@ -938,11 +908,6 @@ LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:181:16\n@@ -960,11 +925,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:196:10\n@@ -993,11 +953,6 @@ LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 103 previous errors; 1 warning emitted\n "}, {"sha": "92445e4073130678d69cd3e236409682a31cd079", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -3,12 +3,6 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n    |\n LL |     let a: u8 = Tr::C;\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n-   |\n-note: required by `Tr::C`\n-  --> $DIR/issue-29595.rs:2:5\n-   |\n-LL |     const C: Self;\n-   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c4fc44c737ec1aa8ad16a5511514b04fbc0cdcf3", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -24,11 +24,6 @@ note: required because of the requirements on the impl of `ToA<T>` for `U`\n    |\n LL | impl<T, U> ToA<U> for T\n    |            ^^^^^^     ^\n-note: required by `ToA::to`\n-  --> $DIR/issue-39448.rs:31:5\n-   |\n-LL |     fn to(self) -> T;\n-   |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "085c56870b365b42dbaffff0f88045c3f7bd6178", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -82,11 +82,6 @@ note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n-note: required by `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:5\n-   |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b831f3b7a76d23aef2deaf317863be67d68ee0c8", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -82,11 +82,6 @@ note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n-note: required by `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:5\n-   |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7972437771399f71f356ad3d222c0b7cb0921263", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     let _: &[i8] = data.into();\n              <[T; LANES] as From<Simd<T, LANES>>>\n              <[bool; LANES] as From<Mask<T, LANES>>>\n    = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`\n-note: required by `into`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn into(self) -> T;\n-   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f257bb9b0e88744ea061f22a8d9ad939f6a9ea72", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     SadGirl {}.call()?;\n    |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n    = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     SadGirl {}.call().await?;"}, {"sha": "fd2a44f9a82ba448f0ad28574d18342cff567635", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |   for _ in v[1..] {\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for _ in &v[1..] {\n@@ -26,11 +21,6 @@ LL |   for _ in v[1..] {\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for _ in &v[1..] {\n@@ -46,11 +36,6 @@ LL |   for i2 in v2[1..] {\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for i2 in &v2[1..] {\n@@ -66,11 +51,6 @@ LL |   for i2 in v2[1..] {\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider borrowing here\n    |\n LL |   for i2 in &v2[1..] {"}, {"sha": "1083b2f971311c21d28cb86a6feeb2ba11e7eff5", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -9,11 +9,6 @@ LL |     for (i, _) in &v.iter().enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "197b19a1bffc273fb9b8ec02226c781c9cda2c69", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -9,11 +9,6 @@ LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bb0cceac1db7b6d9a625627575b45a8c547d2f55", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -13,11 +13,6 @@ LL | |          .enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-note: required by `into_iter`\n-  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bff84363e9e511ee54f0fc5965417474454058c", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -3,24 +3,13 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n-   |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:30:7\n    |\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n@@ -31,24 +20,13 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n    |\n LL |     <dyn CompareToInts>::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n-   |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:38:5\n    |\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n@@ -63,11 +41,6 @@ LL |     assert_eq!(22_i64.same_as(22), true);\n    = help: the following implementations were found:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n-note: required by `CompareTo::same_as`\n-  --> $DIR/repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "45b1e1095c7d8db9629fb9e906b6787ce679a1cf", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     the_foos: Vec<Foo>,\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Foo`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "3c4a5d95c137ec6e9cdd752ca26ecef24f171c64", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -34,11 +34,6 @@ LL |     opts.get(opt.as_ref());\n            - impl AsRef<Path> for String;\n            - impl AsRef<[u8]> for String;\n            - impl AsRef<str> for String;\n-note: required by `as_ref`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn as_ref(&self) -> &T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n help: use the fully qualified path for the potential candidates\n    |\n LL |     opts.get(<String as AsRef<OsStr>>::as_ref(opt));\n@@ -64,11 +59,6 @@ LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect(\n            - impl From<bool> for u32;\n            - impl From<char> for u32;\n            and 3 more\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:36:16\n@@ -85,11 +75,6 @@ LL | impl Foo<'static, u32> for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> Foo<'a, i16> for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by `Foo::foo`\n-  --> $DIR/issue-77982.rs:18:5\n-   |\n-LL |     fn foo(&self) -> Box<T> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:40:19\n@@ -106,11 +91,6 @@ LL | impl<'a> Bar<'static, u32> for &'a () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl<'a> Bar<'a, i16> for &'a () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by `Bar::bar`\n-  --> $DIR/issue-77982.rs:24:5\n-   |\n-LL |     fn bar(&self) -> Box<T> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3e83db142e0871cbbd45983b825c8e25470aa539", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -10,11 +10,6 @@ LL |     bar: &'a mut T\n    = help: the following implementations were found:\n              <&T as Clone>\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n-note: required by `clone`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL |     fn clone(&self) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "3d5bf3448bd5d64539c0bfc3067af8e0ef9ee097", "filename": "src/test/ui/traits/reservation-impl/no-use.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |     <() as MyTrait>::foo(&());\n    |\n    = help: the following implementations were found:\n              <() as MyTrait>\n-note: required by `MyTrait::foo`\n-  --> $DIR/no-use.rs:5:17\n-   |\n-LL | trait MyTrait { fn foo(&self); }\n-   |                 ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1a0bcf00a673a6ba1858e2e86b45978ca288922c", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     let _f: base::Foo = base::HasNew::new();\n    |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: HasNew<Foo>`\n-note: required by `HasNew::new`\n-  --> $DIR/static-method-generic-inference.rs:8:9\n-   |\n-LL |         fn new() -> T;\n-   |         ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e2cdd368888a8d6496568e883110a4e3b0f8f4be", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -49,11 +49,6 @@ error[E0277]: the trait bound `u64: From<T>` is not satisfied\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u64`\n    |\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<T> {\n@@ -65,11 +60,6 @@ error[E0277]: the trait bound `u64: From<<T as Iterator>::Item>` is not satisfie\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<<T as Iterator>::Item>` is not implemented for `u64`\n    |\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<<T as Iterator>::Item> {\n@@ -80,12 +70,6 @@ error[E0277]: the trait bound `Misc<_>: From<T>` is not satisfied\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `Misc<_>`\n-   |\n-note: required by `from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn from(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:28:20"}, {"sha": "5eec012458450af92fef905ae1913d529728b537", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -92,11 +92,6 @@ LL | impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n LL | impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n-note: required by `bar::dup`\n-  --> $DIR/test-2.rs:4:13\n-   |\n-LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/test-2.rs:11:8\n@@ -111,11 +106,6 @@ LL | impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n LL | impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n    | ^^^^^^^^^^^^^^^^\n-note: required by `bar::blah`\n-  --> $DIR/test-2.rs:4:36\n-   |\n-LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |                                    ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "02c5d5d2484039a1f47b43042714d07ee0ed755f", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -27,12 +27,6 @@ LL |     Foo::test(&4i32);\n    |     --------- ^^^^^ the trait `Foo` is not implemented for `i32`\n    |     |\n    |     required by a bound introduced by this call\n-   |\n-note: required by `Foo::test`\n-  --> $DIR/trivial-bounds-leak.rs:5:5\n-   |\n-LL |     fn test(&self);\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:26:22"}, {"sha": "cf3a07808de684bbcffa5e99e51e34e734f773ba", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -8,11 +8,6 @@ LL |         Err(\"\")?;\n    = help: the following implementations were found:\n              <TryFromSliceError as From<Infallible>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`\n   --> $DIR/try-block-bad-type.rs:12:9\n@@ -33,11 +28,6 @@ LL |     let res: () = try { };\n    |                         ^ could not wrap the final value of the block as `()` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-note: required by `from_output`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_output(output: Self::Output) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-bad-type.rs:20:26\n@@ -46,11 +36,6 @@ LL |     let res: i32 = try { 5 };\n    |                          ^ could not wrap the final value of the block as `i32` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `i32`\n-note: required by `from_output`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_output(output: Self::Output) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "62cc26dd4010d4398dc2c674ea059f211eb31649", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     while try { false } {}\n    |                 ^^^^^ could not wrap the final value of the block as `bool` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-note: required by `from_output`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_output(output: Self::Output) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "80c5e6f529cd671d459eac7bd7c4c027a42600cf", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -11,11 +11,6 @@ LL |     Ok(Err(123_i32)?)\n              <u8 as From<NonZeroU8>>\n              <u8 as From<bool>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:11:12\n@@ -29,11 +24,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n@@ -46,11 +36,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n@@ -63,11 +48,6 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n@@ -80,11 +60,6 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n@@ -97,11 +72,6 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n@@ -115,11 +85,6 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n@@ -134,11 +99,6 @@ LL | | }\n    |\n    = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n    = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "aadfbf61f28f8d600952eb5c7e4c45e57a5f0e31", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -10,11 +10,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n@@ -28,11 +23,6 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a6badd1903885cfaf9fb503a22de18eb415c9095", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -10,11 +10,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:14:10\n@@ -29,11 +24,6 @@ LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:26:14\n@@ -46,11 +36,6 @@ LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:39:14\n@@ -63,11 +48,6 @@ LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "27e33bc022efb1fddf8f2218b69e7f866415227a", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -10,11 +10,6 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:13:6\n@@ -28,11 +23,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ad55f40b5b6382703bffae17bf321c29d55439c7", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -12,11 +12,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/try-operator-on-main.rs:10:5\n@@ -25,11 +20,6 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:10:7\n@@ -47,11 +37,6 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-note: required by `from_residual`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn from_residual(residual: R) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n   --> $DIR/try-operator-on-main.rs:14:25\n@@ -72,11 +57,6 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-note: required by `branch`\n-  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n-   |\n-LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2a61547997b63c5c7e5ed67697bb16829874c240", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -29,36 +29,18 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n    |\n LL | struct Bounds<T:Copy=String>(T);\n    |                 ^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-note: required by `Bounds`\n-  --> $DIR/type-check-defaults.rs:11:1\n-   |\n-LL | struct Bounds<T:Copy=String>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:14:42\n    |\n LL | struct WhereClause<T=String>(T) where T: Copy;\n    |                                          ^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-note: required by `WhereClause`\n-  --> $DIR/type-check-defaults.rs:14:1\n-   |\n-LL | struct WhereClause<T=String>(T) where T: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:17:20\n    |\n LL | trait TraitBound<T:Copy=String> {}\n    |                    ^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-note: required by `TraitBound`\n-  --> $DIR/type-check-defaults.rs:17:1\n-   |\n-LL | trait TraitBound<T:Copy=String> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:25\n@@ -83,11 +65,6 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |                                                                  ^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n-note: required by `ProjectionPred`\n-  --> $DIR/type-check-defaults.rs:24:1\n-   |\n-LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "53610985f31da73e6da9d56cf90e31bc596c1a95", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -4,11 +4,6 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n-note: required by `Tr::op`\n-  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n-   |\n-LL |     fn op(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n@@ -20,11 +15,6 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n-note: required by `Tr::op`\n-  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n-   |\n-LL |     fn op(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {"}, {"sha": "d0bc432a1cd18e8788841732319afda3be4f245c", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -5,11 +5,6 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n-note: required by `add`\n-  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:6:28"}, {"sha": "03932d5ed03479a5c3a85d1fb7fa2212a702f348", "filename": "src/test/ui/unevaluated_fixed_size_array_len.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/563db4245b5373794be8e06ea878f81661888fa0/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr?ref=563db4245b5373794be8e06ea878f81661888fa0", "patch": "@@ -6,11 +6,6 @@ LL |     <[(); 0] as Foo>::foo()\n    |\n    = help: the following implementations were found:\n              <[(); 1] as Foo>\n-note: required by `Foo::foo`\n-  --> $DIR/unevaluated_fixed_size_array_len.rs:4:5\n-   |\n-LL |     fn foo();\n-   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}]}