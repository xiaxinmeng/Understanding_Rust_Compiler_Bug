{"sha": "61a941b8badbce727085c505068d72fa3e737f5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTk0MWI4YmFkYmNlNzI3MDg1YzUwNTA2OGQ3MmZhM2U3MzdmNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-05T14:45:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-05T14:45:09Z"}, "message": "Auto merge of #87737 - LeSeulArtichaut:unsafeck-less-freeze, r=oli-obk\n\nOnly compute `is_freeze` for layout-constrained ADTs\n\nPlaces are usually shallow and quick to visit. By contrast, computing `is_freeze` can be much costlier, involving inference and trait solving. Making sure to call `is_freeze` only when necessary should be beneficial for performance in most cases.\n\nSee [this comparison](https://perf.rust-lang.org/compare.html?start=81f08a4763e7537b92506fa5a597e6bf774d20cc&end=56a58d347b1c7dd0c2984b8fc3930c408e26fbc2&stat=instructions%3Au) from #87710.\n\nr? `@oli-obk`", "tree": {"sha": "dd8f7bad1a1277d6fc47e0bf78ad1db40321af27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd8f7bad1a1277d6fc47e0bf78ad1db40321af27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a941b8badbce727085c505068d72fa3e737f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a941b8badbce727085c505068d72fa3e737f5b", "html_url": "https://github.com/rust-lang/rust/commit/61a941b8badbce727085c505068d72fa3e737f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a941b8badbce727085c505068d72fa3e737f5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21e1d6a417330af5f4693004230fd0efdf9445a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21e1d6a417330af5f4693004230fd0efdf9445a", "html_url": "https://github.com/rust-lang/rust/commit/e21e1d6a417330af5f4693004230fd0efdf9445a"}, {"sha": "2b169ccc9611ce92d3c5d747fbd99c3e7a990cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b169ccc9611ce92d3c5d747fbd99c3e7a990cf0", "html_url": "https://github.com/rust-lang/rust/commit/2b169ccc9611ce92d3c5d747fbd99c3e7a990cf0"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "42e4fc3839e09c67f0b55501ef3d8951f9778f7e", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/61a941b8badbce727085c505068d72fa3e737f5b/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a941b8badbce727085c505068d72fa3e737f5b/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=61a941b8badbce727085c505068d72fa3e737f5b", "patch": "@@ -456,27 +456,25 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     return; // we have already visited everything by now\n                 }\n             }\n-            ExprKind::Borrow { borrow_kind, arg } => match borrow_kind {\n-                BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique => {\n-                    if !self.thir[arg]\n-                        .ty\n-                        .is_freeze(self.tcx.at(self.thir[arg].span), self.param_env)\n-                    {\n-                        let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n-                        visit::walk_expr(&mut visitor, expr);\n-                        if visitor.found {\n-                            self.requires_unsafe(expr.span, BorrowOfLayoutConstrainedField);\n+            ExprKind::Borrow { borrow_kind, arg } => {\n+                let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n+                visit::walk_expr(&mut visitor, expr);\n+                if visitor.found {\n+                    match borrow_kind {\n+                        BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique\n+                            if !self.thir[arg]\n+                                .ty\n+                                .is_freeze(self.tcx.at(self.thir[arg].span), self.param_env) =>\n+                        {\n+                            self.requires_unsafe(expr.span, BorrowOfLayoutConstrainedField)\n                         }\n+                        BorrowKind::Mut { .. } => {\n+                            self.requires_unsafe(expr.span, MutationOfLayoutConstrainedField)\n+                        }\n+                        BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique => {}\n                     }\n                 }\n-                BorrowKind::Mut { .. } => {\n-                    let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n-                    visit::walk_expr(&mut visitor, expr);\n-                    if visitor.found {\n-                        self.requires_unsafe(expr.span, MutationOfLayoutConstrainedField);\n-                    }\n-                }\n-            },\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, expr);"}]}