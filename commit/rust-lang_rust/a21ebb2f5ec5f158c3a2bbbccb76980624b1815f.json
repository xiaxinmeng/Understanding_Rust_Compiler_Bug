{"sha": "a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMWViYjJmNWVjNWYxNThjM2EyYmJiY2NiNzY5ODA2MjRiMTgxNWY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-15T11:45:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-15T11:45:04Z"}, "message": "Fix bad argument type of pprust::print_type\n\nAST types are boxed, there's no need for every caller to do the unboxing", "tree": {"sha": "83d296fe8a1e6b6effadc8253cb2b302d95eb549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d296fe8a1e6b6effadc8253cb2b302d95eb549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "html_url": "https://github.com/rust-lang/rust/commit/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1570949ef104059f0d222afaf7b900224276f130", "url": "https://api.github.com/repos/rust-lang/rust/commits/1570949ef104059f0d222afaf7b900224276f130", "html_url": "https://github.com/rust-lang/rust/commit/1570949ef104059f0d222afaf7b900224276f130"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "948dac658cd77cbdce132e49299bbda420560b93", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "patch": "@@ -151,7 +151,7 @@ fn check_states_against_conditions(fcx: &fn_ctxt, f: &_fn,\n                                         return a value\");\n         fcx.ccx.tcx.sess.span_fatal(f.decl.output.span,\n                                     \"see declared return type of '\" +\n-                                        ty_to_str(*f.decl.output) + \"'\");\n+                                        ty_to_str(f.decl.output) + \"'\");\n     } else if (f.decl.cf == noreturn) {\n         // check that this really always fails\n         // Note that it's ok for i_diverge and i_return to both be true."}, {"sha": "de0e459c65057fa7e3ffdfdbae427c357ad7930d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "patch": "@@ -90,7 +90,7 @@ fn print_crate(cm: &codemap, crate: @ast::crate, filename: str,\n     eof(s.s);\n }\n \n-fn ty_to_str(ty: &ast::ty) -> str { be to_str(ty, print_type); }\n+fn ty_to_str(ty: &@ast::ty) -> str { be to_str(ty, print_type); }\n \n fn pat_to_str(pat: &@ast::pat) -> str { be to_str(pat, print_pat); }\n \n@@ -268,9 +268,7 @@ fn print_native_mod(s: &ps, nmod: &ast::native_mod,\n     for item: @ast::native_item  in nmod.items { print_native_item(s, item); }\n }\n \n-fn print_boxed_type(s: &ps, ty: &@ast::ty) { print_type(s, *ty); }\n-\n-fn print_type(s: &ps, ty: &ast::ty) {\n+fn print_type(s: &ps, ty: &@ast::ty) {\n     maybe_print_comment(s, ty.span.lo);\n     ibox(s, 0u);\n     alt ty.node {\n@@ -293,19 +291,19 @@ fn print_type(s: &ps, ty: &ast::ty) {\n           ast::maybe_mut. { word_space(s, \"mutable?\"); }\n           ast::imm. {}\n         }\n-        print_type(s, *mt.ty);\n+        print_type(s, mt.ty);\n         word(s.s, \"]\");\n       }\n       ast::ty_ptr(mt) { word(s.s, \"*\"); print_mt(s, mt); }\n       ast::ty_task. { word(s.s, \"task\"); }\n       ast::ty_port(t) {\n         word(s.s, \"port[\");\n-        print_type(s, *t);\n+        print_type(s, t);\n         word(s.s, \"]\");\n       }\n       ast::ty_chan(t) {\n         word(s.s, \"chan[\");\n-        print_type(s, *t);\n+        print_type(s, t);\n         word(s.s, \"]\");\n       }\n       ast::ty_rec(fields) {\n@@ -315,7 +313,7 @@ fn print_type(s: &ps, ty: &ast::ty) {\n             print_mutability(s, f.node.mt.mut);\n             word(s.s, f.node.ident);\n             word_space(s, \":\");\n-            print_type(s, *f.node.mt.ty);\n+            print_type(s, f.node.mt.ty);\n             end(s);\n         }\n         fn get_span(f: &ast::ty_field) -> codemap::span { ret f.span; }\n@@ -324,7 +322,7 @@ fn print_type(s: &ps, ty: &ast::ty) {\n       }\n       ast::ty_tup(elts) {\n           popen(s);\n-          commasep(s, inconsistent, elts, print_boxed_type);\n+          commasep(s, inconsistent, elts, print_type);\n           pclose(s);\n       }\n       ast::ty_fn(proto, inputs, output, cf, constrs) {\n@@ -347,7 +345,7 @@ fn print_type(s: &ps, ty: &ast::ty) {\n       ast::ty_path(path, _) { print_path(s, path); }\n       ast::ty_type. { word(s.s, \"type\"); }\n       ast::ty_constr(t, cs) {\n-        print_type(s, *t);\n+        print_type(s, t);\n         space(s.s);\n         word(s.s, ast_ty_constrs_str(cs));\n       }\n@@ -396,7 +394,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n       ast::item_const(ty, expr) {\n         head(s, \"const\");\n         word_space(s, item.ident + \":\");\n-        print_type(s, *ty);\n+        print_type(s, ty);\n         space(s.s);\n         end(s); // end the head-ibox\n \n@@ -451,7 +449,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n \n         space(s.s);\n         word_space(s, \"=\");\n-        print_type(s, *ty);\n+        print_type(s, ty);\n         word(s.s, \";\");\n         end(s); // end the outer ibox\n       }\n@@ -469,7 +467,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n         space(s.s);\n         if newtype {\n             word_space(s, \"=\");\n-            print_type(s, *variants.(0).node.args.(0).ty);\n+            print_type(s, variants.(0).node.args.(0).ty);\n             word(s.s, \";\");\n             end(s);\n         } else {\n@@ -481,7 +479,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n                 if ivec::len(v.node.args) > 0u {\n                     popen(s);\n                     fn print_variant_arg(s: &ps, arg: &ast::variant_arg) {\n-                        print_type(s, *arg.ty);\n+                        print_type(s, arg.ty);\n                     }\n                     commasep(s, consistent, v.node.args, print_variant_arg);\n                     pclose(s);\n@@ -501,7 +499,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n             ibox(s, indent_unit);\n             print_mutability(s, field.mut);\n             word_space(s, field.ident + \":\");\n-            print_type(s, *field.ty);\n+            print_type(s, field.ty);\n             end(s);\n         }\n         fn get_span(f: &ast::obj_field) -> codemap::span { ret f.ty.span; }\n@@ -526,7 +524,7 @@ fn print_item(s: &ps, item: &@ast::item) {\n         print_type_params(s, tps);\n         popen(s);\n         word_space(s, dt.decl.inputs.(0).ident + \":\");\n-        print_type(s, *dt.decl.inputs.(0).ty);\n+        print_type(s, dt.decl.inputs.(0).ty);\n         pclose(s);\n         space(s.s);\n         print_block(s, dt.body);\n@@ -697,7 +695,7 @@ fn print_mac(s: &ps, m: &ast::mac) {\n       }\n       ast::mac_embed_type(ty) {\n         word(s.s, \"#<\");\n-        print_type(s, *ty);\n+        print_type(s, ty);\n         word(s.s, \">\");\n       }\n       ast::mac_embed_block(blk) {\n@@ -803,7 +801,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         print_maybe_parens(s, expr, parse::parser::as_prec);\n         space(s.s);\n         word_space(s, \"as\");\n-        print_type(s, *ty);\n+        print_type(s, ty);\n       }\n       ast::expr_if(test, blk, elseopt) {\n         print_if(s, test, blk, elseopt, false);\n@@ -981,7 +979,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         word(s.s, \"port\");\n         alt t.node {\n           ast::ty_infer. { }\n-          _ { word(s.s, \"[\"); print_type(s, *t); word(s.s, \"]\"); }\n+          _ { word(s.s, \"[\"); print_type(s, t); word(s.s, \"]\"); }\n         }\n         popen(s);\n         pclose(s);\n@@ -1001,7 +999,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n             ibox(s, indent_unit);\n             print_mutability(s, field.mut);\n             word_space(s, field.ident + \":\");\n-            print_type(s, *field.ty);\n+            print_type(s, field.ty);\n             space(s.s);\n             word_space(s, \"=\");\n             print_expr(s, field.expr);\n@@ -1055,7 +1053,7 @@ fn print_local_decl(s: &ps, loc: &@ast::local) {\n     print_pat(s, loc.node.pat);\n     alt loc.node.ty.node {\n       ast::ty_infer. { }\n-      _ { word_space(s, \":\"); print_type(s, *loc.node.ty); }\n+      _ { word_space(s, \":\"); print_type(s, loc.node.ty); }\n     }\n }\n \n@@ -1108,7 +1106,7 @@ fn print_path(s: &ps, path: &ast::path) {\n     }\n     if ivec::len(path.node.types) > 0u {\n         word(s.s, \"[\");\n-        commasep(s, inconsistent, path.node.types, print_boxed_type);\n+        commasep(s, inconsistent, path.node.types, print_type);\n         word(s.s, \"]\");\n     }\n }\n@@ -1174,7 +1172,7 @@ fn print_fn_args_and_ret(s: &ps, decl: &ast::fn_decl,\n         ibox(s, indent_unit);\n         word_space(s, x.ident + \":\");\n         print_alias(s, x.mode);\n-        print_type(s, *x.ty);\n+        print_type(s, x.ty);\n         end(s);\n     }\n     commasep(s, inconsistent, decl.inputs, print_arg);\n@@ -1184,7 +1182,7 @@ fn print_fn_args_and_ret(s: &ps, decl: &ast::fn_decl,\n     if decl.output.node != ast::ty_nil {\n         space_if_not_bol(s);\n         word_space(s, \"->\");\n-        print_type(s, *decl.output);\n+        print_type(s, decl.output);\n     }\n }\n \n@@ -1316,7 +1314,7 @@ fn print_mutability(s: &ps, mut: &ast::mutability) {\n \n fn print_mt(s: &ps, mt: &ast::mt) {\n     print_mutability(s, mt.mut);\n-    print_type(s, *mt.ty);\n+    print_type(s, mt.ty);\n }\n \n fn print_ty_fn(s: &ps, proto: &ast::proto, id: &option::t[str],\n@@ -1329,7 +1327,7 @@ fn print_ty_fn(s: &ps, proto: &ast::proto, id: &option::t[str],\n     popen(s);\n     fn print_arg(s: &ps, input: &ast::ty_arg) {\n         print_alias(s, input.node.mode);\n-        print_type(s, *input.node.ty);\n+        print_type(s, input.node.ty);\n     }\n     commasep(s, inconsistent, inputs, print_arg);\n     pclose(s);\n@@ -1339,7 +1337,7 @@ fn print_ty_fn(s: &ps, proto: &ast::proto, id: &option::t[str],\n         ibox(s, indent_unit);\n         word_space(s, \"->\");\n         alt cf {\n-          ast::return. { print_type(s, *output); }\n+          ast::return. { print_type(s, output); }\n           ast::noreturn. { word_nbsp(s, \"!\"); }\n         }\n         end(s);"}, {"sha": "30e77fa4a5993084e275bf15e33f091c4798cdac", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "patch": "@@ -59,7 +59,7 @@ fn log_expr(e: &ast::expr) { log print::pprust::expr_to_str(@e); }\n \n fn log_expr_err(e: &ast::expr) { log_err print::pprust::expr_to_str(@e); }\n \n-fn log_ty_err(t: &ty) { log_err print::pprust::ty_to_str(t); }\n+fn log_ty_err(t: &@ty) { log_err print::pprust::ty_to_str(t); }\n \n fn log_pat_err(p: &@pat) { log_err print::pprust::pat_to_str(p); }\n "}]}