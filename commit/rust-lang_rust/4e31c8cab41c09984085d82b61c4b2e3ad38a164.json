{"sha": "4e31c8cab41c09984085d82b61c4b2e3ad38a164", "node_id": "C_kwDOAAsO6NoAKDRlMzFjOGNhYjQxYzA5OTg0MDg1ZDgyYjYxYzRiMmUzYWQzOGExNjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T10:59:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T10:59:16Z"}, "message": "Auto merge of #9389 - lukaslueg:penmacro, r=llogiq\n\nDon't lint literal `None` from expansion\n\nThis addresses https://github.com/rust-lang/rust-clippy/pull/9288#issuecomment-1229398524: If the literal `None` is from expansion, we never lint. This is correct because e.g. replacing the call to `option_env!` with whatever that macro expanded to at the time of linting is certainly wrong.\n\nchangelog: Don't lint [`partialeq_to_none`] for macro-expansions", "tree": {"sha": "9392db9b0309a74c5003fc0b7c3395eae5238dd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9392db9b0309a74c5003fc0b7c3395eae5238dd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e31c8cab41c09984085d82b61c4b2e3ad38a164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e31c8cab41c09984085d82b61c4b2e3ad38a164", "html_url": "https://github.com/rust-lang/rust/commit/4e31c8cab41c09984085d82b61c4b2e3ad38a164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e31c8cab41c09984085d82b61c4b2e3ad38a164/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "html_url": "https://github.com/rust-lang/rust/commit/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa"}, {"sha": "c542f1fe3fcc48e1f8a299a7cbd07e2335b1f5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c542f1fe3fcc48e1f8a299a7cbd07e2335b1f5f3", "html_url": "https://github.com/rust-lang/rust/commit/c542f1fe3fcc48e1f8a299a7cbd07e2335b1f5f3"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "000b0ba7a148e75e503dd9f73ca2061ead430189", "filename": "clippy_lints/src/partialeq_to_none.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e31c8cab41c09984085d82b61c4b2e3ad38a164/clippy_lints%2Fsrc%2Fpartialeq_to_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e31c8cab41c09984085d82b61c4b2e3ad38a164/clippy_lints%2Fsrc%2Fpartialeq_to_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_to_none.rs?ref=4e31c8cab41c09984085d82b61c4b2e3ad38a164", "patch": "@@ -53,7 +53,8 @@ impl<'tcx> LateLintPass<'tcx> for PartialeqToNone {\n \n         // If the expression is a literal `Option::None`\n         let is_none_ctor = |expr: &Expr<'_>| {\n-            matches!(&peel_hir_expr_refs(expr).0.kind,\n+            !expr.span.from_expansion()\n+                && matches!(&peel_hir_expr_refs(expr).0.kind,\n             ExprKind::Path(p) if is_lang_ctor(cx, p, LangItem::OptionNone))\n         };\n "}, {"sha": "4644ea8f51da1ecd6def7c067aff736cdcebfd8a", "filename": "tests/ui/partialeq_to_none.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e31c8cab41c09984085d82b61c4b2e3ad38a164/tests%2Fui%2Fpartialeq_to_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4e31c8cab41c09984085d82b61c4b2e3ad38a164/tests%2Fui%2Fpartialeq_to_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.fixed?ref=4e31c8cab41c09984085d82b61c4b2e3ad38a164", "patch": "@@ -26,6 +26,18 @@ fn optref() -> &'static &'static Option<()> {\n     &&None\n }\n \n+pub fn macro_expansion() {\n+    macro_rules! foo {\n+        () => {\n+            None::<()>\n+        };\n+    }\n+\n+    let _ = foobar() == foo!();\n+    let _ = foo!() == foobar();\n+    let _ = foo!() == foo!();\n+}\n+\n fn main() {\n     let x = Some(0);\n "}, {"sha": "61011b3a8c553cdb4a70704a1f46aaeea838494a", "filename": "tests/ui/partialeq_to_none.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e31c8cab41c09984085d82b61c4b2e3ad38a164/tests%2Fui%2Fpartialeq_to_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e31c8cab41c09984085d82b61c4b2e3ad38a164/tests%2Fui%2Fpartialeq_to_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.rs?ref=4e31c8cab41c09984085d82b61c4b2e3ad38a164", "patch": "@@ -26,6 +26,18 @@ fn optref() -> &'static &'static Option<()> {\n     &&None\n }\n \n+pub fn macro_expansion() {\n+    macro_rules! foo {\n+        () => {\n+            None::<()>\n+        };\n+    }\n+\n+    let _ = foobar() == foo!();\n+    let _ = foo!() == foobar();\n+    let _ = foo!() == foo!();\n+}\n+\n fn main() {\n     let x = Some(0);\n "}, {"sha": "d06ab7aee558b3e04b59948413d022199a980956", "filename": "tests/ui/partialeq_to_none.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e31c8cab41c09984085d82b61c4b2e3ad38a164/tests%2Fui%2Fpartialeq_to_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e31c8cab41c09984085d82b61c4b2e3ad38a164/tests%2Fui%2Fpartialeq_to_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.stderr?ref=4e31c8cab41c09984085d82b61c4b2e3ad38a164", "patch": "@@ -7,55 +7,55 @@ LL |     if f != None { \"yay\" } else { \"nay\" }\n    = note: `-D clippy::partialeq-to-none` implied by `-D warnings`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:32:13\n+  --> $DIR/partialeq_to_none.rs:44:13\n    |\n LL |     let _ = x == None;\n    |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:33:13\n+  --> $DIR/partialeq_to_none.rs:45:13\n    |\n LL |     let _ = x != None;\n    |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:34:13\n+  --> $DIR/partialeq_to_none.rs:46:13\n    |\n LL |     let _ = None == x;\n    |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:35:13\n+  --> $DIR/partialeq_to_none.rs:47:13\n    |\n LL |     let _ = None != x;\n    |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:37:8\n+  --> $DIR/partialeq_to_none.rs:49:8\n    |\n LL |     if foobar() == None {}\n    |        ^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `foobar().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:39:8\n+  --> $DIR/partialeq_to_none.rs:51:8\n    |\n LL |     if bar().ok() != None {}\n    |        ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `bar().ok().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:41:13\n+  --> $DIR/partialeq_to_none.rs:53:13\n    |\n LL |     let _ = Some(1 + 2) != None;\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `Some(1 + 2).is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:43:13\n+  --> $DIR/partialeq_to_none.rs:55:13\n    |\n LL |     let _ = { Some(0) } == None;\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `{ Some(0) }.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:45:13\n+  --> $DIR/partialeq_to_none.rs:57:13\n    |\n LL |       let _ = {\n    |  _____________^\n@@ -77,31 +77,31 @@ LL ~     }.is_some();\n    |\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:55:13\n+  --> $DIR/partialeq_to_none.rs:67:13\n    |\n LL |     let _ = optref() == &&None;\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:56:13\n+  --> $DIR/partialeq_to_none.rs:68:13\n    |\n LL |     let _ = &&None != optref();\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:57:13\n+  --> $DIR/partialeq_to_none.rs:69:13\n    |\n LL |     let _ = **optref() == None;\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:58:13\n+  --> $DIR/partialeq_to_none.rs:70:13\n    |\n LL |     let _ = &None != *optref();\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:61:13\n+  --> $DIR/partialeq_to_none.rs:73:13\n    |\n LL |     let _ = None != *x;\n    |             ^^^^^^^^^^ help: use `Option::is_some()` instead: `(*x).is_some()`"}]}