{"sha": "e0c8780a5baa78cbb5e8759d5783000547c0db75", "node_id": "C_kwDOAAsO6NoAKGUwYzg3ODBhNWJhYTc4Y2JiNWU4NzU5ZDU3ODMwMDA1NDdjMGRiNzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-24T03:57:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-24T04:46:11Z"}, "message": "Better suggestions for Fn trait selection errors", "tree": {"sha": "4a07c7be096d8d5ec4b9bd02e14072ccaba8bd49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a07c7be096d8d5ec4b9bd02e14072ccaba8bd49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c8780a5baa78cbb5e8759d5783000547c0db75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c8780a5baa78cbb5e8759d5783000547c0db75", "html_url": "https://github.com/rust-lang/rust/commit/e0c8780a5baa78cbb5e8759d5783000547c0db75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c8780a5baa78cbb5e8759d5783000547c0db75/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6970f88db3ac2a9cefa9c585228291ae1f18fb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/6970f88db3ac2a9cefa9c585228291ae1f18fb04", "html_url": "https://github.com/rust-lang/rust/commit/6970f88db3ac2a9cefa9c585228291ae1f18fb04"}], "stats": {"total": 264, "additions": 255, "deletions": 9}, "files": [{"sha": "fb6adccdf497ba5dd2fcbbdf5a9c70f663220ce2", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -1086,7 +1086,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     /// Compares two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n-    fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> (DiagnosticStyledString, DiagnosticStyledString) {\n+    pub fn cmp(\n+        &self,\n+        t1: Ty<'tcx>,\n+        t2: Ty<'tcx>,\n+    ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n         debug!(\"cmp(t1={}, t1.kind={:?}, t2={}, t2.kind={:?})\", t1, t1.kind(), t2, t2.kind());\n \n         // helper functions"}, {"sha": "3bddf7fb6ffc4c9daa6d090a0db08418d13081eb", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -119,9 +119,21 @@ impl<'tcx> ClosureKind {\n     /// See `Ty::to_opt_closure_kind` for more details.\n     pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self {\n-            ty::ClosureKind::Fn => tcx.types.i8,\n-            ty::ClosureKind::FnMut => tcx.types.i16,\n-            ty::ClosureKind::FnOnce => tcx.types.i32,\n+            ClosureKind::Fn => tcx.types.i8,\n+            ClosureKind::FnMut => tcx.types.i16,\n+            ClosureKind::FnOnce => tcx.types.i32,\n+        }\n+    }\n+\n+    pub fn from_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ClosureKind> {\n+        if Some(def_id) == tcx.lang_items().fn_once_trait() {\n+            Some(ClosureKind::FnOnce)\n+        } else if Some(def_id) == tcx.lang_items().fn_mut_trait() {\n+            Some(ClosureKind::FnMut)\n+        } else if Some(def_id) == tcx.lang_items().fn_trait() {\n+            Some(ClosureKind::Fn)\n+        } else {\n+            None\n         }\n     }\n }"}, {"sha": "b727cd4a3cc8bf7f8b59f8cc1cab8ba32cb8bff3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 121, "deletions": 5, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -2,10 +2,10 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    EvaluationResult, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n-    Obligation, ObligationCause, ObligationCauseCode, OnUnimplementedDirective,\n-    OnUnimplementedNote, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n-    SelectionContext, SelectionError, TraitNotObjectSafe,\n+    EvaluationResult, FulfillmentContext, FulfillmentError, FulfillmentErrorCode,\n+    MismatchedProjectionTypes, Obligation, ObligationCause, ObligationCauseCode,\n+    OnUnimplementedDirective, OnUnimplementedNote, OutputTypeParameterMismatch, Overflow,\n+    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n \n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n@@ -21,6 +21,8 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n+use rustc_infer::infer::error_reporting::same_type_modulo_infer;\n+use rustc_infer::traits::TraitEngine;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n@@ -103,6 +105,17 @@ pub trait InferCtxtExt<'tcx> {\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n+\n+    /// Checks if the type implements one of `Fn`, `FnMut`, or `FnOnce`\n+    /// in that order, and returns the generic type corresponding to the\n+    /// argument of that trait (corresponding to the closure arguments).\n+    fn type_implements_fn_trait(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        ty: ty::Binder<'tcx, Ty<'tcx>>,\n+        constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n+    ) -> Result<(ty::ClosureKind, ty::Binder<'tcx, Ty<'tcx>>), ()>;\n }\n \n impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n@@ -563,7 +576,64 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         // Try to report a help message\n-                        if !trait_ref.has_infer_types_or_consts()\n+                        if is_fn_trait\n+                            && let Ok((implemented_kind, params)) = self.type_implements_fn_trait(\n+                                obligation.param_env,\n+                                trait_ref.self_ty(),\n+                                trait_predicate.skip_binder().constness,\n+                                trait_predicate.skip_binder().polarity,\n+                            )\n+                        {\n+                            // If the type implements `Fn`, `FnMut`, or `FnOnce`, suppress the following\n+                            // suggestion to add trait bounds for the type, since we only typically implement\n+                            // these traits once.\n+\n+                            // Note if the `FnMut` or `FnOnce` is less general than the trait we're trying\n+                            // to implement.\n+                            let selected_kind =\n+                                ty::ClosureKind::from_def_id(self.tcx, trait_ref.def_id())\n+                                    .expect(\"expected to map DefId to ClosureKind\");\n+                            if !implemented_kind.extends(selected_kind) {\n+                                err.note(\n+                                    &format!(\n+                                        \"`{}` implements `{}`, but it must implement `{}`, which is more general\",\n+                                        trait_ref.skip_binder().self_ty(),\n+                                        implemented_kind,\n+                                        selected_kind\n+                                    )\n+                                );\n+                            }\n+\n+                            // Note any argument mismatches\n+                            let given_ty = params.skip_binder();\n+                            let expected_ty = trait_ref.skip_binder().substs.type_at(1);\n+                            if let ty::Tuple(given) = given_ty.kind()\n+                                && let ty::Tuple(expected) = expected_ty.kind()\n+                            {\n+                                if expected.len() != given.len() {\n+                                    // Note number of types that were expected and given\n+                                    err.note(\n+                                        &format!(\n+                                            \"expected a closure taking {} argument{}, but one taking {} argument{} was given\",\n+                                            given.len(),\n+                                            if given.len() == 1 { \"\" } else { \"s\" },\n+                                            expected.len(),\n+                                            if expected.len() == 1 { \"\" } else { \"s\" },\n+                                        )\n+                                    );\n+                                } else if !same_type_modulo_infer(given_ty, expected_ty) {\n+                                    // Print type mismatch\n+                                    let (expected_args, given_args) =\n+                                        self.cmp(given_ty, expected_ty);\n+                                    err.note_expected_found(\n+                                        &\"a closure with arguments\",\n+                                        expected_args,\n+                                        &\"a closure with arguments\",\n+                                        given_args,\n+                                    );\n+                                }\n+                            }\n+                        } else if !trait_ref.has_infer_types_or_consts()\n                             && self.predicate_can_apply(obligation.param_env, trait_ref)\n                         {\n                             // If a where-clause may be useful, remind the\n@@ -1144,6 +1214,52 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         err\n     }\n+\n+    fn type_implements_fn_trait(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        ty: ty::Binder<'tcx, Ty<'tcx>>,\n+        constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n+    ) -> Result<(ty::ClosureKind, ty::Binder<'tcx, Ty<'tcx>>), ()> {\n+        self.commit_if_ok(|_| {\n+            for trait_def_id in [\n+                self.tcx.lang_items().fn_trait(),\n+                self.tcx.lang_items().fn_mut_trait(),\n+                self.tcx.lang_items().fn_once_trait(),\n+            ] {\n+                let Some(trait_def_id) = trait_def_id else { continue };\n+                // Make a fresh inference variable so we can determine what the substitutions\n+                // of the trait are.\n+                let var = self.next_ty_var(TypeVariableOrigin {\n+                    span: DUMMY_SP,\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                });\n+                let substs = self.tcx.mk_substs_trait(ty.skip_binder(), &[var.into()]);\n+                let obligation = Obligation::new(\n+                    ObligationCause::dummy(),\n+                    param_env,\n+                    ty.rebind(ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef::new(trait_def_id, substs),\n+                        constness,\n+                        polarity,\n+                    })\n+                    .to_predicate(self.tcx),\n+                );\n+                let mut fulfill_cx = FulfillmentContext::new_in_snapshot();\n+                fulfill_cx.register_predicate_obligation(self, obligation);\n+                if fulfill_cx.select_all_or_error(self).is_empty() {\n+                    return Ok((\n+                        ty::ClosureKind::from_def_id(self.tcx, trait_def_id)\n+                            .expect(\"expected to map DefId to ClosureKind\"),\n+                        ty.rebind(self.resolve_vars_if_possible(var)),\n+                    ));\n+                }\n+            }\n+\n+            Err(())\n+        })\n+    }\n }\n \n trait InferCtxtPrivExt<'hir, 'tcx> {"}, {"sha": "066bf431a83d78e4ae21581ee887296f120b6eab", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -4,6 +4,8 @@ error[E0277]: expected a `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n LL |         call(f, ());\n    |         ^^^^ expected an `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n    |\n+   = note: expected a closure with arguments `((),)`\n+              found a closure with arguments `(<_ as ATC<'a>>::Type,)`\n note: required by a bound in `call`\n   --> $DIR/issue-62529-3.rs:9:36\n    |"}, {"sha": "8b542bb69de2ed1e7dadc06f28f3685c424f2796", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -7,6 +7,8 @@ LL |     let t8 = t8n(t7, t7p(f, g));\n    |              required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(_,)>` is not implemented for `impl Fn(((_, _), _))`\n+   = note: expected a closure with arguments `(((_, _), _),)`\n+              found a closure with arguments `(_,)`\n note: required by a bound in `t8n`\n   --> $DIR/issue-59494.rs:5:45\n    |"}, {"sha": "0ed64043a9a56d78924254d355ed48a0493f80b4", "filename": "src/test/ui/trait-bounds/mismatch-fn-trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Ftrait-bounds%2Fmismatch-fn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Ftrait-bounds%2Fmismatch-fn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fmismatch-fn-trait.rs?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -0,0 +1,28 @@\n+fn take(_f: impl FnMut(i32)) {}\n+\n+fn test1(f: impl FnMut(u32)) {\n+    take(f)\n+    //~^ ERROR [E0277]\n+}\n+\n+fn test2(f: impl FnMut(i32, i32)) {\n+    take(f)\n+    //~^ ERROR [E0277]\n+}\n+\n+fn test3(f: impl FnMut()) {\n+    take(f)\n+    //~^ ERROR [E0277]\n+}\n+\n+fn test4(f: impl FnOnce(i32)) {\n+    take(f)\n+    //~^ ERROR [E0277]\n+}\n+\n+fn test5(f: impl FnOnce(u32)) {\n+    take(f)\n+    //~^ ERROR [E0277]\n+}\n+\n+fn main() {}"}, {"sha": "961e6d88fbef4f9a5bb03c42fc692250e79ac058", "filename": "src/test/ui/trait-bounds/mismatch-fn-trait.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Ftrait-bounds%2Fmismatch-fn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Ftrait-bounds%2Fmismatch-fn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fmismatch-fn-trait.stderr?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -0,0 +1,81 @@\n+error[E0277]: expected a `FnMut<(i32,)>` closure, found `impl FnMut(u32)`\n+  --> $DIR/mismatch-fn-trait.rs:4:10\n+   |\n+LL |     take(f)\n+   |     ---- ^ expected an `FnMut<(i32,)>` closure, found `impl FnMut(u32)`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: expected a closure with arguments `(u32,)`\n+              found a closure with arguments `(i32,)`\n+note: required by a bound in `take`\n+  --> $DIR/mismatch-fn-trait.rs:1:18\n+   |\n+LL | fn take(_f: impl FnMut(i32)) {}\n+   |                  ^^^^^^^^^^ required by this bound in `take`\n+\n+error[E0277]: expected a `FnMut<(i32,)>` closure, found `impl FnMut(i32, i32)`\n+  --> $DIR/mismatch-fn-trait.rs:9:10\n+   |\n+LL |     take(f)\n+   |     ---- ^ expected an `FnMut<(i32,)>` closure, found `impl FnMut(i32, i32)`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: expected a closure taking 2 arguments, but one taking 1 argument was given\n+note: required by a bound in `take`\n+  --> $DIR/mismatch-fn-trait.rs:1:18\n+   |\n+LL | fn take(_f: impl FnMut(i32)) {}\n+   |                  ^^^^^^^^^^ required by this bound in `take`\n+\n+error[E0277]: expected a `FnMut<(i32,)>` closure, found `impl FnMut()`\n+  --> $DIR/mismatch-fn-trait.rs:14:10\n+   |\n+LL |     take(f)\n+   |     ---- ^ expected an `FnMut<(i32,)>` closure, found `impl FnMut()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: expected a closure taking 0 arguments, but one taking 1 argument was given\n+note: required by a bound in `take`\n+  --> $DIR/mismatch-fn-trait.rs:1:18\n+   |\n+LL | fn take(_f: impl FnMut(i32)) {}\n+   |                  ^^^^^^^^^^ required by this bound in `take`\n+\n+error[E0277]: expected a `FnMut<(i32,)>` closure, found `impl FnOnce(i32)`\n+  --> $DIR/mismatch-fn-trait.rs:19:10\n+   |\n+LL |     take(f)\n+   |     ---- ^ expected an `FnMut<(i32,)>` closure, found `impl FnOnce(i32)`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: `impl FnOnce(i32)` implements `FnOnce`, but it must implement `FnMut`, which is more general\n+note: required by a bound in `take`\n+  --> $DIR/mismatch-fn-trait.rs:1:18\n+   |\n+LL | fn take(_f: impl FnMut(i32)) {}\n+   |                  ^^^^^^^^^^ required by this bound in `take`\n+\n+error[E0277]: expected a `FnMut<(i32,)>` closure, found `impl FnOnce(u32)`\n+  --> $DIR/mismatch-fn-trait.rs:24:10\n+   |\n+LL |     take(f)\n+   |     ---- ^ expected an `FnMut<(i32,)>` closure, found `impl FnOnce(u32)`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: `impl FnOnce(u32)` implements `FnOnce`, but it must implement `FnMut`, which is more general\n+   = note: expected a closure with arguments `(u32,)`\n+              found a closure with arguments `(i32,)`\n+note: required by a bound in `take`\n+  --> $DIR/mismatch-fn-trait.rs:1:18\n+   |\n+LL | fn take(_f: impl FnMut(i32)) {}\n+   |                  ^^^^^^^^^^ required by this bound in `take`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0ea1c1dcd5bde0c73bcd183398029e0ae87dd30a", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0c8780a5baa78cbb5e8759d5783000547c0db75/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=e0c8780a5baa78cbb5e8759d5783000547c0db75", "patch": "@@ -7,6 +7,7 @@ LL |     let x = call_it(&S, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `S`\n+   = note: `S` implements `FnMut`, but it must implement `Fn`, which is more general\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:22:14\n    |"}]}