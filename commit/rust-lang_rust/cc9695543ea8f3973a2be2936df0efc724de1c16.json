{"sha": "cc9695543ea8f3973a2be2936df0efc724de1c16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOTY5NTU0M2VhOGYzOTczYTJiZTI5MzZkZjBlZmM3MjRkZTFjMTY=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-11T22:54:47Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-13T14:43:20Z"}, "message": "Pass Clippy args also trough RUSTFLAGS", "tree": {"sha": "86ccef4ecb895bcaa5c6f65b64ebbfafea5c911c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ccef4ecb895bcaa5c6f65b64ebbfafea5c911c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc9695543ea8f3973a2be2936df0efc724de1c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9695543ea8f3973a2be2936df0efc724de1c16", "html_url": "https://github.com/rust-lang/rust/commit/cc9695543ea8f3973a2be2936df0efc724de1c16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc9695543ea8f3973a2be2936df0efc724de1c16/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7db5bfc50095c259d2f128ddb96f7faf8654e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7db5bfc50095c259d2f128ddb96f7faf8654e3c", "html_url": "https://github.com/rust-lang/rust/commit/b7db5bfc50095c259d2f128ddb96f7faf8654e3c"}], "stats": {"total": 217, "additions": 165, "deletions": 52}, "files": [{"sha": "dc931963726b26723495db2c50a8e6bad75c7e64", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc9695543ea8f3973a2be2936df0efc724de1c16/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc9695543ea8f3973a2be2936df0efc724de1c16/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cc9695543ea8f3973a2be2936df0efc724de1c16", "patch": "@@ -208,7 +208,6 @@ the lint(s) you are interested in:\n ```terminal\n cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```\n-Note that if you've run clippy before, this may only take effect after you've modified a file or ran `cargo clean`.\n \n ### Specifying the minimum supported Rust version\n "}, {"sha": "40f1b802e60e6aeeabec3fa11539c672c4a97cdd", "filename": "src/driver.rs", "status": "modified", "additions": 87, "deletions": 29, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/cc9695543ea8f3973a2be2936df0efc724de1c16/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9695543ea8f3973a2be2936df0efc724de1c16/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=cc9695543ea8f3973a2be2936df0efc724de1c16", "patch": "@@ -1,5 +1,6 @@\n #![feature(rustc_private)]\n #![feature(once_cell)]\n+#![feature(bool_to_option)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n@@ -19,6 +20,7 @@ use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n use std::env;\n+use std::iter;\n use std::lazy::SyncLazy;\n use std::ops::Deref;\n use std::panic;\n@@ -47,20 +49,6 @@ fn arg_value<'a, T: Deref<Target = str>>(\n     None\n }\n \n-#[test]\n-fn test_arg_value() {\n-    let args = &[\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"];\n-\n-    assert_eq!(arg_value(&[] as &[&str], \"--foobar\", |_| true), None);\n-    assert_eq!(arg_value(args, \"--bar\", |_| false), None);\n-    assert_eq!(arg_value(args, \"--bar\", |_| true), Some(\"bar\"));\n-    assert_eq!(arg_value(args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n-    assert_eq!(arg_value(args, \"--bar\", |p| p == \"foo\"), None);\n-    assert_eq!(arg_value(args, \"--foobar\", |p| p == \"foo\"), None);\n-    assert_eq!(arg_value(args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n-    assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n-}\n-\n struct DefaultCallbacks;\n impl rustc_driver::Callbacks for DefaultCallbacks {}\n \n@@ -182,6 +170,28 @@ fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<Pat\n     })\n }\n \n+fn remove_clippy_args<'a, T, U, I>(args: &mut Vec<T>, clippy_args: I)\n+where\n+    T: AsRef<str>,\n+    U: AsRef<str> + ?Sized + 'a,\n+    I: Iterator<Item = &'a U> + Clone,\n+{\n+    let args_iter = clippy_args.map(AsRef::as_ref);\n+    let args_count = args_iter.clone().count();\n+\n+    if args_count > 0 {\n+        if let Some(start) = args.windows(args_count).enumerate().find_map(|(current, window)| {\n+            window\n+                .iter()\n+                .map(AsRef::as_ref)\n+                .eq(args_iter.clone())\n+                .then_some(current)\n+        }) {\n+            args.drain(start..start + args_count);\n+        }\n+    }\n+}\n+\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n@@ -278,20 +288,9 @@ pub fn main() {\n             args.extend(vec![\"--sysroot\".into(), sys_root]);\n         };\n \n-        let mut no_deps = false;\n-        let clippy_args = env::var(\"CLIPPY_ARGS\")\n-            .unwrap_or_default()\n-            .split(\"__CLIPPY_HACKERY__\")\n-            .filter_map(|s| match s {\n-                \"\" => None,\n-                \"--no-deps\" => {\n-                    no_deps = true;\n-                    None\n-                },\n-                _ => Some(s.to_string()),\n-            })\n-            .chain(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()])\n-            .collect::<Vec<String>>();\n+        let clippy_args = env::var(\"CLIPPY_ARGS\").unwrap_or_default();\n+        let clippy_args = clippy_args.split_whitespace();\n+        let no_deps = clippy_args.clone().any(|flag| flag == \"--no-deps\");\n \n         // We enable Clippy if one of the following conditions is met\n         // - IF Clippy is run on its test suite OR\n@@ -304,7 +303,11 @@ pub fn main() {\n \n         let clippy_enabled = clippy_tests_set || (!cap_lints_allow && (!no_deps || in_primary_package));\n         if clippy_enabled {\n-            args.extend(clippy_args);\n+            remove_clippy_args(&mut args, iter::once(\"--no-deps\"));\n+            args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n+        } else {\n+            // Remove all flags passed through RUSTFLAGS if Clippy is not enabled.\n+            remove_clippy_args(&mut args, clippy_args);\n         }\n \n         let mut clippy = ClippyCallbacks;\n@@ -315,3 +318,58 @@ pub fn main() {\n         rustc_driver::RunCompiler::new(&args, callbacks).run()\n     }))\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_arg_value() {\n+        let args = &[\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"];\n+\n+        assert_eq!(arg_value(&[] as &[&str], \"--foobar\", |_| true), None);\n+        assert_eq!(arg_value(args, \"--bar\", |_| false), None);\n+        assert_eq!(arg_value(args, \"--bar\", |_| true), Some(\"bar\"));\n+        assert_eq!(arg_value(args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n+        assert_eq!(arg_value(args, \"--bar\", |p| p == \"foo\"), None);\n+        assert_eq!(arg_value(args, \"--foobar\", |p| p == \"foo\"), None);\n+        assert_eq!(arg_value(args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n+        assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n+    }\n+\n+    #[test]\n+    fn removes_clippy_args_from_start() {\n+        let mut args = vec![\"-D\", \"clippy::await_holding_lock\", \"--cfg\", r#\"feature=\"some_feat\"\"#];\n+        let clippy_args = [\"-D\", \"clippy::await_holding_lock\"].iter();\n+\n+        remove_clippy_args(&mut args, clippy_args);\n+        assert_eq!(args, &[\"--cfg\", r#\"feature=\"some_feat\"\"#]);\n+    }\n+\n+    #[test]\n+    fn removes_clippy_args_from_end() {\n+        let mut args = vec![\"-Zui-testing\", \"-A\", \"clippy::empty_loop\", \"--no-deps\"];\n+        let clippy_args = [\"-A\", \"clippy::empty_loop\", \"--no-deps\"].iter();\n+\n+        remove_clippy_args(&mut args, clippy_args);\n+        assert_eq!(args, &[\"-Zui-testing\"]);\n+    }\n+\n+    #[test]\n+    fn removes_clippy_args_from_middle() {\n+        let mut args = vec![\"-Zui-testing\", \"-W\", \"clippy::filter_map\", \"-L\", \"serde\"];\n+        let clippy_args = [\"-W\", \"clippy::filter_map\"].iter();\n+\n+        remove_clippy_args(&mut args, clippy_args);\n+        assert_eq!(args, &[\"-Zui-testing\", \"-L\", \"serde\"]);\n+    }\n+\n+    #[test]\n+    fn no_clippy_args_to_remove() {\n+        let mut args = vec![\"-Zui-testing\", \"-L\", \"serde\"];\n+        let clippy_args: [&str; 0] = [];\n+\n+        remove_clippy_args(&mut args, clippy_args.iter());\n+        assert_eq!(args, &[\"-Zui-testing\", \"-L\", \"serde\"]);\n+    }\n+}"}, {"sha": "7594ea2c7b1d196be614499703b07652111beb1f", "filename": "src/main.rs", "status": "modified", "additions": 77, "deletions": 21, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/cc9695543ea8f3973a2be2936df0efc724de1c16/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9695543ea8f3973a2be2936df0efc724de1c16/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=cc9695543ea8f3973a2be2936df0efc724de1c16", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bool_to_option)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n@@ -62,11 +63,12 @@ struct ClippyCmd {\n     unstable_options: bool,\n     cargo_subcommand: &'static str,\n     args: Vec<String>,\n-    clippy_args: Vec<String>,\n+    rustflags: Option<String>,\n+    clippy_args: Option<String>,\n }\n \n impl ClippyCmd {\n-    fn new<I>(mut old_args: I) -> Self\n+    fn new<I>(mut old_args: I, rustflags: Option<String>) -> Self\n     where\n         I: Iterator<Item = String>,\n     {\n@@ -99,16 +101,19 @@ impl ClippyCmd {\n             args.insert(0, \"+nightly\".to_string());\n         }\n \n-        let mut clippy_args: Vec<String> = old_args.collect();\n-        if cargo_subcommand == \"fix\" && !clippy_args.iter().any(|arg| arg == \"--no-deps\") {\n-            clippy_args.push(\"--no-deps\".into());\n+        let mut clippy_args = old_args.collect::<Vec<String>>().join(\" \");\n+        if cargo_subcommand == \"fix\" && !clippy_args.contains(\"--no-deps\") {\n+            clippy_args = format!(\"{} --no-deps\", clippy_args);\n         }\n \n+        let has_args = !clippy_args.is_empty();\n         ClippyCmd {\n             unstable_options,\n             cargo_subcommand,\n             args,\n-            clippy_args,\n+            rustflags: has_args\n+                .then(|| rustflags.map_or_else(|| clippy_args.clone(), |flags| format!(\"{} {}\", clippy_args, flags))),\n+            clippy_args: has_args.then_some(clippy_args),\n         }\n     }\n \n@@ -150,18 +155,19 @@ impl ClippyCmd {\n \n     fn into_std_cmd(self) -> Command {\n         let mut cmd = Command::new(\"cargo\");\n-        let clippy_args: String = self\n-            .clippy_args\n-            .iter()\n-            .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n-            .collect();\n \n         cmd.env(self.path_env(), Self::path())\n             .envs(ClippyCmd::target_dir())\n-            .env(\"CLIPPY_ARGS\", clippy_args)\n             .arg(self.cargo_subcommand)\n             .args(&self.args);\n \n+        // HACK: pass Clippy args to the driver *also* through RUSTFLAGS.\n+        // This guarantees that new builds will be triggered when Clippy flags change.\n+        if let (Some(clippy_args), Some(rustflags)) = (self.clippy_args, self.rustflags) {\n+            cmd.env(\"CLIPPY_ARGS\", clippy_args);\n+            cmd.env(\"RUSTFLAGS\", rustflags);\n+        }\n+\n         cmd\n     }\n }\n@@ -170,7 +176,7 @@ fn process<I>(old_args: I) -> Result<(), i32>\n where\n     I: Iterator<Item = String>,\n {\n-    let cmd = ClippyCmd::new(old_args);\n+    let cmd = ClippyCmd::new(old_args, env::var(\"RUSTFLAGS\").ok());\n \n     let mut cmd = cmd.into_std_cmd();\n \n@@ -195,15 +201,16 @@ mod tests {\n     #[should_panic]\n     fn fix_without_unstable() {\n         let args = \"cargo clippy --fix\".split_whitespace().map(ToString::to_string);\n-        let _ = ClippyCmd::new(args);\n+        let _ = ClippyCmd::new(args, None);\n     }\n \n     #[test]\n     fn fix_unstable() {\n         let args = \"cargo clippy --fix -Zunstable-options\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n+        let cmd = ClippyCmd::new(args, None);\n+\n         assert_eq!(\"fix\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n         assert!(cmd.args.iter().any(|arg| arg.ends_with(\"unstable-options\")));\n@@ -214,23 +221,26 @@ mod tests {\n         let args = \"cargo clippy --fix -Zunstable-options\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-        assert!(cmd.clippy_args.iter().any(|arg| arg == \"--no-deps\"));\n+        let cmd = ClippyCmd::new(args, None);\n+\n+        assert!(cmd.clippy_args.unwrap().contains(\"--no-deps\"));\n     }\n \n     #[test]\n     fn no_deps_not_duplicated_with_fix() {\n         let args = \"cargo clippy --fix -Zunstable-options -- --no-deps\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-        assert_eq!(cmd.clippy_args.iter().filter(|arg| *arg == \"--no-deps\").count(), 1);\n+        let cmd = ClippyCmd::new(args, None);\n+\n+        assert_eq!(1, cmd.clippy_args.unwrap().matches(\"--no-deps\").count());\n     }\n \n     #[test]\n     fn check() {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n+        let cmd = ClippyCmd::new(args, None);\n+\n         assert_eq!(\"check\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WRAPPER\", cmd.path_env());\n     }\n@@ -240,8 +250,54 @@ mod tests {\n         let args = \"cargo clippy -Zunstable-options\"\n             .split_whitespace()\n             .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n+        let cmd = ClippyCmd::new(args, None);\n+\n         assert_eq!(\"check\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n     }\n+\n+    #[test]\n+    fn clippy_args_into_rustflags() {\n+        let args = \"cargo clippy -- -W clippy::as_conversions\"\n+            .split_whitespace()\n+            .map(ToString::to_string);\n+        let rustflags = None;\n+        let cmd = ClippyCmd::new(args, rustflags);\n+\n+        assert_eq!(\"-W clippy::as_conversions\", cmd.rustflags.unwrap());\n+    }\n+\n+    #[test]\n+    fn clippy_args_respect_existing_rustflags() {\n+        let args = \"cargo clippy -- -D clippy::await_holding_lock\"\n+            .split_whitespace()\n+            .map(ToString::to_string);\n+        let rustflags = Some(r#\"--cfg feature=\"some_feat\"\"#.into());\n+        let cmd = ClippyCmd::new(args, rustflags);\n+\n+        assert_eq!(\n+            r#\"-D clippy::await_holding_lock --cfg feature=\"some_feat\"\"#,\n+            cmd.rustflags.unwrap()\n+        );\n+    }\n+\n+    #[test]\n+    fn no_env_change_if_no_clippy_args() {\n+        let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n+        let rustflags = Some(r#\"--cfg feature=\"some_feat\"\"#.into());\n+        let cmd = ClippyCmd::new(args, rustflags);\n+\n+        assert!(cmd.clippy_args.is_none());\n+        assert!(cmd.rustflags.is_none());\n+    }\n+\n+    #[test]\n+    fn no_env_change_if_no_clippy_args_nor_rustflags() {\n+        let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n+        let rustflags = None;\n+        let cmd = ClippyCmd::new(args, rustflags);\n+\n+        assert!(cmd.clippy_args.is_none());\n+        assert!(cmd.rustflags.is_none());\n+    }\n }"}, {"sha": "fda1413868e82549eb76bfc2ce699fe0aa419f46", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9695543ea8f3973a2be2936df0efc724de1c16/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9695543ea8f3973a2be2936df0efc724de1c16/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=cc9695543ea8f3973a2be2936df0efc724de1c16", "patch": "@@ -23,7 +23,7 @@ fn dogfood_clippy() {\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .arg(\"clippy-preview\")\n+        .arg(\"clippy\")\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n         .arg(\"--\")"}]}