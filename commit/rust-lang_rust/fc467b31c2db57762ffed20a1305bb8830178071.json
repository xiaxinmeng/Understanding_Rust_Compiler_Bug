{"sha": "fc467b31c2db57762ffed20a1305bb8830178071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDY3YjMxYzJkYjU3NzYyZmZlZDIwYTEzMDViYjg4MzAxNzgwNzE=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-21T15:54:29Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T14:03:44Z"}, "message": "Reorder `Copy` doc sections\n\nThe new order puts all the \"when\" questions together and puts the \"how\"\nquestion with the \"derivable\" section. So you have to scroll past (and\nhopefully read) the can/cannot/should caveats and guidelines to get to\nthe information about how to actually go about doing it once you've\ndetermined that you can and should, with derivable information first so\nthat you can just use the derived implementation if that applies.\n\nPrevious order:\n\n* General explanation\n* When can my type be `Copy`?\n* How can I implement `Copy`?\n* When can my type _not_ be `Copy`?\n* When should my type be `Copy`?\n* Derivable\n\nNew order:\n\n* General explanation\n* When can my type be `Copy`?\n* When can my type _not_ be `Copy`?\n* When should my type be `Copy`?\n* Derivable\n* How can I implement `Copy`?", "tree": {"sha": "fc9214f6f445e19d680e1f83720eace029898c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9214f6f445e19d680e1f83720eace029898c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc467b31c2db57762ffed20a1305bb8830178071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc467b31c2db57762ffed20a1305bb8830178071", "html_url": "https://github.com/rust-lang/rust/commit/fc467b31c2db57762ffed20a1305bb8830178071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc467b31c2db57762ffed20a1305bb8830178071/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f4405333243c3bb0b3a210201c98a69fe7a1c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4405333243c3bb0b3a210201c98a69fe7a1c4a", "html_url": "https://github.com/rust-lang/rust/commit/2f4405333243c3bb0b3a210201c98a69fe7a1c4a"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "c18d230be31af9db758feb8e6f6de9f439d80ba3", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fc467b31c2db57762ffed20a1305bb8830178071/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc467b31c2db57762ffed20a1305bb8830178071/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=fc467b31c2db57762ffed20a1305bb8830178071", "patch": "@@ -136,26 +136,6 @@ pub trait Unsize<T: ?Sized> {\n /// the trait `Copy` may not be implemented for this type; field `points` does not implement `Copy`\n /// ```\n ///\n-/// ## How can I implement `Copy`?\n-///\n-/// There are two ways to implement `Copy` on your type:\n-///\n-/// ```\n-/// #[derive(Copy, Clone)]\n-/// struct MyStruct;\n-/// ```\n-///\n-/// and\n-///\n-/// ```\n-/// struct MyStruct;\n-/// impl Copy for MyStruct {}\n-/// impl Clone for MyStruct { fn clone(&self) -> MyStruct { *self } }\n-/// ```\n-///\n-/// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n-/// bound on type parameters, which isn't always desired.\n-///\n /// ## When can my type _not_ be `Copy`?\n ///\n /// Some types can't be copied safely. For example, copying `&mut T` would create an aliased\n@@ -175,6 +155,26 @@ pub trait Unsize<T: ?Sized> {\n ///\n /// This trait can be used with `#[derive]` if all of its components implement `Copy` and the type\n /// implements `Clone`. The implementation will copy the bytes of each field using `memcpy`.\n+///\n+/// ## How can I implement `Copy`?\n+///\n+/// There are two ways to implement `Copy` on your type:\n+///\n+/// ```\n+/// #[derive(Copy, Clone)]\n+/// struct MyStruct;\n+/// ```\n+///\n+/// and\n+///\n+/// ```\n+/// struct MyStruct;\n+/// impl Copy for MyStruct {}\n+/// impl Clone for MyStruct { fn clone(&self) -> MyStruct { *self } }\n+/// ```\n+///\n+/// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n+/// bound on type parameters, which isn't always desired.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {"}]}