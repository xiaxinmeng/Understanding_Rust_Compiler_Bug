{"sha": "fa4eda8935cc902b0757815e774f11ee791af156", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNGVkYTg5MzVjYzkwMmIwNzU3ODE1ZTc3NGYxMWVlNzkxYWYxNTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-18T22:02:47Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T11:32:56Z"}, "message": "switch projection errors to use the new type error messages\n\nUnfortunately, projection errors do not come with a nice set of\nmismatched types. This is because the type equality check occurs\nwithin a higher-ranked context. Therefore, only the type error\nis reported. This is ugly but was always the situation.\n\nI will introduce better errors for the lower-ranked case in\nanother commit.\n\nFixes the last known occurence of #31173", "tree": {"sha": "2e0a377592d670bc18efa7b8ad9cb92a885b9c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e0a377592d670bc18efa7b8ad9cb92a885b9c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4eda8935cc902b0757815e774f11ee791af156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4eda8935cc902b0757815e774f11ee791af156", "html_url": "https://github.com/rust-lang/rust/commit/fa4eda8935cc902b0757815e774f11ee791af156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4eda8935cc902b0757815e774f11ee791af156/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988", "html_url": "https://github.com/rust-lang/rust/commit/b7b2db4da7dc6762d53659b32e5fb4ba8e5c5988"}], "stats": {"total": 108, "additions": 75, "deletions": 33}, "files": [{"sha": "0726d8560bab949387d84d8d97893f371aa08d6a", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=fa4eda8935cc902b0757815e774f11ee791af156", "patch": "@@ -522,37 +522,46 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn report_and_explain_type_error_with_code(&self,\n-                                                   trace: TypeTrace<'tcx>,\n+                                                   origin: TypeOrigin,\n+                                                   values: Option<ValuePairs<'tcx>>,\n                                                    terr: &TypeError<'tcx>,\n                                                    message: &str,\n                                                    code: &str)\n                                                    -> DiagnosticBuilder<'tcx>\n     {\n-        let (expected, found) = match self.values_str(&trace.values) {\n-            Some((expected, found)) => (expected, found),\n-            None => return self.tcx.sess.diagnostic().struct_dummy() /* derived error */\n+        let expected_found = match values {\n+            None => None,\n+            Some(values) => match self.values_str(&values) {\n+                Some((expected, found)) => Some((expected, found)),\n+                None => return self.tcx.sess.diagnostic().struct_dummy() /* derived error */\n+            }\n         };\n \n-        let span = trace.origin.span();\n+        let span = origin.span();\n+        let mut err = self.tcx.sess.struct_span_err_with_code(\n+            span, message, code);\n \n-        let is_simple_error = if let &TypeError::Sorts(ref values) = terr {\n-            values.expected.is_primitive() && values.found.is_primitive()\n-        } else {\n-            false\n-        };\n+        let mut is_simple_error = false;\n \n-        let mut err = self.tcx.sess.struct_span_err_with_code(\n-            trace.origin.span(),\n-            message,\n-            code);\n+        if let Some((expected, found)) = expected_found {\n+            is_simple_error = if let &TypeError::Sorts(ref values) = terr {\n+                values.expected.is_primitive() && values.found.is_primitive()\n+            } else {\n+                false\n+            };\n \n-        if !is_simple_error || check_old_school() {\n-            err.note_expected_found(&\"type\", &expected, &found);\n+            if !is_simple_error || check_old_school() {\n+                err.note_expected_found(&\"type\", &expected, &found);\n+            }\n         }\n \n-        err.span_label(span, &terr);\n+        if !is_simple_error && check_old_school() {\n+            err.span_note(span, &format!(\"{}\", terr));\n+        } else {\n+            err.span_label(span, &terr);\n+        }\n \n-        self.note_error_origin(&mut err, &trace.origin);\n+        self.note_error_origin(&mut err, &origin);\n         self.check_and_note_conflicting_crates(&mut err, terr, span);\n         self.tcx.note_and_explain_type_err(&mut err, terr, span);\n \n@@ -566,7 +575,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         // FIXME: do we want to use a different error code for each origin?\n         let failure_str = trace.origin.as_failure_str();\n-        type_err!(self, trace, terr, E0308, \"{}\", failure_str)\n+        type_err!(self, trace.origin, Some(trace.values), terr, E0308, \"{}\", failure_str)\n     }\n \n     /// Returns a string of the form \"expected `{}`, found `{}`\"."}, {"sha": "190c9b665e0dda476bee1cf518595572ef6ed7f8", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=fa4eda8935cc902b0757815e774f11ee791af156", "patch": "@@ -62,11 +62,12 @@ macro_rules! span_bug {\n \n #[macro_export]\n macro_rules! type_err {\n-    ($infcx:expr, $trace: expr, $terr: expr, $code:ident, $($message:tt)*) => ({\n+    ($infcx:expr, $origin: expr, $values: expr, $terr: expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n         $infcx.report_and_explain_type_error_with_code(\n-            $trace,\n-            $terr,\n+            $origin,\n+            $values,\n+            &$terr,\n             &format!($($message)*),\n             stringify!($code))\n     })"}, {"sha": "afbe34f89bbf4758bfc480370399ef72a32ecd03", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=fa4eda8935cc902b0757815e774f11ee791af156", "patch": "@@ -26,7 +26,7 @@ use super::{\n \n use fmt_macros::{Parser, Piece, Position};\n use hir::def_id::DefId;\n-use infer::{InferCtxt};\n+use infer::{InferCtxt, TypeOrigin};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n@@ -117,10 +117,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             predicate,\n                             error.err));\n             } else {\n-                let mut err = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271,\n-                                               \"type mismatch resolving `{}`: {}\",\n-                                               predicate,\n-                                               error.err);\n+                let mut err = type_err!(\n+                    self,\n+                    TypeOrigin::Misc(obligation.cause.span),\n+                    None, // FIXME: be smarter\n+                    error.err,\n+                    E0271,\n+                    \"type mismatch resolving `{}`\",\n+                    predicate);\n                 self.note_obligation_cause(&mut err, obligation);\n                 err.emit();\n             }"}, {"sha": "2c4c6279076dc098528388278194feaa0b5b7a09", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4eda8935cc902b0757815e774f11ee791af156/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=fa4eda8935cc902b0757815e774f11ee791af156", "patch": "@@ -12,6 +12,7 @@ use middle::free_region::FreeRegionMap;\n use rustc::infer::{self, InferOk, TypeOrigin};\n use rustc::ty;\n use rustc::traits::{self, ProjectionMode};\n+use rustc::ty::error::ExpectedFound;\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace};\n \n use syntax::ast;\n@@ -324,8 +325,11 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\",\n                    impl_fty,\n                    trait_fty);\n-            let trace = infer::TypeTrace::types(origin, false, impl_fty, trait_fty);\n-            type_err!(infcx, trace, &terr, E0053,\n+            let values = Some(infer::ValuePairs::Types(ExpectedFound {\n+                expected: trait_fty,\n+                found: impl_fty\n+            }));\n+            type_err!(infcx, origin, values, terr, E0053,\n                       \"method `{}` has an incompatible type for trait\",\n                       trait_m.name).emit();\n             return"}, {"sha": "cb952f6534f0e57da26b0e45b6d91a14c64be083", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa4eda8935cc902b0757815e774f11ee791af156/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4eda8935cc902b0757815e774f11ee791af156/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=fa4eda8935cc902b0757815e774f11ee791af156", "patch": "@@ -47,10 +47,8 @@ pub fn main() {\n     let a = 42;\n     foo1(a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected usize\n-    //~| found struct `Bar`\n+    //~| expected usize, found struct `Bar`\n     baz(&a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected usize\n-    //~| found struct `Bar`\n+    //~| expected usize, found struct `Bar`\n }"}, {"sha": "62d23a99cbadc45131c46aedc324b9948f2ff496", "filename": "src/test/compile-fail/issue-31173.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa4eda8935cc902b0757815e774f11ee791af156/src%2Ftest%2Fcompile-fail%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4eda8935cc902b0757815e774f11ee791af156/src%2Ftest%2Fcompile-fail%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31173.rs?ref=fa4eda8935cc902b0757815e774f11ee791af156", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::vec::IntoIter;\n+\n+pub fn get_tok(it: &mut IntoIter<u8>) {\n+    let mut found_e = false;\n+\n+    let temp: Vec<u8> = it.take_while(|&x| {\n+        found_e = true;\n+        false\n+    })\n+        .cloned()\n+        //~^ ERROR type mismatch resolving\n+        //~| expected u8, found &-ptr\n+        .collect(); //~ ERROR no method named `collect`\n+}\n+\n+fn main() {}"}]}