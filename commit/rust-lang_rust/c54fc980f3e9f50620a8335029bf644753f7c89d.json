{"sha": "c54fc980f3e9f50620a8335029bf644753f7c89d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NGZjOTgwZjNlOWY1MDYyMGE4MzM1MDI5YmY2NDQ3NTNmN2M4OWQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-18T22:46:26Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:28:47Z"}, "message": "Split resolve from rustc::middle into rustc_resolve.", "tree": {"sha": "0fce6b3353096035de0513e19f2505e5571147ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fce6b3353096035de0513e19f2505e5571147ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54fc980f3e9f50620a8335029bf644753f7c89d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54fc980f3e9f50620a8335029bf644753f7c89d", "html_url": "https://github.com/rust-lang/rust/commit/c54fc980f3e9f50620a8335029bf644753f7c89d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54fc980f3e9f50620a8335029bf644753f7c89d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "html_url": "https://github.com/rust-lang/rust/commit/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6"}], "stats": {"total": 80, "additions": 51, "deletions": 29}, "files": [{"sha": "e20cb06e3a8ca43a21aadb134bbfa52e6c2648a8", "filename": "mk/crates.mk", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -53,7 +53,8 @@ TARGET_CRATES := libc std flate arena term \\\n                  serialize getopts collections test time rand \\\n                  log regex graphviz core rbml alloc \\\n                  unicode\n-RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_driver rustc_trans rustc_back rustc_llvm \n+RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_resolve rustc_driver \\\n+                rustc_trans rustc_back rustc_llvm\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc regex_macros fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -67,11 +68,12 @@ DEPS_std := core libc rand alloc collections unicode \\\n DEPS_graphviz := std\n DEPS_syntax := std term serialize log fmt_macros arena libc\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n-                     rustc_typeck log syntax serialize rustc_llvm rustc_trans\n+                     rustc_typeck rustc_resolve log syntax serialize rustc_llvm rustc_trans\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n \t                log syntax serialize rustc_llvm\n DEPS_rustc_typeck := rustc syntax\n DEPS_rustc_borrowck := rustc log graphviz syntax\n+DEPS_rustc_resolve := rustc log syntax\n DEPS_rustc := syntax flate arena serialize getopts rbml \\\n               time log graphviz rustc_llvm rustc_back\n DEPS_rustc_llvm := native:rustllvm libc std\n@@ -118,9 +120,11 @@ DOC_CRATES := $(filter-out rustc, \\\n               $(filter-out rustc_trans, \\\n               $(filter-out rustc_typeck, \\\n               $(filter-out rustc_borrowck, \\\n+              $(filter-out rustc_resolve, \\\n               $(filter-out rustc_driver, \\\n-              $(filter-out syntax, $(CRATES)))))))\n-COMPILER_DOC_CRATES := rustc rustc_trans rustc_borrowck rustc_typeck rustc_driver syntax\n+              $(filter-out syntax, $(CRATES))))))))\n+COMPILER_DOC_CRATES := rustc rustc_trans rustc_borrowck rustc_resolve \\\n+                       rustc_typeck rustc_driver syntax\n \n # This macro creates some simple definitions for each crate being built, just\n # some munging of all of the parameters above."}, {"sha": "a5495a44a11f79dace2ae57d8888f39ee71252b5", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -21,7 +21,8 @@ $(eval $(call RUST_CRATE,coretest))\n \n TEST_TARGET_CRATES = $(filter-out core unicode,$(TARGET_CRATES)) coretest\n TEST_DOC_CRATES = $(DOC_CRATES)\n-TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_trans,$(HOST_CRATES))\n+TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve rustc_trans,\\\n+                     $(HOST_CRATES))\n TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n ######################################################################"}, {"sha": "669a51449709d316c71541ab5c016cbc68d74a66", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -90,7 +90,6 @@ pub mod middle {\n     pub mod reachable;\n     pub mod region;\n     pub mod recursion_limit;\n-    pub mod resolve;\n     pub mod resolve_lifetime;\n     pub mod stability;\n     pub mod subst;"}, {"sha": "60b890b037095c0f0845a76777d20a9858c81efe", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -20,6 +20,7 @@ use rustc::plugin::registry::Registry;\n use rustc::plugin;\n use rustc::util::common::time;\n use rustc_borrowck as borrowck;\n+use rustc_resolve as resolve;\n use rustc_trans::back::link;\n use rustc_trans::back::write;\n use rustc_trans::save;\n@@ -341,7 +342,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     let lang_items = time(time_passes, \"language item collection\", (), |_|\n                           middle::lang_items::collect_language_items(krate, &sess));\n \n-    let middle::resolve::CrateMap {\n+    let resolve::CrateMap {\n         def_map,\n         freevars,\n         capture_mode_map,\n@@ -350,8 +351,8 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n         external_exports,\n         last_private_map\n     } =\n-        time(time_passes, \"resolution\", (), |_|\n-             middle::resolve::resolve_crate(&sess, &lang_items, krate));\n+        time(time_passes, \"resolution\", (),\n+             |_| resolve::resolve_crate(&sess, &lang_items, krate));\n \n     // Discard MTWT tables that aren't required past resolution.\n     syntax::ext::mtwt::clear_tables();"}, {"sha": "34d9fd6bcad74cb94d500512fc4f85801e02eb95", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -35,6 +35,7 @@ extern crate libc;\n extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_borrowck;\n+extern crate rustc_resolve;\n extern crate rustc_trans;\n extern crate rustc_typeck;\n #[phase(plugin, link)] extern crate log;"}, {"sha": "090d6a7a3caef2d81fb855110bf35e11d12f9e25", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -13,9 +13,9 @@\n use diagnostic;\n use diagnostic::Emitter;\n use driver;\n+use rustc_resolve as resolve;\n use rustc_typeck::middle::lang_items;\n use rustc_typeck::middle::region::{mod, CodeExtent};\n-use rustc_typeck::middle::resolve;\n use rustc_typeck::middle::resolve_lifetime;\n use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;"}, {"sha": "b462bfe41b9d36f92e48673b786140819af290ca", "filename": "src/librustc_resolve/lib.rs", "status": "renamed", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -8,6 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![crate_name = \"rustc_resolve\"]\n+#![experimental]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(globs, phase, slicing_syntax)]\n+#![feature(rustc_diagnostic_macros)]\n+\n+#[phase(plugin, link)] extern crate log;\n+#[phase(plugin, link)] extern crate syntax;\n+\n+extern crate rustc;\n+\n use self::PatternBindingMode::*;\n use self::Namespace::*;\n use self::NamespaceError::*;\n@@ -30,17 +46,17 @@ use self::ModuleKind::*;\n use self::TraitReferenceType::*;\n use self::FallbackChecks::*;\n \n-use session::Session;\n-use lint;\n-use metadata::csearch;\n-use metadata::decoder::{DefLike, DlDef, DlField, DlImpl};\n-use middle::def::*;\n-use middle::lang_items::LanguageItems;\n-use middle::pat_util::pat_bindings;\n-use middle::privacy::*;\n-use middle::subst::{ParamSpace, FnSpace, TypeSpace};\n-use middle::ty::{CaptureModeMap, Freevar, FreevarMap, TraitMap};\n-use util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n+use rustc::session::Session;\n+use rustc::lint;\n+use rustc::metadata::csearch;\n+use rustc::metadata::decoder::{DefLike, DlDef, DlField, DlImpl};\n+use rustc::middle::def::*;\n+use rustc::middle::lang_items::LanguageItems;\n+use rustc::middle::pat_util::pat_bindings;\n+use rustc::middle::privacy::*;\n+use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n+use rustc::middle::ty::{CaptureModeMap, Freevar, FreevarMap, TraitMap};\n+use rustc::util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n \n use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate, CrateNum};\n use syntax::ast::{DeclItem, DefId, Expr, ExprAgain, ExprBreak, ExprField};", "previous_filename": "src/librustc/middle/resolve.rs"}, {"sha": "ad4ed03e6e2c82386f09c1add758975a89ce71d5", "filename": "src/test/run-pass/issue-14254.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Ftest%2Frun-pass%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54fc980f3e9f50620a8335029bf644753f7c89d/src%2Ftest%2Frun-pass%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14254.rs?ref=c54fc980f3e9f50620a8335029bf644753f7c89d", "patch": "@@ -24,7 +24,7 @@ impl BarTy {\n     fn b(&self) {}\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl Foo for *const BarTy {\n     fn bar(&self) {\n         self.baz();\n@@ -33,7 +33,7 @@ impl Foo for *const BarTy {\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl<'a> Foo for &'a BarTy {\n     fn bar(&self) {\n         self.baz();\n@@ -45,7 +45,7 @@ impl<'a> Foo for &'a BarTy {\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl<'a> Foo for &'a mut BarTy {\n     fn bar(&self) {\n         self.baz();\n@@ -57,39 +57,39 @@ impl<'a> Foo for &'a mut BarTy {\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl Foo for Box<BarTy> {\n     fn bar(&self) {\n         self.baz();\n         Foo::bah(None::<Box<BarTy>>);\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl Foo for *const int {\n     fn bar(&self) {\n         self.baz();\n         Foo::bah(None::<*const int>);\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl<'a> Foo for &'a int {\n     fn bar(&self) {\n         self.baz();\n         Foo::bah(None::<&int>);\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl<'a> Foo for &'a mut int {\n     fn bar(&self) {\n         self.baz();\n         Foo::bah(None::<&mut int>);\n     }\n }\n \n-// If these fail, it's necessary to update middle::resolve and the cfail tests.\n+// If these fail, it's necessary to update rustc_resolve and the cfail tests.\n impl Foo for Box<int> {\n     fn bar(&self) {\n         self.baz();"}]}