{"sha": "f3717da1b1dd556d19b449fc648e21c19ace1fb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzE3ZGExYjFkZDU1NmQxOWI0NDlmYzY0OGUyMWMxOWFjZTFmYjY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-24T22:11:22Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-24T22:46:20Z"}, "message": "Modify the fn vistors in walk so that they can handle functions without names. Update the typestate code to understand this.", "tree": {"sha": "b615fc3398bb0129cb38499f1103bac5ab33aaae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b615fc3398bb0129cb38499f1103bac5ab33aaae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3717da1b1dd556d19b449fc648e21c19ace1fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3717da1b1dd556d19b449fc648e21c19ace1fb6", "html_url": "https://github.com/rust-lang/rust/commit/f3717da1b1dd556d19b449fc648e21c19ace1fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3717da1b1dd556d19b449fc648e21c19ace1fb6/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142ff011da9f82a10e87c9436c2d1b877b2828a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/142ff011da9f82a10e87c9436c2d1b877b2828a2", "html_url": "https://github.com/rust-lang/rust/commit/142ff011da9f82a10e87c9436c2d1b877b2828a2"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "b19644eb205c53e1e9fc623394a0cc2921deee48", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -8,6 +8,8 @@ import util::common::ty_mach;\n import util::common::filename;\n \n type ident = str;\n+// Functions may or may not have names.\n+type fn_ident = option::t[ident];\n \n type path_ = rec(vec[ident] idents, vec[@ty] types);\n "}, {"sha": "8a705be2dcb795114a284167119328c5d7317d12", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -51,7 +51,7 @@ fn collect_ids_local(&@local l, @mutable vec[node_id] rs) {\n     vec::push(*rs, l.node.id);\n }\n \n-fn node_ids_in_fn(&_fn f, &span sp, &ident i, node_id id,\n+fn node_ids_in_fn(&_fn f, &span sp, &fn_ident i, node_id id,\n                   @mutable vec[node_id] rs) {\n     auto collect_ids = walk::default_visitor();\n     collect_ids =\n@@ -69,15 +69,16 @@ fn init_vecs(&crate_ctxt ccx, &vec[node_id] node_ids, uint len) {\n     }\n }\n \n-fn visit_fn(&crate_ctxt ccx, uint num_constraints, &_fn f, &span sp, &ident i,\n-            node_id id) {\n+fn visit_fn(&crate_ctxt ccx, uint num_constraints, &_fn f, &span sp,\n+            &fn_ident i, node_id id) {\n     let @mutable vec[node_id] node_ids = @mutable [];\n     node_ids_in_fn(f, sp, i, id, node_ids);\n     auto node_id_vec = *node_ids;\n     init_vecs(ccx, node_id_vec, num_constraints);\n }\n \n-fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &span sp, &ident i, node_id id) {\n+fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &span sp, &fn_ident i,\n+                  node_id id) {\n     auto f_info = get_fn_info(ccx, id);\n     visit_fn(ccx, num_constraints(f_info), f, sp, i, id);\n }"}, {"sha": "93b2c5326b167d7c4b4644e016b1751b9840bcfa", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -8,6 +8,7 @@ import front::ast::obj_field;\n import front::ast::_obj;\n import front::ast::stmt;\n import front::ast::ident;\n+import front::ast::fn_ident;\n import front::ast::node_id;\n import front::ast::def_id;\n import front::ast::local_def;\n@@ -120,7 +121,7 @@ fn check_states_stmt(&fn_ctxt fcx, &@stmt s) {\n }\n \n fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, node_id id,\n-                                   &span sp, &ident i) {\n+                                   &span sp, &fn_ident i) {\n     /* Postorder traversal instead of pre is important\n        because we want the smallest possible erroneous statement\n        or expression. */\n@@ -172,7 +173,7 @@ fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, node_id id,\n     }\n }\n \n-fn check_fn_states(&fn_ctxt fcx, &_fn f, node_id id, &span sp, &ident i) {\n+fn check_fn_states(&fn_ctxt fcx, &_fn f, node_id id, &span sp, &fn_ident i) {\n     /* Compute the pre- and post-states for this function */\n \n     auto g = find_pre_post_state_fn;\n@@ -183,12 +184,13 @@ fn check_fn_states(&fn_ctxt fcx, &_fn f, node_id id, &span sp, &ident i) {\n     check_states_against_conditions(fcx, f, id, sp, i);\n }\n \n-fn fn_states(&crate_ctxt ccx, &_fn f, &span sp, &ident i, node_id id) {\n+fn fn_states(&crate_ctxt ccx, &_fn f, &span sp, &fn_ident i, node_id id) {\n     /* Look up the var-to-bit-num map for this function */\n \n     assert (ccx.fm.contains_key(id));\n     auto f_info = ccx.fm.get(id);\n-    auto fcx = rec(enclosing=f_info, id=id, name=i, ccx=ccx);\n+    auto name = option::from_maybe(\"anon\", i);\n+    auto fcx = rec(enclosing=f_info, id=id, name=name, ccx=ccx);\n     check_fn_states(fcx, f, id, sp, i);\n }\n "}, {"sha": "2a23dac596b314c4d3fe05f5551e5a375fda847e", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -3,6 +3,7 @@ import std::vec;\n import std::vec::plus_option;\n import front::ast;\n import front::ast::*;\n+import pretty::ppaux::fn_ident_to_string;\n import std::option::*;\n import middle::walk::walk_crate;\n import middle::walk::walk_fn;\n@@ -56,7 +57,7 @@ fn collect_pred(&ctxt cx, &@expr e) {\n     }\n }\n \n-fn find_locals(&ty::ctxt tcx, &_fn f, &span sp, &ident i, node_id id)\n+fn find_locals(&ty::ctxt tcx, &_fn f, &span sp, &fn_ident i, node_id id)\n     -> ctxt {\n     let ctxt cx = rec(cs=@mutable vec::alloc(0u), tcx=tcx);\n     auto visitor = walk::default_visitor();\n@@ -103,7 +104,7 @@ fn add_constraint(&ty::ctxt tcx, aux::constr c, uint next, constr_map tbl) ->\n \n /* builds a table mapping each local var defined in f\n    to a bit number in the precondition/postcondition vectors */\n-fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp, &ident f_name,\n+fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp, &fn_ident f_name,\n               node_id id) {\n     auto res_map = @new_int_hash[constraint]();\n     let uint next = 0u;\n@@ -121,14 +122,15 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp, &ident f_name,\n     /* add a pseudo-entry for the function's return value\n        we can safely use the function's name itself for this purpose */\n \n-    add_constraint(cx.tcx, respan(f_sp, rec(id=id, c=ninit(f_name))), next,\n+    auto name = fn_ident_to_string(id, f_name);\n+    add_constraint(cx.tcx, respan(f_sp, rec(id=id, c=ninit(name))), next,\n                    res_map);\n     auto rslt =\n         rec(constrs=res_map,\n             num_constraints=vec::len(*cx.cs) + 1u,\n             cf=f.decl.cf);\n     ccx.fm.insert(id, rslt);\n-    log f_name + \" has \" + uistr(num_constraints(rslt)) + \" constraints\";\n+    log name + \" has \" + uistr(num_constraints(rslt)) + \" constraints\";\n }\n \n "}, {"sha": "47b41f27e3ec69597eed206a87836efb1fd217cb", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -78,6 +78,7 @@ import util::common::log_expr_err;\n import util::common::log_block_err;\n import util::common::log_block;\n import util::common::span;\n+import pretty::ppaux::fn_ident_to_string;\n \n fn find_pre_post_mod(&_mod m) -> _mod {\n     log \"implement find_pre_post_mod!\";\n@@ -686,10 +687,11 @@ fn find_pre_post_fn(&fn_ctxt fcx, &_fn f) {\n     }\n }\n \n-fn fn_pre_post(crate_ctxt ccx, &_fn f, &span sp, &ident i, node_id id) {\n+fn fn_pre_post(crate_ctxt ccx, &_fn f, &span sp, &fn_ident i,\n+               node_id id) {\n     assert (ccx.fm.contains_key(id));\n-    auto fcx = rec(enclosing=ccx.fm.get(id), id=id, name=i,\n-                   ccx=ccx);\n+    auto fcx = rec(enclosing=ccx.fm.get(id), id=id,\n+                   name=fn_ident_to_string(id, i), ccx=ccx);\n     find_pre_post_fn(fcx, f);\n }\n //"}, {"sha": "ad2618faea75c1a2e8e3d471e579695fbc98895b", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -6,8 +6,6 @@ import std::option::none;\n import util::common::span;\n import util::common::respan;\n \n-\n-// FIXME: Should visit patterns as well.\n type ast_visitor =\n     rec(fn() -> bool  keep_going,\n         fn() -> bool  want_crate_directives,\n@@ -40,8 +38,8 @@ type ast_visitor =\n         fn(&@ast::ty)  visit_ty_pre,\n         fn(&@ast::ty)  visit_ty_post,\n         fn(&@ast::constr)  visit_constr,\n-        fn(&ast::_fn, &span, &ast::ident, ast::node_id) visit_fn_pre,\n-        fn(&ast::_fn, &span, &ast::ident, ast::node_id) visit_fn_post);\n+        fn(&ast::_fn, &span, &ast::fn_ident, ast::node_id) visit_fn_pre,\n+        fn(&ast::_fn, &span, &ast::fn_ident, ast::node_id) visit_fn_post);\n \n fn walk_crate(&ast_visitor v, &ast::crate c) {\n     if (!v.keep_going()) { ret; }\n@@ -102,7 +100,7 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n     alt (i.node) {\n         case (ast::item_const(?t, ?e)) { walk_ty(v, t); walk_expr(v, e); }\n         case (ast::item_fn(?f, _)) {\n-            walk_fn(v, f, i.span, i.ident, i.id);\n+            walk_fn(v, f, i.span, some(i.ident), i.id);\n         }\n         case (ast::item_mod(?m)) { walk_mod(v, m); }\n         case (ast::item_native_mod(?nm)) { walk_native_mod(v, nm); }\n@@ -118,13 +116,15 @@ fn walk_item(&ast_visitor v, @ast::item i) {\n             for (ast::obj_field f in ob.fields) { walk_ty(v, f.ty); }\n             for (@ast::method m in ob.methods) {\n                 v.visit_method_pre(m);\n-                walk_fn(v, m.node.meth, m.span, m.node.ident, m.node.id);\n+                walk_fn(v, m.node.meth, m.span,\n+                        some(m.node.ident), m.node.id);\n                 v.visit_method_post(m);\n             }\n             alt (ob.dtor) {\n                 case (none) { }\n                 case (some(?m)) {\n-                    walk_fn(v, m.node.meth, m.span, m.node.ident, m.node.id);\n+                    walk_fn(v, m.node.meth, m.span,\n+                            some(m.node.ident), m.node.id);\n                 }\n             }\n         }\n@@ -217,7 +217,7 @@ fn walk_fn_decl(&ast_visitor v, &ast::fn_decl fd) {\n     walk_ty(v, fd.output);\n }\n \n-fn walk_fn(&ast_visitor v, &ast::_fn f, &span sp, &ast::ident i,\n+fn walk_fn(&ast_visitor v, &ast::_fn f, &span sp, &ast::fn_ident i,\n            ast::node_id d) {\n     if (!v.keep_going()) { ret; }\n     v.visit_fn_pre(f, sp, i, d);\n@@ -405,7 +405,8 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n             // Methods\n             for (@ast::method m in anon_obj.methods) {\n                 v.visit_method_pre(m);\n-                walk_fn(v, m.node.meth, m.span, m.node.ident, m.node.id);\n+                walk_fn(v, m.node.meth, m.span, some(m.node.ident),\n+                        m.node.id);\n                 v.visit_method_post(m);\n             }\n         }\n@@ -447,7 +448,7 @@ fn def_visit_ty(&@ast::ty t) { }\n \n fn def_visit_constr(&@ast::constr c) { }\n \n-fn def_visit_fn(&ast::_fn f, &span sp, &ast::ident i, ast::node_id d) { }\n+fn def_visit_fn(&ast::_fn f, &span sp, &ast::fn_ident i, ast::node_id d) { }\n \n fn default_visitor() -> ast_visitor {\n     ret rec(keep_going=def_keep_going,"}, {"sha": "c3534a9e8bdad63b79b1a18467d1632b227268db", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3717da1b1dd556d19b449fc648e21c19ace1fb6/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=f3717da1b1dd556d19b449fc648e21c19ace1fb6", "patch": "@@ -34,6 +34,13 @@ fn mode_str_1(&ty::mode m) -> str {\n     }\n }\n \n+fn fn_ident_to_string(ast::node_id id, &ast::fn_ident i) -> str {\n+    ret alt (i) {\n+        case (none) { \"anon\" + istr(id) }\n+        case (some(?s)) { s }\n+    };\n+}\n+\n fn ty_to_str(&ctxt cx, &t typ) -> str {\n     fn fn_input_to_str(&ctxt cx, &rec(middle::ty::mode mode, t ty) input) ->\n        str {"}]}