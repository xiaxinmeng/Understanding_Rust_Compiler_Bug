{"sha": "077fae94a175408d8d7624af8a9fb96ce71bf3c3", "node_id": "C_kwDOAAsO6NoAKDA3N2ZhZTk0YTE3NTQwOGQ4ZDc2MjRhZjhhOWZiOTZjZTcxYmYzYzM", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-12-30T05:09:09Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-03T23:26:57Z"}, "message": "Add note about wrapping in braces\n\nPreviously it was not clear why this errored or if it was even supported, as there was no\ndiagnostic that suggested wrapping it in braces.\n\nThus, add a simple diagnostic that suggests wrapping enum variants in braces.", "tree": {"sha": "2a98c4029967cb4212063a957b6d7c382832964d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a98c4029967cb4212063a957b6d7c382832964d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077fae94a175408d8d7624af8a9fb96ce71bf3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077fae94a175408d8d7624af8a9fb96ce71bf3c3", "html_url": "https://github.com/rust-lang/rust/commit/077fae94a175408d8d7624af8a9fb96ce71bf3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077fae94a175408d8d7624af8a9fb96ce71bf3c3/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7536eaae59b44ff5259183ca98384129d69dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7536eaae59b44ff5259183ca98384129d69dd0", "html_url": "https://github.com/rust-lang/rust/commit/2c7536eaae59b44ff5259183ca98384129d69dd0"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "686db67e36dcbb33cfb52cee1eb25a657c6426b0", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/077fae94a175408d8d7624af8a9fb96ce71bf3c3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fae94a175408d8d7624af8a9fb96ce71bf3c3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=077fae94a175408d8d7624af8a9fb96ce71bf3c3", "patch": "@@ -1199,17 +1199,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     (_, _) => {\n                         let got = if let Some(_) = term.ty() { \"type\" } else { \"constant\" };\n                         let expected = def_kind.descr(assoc_item_def_id);\n-                        let reported = tcx\n-                            .sess\n-                            .struct_span_err(\n+                        let mut err = tcx.sess.struct_span_err(\n+                            binding.span,\n+                            &format!(\"expected {expected} bound, found {got}\"),\n+                        );\n+                        err.span_note(\n+                            tcx.def_span(assoc_item_def_id),\n+                            &format!(\"{expected} defined here\"),\n+                        );\n+\n+                        if let hir::def::DefKind::AssocConst = def_kind\n+                          && let Some(t) = term.ty() && (t.is_enum() || t.references_error())\n+                          && tcx.features().associated_const_equality {\n+                            err.span_suggestion(\n                                 binding.span,\n-                                &format!(\"expected {expected} bound, found {got}\"),\n-                            )\n-                            .span_note(\n-                                tcx.def_span(assoc_item_def_id),\n-                                &format!(\"{expected} defined here\"),\n-                            )\n-                            .emit();\n+                                \"if equating a const, try wrapping with braces\",\n+                                format!(\"{} = {{ const }}\", binding.item_name),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        }\n+                        let reported = err.emit();\n                         term = match def_kind {\n                             hir::def::DefKind::AssocTy => {\n                                 tcx.ty_error_with_guaranteed(reported).into()"}, {"sha": "4d0aaf88e403b95856b29d988c1520e4d1ecdea3", "filename": "src/test/ui/const-generics/assoc_const_eq_diagnostic.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/077fae94a175408d8d7624af8a9fb96ce71bf3c3/src%2Ftest%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fae94a175408d8d7624af8a9fb96ce71bf3c3/src%2Ftest%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs?ref=077fae94a175408d8d7624af8a9fb96ce71bf3c3", "patch": "@@ -0,0 +1,18 @@\n+#![feature(associated_const_equality)]\n+\n+pub enum Mode {\n+    Cool,\n+}\n+\n+pub trait Parse {\n+    const MODE: Mode;\n+}\n+\n+pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n+//~^ ERROR expected associated constant bound\n+//~| ERROR expected type\n+\n+fn no_help() -> Mode::Cool {}\n+//~^ ERROR expected type, found variant\n+\n+fn main() {}"}, {"sha": "ba727ee0ea3088560712ad68a02c58a6809f1201", "filename": "src/test/ui/const-generics/assoc_const_eq_diagnostic.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/077fae94a175408d8d7624af8a9fb96ce71bf3c3/src%2Ftest%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fae94a175408d8d7624af8a9fb96ce71bf3c3/src%2Ftest%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr?ref=077fae94a175408d8d7624af8a9fb96ce71bf3c3", "patch": "@@ -0,0 +1,33 @@\n+error[E0573]: expected type, found variant `Mode::Cool`\n+  --> $DIR/assoc_const_eq_diagnostic.rs:11:35\n+   |\n+LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n+   |                                   ^^^^^^^^^^\n+   |                                   |\n+   |                                   not a type\n+   |                                   help: try using the variant's enum: `Mode`\n+\n+error[E0573]: expected type, found variant `Mode::Cool`\n+  --> $DIR/assoc_const_eq_diagnostic.rs:15:17\n+   |\n+LL | fn no_help() -> Mode::Cool {}\n+   |                 ^^^^^^^^^^\n+   |                 |\n+   |                 not a type\n+   |                 help: try using the variant's enum: `Mode`\n+\n+error: expected associated constant bound, found type\n+  --> $DIR/assoc_const_eq_diagnostic.rs:11:28\n+   |\n+LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n+   |                            ^^^^^^^^^^^^^^^^^ help: if equating a const, try wrapping with braces: `MODE = { const }`\n+   |\n+note: associated constant defined here\n+  --> $DIR/assoc_const_eq_diagnostic.rs:8:5\n+   |\n+LL |     const MODE: Mode;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0573`."}]}