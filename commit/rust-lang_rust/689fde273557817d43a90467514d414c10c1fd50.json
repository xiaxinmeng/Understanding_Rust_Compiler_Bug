{"sha": "689fde273557817d43a90467514d414c10c1fd50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWZkZTI3MzU1NzgxN2Q0M2E5MDQ2NzUxNGQ0MTRjMTBjMWZkNTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-16T14:55:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-16T14:55:59Z"}, "message": "Rollup merge of #34838 - steveklabnik:gh33677, r=alexcrichton\n\nFix up documentation around no_std\n\n1. Fix the sections in the book to have the correct signatures. I've\n   also marked them as `ignore`; there's no way to set the `no_std`\n   feature for libc, so it pulls in the stdlib, so this wasn't even\n   testing the actual thing it was testing. Better to just ignore.\n2. Correcting libcore's docs for factual inaccuracy, and add a note\n   about language items.\n\nFixes #33677\n\nr? @alexcrichton", "tree": {"sha": "16fe080b88af8e6af7e646da92d8df45ecdf7988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16fe080b88af8e6af7e646da92d8df45ecdf7988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689fde273557817d43a90467514d414c10c1fd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689fde273557817d43a90467514d414c10c1fd50", "html_url": "https://github.com/rust-lang/rust/commit/689fde273557817d43a90467514d414c10c1fd50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689fde273557817d43a90467514d414c10c1fd50/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a7596a328e6e98dec16b0d01ad5b22e7e8c9792", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7596a328e6e98dec16b0d01ad5b22e7e8c9792", "html_url": "https://github.com/rust-lang/rust/commit/6a7596a328e6e98dec16b0d01ad5b22e7e8c9792"}, {"sha": "fcecdac96d718b90849f210e1ccd6be45dc6ff1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcecdac96d718b90849f210e1ccd6be45dc6ff1e", "html_url": "https://github.com/rust-lang/rust/commit/fcecdac96d718b90849f210e1ccd6be45dc6ff1e"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "6fd7cf66920d48875e03c0a6581e08b7de72101b", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 48, "deletions": 25, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/689fde273557817d43a90467514d414c10c1fd50/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/689fde273557817d43a90467514d414c10c1fd50/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=689fde273557817d43a90467514d414c10c1fd50", "patch": "@@ -21,7 +21,7 @@ this using our `Cargo.toml` file:\n \n ```toml\n [dependencies]\n-libc = { version = \"0.2.11\", default-features = false }\n+libc = { version = \"0.2.14\", default-features = false }\n ```\n \n Note that the default features have been disabled. This is a critical step -\n@@ -36,8 +36,7 @@ or overriding the default shim for the C `main` function with your own.\n The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n-```rust\n-# #![feature(libc)]\n+```rust,ignore\n #![feature(lang_items)]\n #![feature(start)]\n #![no_std]\n@@ -51,53 +50,77 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n-// These functions and traits are used by the compiler, but not\n+// These functions are used by the compiler, but not\n // for a bare-bones hello world. These are normally\n // provided by libstd.\n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! { loop {} }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-# // fn main() {} tricked you, rustdoc!\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern fn eh_personality() {\n+}\n+\n+#[lang = \"panic_fmt\"]\n+#[no_mangle]\n+pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n+                               _file: &'static str,\n+                               _line: u32) -> ! {\n+    loop {}\n+}\n ```\n \n To override the compiler-inserted `main` shim, one has to disable it\n with `#![no_main]` and then create the appropriate symbol with the\n correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n-```rust\n-# #![feature(libc)]\n+```rust,ignore\n #![feature(lang_items)]\n #![feature(start)]\n #![no_std]\n #![no_main]\n \n+// Pull in the system libc library for what crt0.o likely requires\n extern crate libc;\n \n+// Entry point for this program\n #[no_mangle] // ensure that this symbol is called `main` in the output\n-pub extern fn main(argc: i32, argv: *const *const u8) -> i32 {\n+pub extern fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n     0\n }\n \n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! { loop {} }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-# // fn main() {} tricked you, rustdoc!\n+// These functions and traits are used by the compiler, but not\n+// for a bare-bones hello world. These are normally\n+// provided by libstd.\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+pub extern fn eh_personality() {\n+}\n+\n+#[lang = \"panic_fmt\"]\n+#[no_mangle]\n+pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n+                               _file: &'static str,\n+                               _line: u32) -> ! {\n+    loop {}\n+}\n ```\n \n-The compiler currently makes a few assumptions about symbols which are available\n-in the executable to call. Normally these functions are provided by the standard\n-library, but without it you must define your own.\n+## More about the langauge items\n+\n+The compiler currently makes a few assumptions about symbols which are\n+available in the executable to call. Normally these functions are provided by\n+the standard library, but without it you must define your own. These symbols\n+are called \"language items\", and they each have an internal name, and then a\n+signature that an implementation must conform to.\n \n The first of these two functions, `eh_personality`, is used by the failure\n mechanisms of the compiler. This is often mapped to GCC's personality function\n (see the [libstd implementation][unwind] for more information), but crates\n which do not trigger a panic can be assured that this function is never\n-called. The second function, `panic_fmt`, is also used by the failure\n-mechanisms of the compiler.\n-\n+called. Both the language item and the symbol name are `eh_personality`.\n+ \n [unwind]: https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/gcc.rs\n+\n+The second function, `panic_fmt`, is also used by the failure mechanisms of the\n+compiler. When a panic happens, this controls the message that's displayed on\n+the screen. While the language item's name is `panic_fmt`, the symbol name is\n+`rust_begin_panic`."}, {"sha": "0ad1f671f155b8182c038ce0ec8e8ae9483308b7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/689fde273557817d43a90467514d414c10c1fd50/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689fde273557817d43a90467514d414c10c1fd50/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=689fde273557817d43a90467514d414c10c1fd50", "patch": "@@ -25,6 +25,8 @@\n //!\n //! # How to use the core library\n //!\n+//! Please note that all of these details are currently not considered stable.\n+//!\n // FIXME: Fill me in with more detail when the interface settles\n //! This library is built on the assumption of a few existing symbols:\n //!\n@@ -34,11 +36,12 @@\n //!   These functions are often provided by the system libc, but can also be\n //!   provided by the [rlibc crate](https://crates.io/crates/rlibc).\n //!\n-//! * `rust_begin_unwind` - This function takes three arguments, a\n-//!   `fmt::Arguments`, a `&str`, and a `u32`. These three arguments dictate\n-//!   the panic message, the file at which panic was invoked, and the line.\n-//!   It is up to consumers of this core library to define this panic\n-//!   function; it is only required to never return.\n+//! * `rust_begin_panic` - This function takes three arguments, a\n+//!   `fmt::Arguments`, a `&'static str`, and a `u32`. These three arguments\n+//!   dictate the panic message, the file at which panic was invoked, and the\n+//!   line. It is up to consumers of this core library to define this panic\n+//!   function; it is only required to never return. This requires a `lang`\n+//!   attribute named `panic_fmt`.\n \n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues."}]}