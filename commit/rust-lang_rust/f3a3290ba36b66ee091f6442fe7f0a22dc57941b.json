{"sha": "f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTMyOTBiYTM2YjY2ZWUwOTFmNjQ0MmZlN2YwYTIyZGM1Nzk0MWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T02:22:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T02:22:09Z"}, "message": "Account for maybe_whole_expr in range patterns.", "tree": {"sha": "24037cbb4021d0a7c94f972a3031e6d9981f0fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24037cbb4021d0a7c94f972a3031e6d9981f0fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "html_url": "https://github.com/rust-lang/rust/commit/f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b88a9eba8abbac87eddcb2998beea09589c2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b88a9eba8abbac87eddcb2998beea09589c2c9", "html_url": "https://github.com/rust-lang/rust/commit/04b88a9eba8abbac87eddcb2998beea09589c2c9"}], "stats": {"total": 141, "additions": 140, "deletions": 1}, "files": [{"sha": "2fa6d20430bf1aa9033dc49c54da0db4d1cdb7fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "patch": "@@ -3741,6 +3741,7 @@ impl<'a> Parser<'a> {\n         self.token.is_path_start() // e.g. `MY_CONST`;\n             || self.token == token::Dot // e.g. `.5` for recovery;\n             || self.token.can_begin_literal_or_bool() // e.g. `42`.\n+            || self.token.is_whole_expr()\n     }\n \n     // Helper function to decide whether to parse as ident binding"}, {"sha": "d6d13c19f7183c4a94274764068aeb7f9a47eda7", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "patch": "@@ -476,6 +476,19 @@ impl Token {\n         false\n     }\n \n+    /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?\n+    /// That is, is this a pre-parsed expression dropped into the token stream\n+    /// (which happens while parsing the result ofmacro expansion)?\n+    crate fn is_whole_expr(&self) -> bool {\n+        if let Interpolated(ref nt) = self.kind {\n+            if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtBlock(_) = **nt {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+\n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n     crate fn is_mutability(&self) -> bool {\n         self.is_keyword(kw::Mut) ||"}, {"sha": "a7d10ca9320a6cee464fec063ba0de8454223bdc", "filename": "src/test/ui/parser/issue-63115-range-pat-interpolated.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs?ref=f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(exclusive_range_pattern)]\n+\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    macro_rules! mac_expr {\n+        ($e:expr) => {\n+            if let 2...$e = 3 {}\n+            if let 2..=$e = 3 {}\n+            if let 2..$e = 3 {}\n+        }\n+    }\n+    mac_expr!(4);\n+}"}, {"sha": "260e108315973642bee25231146bc77780d777c7", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "patch": "@@ -121,3 +121,31 @@ fn inclusive2_to() {\n     //~| ERROR `...` range patterns are deprecated\n     //~| ERROR mismatched types\n }\n+\n+fn with_macro_expr_var() {\n+    macro_rules! mac2 {\n+        ($e1:expr, $e2:expr) => {\n+            let $e1..$e2;\n+            let $e1...$e2;\n+            //~^ ERROR `...` range patterns are deprecated\n+            let $e1..=$e2;\n+        }\n+    }\n+\n+    mac2!(0, 1);\n+\n+    macro_rules! mac {\n+        ($e:expr) => {\n+            let ..$e; //~ ERROR `..X` range patterns are not supported\n+            let ...$e; //~ ERROR `...X` range patterns are not supported\n+            //~^ ERROR `...` range patterns are deprecated\n+            let ..=$e; //~ ERROR `..=X` range patterns are not supported\n+            let $e..; //~ ERROR `X..` range patterns are not supported\n+            let $e...; //~ ERROR `X...` range patterns are not supported\n+            //~^ ERROR `...` range patterns are deprecated\n+            let $e..=; //~ ERROR `X..=` range patterns are not supported\n+        }\n+    }\n+\n+    mac!(0);\n+}"}, {"sha": "89ec059cb8234c72b7f8ff35735d50327ccef9bb", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3290ba36b66ee091f6442fe7f0a22dc57941b/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=f3a3290ba36b66ee091f6442fe7f0a22dc57941b", "patch": "@@ -214,6 +214,60 @@ error: `...X` range patterns are not supported\n LL |     if let ....3 = 0 {}\n    |            ^^^^^ help: try using the minimum value for the type: `MIN...0.3`\n \n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:139:17\n+   |\n+LL |             let ..$e;\n+   |                 ^^ help: try using the minimum value for the type: `MIN..0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:140:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: try using the minimum value for the type: `MIN...0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:142:17\n+   |\n+LL |             let ..=$e;\n+   |                 ^^^ help: try using the minimum value for the type: `MIN..=0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:143:19\n+   |\n+LL |             let $e..;\n+   |                   ^^ help: try using the maximum value for the type: `0..MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:144:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: try using the maximum value for the type: `0...MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:146:19\n+   |\n+LL |             let $e..=;\n+   |                   ^^^ help: try using the maximum value for the type: `0..=MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:41:13\n    |\n@@ -316,6 +370,33 @@ error: `...` range patterns are deprecated\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n \n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:129:20\n+   |\n+LL |             let $e1...$e2;\n+   |                    ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac2!(0, 1);\n+   |     ------------ in this macro invocation\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:140:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:144:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:19:12\n    |\n@@ -532,7 +613,7 @@ LL |     if let ....3 = 0 {}\n    = note: expected type `{integer}`\n               found type `{float}`\n \n-error: aborting due to 76 previous errors\n+error: aborting due to 85 previous errors\n \n Some errors have detailed explanations: E0029, E0308.\n For more information about an error, try `rustc --explain E0029`."}]}