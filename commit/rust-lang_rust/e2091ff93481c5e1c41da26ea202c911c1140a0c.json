{"sha": "e2091ff93481c5e1c41da26ea202c911c1140a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMDkxZmY5MzQ4MWM1ZTFjNDFkYTI2ZWEyMDJjOTExYzExNDBhMGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T14:19:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T14:19:38Z"}, "message": "add more atomic intrinsics", "tree": {"sha": "091bf009f9dfb623bac482350a0a57dfe8b9dfb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/091bf009f9dfb623bac482350a0a57dfe8b9dfb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2091ff93481c5e1c41da26ea202c911c1140a0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYKxl6AAoJEFbW7qD8Z6xGacAP/A6GtwmocJ49h0O/ZVwKjoLi\nf48W7FfD6ZbgRVhrfZmrFQ0YIfYIfWCpsdRqjcLlzVE5uRPslflv7hfz2eCRAq5f\n4KRBZYZQdSDXdEK+9GXtztupdNtZOUWZnmrvJKVGVss7ePGpLYPLe61+GMr+Z/MD\nQkblCPhiJcRZ8gAuvn/sZx1H3uvwOP8eD+Izp6ghH+wEXecVVNOnV+qf9GFdqW8H\n7sF3vW9/3JUcQMIcz+DMwtrktaE/3fl55EUBE0gyB8JF8RKz60S5eoMuGHFxVUeT\noqr0wFCwIm2Pc63KxjKxKNSIHalI57suzNJSrb0tumaJiBF2DbWRwHSeK4CYik0e\nPpaGZw9gV1LnosSTCPKMaGLEydT+pMeDs5jvrkN/m3N22Z6CFa9GzU8m876jrRXS\nWjA6k6+LbREC2XO1yZnnpqC2oSXPhq69ijoBltA7CCcggcENsljXipd4Za6vfbpn\nWsLTh/BzhBt77MSXN3MoMAKKys6PwmO059K7vrGHSWAhv4BW1cpizUCpOTTYNSc7\nt87j0QYfLUizOhkDpK5o/0/d/n6Lsj75pQ/tdGmrpOTSB7Q5g2bwZR10s/yK7Q3I\neBqUimFBT96P5Z3HDMjZ4efxzAHbXUvgBNfG6mMCs7a7b8OQGRVJiqTrwKwEfmV3\nDrH1C9y0sFLeihuZQfaE\n=PctI\n-----END PGP SIGNATURE-----", "payload": "tree 091bf009f9dfb623bac482350a0a57dfe8b9dfb0\nparent f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479219578 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479219578 +0100\n\nadd more atomic intrinsics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2091ff93481c5e1c41da26ea202c911c1140a0c", "html_url": "https://github.com/rust-lang/rust/commit/e2091ff93481c5e1c41da26ea202c911c1140a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2091ff93481c5e1c41da26ea202c911c1140a0c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "html_url": "https://github.com/rust-lang/rust/commit/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "5cea0bc2d0c7096ba4fcc95adc00c4d1476d6e7c", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e2091ff93481c5e1c41da26ea202c911c1140a0c/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2091ff93481c5e1c41da26ea202c911c1140a0c/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=e2091ff93481c5e1c41da26ea202c911c1140a0c", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"atomic_load\" |\n+            \"atomic_load_acq\" |\n             \"volatile_load\" => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n@@ -74,6 +75,53 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // we are inherently singlethreaded and singlecored, this is a nop\n             }\n \n+            \"atomic_xchg\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let change = self.value_to_primval(arg_vals[1], ty)?;\n+                let old = self.read_value(ptr, ty)?;\n+                let old = match old {\n+                    Value::ByVal(val) => val,\n+                    Value::ByRef(_) => bug!(\"just read the value, can't be byref\"),\n+                    Value::ByValPair(..) => bug!(\"atomic_xchg doesn't work with nonprimitives\"),\n+                };\n+                self.write_primval(dest, old)?;\n+                self.write_primval(Lvalue::from_ptr(ptr), change)?;\n+            }\n+\n+            \"atomic_cxchg\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let expect_old = self.value_to_primval(arg_vals[1], ty)?;\n+                let change = self.value_to_primval(arg_vals[2], ty)?;\n+                let old = self.read_value(ptr, ty)?;\n+                let old = match old {\n+                    Value::ByVal(val) => val,\n+                    Value::ByRef(_) => bug!(\"just read the value, can't be byref\"),\n+                    Value::ByValPair(..) => bug!(\"atomic_cxchg doesn't work with nonprimitives\"),\n+                };\n+                let (val, _) = primval::binary_op(mir::BinOp::Eq, old, expect_old)?;\n+                let dest = self.force_allocation(dest)?.to_ptr();\n+                self.write_pair_to_ptr(old, val, dest, dest_ty)?;\n+                self.write_primval(Lvalue::from_ptr(ptr), change)?;\n+            }\n+\n+            \"atomic_xadd_relaxed\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let change = self.value_to_primval(arg_vals[1], ty)?;\n+                let old = self.read_value(ptr, ty)?;\n+                let old = match old {\n+                    Value::ByVal(val) => val,\n+                    Value::ByRef(_) => bug!(\"just read the value, can't be byref\"),\n+                    Value::ByValPair(..) => bug!(\"atomic_xadd_relaxed doesn't work with nonprimitives\"),\n+                };\n+                self.write_primval(dest, old)?;\n+                // FIXME: what do atomics do on overflow?\n+                let (val, _) = primval::binary_op(mir::BinOp::Add, old, change)?;\n+                self.write_primval(Lvalue::from_ptr(ptr), val)?;\n+            },\n+\n             \"atomic_xsub_rel\" => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;"}, {"sha": "b3e07d00f010f0582b0d1647edc288f3e66b486e", "filename": "tests/run-pass/sendable-class.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e2091ff93481c5e1c41da26ea202c911c1140a0c/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2091ff93481c5e1c41da26ea202c911c1140a0c/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=e2091ff93481c5e1c41da26ea202c911c1140a0c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a class with only sendable fields can be sent\n+\n+// pretty-expanded FIXME #23616\n+\n+use std::sync::mpsc::channel;\n+\n+#[allow(dead_code)]\n+struct Foo {\n+    i: isize,\n+    j: char,\n+}\n+\n+fn foo(i:isize, j: char) -> Foo {\n+    Foo {\n+        i: i,\n+        j: j\n+    }\n+}\n+\n+pub fn main() {\n+    let (tx, rx) = channel();\n+    let _ = tx.send(foo(42, 'c'));\n+    let _ = rx;\n+}"}]}