{"sha": "09b0936db2bb3be67451c6f8948e90987e764f81", "node_id": "C_kwDOAAsO6NoAKDA5YjA5MzZkYjJiYjNiZTY3NDUxYzZmODk0OGU5MDk4N2U3NjRmODE", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-16T13:27:54Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-23T21:49:04Z"}, "message": "Refactor call terminator to always hold a destination place", "tree": {"sha": "33c3a24a12791982173c389fabd5d317223beb9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c3a24a12791982173c389fabd5d317223beb9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b0936db2bb3be67451c6f8948e90987e764f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b0936db2bb3be67451c6f8948e90987e764f81", "html_url": "https://github.com/rust-lang/rust/commit/09b0936db2bb3be67451c6f8948e90987e764f81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b0936db2bb3be67451c6f8948e90987e764f81/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222c5724ecc922fe67815f428c19f82c129d9386", "url": "https://api.github.com/repos/rust-lang/rust/commits/222c5724ecc922fe67815f428c19f82c129d9386", "html_url": "https://github.com/rust-lang/rust/commit/222c5724ecc922fe67815f428c19f82c129d9386"}], "stats": {"total": 834, "additions": 422, "deletions": 412}, "files": [{"sha": "e4ffae38c33a5ead22e1de8f5b53796616dca7ef", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -140,9 +140,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         // A `Call` terminator's return value can be a local which has borrows,\n         // so we need to record those as `killed` as well.\n         if let TerminatorKind::Call { destination, .. } = terminator.kind {\n-            if let Some((place, _)) = destination {\n-                self.record_killed_borrows_for_place(place, location);\n-            }\n+            self.record_killed_borrows_for_place(destination, location);\n         }\n \n         self.super_terminator(terminator, location);"}, {"sha": "da5f56704d41f700965752c8e857abc7a1b98916", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -2198,10 +2198,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 \"annotate_argument_and_return_for_borrow: target={:?} terminator={:?}\",\n                 target, terminator\n             );\n-            if let TerminatorKind::Call { destination: Some((place, _)), args, .. } =\n+            if let TerminatorKind::Call { destination, target: Some(_), args, .. } =\n                 &terminator.kind\n             {\n-                if let Some(assigned_to) = place.as_local() {\n+                if let Some(assigned_to) = destination.as_local() {\n                     debug!(\n                         \"annotate_argument_and_return_for_borrow: assigned_to={:?} args={:?}\",\n                         assigned_to, args"}, {"sha": "0b6be453b92310fc06657c04ef11e682478f5135", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -705,10 +705,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let terminator = block.terminator();\n                 debug!(\"was_captured_by_trait_object: terminator={:?}\", terminator);\n \n-                if let TerminatorKind::Call { destination: Some((place, block)), args, .. } =\n+                if let TerminatorKind::Call { destination, target: Some(block), args, .. } =\n                     &terminator.kind\n                 {\n-                    if let Some(dest) = place.as_local() {\n+                    if let Some(dest) = destination.as_local() {\n                         debug!(\n                             \"was_captured_by_trait_object: target={:?} dest={:?} args={:?}\",\n                             target, dest, args"}, {"sha": "0425c53d9dc3cc5686ca08d68c3db81ee7f64ba5", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -124,6 +124,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 ref func,\n                 ref args,\n                 destination,\n+                target: _,\n                 cleanup: _,\n                 from_hir_call: _,\n                 fn_span: _,\n@@ -132,9 +133,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 for arg in args {\n                     self.consume_operand(location, arg);\n                 }\n-                if let Some((dest, _ /*bb*/)) = destination {\n-                    self.mutate_place(location, *dest, Deep);\n-                }\n+                self.mutate_place(location, *destination, Deep);\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n                 self.consume_operand(location, cond);"}, {"sha": "d3aea1fd61c63d4c1dad7f4553f64d3ec1edfe4a", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -661,7 +661,8 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             TerminatorKind::Call {\n                 ref func,\n                 ref args,\n-                ref destination,\n+                destination,\n+                target: _,\n                 cleanup: _,\n                 from_hir_call: _,\n                 fn_span: _,\n@@ -670,9 +671,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 for arg in args {\n                     self.consume_operand(loc, (arg, span), flow_state);\n                 }\n-                if let Some((dest, _ /*bb*/)) = *destination {\n-                    self.mutate_place(loc, (dest, span), Deep, flow_state);\n-                }\n+                self.mutate_place(loc, (destination, span), Deep, flow_state);\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n                 self.consume_operand(loc, (cond, span), flow_state);"}, {"sha": "34bc87b20c79a4316bfa097fac2df65fe273d710", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -1403,7 +1403,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n                 // FIXME: check the values\n             }\n-            TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {\n+            TerminatorKind::Call {\n+                ref func, ref args, destination, target, from_hir_call, ..\n+            } => {\n                 self.check_operand(func, term_location);\n                 for arg in args {\n                     self.check_operand(arg, term_location);\n@@ -1424,7 +1426,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     sig,\n                 );\n                 let sig = self.normalize(sig, term_location);\n-                self.check_call_dest(body, term, &sig, destination, term_location);\n+                self.check_call_dest(body, term, &sig, destination, target, term_location);\n \n                 self.prove_predicates(\n                     sig.inputs_and_output\n@@ -1502,15 +1504,16 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         body: &Body<'tcx>,\n         term: &Terminator<'tcx>,\n         sig: &ty::FnSig<'tcx>,\n-        destination: &Option<(Place<'tcx>, BasicBlock)>,\n+        destination: Place<'tcx>,\n+        target: Option<BasicBlock>,\n         term_location: Location,\n     ) {\n         let tcx = self.tcx();\n-        match *destination {\n-            Some((ref dest, _target_block)) => {\n-                let dest_ty = dest.ty(body, tcx).ty;\n+        match target {\n+            Some(_) => {\n+                let dest_ty = destination.ty(body, tcx).ty;\n                 let dest_ty = self.normalize(dest_ty, term_location);\n-                let category = match dest.as_local() {\n+                let category = match destination.as_local() {\n                     Some(RETURN_PLACE) => {\n                         if let BorrowCheckContext {\n                             universal_regions:\n@@ -1659,8 +1662,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     self.assert_iscleanup(body, block_data, unwind, true);\n                 }\n             }\n-            TerminatorKind::Call { ref destination, cleanup, .. } => {\n-                if let &Some((_, target)) = destination {\n+            TerminatorKind::Call { ref target, cleanup, .. } => {\n+                if let &Some(target) = target {\n                     self.assert_iscleanup(body, block_data, target, is_cleanup);\n                 }\n                 if let Some(cleanup) = cleanup {"}, {"sha": "1093167fa82998885977479cb2d7bac858cd7799", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -66,8 +66,8 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         debug!(\"visit_terminator: terminator={:?}\", terminator);\n         match &terminator.kind {\n-            TerminatorKind::Call { destination: Some((into, _)), .. } => {\n-                self.remove_never_initialized_mut_locals(*into);\n+            TerminatorKind::Call { destination, .. } => {\n+                self.remove_never_initialized_mut_locals(*destination);\n             }\n             TerminatorKind::DropAndReplace { place, .. } => {\n                 self.remove_never_initialized_mut_locals(*place);"}, {"sha": "decb784199064d921027e56ace03ad8c775513aa", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -312,13 +312,14 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     source_info: mir::SourceInfo,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n-    mir_dest: Option<(Place<'tcx>, BasicBlock)>,\n+    destination: Place<'tcx>,\n+    target: Option<BasicBlock>,\n ) {\n     let fn_ty = fx.monomorphize(func.ty(fx.mir, fx.tcx));\n     let fn_sig =\n         fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), fn_ty.fn_sig(fx.tcx));\n \n-    let destination = mir_dest.map(|(place, bb)| (codegen_place(fx, place), bb));\n+    let ret_place = codegen_place(fx, destination);\n \n     // Handle special calls like instrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n@@ -333,7 +334,8 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 &fx.tcx.symbol_name(instance).name,\n                 substs,\n                 args,\n-                destination,\n+                ret_place,\n+                target,\n             );\n             return;\n         }\n@@ -344,14 +346,15 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                     fx,\n                     instance,\n                     args,\n-                    destination,\n+                    ret_place,\n+                    target,\n                     source_info,\n                 );\n                 return;\n             }\n             InstanceDef::DropGlue(_, None) => {\n                 // empty drop glue - a nop.\n-                let (_, dest) = destination.expect(\"Non terminating drop_in_place_real???\");\n+                let dest = target.expect(\"Non terminating drop_in_place_real???\");\n                 let ret_block = fx.get_block(dest);\n                 fx.bcx.ins().jump(ret_block, &[]);\n                 return;\n@@ -377,7 +380,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         .unwrap_or(false);\n     if is_cold {\n         fx.bcx.set_cold_block(fx.bcx.current_block().unwrap());\n-        if let Some((_place, destination_block)) = destination {\n+        if let Some(destination_block) = target {\n             fx.bcx.set_cold_block(fx.get_block(destination_block));\n         }\n     }\n@@ -459,7 +462,6 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         }\n     };\n \n-    let ret_place = destination.map(|(place, _)| place);\n     self::returning::codegen_with_call_return_arg(fx, &fn_abi.ret, ret_place, |fx, return_ptr| {\n         let call_args = return_ptr\n             .into_iter()\n@@ -511,7 +513,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         call_inst\n     });\n \n-    if let Some((_, dest)) = destination {\n+    if let Some(dest) = target {\n         let ret_block = fx.get_block(dest);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {"}, {"sha": "ff3bb2dfd000f679f1a4d9779685443e7c7745b1", "filename": "compiler/rustc_codegen_cranelift/src/abi/returning.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -56,23 +56,22 @@ pub(super) fn codegen_return_param<'tcx>(\n pub(super) fn codegen_with_call_return_arg<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     ret_arg_abi: &ArgAbi<'tcx, Ty<'tcx>>,\n-    ret_place: Option<CPlace<'tcx>>,\n+    ret_place: CPlace<'tcx>,\n     f: impl FnOnce(&mut FunctionCx<'_, '_, 'tcx>, Option<Value>) -> Inst,\n ) {\n     let (ret_temp_place, return_ptr) = match ret_arg_abi.mode {\n         PassMode::Ignore => (None, None),\n-        PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => match ret_place {\n-            Some(ret_place) if matches!(ret_place.inner(), CPlaceInner::Addr(_, None)) => {\n+        PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {\n+            if matches!(ret_place.inner(), CPlaceInner::Addr(_, None)) {\n                 // This is an optimization to prevent unnecessary copies of the return value when\n                 // the return place is already a memory place as opposed to a register.\n                 // This match arm can be safely removed.\n                 (None, Some(ret_place.to_ptr().get_addr(fx)))\n-            }\n-            _ => {\n+            } else {\n                 let place = CPlace::new_stack_slot(fx, ret_arg_abi.layout);\n                 (Some(place), Some(place.to_ptr().get_addr(fx)))\n             }\n-        },\n+        }\n         PassMode::Indirect { attrs: _, extra_attrs: Some(_), on_stack: _ } => {\n             unreachable!(\"unsized return value\")\n         }\n@@ -84,39 +83,25 @@ pub(super) fn codegen_with_call_return_arg<'tcx>(\n     match ret_arg_abi.mode {\n         PassMode::Ignore => {}\n         PassMode::Direct(_) => {\n-            if let Some(ret_place) = ret_place {\n-                let ret_val = fx.bcx.inst_results(call_inst)[0];\n-                ret_place.write_cvalue(fx, CValue::by_val(ret_val, ret_arg_abi.layout));\n-            }\n+            let ret_val = fx.bcx.inst_results(call_inst)[0];\n+            ret_place.write_cvalue(fx, CValue::by_val(ret_val, ret_arg_abi.layout));\n         }\n         PassMode::Pair(_, _) => {\n-            if let Some(ret_place) = ret_place {\n-                let ret_val_a = fx.bcx.inst_results(call_inst)[0];\n-                let ret_val_b = fx.bcx.inst_results(call_inst)[1];\n-                ret_place.write_cvalue(\n-                    fx,\n-                    CValue::by_val_pair(ret_val_a, ret_val_b, ret_arg_abi.layout),\n-                );\n-            }\n+            let ret_val_a = fx.bcx.inst_results(call_inst)[0];\n+            let ret_val_b = fx.bcx.inst_results(call_inst)[1];\n+            ret_place\n+                .write_cvalue(fx, CValue::by_val_pair(ret_val_a, ret_val_b, ret_arg_abi.layout));\n         }\n         PassMode::Cast(cast) => {\n-            if let Some(ret_place) = ret_place {\n-                let results = fx\n-                    .bcx\n-                    .inst_results(call_inst)\n-                    .iter()\n-                    .copied()\n-                    .collect::<SmallVec<[Value; 2]>>();\n-                let result =\n-                    super::pass_mode::from_casted_value(fx, &results, ret_place.layout(), cast);\n-                ret_place.write_cvalue(fx, result);\n-            }\n+            let results =\n+                fx.bcx.inst_results(call_inst).iter().copied().collect::<SmallVec<[Value; 2]>>();\n+            let result =\n+                super::pass_mode::from_casted_value(fx, &results, ret_place.layout(), cast);\n+            ret_place.write_cvalue(fx, result);\n         }\n         PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {\n-            if let (Some(ret_place), Some(ret_temp_place)) = (ret_place, ret_temp_place) {\n-                // Both ret_place and ret_temp_place must be Some. If ret_place is None, this is\n-                // a non-returning call. If ret_temp_place is None, it is not necessary to copy the\n-                // return value.\n+            if let Some(ret_temp_place) = ret_temp_place {\n+                // If ret_temp_place is None, it is not necessary to copy the return value.\n                 let ret_temp_value = ret_temp_place.to_cvalue(fx);\n                 ret_place.write_cvalue(fx, ret_temp_value);\n             }"}, {"sha": "3fe112d794b4413c67f311c3aff143057a591d18", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -393,6 +393,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 func,\n                 args,\n                 destination,\n+                target,\n                 fn_span,\n                 cleanup: _,\n                 from_hir_call: _,\n@@ -404,6 +405,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         func,\n                         args,\n                         *destination,\n+                        *target,\n                     )\n                 });\n             }"}, {"sha": "7d2e3e52f34434c7cd500131096d60f5bca25abd", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -542,8 +542,8 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     | TerminatorKind::FalseEdge { .. }\n                     | TerminatorKind::FalseUnwind { .. } => unreachable!(),\n                     TerminatorKind::InlineAsm { .. } => return None,\n-                    TerminatorKind::Call { destination: Some((call_place, _)), .. }\n-                        if call_place == place =>\n+                    TerminatorKind::Call { destination, target: Some(_), .. }\n+                        if destination == place =>\n                     {\n                         return None;\n                     }"}, {"sha": "77ac46540a9ba88f8c65b47eb18d8e225f1b2555", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -10,10 +10,9 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     intrinsic: &str,\n     _substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n-    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n+    ret: CPlace<'tcx>,\n+    target: Option<BasicBlock>,\n ) {\n-    let ret = destination.unwrap().0;\n-\n     intrinsic_match! {\n         fx, intrinsic, args,\n         _ => {\n@@ -126,7 +125,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n     }\n \n-    let dest = destination.expect(\"all llvm intrinsics used by stdlib should return\").1;\n+    let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");\n     let ret_block = fx.get_block(dest);\n     fx.bcx.ins().jump(ret_block, &[]);\n }"}, {"sha": "f8c69d46d1f67a5be8898d79245a0a7b1f069dd0", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -217,35 +217,42 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],\n-    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n+    destination: CPlace<'tcx>,\n+    target: Option<BasicBlock>,\n     source_info: mir::SourceInfo,\n ) {\n     let intrinsic = fx.tcx.item_name(instance.def_id());\n     let substs = instance.substs;\n \n-    let ret = match destination {\n-        Some((place, _)) => place,\n-        None => {\n-            // Insert non returning intrinsics here\n-            match intrinsic {\n-                sym::abort => {\n-                    fx.bcx.ins().trap(TrapCode::User(0));\n-                }\n-                sym::transmute => {\n-                    crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n-                }\n-                _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+    let target = if let Some(target) = target {\n+        target\n+    } else {\n+        // Insert non returning intrinsics here\n+        match intrinsic {\n+            sym::abort => {\n+                fx.bcx.ins().trap(TrapCode::User(0));\n             }\n-            return;\n+            sym::transmute => {\n+                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n+            }\n+            _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n         }\n+        return;\n     };\n \n     if intrinsic.as_str().starts_with(\"simd_\") {\n-        self::simd::codegen_simd_intrinsic_call(fx, intrinsic, substs, args, ret, source_info.span);\n-        let ret_block = fx.get_block(destination.expect(\"SIMD intrinsics don't diverge\").1);\n+        self::simd::codegen_simd_intrinsic_call(\n+            fx,\n+            intrinsic,\n+            substs,\n+            args,\n+            destination,\n+            source_info.span,\n+        );\n+        let ret_block = fx.get_block(target);\n         fx.bcx.ins().jump(ret_block, &[]);\n-    } else if codegen_float_intrinsic_call(fx, intrinsic, args, ret) {\n-        let ret_block = fx.get_block(destination.expect(\"Float intrinsics don't diverge\").1);\n+    } else if codegen_float_intrinsic_call(fx, intrinsic, args, destination) {\n+        let ret_block = fx.get_block(target);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n         codegen_regular_intrinsic_call(\n@@ -254,9 +261,9 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             intrinsic,\n             substs,\n             args,\n-            ret,\n-            source_info,\n             destination,\n+            Some(target),\n+            source_info,\n         );\n     }\n }\n@@ -339,8 +346,8 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n+    destination: Option<BasicBlock>,\n     source_info: mir::SourceInfo,\n-    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n ) {\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n@@ -761,7 +768,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     if fx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n                         // special case for compiler-builtins to avoid having to patch it\n                         crate::trap::trap_unimplemented(fx, \"128bit atomics not yet supported\");\n-                        let ret_block = fx.get_block(destination.unwrap().1);\n+                        let ret_block = fx.get_block(destination.unwrap());\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n@@ -789,7 +796,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     if fx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n                         // special case for compiler-builtins to avoid having to patch it\n                         crate::trap::trap_unimplemented(fx, \"128bit atomics not yet supported\");\n-                        let ret_block = fx.get_block(destination.unwrap().1);\n+                        let ret_block = fx.get_block(destination.unwrap());\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n@@ -1130,6 +1137,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n     }\n \n-    let ret_block = fx.get_block(destination.unwrap().1);\n+    let ret_block = fx.get_block(destination.unwrap());\n     fx.bcx.ins().jump(ret_block, &[]);\n }"}, {"sha": "f1007ba157829bcb5ff3dfae45271273b720f1b9", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -519,7 +519,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         intrinsic: Option<Symbol>,\n         instance: Option<Instance<'tcx>>,\n         source_info: mir::SourceInfo,\n-        destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n+        target: Option<mir::BasicBlock>,\n         cleanup: Option<mir::BasicBlock>,\n     ) -> bool {\n         // Emit a panic or a no-op for `assert_*` intrinsics.\n@@ -576,12 +576,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     fn_abi,\n                     llfn,\n                     &[msg.0, msg.1, location],\n-                    destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n+                    target.as_ref().map(|bb| (ReturnDest::Nothing, *bb)),\n                     cleanup,\n                 );\n             } else {\n                 // a NOP\n-                let target = destination.as_ref().unwrap().1;\n+                let target = target.unwrap();\n                 helper.funclet_br(self, bx, target)\n             }\n             true\n@@ -597,7 +597,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         terminator: &mir::Terminator<'tcx>,\n         func: &mir::Operand<'tcx>,\n         args: &[mir::Operand<'tcx>],\n-        destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n+        destination: mir::Place<'tcx>,\n+        target: Option<mir::BasicBlock>,\n         cleanup: Option<mir::BasicBlock>,\n         fn_span: Span,\n     ) {\n@@ -624,7 +625,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         if let Some(ty::InstanceDef::DropGlue(_, None)) = def {\n             // Empty drop glue; a no-op.\n-            let &(_, target) = destination.as_ref().unwrap();\n+            let target = target.unwrap();\n             helper.funclet_br(self, &mut bx, target);\n             return;\n         }\n@@ -653,9 +654,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         };\n \n         if intrinsic == Some(sym::transmute) {\n-            if let Some(destination_ref) = destination.as_ref() {\n-                let &(dest, target) = destination_ref;\n-                self.codegen_transmute(&mut bx, &args[0], dest);\n+            if let Some(target) = target {\n+                self.codegen_transmute(&mut bx, &args[0], destination);\n                 helper.funclet_br(self, &mut bx, target);\n             } else {\n                 // If we are trying to transmute to an uninhabited type,\n@@ -676,7 +676,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             intrinsic,\n             instance,\n             source_info,\n-            destination,\n+            target,\n             cleanup,\n         ) {\n             return;\n@@ -687,23 +687,23 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let mut llargs = Vec::with_capacity(arg_count);\n \n         // Prepare the return value destination\n-        let ret_dest = if let Some((dest, _)) = *destination {\n+        let ret_dest = if target.is_some() {\n             let is_intrinsic = intrinsic.is_some();\n-            self.make_return_dest(&mut bx, dest, &fn_abi.ret, &mut llargs, is_intrinsic)\n+            self.make_return_dest(&mut bx, destination, &fn_abi.ret, &mut llargs, is_intrinsic)\n         } else {\n             ReturnDest::Nothing\n         };\n \n         if intrinsic == Some(sym::caller_location) {\n-            if let Some((_, target)) = destination.as_ref() {\n+            if let Some(target) = target {\n                 let location = self\n                     .get_caller_location(&mut bx, mir::SourceInfo { span: fn_span, ..source_info });\n \n                 if let ReturnDest::IndirectOperand(tmp, _) = ret_dest {\n                     location.val.store(&mut bx, tmp);\n                 }\n                 self.store_return(&mut bx, ret_dest, &fn_abi.ret, location.immediate());\n-                helper.funclet_br(self, &mut bx, *target);\n+                helper.funclet_br(self, &mut bx, target);\n             }\n             return;\n         }\n@@ -766,7 +766,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     self.store_return(&mut bx, ret_dest, &fn_abi.ret, dst.llval);\n                 }\n \n-                if let Some((_, target)) = *destination {\n+                if let Some(target) = target {\n                     helper.funclet_br(self, &mut bx, target);\n                 } else {\n                     bx.unreachable();\n@@ -913,7 +913,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 fn_abi,\n                 fn_ptr,\n                 &llargs,\n-                destination.as_ref().map(|&(_, target)| (ret_dest, target)),\n+                target.as_ref().map(|&target| (ret_dest, target)),\n                 cleanup,\n             );\n \n@@ -930,7 +930,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             fn_abi,\n             fn_ptr,\n             &llargs,\n-            destination.as_ref().map(|&(_, target)| (ret_dest, target)),\n+            target.as_ref().map(|&target| (ret_dest, target)),\n             cleanup,\n         );\n     }\n@@ -1083,7 +1083,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::TerminatorKind::Call {\n                 ref func,\n                 ref args,\n-                ref destination,\n+                destination,\n+                target,\n                 cleanup,\n                 from_hir_call: _,\n                 fn_span,\n@@ -1095,6 +1096,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     func,\n                     args,\n                     destination,\n+                    target,\n                     cleanup,\n                     fn_span,\n                 );"}, {"sha": "0c20324e4523902ae3fd7df3439950669eee3287", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -60,7 +60,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.push_stack_frame(\n         cid.instance,\n         body,\n-        Some(&ret.into()),\n+        &ret.into(),\n         StackPopCleanup::Root { cleanup: false },\n     )?;\n "}, {"sha": "9de5541bfe36cec0e310bd9051e46beefd590fad", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -265,7 +265,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         instance: ty::Instance<'tcx>,\n         _abi: Abi,\n         args: &[OpTy<'tcx>],\n-        _ret: Option<(&PlaceTy<'tcx>, mir::BasicBlock)>,\n+        _dest: &PlaceTy<'tcx>,\n+        _ret: Option<mir::BasicBlock>,\n         _unwind: StackPopUnwind, // unwinding is not supported in consts\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n@@ -293,6 +294,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     new_instance,\n                     _abi,\n                     args,\n+                    _dest,\n                     _ret,\n                     _unwind,\n                 )?\n@@ -307,17 +309,18 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n-        ret: Option<(&PlaceTy<'tcx>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, Self::PointerTag>,\n+        target: Option<mir::BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         // Shared intrinsics.\n-        if ecx.emulate_intrinsic(instance, args, ret)? {\n+        if ecx.emulate_intrinsic(instance, args, dest, target)? {\n             return Ok(());\n         }\n         let intrinsic_name = ecx.tcx.item_name(instance.def_id());\n \n         // CTFE-specific intrinsics.\n-        let Some((dest, ret)) = ret else {\n+        let Some(ret) = target else {\n             return Err(ConstEvalErrKind::NeedsRfc(format!(\n                 \"calling intrinsic `{}`\",\n                 intrinsic_name"}, {"sha": "4c84bd090cb509666d684555d326dddd69122f18", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -105,7 +105,7 @@ pub struct Frame<'mir, 'tcx, Tag: Provenance = AllocId, Extra = ()> {\n \n     /// The location where the result of the current stack frame should be written to,\n     /// and its layout in the caller.\n-    pub return_place: Option<PlaceTy<'tcx, Tag>>,\n+    pub return_place: PlaceTy<'tcx, Tag>,\n \n     /// The list of locals for this stack frame, stored in order as\n     /// `[return_ptr, arguments..., variables..., temporaries...]`.\n@@ -676,7 +676,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         body: &'mir mir::Body<'tcx>,\n-        return_place: Option<&PlaceTy<'tcx, M::PointerTag>>,\n+        return_place: &PlaceTy<'tcx, M::PointerTag>,\n         return_to_block: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n         trace!(\"body: {:#?}\", body);\n@@ -685,7 +685,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             body,\n             loc: Err(body.span), // Span used for errors caused during preamble.\n             return_to_block,\n-            return_place: return_place.copied(),\n+            return_place: *return_place,\n             // empty local array, we fill it in below, after we are inside the stack frame and\n             // all methods actually know about the frame\n             locals: IndexVec::new(),\n@@ -807,14 +807,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.stack_mut().pop().expect(\"tried to pop a stack frame, but there were none\");\n \n         if !unwinding {\n-            // Copy the return value to the caller's stack frame.\n-            if let Some(ref return_place) = frame.return_place {\n-                let op = self.access_local(&frame, mir::RETURN_PLACE, None)?;\n-                self.copy_op_transmute(&op, return_place)?;\n-                trace!(\"{:?}\", self.dump_place(**return_place));\n-            } else {\n-                throw_ub!(Unreachable);\n-            }\n+            let op = self.access_local(&frame, mir::RETURN_PLACE, None)?;\n+            self.copy_op_transmute(&op, &frame.return_place)?;\n+            trace!(\"{:?}\", self.dump_place(*frame.return_place));\n         }\n \n         let return_to_block = frame.return_to_block;\n@@ -1055,7 +1050,7 @@ where\n         body.hash_stable(hcx, hasher);\n         instance.hash_stable(hcx, hasher);\n         return_to_block.hash_stable(hcx, hasher);\n-        return_place.as_ref().map(|r| &**r).hash_stable(hcx, hasher);\n+        return_place.hash_stable(hcx, hasher);\n         locals.hash_stable(hcx, hasher);\n         loc.hash_stable(hcx, hasher);\n         extra.hash_stable(hcx, hasher);"}, {"sha": "b747be3a636269d1a59f4fb44f021ff74ebcbcfa", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -115,13 +115,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n-        ret: Option<(&PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n+        dest: &PlaceTy<'tcx, M::PointerTag>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, bool> {\n         let substs = instance.substs;\n         let intrinsic_name = self.tcx.item_name(instance.def_id());\n \n         // First handle intrinsics without return place.\n-        let (dest, ret) = match ret {\n+        let ret = match ret {\n             None => match intrinsic_name {\n                 sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n                 sym::abort => M::abort(self, \"the program aborted execution\".to_owned())?,"}, {"sha": "3572a9cc68174c467d6f38045425259f50c6ff8e", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -169,7 +169,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         instance: ty::Instance<'tcx>,\n         abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n-        ret: Option<(&PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n+        destination: &PlaceTy<'tcx, Self::PointerTag>,\n+        target: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>>;\n \n@@ -180,7 +181,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         fn_val: Self::ExtraFnVal,\n         abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n-        ret: Option<(&PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n+        destination: &PlaceTy<'tcx, Self::PointerTag>,\n+        target: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx>;\n \n@@ -190,7 +192,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n-        ret: Option<(&PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n+        destination: &PlaceTy<'tcx, Self::PointerTag>,\n+        target: Option<mir::BasicBlock>,\n         unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx>;\n \n@@ -470,7 +473,8 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         fn_val: !,\n         _abi: Abi,\n         _args: &[OpTy<$tcx>],\n-        _ret: Option<(&PlaceTy<$tcx>, mir::BasicBlock)>,\n+        _destination: &PlaceTy<$tcx, Self::PointerTag>,\n+        _target: Option<mir::BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<$tcx> {\n         match fn_val {}"}, {"sha": "a5c7d4c8e20dc8940d6a2dcc862f53d745c1ec70", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -57,7 +57,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.go_to_block(target_block);\n             }\n \n-            Call { ref func, ref args, destination, ref cleanup, from_hir_call: _, fn_span: _ } => {\n+            Call {\n+                ref func,\n+                ref args,\n+                destination,\n+                target,\n+                ref cleanup,\n+                from_hir_call: _,\n+                fn_span: _,\n+            } => {\n                 let old_stack = self.frame_idx();\n                 let old_loc = self.frame().loc;\n                 let func = self.eval_operand(func, None)?;\n@@ -91,20 +99,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ),\n                 };\n \n-                let dest_place;\n-                let ret = match destination {\n-                    Some((dest, ret)) => {\n-                        dest_place = self.eval_place(dest)?;\n-                        Some((&dest_place, ret))\n-                    }\n-                    None => None,\n-                };\n+                let destination = self.eval_place(destination)?;\n                 self.eval_fn_call(\n                     fn_val,\n                     (fn_sig.abi, fn_abi),\n                     &args,\n                     with_caller_location,\n-                    ret,\n+                    &destination,\n+                    target,\n                     match (cleanup, fn_abi.can_unwind) {\n                         (Some(cleanup), true) => StackPopUnwind::Cleanup(*cleanup),\n                         (None, true) => StackPopUnwind::Skip,\n@@ -299,23 +301,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         (caller_abi, caller_fn_abi): (Abi, &FnAbi<'tcx, Ty<'tcx>>),\n         args: &[OpTy<'tcx, M::PointerTag>],\n         with_caller_location: bool,\n-        ret: Option<(&PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n+        destination: &PlaceTy<'tcx, M::PointerTag>,\n+        target: Option<mir::BasicBlock>,\n         mut unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         trace!(\"eval_fn_call: {:#?}\", fn_val);\n \n         let instance = match fn_val {\n             FnVal::Instance(instance) => instance,\n             FnVal::Other(extra) => {\n-                return M::call_extra_fn(self, extra, caller_abi, args, ret, unwind);\n+                return M::call_extra_fn(\n+                    self,\n+                    extra,\n+                    caller_abi,\n+                    args,\n+                    destination,\n+                    target,\n+                    unwind,\n+                );\n             }\n         };\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(def_id) => {\n                 assert!(self.tcx.is_intrinsic(def_id));\n                 // caller_fn_abi is not relevant here, we interpret the arguments directly for each intrinsic.\n-                M::call_intrinsic(self, instance, args, ret, unwind)\n+                M::call_intrinsic(self, instance, args, destination, target, unwind)\n             }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n@@ -326,7 +337,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::InstanceDef::Item(_) => {\n                 // We need MIR for this fn\n                 let Some((body, instance)) =\n-                    M::find_mir_or_eval_fn(self, instance, caller_abi, args, ret, unwind)? else {\n+                    M::find_mir_or_eval_fn(self, instance, caller_abi, args, destination, target, unwind)? else {\n                         return Ok(());\n                     };\n \n@@ -362,8 +373,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.push_stack_frame(\n                     instance,\n                     body,\n-                    ret.map(|p| p.0),\n-                    StackPopCleanup::Goto { ret: ret.map(|p| p.1), unwind },\n+                    destination,\n+                    StackPopCleanup::Goto { ret: target, unwind },\n                 )?;\n \n                 // If an error is raised here, pop the frame again to get an accurate backtrace.\n@@ -540,7 +551,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     (caller_abi, caller_fn_abi),\n                     &args,\n                     with_caller_location,\n-                    ret,\n+                    destination,\n+                    target,\n                     unwind,\n                 )\n             }\n@@ -582,7 +594,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             (Abi::Rust, fn_abi),\n             &[arg.into()],\n             false,\n-            Some((&dest.into(), target)),\n+            &dest.into(),\n+            Some(target),\n             match unwind {\n                 Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n                 None => StackPopUnwind::Skip,"}, {"sha": "fc6b8a1a7234c917acfd8592ee349a3b97f03a5a", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -788,7 +788,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             } else {\n                 let terminator = self.source[loc.block].terminator_mut();\n                 let target = match terminator.kind {\n-                    TerminatorKind::Call { destination: Some((_, target)), .. } => target,\n+                    TerminatorKind::Call { target: Some(target), .. } => target,\n                     ref kind => {\n                         span_bug!(terminator.source_info.span, \"{:?} not promotable\", kind);\n                     }\n@@ -814,7 +814,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             func,\n                             args,\n                             cleanup: None,\n-                            destination: Some((Place::from(new_temp), new_target)),\n+                            destination: Place::from(new_temp),\n+                            target: Some(new_target),\n                             from_hir_call,\n                             fn_span,\n                         },\n@@ -1054,11 +1055,9 @@ pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n         {\n             if let Operand::Constant(box Constant { literal, .. }) = func {\n                 if let ty::FnDef(def_id, _) = *literal.ty().kind() {\n-                    if let Some((destination_place, _)) = destination {\n-                        if destination_place == place {\n-                            if ccx.tcx.is_const_fn(def_id) {\n-                                return true;\n-                            }\n+                    if destination == place {\n+                        if ccx.tcx.is_const_fn(def_id) {\n+                            return true;\n                         }\n                     }\n                 }"}, {"sha": "54c2daf9ac20e2c0329e77581829a3b08513b34e", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -673,7 +673,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n-            TerminatorKind::Call { func, args, destination, cleanup, .. } => {\n+            TerminatorKind::Call { func, args, destination, target, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n@@ -682,7 +682,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         format!(\"encountered non-callable type {} in `Call` terminator\", func_ty),\n                     ),\n                 }\n-                if let Some((_, target)) = destination {\n+                if let Some(target) = target {\n                     self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n                 if let Some(cleanup) = cleanup {\n@@ -693,9 +693,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 // passed by a reference to the callee. Consequently they must be non-overlapping.\n                 // Currently this simply checks for duplicate places.\n                 self.place_cache.clear();\n-                if let Some((destination, _)) = destination {\n-                    self.place_cache.push(destination.as_ref());\n-                }\n+                self.place_cache.push(destination.as_ref());\n                 for arg in args {\n                     if let Operand::Move(place) = arg {\n                         self.place_cache.push(place.as_ref());"}, {"sha": "c859d93043e3e8c05cf18df6da753b03b2f8d123", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -250,8 +250,10 @@ pub enum TerminatorKind<'tcx> {\n         /// This allows the memory occupied by \"by-value\" arguments to be\n         /// reused across function calls without duplicating the contents.\n         args: Vec<Operand<'tcx>>,\n-        /// Destination for the return value. If none, the call necessarily diverges.\n-        destination: Option<(Place<'tcx>, BasicBlock)>,\n+        /// Where the returned value will be written\n+        destination: Place<'tcx>,\n+        /// Where to go after this call returns. If none, the call necessarily diverges.\n+        target: Option<BasicBlock>,\n         /// Cleanups to be done if the call unwinds.\n         cleanup: Option<BasicBlock>,\n         /// `true` if this is from a call in HIR rather than from an overloaded\n@@ -415,13 +417,13 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | GeneratorDrop\n             | Return\n             | Unreachable\n-            | Call { destination: None, cleanup: None, .. }\n+            | Call { target: None, cleanup: None, .. }\n             | InlineAsm { destination: None, cleanup: None, .. } => {\n                 None.into_iter().chain((&[]).into_iter().copied())\n             }\n             Goto { target: t }\n-            | Call { destination: None, cleanup: Some(t), .. }\n-            | Call { destination: Some((_, t)), cleanup: None, .. }\n+            | Call { target: None, cleanup: Some(t), .. }\n+            | Call { target: Some(t), cleanup: None, .. }\n             | Yield { resume: t, drop: None, .. }\n             | DropAndReplace { target: t, unwind: None, .. }\n             | Drop { target: t, unwind: None, .. }\n@@ -431,7 +433,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | InlineAsm { destination: None, cleanup: Some(t), .. } => {\n                 Some(t).into_iter().chain((&[]).into_iter().copied())\n             }\n-            Call { destination: Some((_, t)), cleanup: Some(ref u), .. }\n+            Call { target: Some(t), cleanup: Some(ref u), .. }\n             | Yield { resume: t, drop: Some(ref u), .. }\n             | DropAndReplace { target: t, unwind: Some(ref u), .. }\n             | Drop { target: t, unwind: Some(ref u), .. }\n@@ -457,11 +459,11 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | GeneratorDrop\n             | Return\n             | Unreachable\n-            | Call { destination: None, cleanup: None, .. }\n+            | Call { target: None, cleanup: None, .. }\n             | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),\n             Goto { target: ref mut t }\n-            | Call { destination: None, cleanup: Some(ref mut t), .. }\n-            | Call { destination: Some((_, ref mut t)), cleanup: None, .. }\n+            | Call { target: None, cleanup: Some(ref mut t), .. }\n+            | Call { target: Some(ref mut t), cleanup: None, .. }\n             | Yield { resume: ref mut t, drop: None, .. }\n             | DropAndReplace { target: ref mut t, unwind: None, .. }\n             | Drop { target: ref mut t, unwind: None, .. }\n@@ -471,7 +473,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | InlineAsm { destination: None, cleanup: Some(ref mut t), .. } => {\n                 Some(t).into_iter().chain(&mut [])\n             }\n-            Call { destination: Some((_, ref mut t)), cleanup: Some(ref mut u), .. }\n+            Call { target: Some(ref mut t), cleanup: Some(ref mut u), .. }\n             | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n             | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }\n             | Drop { target: ref mut t, unwind: Some(ref mut u), .. }\n@@ -590,9 +592,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 write!(fmt, \"replace({:?} <- {:?})\", place, value)\n             }\n             Call { func, args, destination, .. } => {\n-                if let Some((destination, _)) = destination {\n-                    write!(fmt, \"{:?} = \", destination)?;\n-                }\n+                write!(fmt, \"{:?} = \", destination)?;\n                 write!(fmt, \"{:?}(\", func)?;\n                 for (index, arg) in args.iter().enumerate() {\n                     if index > 0 {\n@@ -683,12 +683,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n                     .chain(iter::once(\"otherwise\".into()))\n                     .collect()\n             }),\n-            Call { destination: Some(_), cleanup: Some(_), .. } => {\n+            Call { target: Some(_), cleanup: Some(_), .. } => {\n                 vec![\"return\".into(), \"unwind\".into()]\n             }\n-            Call { destination: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n-            Call { destination: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n-            Call { destination: None, cleanup: None, .. } => vec![],\n+            Call { target: Some(_), cleanup: None, .. } => vec![\"return\".into()],\n+            Call { target: None, cleanup: Some(_), .. } => vec![\"unwind\".into()],\n+            Call { target: None, cleanup: None, .. } => vec![],\n             Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n             Yield { drop: None, .. } => vec![\"resume\".into()],\n             DropAndReplace { unwind: None, .. } | Drop { unwind: None, .. } => {"}, {"sha": "14d4cb2c3302e72561242a1ee45604c52e753aaf", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -44,20 +44,15 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 resume_arg: resume_arg.try_fold_with(folder)?,\n                 drop,\n             },\n-            Call { func, args, destination, cleanup, from_hir_call, fn_span } => {\n-                let dest = destination\n-                    .map(|(loc, dest)| (loc.try_fold_with(folder).map(|loc| (loc, dest))))\n-                    .transpose()?;\n-\n-                Call {\n-                    func: func.try_fold_with(folder)?,\n-                    args: args.try_fold_with(folder)?,\n-                    destination: dest,\n-                    cleanup,\n-                    from_hir_call,\n-                    fn_span,\n-                }\n-            }\n+            Call { func, args, destination, target, cleanup, from_hir_call, fn_span } => Call {\n+                func: func.try_fold_with(folder)?,\n+                args: args.try_fold_with(folder)?,\n+                destination: destination.try_fold_with(folder)?,\n+                target,\n+                cleanup,\n+                from_hir_call,\n+                fn_span,\n+            },\n             Assert { cond, expected, msg, target, cleanup } => {\n                 use AssertKind::*;\n                 let msg = match msg {\n@@ -113,9 +108,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Yield { ref value, .. } => value.visit_with(visitor),\n             Call { ref func, ref args, ref destination, .. } => {\n-                if let Some((ref loc, _)) = *destination {\n-                    loc.visit_with(visitor)?;\n-                };\n+                destination.visit_with(visitor)?;\n                 func.visit_with(visitor)?;\n                 args.visit_with(visitor)\n             }"}, {"sha": "d0d7f121a251090ab57564a6d8b59b4ac6ff57b4", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -534,6 +534,7 @@ macro_rules! make_mir_visitor {\n                         func,\n                         args,\n                         destination,\n+                        target: _,\n                         cleanup: _,\n                         from_hir_call: _,\n                         fn_span: _\n@@ -542,13 +543,11 @@ macro_rules! make_mir_visitor {\n                         for arg in args {\n                             self.visit_operand(arg, location);\n                         }\n-                        if let Some((destination, _)) = destination {\n-                            self.visit_place(\n-                                destination,\n-                                PlaceContext::MutatingUse(MutatingUseContext::Call),\n-                                location\n-                            );\n-                        }\n+                        self.visit_place(\n+                            destination,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Call),\n+                            location\n+                        );\n                     }\n \n                     TerminatorKind::Assert {"}, {"sha": "fb0537c543dc5a05dcf0ba90460b1671d0c54eb3", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -141,7 +141,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Call {\n                         func: exchange_malloc,\n                         args: vec![Operand::Move(size), Operand::Move(align)],\n-                        destination: Some((storage, success)),\n+                        destination: storage,\n+                        target: Some(success),\n                         cleanup: None,\n                         from_hir_call: false,\n                         fn_span: expr_span,"}, {"sha": "569012e152b30e51cba1588f88cfeaf92073d7e8", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -255,18 +255,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         func: fun,\n                         args,\n                         cleanup: None,\n+                        destination,\n                         // The presence or absence of a return edge affects control-flow sensitive\n                         // MIR checks and ultimately whether code is accepted or not. We can only\n                         // omit the return edge if a return type is visibly uninhabited to a module\n                         // that makes the call.\n-                        destination: if this.tcx.is_ty_uninhabited_from(\n+                        target: if this.tcx.is_ty_uninhabited_from(\n                             this.parent_module,\n                             expr.ty,\n                             this.param_env,\n                         ) {\n                             None\n                         } else {\n-                            Some((destination, success))\n+                            Some(success)\n                         },\n                         from_hir_call,\n                         fn_span,"}, {"sha": "c15b3db1caae3b170ea34b0568a1a3744feac8d5", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -444,7 +444,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     literal: method,\n                 })),\n                 args: vec![val, expect],\n-                destination: Some((eq_result, eq_block)),\n+                destination: eq_result,\n+                target: Some(eq_block),\n                 cleanup: None,\n                 from_hir_call: false,\n                 fn_span: source_info.span,"}, {"sha": "027af5b9c1f2de6f4c3cc70939ada6e98482e361", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -625,7 +625,8 @@ where\n                 kind: TerminatorKind::Call {\n                     func: Operand::function_handle(tcx, drop_fn, substs, self.source_info.span),\n                     args: vec![Operand::Move(Place::from(ref_place))],\n-                    destination: Some((unit_temp, succ)),\n+                    destination: unit_temp,\n+                    target: Some(succ),\n                     cleanup: unwind.into_option(),\n                     from_hir_call: true,\n                     fn_span: self.source_info.span,\n@@ -963,7 +964,8 @@ where\n         let call = TerminatorKind::Call {\n             func: Operand::function_handle(tcx, free_func, substs, self.source_info.span),\n             args,\n-            destination: Some((unit_temp, target)),\n+            destination: unit_temp,\n+            target: Some(target),\n             cleanup: None,\n             from_hir_call: false,\n             fn_span: self.source_info.span,"}, {"sha": "3a492b45849c949fcba8cc2b043efa0c4b881aec", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -237,14 +237,12 @@ impl Direction for Backward {\n                 // Apply terminator-specific edge effects.\n                 //\n                 // FIXME(ecstaticmorse): Avoid cloning the exit state unconditionally.\n-                mir::TerminatorKind::Call { destination: Some((return_place, dest)), .. }\n-                    if dest == bb =>\n-                {\n+                mir::TerminatorKind::Call { destination, target: Some(dest), .. } if dest == bb => {\n                     let mut tmp = exit_state.clone();\n                     analysis.apply_call_return_effect(\n                         &mut tmp,\n                         pred,\n-                        CallReturnPlaces::Call(return_place),\n+                        CallReturnPlaces::Call(destination),\n                     );\n                     propagate(pred, &tmp);\n                 }\n@@ -532,20 +530,28 @@ impl Direction for Forward {\n                 propagate(target, exit_state);\n             }\n \n-            Call { cleanup, destination, func: _, args: _, from_hir_call: _, fn_span: _ } => {\n+            Call {\n+                cleanup,\n+                destination,\n+                target,\n+                func: _,\n+                args: _,\n+                from_hir_call: _,\n+                fn_span: _,\n+            } => {\n                 if let Some(unwind) = cleanup {\n                     if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n                         propagate(unwind, exit_state);\n                     }\n                 }\n \n-                if let Some((dest_place, target)) = destination {\n+                if let Some(target) = target {\n                     // N.B.: This must be done *last*, otherwise the unwind path will see the call\n                     // return effect.\n                     analysis.apply_call_return_effect(\n                         exit_state,\n                         bb,\n-                        CallReturnPlaces::Call(dest_place),\n+                        CallReturnPlaces::Call(destination),\n                     );\n                     propagate(target, exit_state);\n                 }"}, {"sha": "3834c232ab6ba8a52a895f6e6a2229940298396f", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -218,7 +218,7 @@ where\n         self.results.seek_to_block_end(block);\n         if self.results.get() != &block_start_state || A::Direction::is_backward() {\n             let after_terminator_name = match terminator.kind {\n-                mir::TerminatorKind::Call { destination: Some(_), .. } => \"(on unwind)\",\n+                mir::TerminatorKind::Call { target: Some(_), .. } => \"(on unwind)\",\n                 _ => \"(on end)\",\n             };\n \n@@ -231,14 +231,14 @@ where\n         // for the basic block itself. That way, we could display terminator-specific effects for\n         // backward dataflow analyses as well as effects for `SwitchInt` terminators.\n         match terminator.kind {\n-            mir::TerminatorKind::Call { destination: Some((return_place, _)), .. } => {\n+            mir::TerminatorKind::Call { destination, .. } => {\n                 self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n                     let state_on_unwind = this.results.get().clone();\n                     this.results.apply_custom_effect(|analysis, state| {\n                         analysis.apply_call_return_effect(\n                             state,\n                             block,\n-                            CallReturnPlaces::Call(return_place),\n+                            CallReturnPlaces::Call(destination),\n                         );\n                     });\n "}, {"sha": "74c3b44f4250e282ff6fb6181a6b6c292479a276", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -37,7 +37,8 @@ fn mock_body<'tcx>() -> mir::Body<'tcx> {\n         mir::TerminatorKind::Call {\n             func: mir::Operand::Copy(dummy_place.clone()),\n             args: vec![],\n-            destination: Some((dummy_place.clone(), mir::START_BLOCK)),\n+            destination: dummy_place.clone(),\n+            target: Some(mir::START_BLOCK),\n             cleanup: None,\n             from_hir_call: false,\n             fn_span: DUMMY_SP,\n@@ -50,7 +51,8 @@ fn mock_body<'tcx>() -> mir::Body<'tcx> {\n         mir::TerminatorKind::Call {\n             func: mir::Operand::Copy(dummy_place.clone()),\n             args: vec![],\n-            destination: Some((dummy_place.clone(), mir::START_BLOCK)),\n+            destination: dummy_place.clone(),\n+            target: Some(mir::START_BLOCK),\n             cleanup: None,\n             from_hir_call: false,\n             fn_span: DUMMY_SP,"}, {"sha": "356a6b7765e16e15e200cefc8f8ac3d8a6e57c4b", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -169,8 +169,8 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n         self.borrowed_locals.borrow().analysis().terminator_effect(trans, terminator, loc);\n \n         match &terminator.kind {\n-            TerminatorKind::Call { destination: Some((place, _)), .. } => {\n-                trans.gen(place.local);\n+            TerminatorKind::Call { destination, .. } => {\n+                trans.gen(destination.local);\n             }\n \n             // Note that we do *not* gen the `resume_arg` of `Yield` terminators. The reason for\n@@ -198,8 +198,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n \n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n-            TerminatorKind::Call { destination: None, .. }\n-            | TerminatorKind::Abort\n+            TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::DropAndReplace { .. }\n@@ -225,8 +224,8 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             // and after the call returns successfully, but not after a panic.\n             // Since `propagate_call_unwind` doesn't exist, we have to kill the\n             // destination here, and then gen it again in `call_return_effect`.\n-            TerminatorKind::Call { destination: Some((place, _)), .. } => {\n-                trans.kill(place.local);\n+            TerminatorKind::Call { destination, .. } => {\n+                trans.kill(destination.local);\n             }\n \n             // The same applies to InlineAsm outputs.\n@@ -236,8 +235,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n \n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n-            TerminatorKind::Call { destination: None, .. }\n-            | TerminatorKind::Yield { .. }\n+            TerminatorKind::Yield { .. }\n             | TerminatorKind::Abort\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::Drop { .. }"}, {"sha": "b08cb50f77aedf2ad82b5b4035b16a5a53dc5f74", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -376,7 +376,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             TerminatorKind::Call {\n                 ref func,\n                 ref args,\n-                ref destination,\n+                destination,\n+                target,\n                 cleanup: _,\n                 from_hir_call: _,\n                 fn_span: _,\n@@ -385,7 +386,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 for arg in args {\n                     self.gather_operand(arg);\n                 }\n-                if let Some((destination, _bb)) = *destination {\n+                if let Some(_bb) = target {\n                     self.create_move_path(destination);\n                     self.gather_init(destination.as_ref(), InitKind::NonPanicPathOnly);\n                 }"}, {"sha": "10d522717344dcd7ef8d4d7dec769d49095e78f8", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -50,12 +50,7 @@ impl AddCallGuards {\n         for block in body.basic_blocks_mut() {\n             match block.terminator {\n                 Some(Terminator {\n-                    kind:\n-                        TerminatorKind::Call {\n-                            destination: Some((_, ref mut destination)),\n-                            cleanup,\n-                            ..\n-                        },\n+                    kind: TerminatorKind::Call { target: Some(ref mut destination), cleanup, .. },\n                     source_info,\n                 }) if pred_count[*destination] > 1\n                     && (cleanup.is_some() || self == &AllCallEdges) =>"}, {"sha": "0495439385beec0d65cee6a47e40a3cdbd1f637c", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -130,11 +130,11 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             .iter_mut()\n             .filter_map(|block_data| {\n                 match block_data.terminator().kind {\n-                    TerminatorKind::Call { destination: Some(ref destination), .. }\n-                        if needs_retag(&destination.0) =>\n+                    TerminatorKind::Call { target: Some(target), destination, .. }\n+                        if needs_retag(&destination) =>\n                     {\n                         // Remember the return destination for later\n-                        Some((block_data.terminator().source_info, destination.0, destination.1))\n+                        Some((block_data.terminator().source_info, destination, target))\n                     }\n \n                     // `Drop` is also a call, but it doesn't return anything so we are good."}, {"sha": "b17485fd542d34400430f17ff4676924dd5554b9", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -200,7 +200,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _instance: ty::Instance<'tcx>,\n         _abi: Abi,\n         _args: &[OpTy<'tcx>],\n-        _ret: Option<(&PlaceTy<'tcx>, BasicBlock)>,\n+        _destination: &PlaceTy<'tcx>,\n+        _target: Option<BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<(&'mir Body<'tcx>, ty::Instance<'tcx>)>> {\n         Ok(None)\n@@ -210,7 +211,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n-        _ret: Option<(&PlaceTy<'tcx>, BasicBlock)>,\n+        _destination: &PlaceTy<'tcx>,\n+        _target: Option<BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         throw_machine_stop_str!(\"calling intrinsics isn't supported in ConstProp\")\n@@ -384,24 +386,22 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n         );\n \n-        let ret = ecx\n+        let ret_layout = ecx\n             .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n             .ok()\n-            // Don't bother allocating memory for ZST types which have no values\n-            // or for large values.\n-            .filter(|ret_layout| {\n-                !ret_layout.is_zst() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n-            })\n-            .map(|ret_layout| {\n-                ecx.allocate(ret_layout, MemoryKind::Stack)\n-                    .expect(\"couldn't perform small allocation\")\n-                    .into()\n-            });\n+            // Don't bother allocating memory for large values.\n+            .filter(|ret_layout| ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT))\n+            .unwrap_or_else(|| ecx.layout_of(tcx.types.unit).unwrap());\n+\n+        let ret = ecx\n+            .allocate(ret_layout, MemoryKind::Stack)\n+            .expect(\"couldn't perform small allocation\")\n+            .into();\n \n         ecx.push_stack_frame(\n             Instance::new(def_id, substs),\n             dummy_body,\n-            ret.as_ref(),\n+            &ret,\n             StackPopCleanup::Root { cleanup: false },\n         )\n         .expect(\"failed to push initial stack frame\");"}, {"sha": "5fd9db3989d052b227fc6f66fce81e03e1ee9f6d", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -192,7 +192,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _instance: ty::Instance<'tcx>,\n         _abi: Abi,\n         _args: &[OpTy<'tcx>],\n-        _ret: Option<(&PlaceTy<'tcx>, BasicBlock)>,\n+        _destination: &PlaceTy<'tcx>,\n+        _target: Option<BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx, Option<(&'mir Body<'tcx>, ty::Instance<'tcx>)>> {\n         Ok(None)\n@@ -202,7 +203,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n-        _ret: Option<(&PlaceTy<'tcx>, BasicBlock)>,\n+        _destination: &PlaceTy<'tcx>,\n+        _target: Option<BasicBlock>,\n         _unwind: StackPopUnwind,\n     ) -> InterpResult<'tcx> {\n         throw_machine_stop_str!(\"calling intrinsics isn't supported in ConstProp\")\n@@ -377,24 +379,22 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n         );\n \n-        let ret = ecx\n+        let ret_layout = ecx\n             .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n             .ok()\n-            // Don't bother allocating memory for ZST types which have no values\n-            // or for large values.\n-            .filter(|ret_layout| {\n-                !ret_layout.is_zst() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n-            })\n-            .map(|ret_layout| {\n-                ecx.allocate(ret_layout, MemoryKind::Stack)\n-                    .expect(\"couldn't perform small allocation\")\n-                    .into()\n-            });\n+            // Don't bother allocating memory for large values.\n+            .filter(|ret_layout| ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT))\n+            .unwrap_or_else(|| ecx.layout_of(tcx.types.unit).unwrap());\n+\n+        let ret = ecx\n+            .allocate(ret_layout, MemoryKind::Stack)\n+            .expect(\"couldn't perform small allocation\")\n+            .into();\n \n         ecx.push_stack_frame(\n             Instance::new(def_id, substs),\n             dummy_body,\n-            ret.as_ref(),\n+            &ret,\n             StackPopCleanup::Root { cleanup: false },\n         )\n         .expect(\"failed to push initial stack frame\");"}, {"sha": "4615f9be33fac3321e6d19994ca1caf5bf45162f", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> MockBlocks<'tcx> {\n     fn link(&mut self, from_block: BasicBlock, to_block: BasicBlock) {\n         match self.blocks[from_block].terminator_mut().kind {\n             TerminatorKind::Assert { ref mut target, .. }\n-            | TerminatorKind::Call { destination: Some((_, ref mut target)), .. }\n+            | TerminatorKind::Call { target: Some(ref mut target), .. }\n             | TerminatorKind::Drop { ref mut target, .. }\n             | TerminatorKind::DropAndReplace { ref mut target, .. }\n             | TerminatorKind::FalseEdge { real_target: ref mut target, .. }\n@@ -139,7 +139,8 @@ impl<'tcx> MockBlocks<'tcx> {\n             TerminatorKind::Call {\n                 func: Operand::Copy(self.dummy_place.clone()),\n                 args: vec![],\n-                destination: Some((self.dummy_place.clone(), TEMP_BLOCK)),\n+                destination: self.dummy_place.clone(),\n+                target: Some(TEMP_BLOCK),\n                 cleanup: None,\n                 from_hir_call: false,\n                 fn_span: DUMMY_SP,\n@@ -182,7 +183,7 @@ fn debug_basic_blocks<'tcx>(mir_body: &Body<'tcx>) -> String {\n                 let sp = format!(\"(span:{},{})\", span.lo().to_u32(), span.hi().to_u32());\n                 match kind {\n                     TerminatorKind::Assert { target, .. }\n-                    | TerminatorKind::Call { destination: Some((_, target)), .. }\n+                    | TerminatorKind::Call { target: Some(target), .. }\n                     | TerminatorKind::Drop { target, .. }\n                     | TerminatorKind::DropAndReplace { target, .. }\n                     | TerminatorKind::FalseEdge { real_target: target, .. }"}, {"sha": "182dd6f379cc17a2823330e48ec34f1825922392", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -575,17 +575,18 @@ impl<'a> Conflicts<'a> {\n             TerminatorKind::Call {\n                 func,\n                 args,\n-                destination: Some((dest_place, _)),\n+                destination,\n+                target: _,\n                 cleanup: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n                 // No arguments may overlap with the destination.\n                 for arg in args.iter().chain(Some(func)) {\n                     if let Some(place) = arg.place() {\n-                        if !place.is_indirect() && !dest_place.is_indirect() {\n+                        if !place.is_indirect() && !destination.is_indirect() {\n                             self.record_local_conflict(\n-                                dest_place.local,\n+                                destination.local,\n                                 place.local,\n                                 \"call dest/arg overlap\",\n                             );\n@@ -691,7 +692,6 @@ impl<'a> Conflicts<'a> {\n             }\n \n             TerminatorKind::Goto { .. }\n-            | TerminatorKind::Call { destination: None, .. }\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort"}, {"sha": "8a9f21073165b0493edf9437d08a067629efd888", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -494,15 +494,13 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn drop_flags_for_fn_rets(&mut self) {\n         for (bb, data) in self.body.basic_blocks().iter_enumerated() {\n             if let TerminatorKind::Call {\n-                destination: Some((ref place, tgt)),\n-                cleanup: Some(_),\n-                ..\n+                destination, target: Some(tgt), cleanup: Some(_), ..\n             } = data.terminator().kind\n             {\n                 assert!(!self.patch.is_patched(bb));\n \n                 let loc = Location { block: tgt, statement_index: 0 };\n-                let path = self.move_data().rev_lookup.find(place.as_ref());\n+                let path = self.move_data().rev_lookup.find(destination.as_ref());\n                 on_lookup_result_bits(self.tcx, self.body, self.move_data(), path, |child| {\n                     self.set_drop_flag(loc, child, DropFlagState::Present)\n                 });\n@@ -576,14 +574,13 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             // There may be a critical edge after this call,\n             // so mark the return as initialized *before* the\n             // call.\n-            if let TerminatorKind::Call {\n-                destination: Some((ref place, _)), cleanup: None, ..\n-            } = data.terminator().kind\n+            if let TerminatorKind::Call { destination, target: Some(_), cleanup: None, .. } =\n+                data.terminator().kind\n             {\n                 assert!(!self.patch.is_patched(bb));\n \n                 let loc = Location { block: bb, statement_index: data.statements.len() };\n-                let path = self.move_data().rev_lookup.find(place.as_ref());\n+                let path = self.move_data().rev_lookup.find(destination.as_ref());\n                 on_lookup_result_bits(self.tcx, self.body, self.move_data(), path, |child| {\n                     self.set_drop_flag(loc, child, DropFlagState::Present)\n                 });"}, {"sha": "2e4fe1e3e5dd8a2125ca040514a7b071f2200355", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -37,6 +37,7 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n             func,\n             args,\n             destination: _,\n+            target: _,\n             cleanup: _,\n             from_hir_call: _,\n             fn_span: _,"}, {"sha": "4a3505ca3ffcf9bf152bd5ce60fc777442385e75", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -1459,12 +1459,13 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             TerminatorKind::Call {\n                 func,\n                 args,\n-                destination: Some((dest, _)),\n+                destination,\n+                target: Some(_),\n                 cleanup: _,\n                 from_hir_call: _,\n                 fn_span: _,\n             } => {\n-                self.check_assigned_place(*dest, |this| {\n+                self.check_assigned_place(*destination, |this| {\n                     this.visit_operand(func, location);\n                     for arg in args {\n                         this.visit_operand(arg, location);"}, {"sha": "66fb01bd4646d9c341868b4bed769a0bc6c6f775", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -248,7 +248,7 @@ impl<'tcx> Inliner<'tcx> {\n     ) -> Option<CallSite<'tcx>> {\n         // Only consider direct calls to functions\n         let terminator = bb_data.terminator();\n-        if let TerminatorKind::Call { ref func, ref destination, .. } = terminator.kind {\n+        if let TerminatorKind::Call { ref func, target, .. } = terminator.kind {\n             let func_ty = func.ty(caller_body, self.tcx);\n             if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n                 // To resolve an instance its substs have to be fully normalized.\n@@ -266,7 +266,7 @@ impl<'tcx> Inliner<'tcx> {\n                     callee,\n                     fn_sig,\n                     block: bb,\n-                    target: destination.map(|(_, target)| target),\n+                    target,\n                     source_info: terminator.source_info,\n                 });\n             }\n@@ -395,7 +395,7 @@ impl<'tcx> Inliner<'tcx> {\n                     }\n                 }\n \n-                TerminatorKind::Unreachable | TerminatorKind::Call { destination: None, .. }\n+                TerminatorKind::Unreachable | TerminatorKind::Call { target: None, .. }\n                     if first_block =>\n                 {\n                     // If the function always diverges, don't inline\n@@ -512,27 +512,22 @@ impl<'tcx> Inliner<'tcx> {\n                     false\n                 }\n \n-                let dest = if let Some((destination_place, _)) = destination {\n-                    if dest_needs_borrow(destination_place) {\n-                        trace!(\"creating temp for return destination\");\n-                        let dest = Rvalue::Ref(\n-                            self.tcx.lifetimes.re_erased,\n-                            BorrowKind::Mut { allow_two_phase_borrow: false },\n-                            destination_place,\n-                        );\n-                        let dest_ty = dest.ty(caller_body, self.tcx);\n-                        let temp = Place::from(self.new_call_temp(caller_body, &callsite, dest_ty));\n-                        caller_body[callsite.block].statements.push(Statement {\n-                            source_info: callsite.source_info,\n-                            kind: StatementKind::Assign(Box::new((temp, dest))),\n-                        });\n-                        self.tcx.mk_place_deref(temp)\n-                    } else {\n-                        destination_place\n-                    }\n+                let dest = if dest_needs_borrow(destination) {\n+                    trace!(\"creating temp for return destination\");\n+                    let dest = Rvalue::Ref(\n+                        self.tcx.lifetimes.re_erased,\n+                        BorrowKind::Mut { allow_two_phase_borrow: false },\n+                        destination,\n+                    );\n+                    let dest_ty = dest.ty(caller_body, self.tcx);\n+                    let temp = Place::from(self.new_call_temp(caller_body, &callsite, dest_ty));\n+                    caller_body[callsite.block].statements.push(Statement {\n+                        source_info: callsite.source_info,\n+                        kind: StatementKind::Assign(Box::new((temp, dest))),\n+                    });\n+                    self.tcx.mk_place_deref(temp)\n                 } else {\n-                    trace!(\"creating temp for return place\");\n-                    Place::from(self.new_call_temp(caller_body, &callsite, callee_body.return_ty()))\n+                    destination\n                 };\n \n                 // Copy the arguments if needed.\n@@ -914,8 +909,8 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                     *unwind = self.cleanup_block;\n                 }\n             }\n-            TerminatorKind::Call { ref mut destination, ref mut cleanup, .. } => {\n-                if let Some((_, ref mut tgt)) = *destination {\n+            TerminatorKind::Call { ref mut target, ref mut cleanup, .. } => {\n+                if let Some(ref mut tgt) = *target {\n                     *tgt = self.map_block(*tgt);\n                 }\n                 if let Some(tgt) = *cleanup {"}, {"sha": "4fbb764337863c16ec1fb72a302d40c6a1ad5b67", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -141,15 +141,15 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         terminator: &mut Terminator<'tcx>,\n         statements: &mut Vec<Statement<'tcx>>,\n     ) {\n-        let TerminatorKind::Call { func, args, destination, .. } = &mut terminator.kind\n+        let TerminatorKind::Call { func, args, destination, target, .. } = &mut terminator.kind\n         else { return };\n \n         // It's definitely not a clone if there are multiple arguments\n         if args.len() != 1 {\n             return;\n         }\n \n-        let Some((destination_place, destination_block)) = *destination\n+        let Some(destination_block) = *target\n         else { return };\n \n         // Only bother looking more if it's easy to know what we're calling\n@@ -193,7 +193,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         statements.push(Statement {\n             source_info: terminator.source_info,\n             kind: StatementKind::Assign(Box::new((\n-                destination_place,\n+                *destination,\n                 Rvalue::Use(Operand::Copy(\n                     arg_place.project_deeper(&[ProjectionElem::Deref], self.tcx),\n                 )),"}, {"sha": "65801069560b34542e32e71c07a6e3c000e83e69", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -14,7 +14,9 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for block in basic_blocks {\n             let terminator = block.terminator.as_mut().unwrap();\n-            if let TerminatorKind::Call { func, args, destination, .. } = &mut terminator.kind {\n+            if let TerminatorKind::Call { func, args, destination, target, .. } =\n+                &mut terminator.kind\n+            {\n                 let func_ty = func.ty(local_decls, tcx);\n                 let Some((intrinsic_name, substs)) = resolve_rust_intrinsic(tcx, func_ty) else {\n                     continue;\n@@ -24,11 +26,11 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         terminator.kind = TerminatorKind::Unreachable;\n                     }\n                     sym::forget => {\n-                        if let Some((destination, target)) = *destination {\n+                        if let Some(target) = *target {\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n-                                    destination,\n+                                    *destination,\n                                     Rvalue::Use(Operand::Constant(Box::new(Constant {\n                                         span: terminator.source_info.span,\n                                         user_ty: None,\n@@ -40,7 +42,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         }\n                     }\n                     sym::copy_nonoverlapping => {\n-                        let target = destination.unwrap().1;\n+                        let target = target.unwrap();\n                         let mut args = args.drain(..);\n                         block.statements.push(Statement {\n                             source_info: terminator.source_info,\n@@ -61,7 +63,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         terminator.kind = TerminatorKind::Goto { target };\n                     }\n                     sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n-                        if let Some((destination, target)) = *destination {\n+                        if let Some(target) = *target {\n                             let lhs;\n                             let rhs;\n                             {\n@@ -78,7 +80,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n-                                    destination,\n+                                    *destination,\n                                     Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n                                 ))),\n                             });\n@@ -91,7 +93,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         // during codegen. Issue #35310.\n                     }\n                     sym::size_of | sym::min_align_of => {\n-                        if let Some((destination, target)) = *destination {\n+                        if let Some(target) = *target {\n                             let tp_ty = substs.type_at(0);\n                             let null_op = match intrinsic_name {\n                                 sym::size_of => NullOp::SizeOf,\n@@ -101,22 +103,20 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n-                                    destination,\n+                                    *destination,\n                                     Rvalue::NullaryOp(null_op, tp_ty),\n                                 ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n                     sym::discriminant_value => {\n-                        if let (Some((destination, target)), Some(arg)) =\n-                            (*destination, args[0].place())\n-                        {\n+                        if let (Some(target), Some(arg)) = (*target, args[0].place()) {\n                             let arg = tcx.mk_place_deref(arg);\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n-                                    destination,\n+                                    *destination,\n                                     Rvalue::Discriminant(arg),\n                                 ))),\n                             });"}, {"sha": "07163cfe57510a20f852263c29f7fe86379a06d9", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -52,7 +52,8 @@ fn lower_slice_len_call<'tcx>(\n         TerminatorKind::Call {\n             func,\n             args,\n-            destination: Some((dest, bb)),\n+            destination,\n+            target: Some(bb),\n             cleanup: None,\n             from_hir_call: true,\n             ..\n@@ -73,7 +74,8 @@ fn lower_slice_len_call<'tcx>(\n                     // make new RValue for Len\n                     let deref_arg = tcx.mk_place_deref(arg);\n                     let r_value = Rvalue::Len(deref_arg);\n-                    let len_statement_kind = StatementKind::Assign(Box::new((*dest, r_value)));\n+                    let len_statement_kind =\n+                        StatementKind::Assign(Box::new((*destination, r_value)));\n                     let add_statement =\n                         Statement { kind: len_statement_kind, source_info: terminator.source_info };\n "}, {"sha": "78a4ece2ecbb319e02b348d8e6a71311f7270f62", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -450,7 +450,8 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             TerminatorKind::Call {\n                 func,\n                 args: vec![Operand::Move(ref_loc)],\n-                destination: Some((dest, next)),\n+                destination: dest,\n+                target: Some(next),\n                 cleanup: Some(cleanup),\n                 from_hir_call: true,\n                 fn_span: self.span,\n@@ -676,7 +677,8 @@ fn build_call_shim<'tcx>(\n         TerminatorKind::Call {\n             func: callee,\n             args,\n-            destination: Some((Place::return_place(), BasicBlock::new(1))),\n+            destination: Place::return_place(),\n+            target: Some(BasicBlock::new(1)),\n             cleanup: if let Some(Adjustment::RefMut) = rcvr_adjustment {\n                 Some(BasicBlock::new(3))\n             } else {"}, {"sha": "f2c2f4774137817e9d9ef2dc5b2d1d15681a8878", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -10,7 +10,7 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @alloc12 = {{.*}}, align 2\n+// CHECK: @alloc14 = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used"}, {"sha": "d7636c817099a40d79989d03787776b1454fd483", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -16,7 +16,7 @@\n   \n       bb1: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-          begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+          _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "eb579b53b6c91e7a257ee8feb8e8033b9fab91f1", "filename": "src/test/mir-opt/inline/inline_diverging.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -5,17 +5,15 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:7:12: 7:12\n       let mut _1: !;                       // in scope 0 at $DIR/inline-diverging.rs:7:12: 9:2\n       let _2: !;                           // in scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n-+     let mut _3: !;                       // in scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n +     scope 1 (inlined sleep) {            // at $DIR/inline-diverging.rs:8:5: 8:12\n +     }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n--         sleep();                         // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n+-         _2 = sleep();                    // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:8:5: 8:10\n -                                          // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n-+         StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n +         goto -> bb1;                     // scope 0 at $DIR/inline-diverging.rs:8:5: 8:12\n +     }\n + "}, {"sha": "3ce823a0e33ec68bf03bd3a0e0b2c1a48b829b93", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -9,8 +9,8 @@\n       let mut _4: i32;                     // in scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n       let mut _5: !;                       // in scope 0 at $DIR/inline-diverging.rs:15:12: 17:6\n       let _6: !;                           // in scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n-+     let mut _7: !;                       // in scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n +     scope 1 (inlined panic) {            // at $DIR/inline-diverging.rs:16:9: 16:16\n++         let mut _7: !;                   // in scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n +     }\n   \n       bb0: {\n@@ -33,9 +33,9 @@\n   \n       bb2: {\n           StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n--         panic();                         // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n-+         StorageLive(_7);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n-+         begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n+-         _6 = panic();                    // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n++         StorageLive(_7);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n++         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }"}, {"sha": "647c27d11e58eb362d7d797e6a5090a326c2b801", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -4,22 +4,21 @@\n   fn h() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _2: (!, !);                  // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _3: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16\n-+     let mut _11: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16\n++     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16\n++     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+         debug f => _3;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n-+         let _4: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n-+         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n-+         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n++         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n++         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n++         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n++         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n +         scope 2 {\n-+             debug a => _4;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n-+             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n++             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n++             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n +             scope 3 {\n-+                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n++                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n +             }\n +             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n +                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n@@ -34,21 +33,20 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n--         call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n+-         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         _3 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:22:5: 22:15\n -                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(Scalar(<ZST>)) }\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         _5 = &_3;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         StorageLive(_10);                // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         _10 = const ();                  // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n +         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n +     }\n + "}, {"sha": "899c84687890b8e9b3b6aff1c1b445498c6c6d5e", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -21,7 +21,7 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n-        transmute::<(), Void>(move _3) -> bb4; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+        _2 = transmute::<(), Void>(move _3) -> bb4; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n@@ -34,7 +34,7 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n-        f(move _5) -> bb4;               // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n+        _4 = f(move _5) -> bb4;          // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n                                          // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4426cd8661661316a64b6fc85d02d935bd7b1c94", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -13,19 +13,20 @@\n       let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _15: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _16: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _20: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _21: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n                   debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -62,11 +63,11 @@\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = _21;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -93,16 +94,17 @@\n           discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _17;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _16, move _18, move _20); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4426cd8661661316a64b6fc85d02d935bd7b1c94", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -13,19 +13,20 @@\n       let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _15: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _16: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _20: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _21: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n                   debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -62,11 +63,11 @@\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = _21;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -93,16 +94,17 @@\n           discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _17;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _16, move _18, move _20); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c96a6641bab91f28b30e7e65035897f3e1d40b6c", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -132,7 +132,7 @@\n           StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c96a6641bab91f28b30e7e65035897f3e1d40b6c", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -132,7 +132,7 @@\n           StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "29bcef26518a158d9ff6a068c132138a6e0c576f", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -67,7 +67,7 @@\n   \n       bb1: {\n           StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _22 = core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }"}, {"sha": "1e6da388e3a25f0ab6b5a4e8cdd800aa0754dc55", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -7,7 +7,7 @@ fn num_to_digit(_1: char) -> u32 {\n     let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n     let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n     let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-    let mut _11: isize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+    let mut _12: isize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n         debug self => _2;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => _5;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n@@ -22,6 +22,7 @@ fn num_to_digit(_1: char) -> u32 {\n     scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n         debug self => _3;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _10: isize;              // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _11: !;                  // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         scope 4 {\n             debug val => _0;             // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n@@ -43,7 +44,7 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb1: {\n-        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_12);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n         StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n         _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n@@ -61,7 +62,7 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb3: {\n-        StorageDead(_11);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_12);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n     }\n@@ -75,18 +76,19 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         _9 = discriminant((*_6));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageLive(_11);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _11 = move _9;                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _12 = move _9;                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:22: 14:23\n-        switchInt(move _11) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        switchInt(move _12) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n     }\n \n     bb6: {\n-        core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _11 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }"}, {"sha": "eb463afbf7795224e7c48b02871154a6867bb726", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -12,7 +12,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:29:5: 29:47\n           StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n--         std::intrinsics::unreachable();  // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n+-         _3 = std::intrinsics::unreachable(); // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:29:14: 29:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8a297cea2b95656aa2ef1e7df7fd659445cc5714", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -20,7 +20,7 @@ fn unwrap(_1: Option<T>) -> T {\n \n     bb1: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-        begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+        _4 = begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "69742d6bc3b6a324f9ef2818a85e1ba97ecd07d2", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -171,7 +171,7 @@ fn array_casts() -> () {\n         Retag(_32);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_34);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _34 = Option::<Arguments>::None; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "884ae71197bcc06a805d25b49908d2ed8eeea66d", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -6,7 +6,7 @@ LL | fn main() {\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n-               \u257e\u2500alloc7\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+               \u257e\u2500alloc8\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n            }\n \n error: erroneous constant used"}, {"sha": "9df1a89694ebafed564f8ea9c3796486cd056dbf", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -6,7 +6,7 @@ LL | fn main() {\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n error: erroneous constant used"}, {"sha": "ab16fe47d4dfbe536844123b4b742c5cbb3d26e3", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -292,7 +292,7 @@ fn is_call_with_ref_arg<'tcx>(\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n         then {\n-            Some((def_id, *local, inner_ty, destination.as_ref().map(|(dest, _)| dest)?.as_local()?))\n+            Some((def_id, *local, inner_ty, destination.as_local()?))\n         } else {\n             None\n         }\n@@ -584,7 +584,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n-            destination: Some((mir::Place { local: dest, .. }, _)),\n+            destination: mir::Place { local: dest, .. },\n             ..\n         } = &terminator.kind\n         {"}, {"sha": "78d8f1e213af0396c81a471e4d0da7aef57f616d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0936db2bb3be67451c6f8948e90987e764f81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=09b0936db2bb3be67451c6f8948e90987e764f81", "patch": "@@ -301,6 +301,7 @@ fn check_terminator<'a, 'tcx>(\n             args,\n             from_hir_call: _,\n             destination: _,\n+            target: _,\n             cleanup: _,\n             fn_span: _,\n         } => {"}]}