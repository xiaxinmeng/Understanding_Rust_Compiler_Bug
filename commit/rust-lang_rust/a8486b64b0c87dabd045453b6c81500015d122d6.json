{"sha": "a8486b64b0c87dabd045453b6c81500015d122d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDg2YjY0YjBjODdkYWJkMDQ1NDUzYjZjODE1MDAwMTVkMTIyZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-24T14:46:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-24T14:46:18Z"}, "message": "Auto merge of #80914 - GuillaumeGomez:remove-is_spotlight, r=jyn514\n\nRemove is_spotlight field from `Trait`\n\nSmall PR, only the last commit is relevant here. The rest is coming from #80883 because I need the `TyCtxt` stored inside `Cache`.\n\nThe point is to make ItemKind looks as close as possible to the compiler type so that it makes the switch simpler (which is why I make all these \"small\" PRs).\n\nr? `@jyn514`", "tree": {"sha": "0796803dcee5f3811763ffbefde161c0caade0c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0796803dcee5f3811763ffbefde161c0caade0c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8486b64b0c87dabd045453b6c81500015d122d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8486b64b0c87dabd045453b6c81500015d122d6", "html_url": "https://github.com/rust-lang/rust/commit/a8486b64b0c87dabd045453b6c81500015d122d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8486b64b0c87dabd045453b6c81500015d122d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b56603e35b39c9f6cc76782330e5e415f9e43d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b56603e35b39c9f6cc76782330e5e415f9e43d5", "html_url": "https://github.com/rust-lang/rust/commit/6b56603e35b39c9f6cc76782330e5e415f9e43d5"}, {"sha": "33aaead6a1bdd4b2fde50efde825d2a770d8ecb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33aaead6a1bdd4b2fde50efde825d2a770d8ecb8", "html_url": "https://github.com/rust-lang/rust/commit/33aaead6a1bdd4b2fde50efde825d2a770d8ecb8"}], "stats": {"total": 91, "additions": 73, "deletions": 18}, "files": [{"sha": "f9c63186544a4d3f1275ee3de0d5dcc680c13be4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -195,14 +195,12 @@ crate fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean::Tra\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n-    let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n     let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n-        is_spotlight,\n         is_auto,\n     }\n }\n@@ -626,6 +624,10 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n+    let trait_ = clean::TraitWithExtraInfo {\n+        trait_,\n+        is_spotlight: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::spotlight),\n+    };\n     cx.external_traits.borrow_mut().insert(did, trait_);\n     cx.active_extern_traits.remove(&did);\n }"}, {"sha": "7aa34333e175dd5f00b209568f75dd1837d400fd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -2003,14 +2003,11 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                         .iter()\n                         .map(|ti| cx.tcx.hir().trait_item(ti.id).clean(cx))\n                         .collect();\n-                    let attrs = item.attrs.clean(cx);\n-                    let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n                     TraitItem(Trait {\n                         unsafety,\n                         items,\n                         generics: generics.clean(cx),\n                         bounds: bounds.clean(cx),\n-                        is_spotlight,\n                         is_auto: is_auto.clean(cx),\n                     })\n                 }"}, {"sha": "51bef344e6722a80186032cfedec372e67e528d3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -57,11 +57,18 @@ crate struct Crate {\n     crate primitives: Vec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n-    crate external_traits: Rc<RefCell<FxHashMap<DefId, Trait>>>,\n+    crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n     crate masked_crates: FxHashSet<CrateNum>,\n     crate collapsed: bool,\n }\n \n+/// This struct is used to wrap additional information added by rustdoc on a `trait` item.\n+#[derive(Clone, Debug)]\n+crate struct TraitWithExtraInfo {\n+    crate trait_: Trait,\n+    crate is_spotlight: bool,\n+}\n+\n #[derive(Clone, Debug)]\n crate struct ExternalCrate {\n     crate name: Symbol,\n@@ -1185,7 +1192,6 @@ crate struct Trait {\n     crate items: Vec<Item>,\n     crate generics: Generics,\n     crate bounds: Vec<GenericBound>,\n-    crate is_spotlight: bool,\n     crate is_auto: bool,\n }\n "}, {"sha": "a0a2b785353686a71190ee471e64241163ecf6cf", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -520,3 +520,19 @@ crate fn find_nearest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<De\n         None\n     }\n }\n+\n+/// Checks for the existence of `hidden` in the attribute below if `flag` is `sym::hidden`:\n+///\n+/// ```\n+/// #[doc(hidden)]\n+/// pub fn foo() {}\n+/// ```\n+///\n+/// This function exists because it runs on `hir::Attributes` whereas the other is a\n+/// `clean::Attributes` method.\n+crate fn has_doc_flag(attrs: ty::Attributes<'_>, flag: Symbol) -> bool {\n+    attrs.iter().any(|attr| {\n+        attr.has_name(sym::doc)\n+            && attr.meta_item_list().map_or(false, |l| rustc_attr::list_contains_name(&l, flag))\n+    })\n+}"}, {"sha": "f0b3159f737a6ec2aa4f2914a1c7d955c4a6ec93", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -30,7 +30,7 @@ use std::{cell::RefCell, collections::hash_map::Entry};\n \n use crate::clean;\n use crate::clean::inline::build_external_trait;\n-use crate::clean::{AttributesExt, MAX_DEF_IDX};\n+use crate::clean::{AttributesExt, TraitWithExtraInfo, MAX_DEF_IDX};\n use crate::config::{Options as RustdocOptions, RenderOptions};\n use crate::config::{OutputFormat, RenderInfo};\n use crate::formats::cache::Cache;\n@@ -55,7 +55,7 @@ crate struct DocContext<'tcx> {\n     /// Later on moved into `cache`\n     crate renderinfo: RenderInfo,\n     /// Later on moved through `clean::Crate` into `cache`\n-    crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::Trait>>>,\n+    crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::TraitWithExtraInfo>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n     crate active_extern_traits: FxHashSet<DefId>,\n@@ -538,7 +538,10 @@ crate fn run_global_ctxt(\n     if let Some(sized_trait_did) = ctxt.tcx.lang_items().sized_trait() {\n         let mut sized_trait = build_external_trait(&mut ctxt, sized_trait_did);\n         sized_trait.is_auto = true;\n-        ctxt.external_traits.borrow_mut().insert(sized_trait_did, sized_trait);\n+        ctxt.external_traits.borrow_mut().insert(\n+            sized_trait_did,\n+            TraitWithExtraInfo { trait_: sized_trait, is_spotlight: false },\n+        );\n     }\n \n     debug!(\"crate: {:?}\", tcx.hir().krate());"}, {"sha": "2b980ebe5926a88cf55f6e76e3c37946545803c7", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -92,7 +92,8 @@ crate trait DocFolder: Sized {\n         {\n             let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };\n             for (k, mut v) in external_traits {\n-                v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n+                v.trait_.items =\n+                    v.trait_.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n                 c.external_traits.borrow_mut().insert(k, v);\n             }\n         }"}, {"sha": "e9c5dd50d59a82df5cd47de3f5b5bfd759b8fd35", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::source_map::FileName;\n+use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n@@ -64,7 +65,7 @@ crate struct Cache {\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    crate traits: FxHashMap<DefId, clean::Trait>,\n+    crate traits: FxHashMap<DefId, clean::TraitWithExtraInfo>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n@@ -247,7 +248,10 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         // Propagate a trait method's documentation to all implementors of the\n         // trait.\n         if let clean::TraitItem(ref t) = *item.kind {\n-            self.cache.traits.entry(item.def_id).or_insert_with(|| t.clone());\n+            self.cache.traits.entry(item.def_id).or_insert_with(|| clean::TraitWithExtraInfo {\n+                trait_: t.clone(),\n+                is_spotlight: item.attrs.has_doc_flag(sym::spotlight),\n+            });\n         }\n \n         // Collect all the implementors of traits."}, {"sha": "b21f6a13392361bd82f5ba20d3903a93a1f8a1f2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -3687,8 +3687,9 @@ fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache) -> String {\n         if let Some(impls) = cache.impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id_full(cache).map_or(false, |d| cache.traits[&d].is_spotlight)\n-                {\n+                if impl_.trait_.def_id().map_or(false, |d| {\n+                    cache.traits.get(&d).map(|t| t.is_spotlight).unwrap_or(false)\n+                }) {\n                     if out.is_empty() {\n                         write!(\n                             &mut out,\n@@ -3979,7 +3980,7 @@ fn render_impl(\n             false,\n             outer_version,\n             outer_const_version,\n-            trait_,\n+            trait_.map(|t| &t.trait_),\n             show_def_docs,\n         );\n     }\n@@ -4028,7 +4029,7 @@ fn render_impl(\n             render_default_items(\n                 w,\n                 cx,\n-                t,\n+                &t.trait_,\n                 &i.inner_impl(),\n                 &i.impl_item,\n                 render_mode,"}, {"sha": "da09d49a0066a61ecbe6c6a0197fc9619039b1f2", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -408,7 +408,7 @@ impl From<clean::FnDecl> for FnDecl {\n \n impl From<clean::Trait> for Trait {\n     fn from(trait_: clean::Trait) -> Self {\n-        let clean::Trait { unsafety, items, generics, bounds, is_spotlight: _, is_auto } = trait_;\n+        let clean::Trait { unsafety, items, generics, bounds, is_auto } = trait_;\n         Trait {\n             is_auto,\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,"}, {"sha": "a3b214677941b143a857f6d30b075b5d749da15c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -87,6 +87,7 @@ impl JsonRenderer<'tcx> {\n             .filter_map(|(&id, trait_item)| {\n                 // only need to synthesize items for external traits\n                 if !id.is_local() {\n+                    let trait_item = &trait_item.trait_;\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n                     Some((\n                         from_def_id(id),"}, {"sha": "ed42c43594540df4f990a6943212f2cb47754a02", "filename": "src/test/rustdoc/spotlight-from-dependency.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8486b64b0c87dabd045453b6c81500015d122d6/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs?ref=a8486b64b0c87dabd045453b6c81500015d122d6", "patch": "@@ -0,0 +1,24 @@\n+#![crate_name = \"foo\"]\n+\n+use std::iter::Iterator;\n+\n+// @has foo/struct.Odd.html\n+// @has - '//h4[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n+pub struct Odd {\n+    current: usize,\n+}\n+\n+impl Odd {\n+    pub fn new() -> Odd {\n+        Odd { current: 1 }\n+    }\n+}\n+\n+impl Iterator for Odd {\n+    type Item = usize;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.current += 2;\n+        Some(self.current - 2)\n+    }\n+}"}]}