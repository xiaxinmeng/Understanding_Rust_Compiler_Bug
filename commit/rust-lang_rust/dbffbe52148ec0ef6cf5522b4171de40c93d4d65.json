{"sha": "dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZmZiZTUyMTQ4ZWMwZWY2Y2Y1NTIyYjQxNzFkZTQwYzkzZDRkNjU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-09T11:42:56Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-09T11:42:56Z"}, "message": "Document all the things", "tree": {"sha": "5177b04ece9a31d6c93945d2ea6f38a28e6fc3ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5177b04ece9a31d6c93945d2ea6f38a28e6fc3ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "html_url": "https://github.com/rust-lang/rust/commit/dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc7a7effd8836765fc8bcb28084b90b29d8906c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc7a7effd8836765fc8bcb28084b90b29d8906c", "html_url": "https://github.com/rust-lang/rust/commit/bfc7a7effd8836765fc8bcb28084b90b29d8906c"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "e68dfad1b9fae5e40a40cd9d3c1b87921f1b6637", "filename": "src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "patch": "@@ -3,11 +3,13 @@ use std::cell::RefCell;\n \n use crate::*;\n \n+/// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n }\n \n-pub fn report_err<'tcx, 'mir>(\n+/// Emit a custom diagnostic without going through the miri-engine machinery\n+pub fn report_diagnostic<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     mut e: InterpErrorInfo<'tcx>,\n ) -> Option<i64> {\n@@ -31,6 +33,8 @@ pub fn report_err<'tcx, 'mir>(\n     report_msg(ecx, msg, true)\n }\n \n+/// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n+/// Also emits a full stacktrace of the interpreter stack.\n pub fn report_msg<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     msg: String,\n@@ -80,12 +84,15 @@ thread_local! {\n     static DIAGNOSTICS: RefCell<Vec<NonHaltingDiagnostic>> = RefCell::new(Vec::new());\n }\n \n+/// Schedule a diagnostic for emitting. This function works even if you have no `InterpCx` available.\n+/// The diagnostic will be emitted after the current interpreter step is finished.\n pub fn register_diagnostic(e: NonHaltingDiagnostic) {\n     DIAGNOSTICS.with(|diagnostics| diagnostics.borrow_mut().push(e));\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    /// Emit all diagnostics that were registed with `register_diagnostics`\n     fn process_diagnostics(&self) {\n         let this = self.eval_context_ref();\n         DIAGNOSTICS.with(|diagnostics| {"}, {"sha": "7a3945220f7725808277ce6b3651f005165a3fb2", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "patch": "@@ -206,6 +206,6 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n             }\n             Some(return_code)\n         }\n-        Err(e) => report_err(&ecx, e),\n+        Err(e) => report_diagnostic(&ecx, e),\n     }\n }"}, {"sha": "880a14b98c80ee707588f3b238f6308c5a9cce8b", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbffbe52148ec0ef6cf5522b4171de40c93d4d65/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dbffbe52148ec0ef6cf5522b4171de40c93d4d65", "patch": "@@ -43,7 +43,7 @@ pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::EvalContextExt as ShimsEvalContextExt;\n \n pub use crate::diagnostics::{\n-    register_diagnostic, report_err, EvalContextExt as DiagnosticsEvalContextExt, NonHaltingDiagnostic,\n+    register_diagnostic, report_diagnostic, EvalContextExt as DiagnosticsEvalContextExt, NonHaltingDiagnostic,\n };\n pub use crate::eval::{create_ecx, eval_main, MiriConfig, TerminationInfo};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;"}]}