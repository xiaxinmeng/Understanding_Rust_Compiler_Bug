{"sha": "092d04a40a3db44af2dd50e43a77449a7e56dd13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmQwNGE0MGEzZGI0NGFmMmRkNTBlNDNhNzc0NDlhN2U1NmRkMTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-09T15:36:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T16:11:55Z"}, "message": "Rename FnStyle trait to Unsafety.", "tree": {"sha": "57cdb11cebf4b89aa8598c1b9874358cb4c1461e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57cdb11cebf4b89aa8598c1b9874358cb4c1461e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092d04a40a3db44af2dd50e43a77449a7e56dd13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092d04a40a3db44af2dd50e43a77449a7e56dd13", "html_url": "https://github.com/rust-lang/rust/commit/092d04a40a3db44af2dd50e43a77449a7e56dd13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092d04a40a3db44af2dd50e43a77449a7e56dd13/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52f7a4a351646d3837f214b5c7aec390c9b08221", "url": "https://api.github.com/repos/rust-lang/rust/commits/52f7a4a351646d3837f214b5c7aec390c9b08221", "html_url": "https://github.com/rust-lang/rust/commit/52f7a4a351646d3837f214b5c7aec390c9b08221"}], "stats": {"total": 527, "additions": 254, "deletions": 273}, "files": [{"sha": "d649c6491314c2e5b4a0ad7123aef8bf396b48a9", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -549,11 +549,11 @@ fn parse_hex(st: &mut PState) -> uint {\n     };\n }\n \n-fn parse_fn_style(c: char) -> ast::FnStyle {\n+fn parse_unsafety(c: char) -> ast::Unsafety {\n     match c {\n-        'u' => ast::UnsafeFn,\n-        'n' => ast::NormalFn,\n-        _ => panic!(\"parse_fn_style: bad fn_style {}\", c)\n+        'u' => ast::Unsafety::Unsafe,\n+        'n' => ast::Unsafety::Normal,\n+        _ => panic!(\"parse_unsafety: bad unsafety {}\", c)\n     }\n }\n \n@@ -575,14 +575,14 @@ fn parse_onceness(c: char) -> ast::Onceness {\n \n fn parse_closure_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n                               conv: conv_did) -> ty::ClosureTy<'tcx> {\n-    let fn_style = parse_fn_style(next(st));\n+    let unsafety = parse_unsafety(next(st));\n     let onceness = parse_onceness(next(st));\n     let store = parse_trait_store(st, |x,y| conv(x,y));\n     let bounds = parse_existential_bounds(st, |x,y| conv(x,y));\n     let sig = parse_sig(st, |x,y| conv(x,y));\n     let abi = parse_abi_set(st);\n     ty::ClosureTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         onceness: onceness,\n         store: store,\n         bounds: bounds,\n@@ -593,11 +593,11 @@ fn parse_closure_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n \n fn parse_bare_fn_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n                               conv: conv_did) -> ty::BareFnTy<'tcx> {\n-    let fn_style = parse_fn_style(next(st));\n+    let unsafety = parse_unsafety(next(st));\n     let abi = parse_abi_set(st);\n     let sig = parse_sig(st, |x,y| conv(x,y));\n     ty::BareFnTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         abi: abi,\n         sig: sig\n     }"}, {"sha": "9b9d2ab42df2b8976c8688609d17d7c84329f976", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -313,10 +313,10 @@ fn enc_sty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n     }\n }\n \n-fn enc_fn_style(w: &mut SeekableMemWriter, p: ast::FnStyle) {\n+fn enc_unsafety(w: &mut SeekableMemWriter, p: ast::Unsafety) {\n     match p {\n-        ast::NormalFn => mywrite!(w, \"n\"),\n-        ast::UnsafeFn => mywrite!(w, \"u\"),\n+        ast::Unsafety::Normal => mywrite!(w, \"n\"),\n+        ast::Unsafety::Unsafe => mywrite!(w, \"u\"),\n     }\n }\n \n@@ -335,14 +335,14 @@ fn enc_onceness(w: &mut SeekableMemWriter, o: ast::Onceness) {\n \n pub fn enc_bare_fn_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                 ft: &ty::BareFnTy<'tcx>) {\n-    enc_fn_style(w, ft.fn_style);\n+    enc_unsafety(w, ft.unsafety);\n     enc_abi(w, ft.abi);\n     enc_fn_sig(w, cx, &ft.sig);\n }\n \n pub fn enc_closure_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                 ft: &ty::ClosureTy<'tcx>) {\n-    enc_fn_style(w, ft.fn_style);\n+    enc_unsafety(w, ft.unsafety);\n     enc_onceness(w, ft.onceness);\n     enc_trait_store(w, cx, ft.store);\n     enc_existential_bounds(w, cx, &ft.bounds);"}, {"sha": "d16ce3ad678b34d8c1bd1e121d77aa328c7427a3", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -34,8 +34,8 @@ impl Copy for UnsafeContext {}\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::ty_bare_fn(ref f) => f.fn_style == ast::UnsafeFn,\n-        ty::ty_closure(ref f) => f.fn_style == ast::UnsafeFn,\n+        ty::ty_bare_fn(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n+        ty::ty_closure(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n         _ => false,\n     }\n }\n@@ -92,9 +92,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n             visit::FkItemFn(_, _, fn_style, _) =>\n-                (true, fn_style == ast::UnsafeFn),\n+                (true, fn_style == ast::Unsafety::Unsafe),\n             visit::FkMethod(_, _, method) =>\n-                (true, method.pe_fn_style() == ast::UnsafeFn),\n+                (true, method.pe_unsafety() == ast::Unsafety::Unsafe),\n             _ => (false, false),\n         };\n "}, {"sha": "1d1ee39d6843552024072d5f712c432768885ba5", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -521,7 +521,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             debug!(\"coerce_from_bare_fn(a={}, b={})\",\n                    a.repr(self.get_ref().infcx.tcx), b.repr(self.get_ref().infcx.tcx));\n \n-            if fn_ty_a.abi != abi::Rust || fn_ty_a.fn_style != ast::NormalFn {\n+            if fn_ty_a.abi != abi::Rust || fn_ty_a.unsafety != ast::Unsafety::Normal {\n                 return self.subtype(a, b);\n             }\n "}, {"sha": "26bba55594b5e365c7561b5a9a9faf54b29c210a", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -51,7 +51,7 @@ use middle::ty_fold;\n use middle::ty_fold::{TypeFoldable};\n use util::ppaux::Repr;\n \n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n use syntax::ast;\n use syntax::abi;\n use syntax::codemap::Span;\n@@ -193,12 +193,12 @@ pub trait Combine<'tcx> {\n \n     fn bare_fn_tys(&self, a: &ty::BareFnTy<'tcx>,\n                    b: &ty::BareFnTy<'tcx>) -> cres<'tcx, ty::BareFnTy<'tcx>> {\n-        let fn_style = try!(self.fn_styles(a.fn_style, b.fn_style));\n+        let unsafety = try!(self.unsafeties(a.unsafety, b.unsafety));\n         let abi = try!(self.abi(a.abi, b.abi));\n         let sig = try!(self.fn_sigs(&a.sig, &b.sig));\n-        Ok(ty::BareFnTy {fn_style: fn_style,\n-                abi: abi,\n-                sig: sig})\n+        Ok(ty::BareFnTy {unsafety: unsafety,\n+                         abi: abi,\n+                         sig: sig})\n     }\n \n     fn closure_tys(&self, a: &ty::ClosureTy<'tcx>,\n@@ -219,13 +219,13 @@ pub trait Combine<'tcx> {\n                 return Err(ty::terr_sigil_mismatch(expected_found(self, a.store, b.store)))\n             }\n         };\n-        let fn_style = try!(self.fn_styles(a.fn_style, b.fn_style));\n+        let unsafety = try!(self.unsafeties(a.unsafety, b.unsafety));\n         let onceness = try!(self.oncenesses(a.onceness, b.onceness));\n         let bounds = try!(self.existential_bounds(a.bounds, b.bounds));\n         let sig = try!(self.fn_sigs(&a.sig, &b.sig));\n         let abi = try!(self.abi(a.abi, b.abi));\n         Ok(ty::ClosureTy {\n-            fn_style: fn_style,\n+            unsafety: unsafety,\n             onceness: onceness,\n             store: store,\n             bounds: bounds,\n@@ -240,7 +240,7 @@ pub trait Combine<'tcx> {\n         self.contratys(a, b).and_then(|t| Ok(t))\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle>;\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety>;\n \n     fn abi(&self, a: abi::Abi, b: abi::Abi) -> cres<'tcx, abi::Abi> {\n         if a == b {"}, {"sha": "1738b8db99b37d59fee2b81a137e2a972fb7dfe8", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -21,7 +21,7 @@ use middle::infer::{TypeTrace, Subtype};\n use middle::infer::type_variable::{EqTo};\n use util::ppaux::{Repr};\n \n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n \n pub struct Equate<'f, 'tcx: 'f> {\n     fields: CombineFields<'f, 'tcx>\n@@ -70,9 +70,9 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n         Ok(ty::mt { mutbl: a.mutbl, ty: t })\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         if a != b {\n-            Err(ty::terr_fn_style_mismatch(expected_found(self, a, b)))\n+            Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))\n         } else {\n             Ok(a)\n         }"}, {"sha": "c638182d7f33fa29e0f62dd1c133333f615705d6", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -157,7 +157,7 @@ trait ErrorReportingHelpers<'tcx> {\n \n     fn give_expl_lifetime_param(&self,\n                                 decl: &ast::FnDecl,\n-                                fn_style: ast::FnStyle,\n+                                unsafety: ast::Unsafety,\n                                 ident: ast::Ident,\n                                 opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                                 generics: &ast::Generics,\n@@ -828,7 +828,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         ast::MethodImplItem(ref m) => {\n                             Some((m.pe_fn_decl(),\n                                   m.pe_generics(),\n-                                  m.pe_fn_style(),\n+                                  m.pe_unsafety(),\n                                   m.pe_ident(),\n                                   Some(&m.pe_explicit_self().node),\n                                   m.span))\n@@ -841,7 +841,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                         ast::ProvidedMethod(ref m) => {\n                             Some((m.pe_fn_decl(),\n                                   m.pe_generics(),\n-                                  m.pe_fn_style(),\n+                                  m.pe_unsafety(),\n                                   m.pe_ident(),\n                                   Some(&m.pe_explicit_self().node),\n                                   m.span))\n@@ -853,14 +853,14 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             },\n             None => None\n         };\n-        let (fn_decl, generics, fn_style, ident, expl_self, span)\n+        let (fn_decl, generics, unsafety, ident, expl_self, span)\n                                     = node_inner.expect(\"expect item fn\");\n         let taken = lifetimes_in_scope(self.tcx, scope_id);\n         let life_giver = LifeGiver::with_taken(taken.as_slice());\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, expl_self,\n                                        generics, same_regions, &life_giver);\n         let (fn_decl, expl_self, generics) = rebuilder.rebuild();\n-        self.give_expl_lifetime_param(&fn_decl, fn_style, ident,\n+        self.give_expl_lifetime_param(&fn_decl, unsafety, ident,\n                                       expl_self.as_ref(), &generics, span);\n     }\n }\n@@ -1407,12 +1407,12 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n     fn give_expl_lifetime_param(&self,\n                                 decl: &ast::FnDecl,\n-                                fn_style: ast::FnStyle,\n+                                unsafety: ast::Unsafety,\n                                 ident: ast::Ident,\n                                 opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                                 generics: &ast::Generics,\n                                 span: codemap::Span) {\n-        let suggested_fn = pprust::fun_to_string(decl, fn_style, ident,\n+        let suggested_fn = pprust::fun_to_string(decl, unsafety, ident,\n                                               opt_explicit_self, generics);\n         let msg = format!(\"consider using an explicit lifetime \\\n                            parameter as shown: {}\", suggested_fn);"}, {"sha": "9fc4e095c43bdf9c7c2044dda9908b3ed59bdd80", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -20,8 +20,7 @@ use super::{TypeTrace, Subtype};\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n-use syntax::ast::{NormalFn, UnsafeFn};\n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n use util::ppaux::mt_to_string;\n use util::ppaux::Repr;\n \n@@ -81,10 +80,10 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n         self.lub().tys(a, b)\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         match (a, b) {\n-          (NormalFn, _) | (_, NormalFn) => Ok(NormalFn),\n-          (UnsafeFn, UnsafeFn) => Ok(UnsafeFn)\n+          (Unsafety::Normal, _) | (_, Unsafety::Normal) => Ok(Unsafety::Normal),\n+          (Unsafety::Unsafe, Unsafety::Unsafe) => Ok(Unsafety::Unsafe)\n         }\n     }\n "}, {"sha": "f27b07c9c9d45db79d80e01da15c62bbe39e4b3e", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -20,8 +20,7 @@ use super::{TypeTrace, Subtype};\n use middle::ty::{BuiltinBounds};\n use middle::ty::{mod, Ty};\n use syntax::ast::{Many, Once};\n-use syntax::ast::{NormalFn, UnsafeFn};\n-use syntax::ast::{Onceness, FnStyle};\n+use syntax::ast::{Onceness, Unsafety};\n use syntax::ast::{MutMutable, MutImmutable};\n use util::ppaux::mt_to_string;\n use util::ppaux::Repr;\n@@ -77,10 +76,10 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n         self.glb().tys(a, b)\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n         match (a, b) {\n-          (UnsafeFn, _) | (_, UnsafeFn) => Ok(UnsafeFn),\n-          (NormalFn, NormalFn) => Ok(NormalFn),\n+          (Unsafety::Unsafe, _) | (_, Unsafety::Unsafe) => Ok(Unsafety::Unsafe),\n+          (Unsafety::Normal, Unsafety::Normal) => Ok(Unsafety::Normal),\n         }\n     }\n "}, {"sha": "00c79bc726cf699bdddc2415a66c5bafd0e5dc3f", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -23,7 +23,7 @@ use middle::ty::{mod, Ty};\n use middle::ty::TyVar;\n use util::ppaux::{Repr};\n \n-use syntax::ast::{Onceness, FnStyle, MutImmutable, MutMutable};\n+use syntax::ast::{Onceness, MutImmutable, MutMutable, Unsafety};\n \n \n /// \"Greatest lower bound\" (common subtype)\n@@ -93,9 +93,9 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         Ok(*a) // return is meaningless in sub, just return *a\n     }\n \n-    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<'tcx, FnStyle> {\n-        self.lub().fn_styles(a, b).compare(b, || {\n-            ty::terr_fn_style_mismatch(expected_found(self, a, b))\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n+        self.lub().unsafeties(a, b).compare(b, || {\n+            ty::terr_unsafety_mismatch(expected_found(self, a, b))\n         })\n     }\n "}, {"sha": "8b31132f7362184e196409e60b7ebc657efe0909", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -791,7 +791,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // provide an impl, but only for suitable `fn` pointers\n             ty::ty_bare_fn(ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     inputs: _,\n@@ -1505,7 +1505,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         let sig = match self_ty.sty {\n             ty::ty_bare_fn(ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 ref sig\n             }) => {"}, {"sha": "9673b9ab5863012c0199fec600a558526e14cddb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -80,7 +80,7 @@ use std::rc::Rc;\n use std::collections::enum_set::{EnumSet, CLike};\n use std::collections::hash_map::{HashMap, Occupied, Vacant};\n use syntax::abi;\n-use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n+use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, Ident, ItemTrait, LOCAL_CRATE};\n use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};\n use syntax::ast::{Onceness, StmtExpr, StmtSemi, StructField, UnnamedField};\n use syntax::ast::{Visibility};\n@@ -908,14 +908,14 @@ pub fn type_escapes_depth(ty: Ty, depth: uint) -> bool {\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct BareFnTy<'tcx> {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub abi: abi::Abi,\n     pub sig: FnSig<'tcx>,\n }\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ClosureTy<'tcx> {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub onceness: ast::Onceness,\n     pub store: TraitStore,\n     pub bounds: ExistentialBounds,\n@@ -1380,7 +1380,7 @@ impl<T:Copy> Copy for expected_found<T> {}\n #[deriving(Clone, Show)]\n pub enum type_err<'tcx> {\n     terr_mismatch,\n-    terr_fn_style_mismatch(expected_found<FnStyle>),\n+    terr_unsafety_mismatch(expected_found<ast::Unsafety>),\n     terr_onceness_mismatch(expected_found<Onceness>),\n     terr_abi_mismatch(expected_found<abi::Abi>),\n     terr_mutability,\n@@ -2354,7 +2354,7 @@ pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,\n     let input_args = input_tys.iter().map(|ty| *ty).collect();\n     mk_bare_fn(cx,\n                BareFnTy {\n-                   fn_style: ast::NormalFn,\n+                   unsafety: ast::Unsafety::Normal,\n                    abi: abi::Rust,\n                    sig: FnSig {\n                     inputs: input_args,\n@@ -3994,7 +3994,7 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n \n                             ty::mk_closure(\n                                 cx,\n-                                ty::ClosureTy {fn_style: b.fn_style,\n+                                ty::ClosureTy {unsafety: b.unsafety,\n                                                onceness: ast::Many,\n                                                store: store,\n                                                bounds: bounds,\n@@ -4404,7 +4404,7 @@ pub fn type_err_to_str<'tcx>(cx: &ctxt<'tcx>, err: &type_err<'tcx>) -> String {\n     match *err {\n         terr_cyclic_ty => \"cyclic type of infinite size\".to_string(),\n         terr_mismatch => \"types differ\".to_string(),\n-        terr_fn_style_mismatch(values) => {\n+        terr_unsafety_mismatch(values) => {\n             format!(\"expected {} fn, found {} fn\",\n                     values.expected.to_string(),\n                     values.found.to_string())\n@@ -5871,12 +5871,12 @@ pub fn hash_crate_independent(tcx: &ctxt, ty: Ty, svh: &Svh) -> u64 {\n             }\n             ty_bare_fn(ref b) => {\n                 byte!(14);\n-                hash!(b.fn_style);\n+                hash!(b.unsafety);\n                 hash!(b.abi);\n             }\n             ty_closure(ref c) => {\n                 byte!(15);\n-                hash!(c.fn_style);\n+                hash!(c.unsafety);\n                 hash!(c.onceness);\n                 hash!(c.bounds);\n                 match c.store {"}, {"sha": "5d0c584864dbcdd5415c9cd2539139ed598ccf22", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -563,7 +563,7 @@ pub fn super_fold_bare_fn_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n {\n     ty::BareFnTy { sig: fty.sig.fold_with(this),\n                    abi: fty.abi,\n-                   fn_style: fty.fn_style }\n+                   unsafety: fty.unsafety }\n }\n \n pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n@@ -573,7 +573,7 @@ pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n     ty::ClosureTy {\n         store: fty.store.fold_with(this),\n         sig: fty.sig.fold_with(this),\n-        fn_style: fty.fn_style,\n+        unsafety: fty.unsafety,\n         onceness: fty.onceness,\n         bounds: fty.bounds.fold_with(this),\n         abi: fty.abi,"}, {"sha": "74e312803f31ae03856e09024959d31f1db3d3bc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -259,16 +259,16 @@ pub fn trait_ref_to_string<'tcx>(cx: &ctxt<'tcx>,\n \n pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n     fn bare_fn_to_string<'tcx>(cx: &ctxt<'tcx>,\n-                               fn_style: ast::FnStyle,\n+                               unsafety: ast::Unsafety,\n                                abi: abi::Abi,\n                                ident: Option<ast::Ident>,\n                                sig: &ty::FnSig<'tcx>)\n                                -> String {\n         let mut s = String::new();\n-        match fn_style {\n-            ast::NormalFn => {}\n-            _ => {\n-                s.push_str(fn_style.to_string().as_slice());\n+        match unsafety {\n+            ast::Unsafety::Normal => {}\n+            ast::Unsafety::Unsafe => {\n+                s.push_str(unsafety.to_string().as_slice());\n                 s.push(' ');\n             }\n         };\n@@ -302,10 +302,10 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             }\n         }\n \n-        match cty.fn_style {\n-            ast::NormalFn => {}\n-            _ => {\n-                s.push_str(cty.fn_style.to_string().as_slice());\n+        match cty.unsafety {\n+            ast::Unsafety::Normal => {}\n+            ast::Unsafety::Unsafe => {\n+                s.push_str(cty.unsafety.to_string().as_slice());\n                 s.push(' ');\n             }\n         };\n@@ -414,7 +414,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             closure_to_string(cx, &**f)\n         }\n         ty_bare_fn(ref f) => {\n-            bare_fn_to_string(cx, f.fn_style, f.abi, None, &f.sig)\n+            bare_fn_to_string(cx, f.unsafety, f.abi, None, &f.sig)\n         }\n         ty_infer(infer_ty) => infer_ty_to_string(cx, infer_ty),\n         ty_err => \"[type error]\".to_string(),\n@@ -1001,8 +1001,8 @@ impl<'tcx> Repr<'tcx> for ast::Visibility {\n \n impl<'tcx> Repr<'tcx> for ty::BareFnTy<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"BareFnTy {{fn_style: {}, abi: {}, sig: {}}}\",\n-                self.fn_style,\n+        format!(\"BareFnTy {{unsafety: {}, abi: {}, sig: {}}}\",\n+                self.unsafety,\n                 self.abi.to_string(),\n                 self.sig.repr(tcx))\n     }"}, {"sha": "6a50af3bc799208adcda6d2d57a466c9058f9415", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n                      -> Ty<'tcx>\n     {\n         ty::mk_closure(self.infcx.tcx, ty::ClosureTy {\n-            fn_style: ast::NormalFn,\n+            unsafety: ast::Unsafety::Normal,\n             onceness: ast::Many,\n             store: ty::RegionTraitStore(region_bound, ast::MutMutable),\n             bounds: ty::region_existential_bound(region_bound),"}, {"sha": "81d44d84414798e7e402b27e75950f188bf8fe00", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -278,7 +278,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n     let (input_tys, output_ty) =\n         match bare_fn_ty.sty {\n-            ty::ty_bare_fn(ty::BareFnTy { fn_style: ast::NormalFn,\n+            ty::ty_bare_fn(ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                           abi: synabi::Rust,\n                                           sig: ty::FnSig { inputs: ref input_tys,\n                                                            output: output_ty,\n@@ -294,7 +294,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n         };\n     let tuple_input_ty = ty::mk_tup(tcx, input_tys.to_vec());\n     let tuple_fn_ty = ty::mk_bare_fn(tcx,\n-                                     ty::BareFnTy { fn_style: ast::NormalFn,\n+                                     ty::BareFnTy { unsafety: ast::Unsafety::Normal,\n                                                     abi: synabi::RustCall,\n                                                     sig: ty::FnSig {\n                                                         inputs: vec![bare_fn_ty_ref,"}, {"sha": "3f8c951786dfaff5c6e470cd0e87c144730973a0", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -433,8 +433,8 @@ impl<'tcx> TypeMap<'tcx> {\n                                        &trait_data.principal.substs,\n                                        &mut unique_type_id);\n             },\n-            ty::ty_bare_fn(ty::BareFnTy{ fn_style, abi, ref sig } ) => {\n-                if fn_style == ast::UnsafeFn {\n+            ty::ty_bare_fn(ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+                if unsafety == ast::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n                 }\n \n@@ -551,13 +551,13 @@ impl<'tcx> TypeMap<'tcx> {\n                                               cx: &CrateContext<'a, 'tcx>,\n                                               closure_ty: ty::ClosureTy<'tcx>,\n                                               unique_type_id: &mut String) {\n-        let ty::ClosureTy { fn_style,\n+        let ty::ClosureTy { unsafety,\n                             onceness,\n                             store,\n                             ref bounds,\n                             ref sig,\n                             abi: _ } = closure_ty;\n-        if fn_style == ast::UnsafeFn {\n+        if unsafety == ast::Unsafety::Unsafe {\n             unique_type_id.push_str(\"unsafe \");\n         }\n \n@@ -3767,8 +3767,8 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, trait_data.principal.def_id, false, output);\n             push_type_params(cx, &trait_data.principal.substs, output);\n         },\n-        ty::ty_bare_fn(ty::BareFnTy{ fn_style, abi, ref sig } ) => {\n-            if fn_style == ast::UnsafeFn {\n+        ty::ty_bare_fn(ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n+            if unsafety == ast::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }\n \n@@ -3810,13 +3810,13 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         },\n-        ty::ty_closure(box ty::ClosureTy { fn_style,\n+        ty::ty_closure(box ty::ClosureTy { unsafety,\n                                            onceness,\n                                            store,\n                                            ref sig,\n                                            .. // omitting bounds ...\n                                            }) => {\n-            if fn_style == ast::UnsafeFn {\n+            if unsafety == ast::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }\n "}, {"sha": "b3272a14753511f1e8fe6fd81f0e59eb723abbff", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -924,7 +924,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                     tcx.sess.span_err(ast_ty.span,\n                                       \"variadic function must have C calling convention\");\n                 }\n-                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, bf.fn_style, bf.abi, &*bf.decl))\n+                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl))\n             }\n             ast::TyClosure(ref f) => {\n                 // Use corresponding trait store to figure out default bounds\n@@ -935,7 +935,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                                      None,\n                                                      f.bounds.as_slice());\n                 let fn_decl = ty_of_closure(this,\n-                                            f.fn_style,\n+                                            f.unsafety,\n                                             f.onceness,\n                                             bounds,\n                                             ty::RegionTraitStore(\n@@ -1082,7 +1082,7 @@ struct SelfInfo<'a, 'tcx> {\n \n pub fn ty_of_method<'tcx, AC: AstConv<'tcx>>(\n                     this: &AC,\n-                    fn_style: ast::FnStyle,\n+                    unsafety: ast::Unsafety,\n                     untransformed_self_ty: Ty<'tcx>,\n                     explicit_self: &ast::ExplicitSelf,\n                     decl: &ast::FnDecl,\n@@ -1094,22 +1094,22 @@ pub fn ty_of_method<'tcx, AC: AstConv<'tcx>>(\n     });\n     let (bare_fn_ty, optional_explicit_self_category) =\n         ty_of_method_or_bare_fn(this,\n-                                fn_style,\n+                                unsafety,\n                                 abi,\n                                 self_info,\n                                 decl);\n     (bare_fn_ty, optional_explicit_self_category.unwrap())\n }\n \n-pub fn ty_of_bare_fn<'tcx, AC: AstConv<'tcx>>(this: &AC, fn_style: ast::FnStyle, abi: abi::Abi,\n+pub fn ty_of_bare_fn<'tcx, AC: AstConv<'tcx>>(this: &AC, unsafety: ast::Unsafety, abi: abi::Abi,\n                                               decl: &ast::FnDecl) -> ty::BareFnTy<'tcx> {\n-    let (bare_fn_ty, _) = ty_of_method_or_bare_fn(this, fn_style, abi, None, decl);\n+    let (bare_fn_ty, _) = ty_of_method_or_bare_fn(this, unsafety, abi, None, decl);\n     bare_fn_ty\n }\n \n fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n                            this: &AC,\n-                           fn_style: ast::FnStyle,\n+                           unsafety: ast::Unsafety,\n                            abi: abi::Abi,\n                            opt_self_info: Option<SelfInfo<'a, 'tcx>>,\n                            decl: &ast::FnDecl)\n@@ -1207,7 +1207,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx, AC: AstConv<'tcx>>(\n     };\n \n     (ty::BareFnTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         abi: abi,\n         sig: ty::FnSig {\n             inputs: self_and_input_tys,\n@@ -1301,7 +1301,7 @@ fn determine_explicit_self_category<'a, 'tcx, AC: AstConv<'tcx>,\n \n pub fn ty_of_closure<'tcx, AC: AstConv<'tcx>>(\n     this: &AC,\n-    fn_style: ast::FnStyle,\n+    unsafety: ast::Unsafety,\n     onceness: ast::Onceness,\n     bounds: ty::ExistentialBounds,\n     store: ty::TraitStore,\n@@ -1346,7 +1346,7 @@ pub fn ty_of_closure<'tcx, AC: AstConv<'tcx>>(\n     debug!(\"ty_of_closure: output_ty={}\", output_ty.repr(this.tcx()));\n \n     ty::ClosureTy {\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         onceness: onceness,\n         store: store,\n         bounds: bounds,"}, {"sha": "e3fec2c8b1df2623bf936f54040d6fbed6fdb374", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -89,7 +89,7 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     let mut fn_ty = astconv::ty_of_closure(\n         fcx,\n-        ast::NormalFn,\n+        ast::Unsafety::Normal,\n         ast::Many,\n \n         // The `RegionTraitStore` and region_existential_bounds\n@@ -119,7 +119,7 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     fcx.write_ty(expr.id, closure_type);\n \n     check_fn(fcx.ccx,\n-             ast::NormalFn,\n+             ast::Unsafety::Normal,\n              expr.id,\n              &fn_ty.sig,\n              decl,\n@@ -304,7 +304,7 @@ fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     // construct the function type\n     let fn_ty = astconv::ty_of_closure(fcx,\n-                                       ast::NormalFn,\n+                                       ast::Unsafety::Normal,\n                                        expected_onceness,\n                                        expected_bounds,\n                                        store,\n@@ -321,9 +321,9 @@ fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     // style inferred for it, then check it under its parent's style.\n     // Otherwise, use its own\n     let (inherited_style, inherited_style_id) = match store {\n-        ty::RegionTraitStore(..) => (fcx.ps.borrow().fn_style,\n+        ty::RegionTraitStore(..) => (fcx.ps.borrow().unsafety,\n                                      fcx.ps.borrow().def),\n-        ty::UniqTraitStore => (ast::NormalFn, expr.id)\n+        ty::UniqTraitStore => (ast::Unsafety::Normal, expr.id)\n     };\n \n     check_fn(fcx.ccx,"}, {"sha": "7463652a931360a2320c9d30ed5f1f6e73c5c162", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -115,7 +115,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         // Create the final `MethodCallee`.\n         let fty = ty::mk_bare_fn(self.tcx(), ty::BareFnTy {\n             sig: method_sig,\n-            fn_style: pick.method_ty.fty.fn_style,\n+            unsafety: pick.method_ty.fty.unsafety,\n             abi: pick.method_ty.fty.abi.clone(),\n         });\n         let callee = MethodCallee {"}, {"sha": "d97a9c9e39b19c9844032053135131fca7c85aeb", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -205,7 +205,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     let transformed_self_ty = fn_sig.inputs[0];\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n         sig: fn_sig,\n-        fn_style: bare_fn_ty.fn_style,\n+        unsafety: bare_fn_ty.unsafety,\n         abi: bare_fn_ty.abi.clone(),\n     });\n "}, {"sha": "5b1ca8fc1c0e6ed86b4e6a50c1b217d63ac2e40f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -180,35 +180,33 @@ enum Expectation<'tcx> {\n \n impl<'tcx> Copy for Expectation<'tcx> {}\n \n-#[deriving(Clone)]\n-pub struct FnStyleState {\n+#[deriving(Copy, Clone)]\n+pub struct UnsafetyState {\n     pub def: ast::NodeId,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     from_fn: bool\n }\n \n-impl Copy for FnStyleState {}\n-\n-impl FnStyleState {\n-    pub fn function(fn_style: ast::FnStyle, def: ast::NodeId) -> FnStyleState {\n-        FnStyleState { def: def, fn_style: fn_style, from_fn: true }\n+impl UnsafetyState {\n+    pub fn function(unsafety: ast::Unsafety, def: ast::NodeId) -> UnsafetyState {\n+        UnsafetyState { def: def, unsafety: unsafety, from_fn: true }\n     }\n \n-    pub fn recurse(&mut self, blk: &ast::Block) -> FnStyleState {\n-        match self.fn_style {\n+    pub fn recurse(&mut self, blk: &ast::Block) -> UnsafetyState {\n+        match self.unsafety {\n             // If this unsafe, then if the outer function was already marked as\n             // unsafe we shouldn't attribute the unsafe'ness to the block. This\n             // way the block can be warned about instead of ignoring this\n             // extraneous block (functions are never warned about).\n-            ast::UnsafeFn if self.from_fn => *self,\n+            ast::Unsafety::Unsafe if self.from_fn => *self,\n \n-            fn_style => {\n-                let (fn_style, def) = match blk.rules {\n-                    ast::UnsafeBlock(..) => (ast::UnsafeFn, blk.id),\n-                    ast::DefaultBlock => (fn_style, self.def),\n+            unsafety => {\n+                let (unsafety, def) = match blk.rules {\n+                    ast::UnsafeBlock(..) => (ast::Unsafety::Unsafe, blk.id),\n+                    ast::DefaultBlock => (unsafety, self.def),\n                 };\n-                FnStyleState{ def: def,\n-                             fn_style: fn_style,\n+                UnsafetyState{ def: def,\n+                             unsafety: unsafety,\n                              from_fn: false }\n             }\n         }\n@@ -240,7 +238,7 @@ pub struct FnCtxt<'a, 'tcx: 'a> {\n \n     ret_ty: ty::FnOutput<'tcx>,\n \n-    ps: RefCell<FnStyleState>,\n+    ps: RefCell<UnsafetyState>,\n \n     inh: &'a Inherited<'a, 'tcx>,\n \n@@ -312,7 +310,7 @@ pub fn blank_fn_ctxt<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n         writeback_errors: Cell::new(false),\n         err_count_on_creation: ccx.tcx.sess.err_count(),\n         ret_ty: rty,\n-        ps: RefCell::new(FnStyleState::function(ast::NormalFn, 0)),\n+        ps: RefCell::new(UnsafetyState::function(ast::Unsafety::Normal, 0)),\n         inh: inh,\n         ccx: ccx\n     }\n@@ -374,7 +372,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     match fty.sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             let inh = Inherited::new(ccx.tcx, param_env);\n-            let fcx = check_fn(ccx, fn_ty.fn_style, id, &fn_ty.sig,\n+            let fcx = check_fn(ccx, fn_ty.unsafety, id, &fn_ty.sig,\n                                decl, id, body, &inh);\n \n             vtable::select_all_fcx_obligations_or_error(&fcx);\n@@ -476,8 +474,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for GatherLocalsVisitor<'a, 'tcx> {\n /// * ...\n /// * inherited: other fields inherited from the enclosing fn (if any)\n fn check_fn<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n-                      fn_style: ast::FnStyle,\n-                      fn_style_id: ast::NodeId,\n+                      unsafety: ast::Unsafety,\n+                      unsafety_id: ast::NodeId,\n                       fn_sig: &ty::FnSig<'tcx>,\n                       decl: &ast::FnDecl,\n                       fn_id: ast::NodeId,\n@@ -506,7 +504,7 @@ fn check_fn<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n         writeback_errors: Cell::new(false),\n         err_count_on_creation: err_count_on_creation,\n         ret_ty: ret_ty,\n-        ps: RefCell::new(FnStyleState::function(fn_style, fn_style_id)),\n+        ps: RefCell::new(UnsafetyState::function(unsafety, unsafety_id)),\n         inh: inherited,\n         ccx: ccx\n     };\n@@ -4493,8 +4491,8 @@ fn check_block_with_expected<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                        expected: Expectation<'tcx>) {\n     let prev = {\n         let mut fcx_ps = fcx.ps.borrow_mut();\n-        let fn_style_state = fcx_ps.recurse(blk);\n-        replace(&mut *fcx_ps, fn_style_state)\n+        let unsafety_state = fcx_ps.recurse(blk);\n+        replace(&mut *fcx_ps, unsafety_state)\n     };\n \n     let mut warned = false;\n@@ -5696,7 +5694,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n         (n_tps, inputs, ty::FnConverging(output))\n     };\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-        fn_style: ast::UnsafeFn,\n+        unsafety: ast::Unsafety::Unsafe,\n         abi: abi::RustIntrinsic,\n         sig: FnSig {\n             inputs: inputs,"}, {"sha": "0bb0f95a66b5cf55ebbdeb6a68be24005b2a49c6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -277,7 +277,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     &m.explicit_self,\n                                     m.abi,\n                                     &m.generics,\n-                                    &m.fn_style,\n+                                    &m.unsafety,\n                                     &*m.decl)\n                             }\n                             ast::ProvidedMethod(ref m) => {\n@@ -291,7 +291,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     m.pe_explicit_self(),\n                                     m.pe_abi(),\n                                     m.pe_generics(),\n-                                    &m.pe_fn_style(),\n+                                    &m.pe_unsafety(),\n                                     &*m.pe_fn_decl())\n                             }\n                             ast::TypeTraitItem(ref at) => {\n@@ -366,7 +366,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                            m_explicit_self: &ast::ExplicitSelf,\n                                            m_abi: abi::Abi,\n                                            m_generics: &ast::Generics,\n-                                           m_fn_style: &ast::FnStyle,\n+                                           m_unsafety: &ast::Unsafety,\n                                            m_decl: &ast::FnDecl)\n                                            -> ty::Method<'tcx> {\n         let ty_generics =\n@@ -386,7 +386,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             let trait_self_ty = ty::mk_self_type(tmcx.tcx(),\n                                                  local_def(trait_id));\n             astconv::ty_of_method(&tmcx,\n-                                  *m_fn_style,\n+                                  *m_unsafety,\n                                   trait_self_ty,\n                                   m_explicit_self,\n                                   m_decl,\n@@ -572,7 +572,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                     method_generics: &m_ty_generics,\n                 };\n                 astconv::ty_of_method(&imcx,\n-                                      m.pe_fn_style(),\n+                                      m.pe_unsafety(),\n                                       untransformed_rcvr_ty,\n                                       m.pe_explicit_self(),\n                                       &*m.pe_fn_decl(),\n@@ -586,7 +586,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                     method_generics: &m_ty_generics,\n                 };\n                 astconv::ty_of_method(&tmcx,\n-                                      m.pe_fn_style(),\n+                                      m.pe_unsafety(),\n                                       untransformed_rcvr_ty,\n                                       m.pe_explicit_self(),\n                                       &*m.pe_fn_decl(),\n@@ -1446,7 +1446,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n             tcx.tcache.borrow_mut().insert(local_def(it.id), pty.clone());\n             return pty;\n         }\n-        ast::ItemFn(ref decl, fn_style, abi, ref generics, _) => {\n+        ast::ItemFn(ref decl, unsafety, abi, ref generics, _) => {\n             let ty_generics = ty_generics_for_fn_or_method(\n                 ccx,\n                 generics,\n@@ -1457,7 +1457,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n                     ccx: ccx,\n                     generics: &ty_generics,\n                 };\n-                astconv::ty_of_bare_fn(&fcx, fn_style, abi, &**decl)\n+                astconv::ty_of_bare_fn(&fcx, unsafety, abi, &**decl)\n             };\n             let pty = Polytype {\n                 generics: ty_generics,\n@@ -2151,7 +2151,7 @@ pub fn ty_of_foreign_fn_decl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         ccx.tcx,\n         ty::BareFnTy {\n             abi: abi,\n-            fn_style: ast::UnsafeFn,\n+            unsafety: ast::Unsafety::Unsafe,\n             sig: ty::FnSig {inputs: input_tys,\n                             output: output,\n                             variadic: decl.variadic}"}, {"sha": "d55d642f746514709a6616e3a3fb7f3bcb5164cf", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -226,7 +226,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     inputs: Vec::new(),\n@@ -274,7 +274,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             }\n \n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-                fn_style: ast::NormalFn,\n+                unsafety: ast::Unsafety::Normal,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     inputs: vec!("}, {"sha": "75cf0c7a26b59dd9fc652024e303908f73f71953", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -171,13 +171,13 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::Function {\n     let t = ty::lookup_item_type(tcx, did);\n     let (decl, style) = match t.ty.sty {\n-        ty::ty_bare_fn(ref f) => ((did, &f.sig).clean(cx), f.fn_style),\n+        ty::ty_bare_fn(ref f) => ((did, &f.sig).clean(cx), f.unsafety),\n         _ => panic!(\"bad function\"),\n     };\n     clean::Function {\n         decl: decl,\n         generics: (&t.generics, subst::FnSpace).clean(cx),\n-        fn_style: style,\n+        unsafety: style,\n     }\n }\n \n@@ -299,10 +299,10 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n                 let mut item = method.clean(cx);\n                 item.inner = match item.inner.clone() {\n                     clean::TyMethodItem(clean::TyMethod {\n-                        fn_style, decl, self_, generics\n+                        unsafety, decl, self_, generics\n                     }) => {\n                         clean::MethodItem(clean::Method {\n-                            fn_style: fn_style,\n+                            unsafety: unsafety,\n                             decl: decl,\n                             self_: self_,\n                             generics: generics,"}, {"sha": "1d0929746c2f8a81d3c2fd44c6abbc28b40e43d4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -740,7 +740,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n }\n \n@@ -768,7 +768,7 @@ impl Clean<Item> for ast::Method {\n             inner: MethodItem(Method {\n                 generics: self.pe_generics().clean(cx),\n                 self_: self.pe_explicit_self().node.clean(cx),\n-                fn_style: self.pe_fn_style().clone(),\n+                unsafety: self.pe_unsafety().clone(),\n                 decl: decl,\n             }),\n         }\n@@ -777,7 +777,7 @@ impl Clean<Item> for ast::Method {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyMethod {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -804,7 +804,7 @@ impl Clean<Item> for ast::TypeMethod {\n             visibility: None,\n             stability: get_stability(cx, ast_util::local_def(self.id)),\n             inner: TyMethodItem(TyMethod {\n-                fn_style: self.fn_style.clone(),\n+                unsafety: self.unsafety.clone(),\n                 decl: decl,\n                 self_: self.explicit_self.node.clean(cx),\n                 generics: self.generics.clean(cx),\n@@ -838,7 +838,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf_ {\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -853,7 +853,7 @@ impl Clean<Item> for doctree::Function {\n             inner: FunctionItem(Function {\n                 decl: self.decl.clean(cx),\n                 generics: self.generics.clean(cx),\n-                fn_style: self.fn_style,\n+                unsafety: self.unsafety,\n             }),\n         }\n     }\n@@ -864,7 +864,7 @@ pub struct ClosureDecl {\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: FnDecl,\n     pub onceness: ast::Onceness,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub bounds: Vec<TyParamBound>,\n }\n \n@@ -874,7 +874,7 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n             lifetimes: self.lifetimes.clean(cx),\n             decl: self.decl.clean(cx),\n             onceness: self.onceness,\n-            fn_style: self.fn_style,\n+            unsafety: self.unsafety,\n             bounds: self.bounds.clean(cx)\n         }\n     }\n@@ -1111,7 +1111,7 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n             attrs: inline::load_attrs(cx, cx.tcx(), self.def_id),\n             source: Span::empty(),\n             inner: TyMethodItem(TyMethod {\n-                fn_style: self.fty.fn_style,\n+                unsafety: self.fty.unsafety,\n                 generics: (&self.generics, subst::FnSpace).clean(cx),\n                 self_: self_,\n                 decl: (self.def_id, &sig).clean(cx),\n@@ -1364,7 +1364,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 type_: box mt.ty.clean(cx),\n             },\n             ty::ty_bare_fn(ref fty) => BareFunction(box BareFunctionDecl {\n-                fn_style: fty.fn_style,\n+                unsafety: fty.unsafety,\n                 generics: Generics {\n                     lifetimes: Vec::new(),\n                     type_params: Vec::new(),\n@@ -1378,7 +1378,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     lifetimes: Vec::new(), // FIXME: this looks wrong...\n                     decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n                     onceness: fty.onceness,\n-                    fn_style: fty.fn_style,\n+                    unsafety: fty.unsafety,\n                     bounds: fty.bounds.clean(cx),\n                 };\n                 match fty.store {\n@@ -1789,7 +1789,7 @@ impl Clean<Item> for doctree::Typedef {\n \n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub struct BareFunctionDecl {\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n     pub decl: FnDecl,\n     pub abi: String,\n@@ -1798,7 +1798,7 @@ pub struct BareFunctionDecl {\n impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     fn clean(&self, cx: &DocContext) -> BareFunctionDecl {\n         BareFunctionDecl {\n-            fn_style: self.fn_style,\n+            unsafety: self.unsafety,\n             generics: Generics {\n                 lifetimes: self.lifetimes.clean(cx),\n                 type_params: Vec::new(),\n@@ -2071,7 +2071,7 @@ impl Clean<Item> for ast::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl: decl.clean(cx),\n                     generics: generics.clean(cx),\n-                    fn_style: ast::UnsafeFn,\n+                    unsafety: ast::Unsafety::Unsafe,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "a25d4352430d40dfc6d79663a6da151fe8ee2269", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -129,7 +129,7 @@ pub struct Function {\n     pub name: Ident,\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n-    pub fn_style: ast::FnStyle,\n+    pub unsafety: ast::Unsafety,\n     pub whence: Span,\n     pub generics: ast::Generics,\n }"}, {"sha": "6a2929beca22e7f5469daf5111a5f8b895f44358", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -32,7 +32,7 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n-pub struct FnStyleSpace(pub ast::FnStyle);\n+pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n@@ -49,7 +49,7 @@ pub struct WhereClause<'a>(pub &'a clean::Generics);\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n impl Copy for VisSpace {}\n-impl Copy for FnStyleSpace {}\n+impl Copy for UnsafetySpace {}\n impl Copy for MutableSpace {}\n impl Copy for RawMutableSpace {}\n \n@@ -59,9 +59,9 @@ impl VisSpace {\n     }\n }\n \n-impl FnStyleSpace {\n-    pub fn get(&self) -> ast::FnStyle {\n-        let FnStyleSpace(v) = *self; v\n+impl UnsafetySpace {\n+    pub fn get(&self) -> ast::Unsafety {\n+        let UnsafetySpace(v) = *self; v\n     }\n }\n \n@@ -404,7 +404,7 @@ impl fmt::Show for clean::Type {\n             clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n             clean::Closure(ref decl) => {\n                 write!(f, \"{style}{lifetimes}|{args}|{bounds}{arrow}\",\n-                       style = FnStyleSpace(decl.fn_style),\n+                       style = UnsafetySpace(decl.unsafety),\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n@@ -433,7 +433,7 @@ impl fmt::Show for clean::Type {\n             }\n             clean::Proc(ref decl) => {\n                 write!(f, \"{style}{lifetimes}proc({args}){bounds}{arrow}\",\n-                       style = FnStyleSpace(decl.fn_style),\n+                       style = UnsafetySpace(decl.unsafety),\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n@@ -454,7 +454,7 @@ impl fmt::Show for clean::Type {\n             }\n             clean::BareFunction(ref decl) => {\n                 write!(f, \"{}{}fn{}{}\",\n-                       FnStyleSpace(decl.fn_style),\n+                       UnsafetySpace(decl.unsafety),\n                        match decl.abi.as_slice() {\n                            \"\" => \" extern \".to_string(),\n                            \"\\\"Rust\\\"\" => \"\".to_string(),\n@@ -584,11 +584,11 @@ impl fmt::Show for VisSpace {\n     }\n }\n \n-impl fmt::Show for FnStyleSpace {\n+impl fmt::Show for UnsafetySpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n-            ast::UnsafeFn => write!(f, \"unsafe \"),\n-            ast::NormalFn => Ok(())\n+            ast::Unsafety::Unsafe => write!(f, \"unsafe \"),\n+            ast::Unsafety::Normal => Ok(())\n         }\n     }\n }"}, {"sha": "54b7ead5469a5ad035bf66e0f49c00eca03c1fb1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -58,7 +58,7 @@ use rustc::util::nodemap::NodeSet;\n use clean;\n use doctree;\n use fold::DocFolder;\n-use html::format::{VisSpace, Method, FnStyleSpace, MutableSpace, Stability};\n+use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace, Stability};\n use html::format::{ConciseStability, TyParamBounds, WhereClause};\n use html::highlight;\n use html::item_type::ItemType;\n@@ -1664,10 +1664,10 @@ fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust fn'>{vis}{fn_style}fn \\\n+    try!(write!(w, \"<pre class='rust fn'>{vis}{unsafety}fn \\\n                     {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(it.visibility),\n-           fn_style = FnStyleSpace(f.fn_style),\n+           unsafety = UnsafetySpace(f.unsafety),\n            name = it.name.as_ref().unwrap().as_slice(),\n            generics = f.generics,\n            where_clause = WhereClause(&f.generics),\n@@ -1813,13 +1813,13 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n-    fn method(w: &mut fmt::Formatter, it: &clean::Item, fn_style: ast::FnStyle,\n+    fn method(w: &mut fmt::Formatter, it: &clean::Item, unsafety: ast::Unsafety,\n            g: &clean::Generics, selfty: &clean::SelfTy,\n            d: &clean::FnDecl) -> fmt::Result {\n         write!(w, \"{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n-               match fn_style {\n-                   ast::UnsafeFn => \"unsafe \",\n+               match unsafety {\n+                   ast::Unsafety::Unsafe => \"unsafe \",\n                    _ => \"\",\n                },\n                ty = shortty(it),\n@@ -1841,10 +1841,10 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            method(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n         }\n         clean::AssociatedTypeItem(ref typ) => {\n             assoc_type(w, meth, typ)"}, {"sha": "1706df10d9a183438895b14333b05f3ea7a7afe0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit_fn(&mut self, item: &ast::Item,\n                     name: ast::Ident, fd: &ast::FnDecl,\n-                    fn_style: &ast::FnStyle, _abi: &abi::Abi,\n+                    unsafety: &ast::Unsafety, _abi: &abi::Abi,\n                     gen: &ast::Generics) -> Function {\n         debug!(\"Visiting fn\");\n         Function {\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: name,\n             whence: item.span,\n             generics: gen.clone(),\n-            fn_style: *fn_style,\n+            unsafety: *unsafety,\n         }\n     }\n "}, {"sha": "812b1baa8f74fac21d3b789f1b196c05a03bb18d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -20,7 +20,6 @@ pub use self::Decl_::*;\n pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FloatTy::*;\n-pub use self::FnStyle::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n pub use self::ImplItem::*;\n@@ -1027,7 +1026,7 @@ pub struct TypeField {\n pub struct TypeMethod {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub fn_style: FnStyle,\n+    pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n     pub generics: Generics,\n@@ -1198,15 +1197,15 @@ impl fmt::Show for Onceness {\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct ClosureTy {\n     pub lifetimes: Vec<LifetimeDef>,\n-    pub fn_style: FnStyle,\n+    pub unsafety: Unsafety,\n     pub onceness: Onceness,\n     pub decl: P<FnDecl>,\n     pub bounds: TyParamBounds,\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct BareFnTy {\n-    pub fn_style: FnStyle,\n+    pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub lifetimes: Vec<LifetimeDef>,\n     pub decl: P<FnDecl>\n@@ -1304,21 +1303,17 @@ pub struct FnDecl {\n     pub variadic: bool\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n-pub enum FnStyle {\n-    /// Declared with \"unsafe fn\"\n-    UnsafeFn,\n-    /// Declared with \"fn\"\n-    NormalFn,\n+#[deriving(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+pub enum Unsafety {\n+    Unsafe,\n+    Normal,\n }\n \n-impl Copy for FnStyle {}\n-\n-impl fmt::Show for FnStyle {\n+impl fmt::Show for Unsafety {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            NormalFn => \"normal\".fmt(f),\n-            UnsafeFn => \"unsafe\".fmt(f),\n+            Unsafety::Normal => \"normal\".fmt(f),\n+            Unsafety::Unsafe => \"unsafe\".fmt(f),\n         }\n     }\n }\n@@ -1371,7 +1366,7 @@ pub enum Method_ {\n              Generics,\n              Abi,\n              ExplicitSelf,\n-             FnStyle,\n+             Unsafety,\n              P<FnDecl>,\n              P<Block>,\n              Visibility),\n@@ -1609,7 +1604,7 @@ pub struct Item {\n pub enum Item_ {\n     ItemStatic(P<Ty>, Mutability, P<Expr>),\n     ItemConst(P<Ty>, P<Expr>),\n-    ItemFn(P<FnDecl>, FnStyle, Abi, Generics, P<Block>),\n+    ItemFn(P<FnDecl>, Unsafety, Abi, Generics, P<Block>),\n     ItemMod(Mod),\n     ItemForeignMod(ForeignMod),\n     ItemTy(P<Ty>, Generics),"}, {"sha": "6decfd1c3addc22fa6d0e69563c2b48ef60843a9", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -122,7 +122,7 @@ impl<'a> Code<'a> {\n struct ItemFnParts<'a> {\n     ident:    ast::Ident,\n     decl:     &'a ast::FnDecl,\n-    style:    ast::FnStyle,\n+    unsafety: ast::Unsafety,\n     abi:      abi::Abi,\n     generics: &'a ast::Generics,\n     body:     &'a Block,\n@@ -182,7 +182,7 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> visit::FnKind<'a> {\n         let item = |: p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n-            visit::FkItemFn(p.ident, p.generics, p.style, p.abi)\n+            visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi)\n         };\n         let closure = |: _: ClosureParts| {\n             visit::FkFnBlock\n@@ -200,9 +200,9 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             ast_map::NodeItem(i) => match i.node {\n-                ast::ItemFn(ref decl, style, abi, ref generics, ref block) =>\n+                ast::ItemFn(ref decl, unsafety, abi, ref generics, ref block) =>\n                     item_fn(ItemFnParts{\n-                        ident: i.ident, decl: &**decl, style: style, body: &**block,\n+                        ident: i.ident, decl: &**decl, unsafety: unsafety, body: &**block,\n                         generics: generics, abi: abi, id: i.id, span: i.span\n                     }),\n                 _ => panic!(\"item FnLikeNode that is not fn-like\"),"}, {"sha": "63c95a976d47d1d17630e921842db38cec5a6e2a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -233,14 +233,14 @@ pub fn trait_method_to_ty_method(method: &Method) -> TypeMethod {\n                  ref generics,\n                  abi,\n                  ref explicit_self,\n-                 fn_style,\n+                 unsafety,\n                  ref decl,\n                  _,\n                  vis) => {\n             TypeMethod {\n                 ident: ident,\n                 attrs: method.attrs.clone(),\n-                fn_style: fn_style,\n+                unsafety: unsafety,\n                 decl: (*decl).clone(),\n                 generics: generics.clone(),\n                 explicit_self: (*explicit_self).clone(),\n@@ -722,7 +722,7 @@ pub trait PostExpansionMethod {\n     fn pe_generics<'a>(&'a self) -> &'a ast::Generics;\n     fn pe_abi(&self) -> Abi;\n     fn pe_explicit_self<'a>(&'a self) -> &'a ast::ExplicitSelf;\n-    fn pe_fn_style(&self) -> ast::FnStyle;\n+    fn pe_unsafety(&self) -> ast::Unsafety;\n     fn pe_fn_decl<'a>(&'a self) -> &'a ast::FnDecl;\n     fn pe_body<'a>(&'a self) -> &'a ast::Block;\n     fn pe_vis(&self) -> ast::Visibility;\n@@ -749,7 +749,7 @@ impl PostExpansionMethod for Method {\n     mf_method!(pe_abi,Abi,MethDecl(_,_,abi,_,_,_,_,_),abi)\n     mf_method!(pe_explicit_self,&'a ast::ExplicitSelf,\n                MethDecl(_,_,_,ref explicit_self,_,_,_,_),explicit_self)\n-    mf_method!(pe_fn_style,ast::FnStyle,MethDecl(_,_,_,_,fn_style,_,_,_),fn_style)\n+    mf_method!(pe_unsafety,ast::Unsafety,MethDecl(_,_,_,_,unsafety,_,_,_),unsafety)\n     mf_method!(pe_fn_decl,&'a ast::FnDecl,MethDecl(_,_,_,_,_,ref decl,_,_),&**decl)\n     mf_method!(pe_body,&'a ast::Block,MethDecl(_,_,_,_,_,_,ref body,_),&**body)\n     mf_method!(pe_vis,ast::Visibility,MethDecl(_,_,_,_,_,_,_,vis),vis)"}, {"sha": "d35091f8ab0aaf11cd205cd4f3b13a94c95bbad6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -969,7 +969,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   name,\n                   Vec::new(),\n                   ast::ItemFn(self.fn_decl(inputs, output),\n-                              ast::NormalFn,\n+                              ast::Unsafety::Normal,\n                               abi::Rust,\n                               generics,\n                               body))"}, {"sha": "820ff08a255398e2bbd7018a527d9c3df57cc019", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -684,7 +684,7 @@ impl<'a> MethodDef<'a> {\n                                 fn_generics,\n                                 abi,\n                                 explicit_self,\n-                                ast::NormalFn,\n+                                ast::Unsafety::Normal,\n                                 fn_decl,\n                                 body_block,\n                                 ast::Inherited)"}, {"sha": "c2c77e5a16c8ed8ec87c73b72b013504ee4f923b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -415,9 +415,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 TyRptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n             }\n             TyClosure(f) => {\n-                TyClosure(f.map(|ClosureTy {fn_style, onceness, bounds, decl, lifetimes}| {\n+                TyClosure(f.map(|ClosureTy {unsafety, onceness, bounds, decl, lifetimes}| {\n                     ClosureTy {\n-                        fn_style: fn_style,\n+                        unsafety: unsafety,\n                         onceness: onceness,\n                         bounds: fld.fold_bounds(bounds),\n                         decl: fld.fold_fn_decl(decl),\n@@ -426,9 +426,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 }))\n             }\n             TyBareFn(f) => {\n-                TyBareFn(f.map(|BareFnTy {lifetimes, fn_style, abi, decl}| BareFnTy {\n+                TyBareFn(f.map(|BareFnTy {lifetimes, unsafety, abi, decl}| BareFnTy {\n                     lifetimes: fld.fold_lifetime_defs(lifetimes),\n-                    fn_style: fn_style,\n+                    unsafety: unsafety,\n                     abi: abi,\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n@@ -983,10 +983,10 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n         ItemConst(t, e) => {\n             ItemConst(folder.fold_ty(t), folder.fold_expr(e))\n         }\n-        ItemFn(decl, fn_style, abi, generics, body) => {\n+        ItemFn(decl, unsafety, abi, generics, body) => {\n             ItemFn(\n                 folder.fold_fn_decl(decl),\n-                fn_style,\n+                unsafety,\n                 abi,\n                 folder.fold_generics(generics),\n                 folder.fold_block(body)\n@@ -1077,7 +1077,7 @@ pub fn noop_fold_type_method<T: Folder>(m: TypeMethod, fld: &mut T) -> TypeMetho\n         id,\n         ident,\n         attrs,\n-        fn_style,\n+        unsafety,\n         abi,\n         decl,\n         generics,\n@@ -1089,7 +1089,7 @@ pub fn noop_fold_type_method<T: Folder>(m: TypeMethod, fld: &mut T) -> TypeMetho\n         id: fld.new_id(id),\n         ident: fld.fold_ident(ident),\n         attrs: attrs.move_map(|a| fld.fold_attribute(a)),\n-        fn_style: fn_style,\n+        unsafety: unsafety,\n         abi: abi,\n         decl: fld.fold_fn_decl(decl),\n         generics: fld.fold_generics(generics),\n@@ -1211,15 +1211,15 @@ pub fn noop_fold_method<T: Folder>(m: P<Method>, folder: &mut T) -> SmallVector<\n                      generics,\n                      abi,\n                      explicit_self,\n-                     fn_style,\n+                     unsafety,\n                      decl,\n                      body,\n                      vis) => {\n                 MethDecl(folder.fold_ident(ident),\n                          folder.fold_generics(generics),\n                          abi,\n                          folder.fold_explicit_self(explicit_self),\n-                         fn_style,\n+                         unsafety,\n                          folder.fold_fn_decl(decl),\n                          folder.fold_block(body),\n                          vis)"}, {"sha": "d6f5d0e248a86d206be640d88a82d988bec4ef60", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -1062,7 +1062,7 @@ mod test {\n                                                   span:sp(15,15)})), // not sure\n                                 variadic: false\n                             }),\n-                                    ast::NormalFn,\n+                                    ast::Unsafety::Normal,\n                                     abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),"}, {"sha": "cc96d45a1c8dd3180f545f0ff0096dd3b0500ecc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -16,7 +16,7 @@ use self::ItemOrViewItem::*;\n use abi;\n use ast::{AssociatedType, BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n-use ast::{ProvidedMethod, Public, FnStyle};\n+use ast::{ProvidedMethod, Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n@@ -34,7 +34,7 @@ use ast::{Many};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n-use ast::{Ident, NormalFn, Inherited, ImplItem, Item, Item_, ItemStatic};\n+use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy};\n use ast::{LifetimeDef, Lit, Lit_};\n@@ -60,7 +60,7 @@ use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr, TyQPath\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n use ast::{TypeImplItem, TypeTraitItem, Typedef, UnboxedClosureKind};\n use ast::{UnnamedField, UnsafeBlock};\n-use ast::{UnsafeFn, ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n+use ast::{ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast;\n@@ -1121,7 +1121,7 @@ impl<'a> Parser<'a> {\n         Function Style\n         */\n \n-        let fn_style = self.parse_unsafety();\n+        let unsafety = self.parse_unsafety();\n         let abi = if self.eat_keyword(keywords::Extern) {\n             self.parse_opt_abi().unwrap_or(abi::C)\n         } else {\n@@ -1139,7 +1139,7 @@ impl<'a> Parser<'a> {\n         });\n         TyBareFn(P(BareFnTy {\n             abi: abi,\n-            fn_style: fn_style,\n+            unsafety: unsafety,\n             lifetimes: lifetime_defs,\n             decl: decl\n         }))\n@@ -1240,7 +1240,7 @@ impl<'a> Parser<'a> {\n \n         */\n \n-        let fn_style = self.parse_unsafety();\n+        let unsafety = self.parse_unsafety();\n \n         let lifetime_defs = self.parse_legacy_lifetime_defs(lifetime_defs);\n \n@@ -1266,19 +1266,19 @@ impl<'a> Parser<'a> {\n         });\n \n         TyClosure(P(ClosureTy {\n-            fn_style: fn_style,\n+            unsafety: unsafety,\n             onceness: Many,\n             bounds: bounds,\n             decl: decl,\n             lifetimes: lifetime_defs,\n         }))\n     }\n \n-    pub fn parse_unsafety(&mut self) -> FnStyle {\n+    pub fn parse_unsafety(&mut self) -> Unsafety {\n         if self.eat_keyword(keywords::Unsafe) {\n-            return UnsafeFn;\n+            return Unsafety::Unsafe;\n         } else {\n-            return NormalFn;\n+            return Unsafety::Normal;\n         }\n     }\n \n@@ -1351,7 +1351,7 @@ impl<'a> Parser<'a> {\n                 let lo = p.span.lo;\n \n                 let vis = p.parse_visibility();\n-                let style = p.parse_fn_style();\n+                let style = p.parse_unsafety();\n                 let abi = if p.eat_keyword(keywords::Extern) {\n                     p.parse_opt_abi().unwrap_or(abi::C)\n                 } else {\n@@ -1379,7 +1379,7 @@ impl<'a> Parser<'a> {\n                     RequiredMethod(TypeMethod {\n                         ident: ident,\n                         attrs: attrs,\n-                        fn_style: style,\n+                        unsafety: style,\n                         decl: d,\n                         generics: generics,\n                         abi: abi,\n@@ -4548,12 +4548,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an item-position function declaration.\n-    fn parse_item_fn(&mut self, fn_style: FnStyle, abi: abi::Abi) -> ItemInfo {\n+    fn parse_item_fn(&mut self, unsafety: Unsafety, abi: abi::Abi) -> ItemInfo {\n         let (ident, mut generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl(false);\n         self.parse_where_clause(&mut generics);\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n-        (ident, ItemFn(decl, fn_style, abi, generics, body), Some(inner_attrs))\n+        (ident, ItemFn(decl, unsafety, abi, generics, body), Some(inner_attrs))\n     }\n \n     /// Parse a method in a trait impl\n@@ -4591,7 +4591,7 @@ impl<'a> Parser<'a> {\n                                                              self.span.hi) };\n                 (ast::MethMac(m), self.span.hi, attrs)\n             } else {\n-                let fn_style = self.parse_fn_style();\n+                let unsafety = self.parse_unsafety();\n                 let abi = if self.eat_keyword(keywords::Extern) {\n                     self.parse_opt_abi().unwrap_or(abi::C)\n                 } else {\n@@ -4612,7 +4612,7 @@ impl<'a> Parser<'a> {\n                                generics,\n                                abi,\n                                explicit_self,\n-                               fn_style,\n+                               unsafety,\n                                decl,\n                                body,\n                                visa),\n@@ -5143,16 +5143,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parse unsafe or not\n-    fn parse_fn_style(&mut self) -> FnStyle {\n-        if self.eat_keyword(keywords::Unsafe) {\n-            UnsafeFn\n-        } else {\n-            NormalFn\n-        }\n-    }\n-\n-\n     /// At this point, this is essentially a wrapper for\n     /// parse_foreign_items.\n     fn parse_foreign_mod_items(&mut self,\n@@ -5491,7 +5481,7 @@ impl<'a> Parser<'a> {\n                 // EXTERN FUNCTION ITEM\n                 let abi = opt_abi.unwrap_or(abi::C);\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(NormalFn, abi);\n+                    self.parse_item_fn(Unsafety::Normal, abi);\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5554,7 +5544,7 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(NormalFn, abi::Rust);\n+                self.parse_item_fn(Unsafety::Normal, abi::Rust);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5575,7 +5565,7 @@ impl<'a> Parser<'a> {\n             };\n             self.expect_keyword(keywords::Fn);\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(UnsafeFn, abi);\n+                self.parse_item_fn(Unsafety::Unsafe, abi);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "53399aba99a9d86417ba73e2ba1923eb97fd8b3a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -363,11 +363,11 @@ pub fn ident_to_string(id: &ast::Ident) -> String {\n     $to_string(|s| s.print_ident(*id))\n }\n \n-pub fn fun_to_string(decl: &ast::FnDecl, fn_style: ast::FnStyle, name: ast::Ident,\n+pub fn fun_to_string(decl: &ast::FnDecl, unsafety: ast::Unsafety, name: ast::Ident,\n                   opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                   generics: &ast::Generics) -> String {\n     $to_string(|s| {\n-        try!(s.print_fn(decl, Some(fn_style), abi::Rust,\n+        try!(s.print_fn(decl, Some(unsafety), abi::Rust,\n                         name, generics, opt_explicit_self, ast::Inherited));\n         try!(s.end()); // Close the head box\n         s.end() // Close the outer box\n@@ -707,7 +707,7 @@ impl<'a> State<'a> {\n                 };\n                 try!(self.print_ty_fn(Some(f.abi),\n                                       None,\n-                                      f.fn_style,\n+                                      f.unsafety,\n                                       ast::Many,\n                                       &*f.decl,\n                                       None,\n@@ -726,7 +726,7 @@ impl<'a> State<'a> {\n                 };\n                 try!(self.print_ty_fn(None,\n                                       Some('&'),\n-                                      f.fn_style,\n+                                      f.unsafety,\n                                       f.onceness,\n                                       &*f.decl,\n                                       None,\n@@ -858,10 +858,10 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \";\"));\n                 try!(self.end()); // end the outer cbox\n             }\n-            ast::ItemFn(ref decl, fn_style, abi, ref typarams, ref body) => {\n+            ast::ItemFn(ref decl, unsafety, abi, ref typarams, ref body) => {\n                 try!(self.print_fn(\n                     &**decl,\n-                    Some(fn_style),\n+                    Some(unsafety),\n                     abi,\n                     item.ident,\n                     typarams,\n@@ -1188,7 +1188,7 @@ impl<'a> State<'a> {\n         try!(self.print_outer_attributes(m.attrs.as_slice()));\n         try!(self.print_ty_fn(None,\n                               None,\n-                              m.fn_style,\n+                              m.unsafety,\n                               ast::Many,\n                               &*m.decl,\n                               Some(m.ident),\n@@ -1223,12 +1223,12 @@ impl<'a> State<'a> {\n                           ref generics,\n                           abi,\n                           ref explicit_self,\n-                          fn_style,\n+                          unsafety,\n                           ref decl,\n                           ref body,\n                           vis) => {\n                 try!(self.print_fn(&**decl,\n-                                   Some(fn_style),\n+                                   Some(unsafety),\n                                    abi,\n                                    ident,\n                                    generics,\n@@ -2164,14 +2164,14 @@ impl<'a> State<'a> {\n \n     pub fn print_fn(&mut self,\n                     decl: &ast::FnDecl,\n-                    fn_style: Option<ast::FnStyle>,\n+                    unsafety: Option<ast::Unsafety>,\n                     abi: abi::Abi,\n                     name: ast::Ident,\n                     generics: &ast::Generics,\n                     opt_explicit_self: Option<&ast::ExplicitSelf_>,\n                     vis: ast::Visibility) -> IoResult<()> {\n         try!(self.head(\"\"));\n-        try!(self.print_fn_header_info(opt_explicit_self, fn_style, abi, vis));\n+        try!(self.print_fn_header_info(opt_explicit_self, unsafety, abi, vis));\n         try!(self.nbsp());\n         try!(self.print_ident(name));\n         try!(self.print_generics(generics));\n@@ -2588,7 +2588,7 @@ impl<'a> State<'a> {\n     pub fn print_ty_fn(&mut self,\n                        opt_abi: Option<abi::Abi>,\n                        opt_sigil: Option<char>,\n-                       fn_style: ast::FnStyle,\n+                       unsafety: ast::Unsafety,\n                        onceness: ast::Onceness,\n                        decl: &ast::FnDecl,\n                        id: Option<ast::Ident>,\n@@ -2603,11 +2603,11 @@ impl<'a> State<'a> {\n         if opt_sigil == Some('~') && onceness == ast::Once {\n             try!(word(&mut self.s, \"proc\"));\n         } else if opt_sigil == Some('&') {\n-            try!(self.print_fn_style(fn_style));\n+            try!(self.print_unsafety(unsafety));\n             try!(self.print_extern_opt_abi(opt_abi));\n         } else {\n             assert!(opt_sigil.is_none());\n-            try!(self.print_fn_style(fn_style));\n+            try!(self.print_unsafety(unsafety));\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(word(&mut self.s, \"fn\"));\n         }\n@@ -2872,10 +2872,10 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_opt_fn_style(&mut self,\n-                            opt_fn_style: Option<ast::FnStyle>) -> IoResult<()> {\n-        match opt_fn_style {\n-            Some(fn_style) => self.print_fn_style(fn_style),\n+    pub fn print_opt_unsafety(&mut self,\n+                            opt_unsafety: Option<ast::Unsafety>) -> IoResult<()> {\n+        match opt_unsafety {\n+            Some(unsafety) => self.print_unsafety(unsafety),\n             None => Ok(())\n         }\n     }\n@@ -2906,11 +2906,11 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_header_info(&mut self,\n                                 _opt_explicit_self: Option<&ast::ExplicitSelf_>,\n-                                opt_fn_style: Option<ast::FnStyle>,\n+                                opt_unsafety: Option<ast::Unsafety>,\n                                 abi: abi::Abi,\n                                 vis: ast::Visibility) -> IoResult<()> {\n         try!(word(&mut self.s, visibility_qualified(vis, \"\").as_slice()));\n-        try!(self.print_opt_fn_style(opt_fn_style));\n+        try!(self.print_opt_unsafety(opt_unsafety));\n \n         if abi != abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n@@ -2920,10 +2920,10 @@ impl<'a> State<'a> {\n         word(&mut self.s, \"fn\")\n     }\n \n-    pub fn print_fn_style(&mut self, s: ast::FnStyle) -> IoResult<()> {\n+    pub fn print_unsafety(&mut self, s: ast::Unsafety) -> IoResult<()> {\n         match s {\n-            ast::NormalFn => Ok(()),\n-            ast::UnsafeFn => self.word_nbsp(\"unsafe\"),\n+            ast::Unsafety::Normal => Ok(()),\n+            ast::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n         }\n     }\n }\n@@ -2950,7 +2950,7 @@ mod test {\n             variadic: false\n         };\n         let generics = ast_util::empty_generics();\n-        assert_eq!(fun_to_string(&decl, ast::NormalFn, abba_ident,\n+        assert_eq!(fun_to_string(&decl, ast::Unsafety::Normal, abba_ident,\n                                None, &generics),\n                    \"fn abba()\");\n     }"}, {"sha": "155cabb153cfa510560a88179a8b23a016493cfa", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -123,7 +123,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n \n         if is_test_fn(&self.cx, &*i) || is_bench_fn(&self.cx, &*i) {\n             match i.node {\n-                ast::ItemFn(_, ast::UnsafeFn, _, _, _) => {\n+                ast::ItemFn(_, ast::Unsafety::Unsafe, _, _, _) => {\n                     let diag = self.cx.span_diagnostic;\n                     diag.span_fatal(i.span,\n                                     \"unsafe functions cannot be used for \\"}, {"sha": "6eedb77889adaf229d1c18c7ef8e09163390e700", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092d04a40a3db44af2dd50e43a77449a7e56dd13/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=092d04a40a3db44af2dd50e43a77449a7e56dd13", "patch": "@@ -34,7 +34,7 @@ use owned_slice::OwnedSlice;\n \n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    FkItemFn(Ident, &'a Generics, FnStyle, Abi),\n+    FkItemFn(Ident, &'a Generics, Unsafety, Abi),\n \n     /// fn foo(&self)\n     FkMethod(Ident, &'a Generics, &'a Method),"}]}