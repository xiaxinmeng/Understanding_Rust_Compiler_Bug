{"sha": "f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzNkZDM4NWY3YjA2NGI0ZDllYjc3ZTc3YTQ4MzZkYzY1Y2E4MmM=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-06-13T01:58:24Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-06-18T01:53:12Z"}, "message": "Implement crate level only lints checking.", "tree": {"sha": "4a17a81fd21e17b5fbf62a27a59c460cb8426e39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a17a81fd21e17b5fbf62a27a59c460cb8426e39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "html_url": "https://github.com/rust-lang/rust/commit/f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59493917be3e87e1dfb44a9ccb66a9f9b17228e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/59493917be3e87e1dfb44a9ccb66a9f9b17228e6", "html_url": "https://github.com/rust-lang/rust/commit/59493917be3e87e1dfb44a9ccb66a9f9b17228e6"}], "stats": {"total": 159, "additions": 148, "deletions": 11}, "files": [{"sha": "d891466611ad379611cd2ce32db66ec2761e8ec8", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -55,7 +55,8 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n     where\n         F: FnOnce(&mut Self),\n     {\n-        let push = self.context.builder.push(attrs, &self.context.lint_store);\n+        let is_crate_node = id == ast::CRATE_NODE_ID;\n+        let push = self.context.builder.push(attrs, &self.context.lint_store, is_crate_node);\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);"}, {"sha": "f875e2750a5c56fa9b4464937ed1cb899910ac00", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -29,7 +29,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> LintLevelMap {\n     let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();\n \n-    let push = builder.levels.push(&krate.item.attrs, &store);\n+    let push = builder.levels.push(&krate.item.attrs, &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in krate.exported_macros {\n         builder.levels.register_id(macro_def.hir_id);\n@@ -109,7 +109,12 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub fn push(&mut self, attrs: &[ast::Attribute], store: &LintStore) -> BuilderPush {\n+    pub fn push(\n+        &mut self,\n+        attrs: &[ast::Attribute],\n+        store: &LintStore,\n+        is_crate_node: bool,\n+    ) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n@@ -333,6 +338,40 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n+        if !is_crate_node {\n+            for (id, &(level, ref src)) in specs.iter() {\n+                if !id.lint.crate_level_only {\n+                    continue;\n+                }\n+\n+                let (lint_attr_name, lint_attr_span) = match *src {\n+                    LintSource::Node(name, span, _) => (name, span),\n+                    _ => continue,\n+                };\n+\n+                let lint = builtin::UNUSED_ATTRIBUTES;\n+                let (lint_level, lint_src) =\n+                    self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                struct_lint_level(\n+                    self.sess,\n+                    lint,\n+                    lint_level,\n+                    lint_src,\n+                    Some(lint_attr_span.into()),\n+                    |lint| {\n+                        let mut db = lint.build(&format!(\n+                            \"{}({}) is ignored unless specified at crate level\",\n+                            level.as_str(),\n+                            lint_attr_name\n+                        ));\n+                        db.emit();\n+                    },\n+                );\n+                // don't set a separate error for every lint in the group\n+                break;\n+            }\n+        }\n+\n         for (id, &(level, ref src)) in specs.iter() {\n             if level == Level::Forbid {\n                 continue;\n@@ -449,7 +488,8 @@ impl LintLevelMapBuilder<'_, '_> {\n     where\n         F: FnOnce(&mut Self),\n     {\n-        let push = self.levels.push(attrs, self.store);\n+        let is_crate_hir = id == hir::CRATE_HIR_ID;\n+        let push = self.levels.push(attrs, self.store, is_crate_hir);\n         if push.changed {\n             self.levels.register_id(id);\n         }"}, {"sha": "064b0255397ce20a3cdfe7fe46fb99d683f84e22", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -8,20 +8,23 @@ use std::ops::Deref;\n declare_lint! {\n     pub NON_ASCII_IDENTS,\n     Allow,\n-    \"detects non-ASCII identifiers\"\n+    \"detects non-ASCII identifiers\",\n+    crate_level_only\n }\n \n declare_lint! {\n     pub UNCOMMON_CODEPOINTS,\n     Warn,\n-    \"detects uncommon Unicode codepoints in identifiers\"\n+    \"detects uncommon Unicode codepoints in identifiers\",\n+    crate_level_only\n }\n \n // FIXME: Change this to warn.\n declare_lint! {\n     pub CONFUSABLE_IDENTS,\n     Allow,\n-    \"detects visually confusable pairs between identifiers\"\n+    \"detects visually confusable pairs between identifiers\",\n+    crate_level_only\n }\n \n declare_lint_pass!(NonAsciiIdents => [NON_ASCII_IDENTS, UNCOMMON_CODEPOINTS, CONFUSABLE_IDENTS]);"}, {"sha": "0dcbee08abea1f7d1d473fe832112573a09cb740", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -88,6 +88,8 @@ pub struct Lint {\n \n     /// `Some` if this lint is feature gated, otherwise `None`.\n     pub feature_gate: Option<Symbol>,\n+\n+    pub crate_level_only: bool,\n }\n \n /// Extra information for a future incompatibility lint.\n@@ -111,6 +113,7 @@ impl Lint {\n             report_in_external_macro: false,\n             future_incompatible: None,\n             feature_gate: None,\n+            crate_level_only: false,\n         }\n     }\n \n@@ -336,6 +339,7 @@ macro_rules! declare_tool_lint {\n             future_incompatible: None,\n             is_plugin: true,\n             feature_gate: None,\n+            crate_level_only: false,\n         };\n     );\n }"}, {"sha": "e3444bb0e54ce1f6ff5fb89cf48ab1cbb5ecabff", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -17,6 +17,7 @@ declare_lint! {\n         reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n         edition: None,\n     };\n+    crate_level_only\n }\n \n declare_lint! {\n@@ -75,7 +76,8 @@ declare_lint! {\n declare_lint! {\n     pub UNUSED_CRATE_DEPENDENCIES,\n     Allow,\n-    \"crate dependencies that are never used\"\n+    \"crate dependencies that are never used\",\n+    crate_level_only\n }\n \n declare_lint! {\n@@ -166,7 +168,8 @@ declare_lint! {\n declare_lint! {\n     pub UNKNOWN_CRATE_TYPES,\n     Deny,\n-    \"unknown crate type found in `#[crate_type]` directive\"\n+    \"unknown crate type found in `#[crate_type]` directive\",\n+    crate_level_only\n }\n \n declare_lint! {\n@@ -339,7 +342,8 @@ declare_lint! {\n declare_lint! {\n     pub ELIDED_LIFETIMES_IN_PATHS,\n     Allow,\n-    \"hidden lifetime parameters in types are deprecated\"\n+    \"hidden lifetime parameters in types are deprecated\",\n+    crate_level_only\n }\n \n declare_lint! {\n@@ -459,6 +463,7 @@ declare_lint! {\n         reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n         edition: None,\n     };\n+    crate_level_only\n }\n \n declare_lint! {"}, {"sha": "8dc9351260ebcc6a4bb3979e2d665723bb5fddfa", "filename": "src/test/ui/issues/issue-48508.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -11,7 +11,7 @@\n // ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(non_ascii_idents)]\n-#[allow(uncommon_codepoints)]\n+#![allow(uncommon_codepoints)]\n \n #[path = \"issue-48508-aux.rs\"]\n mod other_file;"}, {"sha": "d9673faa2142e4c5a226143f38a3308f67475ee1", "filename": "src/test/ui/lint/crate_level_only_lint.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Ftest%2Fui%2Flint%2Fcrate_level_only_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Ftest%2Fui%2Flint%2Fcrate_level_only_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcrate_level_only_lint.rs?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -0,0 +1,22 @@\n+#![deny(uncommon_codepoints, unused_attributes)]\n+\n+mod foo {\n+#![allow(uncommon_codepoints)]\n+//~^ ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+//~| ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+//~| ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+\n+#[allow(uncommon_codepoints)]\n+//~^ ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+//~| ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+//~| ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+const BAR: f64 = 0.000001;\n+\n+}\n+\n+#[allow(uncommon_codepoints)]\n+//~^ ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+//~| ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+//~| ERROR allow(uncommon_codepoints) is ignored unless specified at crate level [unused_attributes]\n+fn main() {\n+}"}, {"sha": "8fb06df2a481a68297e4b9ff65639fdd632f09e7", "filename": "src/test/ui/lint/crate_level_only_lint.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Ftest%2Fui%2Flint%2Fcrate_level_only_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f633dd385f7b064b4d9eb77e77a4836dc65ca82c/src%2Ftest%2Fui%2Flint%2Fcrate_level_only_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcrate_level_only_lint.stderr?ref=f633dd385f7b064b4d9eb77e77a4836dc65ca82c", "patch": "@@ -0,0 +1,62 @@\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:4:10\n+   |\n+LL | #![allow(uncommon_codepoints)]\n+   |          ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/crate_level_only_lint.rs:1:30\n+   |\n+LL | #![deny(uncommon_codepoints, unused_attributes)]\n+   |                              ^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:9:9\n+   |\n+LL | #[allow(uncommon_codepoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:17:9\n+   |\n+LL | #[allow(uncommon_codepoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:4:10\n+   |\n+LL | #![allow(uncommon_codepoints)]\n+   |          ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:9:9\n+   |\n+LL | #[allow(uncommon_codepoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:17:9\n+   |\n+LL | #[allow(uncommon_codepoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:4:10\n+   |\n+LL | #![allow(uncommon_codepoints)]\n+   |          ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:9:9\n+   |\n+LL | #[allow(uncommon_codepoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: allow(uncommon_codepoints) is ignored unless specified at crate level\n+  --> $DIR/crate_level_only_lint.rs:17:9\n+   |\n+LL | #[allow(uncommon_codepoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}]}