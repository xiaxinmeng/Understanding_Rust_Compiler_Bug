{"sha": "2ac9b89d7b18ba68ec9d362bcae010045572988b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzliODlkN2IxOGJhNjhlYzlkMzYyYmNhZTAxMDA0NTU3Mjk4OGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T19:19:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T19:19:56Z"}, "message": "Rollup merge of #62871 - gilescope:async-recursion-error, r=Centril\n\nExplicit error message for async recursion.\n\nAttempt at clearer error message when async recusion is attempted. In response to #62539 (and #53690).", "tree": {"sha": "bfb4a9b3ee71146c1d83199877610f6188b89b3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfb4a9b3ee71146c1d83199877610f6188b89b3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac9b89d7b18ba68ec9d362bcae010045572988b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPfVcCRBK7hj4Ov3rIwAAdHIIAE1n8rDUfwRkFQZaC8Me4+4q\n2Vwni2kGNdgDOo7J9hM8c8Roseor4MoY6kG+PaVwipXQBQdKTmgspV/xO66vZ54O\nLFb9OiuRQarViRipjYGQzDtUAxNuEgHKytFjmtVGb+NgN3SoD6iu7/3fHE5Kwft2\nM1ltNdP0Ty2fHuU3mWlrHWA7Z8dB8V0/stCnzVh/P+3A9Oj+BXzemcnBW7J0l4Jd\nu7kp4AOHE9WW3tTfXh+wJeZMAKo9r3bRfUDwaVrtLadRfM1dG5T4+6E4PaFChg+U\nKcWY5hF8SYNl/40xlPI/YdHMds9gWsVijONrogAh2/REQ8PLNYTkO7dGr9SzKx8=\n=aiTf\n-----END PGP SIGNATURE-----\n", "payload": "tree bfb4a9b3ee71146c1d83199877610f6188b89b3e\nparent c2b066c560b0397d0923be007d4d406e596c7047\nparent 4b1d404d833929dffcc1ea8d704aa3d2c432ba11\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564341596 +0200\ncommitter GitHub <noreply@github.com> 1564341596 +0200\n\nRollup merge of #62871 - gilescope:async-recursion-error, r=Centril\n\nExplicit error message for async recursion.\n\nAttempt at clearer error message when async recusion is attempted. In response to #62539 (and #53690).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac9b89d7b18ba68ec9d362bcae010045572988b", "html_url": "https://github.com/rust-lang/rust/commit/2ac9b89d7b18ba68ec9d362bcae010045572988b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac9b89d7b18ba68ec9d362bcae010045572988b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b066c560b0397d0923be007d4d406e596c7047", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b066c560b0397d0923be007d4d406e596c7047", "html_url": "https://github.com/rust-lang/rust/commit/c2b066c560b0397d0923be007d4d406e596c7047"}, {"sha": "4b1d404d833929dffcc1ea8d704aa3d2c432ba11", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1d404d833929dffcc1ea8d704aa3d2c432ba11", "html_url": "https://github.com/rust-lang/rust/commit/4b1d404d833929dffcc1ea8d704aa3d2c432ba11"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "1b4dbfe4be6df1a8608ed85e4a78a95b043d7fb6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2ac9b89d7b18ba68ec9d362bcae010045572988b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac9b89d7b18ba68ec9d362bcae010045572988b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2ac9b89d7b18ba68ec9d362bcae010045572988b", "patch": "@@ -1325,19 +1325,35 @@ fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, substs: SubstsRef<'tcx>, span: Span) {\n+fn check_opaque<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+    span: Span,\n+    origin: &hir::ExistTyOrigin\n+) {\n     if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id, substs) {\n-        let mut err = struct_span_err!(\n-            tcx.sess, span, E0720,\n-            \"opaque type expands to a recursive type\",\n-        );\n-        err.span_label(span, \"expands to a recursive type\");\n-        if let ty::Opaque(..) = partially_expanded_type.sty {\n-            err.note(\"type resolves to itself\");\n+        if let hir::ExistTyOrigin::AsyncFn = origin {\n+            struct_span_err!(\n+                tcx.sess, span, E0733,\n+                \"recursion in an `async fn` requires boxing\",\n+            )\n+            .span_label(span, \"an `async fn` cannot invoke itself directly\")\n+            .note(\"a recursive `async fn` must be rewritten to return a boxed future.\")\n+            .emit();\n         } else {\n-            err.note(&format!(\"expanded type is `{}`\", partially_expanded_type));\n+            let mut err = struct_span_err!(\n+                tcx.sess, span, E0720,\n+                \"opaque type expands to a recursive type\",\n+            );\n+            err.span_label(span, \"expands to a recursive type\");\n+            if let ty::Opaque(..) = partially_expanded_type.sty {\n+                err.note(\"type resolves to itself\");\n+            } else {\n+                err.note(&format!(\"expanded type is `{}`\", partially_expanded_type));\n+            }\n+            err.emit();\n         }\n-        err.emit();\n     }\n }\n \n@@ -1387,11 +1403,11 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n         hir::ItemKind::Union(..) => {\n             check_union(tcx, it.hir_id, it.span);\n         }\n-        hir::ItemKind::Existential(..) => {\n+        hir::ItemKind::Existential(hir::ExistTy{origin, ..}) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);\n \n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-            check_opaque(tcx, def_id, substs, it.span);\n+            check_opaque(tcx, def_id, substs, it.span, &origin);\n         }\n         hir::ItemKind::Ty(..) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);"}, {"sha": "e0a614b9a24ddb292e84c85865a03630d43cd3c2", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2ac9b89d7b18ba68ec9d362bcae010045572988b/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac9b89d7b18ba68ec9d362bcae010045572988b/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=2ac9b89d7b18ba68ec9d362bcae010045572988b", "patch": "@@ -4765,7 +4765,53 @@ assert_eq!(1, discriminant(&Enum::Struct{a: 7, b: 11}));\n ```\n \"##,\n \n+E0733: r##\"\n+Recursion in an `async fn` requires boxing. For example, this will not compile:\n+\n+```edition2018,compile_fail,E0733\n+#![feature(async_await)]\n+async fn foo(n: usize) {\n+    if n > 0 {\n+        foo(n - 1).await;\n+    }\n+}\n+```\n+\n+To achieve async recursion, the `async fn` needs to be desugared\n+such that the `Future` is explicit in the return type:\n+\n+```edition2018,compile_fail,E0720\n+# #![feature(async_await)]\n+use std::future::Future;\n+fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n+    async move {\n+        if n > 0 {\n+            foo_desugered(n - 1).await;\n+        }\n+    }\n+}\n+```\n+\n+Finally, the future is wrapped in a pinned box:\n+\n+```edition2018\n+# #![feature(async_await)]\n+use std::future::Future;\n+use std::pin::Pin;\n+fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n+    Box::pin(async move {\n+        if n > 0 {\n+            foo_recursive(n - 1).await;\n+        }\n+    })\n }\n+```\n+\n+The `Box<...>` ensures that the result is of known size,\n+and the pin is required to keep it in the same place in memory.\n+\"##,\n+\n+}  // (end of detailed error messages)\n \n register_diagnostics! {\n //  E0035, merged into E0087/E0089"}, {"sha": "64f6eccd5479a963e34a526eca568e2712b6a4e9", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ac9b89d7b18ba68ec9d362bcae010045572988b/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ac9b89d7b18ba68ec9d362bcae010045572988b/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=2ac9b89d7b18ba68ec9d362bcae010045572988b", "patch": "@@ -1,11 +1,11 @@\n-error[E0720]: opaque type expands to a recursive type\n+error[E0733]: recursion in an `async fn` requires boxing\n   --> $DIR/recursive-async-impl-trait-type.rs:7:40\n    |\n LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ expands to a recursive type\n+   |                                        ^^ an `async fn` cannot invoke itself directly\n    |\n-   = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-async-impl-trait-type.rs:7:43: 9:2 {impl std::future::Future, ()}]>`\n+   = note: a recursive `async fn` must be rewritten to return a boxed future.\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0720`.\n+For more information about this error, try `rustc --explain E0733`."}]}