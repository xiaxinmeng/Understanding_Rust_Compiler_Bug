{"sha": "f185ee5fda65a82d0efdfe0504e2712cecf18cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODVlZTVmZGE2NWE4MmQwZWZkZmUwNTA0ZTI3MTJjZWNmMThjZGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-26T00:13:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-26T00:13:25Z"}, "message": "Rollup merge of #61114 - RalfJung:vec, r=Gankro\n\nVec: avoid creating slices to the elements\n\nInstead of `self.deref_mut().as_mut_ptr()` to get a raw pointer to the buffer, use `self.buf.ptr_mut()`. This (a) avoids creating a unique reference to all existing elements without any need, and (b) creates a pointer that can actually be used for the *entire* buffer, and not just for the part of it covered by `self.deref_mut()`.\n\nI also got worried about `RawVec::ptr` returning a `*mut T` from an `&self`, so I added both a mutable and an immutable version.\n\nCc @Gankro in particular for the `assume` changes -- I don't know why that is not in `Unique`, but I moved it up from `Vec::deref` to `RawVec::ptr` to avoid having to repeat it everywhere.\n\nFixes https://github.com/rust-lang/rust/issues/60847", "tree": {"sha": "dca8502ddbd51edb1ff99893a7ae193121ad73da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca8502ddbd51edb1ff99893a7ae193121ad73da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f185ee5fda65a82d0efdfe0504e2712cecf18cdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6dolCRBK7hj4Ov3rIwAAdHIIACyrOzrJD5swPhGr8lLvnWVI\n4nS3Q6Ou1nFcyb6dRCa1QdtJqWIekFMzLvGij0m+5q4A40Aheuk4RGBLI7c9Hely\n61xdQpvWXid0dXbuJXeeK3mXZL/e3cWZSFuVH7ftY8Ilb/tTMDJhyjaWybss1nzW\nOTbBJDAVn+nn+lcm8b2dqlJGdgA6DSxP2ggMMhH/tb0d9+VierAuUVs4FSHJpHrc\n7oJRW13w4Ds4q6aFSr23bBM0C2Ex42NWJEdlQBwWw3RXh8uzBAPA1/HO8zI/535/\n+jrHmAqmQRKvaQ7yld5FkLf0Mx61KM0qC+0y9JhvxutOSU3iUrw+t8njSZR5GmQ=\n=koFD\n-----END PGP SIGNATURE-----\n", "payload": "tree dca8502ddbd51edb1ff99893a7ae193121ad73da\nparent 24cc368118e434719bee711ad34f0a370b27231d\nparent 428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558829605 +0200\ncommitter GitHub <noreply@github.com> 1558829605 +0200\n\nRollup merge of #61114 - RalfJung:vec, r=Gankro\n\nVec: avoid creating slices to the elements\n\nInstead of `self.deref_mut().as_mut_ptr()` to get a raw pointer to the buffer, use `self.buf.ptr_mut()`. This (a) avoids creating a unique reference to all existing elements without any need, and (b) creates a pointer that can actually be used for the *entire* buffer, and not just for the part of it covered by `self.deref_mut()`.\n\nI also got worried about `RawVec::ptr` returning a `*mut T` from an `&self`, so I added both a mutable and an immutable version.\n\nCc @Gankro in particular for the `assume` changes -- I don't know why that is not in `Unique`, but I moved it up from `Vec::deref` to `RawVec::ptr` to avoid having to repeat it everywhere.\n\nFixes https://github.com/rust-lang/rust/issues/60847\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f185ee5fda65a82d0efdfe0504e2712cecf18cdf", "html_url": "https://github.com/rust-lang/rust/commit/f185ee5fda65a82d0efdfe0504e2712cecf18cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f185ee5fda65a82d0efdfe0504e2712cecf18cdf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24cc368118e434719bee711ad34f0a370b27231d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24cc368118e434719bee711ad34f0a370b27231d", "html_url": "https://github.com/rust-lang/rust/commit/24cc368118e434719bee711ad34f0a370b27231d"}, {"sha": "428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6", "html_url": "https://github.com/rust-lang/rust/commit/428ab7e1bd77b82db30dc574b3f9c4fe0a7c77f6"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "5ddac673c9ff17fe9b72859dc9748abb3a57cbfa", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f185ee5fda65a82d0efdfe0504e2712cecf18cdf/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f185ee5fda65a82d0efdfe0504e2712cecf18cdf/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=f185ee5fda65a82d0efdfe0504e2712cecf18cdf", "patch": "@@ -1152,3 +1152,24 @@ fn test_try_reserve_exact() {\n     }\n \n }\n+\n+#[test]\n+fn test_stable_push_pop() {\n+    // Test that, if we reserved enough space, adding and removing elements does not\n+    // invalidate references into the vector (such as `v0`).  This test also\n+    // runs in Miri, which would detect such problems.\n+    let mut v = Vec::with_capacity(10);\n+    v.push(13);\n+\n+    // laundering the lifetime -- we take care that `v` does not reallocate, so that's okay.\n+    let v0 = unsafe { &*(&v[0] as *const _) };\n+\n+    // Now do a bunch of things and occasionally use `v0` again to assert it is still valid.\n+    v.push(1);\n+    v.push(2);\n+    v.insert(1, 1);\n+    assert_eq!(*v0, 13);\n+    v.remove(1);\n+    v.pop().unwrap();\n+    assert_eq!(*v0, 13);\n+}"}, {"sha": "5cb91395b7bf75cd64cdb81e54392b61ec7140c1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 71, "deletions": 7, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f185ee5fda65a82d0efdfe0504e2712cecf18cdf/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f185ee5fda65a82d0efdfe0504e2712cecf18cdf/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f185ee5fda65a82d0efdfe0504e2712cecf18cdf", "patch": "@@ -735,6 +735,75 @@ impl<T> Vec<T> {\n         self\n     }\n \n+    /// Returns a raw pointer to the vector's buffer.\n+    ///\n+    /// The caller must ensure that the vector outlives the pointer this\n+    /// function returns, or else it will end up pointing to garbage.\n+    /// Modifying the vector may cause its buffer to be reallocated,\n+    /// which would also make any pointers to it invalid.\n+    ///\n+    /// The caller must also ensure that the memory the pointer (non-transitively) points to\n+    /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer\n+    /// derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = vec![1, 2, 4];\n+    /// let x_ptr = x.as_ptr();\n+    ///\n+    /// unsafe {\n+    ///     for i in 0..x.len() {\n+    ///         assert_eq!(*x_ptr.add(i), 1 << i);\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n+    #[inline]\n+    pub fn as_ptr(&self) -> *const T {\n+        // We shadow the slice method of the same name to avoid going through\n+        // `deref`, which creates an intermediate reference.\n+        let ptr = self.buf.ptr();\n+        unsafe { assume(!ptr.is_null()); }\n+        ptr\n+    }\n+\n+    /// Returns an unsafe mutable pointer to the vector's buffer.\n+    ///\n+    /// The caller must ensure that the vector outlives the pointer this\n+    /// function returns, or else it will end up pointing to garbage.\n+    /// Modifying the vector may cause its buffer to be reallocated,\n+    /// which would also make any pointers to it invalid.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // Allocate vector big enough for 4 elements.\n+    /// let size = 4;\n+    /// let mut x: Vec<i32> = Vec::with_capacity(size);\n+    /// let x_ptr = x.as_mut_ptr();\n+    ///\n+    /// // Initialize elements via raw pointer writes, then set length.\n+    /// unsafe {\n+    ///     for i in 0..size {\n+    ///         *x_ptr.add(i) = i as i32;\n+    ///     }\n+    ///     x.set_len(size);\n+    /// }\n+    /// assert_eq!(&*x, &[0,1,2,3]);\n+    /// ```\n+    #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n+    #[inline]\n+    pub fn as_mut_ptr(&mut self) -> *mut T {\n+        // We shadow the slice method of the same name to avoid going through\n+        // `deref_mut`, which creates an intermediate reference.\n+        let ptr = self.buf.ptr();\n+        unsafe { assume(!ptr.is_null()); }\n+        ptr\n+    }\n+\n     /// Forces the length of the vector to `new_len`.\n     ///\n     /// This is a low-level operation that maintains none of the normal\n@@ -1706,9 +1775,7 @@ impl<T> ops::Deref for Vec<T> {\n \n     fn deref(&self) -> &[T] {\n         unsafe {\n-            let p = self.buf.ptr();\n-            assume(!p.is_null());\n-            slice::from_raw_parts(p, self.len)\n+            slice::from_raw_parts(self.as_ptr(), self.len)\n         }\n     }\n }\n@@ -1717,9 +1784,7 @@ impl<T> ops::Deref for Vec<T> {\n impl<T> ops::DerefMut for Vec<T> {\n     fn deref_mut(&mut self) -> &mut [T] {\n         unsafe {\n-            let ptr = self.buf.ptr();\n-            assume(!ptr.is_null());\n-            slice::from_raw_parts_mut(ptr, self.len)\n+            slice::from_raw_parts_mut(self.as_mut_ptr(), self.len)\n         }\n     }\n }\n@@ -1754,7 +1819,6 @@ impl<T> IntoIterator for Vec<T> {\n     fn into_iter(mut self) -> IntoIter<T> {\n         unsafe {\n             let begin = self.as_mut_ptr();\n-            assume(!begin.is_null());\n             let end = if mem::size_of::<T>() == 0 {\n                 arith_offset(begin as *const i8, self.len() as isize) as *const T\n             } else {"}]}