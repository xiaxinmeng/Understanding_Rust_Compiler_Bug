{"sha": "026451093dbce9d1d2077d4c2bae3a92d413c203", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjQ1MTA5M2RiY2U5ZDFkMjA3N2Q0YzJiYWUzYTkyZDQxM2MyMDM=", "commit": {"author": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-10-11T22:53:13Z"}, "committer": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-10-11T22:53:13Z"}, "message": "ffi/c_str.rs: Use only one space after a period ending a sentence", "tree": {"sha": "db0e6d7aac9cc2673fb1aee41a595c54354ef8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0e6d7aac9cc2673fb1aee41a595c54354ef8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026451093dbce9d1d2077d4c2bae3a92d413c203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026451093dbce9d1d2077d4c2bae3a92d413c203", "html_url": "https://github.com/rust-lang/rust/commit/026451093dbce9d1d2077d4c2bae3a92d413c203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026451093dbce9d1d2077d4c2bae3a92d413c203/comments", "author": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a4ce6dcc694e2ea35344aa790a73a5dea573f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a4ce6dcc694e2ea35344aa790a73a5dea573f0", "html_url": "https://github.com/rust-lang/rust/commit/a9a4ce6dcc694e2ea35344aa790a73a5dea573f0"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "7d3313fb9d549262c8d271dae4b21f16e9659f63", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/026451093dbce9d1d2077d4c2bae3a92d413c203/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026451093dbce9d1d2077d4c2bae3a92d413c203/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=026451093dbce9d1d2077d4c2bae3a92d413c203", "patch": "@@ -49,7 +49,7 @@ use str::{self, Utf8Error};\n /// # Extracting a raw pointer to the whole C string\n ///\n /// `CString` implements a [`as_ptr`] method through the [`Deref`]\n-/// trait.  This method will give you a `*const c_char` which you can\n+/// trait. This method will give you a `*const c_char` which you can\n /// feed directly to extern functions that expect a nul-terminated\n /// string, like C's `strdup()`.\n ///\n@@ -70,7 +70,7 @@ use str::{self, Utf8Error};\n /// Once you have the kind of slice you need (with or without a nul\n /// terminator), you can call the slice's own\n /// [`as_ptr`][slice.as_ptr] method to get a raw pointer to pass to\n-/// extern functions.  See the documentation for that function for a\n+/// extern functions. See the documentation for that function for a\n /// discussion on ensuring the lifetime of the raw pointer.\n ///\n /// [`Into`]: ../convert/trait.Into.html\n@@ -130,8 +130,8 @@ pub struct CString {\n /// Representation of a borrowed C string.\n ///\n /// This type represents a borrowed reference to a nul-terminated\n-/// array of bytes.  It can be constructed safely from a `&[`[`u8`]`]`\n-/// slice, or unsafely from a raw `*const c_char`.  It can then be\n+/// array of bytes. It can be constructed safely from a `&[`[`u8`]`]`\n+/// slice, or unsafely from a raw `*const c_char`. It can then be\n /// converted to a Rust [`&str`] by performing UTF-8 validation, or\n /// into an owned [`CString`].\n ///\n@@ -374,7 +374,7 @@ impl CString {\n     /// to undefined behavior or allocator corruption.\n     ///\n     /// > **Note:** If you need to borrow a string that was allocated by\n-    /// > foreign code, use [`CStr`].  If you need to take ownership of\n+    /// > foreign code, use [`CStr`]. If you need to take ownership of\n     /// > a string that was allocated by foreign code, you will need to\n     /// > make your own provisions for freeing it appropriately, likely\n     /// > with the foreign code's API to do that.\n@@ -521,7 +521,7 @@ impl CString {\n     ///\n     /// The returned slice does **not** contain the trailing nul\n     /// terminator, and it is guaranteed to not have any interior nul\n-    /// bytes.  If you need the nul terminator, use\n+    /// bytes. If you need the nul terminator, use\n     /// [`as_bytes_with_nul`] instead.\n     ///\n     /// [`as_bytes_with_nul`]: #method.as_bytes_with_nul\n@@ -1035,7 +1035,7 @@ impl CStr {\n     /// Yields a [`&str`] slice if the `CStr` contains valid UTF-8.\n     ///\n     /// If the contents of the `CStr` are valid UTF-8 data, this\n-    /// function will return the corresponding [`&str`] slice.  Otherwise,\n+    /// function will return the corresponding [`&str`] slice. Otherwise,\n     /// it will return an error with details of where UTF-8 validation failed.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n@@ -1066,7 +1066,7 @@ impl CStr {\n     ///\n     /// If the contents of the `CStr` are valid UTF-8 data, this\n     /// function will return a [`Cow`]`::`[`Borrowed`]`(`[`&str`]`)`\n-    /// with the the corresponding [`&str`] slice.  Otherwise, it will\n+    /// with the the corresponding [`&str`] slice. Otherwise, it will\n     /// replace any invalid UTF-8 sequences with `U+FFFD REPLACEMENT\n     /// CHARACTER` and return a [`Cow`]`::`[`Owned`]`(`[`String`]`)`\n     /// with the result."}]}