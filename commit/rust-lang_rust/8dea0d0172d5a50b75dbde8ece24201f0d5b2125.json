{"sha": "8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZWEwZDAxNzJkNWE1MGI3NWRiZGU4ZWNlMjQyMDFmMGQ1YjIxMjU=", "commit": {"author": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2018-10-11T16:53:15Z"}, "committer": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2019-01-18T06:34:42Z"}, "message": "Add initial impl of is_sorted to Iterator", "tree": {"sha": "2e5017f00150872014a2b9c809b931a86845f5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5017f00150872014a2b9c809b931a86845f5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "html_url": "https://github.com/rust-lang/rust/commit/8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/comments", "author": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "html_url": "https://github.com/rust-lang/rust/commit/daa53a52a2667533d5fe59bfcc5b8614b79c3d31"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "6c3f8d919120b1f010f985c1cccd11e09da9362e", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "patch": "@@ -2605,6 +2605,90 @@ pub trait Iterator {\n             }\n         }\n     }\n+\n+    /// Checks if the elements of this iterator are sorted.\n+    ///\n+    /// That is, for each element `a` and its following element `b`, `a <= b`\n+    /// must hold. If the iterator yields exactly zero or one element, `true`\n+    /// is returned.\n+    ///\n+    /// Note that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above\n+    /// definition implies that this function returns `false` if any two\n+    /// consecutive items are not comparable.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_sorted)]\n+    /// \n+    /// assert!([1, 2, 2, 9].iter().is_sorted());\n+    /// assert!(![1, 3, 2, 4].iter().is_sorted());\n+    /// assert!([0].iter().is_sorted());\n+    /// assert!(std::iter::empty::<i32>().is_sorted());\n+    /// assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted());\n+    /// ```\n+    #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    fn is_sorted(self) -> bool\n+    where\n+        Self: Sized,\n+        Self::Item: PartialOrd,\n+    {\n+        self.is_sorted_by(|a, b| a.partial_cmp(b))\n+    }\n+\n+    /// Checks if the elements of this iterator are sorted using the given\n+    /// comparator function.\n+    ///\n+    /// Instead of using `PartialOrd::partial_cmp`, this function uses the given\n+    /// `compare` function to determine the ordering of two elements. Apart from\n+    /// that, it's equivalent to `is_sorted`; see its documentation for more\n+    /// information.\n+    #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n+    where\n+        Self: Sized,\n+        F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>\n+    {\n+        let mut last = match self.next() {\n+            Some(e) => e,\n+            None => return true,\n+        };\n+\n+        while let Some(curr) = self.next() {\n+            if compare(&last, &curr).map(|o| o == Ordering::Greater).unwrap_or(true) {\n+                return false;\n+            }\n+            last = curr;\n+        }\n+\n+        true\n+    }\n+\n+    /// Checks if the elements of this iterator are sorted using the given\n+    /// key extraction function.\n+    ///\n+    /// Instead of comparing the iterator's elements directly, this function\n+    /// compares the keys of the elements, as determined by `f`. Apart from\n+    /// that, it's equivalent to `is_sorted`; see its documentation for more\n+    /// information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_sorted)]\n+    /// \n+    /// assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n+    /// assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n+    /// ```\n+    #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    fn is_sorted_by_key<F, K>(self, mut f: F) -> bool\n+    where\n+        Self: Sized,\n+        F: FnMut(&Self::Item) -> K,\n+        K: PartialOrd\n+    {\n+        self.is_sorted_by(|a, b| f(a).partial_cmp(&f(b)))\n+    }\n }\n \n /// Select an element from an iterator based on the given \"projection\""}, {"sha": "df32cfa337313ab2eb2e1e796451bd070d24c8bf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "patch": "@@ -79,6 +79,7 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n+#![feature(is_sorted)]\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]"}, {"sha": "0fa99745d9065ab75c860690203f22c00165378c", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "patch": "@@ -2235,3 +2235,16 @@ fn test_monad_laws_associativity() {\n     assert_eq!((0..10).flat_map(f).flat_map(g).sum::<usize>(),\n                 (0..10).flat_map(|x| f(x).flat_map(g)).sum::<usize>());\n }\n+\n+#[test]\n+fn test_is_sorted() {\n+    assert!([1, 2, 2, 9].iter().is_sorted());\n+    assert!(![1, 3, 2].iter().is_sorted());\n+    assert!([0].iter().is_sorted());\n+    assert!(std::iter::empty::<i32>().is_sorted());\n+    assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted());\n+    assert!([-2, -1, 0, 3].iter().is_sorted());\n+    assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n+    assert!(![\"c\", \"bb\", \"aaa\"].iter().is_sorted());\n+    assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n+}"}, {"sha": "3e8549f8ae366da46c5b1a02f1289e30636866e3", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "patch": "@@ -10,6 +10,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n+#![feature(is_sorted)]\n #![feature(iter_copied)]\n #![feature(iter_nth_back)]\n #![feature(iter_once_with)]"}, {"sha": "6b0f943b6c796f0ffdfcbc2e3db0e4c8712baaa9", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs?ref=8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    assert!([1, 2, 2, 9].iter().is_sorted());\n+    //^ ERROR: use of unstable library feature 'is_sorted'\n+    assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n+    //^ ERROR: use of unstable library feature 'is_sorted'\n+}\n\\ No newline at end of file"}, {"sha": "e4c7891760ceab665f2c6937077b2b1e9230cd0f", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dea0d0172d5a50b75dbde8ece24201f0d5b2125/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr?ref=8dea0d0172d5a50b75dbde8ece24201f0d5b2125", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n+  --> $DIR/feature-gate-is_sorted.rs:12:33\n+   |\n+LL |     assert!([1, 2, 2, 9].iter().is_sorted());\n+   |                                 ^^^^^^^^^\n+   |\n+   = help: add #![feature(is_sorted)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n+  --> $DIR/feature-gate-is_sorted.rs:14:39\n+   |\n+LL |     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n+   |                                       ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(is_sorted)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}