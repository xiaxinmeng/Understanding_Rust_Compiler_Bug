{"sha": "1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDA0ZjJkNDM4YTMzZGRiNjYwNmEzYzJjNGQxNGU4MzQwYzgxMDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-23T12:43:33Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-17T16:47:48Z"}, "message": "remove reliance on \"diverging\" type variables\n\nInstead, we now record those type variables that are the target of a\n`NeverToAny` adjustment and consider those to be the \"diverging\" type\nvariables. This allows us to remove the special case logic that\ncreates a type variable for `!` in coercion.", "tree": {"sha": "862867381bc399ec163daaa6c25d288141d1f079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862867381bc399ec163daaa6c25d288141d1f079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "html_url": "https://github.com/rust-lang/rust/commit/1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "html_url": "https://github.com/rust-lang/rust/commit/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "746f273e69fea0e0ca62648ec4826f09d73c3e42", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "patch": "@@ -159,24 +159,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Coercing from `!` to any type is allowed:\n         if a.is_never() {\n-            // Subtle: If we are coercing from `!` to `?T`, where `?T` is an unbound\n-            // type variable, we want `?T` to fallback to `!` if not\n-            // otherwise constrained. An example where this arises:\n-            //\n-            //     let _: Option<?T> = Some({ return; });\n-            //\n-            // here, we would coerce from `!` to `?T`.\n-            return if b.is_ty_var() {\n-                // Micro-optimization: no need for this if `b` is\n-                // already resolved in some way.\n-                let diverging_ty = self.next_diverging_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::AdjustmentType,\n-                    span: self.cause.span,\n-                });\n-                self.coerce_from_inference_variable(diverging_ty, b, simple(Adjust::NeverToAny))\n-            } else {\n-                success(simple(Adjust::NeverToAny)(b), b, vec![])\n-            };\n+            return success(simple(Adjust::NeverToAny)(b), b, vec![]);\n         }\n \n         // Coercing *from* an unresolved inference variable means that"}, {"sha": "fff771663e966aa35062f46ae488e6f5fe95ccb5", "filename": "compiler/rustc_typeck/src/check/fallback.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs?ref=1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "patch": "@@ -2,7 +2,6 @@ use crate::check::FnCtxt;\n use rustc_data_structures::{\n     fx::FxHashMap, graph::vec_graph::VecGraph, graph::WithSuccessors, stable_set::FxHashSet,\n };\n-use rustc_infer::infer::type_variable::Diverging;\n use rustc_middle::ty::{self, Ty};\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n@@ -255,8 +254,27 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n \n         // Extract the unsolved type inference variable vids; note that some\n         // unsolved variables are integer/float variables and are excluded.\n-        let unsolved_vids: Vec<_> =\n-            unsolved_variables.iter().filter_map(|ty| ty.ty_vid()).collect();\n+        let unsolved_vids = unsolved_variables.iter().filter_map(|ty| ty.ty_vid());\n+\n+        // Compute the diverging root vids D -- that is, the root vid of\n+        // those type variables that (a) are the target of a coercion from\n+        // a `!` type and (b) have not yet been solved.\n+        //\n+        // These variables are the ones that are targets for fallback to\n+        // either `!` or `()`.\n+        let diverging_roots: FxHashSet<ty::TyVid> = self\n+            .diverging_type_vars\n+            .borrow()\n+            .iter()\n+            .map(|&ty| self.infcx.shallow_resolve(ty))\n+            .filter_map(|ty| ty.ty_vid())\n+            .map(|vid| self.infcx.root_var(vid))\n+            .collect();\n+        debug!(\n+            \"calculate_diverging_fallback: diverging_type_vars={:?}\",\n+            self.diverging_type_vars.borrow()\n+        );\n+        debug!(\"calculate_diverging_fallback: diverging_roots={:?}\", diverging_roots);\n \n         // Find all type variables that are reachable from a diverging\n         // type variable. These will typically default to `!`, unless\n@@ -265,27 +283,24 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         let mut roots_reachable_from_diverging = FxHashSet::default();\n         let mut diverging_vids = vec![];\n         let mut non_diverging_vids = vec![];\n-        for &unsolved_vid in &unsolved_vids {\n+        for unsolved_vid in unsolved_vids {\n+            let root_vid = self.infcx.root_var(unsolved_vid);\n             debug!(\n-                \"calculate_diverging_fallback: unsolved_vid={:?} diverges={:?}\",\n+                \"calculate_diverging_fallback: unsolved_vid={:?} root_vid={:?} diverges={:?}\",\n                 unsolved_vid,\n-                self.infcx.ty_vid_diverges(unsolved_vid)\n+                root_vid,\n+                diverging_roots.contains(&root_vid),\n             );\n-            match self.infcx.ty_vid_diverges(unsolved_vid) {\n-                Diverging::Diverges => {\n-                    diverging_vids.push(unsolved_vid);\n-                    let root_vid = self.infcx.root_var(unsolved_vid);\n-                    debug!(\n-                        \"calculate_diverging_fallback: root_vid={:?} reaches {:?}\",\n-                        root_vid,\n-                        coercion_graph.depth_first_search(root_vid).collect::<Vec<_>>()\n-                    );\n-                    roots_reachable_from_diverging\n-                        .extend(coercion_graph.depth_first_search(root_vid));\n-                }\n-                Diverging::NotDiverging => {\n-                    non_diverging_vids.push(unsolved_vid);\n-                }\n+            if diverging_roots.contains(&root_vid) {\n+                diverging_vids.push(unsolved_vid);\n+                debug!(\n+                    \"calculate_diverging_fallback: root_vid={:?} reaches {:?}\",\n+                    root_vid,\n+                    coercion_graph.depth_first_search(root_vid).collect::<Vec<_>>()\n+                );\n+                roots_reachable_from_diverging.extend(coercion_graph.depth_first_search(root_vid));\n+            } else {\n+                non_diverging_vids.push(unsolved_vid);\n             }\n         }\n         debug!("}, {"sha": "562d05d3ef9b1b00e803893f1539fd66e5f00397", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "patch": "@@ -286,6 +286,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n+        for a in &adj {\n+            if let Adjust::NeverToAny = a.kind {\n+                if a.target.is_ty_var() {\n+                    self.diverging_type_vars.borrow_mut().insert(a.target);\n+                    debug!(\"apply_adjustments: adding `{:?}` as diverging type var\", a.target);\n+                }\n+            }\n+        }\n+\n         let autoborrow_mut = adj.iter().any(|adj| {\n             matches!(\n                 adj,"}, {"sha": "f7552c1f4eb0cae7e6281e52d553f3cae5a09ec6", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c004f2d438a33ddb6606a3c2c4d14e8340c8107/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=1c004f2d438a33ddb6606a3c2c4d14e8340c8107", "patch": "@@ -1,6 +1,7 @@\n use super::callee::DeferredCallResolution;\n use super::MaybeInProgressTables;\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::HirIdMap;\n@@ -56,6 +57,11 @@ pub struct Inherited<'a, 'tcx> {\n     pub(super) constness: hir::Constness,\n \n     pub(super) body_id: Option<hir::BodyId>,\n+\n+    /// Whenever we introduce an adjustment from `!` into a type variable,\n+    /// we record that type variable here. This is later used to inform\n+    /// fallback. See the `fallback` module for details.\n+    pub(super) diverging_type_vars: RefCell<FxHashSet<Ty<'tcx>>>,\n }\n \n impl<'a, 'tcx> Deref for Inherited<'a, 'tcx> {\n@@ -121,6 +127,7 @@ impl Inherited<'a, 'tcx> {\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n+            diverging_type_vars: RefCell::new(Default::default()),\n             constness,\n             body_id,\n         }"}]}