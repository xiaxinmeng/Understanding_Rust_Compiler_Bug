{"sha": "c7979d35151b07809393a0d05b401222126916d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTc5ZDM1MTUxYjA3ODA5MzkzYTBkMDViNDAxMjIyMTI2OTE2ZDU=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-05T08:55:48Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-06T18:15:01Z"}, "message": "Fix rebase fallout", "tree": {"sha": "32dff12cb02b1576bf3bf1803f1e52a250021423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32dff12cb02b1576bf3bf1803f1e52a250021423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7979d35151b07809393a0d05b401222126916d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl48V6UACgkQaTCGhp1Q\nZjcjYw//VLnkN2cNuEculQC6hSWCAH+BfzVQmXmfuvLVXgexhK0L2G7avTnZ+K3w\nbVwyBC6jfDNxq455+tU9giTOTcUnUIpvjxEl+kpYma8BqyQOxXjqi5B7c0iyGpHU\nMYrUlVqiMlYQiihQ52CdJIMyUSCvVwTatCNdCvlevqHFcTTsL3O14miRBKU5vN5/\n7sscl6N55THU5yj+J0elBGkYYbNTRlXkSajDZEYobsG4kxf7tP5PPb1Le6lejDml\nj7LFpcRagB6H0QJLJ9KVrlfH5PQlHLFslw4ARAoGh2vgn+ImTcPyWcHD0y6be/It\neOtyhlXGmywYOEycswtaTjqFCup3o39zjX/+TSfJl/bCyfbjDJTHMk+JCR8yVjNf\nmMbOFb+BnSeFLprUNSFLe5Ol8ahVNyGOGcBpdPAJDGvUPVFp7u3/rlYB7bhvHELX\nwRPOvlPoW2eCjHqd312upy+k9HVknDW0ndSSED2CtmxZ4JbTmf7UIopJGAOn27Wc\n81cZ7y36ctWPMYb8jmDVtqX1BSld3gPRg7lmKcovMqpZu+sfAqoObtaeEWwtHhaw\naJ8cb6md/d+XayzrLJ/22W1RPUxeO5eu4ihxGW+QsAglmyBmVDmsEUlJMjepX/QL\nMLB1skV/iGLtu2LHT4buLkxtGJMwe3GTFmexSxF6ooBLsNmG0mU=\n=Bugm\n-----END PGP SIGNATURE-----", "payload": "tree 32dff12cb02b1576bf3bf1803f1e52a250021423\nparent 250c1842b1e27c1eb6d174e8a954ea37a2f707bb\nauthor flip1995 <hello@philkrones.com> 1580892948 +0100\ncommitter flip1995 <hello@philkrones.com> 1581012901 +0100\n\nFix rebase fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7979d35151b07809393a0d05b401222126916d5", "html_url": "https://github.com/rust-lang/rust/commit/c7979d35151b07809393a0d05b401222126916d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7979d35151b07809393a0d05b401222126916d5/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250c1842b1e27c1eb6d174e8a954ea37a2f707bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/250c1842b1e27c1eb6d174e8a954ea37a2f707bb", "html_url": "https://github.com/rust-lang/rust/commit/250c1842b1e27c1eb6d174e8a954ea37a2f707bb"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "d753b664045d80b10fe4a7ee9a66b1b9a5cf5a4a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7979d35151b07809393a0d05b401222126916d5/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7979d35151b07809393a0d05b401222126916d5/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c7979d35151b07809393a0d05b401222126916d5", "patch": "@@ -3,9 +3,9 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, get_arg_name, in_macro, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath, match_type,\n-    match_var, multispan_sugg, remove_blocks, snippet, snippet_block, snippet_with_applicability, span_lint_and_help,\n-    span_lint_and_note, span_lint_and_sugg, span_lint_and_then, walk_ptrs_ty,\n+    expr_block, get_arg_name, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath,\n+    match_type, match_var, multispan_sugg, remove_blocks, snippet, snippet_block, snippet_with_applicability,\n+    span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::lint::in_external_macro;\n@@ -836,7 +836,7 @@ fn check_match_single_binding(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[A\n     let mut snippet_body = if match_body.span.from_expansion() {\n         Sugg::hir_with_macro_callsite(cx, match_body, \"..\").to_string()\n     } else {\n-        snippet_block(cx, match_body.span, \"..\").to_owned().to_string()\n+        snippet_block(cx, match_body.span, \"..\", Some(expr.span)).to_string()\n     };\n \n     // Do we need to add ';' to suggestion ?\n@@ -865,10 +865,11 @@ fn check_match_single_binding(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[A\n                 \"this match could be written as a `let` statement\",\n                 \"consider using `let` statement\",\n                 format!(\n-                    \"let {} = {};\\n{}\",\n+                    \"let {} = {};\\n{}{}\",\n                     snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n                     snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n-                    snippet_body\n+                    \" \".repeat(indent_of(cx, expr.span).unwrap_or(0)),\n+                    snippet_body,\n                 ),\n                 applicability,\n             );"}, {"sha": "932bd6783a15cd12d83433664eee17aded6a3b78", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c7979d35151b07809393a0d05b401222126916d5/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c7979d35151b07809393a0d05b401222126916d5/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=c7979d35151b07809393a0d05b401222126916d5", "patch": "@@ -14,12 +14,12 @@ fn main() {\n     let c = 3;\n     // Lint\n     let (x, y, z) = (a, b, c);\n-{\n-    println!(\"{} {} {}\", x, y, z);\n-}\n+    {\n+        println!(\"{} {} {}\", x, y, z);\n+    }\n     // Lint\n     let (x, y, z) = (a, b, c);\n-println!(\"{} {} {}\", x, y, z);\n+    println!(\"{} {} {}\", x, y, z);\n     // Ok\n     match a {\n         2 => println!(\"2\"),\n@@ -35,29 +35,29 @@ println!(\"{} {} {}\", x, y, z);\n     println!(\"whatever\");\n     // Lint\n     {\n-    let x = 29;\n-    println!(\"x has a value of {}\", x);\n-}\n+        let x = 29;\n+        println!(\"x has a value of {}\", x);\n+    }\n     // Lint\n     {\n-    let e = 5 * a;\n-    if e >= 5 {\n-        println!(\"e is superior to 5\");\n+        let e = 5 * a;\n+        if e >= 5 {\n+            println!(\"e is superior to 5\");\n+        }\n     }\n-}\n     // Lint\n     let p = Point { x: 0, y: 7 };\n     let Point { x, y } = p;\n-println!(\"Coords: ({}, {})\", x, y);\n+    println!(\"Coords: ({}, {})\", x, y);\n     // Lint\n     let Point { x: x1, y: y1 } = p;\n-println!(\"Coords: ({}, {})\", x1, y1);\n+    println!(\"Coords: ({}, {})\", x1, y1);\n     // Lint\n     let x = 5;\n     let ref r = x;\n-println!(\"Got a reference to {}\", r);\n+    println!(\"Got a reference to {}\", r);\n     // Lint\n     let mut x = 5;\n     let ref mut mr = x;\n-println!(\"Got a mutable reference to {}\", mr);\n+    println!(\"Got a mutable reference to {}\", mr);\n }"}, {"sha": "471aec780d23affe72d65f21798d917cc2881738", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c7979d35151b07809393a0d05b401222126916d5/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7979d35151b07809393a0d05b401222126916d5/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=c7979d35151b07809393a0d05b401222126916d5", "patch": "@@ -12,9 +12,9 @@ LL | |     }\n help: consider using `let` statement\n    |\n LL |     let (x, y, z) = (a, b, c);\n-LL | {\n-LL |     println!(\"{} {} {}\", x, y, z);\n-LL | }\n+LL |     {\n+LL |         println!(\"{} {} {}\", x, y, z);\n+LL |     }\n    |\n \n error: this match could be written as a `let` statement\n@@ -28,7 +28,7 @@ LL | |     }\n help: consider using `let` statement\n    |\n LL |     let (x, y, z) = (a, b, c);\n-LL | println!(\"{} {} {}\", x, y, z);\n+LL |     println!(\"{} {} {}\", x, y, z);\n    |\n \n error: this match could be replaced by its body itself\n@@ -53,9 +53,9 @@ LL | |     }\n help: consider using the match body instead\n    |\n LL |     {\n-LL |     let x = 29;\n-LL |     println!(\"x has a value of {}\", x);\n-LL | }\n+LL |         let x = 29;\n+LL |         println!(\"x has a value of {}\", x);\n+LL |     }\n    |\n \n error: this match could be replaced by its body itself\n@@ -73,11 +73,11 @@ LL | |     }\n help: consider using the match body instead\n    |\n LL |     {\n-LL |     let e = 5 * a;\n-LL |     if e >= 5 {\n-LL |         println!(\"e is superior to 5\");\n+LL |         let e = 5 * a;\n+LL |         if e >= 5 {\n+LL |             println!(\"e is superior to 5\");\n+LL |         }\n LL |     }\n-LL | }\n    |\n \n error: this match could be written as a `let` statement\n@@ -91,7 +91,7 @@ LL | |     }\n help: consider using `let` statement\n    |\n LL |     let Point { x, y } = p;\n-LL | println!(\"Coords: ({}, {})\", x, y);\n+LL |     println!(\"Coords: ({}, {})\", x, y);\n    |\n \n error: this match could be written as a `let` statement\n@@ -105,7 +105,7 @@ LL | |     }\n help: consider using `let` statement\n    |\n LL |     let Point { x: x1, y: y1 } = p;\n-LL | println!(\"Coords: ({}, {})\", x1, y1);\n+LL |     println!(\"Coords: ({}, {})\", x1, y1);\n    |\n \n error: this match could be written as a `let` statement\n@@ -119,7 +119,7 @@ LL | |     }\n help: consider using `let` statement\n    |\n LL |     let ref r = x;\n-LL | println!(\"Got a reference to {}\", r);\n+LL |     println!(\"Got a reference to {}\", r);\n    |\n \n error: this match could be written as a `let` statement\n@@ -133,7 +133,7 @@ LL | |     }\n help: consider using `let` statement\n    |\n LL |     let ref mut mr = x;\n-LL | println!(\"Got a mutable reference to {}\", mr);\n+LL |     println!(\"Got a mutable reference to {}\", mr);\n    |\n \n error: aborting due to 9 previous errors"}]}