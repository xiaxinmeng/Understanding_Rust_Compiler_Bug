{"sha": "db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOGQyOTMyMDg1NWQ2OGVlOWFmMDRjZWViN2QxYWNlZGE4ZTYzYjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T21:37:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T21:37:36Z"}, "message": "move macro id to ids", "tree": {"sha": "461e098fe0c542d40f21829f98cbe86837ed4809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/461e098fe0c542d40f21829f98cbe86837ed4809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "html_url": "https://github.com/rust-lang/rust/commit/db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42cc77703b041436b2507816cb394ad6fd3d07e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/42cc77703b041436b2507816cb394ad6fd3d07e0", "html_url": "https://github.com/rust-lang/rust/commit/42cc77703b041436b2507816cb394ad6fd3d07e0"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "8259bd6990dd754b6ed54dc5d14bf6d9a51f9caa", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "patch": "@@ -4,11 +4,11 @@ use ra_syntax::{SyntaxNode, SourceFileNode};\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, Cancelable};\n \n use crate::{\n-    DefLoc, DefId, Name, HirFileId,\n+    DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n-    macros::{MacroCallLoc, MacroCallId, MacroExpansion},\n+    macros::MacroExpansion,\n     module::{ModuleId, ModuleTree, ModuleSource,\n     nameres::{ItemMap, InputModuleItems}},\n     ty::{InferenceResult, Ty},"}, {"sha": "aa6b2d2aa3136438d9277672bcb957ac3c45bb7e", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "patch": "@@ -2,7 +2,7 @@ use ra_db::{SourceRootId, LocationIntener, Cancelable, FileId};\n use ra_syntax::{SourceFileNode, SyntaxKind, SyntaxNode, SyntaxNodeRef, SourceFile, AstNode, ast};\n \n use crate::{\n-    MacroCallId, HirDatabase, PerNs, ModuleId, Module, Def, Function, Struct, Enum,\n+    HirDatabase, PerNs, ModuleId, Module, Def, Function, Struct, Enum,\n     arena::{Arena, Id},\n };\n \n@@ -77,6 +77,38 @@ impl From<MacroCallId> for HirFileId {\n     }\n }\n \n+/// `MacroCallId` identifies a particular macro invocation, like\n+/// `println!(\"Hello, {}\", world)`.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroCallId(u32);\n+ra_db::impl_numeric_id!(MacroCallId);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroCallLoc {\n+    pub(crate) source_root_id: SourceRootId,\n+    pub(crate) module_id: ModuleId,\n+    pub(crate) source_item_id: SourceItemId,\n+}\n+\n+impl MacroCallId {\n+    pub(crate) fn loc(\n+        self,\n+        db: &impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>>,\n+    ) -> MacroCallLoc {\n+        db.as_ref().id2loc(self)\n+    }\n+}\n+\n+impl MacroCallLoc {\n+    #[allow(unused)]\n+    pub(crate) fn id(\n+        &self,\n+        db: &impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>>,\n+    ) -> MacroCallId {\n+        db.as_ref().loc2id(&self)\n+    }\n+}\n+\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "018ead9fbe84ab3f3072fda604f2ade0d660c56e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "patch": "@@ -42,8 +42,8 @@ pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n     krate::Crate,\n-    ids::{HirFileId, DefId, DefLoc},\n-    macros::{MacroDef, MacroInput, MacroExpansion, MacroCallId, MacroCallLoc},\n+    ids::{HirFileId, DefId, DefLoc, MacroCallId, MacroCallLoc},\n+    macros::{MacroDef, MacroInput, MacroExpansion},\n     module::{Module, ModuleId, Problem, nameres::{ItemMap, PerNs, Namespace}, ModuleScope, Resolution},\n     function::{Function, FnScopes},\n     adt::{Struct, Enum},"}, {"sha": "71646b22dfa03a5dc31dbeb80238982051a1e517", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "patch": "@@ -1,44 +1,12 @@\n use std::sync::Arc;\n \n-use ra_db::{SourceRootId, LocalSyntaxPtr, LocationIntener};\n+use ra_db::LocalSyntaxPtr;\n use ra_syntax::{\n     TextRange, TextUnit, SourceFileNode, AstNode, SyntaxNode,\n     ast::{self, NameOwner},\n };\n \n-use crate::{module::ModuleId, SourceItemId, HirDatabase};\n-\n-/// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n-/// in a specific module.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(u32);\n-ra_db::impl_numeric_id!(MacroCallId);\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallLoc {\n-    pub(crate) source_root_id: SourceRootId,\n-    pub(crate) module_id: ModuleId,\n-    pub(crate) source_item_id: SourceItemId,\n-}\n-\n-impl MacroCallId {\n-    pub(crate) fn loc(\n-        self,\n-        db: &impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>>,\n-    ) -> MacroCallLoc {\n-        db.as_ref().id2loc(self)\n-    }\n-}\n-\n-impl MacroCallLoc {\n-    #[allow(unused)]\n-    pub(crate) fn id(\n-        &self,\n-        db: &impl AsRef<LocationIntener<MacroCallLoc, MacroCallId>>,\n-    ) -> MacroCallId {\n-        db.as_ref().loc2id(&self)\n-    }\n-}\n+use crate::{HirDatabase, MacroCallId};\n \n // Hard-coded defs for now :-(\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "a5d99bedae3ab34181989263414a94c75eba2009", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8d29320855d68ee9af04ceeb7d1aceda8e63b7/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=db8d29320855d68ee9af04ceeb7d1aceda8e63b7", "patch": "@@ -12,7 +12,7 @@ use ra_db::{SourceRootId, Cancelable,};\n \n use crate::{\n     SourceFileItems, SourceItemId, DefKind, Function, DefId, Name, AsName, HirFileId,\n-    macros::MacroCallLoc,\n+    MacroCallLoc,\n     db::HirDatabase,\n     function::FnScopes,\n     module::{"}]}