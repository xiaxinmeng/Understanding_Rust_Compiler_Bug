{"sha": "c7454f55959584579dc982d38c8432e84c7f8900", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDU0ZjU1OTU5NTg0NTc5ZGM5ODJkMzhjODQzMmU4NGM3Zjg5MDA=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-31T04:44:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T22:29:11Z"}, "message": "Rename str::to_chars -> str::chars", "tree": {"sha": "607275bb87d505f9ddcda3dd35df305be18c3fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607275bb87d505f9ddcda3dd35df305be18c3fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7454f55959584579dc982d38c8432e84c7f8900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7454f55959584579dc982d38c8432e84c7f8900", "html_url": "https://github.com/rust-lang/rust/commit/c7454f55959584579dc982d38c8432e84c7f8900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7454f55959584579dc982d38c8432e84c7f8900/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685a434e0a4b432125feda745e4c4d034dc74245", "url": "https://api.github.com/repos/rust-lang/rust/commits/685a434e0a4b432125feda745e4c4d034dc74245", "html_url": "https://github.com/rust-lang/rust/commit/685a434e0a4b432125feda745e4c4d034dc74245"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "baf7737ca8ccec9c13a690231e9ee9be99cfdaef", "filename": "src/libcore/str.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7454f55959584579dc982d38c8432e84c7f8900/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7454f55959584579dc982d38c8432e84c7f8900/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c7454f55959584579dc982d38c8432e84c7f8900", "patch": "@@ -35,7 +35,7 @@ export\n \n    // Transforming strings\n    bytes,\n-   to_chars,\n+   chars,\n    substr,\n    char_slice,\n    slice,\n@@ -341,7 +341,7 @@ fn trim_left(s: str) -> str {\n         }\n         ret i;\n     }\n-    let chars = to_chars(s);\n+    let chars = chars(s);\n     let whities = count_whities(chars);\n     ret from_chars(vec::slice(chars, whities, vec::len(chars)));\n }\n@@ -360,7 +360,7 @@ fn trim_right(s: str) -> str {\n         }\n         ret i;\n     }\n-    let chars = to_chars(s);\n+    let chars = chars(s);\n     let whities = count_whities(chars);\n     ret from_chars(vec::slice(chars, 0u, whities));\n }\n@@ -391,13 +391,13 @@ fn bytes(s: str) -> [u8] unsafe {\n }\n \n /*\n-Function: to_chars\n+Function: chars\n \n Convert a string to a vector of characters\n \n FIXME: rename to 'chars'\n */\n-fn to_chars(s: str) -> [char] {\n+fn chars(s: str) -> [char] {\n     let buf: [char] = [];\n     let i = 0u;\n     let len = byte_len(s);\n@@ -440,7 +440,7 @@ Failure:\n FIXME: rename to slice(), make faster by avoiding char conversion\n */\n fn char_slice(s: str, begin: uint, end: uint) -> str {\n-    from_chars(vec::slice(to_chars(s), begin, end))\n+    from_chars(vec::slice(chars(s), begin, end))\n }\n \n /*\n@@ -1978,4 +1978,11 @@ mod tests {\n     fn test_windowed_() {\n         let _x = windowed(0u, \"abcd\");\n     }\n+\n+    #[test]\n+    fn test_chars() {\n+        let ss = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert ['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m']\n+            == chars(ss);\n+    }\n }"}, {"sha": "7b4e9bf6d1c4d1065d7e5516182632ef388e1489", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7454f55959584579dc982d38c8432e84c7f8900/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7454f55959584579dc982d38c8432e84c7f8900/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=c7454f55959584579dc982d38c8432e84c7f8900", "patch": "@@ -9,8 +9,8 @@ fn main() {\n \n     assert (str::byte_len(s) == 10u);\n     assert (str::char_len(s) == 4u);\n-    assert (vec::len::<char>(str::to_chars(s)) == 4u);\n-    assert (str::eq(str::from_chars(str::to_chars(s)), s));\n+    assert (vec::len::<char>(str::chars(s)) == 4u);\n+    assert (str::eq(str::from_chars(str::chars(s)), s));\n     assert (str::char_at(s, 0u) == 'e');\n     assert (str::char_at(s, 1u) == '\u00e9');\n "}]}