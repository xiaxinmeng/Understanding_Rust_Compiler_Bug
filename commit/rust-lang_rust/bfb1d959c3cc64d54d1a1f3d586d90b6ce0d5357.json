{"sha": "bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjFkOTU5YzNjYzY0ZDU0ZDFhMWYzZDU4NmQ5MGI2Y2UwZDUzNTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-17T15:10:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T13:34:27Z"}, "message": "normalize and prove predicates\n\nAlso include a test that was not working previously.", "tree": {"sha": "4c0a50fb6181e5a1f0a06e8170e2106cb6bdd3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0a50fb6181e5a1f0a06e8170e2106cb6bdd3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "html_url": "https://github.com/rust-lang/rust/commit/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121f3c8d19c3549ab0b51a14034ffb8b097faf42", "url": "https://api.github.com/repos/rust-lang/rust/commits/121f3c8d19c3549ab0b51a14034ffb8b097faf42", "html_url": "https://github.com/rust-lang/rust/commit/121f3c8d19c3549ab0b51a14034ffb8b097faf42"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "6783083c9584c57d41ea3303de00388af8b83778", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "patch": "@@ -42,7 +42,7 @@ use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::{Subst, Substs, UnpackedKind, UserSubsts, UserSelfTy};\n+use rustc::ty::subst::{Subst, Substs, UnpackedKind, UserSelfTy, UserSubsts};\n use rustc::ty::{self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n use std::rc::Rc;\n use std::{fmt, iter};\n@@ -1034,13 +1034,62 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     self.eq_types(self_ty, impl_self_ty, locations, category)?;\n                 }\n \n+                // Prove the predicates coming along with `def_id`.\n+                //\n+                // Also, normalize the `instantiated_predicates`\n+                // because otherwise we wind up with duplicate \"type\n+                // outlives\" error messages.\n+                let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n+                let instantiated_predicates = self.fold_to_region_vid(instantiated_predicates);\n+                self.normalize_and_prove_instantiated_predicates(\n+                    instantiated_predicates,\n+                    locations,\n+                );\n+\n+                // In addition to proving the predicates, we have to\n+                // prove that `ty` is well-formed -- this is because\n+                // the WF of `ty` is predicated on the substs being\n+                // well-formed, and we haven't proven *that*. We don't\n+                // want to prove the WF of types from  `substs` directly because they\n+                // haven't been normalized.\n+                //\n+                // FIXME(nmatsakis): Well, perhaps we should normalize\n+                // them?  This would only be relevant if some input\n+                // type were ill-formed but did not appear in `ty`,\n+                // which...could happen with normalization...\n                 self.prove_predicate(ty::Predicate::WellFormed(ty), locations, category);\n             }\n         }\n \n         Ok(())\n     }\n \n+    /// Replace all free regions in `value` with their NLL `RegionVid`\n+    /// equivalents; if not in NLL, does nothing. This is never\n+    /// particularly necessary -- we'll do it lazilly as we process\n+    /// the value anyway -- but in some specific cases it is useful to\n+    /// normalize so we can suppress duplicate error messages.\n+    fn fold_to_region_vid<T>(\n+        &self,\n+        value: T\n+    ) -> T\n+    where T: TypeFoldable<'tcx>\n+    {\n+        if let Some(borrowck_context) = &self.borrowck_context {\n+            self.tcx().fold_regions(&value, &mut false, |r, _debruijn| {\n+                if r.has_free_regions() {\n+                    self.tcx().mk_region(ty::RegionKind::ReVar(\n+                        borrowck_context.universal_regions.to_region_vid(r),\n+                    ))\n+                } else {\n+                    r\n+                }\n+            })\n+        } else {\n+            value\n+        }\n+    }\n+\n     fn eq_opaque_type_and_type(\n         &mut self,\n         revealed_ty: Ty<'tcx>,"}, {"sha": "f83ae2438e6d5dd1fffa6a9eeadd96c0afb575e9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs?ref=bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "patch": "@@ -0,0 +1,16 @@\n+#![feature(nll)]\n+\n+trait Foo<'a> {\n+    const C: &'a u32;\n+}\n+\n+impl<'a, T> Foo<'a> for T {\n+    const C: &'a u32 = &22;\n+}\n+\n+fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n+    T::C //~ ERROR\n+}\n+\n+fn main() {\n+}"}, {"sha": "b373cebacb063cb8fd46750373fcba1989f18681", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "patch": "@@ -0,0 +1,10 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/constant-in-expr-trait-item-3.rs:12:5\n+   |\n+LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n+   |        -- lifetime `'a` defined here\n+LL |     T::C //~ ERROR\n+   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}]}