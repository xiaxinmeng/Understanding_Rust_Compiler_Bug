{"sha": "63734fcdd718cca089f84c42f3a42c0096cfd431", "node_id": "C_kwDOAAsO6NoAKDYzNzM0ZmNkZDcxOGNjYTA4OWY4NGM0MmYzYTQyYzAwOTZjZmQ0MzE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-05-15T10:22:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-05-15T10:26:21Z"}, "message": "Rustup to rustc 1.62.0-nightly (70b3681bf 2022-05-14)", "tree": {"sha": "56a1118aeea3768904122c2d4395b74df79a1123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56a1118aeea3768904122c2d4395b74df79a1123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63734fcdd718cca089f84c42f3a42c0096cfd431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63734fcdd718cca089f84c42f3a42c0096cfd431", "html_url": "https://github.com/rust-lang/rust/commit/63734fcdd718cca089f84c42f3a42c0096cfd431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63734fcdd718cca089f84c42f3a42c0096cfd431/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ff9f1b6ddc32678e96176254438be5d0c3c683", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ff9f1b6ddc32678e96176254438be5d0c3c683", "html_url": "https://github.com/rust-lang/rust/commit/e5ff9f1b6ddc32678e96176254438be5d0c3c683"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "ce1c6c99b40c8b9964e8549c9d82eb2c43b7d5f5", "filename": "patches/0027-sysroot-128bit-atomic-operations.patch", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63734fcdd718cca089f84c42f3a42c0096cfd431/patches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/63734fcdd718cca089f84c42f3a42c0096cfd431/patches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0027-sysroot-128bit-atomic-operations.patch?ref=63734fcdd718cca089f84c42f3a42c0096cfd431", "patch": "@@ -21,7 +21,7 @@ index 092b7cf..158cf71 100644\n -#[cfg(target_has_atomic_load_store = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for crate::sync::atomic::AtomicI128 {}\n- \n+\n  #[cfg(target_has_atomic_load_store = \"ptr\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n @@ -235,9 +232,6 @@ impl RefUnwindSafe for crate::sync::atomic::AtomicU32 {}\n@@ -31,14 +31,14 @@ index 092b7cf..158cf71 100644\n -#[cfg(target_has_atomic_load_store = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for crate::sync::atomic::AtomicU128 {}\n- \n+\n  #[cfg(target_has_atomic_load_store = \"8\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n diff --git a/library/core/src/sync/atomic.rs b/library/core/src/sync/atomic.rs\n index d9de37e..8293fce 100644\n --- a/library/core/src/sync/atomic.rs\n +++ b/library/core/src/sync/atomic.rs\n-@@ -2234,44 +2234,6 @@ atomic_int! {\n+@@ -2234,46 +2234,6 @@ atomic_int! {\n      \"AtomicU64::new(0)\",\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n@@ -54,6 +54,7 @@ index d9de37e..8293fce 100644\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n -    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI128\"),\n -    \"i128\",\n -    \"#![feature(integer_atomics)]\\n\\n\",\n -    atomic_min, atomic_max,\n@@ -73,6 +74,7 @@ index d9de37e..8293fce 100644\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n -    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU128\"),\n -    \"u128\",\n -    \"#![feature(integer_atomics)]\\n\\n\",\n -    atomic_umin, atomic_umax,\n@@ -98,6 +100,6 @@ index b735957..ea728b6 100644\n      #[cfg(target_has_atomic = \"ptr\")]\n      assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n      #[cfg(target_has_atomic = \"ptr\")]\n--- \n+--\n 2.26.2.7.g19db9cfb68\n "}, {"sha": "e98e92e468e93dacc140a5c23b22a147710917e3", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63734fcdd718cca089f84c42f3a42c0096cfd431/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/63734fcdd718cca089f84c42f3a42c0096cfd431/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=63734fcdd718cca089f84c42f3a42c0096cfd431", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-05-07\"\n+channel = \"nightly-2022-05-15\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "29b3f36b2bef2c389bb79d54bec9ebcf191a7308", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63734fcdd718cca089f84c42f3a42c0096cfd431/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63734fcdd718cca089f84c42f3a42c0096cfd431/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=63734fcdd718cca089f84c42f3a42c0096cfd431", "patch": "@@ -715,19 +715,19 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n         ptr_offset_from | ptr_offset_from_unsigned, (v ptr, v base) {\n             let ty = substs.type_at(0);\n-            let isize_layout = fx.layout_of(fx.tcx.types.isize);\n \n             let pointee_size: u64 = fx.layout_of(ty).size.bytes();\n             let diff_bytes = fx.bcx.ins().isub(ptr, base);\n             // FIXME this can be an exact division.\n-            let diff = if intrinsic == sym::ptr_offset_from_unsigned {\n+            let val = if intrinsic == sym::ptr_offset_from_unsigned {\n+                let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                 // Because diff_bytes ULE isize::MAX, this would be fine as signed,\n                 // but unsigned is slightly easier to codegen, so might as well.\n-                fx.bcx.ins().udiv_imm(diff_bytes, pointee_size as i64)\n+                CValue::by_val(fx.bcx.ins().udiv_imm(diff_bytes, pointee_size as i64), usize_layout)\n             } else {\n-                fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64)\n+                let isize_layout = fx.layout_of(fx.tcx.types.isize);\n+                CValue::by_val(fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64), isize_layout)\n             };\n-            let val = CValue::by_val(diff, isize_layout);\n             ret.write_cvalue(fx, val);\n         };\n "}]}