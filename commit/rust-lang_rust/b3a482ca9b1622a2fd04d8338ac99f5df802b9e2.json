{"sha": "b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYTQ4MmNhOWIxNjIyYTJmZDA0ZDgzMzhhYzk5ZjVkZjgwMmI5ZTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-16T17:46:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T13:43:47Z"}, "message": "move the `FreeRegionMap` into `TypeckTables`", "tree": {"sha": "50277943f9c04546fde39f3d65fd2323ea691d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50277943f9c04546fde39f3d65fd2323ea691d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "html_url": "https://github.com/rust-lang/rust/commit/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1cb9ba221e5cb0070ac82c6a234af11e4240680", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cb9ba221e5cb0070ac82c6a234af11e4240680", "html_url": "https://github.com/rust-lang/rust/commit/e1cb9ba221e5cb0070ac82c6a234af11e4240680"}], "stats": {"total": 132, "additions": 75, "deletions": 57}, "files": [{"sha": "cdb081ab40098655ab325fec2aa5bc29a0c2a3d2", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -19,7 +19,7 @@ use ty::{self, TyCtxt, FreeRegion, Region};\n use ty::wf::ImpliedBound;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n-#[derive(Clone)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct FreeRegionMap {\n     // Stores the relation `a < b`, where `a` and `b` are regions.\n     relation: TransitiveRelation<Region>\n@@ -30,6 +30,10 @@ impl FreeRegionMap {\n         FreeRegionMap { relation: TransitiveRelation::new() }\n     }\n \n+    pub fn is_empty(&self) -> bool {\n+        self.relation.is_empty()\n+    }\n+\n     pub fn relate_free_regions_from_implied_bounds<'tcx>(&mut self,\n                                                         implied_bounds: &[ImpliedBound<'tcx>])\n     {"}, {"sha": "a0aeb4107c156c17dd4c19cea5762942fc517a9d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -248,6 +248,11 @@ pub struct TypeckTables<'tcx> {\n     /// If any errors occurred while type-checking this body,\n     /// this field will be set to `true`.\n     pub tainted_by_errors: bool,\n+\n+    /// Stores the free-region relationships that were deduced from\n+    /// its where clauses and parameter types. These are then\n+    /// read-again by borrowck.\n+    pub free_region_map: FreeRegionMap,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -267,6 +272,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             lints: lint::LintTable::new(),\n             used_trait_imports: DefIdSet(),\n             tainted_by_errors: false,\n+            free_region_map: FreeRegionMap::new(),\n         }\n     }\n \n@@ -414,13 +420,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub region_maps: RegionMaps,\n \n-    // For each fn declared in the local crate, type check stores the\n-    // free-region relationships that were deduced from its where\n-    // clauses and parameter types. These are then read-again by\n-    // borrowck. (They are not used during trans, and hence are not\n-    // serialized or needed for cross-crate fns.)\n-    free_region_maps: RefCell<NodeMap<FreeRegionMap>>,\n-\n     pub hir: hir_map::Map<'tcx>,\n     pub maps: maps::Maps<'tcx>,\n \n@@ -645,16 +644,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         interned\n     }\n \n-    pub fn store_free_region_map(self, id: NodeId, map: FreeRegionMap) {\n-        if self.free_region_maps.borrow_mut().insert(id, map).is_some() {\n-            bug!(\"Tried to overwrite interned FreeRegionMap for NodeId {:?}\", id)\n-        }\n-    }\n-\n-    pub fn free_region_map(self, id: NodeId) -> FreeRegionMap {\n-        self.free_region_maps.borrow()[&id].clone()\n-    }\n-\n     pub fn lift<T: ?Sized + Lift<'tcx>>(self, value: &T) -> Option<T::Lifted> {\n         value.lift_to_tcx(self)\n     }\n@@ -707,7 +696,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             types: common_types,\n             named_region_map: named_region_map,\n             region_maps: region_maps,\n-            free_region_maps: RefCell::new(FxHashMap()),\n             variance_computed: Cell::new(false),\n             trait_map: resolutions.trait_map,\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),"}, {"sha": "06133de07576e506affb3eb7892538b9bbe571ee", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -32,14 +32,12 @@ use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n-use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n \n use std::fmt;\n-use std::mem;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n@@ -72,9 +70,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n         match fk {\n             FnKind::ItemFn(..) |\n             FnKind::Method(..) => {\n-                self.with_temp_region_map(id, |this| {\n-                    borrowck_fn(this, fk, fd, b, s, id, fk.attrs())\n-                });\n+                borrowck_fn(self, fk, fd, b, s, id, fk.attrs())\n             }\n \n             FnKind::Closure(..) => {\n@@ -105,7 +101,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n-        free_region_map: FreeRegionMap::new(),\n+        tables: None,\n         stats: BorrowStats {\n             loaned_paths_same: 0,\n             loaned_paths_imm: 0,\n@@ -167,12 +163,15 @@ fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n                          attributes: &[ast::Attribute]) {\n     debug!(\"borrowck_fn(id={})\", id);\n \n+    assert!(this.tables.is_none());\n+    let owner_def_id = this.tcx.hir.local_def_id(this.tcx.hir.body_owner(body_id));\n+    let tables = this.tcx.item_tables(owner_def_id);\n+    this.tables = Some(tables);\n+\n     let body = this.tcx.hir.body(body_id);\n \n     if attributes.iter().any(|item| item.check_name(\"rustc_mir_borrowck\")) {\n-        this.with_temp_region_map(id, |this| {\n-            mir::borrowck_mir(this, id, attributes)\n-        });\n+        mir::borrowck_mir(this, id, attributes);\n     }\n \n     let cfg = cfg::CFG::new(this.tcx, &body.value);\n@@ -191,6 +190,8 @@ fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n \n     check_loans::check_loans(this, &loan_dfcx, &flowed_moves, &all_loans[..], body);\n \n+    this.tables = None;\n+\n     intravisit::walk_fn(this, fk, decl, body_id, sp, id);\n }\n \n@@ -248,7 +249,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n \n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n-        free_region_map: FreeRegionMap::new(),\n+        tables: None,\n         stats: BorrowStats {\n             loaned_paths_same: 0,\n             loaned_paths_imm: 0,\n@@ -267,17 +268,9 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n-    // Hacky. As we visit various fns, we have to load up the\n-    // free-region map for each one. This map is computed by during\n-    // typeck for each fn item and stored -- closures just use the map\n-    // from the fn item that encloses them. Since we walk the fns in\n-    // order, we basically just overwrite this field as we enter a fn\n-    // item and restore it afterwards in a stack-like fashion. Then\n-    // the borrow checking code can assume that `free_region_map` is\n-    // always the correct map for the current fn. Feels like it'd be\n-    // better to just recompute this, rather than store it, but it's a\n-    // bit of a pain to factor that code out at the moment.\n-    free_region_map: FreeRegionMap,\n+    // tables for the current thing we are checking; set to\n+    // Some in `borrowck_fn` and cleared later\n+    tables: Option<&'a ty::TypeckTables<'tcx>>,\n \n     // Statistics:\n     stats: BorrowStats\n@@ -574,19 +567,13 @@ pub enum MovedValueUseKind {\n // Misc\n \n impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n-    fn with_temp_region_map<F>(&mut self, id: ast::NodeId, f: F)\n-        where F: for <'b> FnOnce(&'b mut BorrowckCtxt<'a, 'tcx>)\n-    {\n-        let new_free_region_map = self.tcx.free_region_map(id);\n-        let old_free_region_map = mem::replace(&mut self.free_region_map, new_free_region_map);\n-        f(self);\n-        self.free_region_map = old_free_region_map;\n-    }\n-\n-    pub fn is_subregion_of(&self, r_sub: &'tcx ty::Region, r_sup: &'tcx ty::Region)\n+    pub fn is_subregion_of(&self,\n+                           r_sub: &'tcx ty::Region,\n+                           r_sup: &'tcx ty::Region)\n                            -> bool\n     {\n-        self.free_region_map.is_subregion_of(self.tcx, r_sub, r_sup)\n+        self.tables.unwrap().free_region_map\n+                            .is_subregion_of(self.tcx, r_sub, r_sup)\n     }\n \n     pub fn report(&self, err: BckError<'tcx>) {"}, {"sha": "3dce4398f3b91838a6eec3ef2a3ae3d93ca02c81", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -28,6 +28,7 @@\n #![feature(shared)]\n #![feature(collections_range)]\n #![feature(collections_bound)]\n+#![cfg_attr(stage0,feature(field_init_shorthand))]\n #![feature(nonzero)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "2bce7faf08cec45b91c9654ed4244b0d64383ef3", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use bitvec::BitMatrix;\n+use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use std::cell::RefCell;\n use std::fmt::Debug;\n use std::mem;\n@@ -36,10 +37,10 @@ pub struct TransitiveRelation<T: Debug + PartialEq> {\n     closure: RefCell<Option<BitMatrix>>,\n }\n \n-#[derive(Clone, PartialEq, PartialOrd)]\n+#[derive(Clone, PartialEq, PartialOrd, RustcEncodable, RustcDecodable)]\n struct Index(usize);\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable)]\n struct Edge {\n     source: Index,\n     target: Index,\n@@ -54,6 +55,10 @@ impl<T: Debug + PartialEq> TransitiveRelation<T> {\n         }\n     }\n \n+    pub fn is_empty(&self) -> bool {\n+        self.edges.is_empty()\n+    }\n+\n     fn index(&self, a: &T) -> Option<Index> {\n         self.elements.iter().position(|e| *e == *a).map(Index)\n     }\n@@ -305,6 +310,30 @@ fn pare_down(candidates: &mut Vec<usize>, closure: &BitMatrix) {\n     }\n }\n \n+impl<T> Encodable for TransitiveRelation<T>\n+    where T: Encodable + Debug + PartialEq\n+{\n+    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n+        s.emit_struct(\"TransitiveRelation\", 2, |s| {\n+            s.emit_struct_field(\"elements\", 0, |s| self.elements.encode(s))?;\n+            s.emit_struct_field(\"edges\", 1, |s| self.edges.encode(s))?;\n+            Ok(())\n+        })\n+    }\n+}\n+\n+impl<T> Decodable for TransitiveRelation<T>\n+    where T: Decodable + Debug + PartialEq\n+{\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        d.read_struct(\"TransitiveRelation\", 2, |d| {\n+            let elements = d.read_struct_field(\"elements\", 0, |d| Decodable::decode(d))?;\n+            let edges = d.read_struct_field(\"edges\", 1, |d| Decodable::decode(d))?;\n+            Ok(TransitiveRelation { elements, edges, closure: RefCell::new(None) })\n+        })\n+    }\n+}\n+\n #[test]\n fn test_one_step() {\n     let mut relation = TransitiveRelation::new();"}, {"sha": "8bfb390bd2a5514d76727cc528c2c6b968c4dec8", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -120,6 +120,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_region_obligations(id);\n         }\n         rcx.resolve_regions_and_report_errors();\n+\n+        assert!(self.tables.borrow().free_region_map.is_empty());\n+        self.tables.borrow_mut().free_region_map = rcx.free_region_map;\n     }\n \n     /// Region checking during the WF phase for items. `wf_tys` are the\n@@ -154,10 +157,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         rcx.resolve_regions_and_report_errors();\n \n-        // For the top-level fn, store the free-region-map. We don't store\n-        // any map for closures; they just share the same map as the\n-        // function that created them.\n-        self.tcx.store_free_region_map(fn_id, rcx.free_region_map);\n+        // In this mode, we also copy the free-region-map into the\n+        // tables of the enclosing fcx. In the other regionck modes\n+        // (e.g., `regionck_item`), we don't have an enclosing tables.\n+        assert!(self.tables.borrow().free_region_map.is_empty());\n+        self.tables.borrow_mut().free_region_map = rcx.free_region_map;\n     }\n }\n "}, {"sha": "7fffbd14e216056b71596c1a95ec092d9c31a1a7", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "patch": "@@ -50,6 +50,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_type_nodes();\n         wbcx.visit_cast_types();\n         wbcx.visit_lints();\n+        wbcx.visit_free_region_map();\n \n         let used_trait_imports = mem::replace(&mut self.tables.borrow_mut().used_trait_imports,\n                                               DefIdSet());\n@@ -274,6 +275,10 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         self.fcx.tables.borrow_mut().lints.transfer(&mut self.tables.lints);\n     }\n \n+    fn visit_free_region_map(&mut self) {\n+        self.tables.free_region_map = self.fcx.tables.borrow().free_region_map.clone();\n+    }\n+\n     fn visit_anon_types(&mut self) {\n         let gcx = self.tcx().global_tcx();\n         for (&node_id, &concrete_ty) in self.fcx.anon_types.borrow().iter() {"}]}