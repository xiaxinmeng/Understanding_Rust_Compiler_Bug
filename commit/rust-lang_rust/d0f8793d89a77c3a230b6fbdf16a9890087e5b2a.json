{"sha": "d0f8793d89a77c3a230b6fbdf16a9890087e5b2a", "node_id": "C_kwDOAAsO6NoAKGQwZjg3OTNkODlhNzdjM2EyMzBiNmZiZGYxNmE5ODkwMDg3ZTViMmE", "commit": {"author": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2021-12-04T16:18:03Z"}, "committer": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2021-12-11T12:29:44Z"}, "message": "add BinaryHeap::try_reserve and BinaryHeap::try_reserve_exact\n\nSigned-off-by: TennyZhuang <zty0826@gmail.com>", "tree": {"sha": "e436e85806af7099af4ddc3c19d6ca038c545217", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e436e85806af7099af4ddc3c19d6ca038c545217"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f8793d89a77c3a230b6fbdf16a9890087e5b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8793d89a77c3a230b6fbdf16a9890087e5b2a", "html_url": "https://github.com/rust-lang/rust/commit/d0f8793d89a77c3a230b6fbdf16a9890087e5b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8793d89a77c3a230b6fbdf16a9890087e5b2a/comments", "author": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a66a704b2c3d30ff07d89380ebb9ba3de3b3182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a66a704b2c3d30ff07d89380ebb9ba3de3b3182", "html_url": "https://github.com/rust-lang/rust/commit/4a66a704b2c3d30ff07d89380ebb9ba3de3b3182"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "03645a6e05da99ba7190b623aed1680fe7f54b07", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d0f8793d89a77c3a230b6fbdf16a9890087e5b2a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f8793d89a77c3a230b6fbdf16a9890087e5b2a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=d0f8793d89a77c3a230b6fbdf16a9890087e5b2a", "patch": "@@ -149,6 +149,7 @@ use core::mem::{self, swap, ManuallyDrop};\n use core::ops::{Deref, DerefMut};\n use core::ptr;\n \n+use crate::collections::TryReserveError;\n use crate::slice;\n use crate::vec::{self, AsIntoIter, Vec};\n \n@@ -953,6 +954,84 @@ impl<T> BinaryHeap<T> {\n         self.data.reserve(additional);\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// elements to be inserted in the given `BinaryHeap<T>`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the collection more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: BinaryHeap::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_binary_heap)]\n+    /// use std::collections::BinaryHeap;\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n+    ///     let mut heap = BinaryHeap::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     heap.try_reserve_exact(data.len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     heap.extend(data.iter());\n+    ///\n+    ///     Ok(heap.pop())\n+    /// }\n+    /// # find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_binary_heap\", issue = \"none\")]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.data.try_reserve_exact(additional)\n+    }\n+\n+    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n+    /// in the given `BinaryHeap<T>`. The collection may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_binary_heap)]\n+    /// use std::collections::BinaryHeap;\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n+    ///     let mut heap = BinaryHeap::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     heap.try_reserve(data.len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     heap.extend(data.iter());\n+    ///\n+    ///     Ok(heap.pop())\n+    /// }\n+    /// # find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_binary_heap\", issue = \"none\")]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.data.try_reserve(additional)\n+    }\n+\n     /// Discards as much additional capacity as possible.\n     ///\n     /// # Examples"}]}