{"sha": "009beb00bcbaf5367937e50196d7d40d5d112068", "node_id": "C_kwDOAAsO6NoAKDAwOWJlYjAwYmNiYWY1MzY3OTM3ZTUwMTk2ZDdkNDBkNWQxMTIwNjg", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-29T04:43:13Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-23T23:56:22Z"}, "message": "Change code to use map insead of for-loop", "tree": {"sha": "635af88678d0c06233f81115eec6a54f2a0694be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635af88678d0c06233f81115eec6a54f2a0694be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009beb00bcbaf5367937e50196d7d40d5d112068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009beb00bcbaf5367937e50196d7d40d5d112068", "html_url": "https://github.com/rust-lang/rust/commit/009beb00bcbaf5367937e50196d7d40d5d112068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009beb00bcbaf5367937e50196d7d40d5d112068/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b763f9094fadc06fd65b906d5e8db0a9fd8ec6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b763f9094fadc06fd65b906d5e8db0a9fd8ec6ba", "html_url": "https://github.com/rust-lang/rust/commit/b763f9094fadc06fd65b906d5e8db0a9fd8ec6ba"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "462be8afaafebf2aed58c5f8dcb8127eb1b4e41e", "filename": "compiler/rustc_mir_transform/src/ctfe_limit.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/009beb00bcbaf5367937e50196d7d40d5d112068/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009beb00bcbaf5367937e50196d7d40d5d112068/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs?ref=009beb00bcbaf5367937e50196d7d40d5d112068", "patch": "@@ -1,6 +1,8 @@\n use crate::MirPass;\n \n-use rustc_middle::mir::{BasicBlockData, Body, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::mir::{\n+    BasicBlock, BasicBlockData, Body, Statement, StatementKind, TerminatorKind,\n+};\n use rustc_middle::ty::TyCtxt;\n \n pub struct CtfeLimit;\n@@ -9,28 +11,28 @@ impl<'tcx> MirPass<'tcx> for CtfeLimit {\n     #[instrument(skip(self, _tcx, body))]\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let doms = body.basic_blocks.dominators();\n-        let mut indices = Vec::new();\n-        for (node, node_data) in body.basic_blocks.iter_enumerated() {\n-            if let TerminatorKind::Call { .. } = node_data.terminator().kind {\n-                indices.push(node);\n-                continue;\n-            }\n-            // Back edges in a CFG indicate loops\n-            for (potential_dom, _) in body.basic_blocks.iter_enumerated() {\n-                if doms.is_reachable(potential_dom)\n-                    && doms.is_reachable(node)\n-                    && doms.is_dominated_by(node, potential_dom)\n-                    && node_data\n-                        .terminator()\n-                        .successors()\n-                        .into_iter()\n-                        .any(|succ| succ == potential_dom)\n-                {\n-                    indices.push(node);\n-                    continue;\n-                }\n-            }\n-        }\n+        let indices: Vec<BasicBlock> =\n+            body.basic_blocks\n+                .iter_enumerated()\n+                .filter_map(|(node, node_data)| {\n+                    if matches!(node_data.terminator().kind, TerminatorKind::Call { .. }) ||\n+                    // Back edges in a CFG indicate loops\n+                    body.basic_blocks.iter_enumerated().any(|(potential_dom, _)| {\n+                        doms.is_reachable(potential_dom)\n+                            && doms.is_reachable(node)\n+                            && doms.is_dominated_by(node, potential_dom)\n+                            && node_data\n+                                .terminator()\n+                                .successors()\n+                                .into_iter()\n+                                .any(|succ| succ == potential_dom)\n+                    }) {\n+                        Some(node)\n+                    } else {\n+                        None\n+                    }\n+                })\n+                .collect();\n         for index in indices {\n             insert_counter(\n                 body.basic_blocks_mut()"}]}