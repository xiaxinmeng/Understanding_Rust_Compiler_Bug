{"sha": "2299ba1ca2afdf56000017c70572ed181e174c37", "node_id": "C_kwDOAAsO6NoAKDIyOTliYTFjYTJhZmRmNTYwMDAwMTdjNzA1NzJlZDE4MWUxNzRjMzc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-28T20:10:25Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-28T20:16:10Z"}, "message": "rustdoc: fix weird margins between Deref impl items\n\nIn the old setup, if the dereffed-to item has multiple impl blocks,\neach one gets its own `div.impl-items` in the section, but there\nare no headers separating them. Since the last method in a\n`div.impl-items` has no bottom margin, and there are no margins\nbetween these divs, there is no margin between the last method\nof one impl and the first method of the following impl.\n\nThis patch fixes it by simplifying the HTML. Each Deref block gets\nexactly one `div.impl-items`, no matter how many impl blocks it\nactually has.", "tree": {"sha": "230592b11ab5be37a95f8723cafd1fc884266a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/230592b11ab5be37a95f8723cafd1fc884266a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2299ba1ca2afdf56000017c70572ed181e174c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2299ba1ca2afdf56000017c70572ed181e174c37", "html_url": "https://github.com/rust-lang/rust/commit/2299ba1ca2afdf56000017c70572ed181e174c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2299ba1ca2afdf56000017c70572ed181e174c37/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c77b1cd0027926a966620c988a3af8643314f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c77b1cd0027926a966620c988a3af8643314f2", "html_url": "https://github.com/rust-lang/rust/commit/10c77b1cd0027926a966620c988a3af8643314f2"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "d90d0aecb93ad5e6d9ff6624b1d22e45d3c4b9df", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2299ba1ca2afdf56000017c70572ed181e174c37/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2299ba1ca2afdf56000017c70572ed181e174c37/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2299ba1ca2afdf56000017c70572ed181e174c37", "patch": "@@ -1155,10 +1155,10 @@ fn render_assoc_items_inner(\n     let (non_trait, traits): (Vec<_>, _) = v.iter().partition(|i| i.inner_impl().trait_.is_none());\n     if !non_trait.is_empty() {\n         let mut tmp_buf = Buffer::html();\n-        let (render_mode, id) = match what {\n+        let (render_mode, id, class_html) = match what {\n             AssocItemRender::All => {\n                 write_impl_section_heading(&mut tmp_buf, \"Implementations\", \"implementations\");\n-                (RenderMode::Normal, \"implementations-list\".to_owned())\n+                (RenderMode::Normal, \"implementations-list\".to_owned(), \"\")\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n                 let id =\n@@ -1175,7 +1175,11 @@ fn render_assoc_items_inner(\n                     ),\n                     &id,\n                 );\n-                (RenderMode::ForDeref { mut_: deref_mut_ }, cx.derive_id(id))\n+                (\n+                    RenderMode::ForDeref { mut_: deref_mut_ },\n+                    cx.derive_id(id),\n+                    r#\" class=\"impl-items\"\"#,\n+                )\n             }\n         };\n         let mut impls_buf = Buffer::html();\n@@ -1199,7 +1203,7 @@ fn render_assoc_items_inner(\n         }\n         if !impls_buf.is_empty() {\n             write!(w, \"{}\", tmp_buf.into_inner()).unwrap();\n-            write!(w, \"<div id=\\\"{}\\\">\", id).unwrap();\n+            write!(w, \"<div id=\\\"{id}\\\"{class_html}>\").unwrap();\n             write!(w, \"{}\", impls_buf.into_inner()).unwrap();\n             w.write_str(\"</div>\").unwrap();\n         }\n@@ -1788,12 +1792,14 @@ fn render_impl(\n                 .into_string()\n             );\n         }\n+        if !default_impl_items.is_empty() || !impl_items.is_empty() {\n+            w.write_str(\"<div class=\\\"impl-items\\\">\");\n+            close_tags.insert_str(0, \"</div>\");\n+        }\n     }\n     if !default_impl_items.is_empty() || !impl_items.is_empty() {\n-        w.write_str(\"<div class=\\\"impl-items\\\">\");\n         w.push_buffer(default_impl_items);\n         w.push_buffer(impl_items);\n-        close_tags.insert_str(0, \"</div>\");\n     }\n     w.write_str(&close_tags);\n }"}, {"sha": "fa3607c5fc12d711be9dfc24f7b7779a2150b3f1", "filename": "tests/rustdoc/deref/deref-multiple-impl-blocks.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2299ba1ca2afdf56000017c70572ed181e174c37/tests%2Frustdoc%2Fderef%2Fderef-multiple-impl-blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2299ba1ca2afdf56000017c70572ed181e174c37/tests%2Frustdoc%2Fderef%2Fderef-multiple-impl-blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fderef%2Fderef-multiple-impl-blocks.rs?ref=2299ba1ca2afdf56000017c70572ed181e174c37", "patch": "@@ -0,0 +1,43 @@\n+#![crate_name=\"foo\"]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+// @has foo/struct.Vec.html\n+// @count - '//h2[@id=\"deref-methods-Slice\"]' 1\n+// @count - '//div[@id=\"deref-methods-Slice-1\"]' 1\n+// @count - '//div[@id=\"deref-methods-Slice-1\"][@class=\"impl-items\"]' 1\n+// @count - '//div[@id=\"deref-methods-Slice-1\"]/div[@class=\"impl-items\"]' 0\n+pub struct Vec;\n+\n+pub struct Slice;\n+\n+impl Deref for Vec {\n+    type Target = Slice;\n+    fn deref(&self) -> &Slice {\n+        &Slice\n+    }\n+}\n+\n+impl DerefMut for Vec {\n+    fn deref_mut(&mut self) -> &mut Slice {\n+        &mut Slice\n+    }\n+}\n+\n+impl Slice {\n+    pub fn sort_floats(&mut self) {\n+        todo!();\n+    }\n+}\n+\n+impl Slice {\n+    pub fn sort(&mut self) {\n+        todo!();\n+    }\n+}\n+\n+impl Slice {\n+    pub fn len(&self) {\n+        todo!();\n+    }\n+}"}]}