{"sha": "1ce6645d1f6e80325f2c13ae72b879c66d09c644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTY2NDVkMWY2ZTgwMzI1ZjJjMTNhZTcyYjg3OWM2NmQwOWM2NDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-12T10:41:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-12T10:41:17Z"}, "message": "MaybeUninit: remove deprecated functions", "tree": {"sha": "d8e28082da0a9dff2142e4733f3d9a372bc364b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8e28082da0a9dff2142e4733f3d9a372bc364b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce6645d1f6e80325f2c13ae72b879c66d09c644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce6645d1f6e80325f2c13ae72b879c66d09c644", "html_url": "https://github.com/rust-lang/rust/commit/1ce6645d1f6e80325f2c13ae72b879c66d09c644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce6645d1f6e80325f2c13ae72b879c66d09c644/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2226c09699a96520238e162777f44504f4a0a1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2226c09699a96520238e162777f44504f4a0a1a7", "html_url": "https://github.com/rust-lang/rust/commit/2226c09699a96520238e162777f44504f4a0a1a7"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "e887426554701deef8436f873acbce82b916af8c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1ce6645d1f6e80325f2c13ae72b879c66d09c644/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce6645d1f6e80325f2c13ae72b879c66d09c644/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=1ce6645d1f6e80325f2c13ae72b879c66d09c644", "patch": "@@ -1152,15 +1152,6 @@ impl<T> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    // FIXME: still used by stdsimd\n-    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `uninit` instead\")]\n-    pub const fn uninitialized() -> MaybeUninit<T> {\n-        Self::uninit()\n-    }\n-\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,\n@@ -1221,14 +1212,6 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `write` instead\")]\n-    pub fn set(&mut self, val: T) -> &mut T {\n-        self.write(val)\n-    }\n-\n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n     /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.\n     ///\n@@ -1346,15 +1329,6 @@ impl<T> MaybeUninit<T> {\n         ManuallyDrop::into_inner(self.value)\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    // FIXME: still used by stdsimd\n-    // #[rustc_deprecated(since = \"1.35.0\", reason = \"use `assume_init` instead\")]\n-    pub unsafe fn into_initialized(self) -> T {\n-        self.assume_init()\n-    }\n-\n     /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject\n     /// to the usual drop handling.\n     ///\n@@ -1417,14 +1391,6 @@ impl<T> MaybeUninit<T> {\n         self.as_ptr().read()\n     }\n \n-    /// Deprecated before stabilization.\n-    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-    #[inline(always)]\n-    #[rustc_deprecated(since = \"1.35.0\", reason = \"use `read` instead\")]\n-    pub unsafe fn read_initialized(&self) -> T {\n-        self.read()\n-    }\n-\n     /// Gets a reference to the contained value.\n     ///\n     /// # Safety"}]}