{"sha": "e0e51e418906916123b3bd15c175d80d3dc74bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZTUxZTQxODkwNjkxNjEyM2IzYmQxNWMxNzVkODBkM2RjNzRiZjI=", "commit": {"author": {"name": "Pierre-Andre Gagnon", "email": "pagagnon@gmail.com", "date": "2021-02-03T00:14:13Z"}, "committer": {"name": "Pierre-Andre Gagnon", "email": "pagagnon@gmail.com", "date": "2021-02-03T00:14:13Z"}, "message": "Fixed test", "tree": {"sha": "4dd13d0c2a1509124ea84d13630cceb0168f4163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dd13d0c2a1509124ea84d13630cceb0168f4163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e51e418906916123b3bd15c175d80d3dc74bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e51e418906916123b3bd15c175d80d3dc74bf2", "html_url": "https://github.com/rust-lang/rust/commit/e0e51e418906916123b3bd15c175d80d3dc74bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e51e418906916123b3bd15c175d80d3dc74bf2/comments", "author": {"login": "pag4k", "id": 32080686, "node_id": "MDQ6VXNlcjMyMDgwNjg2", "avatar_url": "https://avatars.githubusercontent.com/u/32080686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pag4k", "html_url": "https://github.com/pag4k", "followers_url": "https://api.github.com/users/pag4k/followers", "following_url": "https://api.github.com/users/pag4k/following{/other_user}", "gists_url": "https://api.github.com/users/pag4k/gists{/gist_id}", "starred_url": "https://api.github.com/users/pag4k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pag4k/subscriptions", "organizations_url": "https://api.github.com/users/pag4k/orgs", "repos_url": "https://api.github.com/users/pag4k/repos", "events_url": "https://api.github.com/users/pag4k/events{/privacy}", "received_events_url": "https://api.github.com/users/pag4k/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pag4k", "id": 32080686, "node_id": "MDQ6VXNlcjMyMDgwNjg2", "avatar_url": "https://avatars.githubusercontent.com/u/32080686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pag4k", "html_url": "https://github.com/pag4k", "followers_url": "https://api.github.com/users/pag4k/followers", "following_url": "https://api.github.com/users/pag4k/following{/other_user}", "gists_url": "https://api.github.com/users/pag4k/gists{/gist_id}", "starred_url": "https://api.github.com/users/pag4k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pag4k/subscriptions", "organizations_url": "https://api.github.com/users/pag4k/orgs", "repos_url": "https://api.github.com/users/pag4k/repos", "events_url": "https://api.github.com/users/pag4k/events{/privacy}", "received_events_url": "https://api.github.com/users/pag4k/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbc0835870f8bf6cde79a01dfe7de351dde14aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbc0835870f8bf6cde79a01dfe7de351dde14aa", "html_url": "https://github.com/rust-lang/rust/commit/bfbc0835870f8bf6cde79a01dfe7de351dde14aa"}], "stats": {"total": 124, "additions": 116, "deletions": 8}, "files": [{"sha": "7da42ba3934f20282ffa2d41d7ff7229510063f0", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e51e418906916123b3bd15c175d80d3dc74bf2/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e51e418906916123b3bd15c175d80d3dc74bf2/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=e0e51e418906916123b3bd15c175d80d3dc74bf2", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                     UNNECESSARY_WRAPS,\n                     fn_decl.output.span(),\n                     \"unneeded wrapped unit return type\",\n-                    format!(\"remove the `-> {}<()>`\", return_type_label).as_str(),\n+                    format!(\"remove the `-> {}<[...]>`\", return_type_label).as_str(),\n                     String::new(),\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "5aaa99bbe5a39bee7485dc2405af0733bd99657d", "filename": "tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0e51e418906916123b3bd15c175d80d3dc74bf2/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e51e418906916123b3bd15c175d80d3dc74bf2/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=e0e51e418906916123b3bd15c175d80d3dc74bf2", "patch": "@@ -135,7 +135,6 @@ fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n         return Ok(());\n     }\n     if a {\n-        Ok(());\n         Ok(())\n     } else {\n         return Ok(());"}, {"sha": "f28981f9e34a80a7c67abc684d6b74b505793a26", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "modified", "additions": 115, "deletions": 6, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e0e51e418906916123b3bd15c175d80d3dc74bf2/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e51e418906916123b3bd15c175d80d3dc74bf2/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=e0e51e418906916123b3bd15c175d80d3dc74bf2", "patch": "@@ -1,9 +1,118 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/unnecessary_wraps.rs:138:9\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:8:1\n    |\n-LL |         Ok(());\n-   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n+LL | / fn func1(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(42);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::unnecessary-wraps` implied by `-D warnings`\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func1(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 42;\n+LL |     }\n+LL |     if a {\n+LL |         Some(-1);\n+LL |         2\n+LL |     } else {\n+ ...\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:21:1\n+   |\n+LL | / fn func2(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(10);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func2(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 10;\n+LL |     }\n+LL |     if a {\n+LL |         20\n+LL |     } else {\n+LL |         30\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:51:1\n+   |\n+LL | / fn func5() -> Option<i32> {\n+LL | |     Some(1)\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func5() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |     1\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Result`\n+  --> $DIR/unnecessary_wraps.rs:61:1\n+   |\n+LL | / fn func7() -> Result<i32, ()> {\n+LL | |     Ok(1)\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Result` from the return type...\n+   |\n+LL | fn func7() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |     1\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:93:5\n+   |\n+LL | /     fn func12() -> Option<i32> {\n+LL | |         Some(1)\n+LL | |     }\n+   | |_____^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL |     fn func12() -> i32 {\n+   |                    ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         1\n+   |\n+\n+error: unneeded wrapped unit return type\n+  --> $DIR/unnecessary_wraps.rs:120:38\n+   |\n+LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n+   |                                      ^^^^^^^^^^ help: remove the `-> Option<[...]>`\n+\n+error: unneeded wrapped unit return type\n+  --> $DIR/unnecessary_wraps.rs:133:38\n+   |\n+LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n+   |                                      ^^^^^^^^^^^^^^^ help: remove the `-> Result<[...]>`\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0282`."}]}