{"sha": "785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "node_id": "C_kwDOAAsO6NoAKDc4NWI0N2Q5MmEwNTE5ZTRiY2MxYTlkZDJjMGMyODA2N2UwODJmZjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-04T10:38:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-04T10:38:50Z"}, "message": "Rollup merge of #104856 - luqmana:associated-const-bad-suggestion, r=compiler-errors\n\nDon't suggest associated function call for associated const.\n\nFixes #104801.\n\nr? `@compiler-errors`", "tree": {"sha": "c3abc8e9fb92006c704befa9b63c8dfe048871a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3abc8e9fb92006c704befa9b63c8dfe048871a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjHi6CRBK7hj4Ov3rIwAABPoIAGwhL5hZGxLAY0UL58kqalJC\nJClvzPY//Wvp8knDxx3mz/0K7ILCmN4ViX0NI+yvn7kpcCPfPKIGOaPl9gBpK/+6\nk3zZPZ1NdSbfxL3Tq3UuNHv9swphdM0WMIm3dMN1chW4Mg6qfgFV0xc/zQP3gXkq\nYH41ju1aD7B8rtIckbZWveWCEngpGZqprog5VfejRdAk2NdVkaF57hZvEEAtvHnV\nXTv/5xAGPXL0rB1NwzGIrJcJXr65sG9KmC02XMRlY9mNznmkaSH8AWLH17ixx/3M\n6B/klifQ7v0scayuqKpCFdNeRYzRoEJqZTB+kGySIsujfX4Z/vy3cBykCMccDNg=\n=HjEe\n-----END PGP SIGNATURE-----\n", "payload": "tree c3abc8e9fb92006c704befa9b63c8dfe048871a9\nparent fd02567705326884ddb94535d2ab230a9595dc2a\nparent 7054287b0d52cd1be5dc50e6a11fa7dcace8029f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670150330 +0100\ncommitter GitHub <noreply@github.com> 1670150330 +0100\n\nRollup merge of #104856 - luqmana:associated-const-bad-suggestion, r=compiler-errors\n\nDon't suggest associated function call for associated const.\n\nFixes #104801.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "html_url": "https://github.com/rust-lang/rust/commit/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd02567705326884ddb94535d2ab230a9595dc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd02567705326884ddb94535d2ab230a9595dc2a", "html_url": "https://github.com/rust-lang/rust/commit/fd02567705326884ddb94535d2ab230a9595dc2a"}, {"sha": "7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7054287b0d52cd1be5dc50e6a11fa7dcace8029f", "html_url": "https://github.com/rust-lang/rust/commit/7054287b0d52cd1be5dc50e6a11fa7dcace8029f"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "ae299cc9d13706d1402600eef7c2a61328144f87", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1876,6 +1875,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.tcx.erase_late_bound_regions(value)\n     }\n \n+    /// Determine if the given associated item type is relevant in the current context.\n+    fn is_relevant_kind_for_mode(&self, kind: ty::AssocKind) -> bool {\n+        match (self.mode, kind) {\n+            (Mode::MethodCall, ty::AssocKind::Fn) => true,\n+            (Mode::Path, ty::AssocKind::Const | ty::AssocKind::Fn) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Finds the method with the appropriate name (or return type, as the case may be). If\n     /// `allow_similar_names` is set, find methods with close-matching names.\n     // The length of the returned iterator is nearly always 0 or 1 and this\n@@ -1888,7 +1896,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .associated_items(def_id)\n                     .in_definition_order()\n                     .filter(|x| {\n-                        if x.kind.namespace() != Namespace::ValueNS {\n+                        if !self.is_relevant_kind_for_mode(x.kind) {\n                             return false;\n                         }\n                         match lev_distance_with_substrings(name.as_str(), x.name.as_str(), max_dist)\n@@ -1902,10 +1910,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_value(def_id, name)\n+                    .filter(|x| self.is_relevant_kind_for_mode(x.kind))\n                     .map_or_else(SmallVec::new, |x| SmallVec::from_buf([x]))\n             }\n         } else {\n-            self.tcx.associated_items(def_id).in_definition_order().copied().collect()\n+            self.tcx\n+                .associated_items(def_id)\n+                .in_definition_order()\n+                .filter(|x| self.is_relevant_kind_for_mode(x.kind))\n+                .copied()\n+                .collect()\n         }\n     }\n }"}, {"sha": "0d9543e0b8fa22d61ae4280b051aabe571f7aeef", "filename": "src/test/ui/suggestions/dont-suggest-ufcs-for-const.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr?ref=785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "patch": "@@ -2,13 +2,7 @@ error[E0599]: no method named `MAX` found for type `u32` in the current scope\n   --> $DIR/dont-suggest-ufcs-for-const.rs:2:11\n    |\n LL |     1_u32.MAX();\n-   |     ------^^^--\n-   |     |     |\n-   |     |     this is an associated function, not a method\n-   |     help: use associated function syntax instead: `u32::MAX()`\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = note: the candidate is defined in an impl for the type `u32`\n+   |           ^^^ method not found in `u32`\n \n error: aborting due to previous error\n "}]}