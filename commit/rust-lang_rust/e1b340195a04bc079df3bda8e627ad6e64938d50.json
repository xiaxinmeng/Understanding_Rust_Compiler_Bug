{"sha": "e1b340195a04bc079df3bda8e627ad6e64938d50", "node_id": "C_kwDOAAsO6NoAKGUxYjM0MDE5NWEwNGJjMDc5ZGYzYmRhOGU2MjdhZDZlNjQ5MzhkNTA", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-14T03:52:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-15T18:27:05Z"}, "message": "Suggest `#[derive(Clone)]`", "tree": {"sha": "a77d10cee9c68437e4dfda5fa76f09c4474ced7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a77d10cee9c68437e4dfda5fa76f09c4474ced7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1b340195a04bc079df3bda8e627ad6e64938d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b340195a04bc079df3bda8e627ad6e64938d50", "html_url": "https://github.com/rust-lang/rust/commit/e1b340195a04bc079df3bda8e627ad6e64938d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1b340195a04bc079df3bda8e627ad6e64938d50/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f19488064a4752703fde8a3596a9d90ca2095534", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19488064a4752703fde8a3596a9d90ca2095534", "html_url": "https://github.com/rust-lang/rust/commit/f19488064a4752703fde8a3596a9d90ca2095534"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "407d6ac8544c211a8cce00fa74b0cfb983bddbea", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1b340195a04bc079df3bda8e627ad6e64938d50/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b340195a04bc079df3bda8e627ad6e64938d50/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=e1b340195a04bc079df3bda8e627ad6e64938d50", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::infer;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{\n-    self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, Ty,\n+    self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n@@ -1278,15 +1278,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n+            && let trait_ref = ty::Binder::dummy(self.tcx.mk_trait_ref(clone_trait_did, [expected_ty]))\n             // And the expected type doesn't implement `Clone`\n             && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n                 self.tcx,\n                 traits::ObligationCause::dummy(),\n                 self.param_env,\n-                ty::Binder::dummy(self.tcx.mk_trait_ref(\n-                    clone_trait_did,\n-                    [expected_ty],\n-                )),\n+                trait_ref,\n             ))\n         {\n             diag.span_note(\n@@ -1305,6 +1303,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     diag,\n                     vec![(param.name.as_str(), \"Clone\", Some(clone_trait_did))].into_iter(),\n                 );\n+            } else {\n+                self.suggest_derive(diag, &[(trait_ref.to_predicate(self.tcx), None, None)]);\n             }\n         }\n     }"}, {"sha": "6b3cc26fd761f201298a02c0aef82b839b209399", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b340195a04bc079df3bda8e627ad6e64938d50/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b340195a04bc079df3bda8e627ad6e64938d50/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=e1b340195a04bc079df3bda8e627ad6e64938d50", "patch": "@@ -1848,7 +1848,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_derive(err, &preds);\n     }\n \n-    fn suggest_derive(\n+    pub fn suggest_derive(\n         &self,\n         err: &mut Diagnostic,\n         unsatisfied_predicates: &[("}, {"sha": "4f9e93a47ed1c6bf88bcf5147cf0bff0b48f7322", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.fixed?ref=e1b340195a04bc079df3bda8e627ad6e64938d50", "patch": "@@ -3,6 +3,14 @@ fn wat<T: Clone>(t: &T) -> T {\n     t.clone() //~ ERROR E0308\n }\n \n+#[derive(Clone)]\n+struct Foo;\n+\n+fn wut(t: &Foo) -> Foo {\n+    t.clone() //~ ERROR E0308\n+}\n+\n fn main() {\n     wat(&42);\n+    wut(&Foo);\n }"}, {"sha": "89b077d671a513b6018173e77d8e8cf702e89bcb", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.rs?ref=e1b340195a04bc079df3bda8e627ad6e64938d50", "patch": "@@ -3,6 +3,13 @@ fn wat<T>(t: &T) -> T {\n     t.clone() //~ ERROR E0308\n }\n \n+struct Foo;\n+\n+fn wut(t: &Foo) -> Foo {\n+    t.clone() //~ ERROR E0308\n+}\n+\n fn main() {\n     wat(&42);\n+    wut(&Foo);\n }"}, {"sha": "26ab515d9b4b6fd0c84c8b5c58d818ecf88fdf98", "filename": "src/test/ui/suggestions/clone-on-unconstrained-borrowed-type-param.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr?ref=e1b340195a04bc079df3bda8e627ad6e64938d50", "patch": "@@ -20,6 +20,24 @@ help: consider restricting type parameter `T`\n LL | fn wat<T: Clone>(t: &T) -> T {\n    |         +++++++\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:9:5\n+   |\n+LL | fn wut(t: &Foo) -> Foo {\n+   |                    --- expected `Foo` because of return type\n+LL |     t.clone()\n+   |     ^^^^^^^^^ expected struct `Foo`, found `&Foo`\n+   |\n+note: `Foo` does not implement `Clone`, so `&Foo` was cloned instead\n+  --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:9:5\n+   |\n+LL |     t.clone()\n+   |     ^\n+help: consider annotating `Foo` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ff36e18d28301ef3b1934208e8ed2175a8ecbe9f", "filename": "src/test/ui/typeck/explain_clone_autoref.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b340195a04bc079df3bda8e627ad6e64938d50/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr?ref=e1b340195a04bc079df3bda8e627ad6e64938d50", "patch": "@@ -12,6 +12,10 @@ note: `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n    |\n LL |     nc.clone()\n    |     ^^\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}]}