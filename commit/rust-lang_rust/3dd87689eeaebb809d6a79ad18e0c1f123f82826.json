{"sha": "3dd87689eeaebb809d6a79ad18e0c1f123f82826", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDg3Njg5ZWVhZWJiODA5ZDZhNzlhZDE4ZTBjMWYxMjNmODI4MjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T21:20:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T21:20:46Z"}, "message": "Try to fix win32 breakage on os.", "tree": {"sha": "43f791b09cf5526b8dd9ca4431143df0e9f11847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f791b09cf5526b8dd9ca4431143df0e9f11847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd87689eeaebb809d6a79ad18e0c1f123f82826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd87689eeaebb809d6a79ad18e0c1f123f82826", "html_url": "https://github.com/rust-lang/rust/commit/3dd87689eeaebb809d6a79ad18e0c1f123f82826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd87689eeaebb809d6a79ad18e0c1f123f82826/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11", "html_url": "https://github.com/rust-lang/rust/commit/b41d5146cc4a80568a7a1e9bff2e6b89a91f9c11"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "5d880e7cb595520d7a73d7b43f0171b3a2d2924f", "filename": "src/libcore/os.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3dd87689eeaebb809d6a79ad18e0c1f123f82826/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd87689eeaebb809d6a79ad18e0c1f123f82826/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=3dd87689eeaebb809d6a79ad18e0c1f123f82826", "patch": "@@ -66,24 +66,23 @@ pub fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n \n #[cfg(windows)]\n mod win32 {\n-    use dword = libc::DWORD;\n+    use libc::DWORD;\n \n-    fn fill_utf16_buf_and_decode(f: fn(*mut u16, dword) -> dword)\n+    fn fill_utf16_buf_and_decode(f: fn(*mut u16, DWORD) -> DWORD)\n         -> Option<~str> {\n-        use libc::dword;\n-        let mut n = tmpbuf_sz as dword;\n+        let mut n = tmpbuf_sz as DWORD;\n         let mut res = None;\n         let mut done = false;\n         while !done {\n             let buf = vec::to_mut(vec::from_elem(n as uint, 0u16));\n             do vec::as_mut_buf(buf) |b, _sz| {\n-                let k : dword = f(b, tmpbuf_sz as dword);\n-                if k == (0 as dword) {\n+                let k : DWORD = f(b, tmpbuf_sz as DWORD);\n+                if k == (0 as DWORD) {\n                     done = true;\n                 } else if (k == n &&\n                            libc::GetLastError() ==\n-                           libc::ERROR_INSUFFICIENT_BUFFER as dword) {\n-                    n *= (2 as dword);\n+                           libc::ERROR_INSUFFICIENT_BUFFER as DWORD) {\n+                    n *= (2 as DWORD);\n                 } else {\n                     let sub = vec::slice(buf, 0u, k as uint);\n                     res = option::Some(str::from_utf16(sub));\n@@ -394,7 +393,7 @@ pub fn self_exe_path() -> Option<Path> {\n     fn load_self() -> Option<~str> {\n         use win32::*;\n         do fill_utf16_buf_and_decode() |buf, sz| {\n-            libc::GetModuleFileNameW(0u as libc::dword, buf, sz)\n+            libc::GetModuleFileNameW(0u as libc::DWORD, buf, sz)\n         }\n     }\n "}]}