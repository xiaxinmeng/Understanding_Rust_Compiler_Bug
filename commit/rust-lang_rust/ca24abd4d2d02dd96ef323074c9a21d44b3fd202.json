{"sha": "ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMjRhYmQ0ZDJkMDJkZDk2ZWYzMjMwNzRjOWEyMWQ0NGIzZmQyMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T18:56:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T18:56:22Z"}, "message": "auto merge of #15716 : treeman/rust/bigint-doc, r=alexcrichton\n\nAlso use `///` for documentation instead of `/**`. End comments with `.`.", "tree": {"sha": "b7ca2d6f33db79c5a8ad4e1f091f5b28fc0c6bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ca2d6f33db79c5a8ad4e1f091f5b28fc0c6bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "html_url": "https://github.com/rust-lang/rust/commit/ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca24abd4d2d02dd96ef323074c9a21d44b3fd202/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b1077dfbc835f1d1d1a9efbc9b11d6b9c0e35d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b1077dfbc835f1d1d1a9efbc9b11d6b9c0e35d", "html_url": "https://github.com/rust-lang/rust/commit/c4b1077dfbc835f1d1d1a9efbc9b11d6b9c0e35d"}, {"sha": "428c7bc1296de59fc46bb777639c540f6e6dd15a", "url": "https://api.github.com/repos/rust-lang/rust/commits/428c7bc1296de59fc46bb777639c540f6e6dd15a", "html_url": "https://github.com/rust-lang/rust/commit/428c7bc1296de59fc46bb777639c540f6e6dd15a"}], "stats": {"total": 110, "additions": 68, "deletions": 42}, "files": [{"sha": "acba750aaf4ac0d745f2c0b8014188050f1932b5", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 68, "deletions": 42, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ca24abd4d2d02dd96ef323074c9a21d44b3fd202/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca24abd4d2d02dd96ef323074c9a21d44b3fd202/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "patch": "@@ -8,13 +8,53 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n-\n-A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).\n-\n-A `BigUint` is represented as an array of `BigDigit`s.\n-A `BigInt` is a combination of `BigUint` and `Sign`.\n-*/\n+//! A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).\n+//!\n+//! A `BigUint` is represented as an array of `BigDigit`s.\n+//! A `BigInt` is a combination of `BigUint` and `Sign`.\n+//!\n+//! Common numerical operations are overloaded, so we can treat them\n+//! the same way we treat other numbers.\n+//!\n+//! ## Example\n+//!\n+//! ```rust\n+//! use num::bigint::BigUint;\n+//! use std::num::{Zero, One};\n+//! use std::mem::replace;\n+//!\n+//! // Calculate large fibonacci numbers.\n+//! fn fib(n: uint) -> BigUint {\n+//!     let mut f0: BigUint = Zero::zero();\n+//!     let mut f1: BigUint = One::one();\n+//!     for _ in range(0, n) {\n+//!         let f2 = f0 + f1;\n+//!         // This is a low cost way of swapping f0 with f1 and f1 with f2.\n+//!         f0 = replace(&mut f1, f2);\n+//!     }\n+//!     f0\n+//! }\n+//!\n+//! // This is a very large number.\n+//! println!(\"fib(1000) = {}\", fib(1000));\n+//! ```\n+//!\n+//! It's easy to generate large random numbers:\n+//!\n+//! ```rust\n+//! use num::bigint::{ToBigInt, RandBigInt};\n+//! use std::rand;\n+//!\n+//! let mut rng = rand::task_rng();\n+//! let a = rng.gen_bigint(1000u);\n+//!\n+//! let low = -10000i.to_bigint().unwrap();\n+//! let high = 10000i.to_bigint().unwrap();\n+//! let b = rng.gen_bigint_range(&low, &high);\n+//!\n+//! // Probably an even larger number.\n+//! println!(\"{}\", a * b);\n+//! ```\n \n use Integer;\n use rand::Rng;\n@@ -28,15 +68,11 @@ use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n use std::string::String;\n use std::{uint, i64, u64};\n \n-/**\n-A `BigDigit` is a `BigUint`'s composing element.\n-*/\n+/// A `BigDigit` is a `BigUint`'s composing element.\n pub type BigDigit = u32;\n \n-/**\n-A `DoubleBigDigit` is the internal type used to do the computations.  Its\n-size is the double of the size of `BigDigit`.\n-*/\n+/// A `DoubleBigDigit` is the internal type used to do the computations.  Its\n+/// size is the double of the size of `BigDigit`.\n pub type DoubleBigDigit = u64;\n \n pub static ZERO_BIG_DIGIT: BigDigit = 0;\n@@ -70,12 +106,10 @@ pub mod BigDigit {\n     }\n }\n \n-/**\n-A big unsigned integer type.\n-\n-A `BigUint`-typed value `BigUint { data: vec!(a, b, c) }` represents a number\n-`(a + b * BigDigit::base + c * BigDigit::base^2)`.\n-*/\n+/// A big unsigned integer type.\n+///\n+/// A `BigUint`-typed value `BigUint { data: vec!(a, b, c) }` represents a number\n+/// `(a + b * BigDigit::base + c * BigDigit::base^2)`.\n #[deriving(Clone)]\n pub struct BigUint {\n     data: Vec<BigDigit>\n@@ -460,11 +494,9 @@ impl Integer for BigUint {\n         }\n     }\n \n-    /**\n-     * Calculates the Greatest Common Divisor (GCD) of the number and `other`\n-     *\n-     * The result is always positive\n-     */\n+    /// Calculates the Greatest Common Divisor (GCD) of the number and `other`.\n+    ///\n+    /// The result is always positive.\n     #[inline]\n     fn gcd(&self, other: &BigUint) -> BigUint {\n         // Use Euclid's algorithm\n@@ -478,17 +510,15 @@ impl Integer for BigUint {\n         return n;\n     }\n \n-    /**\n-     * Calculates the Lowest Common Multiple (LCM) of the number and `other`\n-     */\n+    /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n     #[inline]\n     fn lcm(&self, other: &BigUint) -> BigUint { ((*self * *other) / self.gcd(other)) }\n \n-    /// Returns `true` if the number can be divided by `other` without leaving a remainder\n+    /// Returns `true` if the number can be divided by `other` without leaving a remainder.\n     #[inline]\n     fn divides(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n \n-    /// Returns `true` if the number is divisible by `2`\n+    /// Returns `true` if the number is divisible by `2`.\n     #[inline]\n     fn is_even(&self) -> bool {\n         // Considering only the last digit.\n@@ -498,7 +528,7 @@ impl Integer for BigUint {\n         }\n     }\n \n-    /// Returns `true` if the number is not divisible by `2`\n+    /// Returns `true` if the number is not divisible by `2`.\n     #[inline]\n     fn is_odd(&self) -> bool { !self.is_even() }\n }\n@@ -1068,33 +1098,29 @@ impl Integer for BigInt {\n         }\n     }\n \n-    /**\n-     * Calculates the Greatest Common Divisor (GCD) of the number and `other`\n-     *\n-     * The result is always positive\n-     */\n+    /// Calculates the Greatest Common Divisor (GCD) of the number and `other`.\n+    ///\n+    /// The result is always positive.\n     #[inline]\n     fn gcd(&self, other: &BigInt) -> BigInt {\n         BigInt::from_biguint(Plus, self.data.gcd(&other.data))\n     }\n \n-    /**\n-     * Calculates the Lowest Common Multiple (LCM) of the number and `other`\n-     */\n+    /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n     #[inline]\n     fn lcm(&self, other: &BigInt) -> BigInt {\n         BigInt::from_biguint(Plus, self.data.lcm(&other.data))\n     }\n \n-    /// Returns `true` if the number can be divided by `other` without leaving a remainder\n+    /// Returns `true` if the number can be divided by `other` without leaving a remainder.\n     #[inline]\n     fn divides(&self, other: &BigInt) -> bool { self.data.divides(&other.data) }\n \n-    /// Returns `true` if the number is divisible by `2`\n+    /// Returns `true` if the number is divisible by `2`.\n     #[inline]\n     fn is_even(&self) -> bool { self.data.is_even() }\n \n-    /// Returns `true` if the number is not divisible by `2`\n+    /// Returns `true` if the number is not divisible by `2`.\n     #[inline]\n     fn is_odd(&self) -> bool { self.data.is_odd() }\n }"}]}