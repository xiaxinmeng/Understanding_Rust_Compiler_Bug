{"sha": "81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "node_id": "C_kwDOAAsO6NoAKDgxZWU4YzEzZGMzZTEwY2Y0ZjAyOGZhZjE5YTU1ODVhNzNjNWYzZDM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T12:40:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T12:40:56Z"}, "message": "Merge from rustc", "tree": {"sha": "42fccf6efba5658f7809b2a9b2ae40610d9b2510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42fccf6efba5658f7809b2a9b2ae40610d9b2510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "html_url": "https://github.com/rust-lang/rust/commit/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f6a1b9310c3039bbfcffcb5bd1d13dff349a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f6a1b9310c3039bbfcffcb5bd1d13dff349a46", "html_url": "https://github.com/rust-lang/rust/commit/e2f6a1b9310c3039bbfcffcb5bd1d13dff349a46"}, {"sha": "9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "html_url": "https://github.com/rust-lang/rust/commit/9a9d0f40b8f01c56407e1077231edf61ffcf14fa"}], "stats": {"total": 1589, "additions": 1091, "deletions": 498}, "files": [{"sha": "db0d8b08a947f9521d7840d448d9c149b218abdc", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -11,7 +11,7 @@ use super::LoweringContext;\n \n use rustc_ast::ptr::P;\n use rustc_ast::*;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::definitions::DefPathData;\n@@ -71,7 +71,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .emit();\n         }\n \n-        let mut clobber_abis = FxHashMap::default();\n+        let mut clobber_abis = FxIndexMap::default();\n         if let Some(asm_arch) = asm_arch {\n             for (abi_name, abi_span) in &asm.clobber_abis {\n                 match asm::InlineAsmClobberAbi::parse(asm_arch, &self.tcx.sess.target, *abi_name) {"}, {"sha": "01716859a9ddf94b23d8aff4f6b8afa0372e5367", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -655,15 +655,40 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             hir::ExprKind::Closure(c)\n         };\n-        let generator = hir::Expr {\n-            hir_id: self.lower_node_id(closure_node_id),\n-            kind: generator_kind,\n-            span: self.lower_span(span),\n+        let parent_has_track_caller = self\n+            .attrs\n+            .values()\n+            .find(|attrs| attrs.into_iter().find(|attr| attr.has_name(sym::track_caller)).is_some())\n+            .is_some();\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n+\n+        let hir_id = if parent_has_track_caller {\n+            let generator_hir_id = self.lower_node_id(closure_node_id);\n+            self.lower_attrs(\n+                generator_hir_id,\n+                &[Attribute {\n+                    kind: AttrKind::Normal(ptr::P(NormalAttr {\n+                        item: AttrItem {\n+                            path: Path::from_ident(Ident::new(sym::track_caller, span)),\n+                            args: MacArgs::Empty,\n+                            tokens: None,\n+                        },\n+                        tokens: None,\n+                    })),\n+                    id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n+                    style: AttrStyle::Outer,\n+                    span: unstable_span,\n+                }],\n+            );\n+            generator_hir_id\n+        } else {\n+            self.lower_node_id(closure_node_id)\n         };\n \n+        let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };\n+\n         // `future::from_generator`:\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n         let gen_future = self.expr_lang_item_path(\n             unstable_span,\n             hir::LangItem::FromGenerator,"}, {"sha": "77c5ed6036e702caa2fea4bb6a3f99e7502f9540", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -6,7 +6,6 @@ use super::{FnDeclKind, LoweringContext, ParamMode};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::AssocCtxt;\n use rustc_ast::*;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -67,7 +66,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             // HirId handling.\n             bodies: Vec::new(),\n             attrs: SortedMap::default(),\n-            children: FxHashMap::default(),\n+            children: Vec::default(),\n             current_hir_id_owner: hir::CRATE_OWNER_ID,\n             item_local_id_counter: hir::ItemLocalId::new(0),\n             node_id_to_local_id: Default::default(),\n@@ -86,7 +85,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             impl_trait_defs: Vec::new(),\n             impl_trait_bounds: Vec::new(),\n             allow_try_trait: Some([sym::try_trait_v2, sym::yeet_desugar_details][..].into()),\n-            allow_gen_future: Some([sym::gen_future][..].into()),\n+            allow_gen_future: Some([sym::gen_future, sym::closure_track_caller][..].into()),\n             allow_into_future: Some([sym::into_future][..].into()),\n             generics_def_id_map: Default::default(),\n         };\n@@ -534,12 +533,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 for new_node_id in [id1, id2] {\n                     let new_id = self.local_def_id(new_node_id);\n                     let Some(res) = resolutions.next() else {\n+                        debug_assert!(self.children.iter().find(|(id, _)| id == &new_id).is_none());\n                         // Associate an HirId to both ids even if there is no resolution.\n-                        let _old = self.children.insert(\n+                        self.children.push((\n                             new_id,\n-                            hir::MaybeOwner::NonOwner(hir::HirId::make_owner(new_id)),\n+                            hir::MaybeOwner::NonOwner(hir::HirId::make_owner(new_id))),\n                         );\n-                        debug_assert!(_old.is_none());\n                         continue;\n                     };\n                     let ident = *ident;"}, {"sha": "ecc2578dd2aa93bca7a8823167060e759aec19b5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -34,7 +34,6 @@\n #![feature(let_chains)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n@@ -107,7 +106,7 @@ struct LoweringContext<'a, 'hir> {\n     /// Attributes inside the owner being lowered.\n     attrs: SortedMap<hir::ItemLocalId, &'hir [Attribute]>,\n     /// Collect items that were created by lowering the current owner.\n-    children: FxHashMap<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n+    children: Vec<(LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>)>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n \n@@ -611,8 +610,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.impl_trait_defs = current_impl_trait_defs;\n         self.impl_trait_bounds = current_impl_trait_bounds;\n \n-        let _old = self.children.insert(def_id, hir::MaybeOwner::Owner(info));\n-        debug_assert!(_old.is_none())\n+        debug_assert!(self.children.iter().find(|(id, _)| id == &def_id).is_none());\n+        self.children.push((def_id, hir::MaybeOwner::Owner(info)));\n     }\n \n     /// Installs the remapping `remap` in scope while `f` is being executed.\n@@ -719,8 +718,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 assert_ne!(local_id, hir::ItemLocalId::new(0));\n                 if let Some(def_id) = self.opt_local_def_id(ast_node_id) {\n-                    // Do not override a `MaybeOwner::Owner` that may already here.\n-                    self.children.entry(def_id).or_insert(hir::MaybeOwner::NonOwner(hir_id));\n+                    self.children.push((def_id, hir::MaybeOwner::NonOwner(hir_id)));\n                     self.local_id_to_def_id.insert(local_id, def_id);\n                 }\n "}, {"sha": "b2db77944fd1e9a5141e32aa579bd44c45793e4c", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -7,9 +7,7 @@ use rustc_infer::infer::{DefiningAnchor, InferCtxt};\n use rustc_infer::traits::{Obligation, ObligationCause};\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCtxt;\n@@ -256,8 +254,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         // Require the hidden type to be well-formed with only the generics of the opaque type.\n         // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n         // hidden type is well formed even without those bounds.\n-        let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()))\n-            .to_predicate(infcx.tcx);\n+        let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()));\n \n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id.to_def_id());\n \n@@ -282,6 +279,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         }\n \n         ocx.register_obligation(Obligation::misc(\n+            infcx.tcx,\n             instantiated_ty.span,\n             body_id,\n             param_env,"}, {"sha": "d0cf8622a4470e6c90f7bd54608203c913ec796a", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -92,8 +92,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 trait_ref,\n                 constness: ty::BoundConstness::NotConst,\n                 polarity: ty::ImplPolarity::Positive,\n-            }))\n-            .to_predicate(self.tcx()),\n+            })),\n             locations,\n             category,\n         );\n@@ -122,26 +121,26 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     pub(super) fn prove_predicates(\n         &mut self,\n-        predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n+        predicates: impl IntoIterator<\n+            Item = impl ToPredicate<'tcx, ty::Predicate<'tcx>> + std::fmt::Debug,\n+        >,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {\n         for predicate in predicates {\n-            let predicate = predicate.to_predicate(self.tcx());\n-            debug!(\"prove_predicates(predicate={:?}, locations={:?})\", predicate, locations,);\n-\n             self.prove_predicate(predicate, locations, category);\n         }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(super) fn prove_predicate(\n         &mut self,\n-        predicate: ty::Predicate<'tcx>,\n+        predicate: impl ToPredicate<'tcx, ty::Predicate<'tcx>> + std::fmt::Debug,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {\n         let param_env = self.param_env;\n+        let predicate = predicate.to_predicate(self.tcx());\n         self.fully_perform_op(\n             locations,\n             category,"}, {"sha": "7d36a63943c56a46008c93bf860cb9739a47598c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -33,8 +33,7 @@ use rustc_middle::ty::subst::{SubstsRef, UserSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, Binder, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, Dynamic,\n-    OpaqueHiddenType, OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType,\n-    UserTypeAnnotationIndex,\n+    OpaqueHiddenType, OpaqueTypeKey, RegionVid, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n@@ -1069,8 +1068,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n \n                     self.prove_predicate(\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))\n-                            .to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into())),\n                         Locations::All(span),\n                         ConstraintCategory::TypeAnnotation,\n                     );"}, {"sha": "36956f5dd6d96da367c9e11fa5d362a3101d4beb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -732,7 +732,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         polarity: ty::ImplPolarity::Positive,\n                     });\n                     let obligation =\n-                        Obligation::new(ObligationCause::dummy(), param_env, poly_trait_pred);\n+                        Obligation::new(tcx, ObligationCause::dummy(), param_env, poly_trait_pred);\n \n                     let implsrc = {\n                         let infcx = tcx.infer_ctxt().build();\n@@ -816,6 +816,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                             if !nonconst_call_permission {\n                                 let obligation = Obligation::new(\n+                                    tcx,\n                                     ObligationCause::dummy_with_span(*fn_span),\n                                     param_env,\n                                     tcx.mk_predicate("}, {"sha": "b90e0962ce6ad05285f2980ab8ff0d4df4b64271", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -62,7 +62,7 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n     }\n \n     fn is_async(&self) -> bool {\n-        self.tcx.asyncness(self.def_id()) == hir::IsAsync::Async\n+        self.tcx.asyncness(self.def_id()).is_async()\n     }\n }\n "}, {"sha": "2d4afd0dc356bbe34e75944e808096c3bd2ba86b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -147,6 +147,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 }\n                 Adt(..) => {\n                     let obligation = Obligation::new(\n+                        tcx,\n                         ObligationCause::dummy(),\n                         param_env,\n                         Binder::dummy(TraitPredicate {"}, {"sha": "6fd12985170e637e31b578cef69f90ece55336ca", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -156,6 +156,7 @@ impl Qualif for NeedsNonConstDrop {\n         let destruct = cx.tcx.require_lang_item(LangItem::Destruct, None);\n \n         let obligation = Obligation::new(\n+            cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n@@ -351,7 +352,11 @@ where\n     // FIXME(valtrees): check whether const qualifs should behave the same\n     // way for type and mir constants.\n     let uneval = match constant.literal {\n-        ConstantKind::Ty(ct) if matches!(ct.kind(), ty::ConstKind::Param(_)) => None,\n+        ConstantKind::Ty(ct)\n+            if matches!(ct.kind(), ty::ConstKind::Param(_) | ty::ConstKind::Error(_)) =>\n+        {\n+            None\n+        }\n         ConstantKind::Ty(c) => bug!(\"expected ConstKind::Param here, found {:?}\", c),\n         ConstantKind::Unevaluated(uv, _) => Some(uv),\n         ConstantKind::Val(..) => None,"}, {"sha": "e0a3864506548f186e95c15387f8b7f7526ba1f0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -2720,6 +2720,12 @@ pub enum IsAsync {\n     NotAsync,\n }\n \n+impl IsAsync {\n+    pub fn is_async(self) -> bool {\n+        self == IsAsync::Async\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]\n pub enum Defaultness {\n     Default { has_value: bool },"}, {"sha": "f76b282fa76d54123c3dd95ad12c7d7d2389f479", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -19,9 +19,7 @@ use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{\n-    self, ParamEnv, ToPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -464,9 +462,8 @@ fn check_opaque_meets_bounds<'tcx>(\n     // Additionally require the hidden type to be well-formed with only the generics of the opaque type.\n     // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n     // hidden type is well formed even without those bounds.\n-    let predicate =\n-        ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into())).to_predicate(tcx);\n-    ocx.register_obligation(Obligation::new(misc_cause, param_env, predicate));\n+    let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into()));\n+    ocx.register_obligation(Obligation::new(tcx, misc_cause, param_env, predicate));\n \n     // Check that all obligations are satisfied by the implementation's\n     // version."}, {"sha": "81672213dc702e042e7dc2846a6bc44b80ce5607", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -238,7 +238,7 @@ fn compare_predicate_entailment<'tcx>(\n                 kind: impl_m.kind,\n             },\n         );\n-        ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n+        ocx.register_obligation(traits::Obligation::new(tcx, cause, param_env, predicate));\n     }\n \n     // We now need to check that the signature of the impl method is\n@@ -521,7 +521,13 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 let num_trait_substs = trait_to_impl_substs.len();\n                 let num_impl_substs = tcx.generics_of(impl_m.container_id(tcx)).params.len();\n                 let ty = tcx.fold_regions(ty, |region, _| {\n-                    let (ty::ReFree(_) | ty::ReEarlyBound(_)) = region.kind() else { return region; };\n+                    match region.kind() {\n+                        // Remap all free regions, which correspond to late-bound regions in the function.\n+                        ty::ReFree(_) => {}\n+                        // Remap early-bound regions as long as they don't come from the `impl` itself.\n+                        ty::ReEarlyBound(ebr) if tcx.parent(ebr.def_id) != impl_m.container_id(tcx) => {}\n+                        _ => return region,\n+                    }\n                     let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n                     else {\n                         tcx\n@@ -605,6 +611,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 );\n \n                 self.ocx.register_obligation(traits::Obligation::new(\n+                    self.tcx(),\n                     ObligationCause::new(\n                         self.span,\n                         self.body_id,\n@@ -681,9 +688,7 @@ fn report_trait_method_mismatch<'tcx>(\n                 // Suggestion to change output type. We do not suggest in `async` functions\n                 // to avoid complex logic or incorrect output.\n                 match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n-                    ImplItemKind::Fn(ref sig, _)\n-                        if sig.header.asyncness == hir::IsAsync::NotAsync =>\n-                    {\n+                    ImplItemKind::Fn(ref sig, _) if !sig.header.asyncness.is_async() => {\n                         let msg = \"change the output type to match the trait\";\n                         let ap = Applicability::MachineApplicable;\n                         match sig.decl.output {\n@@ -1579,7 +1584,7 @@ fn compare_type_predicate_entailment<'tcx>(\n             },\n         );\n         ocx.register_obligations(obligations);\n-        ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n+        ocx.register_obligation(traits::Obligation::new(tcx, cause, param_env, predicate));\n     }\n \n     // Check that all obligations are satisfied by the implementation's\n@@ -1784,7 +1789,7 @@ pub fn check_type_bounds<'tcx>(\n         .subst_iter_copied(tcx, rebased_substs)\n         .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n-            traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n+            traits::Obligation::new(tcx, mk_cause(span), param_env, concrete_ty_bound)\n         })\n         .collect();\n     debug!(\"check_type_bounds: item_bounds={:?}\", obligations);"}, {"sha": "1d7ceda725a3986cd1773324fce2e71383845aab", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -14,8 +14,8 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    TypeVisitable, TypeVisitor,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n@@ -75,9 +75,10 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         // for a type to be WF, we do not need to check if const trait predicates satisfy.\n         let param_env = self.param_env.without_const();\n         self.ocx.register_obligation(traits::Obligation::new(\n+            self.tcx(),\n             cause,\n             param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx()),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n         ));\n     }\n }\n@@ -1111,12 +1112,12 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n                     traits::MiscObligation,\n                 );\n                 wfcx.register_obligation(traits::Obligation::new(\n+                    tcx,\n                     cause,\n                     wfcx.param_env,\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n                         ty::Const::from_anon_const(tcx, discr_def_id.expect_local()),\n-                    ))\n-                    .to_predicate(tcx),\n+                    )),\n                 ));\n             }\n         }\n@@ -1453,7 +1454,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                 wfcx.body_id,\n                 traits::ItemObligation(def_id.to_def_id()),\n             );\n-            traits::Obligation::new(cause, wfcx.param_env, pred)\n+            traits::Obligation::new(tcx, cause, wfcx.param_env, pred)\n         });\n \n     let predicates = predicates.0.instantiate_identity(tcx);\n@@ -1783,8 +1784,7 @@ fn receiver_is_implemented<'tcx>(\n         substs: tcx.mk_substs_trait(receiver_ty, &[]),\n     });\n \n-    let obligation =\n-        traits::Obligation::new(cause, wfcx.param_env, trait_ref.without_const().to_predicate(tcx));\n+    let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n \n     if wfcx.infcx.predicate_must_hold_modulo_regions(&obligation) {\n         true\n@@ -1931,6 +1931,7 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n                 }\n \n                 let obligation = traits::Obligation::new(\n+                    tcx,\n                     traits::ObligationCause::new(span, self.body_id, traits::TrivialBound),\n                     empty_env,\n                     pred,"}, {"sha": "4f9d5826583c303875f609dbf62a4462024c53d6", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{ForeignItem, ForeignItemKind, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Region, ToPredicate, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_trait_selection::traits;\n \n pub fn provide(providers: &mut Providers) {\n@@ -74,10 +74,10 @@ fn diagnostic_hir_wf_check<'tcx>(\n             let errors = traits::fully_solve_obligation(\n                 &infcx,\n                 traits::Obligation::new(\n+                    self.tcx,\n                     cause,\n                     self.param_env,\n-                    ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into()))\n-                        .to_predicate(self.tcx),\n+                    ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into())),\n                 ),\n             );\n             if !errors.is_empty() {"}, {"sha": "139f2e84136625a6d7561cfd4829e94380ef2546", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::ty::{self, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n@@ -538,23 +538,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .bound_explicit_item_bounds(rpit_def_id)\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n-                        let pred = match pred.kind().skip_binder() {\n+                        let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n                             ty::PredicateKind::Trait(mut trait_pred) => {\n                                 assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n                                 trait_pred.trait_ref.substs =\n                                     self.tcx.mk_substs_trait(ty, &trait_pred.trait_ref.substs[1..]);\n-                                pred.kind().rebind(trait_pred).to_predicate(self.tcx)\n+                                ty::PredicateKind::Trait(trait_pred)\n                             }\n                             ty::PredicateKind::Projection(mut proj_pred) => {\n                                 assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n                                 proj_pred.projection_ty.substs = self\n                                     .tcx\n                                     .mk_substs_trait(ty, &proj_pred.projection_ty.substs[1..]);\n-                                pred.kind().rebind(proj_pred).to_predicate(self.tcx)\n+                                ty::PredicateKind::Projection(proj_pred)\n                             }\n                             _ => continue,\n-                        };\n+                        });\n                         if !self.predicate_must_hold_modulo_regions(&Obligation::new(\n+                            self.tcx,\n                             ObligationCause::misc(span, self.body_id),\n                             self.param_env,\n                             pred,"}, {"sha": "302d512c71d13229bf0c97f2b97d4be60d1435a7", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -380,6 +380,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         predicates.predicates.iter().zip(&predicates.spans)\n                     {\n                         let obligation = Obligation::new(\n+                            self.tcx,\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n                             *predicate,"}, {"sha": "b9e90e47e508bdecbb522fc62d077893bfc8ff59", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -102,7 +102,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     inherited.typeck_results.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n \n-    if let ty::Dynamic(..) = declared_ret_ty.kind() {\n+    if let ty::Dynamic(_, _, ty::Dyn) = declared_ret_ty.kind() {\n         // FIXME: We need to verify that the return type is `Sized` after the return expression has\n         // been evaluated so that we have types available for all the nodes being returned, but that\n         // requires the coerced evaluated type to be stored. Moving `check_return_expr` before this"}, {"sha": "174b43313825e1b770760d191e3249529beacc89", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -55,7 +55,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{self, BytePos, DesugaringKind, Span};\n@@ -278,13 +278,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             for &source_ty in &[a, b] {\n                 if source_ty != target_ty {\n                     obligations.push(Obligation::new(\n+                        self.tcx(),\n                         self.cause.clone(),\n                         self.param_env,\n                         ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {\n                             a: source_ty,\n                             b: target_ty,\n-                        }))\n-                        .to_predicate(self.tcx()),\n+                        })),\n                     ));\n                 }\n             }\n@@ -669,7 +669,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     continue;\n                 }\n             };\n-            match selcx.select(&obligation.with(trait_pred)) {\n+            match selcx.select(&obligation.with(selcx.tcx(), trait_pred)) {\n                 // Uncertain or unimplemented.\n                 Ok(None) => {\n                     if trait_pred.def_id() == unsize_did {\n@@ -783,10 +783,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 // and then require that the resulting predicate (e.g., `usize: Clone`)\n                 // holds (it does).\n                 let predicate = predicate.with_self_ty(self.tcx, a);\n-                Obligation::new(self.cause.clone(), self.param_env, predicate)\n+                Obligation::new(self.tcx, self.cause.clone(), self.param_env, predicate)\n             })\n             // Enforce the region bound (e.g., `usize: 'static`, in our example).\n             .chain([Obligation::new(\n+                self.tcx,\n                 self.cause.clone(),\n                 self.param_env,\n                 self.tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::TypeOutlives("}, {"sha": "c826a886ca6415ea099c145cc7ee1416f85d1500", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -22,8 +22,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n-    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty,\n-    UserType,\n+    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, Ty, UserType,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n use rustc_session::lint;\n@@ -559,9 +558,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // WF obligations never themselves fail, so no real need to give a detailed cause:\n         let cause = traits::ObligationCause::new(span, self.body_id, code);\n         self.register_predicate(traits::Obligation::new(\n+            self.tcx,\n             cause,\n             self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n         ));\n     }\n "}, {"sha": "c3833b4872d99073379d15c96a380966f95d5437", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -73,7 +73,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = self.typeck_results.borrow().expr_ty_adjusted(expr);\n                 let ty = self.resolve_vars_if_possible(ty);\n                 if ty.has_non_region_infer() {\n-                    assert!(self.is_tainted_by_errors());\n                     self.tcx.ty_error()\n                 } else {\n                     self.tcx.erase_regions(ty)\n@@ -2150,6 +2149,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ),\n                         );\n                         let obligation = traits::Obligation::new(\n+                            self.tcx,\n                             traits::ObligationCause::dummy(),\n                             self.param_env,\n                             ty::Binder::dummy(ty::TraitPredicate {"}, {"sha": "316ecb0ed52e43ede435315efc195462f63f4bc8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1090,14 +1090,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some(into_def_id) = self.tcx.get_diagnostic_item(sym::Into)\n             && self.predicate_must_hold_modulo_regions(&traits::Obligation::new(\n+                self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n                 ty::Binder::dummy(ty::TraitRef {\n                     def_id: into_def_id,\n                     substs: self.tcx.mk_substs_trait(expr_ty, &[expected_ty.into()]),\n                 })\n-                .to_poly_trait_predicate()\n-                .to_predicate(self.tcx),\n+                .to_poly_trait_predicate(),\n             ))\n         {\n             let sugg = if expr.precedence().order() >= PREC_POSTFIX {"}, {"sha": "37336edd1fda59d6a513c283f5dfdf181bb0b760", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, Ty, TypeVisitable};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -293,10 +293,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n         (\n             traits::Obligation::misc(\n+                self.tcx,\n                 span,\n                 self.body_id,\n                 self.param_env,\n-                poly_trait_ref.without_const().to_predicate(self.tcx),\n+                poly_trait_ref.without_const(),\n             ),\n             substs,\n         )\n@@ -335,6 +336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         (\n             traits::Obligation::new(\n+                self.tcx,\n                 traits::ObligationCause::new(\n                     span,\n                     self.body_id,\n@@ -346,7 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     },\n                 ),\n                 self.param_env,\n-                poly_trait_ref.without_const().to_predicate(self.tcx),\n+                poly_trait_ref.without_const(),\n             ),\n             substs,\n         )\n@@ -523,9 +525,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             method_ty, obligation\n         );\n         obligations.push(traits::Obligation::new(\n+            tcx,\n             cause,\n             self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())).to_predicate(tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())),\n         ));\n \n         let callee = MethodCallee { def_id, substs, sig: fn_sig };"}, {"sha": "9d75ccad133dd6b20e37daca7fe138d8baf21613", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -19,7 +19,8 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::ToPredicate;\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n@@ -1429,7 +1430,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) -> traits::SelectionResult<'tcx, traits::Selection<'tcx>> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n         let predicate = ty::Binder::dummy(trait_ref).to_poly_trait_predicate();\n-        let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n+        let obligation = traits::Obligation::new(self.tcx, cause, self.param_env, predicate);\n         traits::SelectionContext::new(self).select(&obligation)\n     }\n \n@@ -1560,7 +1561,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let predicate =\n                         ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx);\n                     parent_pred = Some(predicate);\n-                    let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n+                    let obligation =\n+                        traits::Obligation::new(self.tcx, cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         result = ProbeResult::NoMatch;\n                         if self.probe(|_| {"}, {"sha": "e2c5edd0e8833bfa32936b65faa2e1c748d6ab69", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::DeepRejectCtxt;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{self, DefIdTree, GenericArgKind, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, DefIdTree, GenericArgKind, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n@@ -80,10 +80,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n+                            tcx,\n                             span,\n                             self.body_id,\n                             self.param_env,\n-                            poly_trait_ref.without_const().to_predicate(tcx),\n+                            poly_trait_ref.without_const(),\n                         );\n                         self.predicate_may_hold(&obligation)\n                     })"}, {"sha": "34f54328230f43720e12497fbcfdfb9134c4714a", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -581,9 +581,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 span_bug!(cause.span, \"unexpected const outlives {:?}\", predicate);\n             }\n         };\n-        let predicate = predicate.0.rebind(atom).to_predicate(self.tcx);\n+        let predicate = predicate.0.rebind(atom);\n \n-        Obligation::new(cause, param_env, predicate)\n+        Obligation::new(self.tcx, cause, param_env, predicate)\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them."}, {"sha": "37f071a19acd62c8f749a4c60a551609135946e4", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -37,7 +37,7 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -347,10 +347,10 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n \n         if needs_wf {\n             self.obligations.push(Obligation::new(\n+                self.tcx(),\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))\n-                    .to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into())),\n             ));\n         }\n \n@@ -444,9 +444,10 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             ty::PredicateKind::ConstEquate(b, a)\n         };\n         self.obligations.push(Obligation::new(\n+            self.tcx(),\n             self.trace.cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(predicate).to_predicate(self.tcx()),\n+            ty::Binder::dummy(predicate),\n         ));\n     }\n }"}, {"sha": "1fa95f8d62ab9294d81e5b23de55f002e8744ebb", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -595,7 +595,12 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n             // Require that the predicate holds for the concrete type.\n             debug!(?predicate);\n-            obligations.push(traits::Obligation::new(cause.clone(), param_env, predicate));\n+            obligations.push(traits::Obligation::new(\n+                self.tcx,\n+                cause.clone(),\n+                param_env,\n+                predicate,\n+            ));\n         }\n         Ok(InferOk { value: (), obligations })\n     }"}, {"sha": "eb6deee291cf7ab1b236be9e1c9283348538ee82", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::{self, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Ty};\n \n use crate::traits::{Obligation, PredicateObligation};\n \n@@ -28,12 +28,8 @@ impl<'tcx> InferCtxt<'tcx> {\n         });\n         let projection =\n             ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, term: ty_var.into() });\n-        let obligation = Obligation::with_depth(\n-            cause,\n-            recursion_depth,\n-            param_env,\n-            projection.to_predicate(self.tcx),\n-        );\n+        let obligation =\n+            Obligation::with_depth(self.tcx, cause, recursion_depth, param_env, projection);\n         obligations.push(obligation);\n         ty_var\n     }"}, {"sha": "8c8445a4d9eb847695970878ea591acacce012d6", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -6,7 +6,7 @@ use crate::traits::Obligation;\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n@@ -95,14 +95,14 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 // can't make progress on `A <: B` if both A and B are\n                 // type variables, so record an obligation.\n                 self.fields.obligations.push(Obligation::new(\n+                    self.tcx(),\n                     self.fields.trace.cause.clone(),\n                     self.fields.param_env,\n                     ty::Binder::dummy(ty::PredicateKind::Subtype(ty::SubtypePredicate {\n                         a_is_expected: self.a_is_expected,\n                         a,\n                         b,\n-                    }))\n-                    .to_predicate(self.tcx()),\n+                    })),\n                 ));\n \n                 Ok(a)"}, {"sha": "a9e6241bf6b51feee1a5d733d836bdd64f1c5a75", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -10,7 +10,7 @@ pub mod util;\n \n use rustc_hir as hir;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Const, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n \n pub use self::FulfillmentErrorCode::*;\n@@ -124,38 +124,41 @@ pub enum FulfillmentErrorCode<'tcx> {\n \n impl<'tcx, O> Obligation<'tcx, O> {\n     pub fn new(\n+        tcx: TyCtxt<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        predicate: O,\n+        predicate: impl ToPredicate<'tcx, O>,\n     ) -> Obligation<'tcx, O> {\n-        Obligation { cause, param_env, recursion_depth: 0, predicate }\n+        Self::with_depth(tcx, cause, 0, param_env, predicate)\n     }\n \n     pub fn with_depth(\n+        tcx: TyCtxt<'tcx>,\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n-        predicate: O,\n+        predicate: impl ToPredicate<'tcx, O>,\n     ) -> Obligation<'tcx, O> {\n+        let predicate = predicate.to_predicate(tcx);\n         Obligation { cause, param_env, recursion_depth, predicate }\n     }\n \n     pub fn misc(\n+        tcx: TyCtxt<'tcx>,\n         span: Span,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_ref: O,\n+        trait_ref: impl ToPredicate<'tcx, O>,\n     ) -> Obligation<'tcx, O> {\n-        Obligation::new(ObligationCause::misc(span, body_id), param_env, trait_ref)\n+        Obligation::new(tcx, ObligationCause::misc(span, body_id), param_env, trait_ref)\n     }\n \n-    pub fn with<P>(&self, value: P) -> Obligation<'tcx, P> {\n-        Obligation {\n-            cause: self.cause.clone(),\n-            param_env: self.param_env,\n-            recursion_depth: self.recursion_depth,\n-            predicate: value,\n-        }\n+    pub fn with<P>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        value: impl ToPredicate<'tcx, P>,\n+    ) -> Obligation<'tcx, P> {\n+        Obligation::with_depth(tcx, self.cause.clone(), self.recursion_depth, self.param_env, value)\n     }\n }\n "}, {"sha": "7e0a8a0df16c02228bc6d419c5c6b6098244190c", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -108,6 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                 // then we must've taken advantage of the hack in `project_and_unify_types` where\n                 // we replace opaques with inference vars. Emit a warning!\n                 if !infcx.predicate_must_hold_modulo_regions(&traits::Obligation::new(\n+                    cx.tcx,\n                     traits::ObligationCause::dummy(),\n                     cx.param_env,\n                     assoc_pred,"}, {"sha": "9ae34013ecb8ae17ef44687e653d75ee220f0c4a", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -533,16 +533,14 @@ trait UnusedDelimLint {\n         right_pos: Option<BytePos>,\n     ) {\n         let spans = match value.kind {\n-            ast::ExprKind::Block(ref block, None) if block.stmts.len() > 0 => {\n-                let start = block.stmts[0].span;\n-                let end = block.stmts[block.stmts.len() - 1].span;\n-                if let Some(start) = start.find_ancestor_inside(value.span)\n-                    && let Some(end) = end.find_ancestor_inside(value.span)\n+            ast::ExprKind::Block(ref block, None) if block.stmts.len() == 1 => {\n+                if let StmtKind::Expr(expr) = &block.stmts[0].kind\n+                    && let ExprKind::Err = expr.kind\n                 {\n-                    Some((\n-                        value.span.with_hi(start.lo()),\n-                        value.span.with_lo(end.hi()),\n-                    ))\n+                    return\n+                }\n+                if let Some(span) = block.stmts[0].span.find_ancestor_inside(value.span) {\n+                    Some((value.span.with_hi(span.lo()), value.span.with_lo(span.hi())))\n                 } else {\n                     None\n                 }"}, {"sha": "1890c0e24bb4419c1ec17750293b75764b4a0167", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -924,10 +924,13 @@ impl ObjectSafetyViolation {\n             }\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::ReferencesImplTraitInTrait,\n+                MethodViolationCode::ReferencesImplTraitInTrait(_),\n                 _,\n             ) => format!(\"method `{}` references an `impl Trait` type in its return type\", name)\n                 .into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::AsyncFn, _) => {\n+                format!(\"method `{}` is `async`\", name).into()\n+            }\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -1035,7 +1038,10 @@ pub enum MethodViolationCode {\n     ReferencesSelfOutput,\n \n     /// e.g., `fn foo(&self) -> impl Sized`\n-    ReferencesImplTraitInTrait,\n+    ReferencesImplTraitInTrait(Span),\n+\n+    /// e.g., `async fn foo(&self)`\n+    AsyncFn,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,"}, {"sha": "f9a762261e2cea1f20765e41ee8654b492309e1d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1125,42 +1125,42 @@ impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n     }\n }\n \n-pub trait ToPredicate<'tcx> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n+pub trait ToPredicate<'tcx, Predicate> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate;\n }\n \n-impl<'tcx> ToPredicate<'tcx> for Predicate<'tcx> {\n-    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+impl<'tcx, T> ToPredicate<'tcx, T> for T {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> T {\n         self\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::Trait).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::Projection).to_predicate(tcx)\n     }"}, {"sha": "02848bcffb298b43440ada72efc8a5ffd7c0a544", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -893,6 +893,7 @@ symbols! {\n         masked,\n         match_beginning_vert,\n         match_default_bindings,\n+        matches_macro,\n         maxnumf32,\n         maxnumf64,\n         may_dangle,"}, {"sha": "52ee68e7560f6c0d82892d34e88f2d5e1a480069", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -12,6 +12,8 @@ pub fn target() -> Target {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n+            dynamic_linking: false,\n+            position_independent_executables: true,\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation.\n             bitcode_llvm_cmdline: \"-triple\\0\\"}, {"sha": "6e1d00d1f6ca5ce21789153bb4248da44de9fd54", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -12,6 +12,8 @@ pub fn target() -> Target {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n             forces_embed_bitcode: true,\n+            dynamic_linking: false,\n+            position_independent_executables: true,\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation.\n             bitcode_llvm_cmdline: \"-triple\\0\\"}, {"sha": "b7240a82897301edf12a14e0ccb84aa7e447961b", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -3,8 +3,8 @@ use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n-use rustc_middle::ty::{ToPredicate, TypeVisitable};\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n@@ -130,9 +130,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n         let obligation = traits::Obligation::new(\n+            tcx,\n             cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const(),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");"}, {"sha": "5869bc76b596cf34a33459e4a080526a16158275", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -96,8 +96,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             PolyTraitRef::to_poly_trait_predicate,\n             PolyTraitRef::to_poly_trait_predicate_negative_polarity,\n         ] {\n-            let result =\n-                selcx.select(&Obligation::new(ObligationCause::dummy(), orig_env, f(&trait_pred)));\n+            let result = selcx.select(&Obligation::new(\n+                tcx,\n+                ObligationCause::dummy(),\n+                orig_env,\n+                f(&trait_pred),\n+            ));\n             if let Ok(Some(ImplSource::UserDefined(_))) = result {\n                 debug!(\n                     \"find_auto_trait_generics({:?}): \\\n@@ -280,8 +284,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             // Call `infcx.resolve_vars_if_possible` to see if we can\n             // get rid of any inference variables.\n-            let obligation =\n-                infcx.resolve_vars_if_possible(Obligation::new(dummy_cause.clone(), new_env, pred));\n+            let obligation = infcx.resolve_vars_if_possible(Obligation::new(\n+                tcx,\n+                dummy_cause.clone(),\n+                new_env,\n+                pred,\n+            ));\n             let result = select.select(&obligation);\n \n             match result {\n@@ -706,7 +714,10 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                     // and turn them into an explicit negative impl for our type.\n                     debug!(\"Projecting and unifying projection predicate {:?}\", predicate);\n \n-                    match project::poly_project_and_unify_type(select, &obligation.with(p)) {\n+                    match project::poly_project_and_unify_type(\n+                        select,\n+                        &obligation.with(self.tcx, p),\n+                    ) {\n                         ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n                             debug!(\n                                 \"evaluate_nested_obligations: Unable to unify predicate \\"}, {"sha": "ca4299f7db394abb8df48cb1d075b36ca0199de1", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -40,7 +40,7 @@ pub fn codegen_select_candidate<'tcx>(\n \n     let obligation_cause = ObligationCause::dummy();\n     let obligation =\n-        Obligation::new(obligation_cause, param_env, trait_ref.to_poly_trait_predicate());\n+        Obligation::new(tcx, obligation_cause, param_env, trait_ref.to_poly_trait_predicate());\n \n     let selection = match selcx.select(&obligation) {\n         Ok(Some(selection)) => selection,"}, {"sha": "6a5744f5f762b7496ca957d3c55e5c41c0dcf01f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -32,7 +32,7 @@ pub fn recompute_applicable_impls<'tcx>(\n             impl_predicates\n                 .predicates\n                 .iter()\n-                .map(|&predicate| Obligation::new(dummy_cause.clone(), param_env, predicate)),\n+                .map(|&predicate| Obligation::new(tcx, dummy_cause.clone(), param_env, predicate)),\n         );\n \n         ocx.select_where_possible().is_empty()"}, {"sha": "f087afa20bacaabaafa023a54787cb4788820be0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -344,14 +344,14 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 });\n                 let substs = self.tcx.mk_substs_trait(ty.skip_binder(), &[var.into()]);\n                 let obligation = Obligation::new(\n+                    self.tcx,\n                     ObligationCause::dummy(),\n                     param_env,\n                     ty.rebind(ty::TraitPredicate {\n                         trait_ref: ty::TraitRef::new(trait_def_id, substs),\n                         constness,\n                         polarity,\n-                    })\n-                    .to_predicate(self.tcx),\n+                    }),\n                 );\n                 let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n                 fulfill_cx.register_predicate_obligation(self, obligation);\n@@ -984,7 +984,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 );\n                                 trait_pred\n                             });\n-                            let unit_obligation = obligation.with(predicate.to_predicate(tcx));\n+                            let unit_obligation = obligation.with(tcx, predicate);\n                             if self.predicate_may_hold(&unit_obligation) {\n                                 err.note(\n                                     \"this error might have been caused by changes to \\\n@@ -2012,7 +2012,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ..*tr\n         });\n \n-        Obligation::new(ObligationCause::dummy(), param_env, trait_pred.to_predicate(self.tcx))\n+        Obligation::new(self.tcx, ObligationCause::dummy(), param_env, trait_pred)\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n@@ -2100,11 +2100,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     )\n                 };\n \n-                let obligation = Obligation::new(\n-                    obligation.cause.clone(),\n-                    obligation.param_env,\n-                    trait_ref.to_poly_trait_predicate(),\n-                );\n+                let obligation = obligation.with(self.tcx, trait_ref.to_poly_trait_predicate());\n                 let mut selcx = SelectionContext::with_query_mode(\n                     &self,\n                     crate::traits::TraitQueryMode::Standard,\n@@ -2534,11 +2530,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             )\n             .value;\n \n-            let obligation = Obligation::new(\n-                ObligationCause::dummy(),\n-                param_env,\n-                cleaned_pred.to_predicate(selcx.tcx()),\n-            );\n+            let obligation =\n+                Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);\n \n             self.predicate_may_hold(&obligation)\n         })"}, {"sha": "b8609077036f47286c5fcc3e42a6b4e5374f7859", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -301,7 +301,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         seen_requirements: &mut FxHashSet<DefId>,\n     ) where\n-        T: fmt::Display;\n+        T: fmt::Display + ToPredicate<'tcx, T>;\n \n     /// Suggest to await before try: future? => future.await?\n     fn suggest_await_before_try(\n@@ -334,7 +334,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n     );\n }\n \n-fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n+fn predicate_constraint(generics: &hir::Generics<'_>, pred: ty::Predicate<'_>) -> (Span, String) {\n     (\n         generics.tail_span_for_predicate_suggestion(),\n         format!(\"{} {}\", generics.add_where_or_trailing_comma(), pred),\n@@ -416,7 +416,7 @@ fn suggest_restriction<'tcx>(\n             },\n             // `fn foo(t: impl Trait)`\n             //                       ^ suggest `where <T as Trait>::A: Bound`\n-            predicate_constraint(hir_generics, trait_pred.to_predicate(tcx).to_string()),\n+            predicate_constraint(hir_generics, trait_pred.to_predicate(tcx)),\n         ];\n         sugg.extend(ty_spans.into_iter().map(|s| (s, type_param_name.to_string())));\n \n@@ -440,9 +440,7 @@ fn suggest_restriction<'tcx>(\n                 .find(|p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: true, .. })),\n             super_traits,\n         ) {\n-            (_, None) => {\n-                predicate_constraint(hir_generics, trait_pred.to_predicate(tcx).to_string())\n-            }\n+            (_, None) => predicate_constraint(hir_generics, trait_pred.to_predicate(tcx)),\n             (None, Some((ident, []))) => (\n                 ident.span.shrink_to_hi(),\n                 format!(\": {}\", trait_pred.print_modifiers_and_trait_path()),\n@@ -1162,7 +1160,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         for predicate in predicates.iter() {\n             if !self.predicate_must_hold_modulo_regions(\n-                &obligation.with(predicate.with_self_ty(self.tcx, self_ref_ty)),\n+                &obligation.with(self.tcx, predicate.with_self_ty(self.tcx, self_ref_ty)),\n             ) {\n                 return;\n             }\n@@ -1523,7 +1521,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let self_ty_satisfies_dyn_predicates = |self_ty| {\n                             predicates.iter().all(|predicate| {\n                                 let pred = predicate.with_self_ty(self.tcx, self_ty);\n-                                let obl = Obligation::new(cause.clone(), param_env, pred);\n+                                let obl = Obligation::new(self.tcx, cause.clone(), param_env, pred);\n                                 self.predicate_may_hold(&obl)\n                             })\n                         };\n@@ -2704,7 +2702,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n                 obligated_types.push(ty);\n \n-                let parent_predicate = parent_trait_ref.to_predicate(tcx);\n+                let parent_predicate = parent_trait_ref;\n                 if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n                     // #74711: avoid a stack overflow\n                     ensure_sufficient_stack(|| {\n@@ -2766,7 +2764,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => err.note(&msg),\n                 };\n \n-                let mut parent_predicate = parent_trait_pred.to_predicate(tcx);\n+                let mut parent_predicate = parent_trait_pred;\n                 let mut data = &data.derived;\n                 let mut count = 0;\n                 seen_requirements.insert(parent_def_id);\n@@ -2826,7 +2824,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             ObligationCauseCode::DerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_pred);\n-                let parent_predicate = parent_trait_ref.to_predicate(tcx);\n+                let parent_predicate = parent_trait_ref;\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {\n                     self.note_obligation_cause_code(\n@@ -3070,9 +3068,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         ..*tr\n                     });\n                     let field_obl = Obligation::new(\n+                        self.tcx,\n                         obligation.cause.clone(),\n                         obligation.param_env,\n-                        trait_pred.to_predicate(self.tcx),\n+                        trait_pred,\n                     );\n                     self.predicate_must_hold_modulo_regions(&field_obl)\n                 })"}, {"sha": "d84f768cce4d722ec2e03760158336627c82602c", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Binder, Const, Ty, TypeVisitable};\n use std::marker::PhantomData;\n \n@@ -296,7 +295,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 &mut obligations,\n             );\n             if predicate != obligation.predicate {\n-                obligations.push(obligation.with(predicate));\n+                obligations.push(obligation.with(infcx.tcx, predicate));\n                 return ProcessResult::Changed(mk_pending(obligations));\n             }\n         }\n@@ -307,7 +306,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 // This means we need to pass it the bound version of our\n                 // predicate.\n                 ty::PredicateKind::Trait(trait_ref) => {\n-                    let trait_obligation = obligation.with(binder.rebind(trait_ref));\n+                    let trait_obligation = obligation.with(infcx.tcx, binder.rebind(trait_ref));\n \n                     self.process_trait_obligation(\n                         obligation,\n@@ -316,7 +315,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                     )\n                 }\n                 ty::PredicateKind::Projection(data) => {\n-                    let project_obligation = obligation.with(binder.rebind(data));\n+                    let project_obligation = obligation.with(infcx.tcx, binder.rebind(data));\n \n                     self.process_projection_obligation(\n                         obligation,\n@@ -335,17 +334,15 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEquate(..) => {\n                     let pred =\n                         ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n-                    ProcessResult::Changed(mk_pending(vec![\n-                        obligation.with(pred.to_predicate(self.selcx.tcx())),\n-                    ]))\n+                    ProcessResult::Changed(mk_pending(vec![obligation.with(infcx.tcx, pred)]))\n                 }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n             },\n             Some(pred) => match pred {\n                 ty::PredicateKind::Trait(data) => {\n-                    let trait_obligation = obligation.with(Binder::dummy(data));\n+                    let trait_obligation = obligation.with(infcx.tcx, Binder::dummy(data));\n \n                     self.process_trait_obligation(\n                         obligation,\n@@ -370,7 +367,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::Projection(ref data) => {\n-                    let project_obligation = obligation.with(Binder::dummy(*data));\n+                    let project_obligation = obligation.with(infcx.tcx, Binder::dummy(*data));\n \n                     self.process_projection_obligation(\n                         obligation,\n@@ -697,7 +694,7 @@ impl<'a, 'tcx> FulfillProcessor<'a, 'tcx> {\n             }\n             // Let the caller handle the recursion\n             ProjectAndUnifyResult::Recursive => ProcessResult::Changed(mk_pending(vec![\n-                project_obligation.with(project_obligation.predicate.to_predicate(tcx)),\n+                project_obligation.with(tcx, project_obligation.predicate),\n             ])),\n             ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n                 ProcessResult::Error(CodeProjectionError(e))"}, {"sha": "ddc9b768f07e0b288495e7b4b6cfe4cafaf32045", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -440,7 +440,7 @@ pub fn impossible_predicates<'tcx>(\n     let ocx = ObligationCtxt::new(&infcx);\n     let predicates = ocx.normalize(ObligationCause::dummy(), param_env, predicates);\n     for predicate in predicates {\n-        let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n+        let obligation = Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate);\n         ocx.register_obligation(obligation);\n     }\n     let errors = ocx.select_all_or_error();\n@@ -530,6 +530,7 @@ fn is_impossible_method<'tcx>(\n     let predicates_for_trait = predicates.predicates.iter().filter_map(|(pred, span)| {\n         if pred.visit_with(&mut visitor).is_continue() {\n             Some(Obligation::new(\n+                tcx,\n                 ObligationCause::dummy_with_span(*span),\n                 param_env,\n                 ty::EarlyBinder(*pred).subst(tcx, impl_trait_ref.substs),"}, {"sha": "9745e0137ee9f63f0dc95218d4579ac2d22fd3ad", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -375,6 +375,7 @@ fn object_safety_violation_for_method(\n         let span = match (&v, node) {\n             (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n             (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n+            (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n             (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n                 node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n             }\n@@ -437,8 +438,8 @@ fn virtual_call_violation_for_method<'tcx>(\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n         return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n-    if contains_illegal_impl_trait_in_trait(tcx, sig.output()) {\n-        return Some(MethodViolationCode::ReferencesImplTraitInTrait);\n+    if let Some(code) = contains_illegal_impl_trait_in_trait(tcx, method.def_id, sig.output()) {\n+        return Some(code);\n     }\n \n     // We can't monomorphize things like `fn foo<A>(...)`.\n@@ -723,10 +724,9 @@ fn receiver_is_dispatchable<'tcx>(\n             def_id: dispatch_from_dyn_did,\n             substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n         })\n-        .without_const()\n-        .to_predicate(tcx);\n+        .without_const();\n \n-        Obligation::new(ObligationCause::dummy(), param_env, predicate)\n+        Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };\n \n     let infcx = tcx.infer_ctxt().build();\n@@ -865,16 +865,24 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n \n pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    fn_def_id: DefId,\n     ty: ty::Binder<'tcx, Ty<'tcx>>,\n-) -> bool {\n+) -> Option<MethodViolationCode> {\n+    // This would be caught below, but rendering the error as a separate\n+    // `async-specific` message is better.\n+    if tcx.asyncness(fn_def_id).is_async() {\n+        return Some(MethodViolationCode::AsyncFn);\n+    }\n+\n     // FIXME(RPITIT): Perhaps we should use a visitor here?\n-    ty.skip_binder().walk().any(|arg| {\n+    ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Projection(proj) = ty.kind()\n+            && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+            Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.item_def_id)))\n         } else {\n-            false\n+            None\n         }\n     })\n }"}, {"sha": "ede6cd607b7fe82d580ae21e34b0c2f6b9f188e0", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -200,7 +200,7 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n             infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n         let new_universe = infcx.universe();\n \n-        let placeholder_obligation = obligation.with(placeholder_predicate);\n+        let placeholder_obligation = obligation.with(infcx.tcx, placeholder_predicate);\n         match project_and_unify_type(selcx, &placeholder_obligation) {\n             ProjectAndUnifyResult::MismatchedProjectionTypes(e) => Err(e),\n             ProjectAndUnifyResult::Holds(obligations)\n@@ -517,6 +517,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             let obligation = Obligation::with_depth(\n+                                self.tcx(),\n                                 self.cause.clone(),\n                                 recursion_limit.0,\n                                 self.param_env,\n@@ -573,6 +574,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     && !self.tcx().sess.opts.actually_rustdoc\n                 {\n                     let obligation = Obligation::with_depth(\n+                        self.selcx.tcx(),\n                         self.cause.clone(),\n                         recursion_limit.0,\n                         self.param_env,\n@@ -1110,7 +1112,8 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n         }\n     }\n \n-    let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);\n+    let obligation =\n+        Obligation::with_depth(selcx.tcx(), cause.clone(), depth, param_env, projection_ty);\n \n     match project(selcx, &obligation) {\n         Ok(Projected::Progress(Progress {\n@@ -1343,8 +1346,8 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n             ty::Binder::dummy(ty::TraitRef { def_id: trait_def_id, substs: trait_substs })\n                 .to_poly_trait_predicate();\n \n-        let _ =\n-            selcx.infcx().commit_if_ok(|_| match selcx.select(&obligation.with(trait_predicate)) {\n+        let _ = selcx.infcx().commit_if_ok(|_| {\n+            match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n                     candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n                         ImplTraitInTraitCandidate::Impl(data),\n@@ -1364,7 +1367,8 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n                     candidate_set.mark_error(e);\n                     return Err(());\n                 }\n-            });\n+            }\n+        });\n     }\n }\n \n@@ -1538,7 +1542,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n-    let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());\n+    let trait_obligation = obligation.with(selcx.tcx(), poly_trait_ref.to_poly_trait_predicate());\n     let _ = selcx.infcx().commit_if_ok(|_| {\n         let impl_source = match selcx.select(&trait_obligation) {\n             Ok(Some(impl_source)) => impl_source,\n@@ -1705,12 +1709,12 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     ty::Param(_) | ty::Projection(..) | ty::Opaque(..)\n                         if selcx.infcx().predicate_must_hold_modulo_regions(\n                             &obligation.with(\n+                                selcx.tcx(),\n                                 ty::Binder::dummy(ty::TraitRef::new(\n                                     selcx.tcx().require_lang_item(LangItem::Sized, None),\n                                     selcx.tcx().mk_substs_trait(self_ty, &[]),\n                                 ))\n-                                .without_const()\n-                                .to_predicate(selcx.tcx()),\n+                                .without_const(),\n                             ),\n                         ) =>\n                     {\n@@ -1966,13 +1970,8 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n             tcx.require_lang_item(LangItem::Sized, None),\n             tcx.mk_substs_trait(self_ty, &[]),\n         ))\n-        .without_const()\n-        .to_predicate(tcx);\n-        obligations.push(Obligation::new(\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-            sized_predicate,\n-        ));\n+        .without_const();\n+        obligations.push(obligation.with(tcx, sized_predicate));\n     }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n@@ -2289,6 +2288,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     obligations.extend(std::iter::zip(predicates.predicates, predicates.spans).map(\n         |(pred, span)| {\n             Obligation::with_depth(\n+                tcx,\n                 ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n@@ -2342,6 +2342,7 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n             nested,\n         );\n         nested.push(Obligation::with_depth(\n+            tcx,\n             obligation.cause.clone(),\n             obligation.recursion_depth + 1,\n             obligation.param_env,"}, {"sha": "f5c98558a25256cdb288b89b00c32f3844044775", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -208,6 +208,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             let obligation = Obligation::with_depth(\n+                                self.tcx(),\n                                 self.cause.clone(),\n                                 recursion_limit.0,\n                                 self.param_env,"}, {"sha": "dfe19a5a86d3bf40dc0816c6b733bf4269a05df0", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1,8 +1,8 @@\n use crate::infer::InferCtxt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::{ObligationCause, PredicateObligation};\n+use crate::traits::PredicateObligation;\n use rustc_infer::traits::TraitEngine;\n-use rustc_middle::ty::{self, ToPredicate};\n+use rustc_middle::ty;\n \n pub(crate) fn update<'tcx, T>(\n     engine: &mut T,\n@@ -25,9 +25,7 @@ pub(crate) fn update<'tcx, T>(\n \n         // Then construct a new obligation with Self = () added\n         // to the ParamEnv, and see if it holds.\n-        let o = rustc_infer::traits::Obligation::new(\n-            ObligationCause::dummy(),\n-            obligation.param_env,\n+        let o = obligation.with(infcx.tcx,\n             obligation\n                 .predicate\n                 .kind()\n@@ -38,8 +36,7 @@ pub(crate) fn update<'tcx, T>(\n                         constness: tpred.constness,\n                         polarity: tpred.polarity,\n                     })\n-                )\n-                .to_predicate(infcx.tcx),\n+                ),\n         );\n         // Don't report overflow errors. Otherwise equivalent to may_hold.\n         if let Ok(result) = infcx.probe(|_| infcx.evaluate_obligation(&o)) && result.may_apply() {"}, {"sha": "3995ea58db16cad7cec3749f3f0787792e1eaa0f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -13,7 +13,7 @@ use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits;\n@@ -718,9 +718,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         let obligation = traits::Obligation::new(\n+            tcx,\n             cause.clone(),\n             param_env,\n-            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const(),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             return None;"}, {"sha": "9d43f72b85f15dbaf717e540ad4a16e8792d2d15", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -194,6 +194,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     &mut obligations,\n                 );\n                 obligations.push(Obligation::with_depth(\n+                    self.tcx(),\n                     obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n@@ -482,11 +483,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 super_trait,\n                 &mut nested,\n             );\n-            nested.push(Obligation::new(\n-                obligation.cause.clone(),\n-                obligation.param_env,\n-                normalized_super_trait,\n-            ));\n+            nested.push(obligation.with(tcx, normalized_super_trait));\n         }\n \n         let assoc_types: Vec<_> = tcx\n@@ -581,11 +578,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     subst_bound,\n                     &mut nested,\n                 );\n-                nested.push(Obligation::new(\n-                    obligation.cause.clone(),\n-                    obligation.param_env,\n-                    normalized_bound,\n-                ));\n+                nested.push(obligation.with(tcx, normalized_bound));\n             }\n         }\n \n@@ -644,9 +637,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.tcx().mk_substs_trait(output_ty, &[]),\n         ));\n         nested.push(Obligation::new(\n+            self.infcx.tcx,\n             cause,\n             obligation.param_env,\n-            tr.to_poly_trait_predicate().to_predicate(self.tcx()),\n+            tr.to_poly_trait_predicate(),\n         ));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n@@ -727,11 +721,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // FIXME: Chalk\n \n         if !self.tcx().sess.opts.unstable_opts.chalk {\n-            nested.push(Obligation::new(\n-                obligation.cause.clone(),\n-                obligation.param_env,\n-                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind))\n-                    .to_predicate(self.tcx()),\n+            nested.push(obligation.with(\n+                self.tcx(),\n+                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)),\n             ));\n         }\n \n@@ -860,10 +852,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n+                    tcx,\n                     cause,\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n-                    obligation.predicate.rebind(outlives).to_predicate(tcx),\n+                    obligation.predicate.rebind(outlives),\n                 ));\n             }\n             _ => bug!(),\n@@ -957,10 +950,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n+                    tcx,\n                     cause,\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n-                    obligation.predicate.rebind(outlives).to_predicate(tcx),\n+                    obligation.predicate.rebind(outlives),\n                 ));\n             }\n \n@@ -979,6 +973,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 let predicate_to_obligation = |predicate| {\n                     Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n@@ -1255,20 +1250,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.param_env,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n-                        self_ty\n-                            .rebind(ty::TraitPredicate {\n-                                trait_ref: ty::TraitRef {\n-                                    def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                                    substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                                },\n-                                constness: ty::BoundConstness::ConstIfConst,\n-                                polarity: ty::ImplPolarity::Positive,\n-                            })\n-                            .to_predicate(tcx),\n+                        self_ty.rebind(ty::TraitPredicate {\n+                            trait_ref: ty::TraitRef {\n+                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n+                                substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n+                            },\n+                            constness: ty::BoundConstness::ConstIfConst,\n+                            polarity: ty::ImplPolarity::Positive,\n+                        }),\n                         &mut nested,\n                     );\n \n                     nested.push(Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n@@ -1280,18 +1274,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // since it's either not `const Drop` (and we raise an error during selection),\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n-                    let predicate = self_ty\n-                        .rebind(ty::TraitPredicate {\n-                            trait_ref: ty::TraitRef {\n-                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                                substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                            },\n-                            constness: ty::BoundConstness::ConstIfConst,\n-                            polarity: ty::ImplPolarity::Positive,\n-                        })\n-                        .to_predicate(tcx);\n+                    let predicate = self_ty.rebind(ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef {\n+                            def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n+                            substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n+                        },\n+                        constness: ty::BoundConstness::ConstIfConst,\n+                        polarity: ty::ImplPolarity::Positive,\n+                    });\n \n                     nested.push(Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,"}, {"sha": "c369c5de52bb1a0e992f2610054412d914a5ea0a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -445,7 +445,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::Trait(t) => {\n                     let t = bound_predicate.rebind(t);\n                     debug_assert!(!t.has_escaping_bound_vars());\n-                    let obligation = obligation.with(t);\n+                    let obligation = obligation.with(self.tcx(), t);\n                     self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n                 }\n \n@@ -596,7 +596,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 ty::PredicateKind::Projection(data) => {\n                     let data = bound_predicate.rebind(data);\n-                    let project_obligation = obligation.with(data);\n+                    let project_obligation = obligation.with(self.tcx(), data);\n                     match project::poly_project_and_unify_type(self, &project_obligation) {\n                         ProjectAndUnifyResult::Holds(mut subobligations) => {\n                             'compute_res: {"}, {"sha": "d05e893de433abfaa6de92de04751b2e81e48858", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -4,7 +4,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n \n use std::iter;\n@@ -324,7 +324,7 @@ impl<'tcx> WfPredicates<'tcx> {\n             extend_cause_with_original_assoc_item_obligation(\n                 tcx, trait_ref, item, &mut cause, predicate,\n             );\n-            traits::Obligation::with_depth(cause, depth, param_env, predicate)\n+            traits::Obligation::with_depth(tcx, cause, depth, param_env, predicate)\n         };\n \n         if let Elaborate::All = elaborate {\n@@ -356,10 +356,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                         }\n                     }\n                     traits::Obligation::with_depth(\n+                        tcx,\n                         cause,\n                         depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n                     )\n                 }),\n         );\n@@ -407,10 +408,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 .filter(|arg| !arg.has_escaping_bound_vars())\n                 .map(|arg| {\n                     traits::Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n                     )\n                 }),\n         );\n@@ -424,10 +426,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 substs: self.tcx.mk_substs_trait(subty, &[]),\n             };\n             self.out.push(traits::Obligation::with_depth(\n+                self.tcx,\n                 cause,\n                 self.recursion_depth,\n                 self.param_env,\n-                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx),\n+                ty::Binder::dummy(trait_ref).without_const(),\n             ));\n         }\n     }\n@@ -454,10 +457,10 @@ impl<'tcx> WfPredicates<'tcx> {\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n-                                    .to_predicate(self.tcx());\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct));\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth(\n+                                self.tcx(),\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n@@ -468,11 +471,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                             let cause = self.cause(traits::WellFormed(None));\n \n                             self.out.push(traits::Obligation::with_depth(\n+                                self.tcx(),\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into()))\n-                                    .to_predicate(self.tcx()),\n+                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into())),\n                             ));\n                         }\n                         ty::ConstKind::Error(_)\n@@ -556,13 +559,13 @@ impl<'tcx> WfPredicates<'tcx> {\n                     if !r.has_escaping_bound_vars() && !rty.has_escaping_bound_vars() {\n                         let cause = self.cause(traits::ReferenceOutlivesReferent(ty));\n                         self.out.push(traits::Obligation::with_depth(\n+                            self.tcx(),\n                             cause,\n                             depth,\n                             param_env,\n                             ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n                                 ty::OutlivesPredicate(rty, r),\n-                            ))\n-                            .to_predicate(self.tcx()),\n+                            )),\n                         ));\n                     }\n                 }\n@@ -656,11 +659,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                         let tcx = self.tcx();\n                         self.out.extend(component_traits.map(|did| {\n                             traits::Obligation::with_depth(\n+                                tcx,\n                                 cause.clone(),\n                                 depth,\n                                 param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did))\n-                                    .to_predicate(tcx),\n+                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did)),\n                             )\n                         }));\n                     }\n@@ -681,11 +684,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 ty::Infer(_) => {\n                     let cause = self.cause(traits::WellFormed(None));\n                     self.out.push(traits::Obligation::with_depth(\n+                        self.tcx(),\n                         cause,\n                         self.recursion_depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n-                            .to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())),\n                     ));\n                 }\n             }\n@@ -724,7 +727,13 @@ impl<'tcx> WfPredicates<'tcx> {\n                 if remap_constness {\n                     pred = pred.without_const(self.tcx);\n                 }\n-                traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)\n+                traits::Obligation::with_depth(\n+                    self.tcx,\n+                    cause,\n+                    self.recursion_depth,\n+                    self.param_env,\n+                    pred,\n+                )\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())\n             .collect()\n@@ -794,10 +803,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 let outlives =\n                     ty::Binder::dummy(ty::OutlivesPredicate(explicit_bound, implicit_bound));\n                 self.out.push(traits::Obligation::with_depth(\n+                    self.tcx,\n                     cause,\n                     self.recursion_depth,\n                     self.param_env,\n-                    outlives.to_predicate(self.tcx),\n+                    outlives,\n                 ));\n             }\n         }"}, {"sha": "e94c8efe69a92052a168aaeedc3dd1af91e10999", "filename": "compiler/rustc_traits/src/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -26,7 +26,7 @@ fn evaluate_obligation<'tcx>(\n     let ParamEnvAnd { param_env, value: predicate } = goal;\n \n     let mut selcx = SelectionContext::with_query_mode(&infcx, TraitQueryMode::Canonical);\n-    let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n+    let obligation = Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate);\n \n     selcx.evaluate_root_obligation(&obligation)\n }"}, {"sha": "9eceae8b44f8e8d0f088d6039e21455914d8109a", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -91,7 +91,12 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     }\n \n     fn prove_predicate(&self, predicate: Predicate<'tcx>, cause: ObligationCause<'tcx>) {\n-        self.ocx.register_obligation(Obligation::new(cause, self.param_env, predicate));\n+        self.ocx.register_obligation(Obligation::new(\n+            self.ocx.infcx.tcx,\n+            cause,\n+            self.param_env,\n+            predicate,\n+        ));\n     }\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n@@ -256,5 +261,5 @@ pub fn type_op_prove_predicate_with_cause<'tcx>(\n     cause: ObligationCause<'tcx>,\n ) {\n     let (param_env, ProvePredicate { predicate }) = key.into_parts();\n-    ocx.register_obligation(Obligation::new(cause, param_env, predicate));\n+    ocx.register_obligation(Obligation::new(ocx.infcx.tcx, cause, param_env, predicate));\n }"}, {"sha": "f3cbfe27b3eed620adf88462ecba8e7c0dfdf80e", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -293,6 +293,15 @@ struct RcBox<T: ?Sized> {\n     value: T,\n }\n \n+/// Calculate layout for `RcBox<T>` using the inner value's layout\n+fn rcbox_layout_for_value_layout(layout: Layout) -> Layout {\n+    // Calculate layout using the given value layout.\n+    // Previously, layout was calculated on the expression\n+    // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n+    // reference (see #54908).\n+    Layout::new::<RcBox<()>>().extend(layout).unwrap().0.pad_to_align()\n+}\n+\n /// A single-threaded reference-counting pointer. 'Rc' stands for 'Reference\n /// Counted'.\n ///\n@@ -1334,11 +1343,7 @@ impl<T: ?Sized> Rc<T> {\n         allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,\n         mem_to_rcbox: impl FnOnce(*mut u8) -> *mut RcBox<T>,\n     ) -> *mut RcBox<T> {\n-        // Calculate layout using the given value layout.\n-        // Previously, layout was calculated on the expression\n-        // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n-        // reference (see #54908).\n-        let layout = Layout::new::<RcBox<()>>().extend(value_layout).unwrap().0.pad_to_align();\n+        let layout = rcbox_layout_for_value_layout(value_layout);\n         unsafe {\n             Rc::try_allocate_for_layout(value_layout, allocate, mem_to_rcbox)\n                 .unwrap_or_else(|_| handle_alloc_error(layout))\n@@ -1357,11 +1362,7 @@ impl<T: ?Sized> Rc<T> {\n         allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,\n         mem_to_rcbox: impl FnOnce(*mut u8) -> *mut RcBox<T>,\n     ) -> Result<*mut RcBox<T>, AllocError> {\n-        // Calculate layout using the given value layout.\n-        // Previously, layout was calculated on the expression\n-        // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n-        // reference (see #54908).\n-        let layout = Layout::new::<RcBox<()>>().extend(value_layout).unwrap().0.pad_to_align();\n+        let layout = rcbox_layout_for_value_layout(value_layout);\n \n         // Allocate for the layout.\n         let ptr = allocate(layout)?;\n@@ -1428,7 +1429,7 @@ impl<T> Rc<[T]> {\n         }\n     }\n \n-    /// Copy elements from slice into newly allocated Rc<\\[T\\]>\n+    /// Copy elements from slice into newly allocated `Rc<[T]>`\n     ///\n     /// Unsafe because the caller must either take ownership or bind `T: Copy`\n     #[cfg(not(no_global_oom_handling))]\n@@ -1440,6 +1441,48 @@ impl<T> Rc<[T]> {\n         }\n     }\n \n+    /// Create an `Rc<[T]>` by reusing the underlying memory\n+    /// of a `Vec<T>`. This will return the vector if the existing allocation\n+    /// is not large enough.\n+    #[cfg(not(no_global_oom_handling))]\n+    fn try_from_vec_in_place(mut v: Vec<T>) -> Result<Rc<[T]>, Vec<T>> {\n+        let layout_elements = Layout::array::<T>(v.len()).unwrap();\n+        let layout_allocation = Layout::array::<T>(v.capacity()).unwrap();\n+        let layout_rcbox = rcbox_layout_for_value_layout(layout_elements);\n+        let mut ptr = NonNull::new(v.as_mut_ptr()).expect(\"`Vec<T>` stores `NonNull<T>`\");\n+        if layout_rcbox.size() > layout_allocation.size()\n+            || layout_rcbox.align() > layout_allocation.align()\n+        {\n+            // Can't fit - calling `grow` would involve `realloc`\n+            // (which copies the elements), followed by copying again.\n+            return Err(v);\n+        }\n+        if layout_rcbox.size() < layout_allocation.size()\n+            || layout_rcbox.align() < layout_allocation.align()\n+        {\n+            // We need to shrink the allocation so that it fits\n+            // https://doc.rust-lang.org/nightly/std/alloc/trait.Allocator.html#memory-fitting\n+            // SAFETY:\n+            // - Vec allocates by requesting `Layout::array::<T>(capacity)`, so this capacity matches\n+            // - `layout_rcbox` is smaller\n+            // If this fails, the ownership has not been transferred\n+            if let Ok(p) = unsafe { Global.shrink(ptr.cast(), layout_allocation, layout_rcbox) } {\n+                ptr = p.cast();\n+            } else {\n+                return Err(v);\n+            }\n+        }\n+        // Make sure the vec's memory isn't deallocated now\n+        let v = mem::ManuallyDrop::new(v);\n+        let ptr: *mut RcBox<[T]> = ptr::slice_from_raw_parts_mut(ptr.as_ptr(), v.len()) as _;\n+        unsafe {\n+            ptr::copy(ptr.cast::<T>(), &mut (*ptr).value as *mut [T] as *mut T, v.len());\n+            ptr::write(&mut (*ptr).strong, Cell::new(1));\n+            ptr::write(&mut (*ptr).weak, Cell::new(1));\n+            Ok(Self::from_ptr(ptr))\n+        }\n+    }\n+\n     /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.\n     ///\n     /// Behavior is undefined should the size be wrong.\n@@ -1965,14 +2008,17 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n     /// assert_eq!(vec![1, 2, 3], *shared);\n     /// ```\n     #[inline]\n-    fn from(mut v: Vec<T>) -> Rc<[T]> {\n-        unsafe {\n-            let rc = Rc::copy_from_slice(&v);\n-\n-            // Allow the Vec to free its memory, but not destroy its contents\n-            v.set_len(0);\n-\n-            rc\n+    fn from(v: Vec<T>) -> Rc<[T]> {\n+        match Rc::try_from_vec_in_place(v) {\n+            Ok(rc) => rc,\n+            Err(mut v) => {\n+                unsafe {\n+                    let rc = Rc::copy_from_slice(&v);\n+                    // Allow the Vec to free its memory, but not destroy its contents\n+                    v.set_len(0);\n+                    rc\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "37e07eb5998b332ffdeb54f4fe675557800e289d", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 66, "deletions": 19, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -333,6 +333,15 @@ struct ArcInner<T: ?Sized> {\n     data: T,\n }\n \n+/// Calculate layout for `ArcInner<T>` using the inner value's layout\n+fn arcinner_layout_for_value_layout(layout: Layout) -> Layout {\n+    // Calculate layout using the given value layout.\n+    // Previously, layout was calculated on the expression\n+    // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n+    // reference (see #54908).\n+    Layout::new::<ArcInner<()>>().extend(layout).unwrap().0.pad_to_align()\n+}\n+\n unsafe impl<T: ?Sized + Sync + Send> Send for ArcInner<T> {}\n unsafe impl<T: ?Sized + Sync + Send> Sync for ArcInner<T> {}\n \n@@ -1154,11 +1163,7 @@ impl<T: ?Sized> Arc<T> {\n         allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,\n         mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>,\n     ) -> *mut ArcInner<T> {\n-        // Calculate layout using the given value layout.\n-        // Previously, layout was calculated on the expression\n-        // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n-        // reference (see #54908).\n-        let layout = Layout::new::<ArcInner<()>>().extend(value_layout).unwrap().0.pad_to_align();\n+        let layout = arcinner_layout_for_value_layout(value_layout);\n         unsafe {\n             Arc::try_allocate_for_layout(value_layout, allocate, mem_to_arcinner)\n                 .unwrap_or_else(|_| handle_alloc_error(layout))\n@@ -1176,11 +1181,7 @@ impl<T: ?Sized> Arc<T> {\n         allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,\n         mem_to_arcinner: impl FnOnce(*mut u8) -> *mut ArcInner<T>,\n     ) -> Result<*mut ArcInner<T>, AllocError> {\n-        // Calculate layout using the given value layout.\n-        // Previously, layout was calculated on the expression\n-        // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n-        // reference (see #54908).\n-        let layout = Layout::new::<ArcInner<()>>().extend(value_layout).unwrap().0.pad_to_align();\n+        let layout = arcinner_layout_for_value_layout(value_layout);\n \n         let ptr = allocate(layout)?;\n \n@@ -1246,7 +1247,7 @@ impl<T> Arc<[T]> {\n         }\n     }\n \n-    /// Copy elements from slice into newly allocated Arc<\\[T\\]>\n+    /// Copy elements from slice into newly allocated `Arc<[T]>`\n     ///\n     /// Unsafe because the caller must either take ownership or bind `T: Copy`.\n     #[cfg(not(no_global_oom_handling))]\n@@ -1260,6 +1261,49 @@ impl<T> Arc<[T]> {\n         }\n     }\n \n+    /// Create an `Arc<[T]>` by reusing the underlying memory\n+    /// of a `Vec<T>`. This will return the vector if the existing allocation\n+    /// is not large enough.\n+    #[cfg(not(no_global_oom_handling))]\n+    fn try_from_vec_in_place(mut v: Vec<T>) -> Result<Arc<[T]>, Vec<T>> {\n+        let layout_elements = Layout::array::<T>(v.len()).unwrap();\n+        let layout_allocation = Layout::array::<T>(v.capacity()).unwrap();\n+        let layout_arcinner = arcinner_layout_for_value_layout(layout_elements);\n+        let mut ptr = NonNull::new(v.as_mut_ptr()).expect(\"`Vec<T>` stores `NonNull<T>`\");\n+        if layout_arcinner.size() > layout_allocation.size()\n+            || layout_arcinner.align() > layout_allocation.align()\n+        {\n+            // Can't fit - calling `grow` would involve `realloc`\n+            // (which copies the elements), followed by copying again.\n+            return Err(v);\n+        }\n+        if layout_arcinner.size() < layout_allocation.size()\n+            || layout_arcinner.align() < layout_allocation.align()\n+        {\n+            // We need to shrink the allocation so that it fits\n+            // https://doc.rust-lang.org/nightly/std/alloc/trait.Allocator.html#memory-fitting\n+            // SAFETY:\n+            // - Vec allocates by requesting `Layout::array::<T>(capacity)`, so this capacity matches\n+            // - `layout_arcinner` is smaller\n+            // If this fails, the ownership has not been transferred\n+            if let Ok(p) = unsafe { Global.shrink(ptr.cast(), layout_allocation, layout_arcinner) }\n+            {\n+                ptr = p.cast();\n+            } else {\n+                return Err(v);\n+            }\n+        }\n+        // Make sure the vec's memory isn't deallocated now\n+        let v = mem::ManuallyDrop::new(v);\n+        let ptr: *mut ArcInner<[T]> = ptr::slice_from_raw_parts_mut(ptr.as_ptr(), v.len()) as _;\n+        unsafe {\n+            ptr::copy(ptr.cast::<T>(), &mut (*ptr).data as *mut [T] as *mut T, v.len());\n+            ptr::write(&mut (*ptr).strong, atomic::AtomicUsize::new(1));\n+            ptr::write(&mut (*ptr).weak, atomic::AtomicUsize::new(1));\n+            Ok(Self::from_ptr(ptr))\n+        }\n+    }\n+\n     /// Constructs an `Arc<[T]>` from an iterator known to be of a certain size.\n     ///\n     /// Behavior is undefined should the size be wrong.\n@@ -2571,14 +2615,17 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n     /// assert_eq!(&[1, 2, 3], &shared[..]);\n     /// ```\n     #[inline]\n-    fn from(mut v: Vec<T>) -> Arc<[T]> {\n-        unsafe {\n-            let arc = Arc::copy_from_slice(&v);\n-\n-            // Allow the Vec to free its memory, but not destroy its contents\n-            v.set_len(0);\n-\n-            arc\n+    fn from(v: Vec<T>) -> Arc<[T]> {\n+        match Arc::try_from_vec_in_place(v) {\n+            Ok(rc) => rc,\n+            Err(mut v) => {\n+                unsafe {\n+                    let rc = Arc::copy_from_slice(&v);\n+                    // Allow the Vec to free its memory, but not destroy its contents\n+                    v.set_len(0);\n+                    rc\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "eb379e4d6a10f9edfba773e77377f3cd4169a289", "filename": "library/alloc/tests/arc.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Farc.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -210,3 +210,18 @@ fn weak_may_dangle() {\n     // `val` dropped here while still borrowed\n     // borrow might be used here, when `val` is dropped and runs the `Drop` code for type `std::sync::Weak`\n }\n+\n+#[test]\n+fn arc_from_vec_opt() {\n+    let mut v = Vec::with_capacity(64);\n+    v.push(0usize);\n+    let addr = v.as_ptr().cast::<u8>();\n+    let arc: Arc<[_]> = v.into();\n+    unsafe {\n+        assert_eq!(\n+            arc.as_ptr().cast::<u8>().offset_from(addr),\n+            (std::mem::size_of::<usize>() * 2) as isize,\n+            \"Vector allocation not reused\"\n+        );\n+    }\n+}"}, {"sha": "1d5f3c52006487bb9517b4fafec882965868c117", "filename": "library/alloc/tests/rc.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Falloc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Frc.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -206,3 +206,18 @@ fn weak_may_dangle() {\n     // `val` dropped here while still borrowed\n     // borrow might be used here, when `val` is dropped and runs the `Drop` code for type `std::rc::Weak`\n }\n+\n+#[test]\n+fn rc_from_vec_opt() {\n+    let mut v = Vec::with_capacity(64);\n+    v.push(0usize);\n+    let addr = v.as_ptr().cast::<u8>();\n+    let rc: Rc<[_]> = v.into();\n+    unsafe {\n+        assert_eq!(\n+            rc.as_ptr().cast::<u8>().offset_from(addr),\n+            (std::mem::size_of::<usize>() * 2) as isize,\n+            \"Vector allocation not reused\"\n+        );\n+    }\n+}"}, {"sha": "107cf92c1c0f7c9bb515051591665807010221c1", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -82,6 +82,7 @@ where\n \n     impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n         type Output = T::Return;\n+        #[track_caller]\n         fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n             // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n             let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };"}, {"sha": "c20ca69a1c6f1dd67b6e8b68c372fd1c8e62d991", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -338,6 +338,7 @@ pub macro debug_assert_matches($($arg:tt)*) {\n /// ```\n #[macro_export]\n #[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\n macro_rules! matches {\n     ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\n         match $expression {"}, {"sha": "65c882fb801e5b736e8958cc7b5fcf381a67a0b5", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -168,23 +168,7 @@ fn set_compiler(\n         // compiler already takes into account the triple in question.\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n-                let mut triple_iter = target.triple.split(\"-\");\n-                let triple_translated = if let Some(arch) = triple_iter.next() {\n-                    let arch_new = match arch {\n-                        \"arm\" | \"armv7\" | \"armv7neon\" | \"thumbv7\" | \"thumbv7neon\" => \"armv7a\",\n-                        other => other,\n-                    };\n-                    std::iter::once(arch_new).chain(triple_iter).collect::<Vec<&str>>().join(\"-\")\n-                } else {\n-                    target.triple.to_string()\n-                };\n-\n-                // API 19 is the earliest API level supported by NDK r25b but AArch64 and x86_64 support\n-                // begins at API level 21.\n-                let api_level =\n-                    if t.contains(\"aarch64\") || t.contains(\"x86_64\") { \"21\" } else { \"19\" };\n-                let compiler = format!(\"{}{}-{}\", triple_translated, api_level, compiler.clang());\n-                cfg.compiler(ndk.join(\"bin\").join(compiler));\n+                cfg.compiler(ndk_compiler(compiler, &*target.triple, ndk));\n             }\n         }\n \n@@ -236,8 +220,28 @@ fn set_compiler(\n     }\n }\n \n+pub(crate) fn ndk_compiler(compiler: Language, triple: &str, ndk: &Path) -> PathBuf {\n+    let mut triple_iter = triple.split(\"-\");\n+    let triple_translated = if let Some(arch) = triple_iter.next() {\n+        let arch_new = match arch {\n+            \"arm\" | \"armv7\" | \"armv7neon\" | \"thumbv7\" | \"thumbv7neon\" => \"armv7a\",\n+            other => other,\n+        };\n+        std::iter::once(arch_new).chain(triple_iter).collect::<Vec<&str>>().join(\"-\")\n+    } else {\n+        triple.to_string()\n+    };\n+\n+    // API 19 is the earliest API level supported by NDK r25b but AArch64 and x86_64 support\n+    // begins at API level 21.\n+    let api_level =\n+        if triple.contains(\"aarch64\") || triple.contains(\"x86_64\") { \"21\" } else { \"19\" };\n+    let compiler = format!(\"{}{}-{}\", triple_translated, api_level, compiler.clang());\n+    ndk.join(\"bin\").join(compiler)\n+}\n+\n /// The target programming language for a native compiler.\n-enum Language {\n+pub(crate) enum Language {\n     /// The compiler is targeting C.\n     C,\n     /// The compiler is targeting C++."}, {"sha": "c61025b556aa5702941f43215aebc73144aaa59e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -15,6 +15,7 @@ use std::str::FromStr;\n \n use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n+use crate::cc_detect::{ndk_compiler, Language};\n use crate::channel::{self, GitInfo};\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n@@ -1237,8 +1238,12 @@ impl Config {\n                 if let Some(s) = cfg.no_std {\n                     target.no_std = s;\n                 }\n-                target.cc = cfg.cc.map(PathBuf::from);\n-                target.cxx = cfg.cxx.map(PathBuf::from);\n+                target.cc = cfg.cc.map(PathBuf::from).or_else(|| {\n+                    target.ndk.as_ref().map(|ndk| ndk_compiler(Language::C, &triple, ndk))\n+                });\n+                target.cxx = cfg.cxx.map(PathBuf::from).or_else(|| {\n+                    target.ndk.as_ref().map(|ndk| ndk_compiler(Language::CPlusPlus, &triple, ndk))\n+                });\n                 target.ar = cfg.ar.map(PathBuf::from);\n                 target.ranlib = cfg.ranlib.map(PathBuf::from);\n                 target.linker = cfg.linker.map(PathBuf::from);"}, {"sha": "57e63cd39d2f8f6ba5ba23f1bab1f21c244ea4af", "filename": "src/ci/docker/host-x86_64/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -9,7 +9,7 @@ RUN apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-\n       curl \\\n       file \\\n       g++ \\\n-      gcc-arm-linux-gnueabihf \\\n+      g++-arm-linux-gnueabihf \\\n       git \\\n       libc6-dev \\\n       libc6-dev-armhf-cross \\"}, {"sha": "cb0b8d4a9bc195a9604da69798cc686515ee4751", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -76,6 +76,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                 for predicate in predicates {\n                     debug!(\"testing predicate {:?}\", predicate);\n                     let obligation = traits::Obligation::new(\n+                        infcx.tcx,\n                         traits::ObligationCause::dummy(),\n                         param_env,\n                         predicate,"}, {"sha": "5ec2fe47e0156bc0e44157089fe73295261d071a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -217,10 +217,7 @@ h1 a,\n .search-results a,\n .module-item .stab,\n .import-item .stab,\n-.result-name .primitive > i, .result-name .keyword > i,\n-.method .where,\n-.fn .where,\n-.where.fmt-newline {\n+.result-name .primitive > i, .result-name .keyword > i {\n \tcolor: var(--main-color);\n }\n \n@@ -1162,6 +1159,8 @@ pre.rust .doccomment {\n \twidth: max-content;\n \ttop: -2px;\n \tz-index: 1;\n+\tbackground-color: var(--tooltip-background-color);\n+\tcolor: var(--tooltip-color);\n }\n \n .example-wrap .tooltip::before {\n@@ -1170,10 +1169,10 @@ pre.rust .doccomment {\n \ttop: 50%;\n \tleft: 16px;\n \tmargin-top: -5px;\n-\tborder-width: 5px;\n-\tborder-style: solid;\n \tdisplay: none;\n \tz-index: 1;\n+\tborder: 5px solid transparent;\n+\tborder-right-color: var(--tooltip-background-color);\n }\n \n .example-wrap.ignore .tooltip::after {\n@@ -1393,12 +1392,6 @@ h3.variant {\n \tbackground-color: var(--button-background-color);\n \tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n-\tcolor: var(--settings-button-color);\n-}\n-\n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: var(--settings-button-border-focus);\n }\n \n #copy-path {"}, {"sha": "0e4dacb28f7cd0911b1855998bd4f49df402363f", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -7,8 +7,6 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--main-background-color: #0f1419;\n \t--main-color: #c5c5c5;\n \t--settings-input-color: #ffb454;\n-\t--settings-button-color: #fff;\n-\t--settings-button-border-focus: #e0e0e0;\n \t--sidebar-background-color: #14191f;\n \t--sidebar-background-color-hover: rgba(70, 70, 70, 0.33);\n \t--code-block-background-color: #191f26;\n@@ -67,6 +65,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--test-arrow-hover-background-color: rgba(57, 175, 215, 0.368);\n \t--target-background-color: rgba(255, 236, 164, 0.06);\n \t--target-border-color: rgba(255, 180, 76, 0.85);\n+\t--tooltip-background-color: #314559;\n+\t--tooltip-color: #c5c5c5;\n \t--rust-logo-filter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)\n@@ -162,15 +162,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #788797;\n }\n \n-.tooltip::after {\n-\tbackground-color: #314559;\n-\tcolor: #c5c5c5;\n-}\n-\n-.tooltip::before {\n-\tborder-color: transparent #314559 transparent transparent;\n-}\n-\n #titles > button.selected {\n \tbackground-color: #141920 !important;\n \tborder-bottom: 1px solid #ffb44c !important;\n@@ -208,10 +199,19 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #5c6773;\n }\n \n+#settings-menu > a, #help-button > a {\n+\tcolor: #fff;\n+}\n+\n #settings-menu > a img {\n \tfilter: invert(100);\n }\n \n+#settings-menu > a:hover, #settings-menu > a:focus,\n+#help-button > a:hover, #help-button > a:focus {\n+\tborder-color: #e0e0e0;\n+}\n+\n .search-results .result-name span.alias {\n \tcolor: #c5c5c5;\n }"}, {"sha": "8e00591179f1f201e0dff4cf530f990151e4f440", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -2,8 +2,6 @@\n \t--main-background-color: #353535;\n \t--main-color: #ddd;\n \t--settings-input-color: #2196f3;\n-\t--settings-button-color: #000;\n-\t--settings-button-border-focus: #ffb900;\n \t--sidebar-background-color: #505050;\n \t--sidebar-background-color-hover: #676767;\n \t--code-block-background-color: #2A2A2A;\n@@ -62,6 +60,8 @@\n \t--test-arrow-hover-background-color: #4e8bca;\n \t--target-background-color: #494a3d;\n \t--target-border-color: #bb7410;\n+\t--tooltip-background-color: #000;\n+\t--tooltip-color: #fff;\n \t--rust-logo-filter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)\n@@ -84,16 +84,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-.tooltip::after {\n-\tbackground-color: #000;\n-\tcolor: #fff;\n-\tborder-color: #000;\n-}\n-\n-.tooltip::before {\n-\tborder-color: transparent black transparent transparent;\n-}\n-\n #titles > button:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;\n@@ -114,6 +104,15 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n+#settings-menu > a, #help-button > a {\n+\tcolor: #000;\n+}\n+\n+#settings-menu > a:hover, #settings-menu > a:focus,\n+#help-button > a:hover, #help-button > a:focus {\n+\tborder-color: #ffb900;\n+}\n+\n .search-results .result-name span.alias {\n \tcolor: #fff;\n }"}, {"sha": "e23e3682b166ec3c459d95b56550bdb13698410c", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -2,8 +2,6 @@\n \t--main-background-color: white;\n \t--main-color: black;\n \t--settings-input-color: #2196f3;\n-\t--settings-button-color: #000;\n-\t--settings-button-border-focus: #717171;\n \t--sidebar-background-color: #F5F5F5;\n \t--sidebar-background-color-hover: #E0E0E0;\n \t--code-block-background-color: #F5F5F5;\n@@ -60,8 +58,10 @@\n \t--test-arrow-background-color: rgba(78, 139, 202, 0.2);\n \t--test-arrow-hover-color: #f5f5f5;\n \t--test-arrow-hover-background-color: #4e8bca;\n-\t--target-background-color: #fdFfd3;\n+\t--target-background-color: #fdffd3;\n \t--target-border-color: #ad7c37;\n+\t--tooltip-background-color: #fdffd3;\n+\t--tooltip-color: #fff;\n \t--rust-logo-filter: initial;\n \t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n \t--crate-search-div-filter: invert(100%) sepia(0%) saturate(4223%) hue-rotate(289deg)\n@@ -77,15 +77,6 @@ body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }\n \n-.tooltip::after {\n-\tbackground-color: #000;\n-\tcolor: #fff;\n-}\n-\n-.tooltip::before {\n-\tborder-color: transparent black transparent transparent;\n-}\n-\n #titles > button:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;\n@@ -106,6 +97,15 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n+#settings-menu > a, #help-button > a {\n+\tcolor: #000;\n+}\n+\n+#settings-menu > a:hover, #settings-menu > a:focus,\n+#help-button > a:hover, #help-button > a:focus {\n+\tborder-color: #717171;\n+}\n+\n .search-results .result-name span.alias {\n \tcolor: #000;\n }"}, {"sha": "5256ae916a771a6121c888c527bd80db8160fe01", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -9,13 +9,16 @@\n     const isSettingsPage = window.location.pathname.endsWith(\"/settings.html\");\n \n     function changeSetting(settingName, value) {\n+        if (settingName === \"theme\") {\n+            const useSystem = value === \"system preference\" ? \"true\" : \"false\";\n+            updateLocalStorage(\"use-system-theme\", useSystem);\n+        }\n         updateLocalStorage(settingName, value);\n \n         switch (settingName) {\n             case \"theme\":\n             case \"preferred-dark-theme\":\n             case \"preferred-light-theme\":\n-            case \"use-system-theme\":\n                 updateSystemTheme();\n                 updateLightAndDark();\n                 break;\n@@ -45,19 +48,18 @@\n     }\n \n     function showLightAndDark() {\n-        addClass(document.getElementById(\"theme\").parentElement, \"hidden\");\n         removeClass(document.getElementById(\"preferred-light-theme\").parentElement, \"hidden\");\n         removeClass(document.getElementById(\"preferred-dark-theme\").parentElement, \"hidden\");\n     }\n \n     function hideLightAndDark() {\n         addClass(document.getElementById(\"preferred-light-theme\").parentElement, \"hidden\");\n         addClass(document.getElementById(\"preferred-dark-theme\").parentElement, \"hidden\");\n-        removeClass(document.getElementById(\"theme\").parentElement, \"hidden\");\n     }\n \n     function updateLightAndDark() {\n-        if (getSettingValue(\"use-system-theme\") !== \"false\") {\n+        const useSystem = getSettingValue(\"use-system-theme\");\n+        if (useSystem === \"true\" || (useSystem === null && getSettingValue(\"theme\") === null)) {\n             showLightAndDark();\n         } else {\n             hideLightAndDark();\n@@ -91,7 +93,18 @@\n         });\n         onEachLazy(settingsElement.querySelectorAll(\"input[type=\\\"radio\\\"]\"), elem => {\n             const settingId = elem.name;\n-            const settingValue = getSettingValue(settingId);\n+            let settingValue = getSettingValue(settingId);\n+            if (settingId === \"theme\") {\n+                const useSystem = getSettingValue(\"use-system-theme\");\n+                if (useSystem === \"true\" || settingValue === null) {\n+                    if (useSystem !== \"false\") {\n+                        settingValue = \"system preference\";\n+                    } else {\n+                        // This is the default theme.\n+                        settingValue = \"light\";\n+                    }\n+                }\n+            }\n             if (settingValue !== null && settingValue !== \"null\") {\n                 elem.checked = settingValue === elem.value;\n             }\n@@ -120,26 +133,30 @@\n \n             if (setting[\"options\"] !== undefined) {\n                 // This is a select setting.\n-                output += `<div class=\"radio-line\" id=\"${js_data_name}\">\\\n-                        <span class=\"setting-name\">${setting_name}</span>\\\n-                        <div class=\"choices\">`;\n+                output += `\\\n+<div class=\"radio-line\" id=\"${js_data_name}\">\n+    <span class=\"setting-name\">${setting_name}</span>\n+<div class=\"choices\">`;\n                 onEach(setting[\"options\"], option => {\n                     const checked = option === setting[\"default\"] ? \" checked\" : \"\";\n+                    const full = `${js_data_name}-${option.replace(/ /g,\"-\")}`;\n \n-                    output += `<label for=\"${js_data_name}-${option}\" class=\"choice\">\\\n-                           <input type=\"radio\" name=\"${js_data_name}\" \\\n-                                id=\"${js_data_name}-${option}\" value=\"${option}\"${checked}>\\\n-                           <span>${option}</span>\\\n-                         </label>`;\n+                    output += `\\\n+<label for=\"${full}\" class=\"choice\">\n+    <input type=\"radio\" name=\"${js_data_name}\"\n+        id=\"${full}\" value=\"${option}\"${checked}>\n+    <span>${option}</span>\n+</label>`;\n                 });\n                 output += \"</div></div>\";\n             } else {\n                 // This is a toggle.\n                 const checked = setting[\"default\"] === true ? \" checked\" : \"\";\n-                output += `<label class=\"toggle\">\\\n-                        <input type=\"checkbox\" id=\"${js_data_name}\"${checked}>\\\n-                        <span class=\"label\">${setting_name}</span>\\\n-                    </label>`;\n+                output += `\\\n+<label class=\"toggle\">\\\n+    <input type=\"checkbox\" id=\"${js_data_name}\"${checked}>\\\n+    <span class=\"label\">${setting_name}</span>\\\n+</label>`;\n             }\n             output += \"</div>\";\n         }\n@@ -156,16 +173,11 @@\n         theme_names.push(\"light\", \"dark\", \"ayu\");\n \n         const settings = [\n-            {\n-                \"name\": \"Use system theme\",\n-                \"js_name\": \"use-system-theme\",\n-                \"default\": true,\n-            },\n             {\n                 \"name\": \"Theme\",\n                 \"js_name\": \"theme\",\n-                \"default\": \"light\",\n-                \"options\": theme_names,\n+                \"default\": \"system preference\",\n+                \"options\": theme_names.concat(\"system preference\"),\n             },\n             {\n                 \"name\": \"Preferred light theme\","}, {"sha": "0f5425daa1684c2941d0c3b557b3372065fe3d49", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -40,6 +40,17 @@ endif\n # e.g. for `$(CC) -o $(RUN_BINFILE)`.\n RUN_BINFILE = $(TMPDIR)/$(1)\n \n+# Invoke the generated binary on the remote machine if compiletest was\n+# configured to use a remote test device, otherwise run it on the current host.\n+ifdef REMOTE_TEST_CLIENT\n+# FIXME: if a test requires additional files, this will need to be changed to\n+# also push them (by changing the 0 to the number of additional files, and\n+# providing the path of the additional files as the last arguments).\n+EXECUTE = $(REMOTE_TEST_CLIENT) run 0 $(RUN_BINFILE)\n+else\n+EXECUTE = $(RUN_BINFILE)\n+endif\n+\n # RUN and FAIL are basic way we will invoke the generated binary.  On\n # non-windows platforms, they set the LD_LIBRARY_PATH environment\n # variable before running the binary.\n@@ -50,16 +61,16 @@ BIN = $(1)\n UNAME = $(shell uname)\n \n ifeq ($(UNAME),Darwin)\n-RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n-FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n+RUN = $(TARGET_RPATH_ENV) $(EXECUTE)\n+FAIL = $(TARGET_RPATH_ENV) $(EXECUTE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.dylib\n DYLIB = $(TMPDIR)/lib$(1).dylib\n STATICLIB = $(TMPDIR)/lib$(1).a\n STATICLIB_GLOB = lib$(1)*.a\n else\n ifdef IS_WINDOWS\n-RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE)\n-FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE) && exit 1 || exit 0\n+RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(EXECUTE)\n+FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(EXECUTE) && exit 1 || exit 0\n DYLIB_GLOB = $(1)*.dll\n DYLIB = $(TMPDIR)/$(1).dll\n ifdef IS_MSVC\n@@ -73,8 +84,8 @@ endif\n BIN = $(1).exe\n LLVM_FILECHECK := $(shell cygpath -u \"$(LLVM_FILECHECK)\")\n else\n-RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n-FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n+RUN = $(TARGET_RPATH_ENV) $(EXECUTE)\n+FAIL = $(TARGET_RPATH_ENV) $(EXECUTE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.so\n DYLIB = $(TMPDIR)/lib$(1).so\n STATICLIB = $(TMPDIR)/lib$(1).a"}, {"sha": "d6145c07126b8f5c577a4df7275067c98e7230c3", "filename": "src/test/run-make/issue-36710/Makefile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1,6 +1,7 @@\n-# ignore-cross-compile $(call RUN,foo) expects to run the target executable natively\n-#                              so it won't work with remote-test-server\n # ignore-none no-std is not supported\n+# ignore-wasm32 FIXME: don't attempt to compile C++ to WASM\n+# ignore-wasm64 FIXME: don't attempt to compile C++ to WASM\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for `std`\n # ignore-musl FIXME: this makefile needs teaching how to use a musl toolchain\n #                    (see dist-i586-gnu-i586-i686-musl Dockerfile)\n "}, {"sha": "caa1ab8f31eb47c5b1115acecbbde50692287b78", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 76, "deletions": 4, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -4,7 +4,7 @@ show-text: true\n \n define-function: (\n     \"check-colors\",\n-    (theme),\n+    (theme, background, color, border),\n     [\n         // Setting the theme.\n         (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n@@ -30,6 +30,25 @@ define-function: (\n             \".docblock .example-wrap.compile_fail\",\n             {\"border-left\": \"2px solid rgb(255, 0, 0)\"},\n         )),\n+        (\"assert-css\", (\n+            \".docblock .example-wrap.compile_fail .tooltip::after\",\n+            {\n+                \"content\": '\"This example deliberately fails to compile\"',\n+                \"text-align\": \"center\",\n+                \"padding\": \"5px 3px 3px\",\n+                \"background-color\": |background|,\n+                \"color\": |color|,\n+                \"border\": \"1px solid \" + |border|,\n+            },\n+        )),\n+        (\"assert-css\", (\n+            \".docblock .example-wrap.compile_fail .tooltip::before\",\n+            {\n+                \"border-width\": \"5px\",\n+                \"border-style\": \"solid\",\n+                \"border-color\": \"rgba(0, 0, 0, 0) \" + |background| + \" rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)\",\n+            },\n+        )),\n \n         // should_panic block\n         (\"assert-css\", (\n@@ -51,6 +70,25 @@ define-function: (\n             \".docblock .example-wrap.should_panic\",\n             {\"border-left\": \"2px solid rgb(255, 0, 0)\"},\n         )),\n+        (\"assert-css\", (\n+            \".docblock .example-wrap.should_panic .tooltip::after\",\n+            {\n+                \"content\": '\"This example panics\"',\n+                \"text-align\": \"center\",\n+                \"padding\": \"5px 3px 3px\",\n+                \"background-color\": |background|,\n+                \"color\": |color|,\n+                \"border\": \"1px solid \" + |border|,\n+            },\n+        )),\n+        (\"assert-css\", (\n+            \".docblock .example-wrap.should_panic .tooltip::before\",\n+            {\n+                \"border-width\": \"5px\",\n+                \"border-style\": \"solid\",\n+                \"border-color\": \"rgba(0, 0, 0, 0) \" + |background| + \" rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)\",\n+            },\n+        )),\n \n         // ignore block\n         (\"assert-css\", (\n@@ -72,9 +110,43 @@ define-function: (\n             \".docblock .example-wrap.ignore\",\n             {\"border-left\": \"2px solid rgb(255, 142, 0)\"},\n         )),\n+        (\"assert-css\", (\n+            \".docblock .example-wrap.ignore .tooltip::after\",\n+            {\n+                \"content\": '\"This example is not tested\"',\n+                \"text-align\": \"center\",\n+                \"padding\": \"5px 3px 3px\",\n+                \"background-color\": |background|,\n+                \"color\": |color|,\n+                \"border\": \"1px solid \" + |border|,\n+            },\n+        )),\n+        (\"assert-css\", (\n+            \".docblock .example-wrap.ignore .tooltip::before\",\n+            {\n+                \"border-width\": \"5px\",\n+                \"border-style\": \"solid\",\n+                \"border-color\": \"rgba(0, 0, 0, 0) \" + |background| + \" rgba(0, 0, 0, 0) rgba(0, 0, 0, 0)\",\n+            },\n+        )),\n     ],\n )\n \n-call-function: (\"check-colors\", (\"ayu\"))\n-call-function: (\"check-colors\", (\"dark\"))\n-call-function: (\"check-colors\", (\"light\"))\n+call-function: (\"check-colors\", {\n+    \"theme\": \"ayu\",\n+    \"background\": \"rgb(49, 69, 89)\",\n+    \"color\": \"rgb(197, 197, 197)\",\n+    \"border\": \"rgb(92, 103, 115)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"dark\",\n+    \"background\": \"rgb(0, 0, 0)\",\n+    \"color\": \"rgb(255, 255, 255)\",\n+    \"border\": \"rgb(224, 224, 224)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"light\",\n+    \"background\": \"rgb(253, 255, 211)\",\n+    \"color\": \"rgb(255, 255, 255)\",\n+    \"border\": \"rgb(224, 224, 224)\",\n+})"}, {"sha": "fc3beaa53fafcb396d81b49da63b59930fb61107", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -37,8 +37,7 @@ click: \"#settings-menu\"\n wait-for: \"#settings\"\n \n // We check that the \"Use system theme\" is disabled.\n-assert-property: (\"#use-system-theme\", {\"checked\": \"false\"})\n-assert: \"//*[@class='setting-line']//span[text()='Use system theme']\"\n+assert-property: (\"#theme-system-preference\", {\"checked\": \"false\"})\n // Meaning that only the \"theme\" menu is showing up.\n assert: \".setting-line:not(.hidden) #theme\"\n assert: \".setting-line.hidden #preferred-dark-theme\"\n@@ -115,13 +114,6 @@ assert-css: (\n         \"border-color\": \"rgb(221, 221, 221)\",\n     },\n )\n-assert-css: (\n-    \"#use-system-theme\",\n-    {\n-        \"background-color\": \"rgba(0, 0, 0, 0)\",\n-        \"border-color\": \"rgb(221, 221, 221)\",\n-    }\n-)\n // Let's start with the hover for toggles.\n move-cursor-to: \"#auto-hide-large-items\"\n assert-css: (\n@@ -131,14 +123,6 @@ assert-css: (\n         \"border-color\": \"rgb(33, 150, 243)\",\n     },\n )\n-move-cursor-to: \"#use-system-theme\"\n-assert-css: (\n-    \"#use-system-theme\",\n-    {\n-        \"background-color\": \"rgba(0, 0, 0, 0)\",\n-        \"border-color\": \"rgb(33, 150, 243)\",\n-    }\n-)\n move-cursor-to: \"#settings-menu > a\"\n // Let's now check with the focus for toggles.\n focus: \"#auto-hide-large-items\"\n@@ -150,15 +134,6 @@ assert-css: (\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n     },\n )\n-focus: \"#use-system-theme\"\n-assert-css: (\n-    \"#use-system-theme\",\n-    {\n-        \"background-color\": \"rgba(0, 0, 0, 0)\",\n-        \"border-color\": \"rgb(221, 221, 221)\",\n-        \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n-    },\n-)\n // Now we check we both focus and hover for toggles.\n move-cursor-to: \"#auto-hide-large-items\"\n focus: \"#auto-hide-large-items\"\n@@ -170,24 +145,12 @@ assert-css: (\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n     },\n )\n-move-cursor-to: \"#use-system-theme\"\n-focus: \"#use-system-theme\"\n-assert-css: (\n-    \"#use-system-theme\",\n-    {\n-        \"background-color\": \"rgba(0, 0, 0, 0)\",\n-        \"border-color\": \"rgb(33, 150, 243)\",\n-        \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n-    },\n-)\n \n // We now switch the display.\n-click: \"#use-system-theme\"\n+click: \"#theme-system-preference\"\n // Wait for the hidden element to show up.\n wait-for: \".setting-line:not(.hidden) #preferred-dark-theme\"\n assert: \".setting-line:not(.hidden) #preferred-light-theme\"\n-// Check that the theme picking is hidden.\n-assert: \".setting-line.hidden #theme\"\n \n // We check their text as well.\n assert-text: (\"#preferred-dark-theme .setting-name\", \"Preferred dark theme\")"}, {"sha": "cc47f1f450c5a79b65b8c7527ef3ba97e769c278", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -2,31 +2,66 @@\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": \"dark\"}\n reload:\n+\n+store-value: (background_light, \"rgb(255, 255, 255)\")\n+store-value: (background_dark, \"rgb(53, 53, 53)\")\n+store-value: (background_ayu, \"rgb(15, 20, 25)\")\n+\n click: \"#settings-menu\"\n wait-for: \"#theme-ayu\"\n click: \"#theme-ayu\"\n // should be the ayu theme so let's check the color.\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(15, 20, 25)\" })\n+wait-for-css: (\"body\", { \"background-color\": |background_ayu| })\n assert-local-storage: { \"rustdoc-theme\": \"ayu\" }\n click: \"#theme-light\"\n // should be the light theme so let's check the color.\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n+wait-for-css: (\"body\", { \"background-color\": |background_light| })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }\n click: \"#theme-dark\"\n // Should be the dark theme so let's check the color.\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n+wait-for-css: (\"body\", { \"background-color\": |background_dark| })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n+local-storage: {\n+    \"rustdoc-preferred-light-theme\": \"light\",\n+    \"rustdoc-preferred-dark-theme\": \"light\",\n+}\n goto: \"file://\" + |DOC_PATH| + \"/settings.html\"\n+\n wait-for: \"#settings\"\n click: \"#theme-light\"\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n+wait-for-css: (\"body\", { \"background-color\": |background_light| })\n assert-local-storage: { \"rustdoc-theme\": \"light\" }\n \n click: \"#theme-dark\"\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n+wait-for-css: (\"body\", { \"background-color\": |background_dark| })\n assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n \n click: \"#theme-ayu\"\n-wait-for-css: (\"body\", { \"background-color\": \"rgb(15, 20, 25)\" })\n+wait-for-css: (\"body\", { \"background-color\": |background_ayu| })\n assert-local-storage: { \"rustdoc-theme\": \"ayu\" }\n+\n+assert-local-storage-false: { \"rustdoc-use-system-theme\": \"true\" }\n+click: \"#theme-system-preference\"\n+wait-for: \".setting-line:not(.hidden) #preferred-light-theme\"\n+assert-local-storage: { \"rustdoc-use-system-theme\": \"true\" }\n+// We click on both preferred light and dark themes to be sure that there is a change.\n+click: \"#preferred-light-theme-dark\"\n+click: \"#preferred-dark-theme-dark\"\n+wait-for-css: (\"body\", { \"background-color\": |background_dark| })\n+\n+reload:\n+// Ensure that the \"preferred themes\" are still displayed.\n+wait-for: \".setting-line:not(.hidden) #preferred-light-theme\"\n+click: \"#theme-light\"\n+wait-for-css: (\"body\", { \"background-color\": |background_light| })\n+assert-local-storage: { \"rustdoc-theme\": \"light\" }\n+// Ensure it's now hidden again\n+wait-for: \".setting-line.hidden #preferred-light-theme\"\n+// And ensure the theme was rightly set.\n+wait-for-css: (\"body\", { \"background-color\": |background_light| })\n+assert-local-storage: { \"rustdoc-theme\": \"light\" }\n+\n+reload:\n+wait-for: \"#settings\"\n+assert: \".setting-line.hidden #preferred-light-theme\""}, {"sha": "6b3b142014bd37933668e357733538584d9a4940", "filename": "src/test/ui/async-await/in-trait/early-bound-1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {\n+    async fn foo(&mut self);\n+}\n+\n+struct MyFoo<'a>(&'a mut ());\n+\n+impl<'a> Foo for MyFoo<'a> {\n+    async fn foo(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "270443229b05416db70cb8c38f37cd7cd0d2f8f2", "filename": "src/test/ui/async-await/in-trait/early-bound-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {\n+    async fn foo(&mut self);\n+}\n+\n+impl<T: Foo> Foo for &mut T {\n+    async fn foo(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "a8bc35f7e0c59cfc0ad9944ed6b4ded6bedeb700", "filename": "src/test/ui/async-await/in-trait/object-safety.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,13 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Foo {\n+    async fn foo(&self);\n+}\n+\n+fn main() {\n+    let x: &dyn Foo = todo!();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "0b318f71f395d85d4e68c25efe84c66ecd25f044", "filename": "src/test/ui/async-await/in-trait/object-safety.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:11:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "b113c56412ff65322dc4646a9dd8593e4a863462", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,76 @@\n+// run-pass\n+// edition:2021\n+// needs-unwind\n+#![feature(closure_track_caller)]\n+\n+use std::future::Future;\n+use std::panic;\n+use std::sync::{Arc, Mutex};\n+use std::task::{Context, Poll, Wake};\n+use std::thread::{self, Thread};\n+\n+/// A waker that wakes up the current thread when called.\n+struct ThreadWaker(Thread);\n+\n+impl Wake for ThreadWaker {\n+    fn wake(self: Arc<Self>) {\n+        self.0.unpark();\n+    }\n+}\n+\n+/// Run a future to completion on the current thread.\n+fn block_on<T>(fut: impl Future<Output = T>) -> T {\n+    // Pin the future so it can be polled.\n+    let mut fut = Box::pin(fut);\n+\n+    // Create a new context to be passed to the future.\n+    let t = thread::current();\n+    let waker = Arc::new(ThreadWaker(t)).into();\n+    let mut cx = Context::from_waker(&waker);\n+\n+    // Run the future to completion.\n+    loop {\n+        match fut.as_mut().poll(&mut cx) {\n+            Poll::Ready(res) => return res,\n+            Poll::Pending => thread::park(),\n+        }\n+    }\n+}\n+\n+async fn bar() {\n+    panic!()\n+}\n+\n+async fn foo() {\n+    bar().await\n+}\n+\n+#[track_caller]\n+async fn bar_track_caller() {\n+    panic!()\n+}\n+\n+async fn foo_track_caller() {\n+    bar_track_caller().await\n+}\n+\n+fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n+    let loc = Arc::new(Mutex::new(None));\n+\n+    let hook = panic::take_hook();\n+    {\n+        let loc = loc.clone();\n+        panic::set_hook(Box::new(move |info| {\n+            *loc.lock().unwrap() = info.location().map(|loc| loc.line())\n+        }));\n+    }\n+    panic::catch_unwind(f).unwrap_err();\n+    panic::set_hook(hook);\n+    let x = loc.lock().unwrap().unwrap();\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!(panicked_at(|| block_on(foo())), 41);\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n+}"}, {"sha": "602d818245a0d77668b039647cb9ef2e40307807", "filename": "src/test/ui/consts/const-eval/issue-104390.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-104390.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-104390.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-104390.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,10 @@\n+fn f1() -> impl Sized { & 2E } //~ ERROR expected at least one digit in exponent\n+fn f2() -> impl Sized { && 2E } //~ ERROR expected at least one digit in exponent\n+fn f3() -> impl Sized { &'a 2E } //~ ERROR expected at least one digit in exponent\n+//~^ ERROR borrow expressions cannot be annotated with lifetimes\n+fn f4() -> impl Sized { &'static 2E } //~ ERROR expected at least one digit in exponent\n+//~^ ERROR borrow expressions cannot be annotated with lifetimes\n+fn f5() -> impl Sized { *& 2E } //~ ERROR expected at least one digit in exponent\n+fn f6() -> impl Sized { &'_ 2E } //~ ERROR expected at least one digit in exponent\n+//~^ ERROR borrow expressions cannot be annotated with lifetimes\n+fn main() {}"}, {"sha": "865b9996ea395811fd48610592608294fafde9d8", "filename": "src/test/ui/consts/const-eval/issue-104390.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-104390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-104390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-104390.stderr?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,65 @@\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-104390.rs:1:27\n+   |\n+LL | fn f1() -> impl Sized { & 2E }\n+   |                           ^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-104390.rs:2:28\n+   |\n+LL | fn f2() -> impl Sized { && 2E }\n+   |                            ^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-104390.rs:3:29\n+   |\n+LL | fn f3() -> impl Sized { &'a 2E }\n+   |                             ^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-104390.rs:5:34\n+   |\n+LL | fn f4() -> impl Sized { &'static 2E }\n+   |                                  ^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-104390.rs:7:28\n+   |\n+LL | fn f5() -> impl Sized { *& 2E }\n+   |                            ^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-104390.rs:8:29\n+   |\n+LL | fn f6() -> impl Sized { &'_ 2E }\n+   |                             ^^\n+\n+error: borrow expressions cannot be annotated with lifetimes\n+  --> $DIR/issue-104390.rs:3:25\n+   |\n+LL | fn f3() -> impl Sized { &'a 2E }\n+   |                         ^--^^^\n+   |                          |\n+   |                          annotated with lifetime here\n+   |                          help: remove the lifetime annotation\n+\n+error: borrow expressions cannot be annotated with lifetimes\n+  --> $DIR/issue-104390.rs:5:25\n+   |\n+LL | fn f4() -> impl Sized { &'static 2E }\n+   |                         ^-------^^^\n+   |                          |\n+   |                          annotated with lifetime here\n+   |                          help: remove the lifetime annotation\n+\n+error: borrow expressions cannot be annotated with lifetimes\n+  --> $DIR/issue-104390.rs:8:25\n+   |\n+LL | fn f6() -> impl Sized { &'_ 2E }\n+   |                         ^--^^^\n+   |                          |\n+   |                          annotated with lifetime here\n+   |                          help: remove the lifetime annotation\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "fa3d8d7d5064cc2a893fb2554ecbff4fb7e97a1d", "filename": "src/test/ui/dyn-star/return.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fdyn-star%2Freturn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fdyn-star%2Freturn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Freturn.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+fn _foo() -> dyn* Unpin {\n+    4usize\n+}\n+\n+fn main() {}"}, {"sha": "e000351a68f541d7057fbb4bc49708ef5722b0e2", "filename": "src/test/ui/dyn-star/return.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fdyn-star%2Freturn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fdyn-star%2Freturn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Freturn.stderr?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/return.rs:3:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ca0e760ff6d35fcad92ad1fa7baca2ad132009d3", "filename": "src/test/ui/impl-trait/in-trait/object-safety.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -5,12 +5,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -20,12 +20,12 @@ LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -35,12 +35,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n    = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n    = note: required by cast to type `Box<dyn Foo>`"}, {"sha": "d5608edb46f0493fb58c8036a43676308086553a", "filename": "src/test/ui/lint/issue-104392.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Flint%2Fissue-104392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Flint%2Fissue-104392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-104392.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    { unsafe 92 } //~ ERROR expected `{`, found `92`\n+}\n+\n+fn foo() {\n+    { mod 92 } //~ ERROR expected identifier, found `92`\n+}\n+\n+fn bar() {\n+    { trait 92 } //~ ERROR expected identifier, found `92`\n+}"}, {"sha": "8e466439ae6432b45a7bb65de14c96558c8766b7", "filename": "src/test/ui/lint/issue-104392.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Flint%2Fissue-104392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Flint%2Fissue-104392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-104392.stderr?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,27 @@\n+error: expected `{`, found `92`\n+  --> $DIR/issue-104392.rs:2:14\n+   |\n+LL |     { unsafe 92 }\n+   |       ------ ^^ expected `{`\n+   |       |\n+   |       while parsing this `unsafe` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     { unsafe { 92 } }\n+   |              +    +\n+\n+error: expected identifier, found `92`\n+  --> $DIR/issue-104392.rs:6:11\n+   |\n+LL |     { mod 92 }\n+   |           ^^ expected identifier\n+\n+error: expected identifier, found `92`\n+  --> $DIR/issue-104392.rs:10:13\n+   |\n+LL |     { trait 92 }\n+   |             ^^ expected identifier\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ac9e4c716962fb135ea578142811b0611c526ee1", "filename": "src/test/ui/typeck/issue-103899.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1,9 +1,6 @@\n // check-fail\n // failure-status: 101\n-// normalize-stderr-test \"note: .*\" -> \"\"\n-// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n-// normalize-stderr-test \" .*\\n\" -> \"\"\n-// normalize-stderr-test \"  .*\\n\" -> \"\"\n+// dont-check-compiler-stderr\n // known-bug: #103899\n \n trait BaseWithAssoc {"}, {"sha": "836c6ee486f513902f852131fd571f1a623bd40e", "filename": "src/test/ui/typeck/issue-103899.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2f6a1b9310c3039bbfcffcb5bd1d13dff349a46/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f6a1b9310c3039bbfcffcb5bd1d13dff349a46/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr?ref=e2f6a1b9310c3039bbfcffcb5bd1d13dff349a46", "patch": "@@ -1,12 +0,0 @@\n-\n-stack\n-error:\n-\n-\n-\n-\n-\n-\n-\n-\n-query#0#1end\n\\ No newline at end of file"}, {"sha": "157bdf07e3826e7fa02f1b246371d9fedc7c8f91", "filename": "src/test/ui/typeck/issue-104510-ice.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-104510-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-104510-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-104510-ice.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,16 @@\n+// needs-asm-support\n+// only-x86_64\n+\n+struct W<T: ?Sized>(Oops);\n+//~^ ERROR cannot find type `Oops` in this scope\n+\n+unsafe fn test() {\n+    let j = W(());\n+    let pointer = &j as *const _;\n+    core::arch::asm!(\n+        \"nop\",\n+        in(\"eax\") pointer,\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "ddb510ef047725b3204844a0da34bb0ffb63db64", "filename": "src/test/ui/typeck/issue-104510-ice.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-104510-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftest%2Fui%2Ftypeck%2Fissue-104510-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-104510-ice.stderr?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `Oops` in this scope\n+  --> $DIR/issue-104510-ice.rs:4:21\n+   |\n+LL | struct W<T: ?Sized>(Oops);\n+   |                     ^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "218dbeaddcadee32539160ee831786d991e5edc7", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1156,7 +1156,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n             }\n \n             let predicate = EarlyBinder(predicate).subst(cx.tcx, &substs_with_referent_ty);\n-            let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n+            let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n             let infcx = cx.tcx.infer_ctxt().build();\n             infcx.predicate_must_hold_modulo_regions(&obligation)\n         })"}, {"sha": "5c6a342b3d074221eaaa9296b06e4a89c9e8e1ae", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    HirId, IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    HirId, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n-            if header.asyncness == IsAsync::NotAsync;\n+            if !header.asyncness.is_async();\n             // Check that this function returns `impl Future`\n             if let FnRetTy::Return(ret_ty) = decl.output;\n             if let Some((trait_ref, output_lifetimes)) = future_trait_ref(cx, ret_ty);"}, {"sha": "c7775313ecd0284a38bd866ac0a34fa4f07486af", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -419,7 +419,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n \n                         if trait_predicates.any(|predicate| {\n                             let predicate = EarlyBinder(predicate).subst(cx.tcx, new_subst);\n-                            let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n+                            let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n                             !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n                             return false;"}, {"sha": "c8c6f32c6c98966cd4d794b0afcbe3f56f105d14", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -695,6 +695,7 @@ fn matches_preds<'tcx>(\n             .type_implements_trait(p.def_id, ty, p.substs, cx.param_env)\n             .must_apply_modulo_regions(),\n         ExistentialPredicate::Projection(p) => infcx.predicate_must_hold_modulo_regions(&Obligation::new(\n+            cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n             cx.tcx.mk_predicate(Binder::bind_with_vars("}, {"sha": "3538bef6e06185a13eb5a17ea1e5a9fb99816a8d", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, IsAsync, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n+        if !span.from_expansion() && fn_kind.asyncness().is_async() {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n             walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {"}, {"sha": "bb91317d67f5add0846404f949af346aad2fe29c", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -87,10 +87,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n-    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n-    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness,\n+    Destination, Expr, ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind,\n+    LangItem, Local, MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy,\n+    QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -1861,7 +1861,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n /// Checks if the given function kind is an async function.\n pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n-    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness == IsAsync::Async)\n+    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness.is_async())\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,"}, {"sha": "ebce0283fbaf1c1bd55016060ea231d9c0031d05", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "patch": "@@ -2987,6 +2987,10 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"LLVM_BIN_DIR\", llvm_bin_dir);\n         }\n \n+        if let Some(ref remote_test_client) = self.config.remote_test_client {\n+            cmd.env(\"REMOTE_TEST_CLIENT\", remote_test_client);\n+        }\n+\n         // We don't want RUSTFLAGS set from the outside to interfere with\n         // compiler flags set in the test cases:\n         cmd.env_remove(\"RUSTFLAGS\");"}]}