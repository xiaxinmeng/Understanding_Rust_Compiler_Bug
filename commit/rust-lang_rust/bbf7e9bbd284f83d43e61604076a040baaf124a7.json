{"sha": "bbf7e9bbd284f83d43e61604076a040baaf124a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjdlOWJiZDI4NGY4M2Q0M2U2MTYwNDA3NmEwNDBiYWFmMTI0YTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T16:56:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T16:56:33Z"}, "message": "Simiplify", "tree": {"sha": "8ac7d990f075c3d8fa5126de0ae5a49e55fb0df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac7d990f075c3d8fa5126de0ae5a49e55fb0df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf7e9bbd284f83d43e61604076a040baaf124a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf7e9bbd284f83d43e61604076a040baaf124a7", "html_url": "https://github.com/rust-lang/rust/commit/bbf7e9bbd284f83d43e61604076a040baaf124a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf7e9bbd284f83d43e61604076a040baaf124a7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f194750a2a4d5f034e89b937e1271637b884a503", "url": "https://api.github.com/repos/rust-lang/rust/commits/f194750a2a4d5f034e89b937e1271637b884a503", "html_url": "https://github.com/rust-lang/rust/commit/f194750a2a4d5f034e89b937e1271637b884a503"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "923d0bd5a1e5abdb3520bb1bbd146913b98fd4eb", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbf7e9bbd284f83d43e61604076a040baaf124a7/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf7e9bbd284f83d43e61604076a040baaf124a7/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=bbf7e9bbd284f83d43e61604076a040baaf124a7", "patch": "@@ -5,8 +5,7 @@ use syntax_kinds::{L_CURLY, R_CURLY, ERROR};\n \n pub struct Parser<'t> {\n     text: &'t str,\n-    raw_tokens: &'t [Token],\n-    non_ws_tokens: Vec<(usize, TextUnit)>,\n+    non_ws_tokens: Vec<(Token, TextUnit)>,\n \n     pos: usize,\n     events: Vec<Event>,\n@@ -19,16 +18,15 @@ impl<'t> Parser<'t> {\n     pub(crate) fn new(text: &'t str, raw_tokens: &'t [Token]) -> Parser<'t> {\n         let mut non_ws_tokens = Vec::new();\n         let mut len = TextUnit::new(0);\n-        for (idx, &token) in raw_tokens.iter().enumerate() {\n+        for &token in raw_tokens.iter() {\n             if !is_insignificant(token.kind) {\n-                non_ws_tokens.push((idx, len))\n+                non_ws_tokens.push((token, len))\n             }\n             len += token.len;\n         }\n \n         Parser {\n             text,\n-            raw_tokens,\n             non_ws_tokens,\n \n             pos: 0,\n@@ -48,8 +46,8 @@ impl<'t> Parser<'t> {\n             return true\n         }\n         if let Some(limit) = self.curly_limit {\n-            let idx = self.non_ws_tokens[self.pos].0;\n-            return limit == self.curly_level && self.raw_tokens[idx].kind == R_CURLY;\n+            let token = self.non_ws_tokens[self.pos].0;\n+            return limit == self.curly_level && token.kind == R_CURLY;\n         }\n         false\n     }\n@@ -70,8 +68,8 @@ impl<'t> Parser<'t> {\n         if self.is_eof() {\n             return None;\n         }\n-        let idx = self.non_ws_tokens[self.pos].0;\n-        Some(self.raw_tokens[idx].kind)\n+        let token = self.non_ws_tokens[self.pos].0;\n+        Some(token.kind)\n     }\n \n     pub(crate) fn bump(&mut self) -> Option<SyntaxKind> {\n@@ -90,8 +88,8 @@ impl<'t> Parser<'t> {\n         if self.non_ws_tokens[self.pos..].len() < kinds.len() {\n             return false\n         }\n-        kinds.iter().zip(self.non_ws_tokens[self.pos..].iter())\n-            .all(|(&k1, &(idx, _))| k1 == self.raw_tokens[idx].kind)\n+        kinds.iter().zip(self.non_ws_tokens[self.pos..].iter().map(|&(t, _)| t.kind))\n+            .all(|(&k1, k2)| k1 == k2)\n     }\n \n     pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> bool {"}]}