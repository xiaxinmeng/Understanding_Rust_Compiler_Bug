{"sha": "f874d6c475356b1dd40acd9c362c786dc76f7e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzRkNmM0NzUzNTZiMWRkNDBhY2Q5YzM2MmM3ODZkYzc2ZjdlMjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-21T17:46:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T17:46:52Z"}, "message": "Merge #2637\n\n2637: Optimize and profile r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "140737c65d55fc42f49345bbc45a46c54bccc02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140737c65d55fc42f49345bbc45a46c54bccc02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f874d6c475356b1dd40acd9c362c786dc76f7e28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/lqMCRBK7hj4Ov3rIwAAdHIIAGz02RvtW109MOpnJvPJbolg\n9mm6gmGjOiysccsqIt4CNAQIzw0Up1Vk8ZGAbjkvIHXXsOYlEHAeE4KfuL78EpXR\nlP/ojM3UdDcV4Eok8NJVbSdtFq39Jlcdjl7mIEvfThE6+d81CrMlwQ9NzYZNR7+4\nNnZWrnzRazHHAV2tp5KBFOUvVO8JYzQ6Dsjn4qcqT+5jkzDSna3APr9f9TJ5K6hC\nduCDGhsJrriMKpKhoy9hCXOlgLmL2xi+Ot/aLIxmbkjZ2uLbKI/pNkzqV+n/Dys8\nxrJl29QNe/Z/GuGIAmOu4QD8XfLWvIMYRvEOV8t1RdlGnpggDIatDiU8vOvnRCI=\n=pM+l\n-----END PGP SIGNATURE-----\n", "payload": "tree 140737c65d55fc42f49345bbc45a46c54bccc02a\nparent c59d10ab35f69d34c9e1ada34db43157467aced5\nparent d4b135f38c8c0050768c50e62043ddca5f09079a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576950412 +0000\ncommitter GitHub <noreply@github.com> 1576950412 +0000\n\nMerge #2637\n\n2637: Optimize and profile r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f874d6c475356b1dd40acd9c362c786dc76f7e28", "html_url": "https://github.com/rust-lang/rust/commit/f874d6c475356b1dd40acd9c362c786dc76f7e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f874d6c475356b1dd40acd9c362c786dc76f7e28/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c59d10ab35f69d34c9e1ada34db43157467aced5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c59d10ab35f69d34c9e1ada34db43157467aced5", "html_url": "https://github.com/rust-lang/rust/commit/c59d10ab35f69d34c9e1ada34db43157467aced5"}, {"sha": "d4b135f38c8c0050768c50e62043ddca5f09079a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b135f38c8c0050768c50e62043ddca5f09079a", "html_url": "https://github.com/rust-lang/rust/commit/d4b135f38c8c0050768c50e62043ddca5f09079a"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "55afcda7bf5af56bc204c37e82685d9ebf775971", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f874d6c475356b1dd40acd9c362c786dc76f7e28/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f874d6c475356b1dd40acd9c362c786dc76f7e28/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f874d6c475356b1dd40acd9c362c786dc76f7e28", "patch": "@@ -948,6 +948,7 @@ dependencies = [\n  \"ra_hir_def 0.1.0\",\n  \"ra_hir_expand 0.1.0\",\n  \"ra_hir_ty 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "7dc31ad3cbdefe7a67c1ffb2f723523e27796ad8", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=f874d6c475356b1dd40acd9c362c786dc76f7e28", "patch": "@@ -14,6 +14,7 @@ either = \"1.5\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }\n+ra_prof = { path = \"../ra_prof\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }"}, {"sha": "ebd9ee2a8e7146fdf97e3004c86db82fe8733361", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=f874d6c475356b1dd40acd9c362c786dc76f7e28", "patch": "@@ -7,6 +7,7 @@ use hir_def::{\n     StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n+use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     match_ast, SyntaxNode,\n@@ -169,6 +170,7 @@ impl TypeParam {\n \n impl Module {\n     pub fn from_declaration(db: &impl DefDatabase, src: InFile<ast::Module>) -> Option<Self> {\n+        let _p = profile(\"Module::from_declaration\");\n         let parent_declaration = src.value.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n \n         let parent_module = match parent_declaration {\n@@ -191,6 +193,7 @@ impl Module {\n     }\n \n     pub fn from_definition(db: &impl DefDatabase, src: InFile<ModuleSource>) -> Option<Self> {\n+        let _p = profile(\"Module::from_definition\");\n         match src.value {\n             ModuleSource::Module(ref module) => {\n                 assert!(!module.has_semi());\n@@ -214,6 +217,7 @@ impl Module {\n }\n \n fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n+    let _p = profile(\"analyze_container\");\n     return child_by_source(db, src).unwrap_or_default();\n \n     fn child_by_source(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {"}, {"sha": "85b378483c65540003c3a454c2695871b26c605e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f874d6c475356b1dd40acd9c362c786dc76f7e28", "patch": "@@ -26,6 +26,7 @@ use hir_ty::{\n     method_resolution::{self, implements_trait},\n     Canonical, InEnvironment, InferenceResult, TraitEnvironment, Ty,\n };\n+use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n@@ -83,6 +84,7 @@ fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n     child: InFile<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n+    let _p = profile(\"def_with_body_from_child_node\");\n     child.cloned().ancestors_with_macros(db).find_map(|node| {\n         let n = &node.value;\n         match_ast! {\n@@ -169,6 +171,7 @@ impl SourceAnalyzer {\n         node: InFile<&SyntaxNode>,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n+        let _p = profile(\"SourceAnalyzer::new\");\n         let def_with_body = def_with_body_from_child_node(db, node);\n         if let Some(def) = def_with_body {\n             let (_body, source_map) = db.body_with_source_map(def.into());"}, {"sha": "148ff007edc4d136df150246f362b6e66a9e19d2", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=f874d6c475356b1dd40acd9c362c786dc76f7e28", "patch": "@@ -11,6 +11,7 @@ use hir_expand::{\n     ast_id_map::AstIdMap, hygiene::Hygiene, AstId, HirFileId, InFile, MacroCallKind, MacroDefId,\n };\n use ra_arena::{map::ArenaMap, Arena};\n+use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n@@ -168,6 +169,7 @@ impl Body {\n         db: &impl DefDatabase,\n         def: DefWithBodyId,\n     ) -> (Arc<Body>, Arc<BodySourceMap>) {\n+        let _p = profile(\"body_with_source_map_query\");\n         let mut params = None;\n \n         let (file_id, module, body) = match def {"}, {"sha": "c5e406977395fae9e143c557843c1e131a227d7b", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f874d6c475356b1dd40acd9c362c786dc76f7e28/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=f874d6c475356b1dd40acd9c362c786dc76f7e28", "patch": "@@ -1,12 +1,15 @@\n //! FIXME: write short doc here\n \n-use crate::{db::RootDatabase, FileId};\n use hir::{HirDisplay, SourceAnalyzer};\n+use once_cell::unsync::Lazy;\n+use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n+use crate::{db::RootDatabase, FileId};\n+\n #[derive(Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     TypeHint,\n@@ -27,7 +30,7 @@ pub(crate) fn inlay_hints(\n ) -> Vec<InlayHint> {\n     file.syntax()\n         .descendants()\n-        .map(|node| get_inlay_hints(db, file_id, &node, max_inlay_hint_length).unwrap_or_default())\n+        .flat_map(|node| get_inlay_hints(db, file_id, &node, max_inlay_hint_length))\n         .flatten()\n         .collect()\n }\n@@ -38,7 +41,9 @@ fn get_inlay_hints(\n     node: &SyntaxNode,\n     max_inlay_hint_length: Option<usize>,\n ) -> Option<Vec<InlayHint>> {\n-    let analyzer = SourceAnalyzer::new(db, hir::InFile::new(file_id.into(), node), None);\n+    let _p = profile(\"get_inlay_hints\");\n+    let analyzer =\n+        Lazy::new(|| SourceAnalyzer::new(db, hir::InFile::new(file_id.into(), node), None));\n     match_ast! {\n         match node {\n             ast::LetStmt(it) => {"}]}