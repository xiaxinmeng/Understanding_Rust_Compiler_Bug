{"sha": "2ad196444b41830b59a724d644052e692ebcad47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZDE5NjQ0NGI0MTgzMGI1OWE3MjRkNjQ0MDUyZTY5MmViY2FkNDc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-15T20:56:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-15T20:56:40Z"}, "message": "rustc_typeck: Autoderef::finalize is always called with one &hir::Expr.", "tree": {"sha": "f9909a1ae4b6be195dda44e7f28753a88efe6e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9909a1ae4b6be195dda44e7f28753a88efe6e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ad196444b41830b59a724d644052e692ebcad47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad196444b41830b59a724d644052e692ebcad47", "html_url": "https://github.com/rust-lang/rust/commit/2ad196444b41830b59a724d644052e692ebcad47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ad196444b41830b59a724d644052e692ebcad47/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e56b119bac1ded9396e97f8326f6b0567935ca31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e56b119bac1ded9396e97f8326f6b0567935ca31", "html_url": "https://github.com/rust-lang/rust/commit/e56b119bac1ded9396e97f8326f6b0567935ca31"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "bfb69d620ace7eebaabc4ae611dfc02d8a880b2a", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=2ad196444b41830b59a724d644052e692ebcad47", "patch": "@@ -149,11 +149,9 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n         self.fcx.resolve_type_vars_if_possible(&self.cur_ty)\n     }\n \n-    pub fn finalize<E>(self, pref: LvaluePreference, exprs: &[E])\n-        where E: AsCoercionSite\n-    {\n+    pub fn finalize(self, pref: LvaluePreference, expr: &hir::Expr) {\n         let fcx = self.fcx;\n-        fcx.register_infer_ok_obligations(self.finalize_as_infer_ok(pref, exprs));\n+        fcx.register_infer_ok_obligations(self.finalize_as_infer_ok(pref, &[expr]));\n     }\n \n     pub fn finalize_as_infer_ok<E>(self, pref: LvaluePreference, exprs: &[E])"}, {"sha": "70e585bd14f30af385e19dd53a2ca68edbc90d11", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=2ad196444b41830b59a724d644052e692ebcad47", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             })\n             .next();\n         let callee_ty = autoderef.unambiguous_final_ty();\n-        autoderef.finalize(LvaluePreference::NoPreference, &[callee_expr]);\n+        autoderef.finalize(LvaluePreference::NoPreference, callee_expr);\n \n         let output = match result {\n             None => {"}, {"sha": "e64ad775d5210e538a04dc8e6a9adff8d19cdcd7", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2ad196444b41830b59a724d644052e692ebcad47", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         assert_eq!(n, pick.autoderefs);\n \n         autoderef.unambiguous_final_ty();\n-        autoderef.finalize(LvaluePreference::NoPreference, &[self.self_expr]);\n+        autoderef.finalize(LvaluePreference::NoPreference, self.self_expr);\n \n         let target = pick.unsize.unwrap_or(autoderefd_ty);\n         let target = target.adjust_for_autoref(self.tcx, autoref);\n@@ -445,7 +445,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                       \"expr was deref-able {} times but now isn't?\",\n                                       autoderefs);\n                         });\n-                        autoderef.finalize(PreferMutLvalue, &[expr]);\n+                        autoderef.finalize(PreferMutLvalue, expr);\n                     }\n                 }\n                 Some(_) | None => {}"}, {"sha": "7f887870afd974d5d1cd4c8d84f6eee8e4bd5481", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad196444b41830b59a724d644052e692ebcad47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2ad196444b41830b59a724d644052e692ebcad47", "patch": "@@ -2074,12 +2074,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 expr, base_expr, adj_ty, autoderefs,\n                 false, lvalue_pref, idx_ty)\n             {\n-                autoderef.finalize(lvalue_pref, &[base_expr]);\n+                autoderef.finalize(lvalue_pref, base_expr);\n                 return Some(final_mt);\n             }\n \n             if let ty::TyArray(element_ty, _) = adj_ty.sty {\n-                autoderef.finalize(lvalue_pref, &[base_expr]);\n+                autoderef.finalize(lvalue_pref, base_expr);\n                 let adjusted_ty = self.tcx.mk_slice(element_ty);\n                 return self.try_index_step(\n                     MethodCall::expr(expr.id), expr, base_expr,\n@@ -2757,7 +2757,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(field) = base_def.struct_variant().find_field_named(field.node) {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if self.tcx.vis_is_accessible_from(field.vis, self.body_id) {\n-                            autoderef.finalize(lvalue_pref, &[base]);\n+                            autoderef.finalize(lvalue_pref, base);\n                             self.apply_autoderef_adjustment(base.id, autoderefs, base_t);\n \n                             self.tcx.check_stability(field.did, expr.id, expr.span);\n@@ -2881,7 +2881,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if let Some(field_ty) = field {\n-                autoderef.finalize(lvalue_pref, &[base]);\n+                autoderef.finalize(lvalue_pref, base);\n                 self.apply_autoderef_adjustment(base.id, autoderefs, base_t);\n                 return field_ty;\n             }"}]}