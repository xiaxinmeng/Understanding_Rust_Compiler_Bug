{"sha": "b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MzNkZjBmYzc5NDJhZWEyMDVkOGZjNDUxZDJhNGQxN2Q0N2RmZTk=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-02T16:41:34Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-05T22:24:36Z"}, "message": "Allow attributes in std::bitflags::bitflags!\n\nThe `std::bitflags::bitflags!` macro did not provide support for\nadding attributes to the generated structure or flags, due to\nlimitations in the parser for macros. This patch works around the\nparser limitations by requiring a `flags` keyword in the overall\n`bitflags!` invocation, and a `static` keyword for each flag:\n\n    bitflags!(\n        #[deriving(Hash)]\n        #[doc=\"Three flags\"]\n        flags Flags: u32 {\n            #[doc=\"The first flag\"]\n            static FlagA       = 0x00000001,\n            static FlagB       = 0x00000010,\n            static FlagC       = 0x00000100\n        }\n    )", "tree": {"sha": "c72580abfe9870fea2a9e5b3e5eb34c93df23599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c72580abfe9870fea2a9e5b3e5eb34c93df23599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "html_url": "https://github.com/rust-lang/rust/commit/b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b733df0fc7942aea205d8fc451d2a4d17d47dfe9/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600507d5380ca7d6d5536fabc2d4aca400c21bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/600507d5380ca7d6d5536fabc2d4aca400c21bb9", "html_url": "https://github.com/rust-lang/rust/commit/600507d5380ca7d6d5536fabc2d4aca400c21bb9"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "3c06682eaaf53fd4a6e74cdd679746ed8d0fa05d", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b733df0fc7942aea205d8fc451d2a4d17d47dfe9/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b733df0fc7942aea205d8fc451d2a4d17d47dfe9/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=b733df0fc7942aea205d8fc451d2a4d17d47dfe9", "patch": "@@ -17,14 +17,16 @@\n //! # Example\n //!\n //! ~~~rust\n-//! bitflags!(Flags: u32 {\n-//!     FlagA       = 0x00000001,\n-//!     FlagB       = 0x00000010,\n-//!     FlagC       = 0x00000100,\n-//!     FlagABC     = FlagA.bits\n-//!                 | FlagB.bits\n-//!                 | FlagC.bits\n-//! })\n+//! bitflags!(\n+//!     flags Flags: u32 {\n+//!         static FlagA       = 0x00000001,\n+//!         static FlagB       = 0x00000010,\n+//!         static FlagC       = 0x00000100,\n+//!         static FlagABC     = FlagA.bits\n+//!                            | FlagB.bits\n+//!                            | FlagC.bits\n+//!     }\n+//! )\n //!\n //! fn main() {\n //!     let e1 = FlagA | FlagC;\n@@ -40,10 +42,12 @@\n //! ~~~rust\n //! use std::fmt;\n //!\n-//! bitflags!(Flags: u32 {\n-//!     FlagA   = 0x00000001,\n-//!     FlagB   = 0x00000010\n-//! })\n+//! bitflags!(\n+//!     flags Flags: u32 {\n+//!         static FlagA   = 0x00000001,\n+//!         static FlagB   = 0x00000010\n+//!     }\n+//! )\n //!\n //! impl Flags {\n //!     pub fn clear(&mut self) {\n@@ -66,10 +70,16 @@\n //! }\n //! ~~~\n //!\n+//! # Attributes\n+//!\n+//! Attributes can be attached to the generated `struct` by placing them\n+//! before the `flags` keyword.\n+//!\n //! # Derived traits\n //!\n-//! The `Eq`, `TotalEq`, and `Clone` traits are automatically derived for the\n-//! `struct` using the `deriving` attribute.\n+//! The `Eq` and `Clone` traits are automatically derived for the `struct` using\n+//! the `deriving` attribute. Additional traits can be derived by providing an\n+//! explicit `deriving` attribute on `flags`.\n //!\n //! # Operators\n //!\n@@ -91,17 +101,20 @@\n //! - `insert`: inserts the specified flags in-place\n //! - `remove`: removes the specified flags in-place\n \n+#![macro_escape]\n+\n #[macro_export]\n macro_rules! bitflags(\n-    ($BitFlags:ident: $T:ty {\n-        $($Flag:ident = $value:expr),+\n+    ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n+        $($(#[$Flag_attr:meta])* static $Flag:ident = $value:expr),+\n     }) => (\n         #[deriving(Eq, TotalEq, Clone)]\n+        $(#[$attr])*\n         pub struct $BitFlags {\n             bits: $T,\n         }\n \n-        $(pub static $Flag: $BitFlags = $BitFlags { bits: $value };)+\n+        $($(#[$Flag_attr])* pub static $Flag: $BitFlags = $BitFlags { bits: $value };)+\n \n         impl $BitFlags {\n             /// Returns an empty set of flags.\n@@ -170,14 +183,16 @@ macro_rules! bitflags(\n mod tests {\n     use ops::{BitOr, BitAnd, Sub};\n \n-    bitflags!(Flags: u32 {\n-        FlagA       = 0x00000001,\n-        FlagB       = 0x00000010,\n-        FlagC       = 0x00000100,\n-        FlagABC     = FlagA.bits\n-                    | FlagB.bits\n-                    | FlagC.bits\n-    })\n+    bitflags!(\n+        flags Flags: u32 {\n+            static FlagA       = 0x00000001,\n+            static FlagB       = 0x00000010,\n+            static FlagC       = 0x00000100,\n+            static FlagABC     = FlagA.bits\n+                               | FlagB.bits\n+                               | FlagC.bits\n+        }\n+    )\n \n     #[test]\n     fn test_bits(){"}]}