{"sha": "34c0f0599d71118acd9a7c1648f585b9a4516857", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YzBmMDU5OWQ3MTExOGFjZDlhN2MxNjQ4ZjU4NWI5YTQ1MTY4NTc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-06-04T15:29:10Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-06-04T15:29:10Z"}, "message": "Revert \"Bless mir-opt tests\"\n\nThis reverts commit a030c923412b0a0f7b02a585debe7bf60357370d.", "tree": {"sha": "ba0fbab5a1780e6f88b00f512fd94bbb1adecee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba0fbab5a1780e6f88b00f512fd94bbb1adecee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c0f0599d71118acd9a7c1648f585b9a4516857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c0f0599d71118acd9a7c1648f585b9a4516857", "html_url": "https://github.com/rust-lang/rust/commit/34c0f0599d71118acd9a7c1648f585b9a4516857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c0f0599d71118acd9a7c1648f585b9a4516857/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbe1bc4a08ce850849e8915778a91256a09f1e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe1bc4a08ce850849e8915778a91256a09f1e0e", "html_url": "https://github.com/rust-lang/rust/commit/bbe1bc4a08ce850849e8915778a91256a09f1e0e"}], "stats": {"total": 1792, "additions": 973, "deletions": 819}, "files": [{"sha": "de423cd907afee058a8732b9eba7accf64663372", "filename": "src/test/mir-opt/basic_assignment/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -47,14 +47,30 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n         _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        replace(_5 <- move _6) -> [return: bb2, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n-    bb1: {\n-        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n \n     bb2: {\n+        drop(_6) -> [return: bb6, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_4) -> bb1;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    }\n+\n+    bb4 (cleanup): {\n+        drop(_5) -> bb3;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_6) -> bb4;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    }\n+\n+    bb6: {\n         StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n         _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n                                          // ty::Const\n@@ -63,34 +79,18 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/basic_assignment.rs:10:11: 24:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> [return: bb7, unwind: bb3]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb3: {\n+    bb7: {\n         StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb8, unwind: bb1]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb4: {\n+    bb8: {\n         StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n         return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n-\n-    bb5 (cleanup): {\n-        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n-    }\n-\n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n-    }\n }"}, {"sha": "259501c7de9515ede3c8d67f10bb532dfeb659f7", "filename": "src/test/mir-opt/box_expr/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -14,7 +14,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = const S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // ty::Const\n                                          // + ty: fn() -> S {S::new}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -23,17 +23,25 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n-        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n \n     bb2: {\n+        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // ty::Const\n                                          // + ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -42,7 +50,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb5: {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n@@ -52,27 +60,19 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:6:11: 9:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n-    }\n-\n-    bb5 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb6 (cleanup): {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n+    bb8: {\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n }"}, {"sha": "5c192979a86967564387d6b5d1783658d20c441f", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -33,7 +33,7 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // ty::Const\n                                            // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -42,15 +42,15 @@\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1: {\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n+      }\n+  \n+      bb2: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n-  \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n-      }\n - }\n - \n - alloc0 (static: Y, size: 4, align: 4) {"}, {"sha": "649cea6493e4500eab9c7485cc93c9e4cdf3c1a0", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -35,7 +35,7 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // ty::Const\n                                            // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -44,15 +44,15 @@\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }\n       }\n   \n-      bb1: {\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n+      }\n+  \n+      bb2: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n-  \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n-      }\n   }\n - \n - alloc2 (extern static: X)"}, {"sha": "16f937f3e7b5efd7fb33f0a787d50fadcb3bc130", "filename": "src/test/mir-opt/const_prop/boxes/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -35,10 +35,14 @@\n                                            // + span: $DIR/boxes.rs:12:25: 12:26\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n-      bb1: {\n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n+      }\n+  \n+      bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           _0 = const ();                   // scope 0 at $DIR/boxes.rs:11:11: 13:2\n                                            // ty::Const\n@@ -50,9 +54,5 @@\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n-  \n-      bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n-      }\n   }\n   "}, {"sha": "3e7083ff62ecd3584a60780c548b791ada20b94e", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -21,56 +21,60 @@ fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15:\n \n     bb0: {\n         _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0u32: bb7, 3u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _9) -> [0u32: bb7, 3u32: bb11, otherwise: bb12]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb2: {\n+    bb2 (cleanup): {\n         nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n         goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n-    bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    bb4: {\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n-    bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb5: {\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb6: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb10;                    // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+    bb8 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb5;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb10: {\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    }\n+\n+    bb11: {\n         StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n         StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n-    bb11: {\n+    bb12: {\n         return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n }"}, {"sha": "06645860d842dbcaab8e808ebb65929fa601097e", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -39,16 +39,20 @@ yields ()\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+    }\n+\n+    bb2: {\n         StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n         StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n         StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n         StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = const take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // ty::Const\n                                          // + ty: fn(Foo) {take::<Foo>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -57,80 +61,76 @@ yields ()\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = const take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-                                         // ty::Const\n-                                         // + ty: fn(Bar) {take::<Bar>}\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n-                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n-    }\n-\n-    bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-                                         // ty::Const\n-                                         // + ty: ()\n-                                         // + val: Value(Scalar(<ZST>))\n-                                         // mir::Constant\n-                                         // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    bb3 (cleanup): {\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n-    }\n-\n-    bb5: {\n         StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n         StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb5, unwind: bb3]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb6, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n-    bb7: {\n+    bb6: {\n         generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n     }\n \n+    bb7: {\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+                                         // ty::Const\n+                                         // + ty: fn(Bar) {take::<Bar>}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n+                                         // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n     bb8 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb9 (cleanup): {\n         StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n         StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n-    bb10 (cleanup): {\n+    bb10: {\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:16: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        goto -> bb8;                     // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n     }\n \n-    bb12 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+    bb12: {\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:6: 28:6\n     }\n }"}, {"sha": "f5d8b84812a3e15f53490aac02a5e0971414c72a", "filename": "src/test/mir-opt/graphviz/rustc.main.mir_map.0.dot", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -3,5 +3,8 @@ digraph Mir_0_3 {\n     node [fontname=\"monospace\"];\n     edge [fontname=\"monospace\"];\n     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n+    bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n+    bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+    bb0__0_3 -> bb2__0_3 [label=\"\"];\n }"}, {"sha": "50913de98b506f8e220c89aa27fb077c9d8c77f8", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n@@ -31,7 +31,11 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb1 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-     }\n+- \n+-     bb2: {\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n@@ -51,29 +55,28 @@\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     bb3: {\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n--     }\n-- \n -     bb4 (cleanup): {\n--         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n -                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++     bb2: {\n++         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "7a1b6460c5bb3467cf8b043d4417e8639970cd0c", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -17,7 +17,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n           StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n                                            // ty::Const\n@@ -31,7 +31,11 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb1 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-     }\n+- \n+-     bb2: {\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n@@ -51,29 +55,28 @@\n                                            // mir::Constant\n                                            // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     bb3: {\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n--     }\n-- \n -     bb4 (cleanup): {\n--         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n -                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++     bb2: {\n++         StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   }\n   "}, {"sha": "fa7bd2563ae44d71c1740334e9eaa3c77e922d70", "filename": "src/test/mir-opt/issue-38669/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -21,26 +21,30 @@ fn main() -> () {\n                                          // + span: $DIR/issue-38669.rs:5:28: 5:33\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/issue-38669.rs:5:9: 5:25\n-        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb6]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n     }\n \n     bb2: {\n+        falseUnwind -> [real: bb3, cleanup: bb1]; // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+    }\n+\n+    bb3: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n         FakeRead(ForMatchedPlace, _4);   // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(_4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        switchInt(_4) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+    bb4: {\n+        falseEdges -> [real: bb6, imaginary: bb5]; // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n     }\n \n-    bb4: {\n+    bb5: {\n         _3 = const ();                   // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n                                          // ty::Const\n                                          // + ty: ()\n@@ -64,10 +68,10 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:6:10: 11:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb1;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n+        goto -> bb2;                     // scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n-    bb5: {\n+    bb6: {\n         _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n                                          // ty::Const\n                                          // + ty: ()\n@@ -80,8 +84,4 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/issue-38669.rs:12:2: 12:2\n     }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-38669.rs:4:1: 12:2\n-    }\n }"}, {"sha": "77763f2d3a0d1b3588ef16b6df064255201e030b", "filename": "src/test/mir-opt/issue-41110/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -32,7 +32,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _3 = const S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // ty::Const\n                                          // + ty: fn(S) -> S {S::id}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -41,7 +41,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n+    }\n+\n+    bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n@@ -50,7 +54,7 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:13: 8:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        _1 = const S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // ty::Const\n                                          // + ty: fn(S, S) {S::other}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -59,7 +63,19 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n+    bb3 (cleanup): {\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n+    }\n+\n+    bb5 (cleanup): {\n+        goto -> bb3;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb6: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n                                          // ty::Const\n@@ -80,27 +96,22 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n     }\n \n-    bb3 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb4 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n-    }\n-\n-    bb5 (cleanup): {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n-    }\n-\n     bb7 (cleanup): {\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb8 (cleanup): {\n-        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:8:27: 8:28\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb7;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+    }\n+\n+    bb9 (cleanup): {\n+        switchInt(_5) -> [false: bb1, otherwise: bb8]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n }"}, {"sha": "a99846bd15daf4a76bd6bf385c1930b72dce4141", "filename": "src/test/mir-opt/issue-41110/rustc.test.ElaborateDrops.after.mir", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -37,7 +37,7 @@ fn test() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = const std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // ty::Const\n                                          // + ty: fn(S) {std::mem::drop::<S>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -46,7 +46,11 @@ fn test() -> () {\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n+    }\n+\n+    bb2: {\n         StorageDead(_4);                 // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n         StorageDead(_3);                 // scope 2 at $DIR/issue-41110.rs:17:12: 17:13\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n@@ -61,11 +65,27 @@ fn test() -> () {\n         goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb2: {\n-        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    bb3 (cleanup): {\n+        goto -> bb15;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb5 (cleanup): {\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n+    }\n+\n+    bb6: {\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    }\n+\n+    bb7 (cleanup): {\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n-    bb3: {\n+    bb8: {\n         StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n                                          // ty::Const\n@@ -74,15 +94,15 @@ fn test() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:14:15: 19:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_2) -> [return: bb9, unwind: bb3]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb4: {\n+    bb9: {\n         StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb5: {\n+    bb10: {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n                                          // ty::Const\n                                          // + ty: bool\n@@ -94,41 +114,32 @@ fn test() -> () {\n         return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n-    bb6 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-    }\n-\n-    bb7 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n-    }\n-\n-    bb8 (cleanup): {\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n-    bb9 (cleanup): {\n-        goto -> bb14;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n-    }\n-\n     bb11 (cleanup): {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb7;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb12: {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb13 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb14 (cleanup): {\n-        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:19:1: 19:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb15 (cleanup): {\n+        switchInt(_6) -> [false: bb1, otherwise: bb14]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "d263b2515f17a5267e9b449c814378961751f389", "filename": "src/test/mir-opt/issue-41697/32bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -18,15 +18,15 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb2: {\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }"}, {"sha": "6c00f49fb75b1590f697e5f8aa88bffcc8d150d9", "filename": "src/test/mir-opt/issue-41697/64bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -18,15 +18,15 @@\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb1: {\n-        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    bb2: {\n+        _0 = move (_1.0: usize);         // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }"}, {"sha": "ce940273c3ef5e1474927133a82a06e06bd84b67", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 55, "deletions": 44, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -44,7 +44,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = const cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = const cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // ty::Const\n                                          // + ty: fn() -> bool {cond}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -53,22 +53,30 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n-        switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n     }\n \n     bb2: {\n+        switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+    }\n+\n+    bb3 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    }\n+\n+    bb4: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:5: 14:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n-    bb3: {\n+    bb5: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n@@ -77,28 +85,32 @@ fn main() -> () {\n         goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb4: {\n-        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    bb6: {\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n-    bb5: {\n+    bb7 (cleanup): {\n+        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    }\n+\n+    bb8: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0isize: bb10, otherwise: bb9]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n-    bb6: {\n+    bb9: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:10:9: 13:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb7: {\n+    bb10: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n                                          // ty::Const\n@@ -116,14 +128,14 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:10:29: 13:10\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb8: {\n-        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb11: {\n+        goto -> bb21;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb9: {\n+    bb12: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n                                          // ty::Const\n                                          // + ty: bool\n@@ -150,18 +162,6 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n-    bb10 (cleanup): {\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-    }\n-\n-    bb11 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-    }\n-\n-    bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n-    }\n-\n     bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n                                          // ty::Const\n@@ -185,7 +185,7 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n@@ -211,7 +211,7 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:9:9: 9:10\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb6;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {\n@@ -222,36 +222,47 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:15:1: 15:2\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb16 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x00))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:15:1: 15:2\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+        goto -> bb1;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb17: {\n-        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb17 (cleanup): {\n+        goto -> bb16;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18: {\n+        drop(_1) -> [return: bb15, unwind: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19: {\n-        _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb19 (cleanup): {\n+        drop(_1) -> bb16;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb20: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0isize: bb15, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb21 (cleanup): {\n-        _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb21: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb20]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n     bb22 (cleanup): {\n-        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0isize: bb17, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    }\n+\n+    bb23 (cleanup): {\n+        switchInt(_7) -> [false: bb16, otherwise: bb22]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "abf33cce133dd9947eadd3dc1fda6a36dfe77723", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -17,10 +17,14 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n+        falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n     bb2: {\n+        goto -> bb14;                    // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n+    }\n+\n+    bb3: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n@@ -31,36 +35,50 @@ fn main() -> () {\n                                          // + span: $DIR/issue-49232.rs:8:19: 8:23\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _3);   // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+        switchInt(_3) -> [false: bb5, otherwise: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n+    }\n+\n+    bb5: {\n+        falseEdges -> [real: bb7, imaginary: bb6]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n     }\n \n-    bb4: {\n+    bb6: {\n         _0 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:10:25: 10:30\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb10;                    // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb5: {\n+    bb7: {\n         _2 = const 4i32;                 // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:9:26: 9:27\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb6: {\n+    bb8: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n+        goto -> bb9;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb9: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+        goto -> bb2;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+    }\n+\n+    bb10: {\n         _4 = const ();                   // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n                                          // ty::Const\n                                          // + ty: ()\n@@ -71,17 +89,17 @@ fn main() -> () {\n         unreachable;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n-    bb7: {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+    bb11: {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n     }\n \n-    bb8: {\n+    bb12: {\n         FakeRead(ForLet, _2);            // scope 0 at $DIR/issue-49232.rs:7:13: 7:19\n         StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n         StorageLive(_5);                 // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n-        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb9, unwind: bb11]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n+        _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n                                          // ty::Const\n                                          // + ty: fn(&i32) {std::mem::drop::<&i32>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -90,7 +108,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb9: {\n+    bb13: {\n         StorageDead(_6);                 // scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n         StorageDead(_5);                 // scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n         _1 = const ();                   // scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n@@ -104,13 +122,7 @@ fn main() -> () {\n         goto -> bb1;                     // scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }\n \n-    bb10: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-49232.rs:12:10: 12:11\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n+    bb14: {\n         return;                          // scope 0 at $DIR/issue-49232.rs:15:2: 15:2\n     }\n-\n-    bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-49232.rs:5:1: 15:2\n-    }\n }"}, {"sha": "0b8b03961f2a013e6f5d7edd9e43f22922a079fc", "filename": "src/test/mir-opt/issue-62289/rustc.test.ElaborateDrops.before.mir", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289%2Frustc.test.ElaborateDrops.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -30,7 +30,7 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = std::option::Option::<u32>::None; // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // ty::Const\n                                          // + ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -39,32 +39,40 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n+    }\n+\n+    bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        switchInt(move _5) -> [0isize: bb4, 1isize: bb6, otherwise: bb5]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n-    bb2: {\n+    bb3 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb4: {\n         StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> [return: bb12, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb3: {\n+    bb5: {\n         unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n-    bb4: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // ty::Const\n                                          // + ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -73,9 +81,13 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n+    bb7: {\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+\n+    bb8: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // ty::Const\n                                          // + ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -84,44 +96,32 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n+    bb9: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-    }\n-\n-    bb7: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb9: {\n+    bb10: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb10: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb12 (cleanup): {\n-        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    bb12: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = std::option::Option::<std::boxed::Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb13 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n+    bb13: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb7;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n }"}, {"sha": "38e04a6399fc239edc2ef7b03f0fd8a3c715e06e", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -23,14 +23,18 @@ fn main() -> () {\n                                          // + span: $DIR/loop_test.rs:10:8: 10:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        switchInt(_2) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     }\n \n     bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+    }\n+\n+    bb3: {\n         _1 = const ();                   // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n                                          // ty::Const\n                                          // + ty: ()\n@@ -41,10 +45,10 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n-        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb3: {\n+    bb4: {\n         _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n                                          // ty::Const\n                                          // + ty: ()\n@@ -57,11 +61,11 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2\n     }\n \n-    bb4: {\n-        falseUnwind -> [real: bb5, cleanup: bb6]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n+    bb5: {\n+        falseUnwind -> [real: bb6, cleanup: bb1]; // scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1i32;                 // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n                                          // ty::Const\n@@ -72,10 +76,6 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForLet, _6);            // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb4;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n-    }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/loop_test.rs:6:1: 17:2\n+        goto -> bb5;                     // scope 0 at $DIR/loop_test.rs:15:9: 15:17\n     }\n }"}, {"sha": "856248e90d495dac63e2b23d4e4823657cf76fc8", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.ElaborateDrops.after.mir", "status": "modified", "additions": 69, "deletions": 59, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -30,54 +30,58 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n     }\n \n     bb0: {\n-        switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n+        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n     }\n \n-    bb1: {\n-        switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+        switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb3: {\n+        switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+    }\n+\n+    bb4: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb4: {\n+    bb5: {\n         _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb15, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n         StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb6: {\n+    bb7: {\n         _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb7: {\n+    bb8: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -87,43 +91,57 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb8: {\n+    bb9: {\n+        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n+    }\n+\n+    bb10 (cleanup): {\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb11: {\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb12: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb9: {\n+    bb13: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb10: {\n+    bb14: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n         StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb11, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb11: {\n+    bb15: {\n         _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb12: {\n+    bb16: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -133,93 +151,85 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb13: {\n+    bb17: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb4;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb14: {\n+    bb18: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb15: {\n+    bb19: {\n         StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb16: {\n+    bb20: {\n         _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n     }\n \n-    bb17: {\n+    bb21: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb16;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb18: {\n+    bb22: {\n         StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n         StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb19: {\n-        goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb23: {\n+        goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb20: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        drop(_2) -> [return: bb21, unwind: bb23]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb24 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb21: {\n-        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n-    }\n-\n-    bb22 (cleanup): {\n-        goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb23 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n+    bb25 (cleanup): {\n+        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb24: {\n-        goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb26: {\n+        goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb25 (cleanup): {\n-        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb27 (cleanup): {\n+        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb26: {\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb28 (cleanup): {\n+        goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n \n-    bb27 (cleanup): {\n-        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    bb29: {\n+        goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n }"}, {"sha": "63974bda26038f97c8072734c6c2846a798f7992", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 64, "deletions": 62, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -31,49 +31,53 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n+        switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n     }\n \n     bb2: {\n-        switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n+        falseEdges -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb14, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n+        switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n     }\n \n     bb4: {\n-        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n+        falseEdges -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n     }\n \n     bb5: {\n-        falseEdges -> [real: bb22, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n+        switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n     }\n \n     bb6: {\n+        falseEdges -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n+    }\n+\n+    bb7: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb7: {\n+    bb8: {\n         _0 = const 1i32;                 // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb20, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n@@ -84,20 +88,20 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb9: {\n-        falseEdges -> [real: bb11, imaginary: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+    bb10: {\n+        falseEdges -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb10: {\n+    bb11: {\n         _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb11: {\n+    bb12: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -107,10 +111,24 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb12: {\n+    bb13: {\n+        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n+    }\n+\n+    bb14 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb15: {\n+        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+    }\n+\n+    bb16: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n@@ -120,17 +138,17 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb13: {\n+    bb17: {\n         StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb2, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdges -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb14: {\n+    bb18: {\n         StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n@@ -141,20 +159,20 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n         FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb16, otherwise: bb15]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb15: {\n-        falseEdges -> [real: bb17, imaginary: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+    bb19: {\n+        falseEdges -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb16: {\n+    bb20: {\n         _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb19, otherwise: bb18]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb17: {\n+    bb21: {\n         _0 = const 3i32;                 // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n                                          // ty::Const\n                                          // + ty: i32\n@@ -164,10 +182,12 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n+        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n     }\n \n-    bb18: {\n+    bb22: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n@@ -177,68 +197,50 @@ fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n         _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n         StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n         _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb7;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb19: {\n+    bb23: {\n         StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        falseEdges -> [real: bb4, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n+        falseEdges -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n     }\n \n-    bb20: {\n+    bb24: {\n         StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n         StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb21: {\n+    bb25: {\n         _0 = const 2i32;                 // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n                                          // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb23, unwind: bb27]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n+        drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n     }\n \n-    bb22: {\n+    bb26: {\n         StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n         StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n         _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb21;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n+        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb23: {\n+    bb27: {\n         StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n         StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:42: 17:43\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb24: {\n-        drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb25: {\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:78: 16:79\n-        drop(_2) -> [return: bb26, unwind: bb28]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb26: {\n-        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n-    }\n-\n-    bb27 (cleanup): {\n-        drop(_2) -> bb28;                // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n+        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n     }\n \n-    bb28 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n+    bb28: {\n+        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n     }\n }"}, {"sha": "db888bc4b87b2fecc4aee5a37eff341a0e8acec7", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -35,10 +35,14 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0isize: bb1, 1isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n+    }\n+\n+    bb2: {\n         _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n                                          // ty::Const\n                                          // + ty: i32\n@@ -52,22 +56,22 @@ fn full_tested_match() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:18:21: 18:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n-    }\n-\n-    bb2: {\n-        falseEdges -> [real: bb5, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb9, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n+        falseEdges -> [real: bb6, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        falseEdges -> [real: bb10, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:17:9: 17:16\n     }\n \n     bb5: {\n+        unreachable;                     // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+    }\n+\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n@@ -79,7 +83,7 @@ fn full_tested_match() -> () {\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-        _7 = const guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -88,11 +92,11 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+    bb7: {\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:16:26: 16:27\n@@ -110,16 +114,16 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:37: 16:38\n-        goto -> bb3;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n+        goto -> bb4;                     // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n     }\n \n-    bb9: {\n+    bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:17:14: 17:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:17:24: 17:25\n@@ -133,10 +137,10 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:26: 17:27\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n@@ -148,8 +152,4 @@ fn full_tested_match() -> () {\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n-\n-    bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:14:1: 20:2\n-    }\n }"}, {"sha": "96aa9e828d7842d6f1e87b09dc76ace575e99080", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -34,18 +34,22 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0isize: bb1, 1isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        switchInt(move _3) -> [0isize: bb2, 1isize: bb3, otherwise: bb5]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb9, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        falseEdges -> [real: bb10, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:28:9: 28:13\n     }\n \n     bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+    }\n+\n+    bb4: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         _9 = ((_2 as Some).0: i32);      // scope 0 at $DIR/match_false_edges.rs:29:14: 29:15\n         StorageLive(_10);                // scope 3 at $DIR/match_false_edges.rs:29:24: 29:25\n@@ -59,19 +63,19 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:26: 29:27\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb4: {\n+    bb5: {\n         unreachable;                     // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _6 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:27:14: 27:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-        _7 = const guard() -> [return: bb6, unwind: bb11]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -80,11 +84,11 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n-        switchInt(move _7) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+    bb7: {\n+        switchInt(move _7) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match_false_edges.rs:27:26: 27:27\n@@ -102,16 +106,16 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:37: 27:38\n-        falseEdges -> [real: bb3, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n+        falseEdges -> [real: bb4, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n     }\n \n-    bb9: {\n+    bb10: {\n         _1 = (const 3i32, const 3i32);   // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n                                          // ty::Const\n                                          // + ty: i32\n@@ -125,10 +129,10 @@ fn full_tested_match2() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:28:21: 28:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb11;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n@@ -140,8 +144,4 @@ fn full_tested_match2() -> () {\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n-\n-    bb11 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:25:1: 31:2\n-    }\n }"}, {"sha": "63a7c4bc43d7ad57e4183959570e37b6b686b20d", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -45,18 +45,22 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        switchInt(move _4) -> [1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb5, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        falseEdges -> [real: bb10, imaginary: bb5]; // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n     }\n \n     bb3: {\n+        falseEdges -> [real: bb6, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+    }\n+\n+    bb4: {\n         StorageLive(_14);                // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _1 = const 4i32;                 // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n@@ -67,19 +71,19 @@ fn main() -> () {\n                                          // + span: $DIR/match_false_edges.rs:39:15: 39:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:16: 39:17\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb4: {\n-        falseEdges -> [real: bb10, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n+    bb5: {\n+        falseEdges -> [real: bb11, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:9: 38:16\n     }\n \n-    bb5: {\n+    bb6: {\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _7 = &((_2 as Some).0: i32);     // scope 0 at $DIR/match_false_edges.rs:36:14: 36:16\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-        _8 = const guard() -> [return: bb6, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        _8 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n                                          // ty::Const\n                                          // + ty: fn() -> bool {guard}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -88,11 +92,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb6: {\n-        switchInt(move _8) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+    bb7: {\n+        switchInt(move _8) -> [false: bb9, otherwise: bb8]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n         FakeRead(ForGuardBinding, _7);   // scope 0 at $DIR/match_false_edges.rs:36:27: 36:28\n@@ -107,16 +111,16 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb8: {\n+    bb9: {\n         StorageDead(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:33: 36:34\n-        falseEdges -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n+        falseEdges -> [real: bb2, imaginary: bb2]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n     }\n \n-    bb9: {\n+    bb10: {\n         StorageLive(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _1 = const 2i32;                 // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n@@ -127,17 +131,17 @@ fn main() -> () {\n                                          // + span: $DIR/match_false_edges.rs:37:15: 37:16\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:16: 37:17\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb10: {\n+    bb11: {\n         StorageLive(_11);                // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _11 = &((_2 as Some).0: i32);    // scope 0 at $DIR/match_false_edges.rs:38:14: 38:15\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_12);                // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n-        _12 = const guard2(move _13) -> [return: bb11, unwind: bb15]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n                                          // ty::Const\n                                          // + ty: fn(i32) -> bool {guard2}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -146,12 +150,12 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb11: {\n+    bb12: {\n         StorageDead(_13);                // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n-        switchInt(move _12) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        switchInt(move _12) -> [false: bb14, otherwise: bb13]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb12: {\n+    bb13: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         FakeRead(ForMatchGuard, _5);     // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n         FakeRead(ForGuardBinding, _11);  // scope 0 at $DIR/match_false_edges.rs:38:28: 38:29\n@@ -166,16 +170,16 @@ fn main() -> () {\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb15;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n     }\n \n-    bb13: {\n+    bb14: {\n         StorageDead(_12);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:34: 38:35\n-        falseEdges -> [real: bb3, imaginary: bb3]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n+        falseEdges -> [real: bb4, imaginary: bb4]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n     }\n \n-    bb14: {\n+    bb15: {\n         StorageDead(_2);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         StorageDead(_1);                 // scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         _0 = const ();                   // scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n@@ -187,8 +191,4 @@ fn main() -> () {\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n-\n-    bb15 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match_false_edges.rs:34:1: 41:2\n-    }\n }"}, {"sha": "3e0867d9b09d9833c5d9c45ab062b16fc1b5657a", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n-| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n-| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#3r live at {bb1[0]}\n-| '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n+| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#3r live at {bb2[0]}\n+| '_#4r live at {bb2[1..=3]}\n+| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -76,34 +76,38 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1: {\n-        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    }\n+\n+    bb2: {\n+        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    bb3: {\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb3: {\n-        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -118,11 +122,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000016)) }\n     }\n \n-    bb4: {\n-        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb5: {\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -131,41 +135,37 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+    bb6: {\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb6: {\n-        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+    bb7: {\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb7: {\n-        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb8: {\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n }"}, {"sha": "61db4dba5862755a96cb56034295a631fbdd79f9", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -5,21 +5,21 @@\n | '_#1r | Local | ['_#1r]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0], '_#1r}\n+| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n | '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=8], bb2[0], bb4[0..=2]}\n-| '_#4r | U0 | {bb1[1..=8], bb2[0], bb4[0..=2]}\n-| '_#5r | U0 | {bb1[4..=8], bb2[0], bb4[0..=2]}\n+| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=8], bb2[0], bb3[0..=1], bb4[0..=3], bb5[0..=3], bb6[0..=2], bb7[0..=5], bb8[0]}\n-| '_#3r live at {bb1[0]}\n-| '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=8], bb2[0], bb4[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0])\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3])\n+| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#3r live at {bb2[0]}\n+| '_#4r live at {bb2[1..=3]}\n+| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n@@ -76,34 +76,38 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb8]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n-    bb1: {\n-        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n-        FakeRead(ForLet, _2);            // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n-        StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n-        FakeRead(ForLet, _6);            // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    }\n+\n+    bb2: {\n+        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _7);   // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb3, otherwise: bb2]; // bb1[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+    bb3: {\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb3: {\n-        StorageLive(_10);                // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb6, unwind: bb8]; // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -118,11 +122,11 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000016)) }\n     }\n \n-    bb4: {\n-        StorageLive(_8);                 // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb4[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb5, unwind: bb8]; // bb4[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    bb5: {\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -131,41 +135,37 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb5: {\n-        StorageDead(_9);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+    bb6: {\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb6: {\n-        StorageDead(_10);                // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+    bb7: {\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb7;                     // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n-    }\n-\n-    bb7: {\n-        StorageDead(_6);                 // bb7[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_3);                 // bb7[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_2);                 // bb7[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_1);                 // bb7[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        StorageDead(_7);                 // bb7[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n-        return;                          // bb7[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // bb8[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n+    bb8: {\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n }"}, {"sha": "eb6911735a59e3d8911453524e70a804f5740fda", "filename": "src/test/mir-opt/no-drop-for-inactive-variant/rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -14,12 +14,16 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n-        switchInt(move _2) -> [0isize: bb1, 1isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        switchInt(move _2) -> [0isize: bb2, 1isize: bb4, otherwise: bb3]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n+    }\n+\n+    bb2: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n-        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -34,11 +38,11 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n     }\n \n-    bb2: {\n+    bb3: {\n         unreachable;                     // scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageLive(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n@@ -47,11 +51,7 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n         return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n     }\n \n-    bb4 (cleanup): {\n-        drop(_1) -> bb5;                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n-    }\n-\n     bb5 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     }\n }"}, {"sha": "0af213e425fe453b1a2dbf078fd7cf94ea439f07", "filename": "src/test/mir-opt/no-spurious-drop-after-call/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -20,7 +20,7 @@ fn main() -> () {\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n+        _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -29,9 +29,13 @@ fn main() -> () {\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n+    }\n+\n+    bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // ty::Const\n                                          // + ty: fn(std::string::String) {std::mem::drop::<std::string::String>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -40,7 +44,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n+    bb3: {\n         StorageDead(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n         StorageDead(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         StorageDead(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n@@ -54,11 +58,7 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n \n-    bb3 (cleanup): {\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n-    }\n-\n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n     }\n }"}, {"sha": "21dab9ab923946c9a7110c7e65e23796d052ee54", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -43,18 +43,18 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n@@ -68,6 +68,6 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "cf46f74c16df35b2d999f0cc99c151dc63cc4bac", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -43,18 +43,18 @@ fn main() -> () {\n         drop(_6) -> [return: bb4, unwind: bb3]; // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n-    bb1: {\n-        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n-        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n-    bb2 (cleanup): {\n-        resume;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    bb2: {\n+        StorageDead(_1);                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n-        drop(_1) -> bb2;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n@@ -68,6 +68,6 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "c8c5da37abe32abf88be8431669a6d8b17195962", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -82,7 +82,7 @@ fn main() -> () {\n         Retag(_7);                       // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n-        _3 = const Test::foo(move _4, move _6) -> [return: bb1, unwind: bb7]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n                                          // ty::Const\n                                          // + ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -91,15 +91,23 @@ fn main() -> () {\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n+    }\n+\n+    bb2: {\n         Retag(_3);                       // scope 1 at $DIR/retag.rs:32:17: 32:36\n         StorageDead(_6);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_4);                 // scope 1 at $DIR/retag.rs:32:35: 32:36\n         StorageDead(_7);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n+        drop(_5) -> [return: bb4, unwind: bb1]; // scope 1 at $DIR/retag.rs:32:36: 32:37\n     }\n \n-    bb2: {\n+    bb3 (cleanup): {\n+        drop(_5) -> bb1;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n+    }\n+\n+    bb4: {\n         StorageDead(_5);                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n         StorageLive(_8);                 // scope 2 at $DIR/retag.rs:33:13: 33:14\n         StorageLive(_9);                 // scope 2 at $DIR/retag.rs:33:19: 33:20\n@@ -151,10 +159,10 @@ fn main() -> () {\n         Retag(_18);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n         _17 = &(*_18);                   // scope 6 at $DIR/retag.rs:44:16: 44:18\n         Retag(_17);                      // scope 6 at $DIR/retag.rs:44:16: 44:18\n-        _15 = move _16(move _17) -> bb3; // scope 6 at $DIR/retag.rs:44:14: 44:19\n+        _15 = move _16(move _17) -> bb5; // scope 6 at $DIR/retag.rs:44:14: 44:19\n     }\n \n-    bb3: {\n+    bb5: {\n         Retag(_15);                      // scope 6 at $DIR/retag.rs:44:14: 44:19\n         StorageDead(_17);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n         StorageDead(_16);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n@@ -185,7 +193,7 @@ fn main() -> () {\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n-        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb4, unwind: bb6]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n                                          // ty::Const\n                                          // + ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -194,15 +202,19 @@ fn main() -> () {\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb4: {\n+    bb6: {\n         Retag(_19);                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageDead(_22);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_20);                // scope 7 at $DIR/retag.rs:47:23: 47:24\n         StorageDead(_23);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-        drop(_21) -> [return: bb5, unwind: bb8]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n+        drop(_21) -> [return: bb8, unwind: bb1]; // scope 7 at $DIR/retag.rs:47:24: 47:25\n     }\n \n-    bb5: {\n+    bb7 (cleanup): {\n+        drop(_21) -> bb1;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n+    }\n+\n+    bb8: {\n         StorageDead(_21);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageDead(_19);                // scope 7 at $DIR/retag.rs:47:24: 47:25\n         StorageLive(_25);                // scope 7 at $DIR/retag.rs:50:9: 50:11\n@@ -224,16 +236,4 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/retag.rs:51:1: 51:2\n         return;                          // scope 0 at $DIR/retag.rs:51:2: 51:2\n     }\n-\n-    bb6 (cleanup): {\n-        drop(_21) -> bb8;                // scope 7 at $DIR/retag.rs:47:24: 47:25\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_5) -> bb8;                 // scope 1 at $DIR/retag.rs:32:36: 32:37\n-    }\n-\n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/retag.rs:29:1: 51:2\n-    }\n }"}, {"sha": "3a7d6a7ca3c6159c541bc234ecd9e5034914398c", "filename": "src/test/mir-opt/simple-match/32bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -6,36 +6,44 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    }\n+\n+    bb3: {\n         _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x00000014))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000014)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb3: {\n+    bb4: {\n         _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000a)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb5: {\n+        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+    }\n+\n+    bb6: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "170181177b26adf812afc274d4876e1d36d9c6e8", "filename": "src/test/mir-opt/simple-match/64bit/rustc.match_bool.mir_map.0.mir", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -6,36 +6,44 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace, _1);   // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n-    bb1: {\n-        falseEdges -> [real: bb3, imaginary: bb2]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    }\n+\n+    bb3: {\n         _0 = const 20usize;              // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000014))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000014)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb3: {\n+    bb4: {\n         _0 = const 10usize;              // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x000000000000000a))\n                                          // mir::Constant\n                                          // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x000000000000000a)) }\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb5;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n-    bb4: {\n+    bb5: {\n+        goto -> bb6;                     // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+    }\n+\n+    bb6: {\n         return;                          // scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }"}, {"sha": "3b472ed3a0376a99d99cc469e216345578337a99", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -13,7 +13,7 @@\n - \n -     bb1: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = const bar() -> bb2;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> bb3;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = const bar() -> bb1;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n@@ -23,18 +23,22 @@\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb2: {\n--         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb2 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n +     bb1: {\n +         switchInt(_2) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n -     bb3: {\n--         goto -> bb5;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         nop;                             // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb4: {\n+-         goto -> bb6;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     }\n+- \n+-     bb5: {\n +     bb2: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // ty::Const\n@@ -47,7 +51,7 @@\n           goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb5: {\n+-     bb6: {\n +     bb3: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // ty::Const\n@@ -58,10 +62,6 @@\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n--     }\n-- \n--     bb6 (cleanup): {\n--         resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   }\n   "}, {"sha": "0cc2258f46364dcdb4fd3b0ddf7c2c0a9f8e0b4e", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -9,17 +9,21 @@\n   \n       bb0: {\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-+         falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n++         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+-         falseUnwind -> [real: bb3, cleanup: bb4]; // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n -     bb2: {\n+-         goto -> bb13;                    // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n+-     }\n+- \n+-     bb3: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         _2 = const bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-+         _2 = const bar() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         _2 = const bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n++         _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -28,66 +32,70 @@\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n--     bb3: {\n-+     bb2: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n--         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb4 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n       }\n   \n--     bb4: {\n--         falseEdges -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb5: {\n +     bb3: {\n-+         falseEdges -> [real: bb5, imaginary: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n+-         switchInt(_2) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n       }\n   \n--     bb5: {\n+-     bb6: {\n+-         falseEdges -> [real: bb8, imaginary: bb7]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb4: {\n++         falseEdges -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+      }\n+  \n+-     bb7: {\n++     bb5: {\n           _1 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         goto -> bb0;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n--     bb6: {\n-+     bb5: {\n+-     bb8: {\n++     bb6: {\n           _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n--     bb7: {\n+-     bb9: {\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-         goto -> bb2;                     // scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-     }\n+- \n+-     bb10: {\n -         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:7:18: 9:10\n -     }\n - \n--     bb8: {\n--         goto -> bb9;                     // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-     bb11: {\n+-         goto -> bb12;                    // scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n--     bb9: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb12: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n -         goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n -     }\n - \n--     bb10: {\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n+-     bb13: {\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }\n-  \n--     bb11 (cleanup): {\n-+     bb6 (cleanup): {\n-          resume;                          // scope 0 at $DIR/simplify_cfg.rs:5:1: 11:2\n-      }\n   }\n   "}, {"sha": "62b7535f2b57565986bec6bbc77839435ac74e6f", "filename": "src/test/mir-opt/storage_live_dead_in_statics/rustc.XXX.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics%2Frustc.XXX.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -663,4 +663,8 @@ static XXX: &Foo = {\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:1: 23:3\n+    }\n }"}, {"sha": "de29cd61019f11f6929287f5217f2eddc82cd3dc", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -28,10 +28,22 @@ fn move_out_by_subslice() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:11:18: 11:19\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n+    }\n+\n+    bb2 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+    }\n+\n+    bb4: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n@@ -44,21 +56,29 @@ fn move_out_by_subslice() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:11:25: 11:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n-    bb2: {\n+    bb7: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb3: {\n+    bb8: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb4: {\n+    bb9: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n@@ -70,32 +90,28 @@ fn move_out_by_subslice() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:10:27: 13:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-    }\n-\n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb6: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n+    bb10 (cleanup): {\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb11 (cleanup): {\n+        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb12: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb13: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n+    bb14: {\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n }"}, {"sha": "aeab0e892ae8b8725c6bfa59dcb782fdc0d5f5b4", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -28,10 +28,22 @@ fn move_out_from_end() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:5:18: 5:19\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        drop(_3) -> [return: bb4, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n-    bb1: {\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n+    }\n+\n+    bb2 (cleanup): {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_3) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+    }\n+\n+    bb4: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n@@ -44,21 +56,29 @@ fn move_out_from_end() -> () {\n                                          // + span: $DIR/uniform_array_move_out.rs:5:25: 5:26\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        drop(_5) -> [return: bb7, unwind: bb5]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_4) -> bb2;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb6 (cleanup): {\n+        drop(_5) -> bb5;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n-    bb2: {\n+    bb7: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_4) -> [return: bb8, unwind: bb2]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb3: {\n+    bb8: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb4: {\n+    bb9: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n@@ -70,32 +90,28 @@ fn move_out_from_end() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/uniform_array_move_out.rs:4:24: 7:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-    }\n-\n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb12, unwind: bb10]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb6: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n+    bb10 (cleanup): {\n+        drop(_1) -> bb1;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb11 (cleanup): {\n+        drop(_6) -> bb10;                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb12: {\n+        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb13: {\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        goto -> bb14;                    // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n+    bb14: {\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n }"}, {"sha": "c800ccb1ae51f698db8d7a5fcd773be2dfca4672", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -13,4 +13,8 @@ E::V::{{constant}}#0: isize = {\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000005)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+    }\n }"}, {"sha": "28f14399a630995e51e5338bf3e09b9897d216c2", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -6,7 +6,7 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,16 +22,20 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n-    bb5: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    bb5 (cleanup): {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    }\n+\n+    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "f4a5cc0b3279a5136106ae8df95aa0dd0939fc0d", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -13,4 +13,8 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+    }\n }"}, {"sha": "e635cd2b01bbd79fb97d6e08f40e69e95fafa81d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -13,4 +13,8 @@ E::V::{{constant}}#0: isize = {\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000005)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+    }\n }"}, {"sha": "28f14399a630995e51e5338bf3e09b9897d216c2", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -6,7 +6,7 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n \n     bb0: {\n-        goto -> bb6;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb7;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb1: {\n@@ -22,16 +22,20 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        goto -> bb2;                     // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n-    bb5: {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb2]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    bb5 (cleanup): {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n     }\n \n     bb6: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+    }\n+\n+    bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n-        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n                                          // + val: Value(Scalar(<ZST>))"}, {"sha": "f4a5cc0b3279a5136106ae8df95aa0dd0939fc0d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -13,4 +13,8 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 =\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n         return;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n+\n+    bb1 (cleanup): {\n+        resume;                          // scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+    }\n }"}, {"sha": "3ddf82c2fb2c9d6384c6a7317d3130d09a4ba6d7", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34c0f0599d71118acd9a7c1648f585b9a4516857/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=34c0f0599d71118acd9a7c1648f585b9a4516857", "patch": "@@ -70,7 +70,7 @@ fn while_loop(_1: bool) -> () {\n                                          // + span: $DIR/while-storage.rs:12:13: 12:18\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n+        goto -> bb7;                     // scope 0 at $DIR/while-storage.rs:12:13: 12:18\n     }\n \n     bb7: {"}]}