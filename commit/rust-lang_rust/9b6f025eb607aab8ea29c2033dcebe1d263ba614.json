{"sha": "9b6f025eb607aab8ea29c2033dcebe1d263ba614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNmYwMjVlYjYwN2FhYjhlYTI5YzIwMzNkY2ViZTFkMjYzYmE2MTQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-15T20:32:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-15T20:35:14Z"}, "message": "Rename thread_pool to task_pool\n\nMinor change, no review.\n\nCloses #3972", "tree": {"sha": "81a79d92c6a0f5a876595069592ed37107dc61e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a79d92c6a0f5a876595069592ed37107dc61e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6f025eb607aab8ea29c2033dcebe1d263ba614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f025eb607aab8ea29c2033dcebe1d263ba614", "html_url": "https://github.com/rust-lang/rust/commit/9b6f025eb607aab8ea29c2033dcebe1d263ba614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f025eb607aab8ea29c2033dcebe1d263ba614/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0610c952f0d23927443b901241627ae910fd3cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0610c952f0d23927443b901241627ae910fd3cd", "html_url": "https://github.com/rust-lang/rust/commit/a0610c952f0d23927443b901241627ae910fd3cd"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "28f5db214e9793c0e8b1e7e3a6a84b3ae028334c", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f025eb607aab8ea29c2033dcebe1d263ba614/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f025eb607aab8ea29c2033dcebe1d263ba614/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=9b6f025eb607aab8ea29c2033dcebe1d263ba614", "patch": "@@ -54,7 +54,7 @@ pub mod sync;\n pub mod arc;\n pub mod comm;\n pub mod future;\n-pub mod thread_pool;\n+pub mod task_pool;\n \n // Collections\n "}, {"sha": "4ed3c16c994a2ff95c03cb09412857bb64b9be07", "filename": "src/libstd/task_pool.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b6f025eb607aab8ea29c2033dcebe1d263ba614/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6f025eb607aab8ea29c2033dcebe1d263ba614/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=9b6f025eb607aab8ea29c2033dcebe1d263ba614", "patch": "@@ -1,4 +1,4 @@\n-/// A thread pool abstraction. Useful for achieving predictable CPU\n+/// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n \n use pipes::{Chan, Port};\n@@ -9,7 +9,7 @@ enum Msg<T> {\n     Quit\n }\n \n-pub struct ThreadPool<T> {\n+pub struct TaskPool<T> {\n     channels: ~[Chan<Msg<T>>],\n     mut next_index: uint,\n \n@@ -20,15 +20,15 @@ pub struct ThreadPool<T> {\n     }\n }\n \n-pub impl<T> ThreadPool<T> {\n-    /// Spawns a new thread pool with `n_tasks` tasks. If the `sched_mode`\n+pub impl<T> TaskPool<T> {\n+    /// Spawns a new task pool with `n_tasks` tasks. If the `sched_mode`\n     /// is None, the tasks run on this scheduler; otherwise, they run on a\n     /// new scheduler with the given mode. The provided `init_fn_factory`\n     /// returns a function which, given the index of the task, should return\n     /// local data to be kept around in that task.\n     static fn new(n_tasks: uint,\n                   opt_sched_mode: Option<SchedMode>,\n-                  init_fn_factory: ~fn() -> ~fn(uint) -> T) -> ThreadPool<T> {\n+                  init_fn_factory: ~fn() -> ~fn(uint) -> T) -> TaskPool<T> {\n         assert n_tasks >= 1;\n \n         let channels = do vec::from_fn(n_tasks) |i| {\n@@ -59,10 +59,10 @@ pub impl<T> ThreadPool<T> {\n             move chan\n         };\n \n-        return ThreadPool { channels: move channels, next_index: 0 };\n+        return TaskPool { channels: move channels, next_index: 0 };\n     }\n \n-    /// Executes the function `f` on a thread in the pool. The function\n+    /// Executes the function `f` on a task in the pool. The function\n     /// receives a reference to the local data returned by the `init_fn`.\n     fn execute(&self, f: ~fn(&T)) {\n         self.channels[self.next_index].send(Execute(move f));\n@@ -72,12 +72,12 @@ pub impl<T> ThreadPool<T> {\n }\n \n #[test]\n-fn test_thread_pool() {\n+fn test_task_pool() {\n     let f: ~fn() -> ~fn(uint) -> uint = || {\n         let g: ~fn(uint) -> uint = |i| i;\n         move g\n     };\n-    let pool = ThreadPool::new(4, Some(SingleThreaded), move f);\n+    let pool = TaskPool::new(4, Some(SingleThreaded), move f);\n     for 8.times {\n         pool.execute(|i| io::println(fmt!(\"Hello from thread %u!\", *i)));\n     }", "previous_filename": "src/libstd/thread_pool.rs"}]}