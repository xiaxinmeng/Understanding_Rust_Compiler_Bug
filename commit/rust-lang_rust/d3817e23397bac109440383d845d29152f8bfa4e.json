{"sha": "d3817e23397bac109440383d845d29152f8bfa4e", "node_id": "C_kwDOAAsO6NoAKGQzODE3ZTIzMzk3YmFjMTA5NDQwMzgzZDg0NWQyOTE1MmY4YmZhNGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T13:11:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T13:11:12Z"}, "message": "Rollup merge of #104605 - RalfJung:clf_consts, r=bjorn3\n\ndeduplicate constant evaluation in cranelift backend\n\nThe cranelift backend had two matches on `ConstantKind`, which can be avoided, and used this `eval_for_mir` that nothing else uses... this makes things more consistent with the (better-tested) LLVM backend.\n\nI noticed this because cranelift was the only user of `eval_for_mir`. However `try_eval_for_mir` still has one other user in `eval`... the odd thing is that the interpreter has its own `eval_mir_constant` which seems to duplicate the same functionality and does not use `try_eval_for_mir`. No idea what is happening here.\n\nr? ``@bjorn3``\nCc ``@lcnr``", "tree": {"sha": "423596c822c940c5ea71da2b0de960614195370a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423596c822c940c5ea71da2b0de960614195370a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3817e23397bac109440383d845d29152f8bfa4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3817e23397bac109440383d845d29152f8bfa4e", "html_url": "https://github.com/rust-lang/rust/commit/d3817e23397bac109440383d845d29152f8bfa4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3817e23397bac109440383d845d29152f8bfa4e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd3e4dabbc4786a5b7dfc4a0efe1c2e865c719e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3e4dabbc4786a5b7dfc4a0efe1c2e865c719e", "html_url": "https://github.com/rust-lang/rust/commit/5fd3e4dabbc4786a5b7dfc4a0efe1c2e865c719e"}, {"sha": "a3c89a7ade837cb3d64c17e0b58a67d2c57f2887", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c89a7ade837cb3d64c17e0b58a67d2c57f2887", "html_url": "https://github.com/rust-lang/rust/commit/a3c89a7ade837cb3d64c17e0b58a67d2c57f2887"}], "stats": {"total": 58, "additions": 23, "deletions": 35}, "files": [{"sha": "077f33bb99cf7ad5e74fda657454ed21814aa711", "filename": "src/constant.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d3817e23397bac109440383d845d29152f8bfa4e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3817e23397bac109440383d845d29152f8bfa4e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d3817e23397bac109440383d845d29152f8bfa4e", "patch": "@@ -38,22 +38,8 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let unevaluated = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(_) => unreachable!(),\n-            ConstantKind::Unevaluated(uv, _) => uv,\n-            ConstantKind::Val(..) => continue,\n-        };\n-\n-        if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n+        if eval_mir_constant(fx, constant).is_none() {\n             all_constants_ok = false;\n-            match err {\n-                ErrorHandled::Reported(_) => {\n-                    fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n-                }\n-                ErrorHandled::TooGeneric => {\n-                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n-                }\n-            }\n         }\n     }\n     all_constants_ok\n@@ -80,15 +66,15 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n }\n \n pub(crate) fn eval_mir_constant<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    fx: &FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n-) -> (ConstValue<'tcx>, Ty<'tcx>) {\n+) -> Option<(ConstValue<'tcx>, Ty<'tcx>)> {\n     let constant_kind = fx.monomorphize(constant.literal);\n     let uv = match constant_kind {\n         ConstantKind::Ty(const_) => match const_.kind() {\n             ty::ConstKind::Unevaluated(uv) => uv.expand(),\n             ty::ConstKind::Value(val) => {\n-                return (fx.tcx.valtree_to_const_val((const_.ty(), val)), const_.ty());\n+                return Some((fx.tcx.valtree_to_const_val((const_.ty(), val)), const_.ty()));\n             }\n             err => span_bug!(\n                 constant.span,\n@@ -102,22 +88,31 @@ pub(crate) fn eval_mir_constant<'tcx>(\n             span_bug!(constant.span, \"MIR constant refers to static\");\n         }\n         ConstantKind::Unevaluated(uv, _) => uv,\n-        ConstantKind::Val(val, _) => return (val, constant_kind.ty()),\n+        ConstantKind::Val(val, _) => return Some((val, constant_kind.ty())),\n     };\n \n-    (\n-        fx.tcx.const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).unwrap_or_else(|_err| {\n-            span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n-        }),\n-        constant_kind.ty(),\n-    )\n+    let val = fx\n+        .tcx\n+        .const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None)\n+        .map_err(|err| match err {\n+            ErrorHandled::Reported(_) => {\n+                fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+            }\n+            ErrorHandled::TooGeneric => {\n+                span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n+            }\n+        })\n+        .ok();\n+    val.map(|val| (val, constant_kind.ty()))\n }\n \n pub(crate) fn codegen_constant_operand<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let (const_val, ty) = eval_mir_constant(fx, constant);\n+    let (const_val, ty) = eval_mir_constant(fx, constant).unwrap_or_else(|| {\n+        span_bug!(constant.span, \"erroneous constant not captured by required_consts\")\n+    });\n \n     codegen_const_value(fx, const_val, ty)\n }\n@@ -453,20 +448,13 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n     assert!(cx.todo.is_empty(), \"{:?}\", cx.todo);\n }\n \n+/// Used only for intrinsic implementations that need a compile-time constant\n pub(crate) fn mir_operand_get_const_val<'tcx>(\n     fx: &FunctionCx<'_, '_, 'tcx>,\n     operand: &Operand<'tcx>,\n ) -> Option<ConstValue<'tcx>> {\n     match operand {\n-        Operand::Constant(const_) => match fx.monomorphize(const_.literal) {\n-            ConstantKind::Ty(const_) => Some(\n-                const_.eval_for_mir(fx.tcx, ParamEnv::reveal_all()).try_to_value(fx.tcx).unwrap(),\n-            ),\n-            ConstantKind::Val(val, _) => Some(val),\n-            ConstantKind::Unevaluated(uv, _) => {\n-                Some(fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), uv, None).unwrap())\n-            }\n-        },\n+        Operand::Constant(const_) => Some(eval_mir_constant(fx, const_).unwrap().0),\n         // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored\n         // inside a temporary before being passed to the intrinsic requiring the const argument.\n         // This code tries to find a single constant defining definition of the referenced local."}]}