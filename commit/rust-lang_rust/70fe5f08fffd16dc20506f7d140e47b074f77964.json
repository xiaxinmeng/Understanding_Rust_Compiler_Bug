{"sha": "70fe5f08fffd16dc20506f7d140e47b074f77964", "node_id": "C_kwDOAAsO6NoAKDcwZmU1ZjA4ZmZmZDE2ZGMyMDUwNmY3ZDE0MGU0N2IwNzRmNzc5NjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T16:56:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T16:56:12Z"}, "message": "Auto merge of #101562 - nnethercote:shrink-ast-Expr-harder, r=petrochenkov\n\nShrink `ast::Expr` harder\n\nr? `@ghost`", "tree": {"sha": "ecd74afdbcaec5b26090a88115a860b202986dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd74afdbcaec5b26090a88115a860b202986dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70fe5f08fffd16dc20506f7d140e47b074f77964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70fe5f08fffd16dc20506f7d140e47b074f77964", "html_url": "https://github.com/rust-lang/rust/commit/70fe5f08fffd16dc20506f7d140e47b074f77964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70fe5f08fffd16dc20506f7d140e47b074f77964/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bfb35511cbcff59ce1454d3db627b576d7e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bfb35511cbcff59ce1454d3db627b576d7e92", "html_url": "https://github.com/rust-lang/rust/commit/fd3bfb35511cbcff59ce1454d3db627b576d7e92"}, {"sha": "67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "html_url": "https://github.com/rust-lang/rust/commit/67d5cc0462f33773f042dc3c5ec9bd710095b1b4"}], "stats": {"total": 869, "additions": 486, "deletions": 383}, "files": [{"sha": "e1359b9e9e402ae27f53502cda5680aaf2534315", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -3476,6 +3476,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -3916,6 +3917,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"thin-vec\",\n  \"tracing\",\n  \"unicode-normalization\",\n  \"unicode-width\",\n@@ -4051,6 +4053,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n "}, {"sha": "e6b72bd58c540f50d14a77a0ac3e6ae9ee8c44bc", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 48, "deletions": 33, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -36,7 +36,7 @@ use rustc_span::{Span, DUMMY_SP};\n use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n /// A \"Label\" is an identifier of some point in sources,\n /// e.g. in the following code:\n@@ -90,7 +90,7 @@ pub struct Path {\n     pub span: Span,\n     /// The segments in the path: the things separated by `::`.\n     /// Global paths begin with `kw::PathRoot`.\n-    pub segments: Vec<PathSegment>,\n+    pub segments: ThinVec<PathSegment>,\n     pub tokens: Option<LazyAttrTokenStream>,\n }\n \n@@ -114,7 +114,7 @@ impl Path {\n     // Convert a span and an identifier to the corresponding\n     // one-segment path.\n     pub fn from_ident(ident: Ident) -> Path {\n-        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n+        Path { segments: thin_vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n     }\n \n     pub fn is_global(&self) -> bool {\n@@ -718,10 +718,10 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Option<QSelf>, Path, Vec<PatField>, /* recovered */ bool),\n+    Struct(Option<P<QSelf>>, Path, Vec<PatField>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n-    TupleStruct(Option<QSelf>, Path, Vec<P<Pat>>),\n+    TupleStruct(Option<P<QSelf>>, Path, Vec<P<Pat>>),\n \n     /// An or-pattern `A | B | C`.\n     /// Invariant: `pats.len() >= 2`.\n@@ -731,7 +731,7 @@ pub enum PatKind {\n     /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants\n     /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can\n     /// only legally refer to associated constants.\n-    Path(Option<QSelf>, Path),\n+    Path(Option<P<QSelf>>, Path),\n \n     /// A tuple pattern (`(a, b)`).\n     Tuple(Vec<P<Pat>>),\n@@ -1272,6 +1272,18 @@ impl Expr {\n     }\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct Closure {\n+    pub binder: ClosureBinder,\n+    pub capture_clause: CaptureBy,\n+    pub asyncness: Async,\n+    pub movability: Movability,\n+    pub fn_decl: P<FnDecl>,\n+    pub body: P<Expr>,\n+    /// The span of the argument block `|...|`.\n+    pub fn_decl_span: Span,\n+}\n+\n /// Limit types of a range (inclusive or exclusive)\n #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]\n pub enum RangeLimits {\n@@ -1281,6 +1293,20 @@ pub enum RangeLimits {\n     Closed,\n }\n \n+/// A method call (e.g. `x.foo::<Bar, Baz>(a, b, c)`).\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct MethodCall {\n+    /// The method name and its generic arguments, e.g. `foo::<Bar, Baz>`.\n+    pub seg: PathSegment,\n+    /// The receiver, e.g. `x`.\n+    pub receiver: P<Expr>,\n+    /// The arguments, e.g. `a, b, c`.\n+    pub args: Vec<P<Expr>>,\n+    /// The span of the function, without the dot and receiver e.g. `foo::<Bar,\n+    /// Baz>(a, b, c)`.\n+    pub span: Span,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum StructRest {\n     /// `..x`.\n@@ -1293,7 +1319,7 @@ pub enum StructRest {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct StructExpr {\n-    pub qself: Option<QSelf>,\n+    pub qself: Option<P<QSelf>>,\n     pub path: Path,\n     pub fields: Vec<ExprField>,\n     pub rest: StructRest,\n@@ -1314,17 +1340,8 @@ pub enum ExprKind {\n     /// This also represents calling the constructor of\n     /// tuple-like ADTs such as tuple structs and enum variants.\n     Call(P<Expr>, Vec<P<Expr>>),\n-    /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n-    ///\n-    /// The `PathSegment` represents the method name and its generic arguments\n-    /// (within the angle brackets).\n-    /// The standalone `Expr` is the receiver expression.\n-    /// The vector of `Expr` is the arguments.\n-    /// `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, x, [a, b, c, d])`.\n-    /// This `Span` is the span of the function, without the dot and receiver\n-    /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n-    MethodCall(PathSegment, P<Expr>, Vec<P<Expr>>, Span),\n+    /// A method call (e.g. `x.foo::<Bar, Baz>(a, b, c)`).\n+    MethodCall(Box<MethodCall>),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (e.g., `a + b`, `a * b`).\n@@ -1363,9 +1380,7 @@ pub enum ExprKind {\n     /// A `match` block.\n     Match(P<Expr>, Vec<Arm>),\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n-    ///\n-    /// The final span is the span of the argument block `|...|`.\n-    Closure(ClosureBinder, CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n+    Closure(Box<Closure>),\n     /// A block (`'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n@@ -1403,7 +1418,7 @@ pub enum ExprKind {\n     /// parameters (e.g., `foo::bar::<baz>`).\n     ///\n     /// Optionally \"qualified\" (e.g., `<Vec<T> as SomeTrait>::SomeType`).\n-    Path(Option<QSelf>, Path),\n+    Path(Option<P<QSelf>>, Path),\n \n     /// A referencing operation (`&a`, `&mut a`, `&raw const a` or `&raw mut a`).\n     AddrOf(BorrowKind, Mutability, P<Expr>),\n@@ -2006,7 +2021,7 @@ pub enum TyKind {\n     /// \"qualified\", e.g., `<Vec<T> as SomeTrait>::SomeType`.\n     ///\n     /// Type parameters are stored in the `Path` itself.\n-    Path(Option<QSelf>, Path),\n+    Path(Option<P<QSelf>>, Path),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(GenericBounds, TraitObjectSyntax),\n@@ -2138,7 +2153,7 @@ impl InlineAsmTemplatePiece {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct InlineAsmSym {\n     pub id: NodeId,\n-    pub qself: Option<QSelf>,\n+    pub qself: Option<P<QSelf>>,\n     pub path: Path,\n }\n \n@@ -3031,28 +3046,28 @@ mod size_asserts {\n     static_assert_size!(AssocItemKind, 32);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 48);\n-    static_assert_size!(Expr, 104);\n-    static_assert_size!(ExprKind, 72);\n+    static_assert_size!(Expr, 72);\n+    static_assert_size!(ExprKind, 40);\n     static_assert_size!(Fn, 184);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);\n     static_assert_size!(GenericArg, 24);\n-    static_assert_size!(GenericBound, 88);\n+    static_assert_size!(GenericBound, 72);\n     static_assert_size!(Generics, 72);\n-    static_assert_size!(Impl, 200);\n+    static_assert_size!(Impl, 184);\n     static_assert_size!(Item, 184);\n     static_assert_size!(ItemKind, 112);\n     static_assert_size!(Lit, 48);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n     static_assert_size!(Param, 40);\n-    static_assert_size!(Pat, 120);\n-    static_assert_size!(Path, 40);\n+    static_assert_size!(Pat, 88);\n+    static_assert_size!(Path, 24);\n     static_assert_size!(PathSegment, 24);\n-    static_assert_size!(PatKind, 96);\n+    static_assert_size!(PatKind, 64);\n     static_assert_size!(Stmt, 32);\n     static_assert_size!(StmtKind, 16);\n-    static_assert_size!(Ty, 96);\n-    static_assert_size!(TyKind, 72);\n+    static_assert_size!(Ty, 64);\n+    static_assert_size!(TyKind, 40);\n     // tidy-alphabetical-end\n }"}, {"sha": "09b08d5059c1c30e936ad6c2078abe2ede39449c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -10,19 +10,18 @@ use crate::token::{self, CommentKind, Delimiter, Token};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n-\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::source_map::BytePos;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n-\n use std::cell::Cell;\n use std::iter;\n #[cfg(debug_assertions)]\n use std::ops::BitXor;\n #[cfg(debug_assertions)]\n use std::sync::atomic::{AtomicU32, Ordering};\n+use thin_vec::thin_vec;\n \n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n \n@@ -471,12 +470,12 @@ impl MetaItem {\n                         tokens.peek()\n                     {\n                         tokens.next();\n-                        vec![PathSegment::from_ident(Ident::new(name, span))]\n+                        thin_vec![PathSegment::from_ident(Ident::new(name, span))]\n                     } else {\n                         break 'arm Path::from_ident(Ident::new(name, span));\n                     }\n                 } else {\n-                    vec![PathSegment::path_root(span)]\n+                    thin_vec![PathSegment::path_root(span)]\n                 };\n                 loop {\n                     if let Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }, _)) ="}, {"sha": "ece4cb5556b47c78c8b86c28fa7eebf7dbb8722e", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -194,7 +194,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_path(p, self);\n     }\n \n-    fn visit_qself(&mut self, qs: &mut Option<QSelf>) {\n+    fn visit_qself(&mut self, qs: &mut Option<P<QSelf>>) {\n         noop_visit_qself(qs, self);\n     }\n \n@@ -529,8 +529,9 @@ pub fn noop_visit_path<T: MutVisitor>(Path { segments, span, tokens }: &mut Path\n     visit_lazy_tts(tokens, vis);\n }\n \n-pub fn noop_visit_qself<T: MutVisitor>(qself: &mut Option<QSelf>, vis: &mut T) {\n-    visit_opt(qself, |QSelf { ty, path_span, position: _ }| {\n+pub fn noop_visit_qself<T: MutVisitor>(qself: &mut Option<P<QSelf>>, vis: &mut T) {\n+    visit_opt(qself, |qself| {\n+        let QSelf { ty, path_span, position: _ } = &mut **qself;\n         vis.visit_ty(ty);\n         vis.visit_span(path_span);\n     })\n@@ -1303,12 +1304,17 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(f);\n             visit_exprs(args, vis);\n         }\n-        ExprKind::MethodCall(PathSegment { ident, id, args }, receiver, exprs, span) => {\n+        ExprKind::MethodCall(box MethodCall {\n+            seg: PathSegment { ident, id, args: seg_args },\n+            receiver,\n+            args: call_args,\n+            span,\n+        }) => {\n             vis.visit_ident(ident);\n             vis.visit_id(id);\n-            visit_opt(args, |args| vis.visit_generic_args(args));\n+            visit_opt(seg_args, |args| vis.visit_generic_args(args));\n             vis.visit_method_receiver_expr(receiver);\n-            visit_exprs(exprs, vis);\n+            visit_exprs(call_args, vis);\n             vis.visit_span(span);\n         }\n         ExprKind::Binary(_binop, lhs, rhs) => {\n@@ -1353,12 +1359,20 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(expr);\n             arms.flat_map_in_place(|arm| vis.flat_map_arm(arm));\n         }\n-        ExprKind::Closure(binder, _capture_by, asyncness, _movability, decl, body, span) => {\n+        ExprKind::Closure(box Closure {\n+            binder,\n+            capture_clause: _,\n+            asyncness,\n+            movability: _,\n+            fn_decl,\n+            body,\n+            fn_decl_span,\n+        }) => {\n             vis.visit_closure_binder(binder);\n             vis.visit_asyncness(asyncness);\n-            vis.visit_fn_decl(decl);\n+            vis.visit_fn_decl(fn_decl);\n             vis.visit_expr(body);\n-            vis.visit_span(span);\n+            vis.visit_span(fn_decl_span);\n         }\n         ExprKind::Block(blk, label) => {\n             vis.visit_block(blk);"}, {"sha": "fbb4cf43a954ccc08814d63fe49b2ec8d2063a10", "filename": "compiler/rustc_ast/src/util/classify.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -36,14 +36,16 @@ pub fn expr_trailing_brace(mut expr: &ast::Expr) -> Option<&ast::Expr> {\n             | Binary(_, _, e)\n             | Box(e)\n             | Break(_, Some(e))\n-            | Closure(.., e, _)\n             | Let(_, e, _)\n             | Range(_, Some(e), _)\n             | Ret(Some(e))\n             | Unary(_, e)\n             | Yield(Some(e)) => {\n                 expr = e;\n             }\n+            Closure(closure) => {\n+                expr = &closure.body;\n+            }\n             Async(..) | Block(..) | ForLoop(..) | If(..) | Loop(..) | Match(..) | Struct(..)\n             | TryBlock(..) | While(..) => break Some(expr),\n             _ => break None,"}, {"sha": "30c55dffb180382b476378d48b4d07c80312bec6", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -396,7 +396,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n+        ast::ExprKind::MethodCall(box ast::MethodCall { ref receiver, .. }) => {\n             // X { y: 1 }.bar(...)\n             contains_exterior_struct_lit(&receiver)\n         }"}, {"sha": "ad5a2116c424a485da6b3deeed939f6631bdbe6f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -798,10 +798,10 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _span) => {\n-            visitor.visit_path_segment(segment);\n+        ExprKind::MethodCall(box MethodCall { ref seg, ref receiver, ref args, span: _ }) => {\n+            visitor.visit_path_segment(seg);\n             visitor.visit_expr(receiver);\n-            walk_list!(visitor, visit_expr, arguments);\n+            walk_list!(visitor, visit_expr, args);\n         }\n         ExprKind::Binary(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(left_expression);\n@@ -842,8 +842,16 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure(ref binder, _, _, _, ref decl, ref body, _decl_span) => {\n-            visitor.visit_fn(FnKind::Closure(binder, decl, body), expression.span, expression.id)\n+        ExprKind::Closure(box Closure {\n+            ref binder,\n+            capture_clause: _,\n+            asyncness: _,\n+            movability: _,\n+            ref fn_decl,\n+            ref body,\n+            fn_decl_span: _,\n+        }) => {\n+            visitor.visit_fn(FnKind::Closure(binder, fn_decl, body), expression.span, expression.id)\n         }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);"}, {"sha": "eaa5a38388afcc214214b4b4414ef1327c8dcaeb", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -61,7 +61,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::ExprKind::Call(f, self.lower_exprs(args))\n                     }\n                 }\n-                ExprKind::MethodCall(ref seg, ref receiver, ref args, span) => {\n+                ExprKind::MethodCall(box MethodCall { ref seg, ref receiver, ref args, span }) => {\n                     let hir_seg = self.arena.alloc(self.lower_path_segment(\n                         e.span,\n                         seg,\n@@ -172,22 +172,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     };\n                     self.lower_expr_await(dot_await_span, expr)\n                 }\n-                ExprKind::Closure(\n+                ExprKind::Closure(box Closure {\n                     ref binder,\n                     capture_clause,\n                     asyncness,\n                     movability,\n-                    ref decl,\n+                    ref fn_decl,\n                     ref body,\n                     fn_decl_span,\n-                ) => {\n+                }) => {\n                     if let Async::Yes { closure_id, .. } = asyncness {\n                         self.lower_expr_async_closure(\n                             binder,\n                             capture_clause,\n                             e.id,\n                             closure_id,\n-                            decl,\n+                            fn_decl,\n                             body,\n                             fn_decl_span,\n                         )\n@@ -197,7 +197,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             capture_clause,\n                             e.id,\n                             movability,\n-                            decl,\n+                            fn_decl,\n                             body,\n                             fn_decl_span,\n                         )\n@@ -1105,7 +1105,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn extract_tuple_struct_path<'a>(\n         &mut self,\n         expr: &'a Expr,\n-    ) -> Option<(&'a Option<QSelf>, &'a Path)> {\n+    ) -> Option<(&'a Option<AstP<QSelf>>, &'a Path)> {\n         if let ExprKind::Path(qself, path) = &expr.kind {\n             // Does the path resolve to something disallowed in a tuple struct/variant pattern?\n             if let Some(partial_res) = self.resolver.get_partial_res(expr.id) {\n@@ -1125,7 +1125,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn extract_unit_struct_path<'a>(\n         &mut self,\n         expr: &'a Expr,\n-    ) -> Option<(&'a Option<QSelf>, &'a Path)> {\n+    ) -> Option<(&'a Option<AstP<QSelf>>, &'a Path)> {\n         if let ExprKind::Path(qself, path) = &expr.kind {\n             // Does the path resolve to something disallowed in a unit struct/variant pattern?\n             if let Some(partial_res) = self.resolver.get_partial_res(expr.id) {"}, {"sha": "05022c1a14c704eb34ab1b8e167df8481a340373", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -19,8 +19,8 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-\n use std::iter;\n+use thin_vec::ThinVec;\n \n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n@@ -242,7 +242,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::ExternCrate(orig_name) => hir::ItemKind::ExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n                 // Start with an empty prefix.\n-                let prefix = Path { segments: vec![], span: use_tree.span, tokens: None };\n+                let prefix = Path { segments: ThinVec::new(), span: use_tree.span, tokens: None };\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }"}, {"sha": "e1703b0b02b0506bd1fe9358b7a88f041c2196de", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -1208,7 +1208,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_path_ty(\n         &mut self,\n         t: &Ty,\n-        qself: &Option<QSelf>,\n+        qself: &Option<ptr::P<QSelf>>,\n         path: &Path,\n         param_mode: ParamMode,\n         itctx: &ImplTraitContext,"}, {"sha": "83d459d899b5cff3e938b14296ce51263e3e18c0", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -19,7 +19,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     pub(crate) fn lower_qpath(\n         &mut self,\n         id: NodeId,\n-        qself: &Option<QSelf>,\n+        qself: &Option<ptr::P<QSelf>>,\n         p: &Path,\n         param_mode: ParamMode,\n         itctx: &ImplTraitContext,"}, {"sha": "1da40d2302e125b5dcfc0baa1979370f7dad4f52", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -121,7 +121,7 @@ impl<'a> State<'a> {\n \n     fn print_expr_struct(\n         &mut self,\n-        qself: &Option<ast::QSelf>,\n+        qself: &Option<P<ast::QSelf>>,\n         path: &ast::Path,\n         fields: &[ast::ExprField],\n         rest: &ast::StructRest,\n@@ -307,8 +307,13 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args);\n             }\n-            ast::ExprKind::MethodCall(ref segment, ref receiver, ref args, _) => {\n-                self.print_expr_method_call(segment, &receiver, &args);\n+            ast::ExprKind::MethodCall(box ast::MethodCall {\n+                ref seg,\n+                ref receiver,\n+                ref args,\n+                ..\n+            }) => {\n+                self.print_expr_method_call(seg, &receiver, &args);\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, lhs, rhs);\n@@ -396,21 +401,21 @@ impl<'a> State<'a> {\n                 let empty = attrs.is_empty() && arms.is_empty();\n                 self.bclose(expr.span, empty);\n             }\n-            ast::ExprKind::Closure(\n+            ast::ExprKind::Closure(box ast::Closure {\n                 ref binder,\n                 capture_clause,\n                 asyncness,\n                 movability,\n-                ref decl,\n+                ref fn_decl,\n                 ref body,\n-                _,\n-            ) => {\n+                fn_decl_span: _,\n+            }) => {\n                 self.print_closure_binder(binder);\n                 self.print_movability(movability);\n                 self.print_asyncness(asyncness);\n                 self.print_capture_clause(capture_clause);\n \n-                self.print_fn_params_and_ret(decl, true);\n+                self.print_fn_params_and_ret(fn_decl, true);\n                 self.space();\n                 self.print_expr(body);\n                 self.end(); // need to close a box"}, {"sha": "4b57bdfbc8fb1a689cab2d099d56813027ffaa08", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -3,8 +3,8 @@ use rustc_ast::{\n     ptr::P,\n     token,\n     tokenstream::{DelimSpan, TokenStream, TokenTree},\n-    BinOpKind, BorrowKind, Expr, ExprKind, ItemKind, MacArgs, MacCall, MacDelimiter, Mutability,\n-    Path, PathSegment, Stmt, StructRest, UnOp, UseTree, UseTreeKind, DUMMY_NODE_ID,\n+    BinOpKind, BorrowKind, Expr, ExprKind, ItemKind, MacArgs, MacCall, MacDelimiter, MethodCall,\n+    Mutability, Path, PathSegment, Stmt, StructRest, UnOp, UseTree, UseTreeKind, DUMMY_NODE_ID,\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n@@ -242,9 +242,9 @@ impl<'cx, 'a> Context<'cx, 'a> {\n                 self.manage_cond_expr(prefix);\n                 self.manage_cond_expr(suffix);\n             }\n-            ExprKind::MethodCall(_, _,ref mut local_exprs, _) => {\n-                for local_expr in local_exprs.iter_mut() {\n-                    self.manage_cond_expr(local_expr);\n+            ExprKind::MethodCall(ref mut call) => {\n+                for arg in call.args.iter_mut() {\n+                    self.manage_cond_expr(arg);\n                 }\n             }\n             ExprKind::Path(_, Path { ref segments, .. }) if let &[ref path_segment] = &segments[..] => {\n@@ -296,7 +296,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Block(_, _)\n             | ExprKind::Box(_)\n             | ExprKind::Break(_, _)\n-            | ExprKind::Closure(_, _, _, _, _, _, _)\n+            | ExprKind::Closure(_)\n             | ExprKind::ConstBlock(_)\n             | ExprKind::Continue(_)\n             | ExprKind::Err\n@@ -442,12 +442,12 @@ fn expr_addr_of_mut(cx: &ExtCtxt<'_>, sp: Span, e: P<Expr>) -> P<Expr> {\n \n fn expr_method_call(\n     cx: &ExtCtxt<'_>,\n-    path: PathSegment,\n+    seg: PathSegment,\n     receiver: P<Expr>,\n     args: Vec<P<Expr>>,\n     span: Span,\n ) -> P<Expr> {\n-    cx.expr(span, ExprKind::MethodCall(path, receiver, args, span))\n+    cx.expr(span, ExprKind::MethodCall(Box::new(MethodCall { seg, receiver, args, span })))\n }\n \n fn expr_paren(cx: &ExtCtxt<'_>, sp: Span, e: P<Expr>) -> P<Expr> {"}, {"sha": "192f54171cee6885d1d327f6397908b6d3afaab0", "filename": "compiler/rustc_expand/Cargo.toml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2FCargo.toml?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -8,20 +8,21 @@ build = false\n doctest = false\n \n [dependencies]\n-rustc_serialize = { path = \"../rustc_serialize\" }\n-tracing = \"0.1\"\n-rustc_span = { path = \"../rustc_span\" }\n-rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n+crossbeam-channel = \"0.5.0\"\n rustc_ast_passes = { path = \"../rustc_ast_passes\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_parse = { path = \"../rustc_parse\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-rustc_ast = { path = \"../rustc_ast\" }\n-crossbeam-channel = \"0.5.0\"\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "e17cba1478ab6e939eb3153cf76565e4dffb3446", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -1,13 +1,12 @@\n use crate::base::ExtCtxt;\n-\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<Ident>) -> ast::Path {\n@@ -28,7 +27,7 @@ impl<'a> ExtCtxt<'a> {\n     ) -> ast::Path {\n         assert!(!idents.is_empty());\n         let add_root = global && !idents[0].is_path_segment_keyword();\n-        let mut segments = Vec::with_capacity(idents.len() + add_root as usize);\n+        let mut segments = ThinVec::with_capacity(idents.len() + add_root as usize);\n         if add_root {\n             segments.push(ast::PathSegment::path_root(span));\n         }\n@@ -532,15 +531,15 @@ impl<'a> ExtCtxt<'a> {\n         // here, but that's not entirely clear.\n         self.expr(\n             span,\n-            ast::ExprKind::Closure(\n-                ast::ClosureBinder::NotPresent,\n-                ast::CaptureBy::Ref,\n-                ast::Async::No,\n-                ast::Movability::Movable,\n+            ast::ExprKind::Closure(Box::new(ast::Closure {\n+                binder: ast::ClosureBinder::NotPresent,\n+                capture_clause: ast::CaptureBy::Ref,\n+                asyncness: ast::Async::No,\n+                movability: ast::Movability::Movable,\n                 fn_decl,\n                 body,\n-                span,\n-            ),\n+                fn_decl_span: span,\n+            })),\n         )\n     }\n "}, {"sha": "97b1871028ec043075f2f6a7f5cdc1bafc411c8a", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -1,14 +1,12 @@\n use crate::expand::{AstFragment, AstFragmentKind};\n-\n use rustc_ast as ast;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Ident;\n-\n use smallvec::{smallvec, SmallVec};\n-\n-use rustc_data_structures::fx::FxHashMap;\n+use thin_vec::ThinVec;\n \n pub fn placeholder(\n     kind: AstFragmentKind,\n@@ -17,7 +15,7 @@ pub fn placeholder(\n ) -> AstFragment {\n     fn mac_placeholder() -> P<ast::MacCall> {\n         P(ast::MacCall {\n-            path: ast::Path { span: DUMMY_SP, segments: Vec::new(), tokens: None },\n+            path: ast::Path { span: DUMMY_SP, segments: ThinVec::new(), tokens: None },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n         })"}, {"sha": "fc760ee3b8fa03281a3fd88bf768f894ca81e208", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -212,7 +212,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n-            ast::ExprKind::Closure(_, _, ast::Async::Yes { closure_id, .. }, ..)\n+            ast::ExprKind::Closure(box ast::Closure {\n+                asyncness: ast::Async::Yes { closure_id, .. },\n+                ..\n+            })\n             | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n             _ => {}\n         }"}, {"sha": "50f9cb0b56f6de5dc27a5f94388ef1f4384ff735", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -651,7 +651,7 @@ trait UnusedDelimLint {\n             ref call_or_other => {\n                 let (args_to_check, ctx) = match *call_or_other {\n                     Call(_, ref args) => (&args[..], UnusedDelimsCtx::FunctionArg),\n-                    MethodCall(_, _, ref args, _) => (&args[..], UnusedDelimsCtx::MethodArg),\n+                    MethodCall(ref call) => (&call.args[..], UnusedDelimsCtx::MethodArg),\n                     // actual catch-all arm\n                     _ => {\n                         return;"}, {"sha": "dbcfb390333100ae34ce0be134cd5f5d27584e02", "filename": "compiler/rustc_parse/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2FCargo.toml?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -7,15 +7,16 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.0\"\n-tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_errors = { path = \"../rustc_errors\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\"\n unicode-normalization = \"0.1.11\"\n unicode-width = \"0.1.4\""}, {"sha": "350b270cc3dfee287c4ac8957e439b3f2165a67c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -18,6 +18,7 @@ use crate::errors::{\n };\n \n use crate::lexer::UnmatchedBrace;\n+use crate::parser;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Lit, LitKind, TokenKind};\n@@ -37,11 +38,10 @@ use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n-use std::ops::{Deref, DerefMut};\n-\n use std::mem::take;\n-\n-use crate::parser;\n+use std::ops::{Deref, DerefMut};\n+use thin_vec::{thin_vec, ThinVec};\n+use tracing::{debug, trace};\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -65,15 +65,15 @@ pub(super) fn dummy_arg(ident: Ident) -> Param {\n pub(super) trait RecoverQPath: Sized + 'static {\n     const PATH_STYLE: PathStyle = PathStyle::Expr;\n     fn to_ty(&self) -> Option<P<Ty>>;\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self;\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self;\n }\n \n impl RecoverQPath for Ty {\n     const PATH_STYLE: PathStyle = PathStyle::Type;\n     fn to_ty(&self) -> Option<P<Ty>> {\n         Some(P(self.clone()))\n     }\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self {\n         Self {\n             span: path.span,\n             kind: TyKind::Path(qself, path),\n@@ -87,7 +87,7 @@ impl RecoverQPath for Pat {\n     fn to_ty(&self) -> Option<P<Ty>> {\n         self.to_ty()\n     }\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self {\n         Self {\n             span: path.span,\n             kind: PatKind::Path(qself, path),\n@@ -101,7 +101,7 @@ impl RecoverQPath for Expr {\n     fn to_ty(&self) -> Option<P<Ty>> {\n         self.to_ty()\n     }\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self {\n         Self {\n             span: path.span,\n             kind: ExprKind::Path(qself, path),\n@@ -638,8 +638,11 @@ impl<'a> Parser<'a> {\n             //     field: value,\n             // }\n             let mut snapshot = self.create_snapshot_for_diagnostic();\n-            let path =\n-                Path { segments: vec![], span: self.prev_token.span.shrink_to_lo(), tokens: None };\n+            let path = Path {\n+                segments: ThinVec::new(),\n+                span: self.prev_token.span.shrink_to_lo(),\n+                tokens: None,\n+            };\n             let struct_expr = snapshot.parse_struct_expr(None, path, false);\n             let block_tail = self.parse_block_tail(lo, s, AttemptLocalParseRecovery::No);\n             return Some(match (struct_expr, block_tail) {\n@@ -1426,7 +1429,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<T>> {\n         self.expect(&token::ModSep)?;\n \n-        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP, tokens: None };\n+        let mut path = ast::Path { segments: ThinVec::new(), span: DUMMY_SP, tokens: None };\n         self.parse_path_segments(&mut path.segments, T::PATH_STYLE, None)?;\n         path.span = ty_span.to(self.prev_token.span);\n \n@@ -1437,7 +1440,7 @@ impl<'a> Parser<'a> {\n         });\n \n         let path_span = ty_span.shrink_to_hi(); // Use an empty path since `position == 0`.\n-        Ok(P(T::recovered(Some(QSelf { ty, path_span, position: 0 }), path)))\n+        Ok(P(T::recovered(Some(P(QSelf { ty, path_span, position: 0 })), path)))\n     }\n \n     pub fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n@@ -2434,7 +2437,7 @@ impl<'a> Parser<'a> {\n                                             None,\n                                             Path {\n                                                 span: new_span,\n-                                                segments: vec![\n+                                                segments: thin_vec![\n                                                     PathSegment::from_ident(*old_ident),\n                                                     PathSegment::from_ident(*ident),\n                                                 ],"}, {"sha": "413c58f1bffd5a5bf0f1c951e2f6dcc215c489d2", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -840,7 +840,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"`?`\",\n                     ExprKind::Field(_, _) => \"a field access\",\n-                    ExprKind::MethodCall(_, _, _, _) => \"a method call\",\n+                    ExprKind::MethodCall(_) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n                     ExprKind::Await(_) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n@@ -1262,24 +1262,32 @@ impl<'a> Parser<'a> {\n         }\n \n         let fn_span_lo = self.token.span;\n-        let mut segment = self.parse_path_segment(PathStyle::Expr, None)?;\n-        self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(Delimiter::Parenthesis)]);\n-        self.check_turbofish_missing_angle_brackets(&mut segment);\n+        let mut seg = self.parse_path_segment(PathStyle::Expr, None)?;\n+        self.check_trailing_angle_brackets(&seg, &[&token::OpenDelim(Delimiter::Parenthesis)]);\n+        self.check_turbofish_missing_angle_brackets(&mut seg);\n \n         if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n             // Method call `expr.f()`\n             let args = self.parse_paren_expr_seq()?;\n             let fn_span = fn_span_lo.to(self.prev_token.span);\n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, self_arg, args, fn_span)))\n+            Ok(self.mk_expr(\n+                span,\n+                ExprKind::MethodCall(Box::new(ast::MethodCall {\n+                    seg,\n+                    receiver: self_arg,\n+                    args,\n+                    span: fn_span,\n+                })),\n+            ))\n         } else {\n             // Field access `expr.f`\n-            if let Some(args) = segment.args {\n+            if let Some(args) = seg.args {\n                 self.sess.emit_err(FieldExpressionWithGeneric(args.span()));\n             }\n \n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::Field(self_arg, segment.ident)))\n+            Ok(self.mk_expr(span, ExprKind::Field(self_arg, seg.ident)))\n         }\n     }\n \n@@ -1498,7 +1506,7 @@ impl<'a> Parser<'a> {\n             });\n             (lo.to(self.prev_token.span), ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(Delimiter::Brace)) &&\n-            let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path) {\n+            let Some(expr) = self.maybe_parse_struct_expr(&qself, &path) {\n                 if qself.is_some() {\n                     self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n                 }\n@@ -2049,9 +2057,9 @@ impl<'a> Parser<'a> {\n         };\n \n         let capture_clause = self.parse_capture_clause()?;\n-        let decl = self.parse_fn_block_decl()?;\n+        let fn_decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_token.span;\n-        let mut body = match decl.output {\n+        let mut body = match fn_decl.output {\n             FnRetTy::Default(_) => {\n                 let restrictions = self.restrictions - Restrictions::STMT_EXPR;\n                 self.parse_expr_res(restrictions, None)?\n@@ -2087,15 +2095,15 @@ impl<'a> Parser<'a> {\n \n         let closure = self.mk_expr(\n             lo.to(body.span),\n-            ExprKind::Closure(\n+            ExprKind::Closure(Box::new(ast::Closure {\n                 binder,\n                 capture_clause,\n                 asyncness,\n                 movability,\n-                decl,\n+                fn_decl,\n                 body,\n-                lo.to(decl_hi),\n-            ),\n+                fn_decl_span: lo.to(decl_hi),\n+            })),\n         );\n \n         // Disable recovery for closure body\n@@ -2800,15 +2808,15 @@ impl<'a> Parser<'a> {\n \n     fn maybe_parse_struct_expr(\n         &mut self,\n-        qself: Option<&ast::QSelf>,\n+        qself: &Option<P<ast::QSelf>>,\n         path: &ast::Path,\n     ) -> Option<PResult<'a, P<Expr>>> {\n         let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n         if struct_allowed || self.is_certainly_not_a_block() {\n             if let Err(err) = self.expect(&token::OpenDelim(Delimiter::Brace)) {\n                 return Some(Err(err));\n             }\n-            let expr = self.parse_struct_expr(qself.cloned(), path.clone(), true);\n+            let expr = self.parse_struct_expr(qself.clone(), path.clone(), true);\n             if let (Ok(expr), false) = (&expr, struct_allowed) {\n                 // This is a struct literal, but we don't can't accept them here.\n                 self.sess.emit_err(StructLiteralNotAllowedHere {\n@@ -2939,7 +2947,7 @@ impl<'a> Parser<'a> {\n     /// Precondition: already parsed the '{'.\n     pub(super) fn parse_struct_expr(\n         &mut self,\n-        qself: Option<ast::QSelf>,\n+        qself: Option<P<ast::QSelf>>,\n         pth: ast::Path,\n         recover: bool,\n     ) -> PResult<'a, P<Expr>> {"}, {"sha": "e5f58ca38946334116dcd58fe031ef3c4dddcbfd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -3,7 +3,6 @@ use crate::errors::{DocCommentDoesNotDocumentAnything, UseEmptyBlockNotSemi};\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n-\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -22,9 +21,10 @@ use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n-\n use std::convert::TryFrom;\n use std::mem;\n+use thin_vec::ThinVec;\n+use tracing::debug;\n \n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n@@ -972,7 +972,8 @@ impl<'a> Parser<'a> {\n     fn parse_use_tree(&mut self) -> PResult<'a, UseTree> {\n         let lo = self.token.span;\n \n-        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo(), tokens: None };\n+        let mut prefix =\n+            ast::Path { segments: ThinVec::new(), span: lo.shrink_to_lo(), tokens: None };\n         let kind = if self.check(&token::OpenDelim(Delimiter::Brace))\n             || self.check(&token::BinOp(token::Star))\n             || self.is_import_coupler()"}, {"sha": "0e202645a39b85a5e82a296345e7a23ea785d0fb", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -889,7 +889,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a struct (\"record\") pattern (e.g. `Foo { ... }` or `Foo::Bar { ... }`).\n-    fn parse_pat_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n+    fn parse_pat_struct(&mut self, qself: Option<P<QSelf>>, path: Path) -> PResult<'a, PatKind> {\n         if qself.is_some() {\n             // Feature gate the use of qualified paths in patterns\n             self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n@@ -906,7 +906,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse tuple struct or tuple variant pattern (e.g. `Foo(...)` or `Foo::Bar(...)`).\n-    fn parse_pat_tuple_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n+    fn parse_pat_tuple_struct(\n+        &mut self,\n+        qself: Option<P<QSelf>>,\n+        path: Path,\n+    ) -> PResult<'a, PatKind> {\n         let (fields, _) = self.parse_paren_comma_seq(|p| {\n             p.parse_pat_allow_top_alt(\n                 None,"}, {"sha": "2d432e3f5bd65500b5ab8279efb4bd9298eaef62", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -11,8 +11,9 @@ use rustc_ast::{\n use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n-\n use std::mem;\n+use thin_vec::ThinVec;\n+use tracing::debug;\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -48,7 +49,7 @@ impl<'a> Parser<'a> {\n     /// `<T as U>::a`\n     /// `<T as U>::F::a<S>` (without disambiguator)\n     /// `<T as U>::F::a::<S>` (with disambiguator)\n-    pub(super) fn parse_qpath(&mut self, style: PathStyle) -> PResult<'a, (QSelf, Path)> {\n+    pub(super) fn parse_qpath(&mut self, style: PathStyle) -> PResult<'a, (P<QSelf>, Path)> {\n         let lo = self.prev_token.span;\n         let ty = self.parse_ty()?;\n \n@@ -63,7 +64,7 @@ impl<'a> Parser<'a> {\n             path_span = path_lo.to(self.prev_token.span);\n         } else {\n             path_span = self.token.span.to(self.token.span);\n-            path = ast::Path { segments: Vec::new(), span: path_span, tokens: None };\n+            path = ast::Path { segments: ThinVec::new(), span: path_span, tokens: None };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -77,7 +78,7 @@ impl<'a> Parser<'a> {\n             self.expect(&token::ModSep)?;\n         }\n \n-        let qself = QSelf { ty, path_span, position: path.segments.len() };\n+        let qself = P(QSelf { ty, path_span, position: path.segments.len() });\n         self.parse_path_segments(&mut path.segments, style, None)?;\n \n         Ok((\n@@ -179,7 +180,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let lo = self.token.span;\n-        let mut segments = Vec::new();\n+        let mut segments = ThinVec::new();\n         let mod_sep_ctxt = self.token.span.ctxt();\n         if self.eat(&token::ModSep) {\n             segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n@@ -191,7 +192,7 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_path_segments(\n         &mut self,\n-        segments: &mut Vec<PathSegment>,\n+        segments: &mut ThinVec<PathSegment>,\n         style: PathStyle,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, ()> {"}, {"sha": "b97f4560c37b3fee08c6808b524670fc0beed45b", "filename": "compiler/rustc_resolve/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2FCargo.toml?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -7,10 +7,8 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.2.1\"\n-tracing = \"0.1\"\n-rustc_ast = { path = \"../rustc_ast\" }\n rustc_arena = { path = \"../rustc_arena\" }\n-rustc_middle = { path = \"../rustc_middle\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n@@ -20,7 +18,10 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "b1cee06849dd98f753c1904498bf73bd9190f64a", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -262,11 +262,11 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         let parent_def = match expr.kind {\n             ExprKind::MacCall(..) => return self.visit_macro_invoc(expr.id),\n-            ExprKind::Closure(_, _, asyncness, ..) => {\n+            ExprKind::Closure(ref closure) => {\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n                 let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);\n-                match asyncness {\n+                match closure.asyncness {\n                     Async::Yes { closure_id, .. } => {\n                         self.create_def(closure_id, DefPathData::ClosureExpr, expr.span)\n                     }"}, {"sha": "5482e1ccefa1d09847d2258d3ab22985322313a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -25,6 +25,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, SyntaxContext};\n+use thin_vec::ThinVec;\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};\n@@ -1295,7 +1296,7 @@ impl<'a> Resolver<'a> {\n     {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n-        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), true)];\n+        let mut worklist = vec![(start_module, ThinVec::<ast::PathSegment>::new(), true)];\n         let mut worklist_via_import = vec![];\n \n         while let Some((in_module, path_segments, accessible)) = match worklist.pop() {"}, {"sha": "1b0879cf79ef7c376e8873bd1e001aa164ef28b8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -648,7 +648,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 self.diagnostic_metadata.current_type_path = Some(ty);\n-                self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n+                self.smart_resolve_path(ty.id, &qself, path, PathSource::Type);\n \n                 // Check whether we should interpret this as a bare trait object.\n                 if qself.is_none()\n@@ -749,7 +749,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 this.visit_generic_params(&tref.bound_generic_params, false);\n                 this.smart_resolve_path(\n                     tref.trait_ref.ref_id,\n-                    None,\n+                    &None,\n                     &tref.trait_ref.path,\n                     PathSource::Trait(AliasPossibility::Maybe),\n                 );\n@@ -978,7 +978,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                                 |this| {\n                                     this.smart_resolve_path(\n                                         ty.id,\n-                                        qself.as_ref(),\n+                                        qself,\n                                         path,\n                                         PathSource::Expr(None),\n                                     );\n@@ -1138,12 +1138,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {\n             this.with_rib(TypeNS, InlineAsmSymRibKind, |this| {\n                 this.with_label_rib(InlineAsmSymRibKind, |this| {\n-                    this.smart_resolve_path(\n-                        sym.id,\n-                        sym.qself.as_ref(),\n-                        &sym.path,\n-                        PathSource::Expr(None),\n-                    );\n+                    this.smart_resolve_path(sym.id, &sym.qself, &sym.path, PathSource::Expr(None));\n                     visit::walk_inline_asm_sym(this, sym);\n                 });\n             })\n@@ -2571,7 +2566,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             self.diagnostic_metadata.currently_processing_impl_trait =\n                 Some((trait_ref.clone(), self_type.clone()));\n             let res = self.smart_resolve_path_fragment(\n-                None,\n+                &None,\n                 &path,\n                 PathSource::Trait(AliasPossibility::No),\n                 Finalize::new(trait_ref.ref_id, trait_ref.path.span),\n@@ -3094,7 +3089,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 PatKind::TupleStruct(ref qself, ref path, ref sub_patterns) => {\n                     self.smart_resolve_path(\n                         pat.id,\n-                        qself.as_ref(),\n+                        qself,\n                         path,\n                         PathSource::TupleStruct(\n                             pat.span,\n@@ -3103,10 +3098,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     );\n                 }\n                 PatKind::Path(ref qself, ref path) => {\n-                    self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);\n+                    self.smart_resolve_path(pat.id, qself, path, PathSource::Pat);\n                 }\n                 PatKind::Struct(ref qself, ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Struct);\n+                    self.smart_resolve_path(pat.id, qself, path, PathSource::Struct);\n                 }\n                 PatKind::Or(ref ps) => {\n                     // Add a new set of bindings to the stack. `Or` here records that when a\n@@ -3299,7 +3294,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn smart_resolve_path(\n         &mut self,\n         id: NodeId,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &Path,\n         source: PathSource<'ast>,\n     ) {\n@@ -3313,7 +3308,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     fn smart_resolve_path_fragment(\n         &mut self,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         source: PathSource<'ast>,\n         finalize: Finalize,\n@@ -3534,7 +3529,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     // Resolve in alternative namespaces if resolution in the primary namespace fails.\n     fn resolve_qpath_anywhere(\n         &mut self,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         primary_ns: Namespace,\n         span: Span,\n@@ -3578,7 +3573,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     /// Handles paths that may refer to associated items.\n     fn resolve_qpath(\n         &mut self,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         ns: Namespace,\n         finalize: Finalize,\n@@ -3608,7 +3603,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // but with `qself` set to `None`.\n             let ns = if qself.position + 1 == path.len() { ns } else { TypeNS };\n             let partial_res = self.smart_resolve_path_fragment(\n-                None,\n+                &None,\n                 &path[..=qself.position],\n                 PathSource::TraitItem(ns),\n                 Finalize::with_root_span(finalize.node_id, finalize.path_span, qself.path_span),\n@@ -3791,12 +3786,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         // Next, resolve the node.\n         match expr.kind {\n             ExprKind::Path(ref qself, ref path) => {\n-                self.smart_resolve_path(expr.id, qself.as_ref(), path, PathSource::Expr(parent));\n+                self.smart_resolve_path(expr.id, qself, path, PathSource::Expr(parent));\n                 visit::walk_expr(self, expr);\n             }\n \n             ExprKind::Struct(ref se) => {\n-                self.smart_resolve_path(expr.id, se.qself.as_ref(), &se.path, PathSource::Struct);\n+                self.smart_resolve_path(expr.id, &se.qself, &se.path, PathSource::Struct);\n                 visit::walk_expr(self, expr);\n             }\n \n@@ -3866,12 +3861,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _) => {\n+            ExprKind::MethodCall(box MethodCall { ref seg, ref receiver, ref args, .. }) => {\n                 self.resolve_expr(receiver, Some(expr));\n-                for argument in arguments {\n-                    self.resolve_expr(argument, None);\n+                for arg in args {\n+                    self.resolve_expr(arg, None);\n                 }\n-                self.visit_path_segment(segment);\n+                self.visit_path_segment(seg);\n             }\n \n             ExprKind::Call(ref callee, ref arguments) => {\n@@ -3913,7 +3908,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(_, _, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n+            ExprKind::Closure(box ast::Closure {\n+                asyncness: Async::Yes { .. },\n+                ref fn_decl,\n+                ref body,\n+                ..\n+            }) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n                     this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n                         // Resolve arguments:\n@@ -3933,7 +3933,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n             // For closures, ClosureOrAsyncRibKind is added in visit_fn\n-            ExprKind::Closure(ClosureBinder::For { ref generic_params, span }, ..) => {\n+            ExprKind::Closure(box ast::Closure {\n+                binder: ClosureBinder::For { ref generic_params, span },\n+                ..\n+            }) => {\n                 self.with_generic_param_rib(\n                     &generic_params,\n                     NormalRibKind,\n@@ -3990,9 +3993,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 let traits = self.traits_in_scope(ident, ValueNS);\n                 self.r.trait_map.insert(expr.id, traits);\n             }\n-            ExprKind::MethodCall(ref segment, ..) => {\n+            ExprKind::MethodCall(ref call) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\", expr.id);\n-                let traits = self.traits_in_scope(segment.ident, ValueNS);\n+                let traits = self.traits_in_scope(call.seg.ident, ValueNS);\n                 self.r.trait_map.insert(expr.id, traits);\n             }\n             _ => {"}, {"sha": "e0c927dd1e7602ac12e1550cbddb892359e86109", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -8,7 +8,7 @@ use crate::{PathResult, PathSource, Segment};\n use rustc_ast::visit::{FnCtxt, FnKind, LifetimeCtxt};\n use rustc_ast::{\n     self as ast, AssocItemKind, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind,\n-    NodeId, Path, Ty, TyKind, DUMMY_NODE_ID,\n+    MethodCall, NodeId, Path, Ty, TyKind, DUMMY_NODE_ID,\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n@@ -33,6 +33,8 @@ use rustc_span::{BytePos, Span};\n use std::iter;\n use std::ops::Deref;\n \n+use thin_vec::ThinVec;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure.\n@@ -78,7 +80,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     let path_len = suggestion.path.segments.len();\n     let enum_path = ast::Path {\n         span: suggestion.path.span,\n-        segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+        segments: suggestion.path.segments[0..path_len - 1].iter().cloned().collect(),\n         tokens: None,\n     };\n     let enum_path_string = path_names_to_string(&enum_path);\n@@ -1022,11 +1024,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             };\n \n         // Confirm that the target is an associated type.\n-        let (ty, position, path) = if let ast::TyKind::Path(\n-            Some(ast::QSelf { ty, position, .. }),\n-            path,\n-        ) = &bounded_ty.kind\n-        {\n+        let (ty, position, path) = if let ast::TyKind::Path(Some(qself), path) = &bounded_ty.kind {\n             // use this to verify that ident is a type param.\n             let Some(partial_res) = self.r.partial_res_map.get(&bounded_ty.id) else {\n                 return false;\n@@ -1037,7 +1035,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             ) {\n                 return false;\n             }\n-            (ty, position, path)\n+            (&qself.ty, qself.position, path)\n         } else {\n             return false;\n         };\n@@ -1073,12 +1071,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                     .source_map()\n                                     .span_to_snippet(ty.span) // Account for `<&'a T as Foo>::Bar`.\n                                     .unwrap_or_else(|_| constrain_ident.to_string()),\n-                                path.segments[..*position]\n+                                path.segments[..position]\n                                     .iter()\n                                     .map(|segment| path_segment_to_string(segment))\n                                     .collect::<Vec<_>>()\n                                     .join(\"::\"),\n-                                path.segments[*position..]\n+                                path.segments[position..]\n                                     .iter()\n                                     .map(|segment| path_segment_to_string(segment))\n                                     .collect::<Vec<_>>()\n@@ -1170,7 +1168,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n             let (lhs_span, rhs_span) = match &expr.kind {\n                 ExprKind::Field(base, ident) => (base.span, ident.span),\n-                ExprKind::MethodCall(_, receiver, _, span) => (receiver.span, *span),\n+                ExprKind::MethodCall(box MethodCall { receiver, span, .. }) => {\n+                    (receiver.span, *span)\n+                }\n                 _ => return false,\n             };\n \n@@ -1833,7 +1833,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {\n         let mut result = None;\n         let mut seen_modules = FxHashSet::default();\n-        let mut worklist = vec![(self.r.graph_root, Vec::new())];\n+        let mut worklist = vec![(self.r.graph_root, ThinVec::new())];\n \n         while let Some((in_module, path_segments)) = worklist.pop() {\n             // abort if the module is already found"}, {"sha": "d6dc179da7f9897b0112a5d23abb3f524bad9dc0", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -25,6 +25,7 @@ extern crate rustc_data_structures;\n extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n+extern crate thin_vec;\n \n use rustc_ast::mut_visit::{self, visit_clobber, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -35,6 +36,7 @@ use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::source_map::{FileName, Spanned, DUMMY_SP};\n use rustc_span::symbol::Ident;\n+use thin_vec::thin_vec;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n@@ -51,7 +53,7 @@ fn expr(kind: ExprKind) -> P<Expr> {\n \n fn make_x() -> P<Expr> {\n     let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n-    let path = Path { segments: vec![seg], span: DUMMY_SP, tokens: None };\n+    let path = Path { segments: thin_vec![seg], span: DUMMY_SP, tokens: None };\n     expr(ExprKind::Path(None, path))\n }\n \n@@ -73,11 +75,15 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             2 => {\n                 let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::MethodCall(seg.clone(), e, vec![make_x()], DUMMY_SP))\n-                });\n+                    g(ExprKind::MethodCall(Box::new(MethodCall {\n+                        seg: seg.clone(), receiver: e, args: vec![make_x()], span: DUMMY_SP\n+                    }))\n+                )});\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::MethodCall(seg.clone(), make_x(), vec![e], DUMMY_SP))\n-                });\n+                    g(ExprKind::MethodCall(Box::new(MethodCall {\n+                        seg: seg.clone(), receiver: make_x(), args: vec![e], span: DUMMY_SP\n+                    }))\n+                )});\n             }\n             3..=8 => {\n                 let op = Spanned {\n@@ -112,15 +118,15 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             11 => {\n                 let decl = P(FnDecl { inputs: vec![], output: FnRetTy::Default(DUMMY_SP) });\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::Closure(\n-                        ClosureBinder::NotPresent,\n-                        CaptureBy::Value,\n-                        Async::No,\n-                        Movability::Movable,\n-                        decl.clone(),\n-                        e,\n-                        DUMMY_SP,\n-                    ))\n+                    g(ExprKind::Closure(Box::new(Closure {\n+                        binder: ClosureBinder::NotPresent,\n+                        capture_clause: CaptureBy::Value,\n+                        asyncness: Async::No,\n+                        movability: Movability::Movable,\n+                        fn_decl: decl.clone(),\n+                        body: e,\n+                        fn_decl_span: DUMMY_SP,\n+                    })))\n                 });\n             }\n             12 => {"}, {"sha": "297245f0198b5e0d7a21ca7fc2651f457372fb97", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 102, "deletions": 102, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -2,118 +2,118 @@ ast-stats-1 PRE EXPANSION AST STATS\n ast-stats-1 Name                Accumulated Size         Count     Item Size\n ast-stats-1 ----------------------------------------------------------------\n ast-stats-1 ExprField                 48 ( 0.6%)             1            48\n-ast-stats-1 Crate                     56 ( 0.7%)             1            56\n-ast-stats-1 Attribute                 64 ( 0.8%)             2            32\n+ast-stats-1 Crate                     56 ( 0.8%)             1            56\n+ast-stats-1 Attribute                 64 ( 0.9%)             2            32\n ast-stats-1 - Normal                    32 ( 0.4%)             1\n ast-stats-1 - DocComment                32 ( 0.4%)             1\n-ast-stats-1 GenericArgs               64 ( 0.8%)             1            64\n-ast-stats-1 - AngleBracketed            64 ( 0.8%)             1\n-ast-stats-1 Local                     72 ( 0.9%)             1            72\n-ast-stats-1 WherePredicate            72 ( 0.9%)             1            72\n-ast-stats-1 - BoundPredicate            72 ( 0.9%)             1\n-ast-stats-1 Arm                       96 ( 1.1%)             2            48\n-ast-stats-1 ForeignItem               96 ( 1.1%)             1            96\n-ast-stats-1 - Fn                        96 ( 1.1%)             1\n-ast-stats-1 FieldDef                 160 ( 1.9%)             2            80\n-ast-stats-1 Stmt                     160 ( 1.9%)             5            32\n+ast-stats-1 GenericArgs               64 ( 0.9%)             1            64\n+ast-stats-1 - AngleBracketed            64 ( 0.9%)             1\n+ast-stats-1 Local                     72 ( 1.0%)             1            72\n+ast-stats-1 WherePredicate            72 ( 1.0%)             1            72\n+ast-stats-1 - BoundPredicate            72 ( 1.0%)             1\n+ast-stats-1 Arm                       96 ( 1.3%)             2            48\n+ast-stats-1 ForeignItem               96 ( 1.3%)             1            96\n+ast-stats-1 - Fn                        96 ( 1.3%)             1\n+ast-stats-1 FieldDef                 160 ( 2.2%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.2%)             5            32\n ast-stats-1 - Local                     32 ( 0.4%)             1\n ast-stats-1 - MacCall                   32 ( 0.4%)             1\n-ast-stats-1 - Expr                      96 ( 1.1%)             3\n-ast-stats-1 Param                    160 ( 1.9%)             4            40\n-ast-stats-1 FnDecl                   200 ( 2.4%)             5            40\n-ast-stats-1 Variant                  240 ( 2.9%)             2           120\n-ast-stats-1 Block                    288 ( 3.4%)             6            48\n-ast-stats-1 GenericBound             352 ( 4.2%)             4            88\n-ast-stats-1 - Trait                    352 ( 4.2%)             4\n-ast-stats-1 AssocItem                416 ( 4.9%)             4           104\n-ast-stats-1 - Type                     208 ( 2.5%)             2\n-ast-stats-1 - Fn                       208 ( 2.5%)             2\n-ast-stats-1 GenericParam             480 ( 5.7%)             5            96\n-ast-stats-1 PathSegment              720 ( 8.6%)            30            24\n-ast-stats-1 Expr                     832 ( 9.9%)             8           104\n-ast-stats-1 - Path                     104 ( 1.2%)             1\n-ast-stats-1 - Match                    104 ( 1.2%)             1\n-ast-stats-1 - Struct                   104 ( 1.2%)             1\n-ast-stats-1 - Lit                      208 ( 2.5%)             2\n-ast-stats-1 - Block                    312 ( 3.7%)             3\n-ast-stats-1 Pat                      840 (10.0%)             7           120\n-ast-stats-1 - Struct                   120 ( 1.4%)             1\n-ast-stats-1 - Wild                     120 ( 1.4%)             1\n-ast-stats-1 - Ident                    600 ( 7.1%)             5\n-ast-stats-1 Ty                     1_344 (16.0%)            14            96\n-ast-stats-1 - Rptr                      96 ( 1.1%)             1\n-ast-stats-1 - Ptr                       96 ( 1.1%)             1\n-ast-stats-1 - ImplicitSelf             192 ( 2.3%)             2\n-ast-stats-1 - Path                     960 (11.4%)            10\n-ast-stats-1 Item                   1_656 (19.7%)             9           184\n-ast-stats-1 - Trait                    184 ( 2.2%)             1\n-ast-stats-1 - Enum                     184 ( 2.2%)             1\n-ast-stats-1 - ForeignMod               184 ( 2.2%)             1\n-ast-stats-1 - Impl                     184 ( 2.2%)             1\n-ast-stats-1 - Fn                       368 ( 4.4%)             2\n-ast-stats-1 - Use                      552 ( 6.6%)             3\n+ast-stats-1 - Expr                      96 ( 1.3%)             3\n+ast-stats-1 Param                    160 ( 2.2%)             4            40\n+ast-stats-1 FnDecl                   200 ( 2.7%)             5            40\n+ast-stats-1 Variant                  240 ( 3.2%)             2           120\n+ast-stats-1 GenericBound             288 ( 3.9%)             4            72\n+ast-stats-1 - Trait                    288 ( 3.9%)             4\n+ast-stats-1 Block                    288 ( 3.9%)             6            48\n+ast-stats-1 AssocItem                416 ( 5.6%)             4           104\n+ast-stats-1 - Type                     208 ( 2.8%)             2\n+ast-stats-1 - Fn                       208 ( 2.8%)             2\n+ast-stats-1 GenericParam             480 ( 6.5%)             5            96\n+ast-stats-1 Expr                     576 ( 7.8%)             8            72\n+ast-stats-1 - Path                      72 ( 1.0%)             1\n+ast-stats-1 - Match                     72 ( 1.0%)             1\n+ast-stats-1 - Struct                    72 ( 1.0%)             1\n+ast-stats-1 - Lit                      144 ( 1.9%)             2\n+ast-stats-1 - Block                    216 ( 2.9%)             3\n+ast-stats-1 Pat                      616 ( 8.3%)             7            88\n+ast-stats-1 - Struct                    88 ( 1.2%)             1\n+ast-stats-1 - Wild                      88 ( 1.2%)             1\n+ast-stats-1 - Ident                    440 ( 5.9%)             5\n+ast-stats-1 PathSegment              720 ( 9.7%)            30            24\n+ast-stats-1 Ty                       896 (12.1%)            14            64\n+ast-stats-1 - Rptr                      64 ( 0.9%)             1\n+ast-stats-1 - Ptr                       64 ( 0.9%)             1\n+ast-stats-1 - ImplicitSelf             128 ( 1.7%)             2\n+ast-stats-1 - Path                     640 ( 8.6%)            10\n+ast-stats-1 Item                   1_656 (22.3%)             9           184\n+ast-stats-1 - Trait                    184 ( 2.5%)             1\n+ast-stats-1 - Enum                     184 ( 2.5%)             1\n+ast-stats-1 - ForeignMod               184 ( 2.5%)             1\n+ast-stats-1 - Impl                     184 ( 2.5%)             1\n+ast-stats-1 - Fn                       368 ( 5.0%)             2\n+ast-stats-1 - Use                      552 ( 7.4%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  8_416\n+ast-stats-1 Total                  7_424\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 ExprField                 48 ( 0.5%)             1            48\n-ast-stats-2 Crate                     56 ( 0.6%)             1            56\n-ast-stats-2 GenericArgs               64 ( 0.7%)             1            64\n-ast-stats-2 - AngleBracketed            64 ( 0.7%)             1\n-ast-stats-2 Local                     72 ( 0.8%)             1            72\n-ast-stats-2 WherePredicate            72 ( 0.8%)             1            72\n-ast-stats-2 - BoundPredicate            72 ( 0.8%)             1\n-ast-stats-2 Arm                       96 ( 1.0%)             2            48\n-ast-stats-2 ForeignItem               96 ( 1.0%)             1            96\n-ast-stats-2 - Fn                        96 ( 1.0%)             1\n-ast-stats-2 InlineAsm                120 ( 1.3%)             1           120\n-ast-stats-2 Attribute                128 ( 1.4%)             4            32\n-ast-stats-2 - DocComment                32 ( 0.3%)             1\n-ast-stats-2 - Normal                    96 ( 1.0%)             3\n-ast-stats-2 FieldDef                 160 ( 1.7%)             2            80\n-ast-stats-2 Stmt                     160 ( 1.7%)             5            32\n-ast-stats-2 - Local                     32 ( 0.3%)             1\n-ast-stats-2 - Semi                      32 ( 0.3%)             1\n-ast-stats-2 - Expr                      96 ( 1.0%)             3\n-ast-stats-2 Param                    160 ( 1.7%)             4            40\n-ast-stats-2 FnDecl                   200 ( 2.2%)             5            40\n-ast-stats-2 Variant                  240 ( 2.6%)             2           120\n-ast-stats-2 Block                    288 ( 3.1%)             6            48\n-ast-stats-2 GenericBound             352 ( 3.8%)             4            88\n-ast-stats-2 - Trait                    352 ( 3.8%)             4\n-ast-stats-2 AssocItem                416 ( 4.5%)             4           104\n-ast-stats-2 - Type                     208 ( 2.3%)             2\n-ast-stats-2 - Fn                       208 ( 2.3%)             2\n-ast-stats-2 GenericParam             480 ( 5.2%)             5            96\n-ast-stats-2 PathSegment              792 ( 8.7%)            33            24\n-ast-stats-2 Pat                      840 ( 9.2%)             7           120\n-ast-stats-2 - Struct                   120 ( 1.3%)             1\n-ast-stats-2 - Wild                     120 ( 1.3%)             1\n-ast-stats-2 - Ident                    600 ( 6.6%)             5\n-ast-stats-2 Expr                     936 (10.2%)             9           104\n-ast-stats-2 - Path                     104 ( 1.1%)             1\n-ast-stats-2 - Match                    104 ( 1.1%)             1\n-ast-stats-2 - Struct                   104 ( 1.1%)             1\n-ast-stats-2 - InlineAsm                104 ( 1.1%)             1\n-ast-stats-2 - Lit                      208 ( 2.3%)             2\n-ast-stats-2 - Block                    312 ( 3.4%)             3\n-ast-stats-2 Ty                     1_344 (14.7%)            14            96\n-ast-stats-2 - Rptr                      96 ( 1.0%)             1\n-ast-stats-2 - Ptr                       96 ( 1.0%)             1\n-ast-stats-2 - ImplicitSelf             192 ( 2.1%)             2\n-ast-stats-2 - Path                     960 (10.5%)            10\n-ast-stats-2 Item                   2_024 (22.1%)            11           184\n-ast-stats-2 - Trait                    184 ( 2.0%)             1\n-ast-stats-2 - Enum                     184 ( 2.0%)             1\n-ast-stats-2 - ExternCrate              184 ( 2.0%)             1\n-ast-stats-2 - ForeignMod               184 ( 2.0%)             1\n-ast-stats-2 - Impl                     184 ( 2.0%)             1\n-ast-stats-2 - Fn                       368 ( 4.0%)             2\n-ast-stats-2 - Use                      736 ( 8.0%)             4\n+ast-stats-2 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-2 Crate                     56 ( 0.7%)             1            56\n+ast-stats-2 GenericArgs               64 ( 0.8%)             1            64\n+ast-stats-2 - AngleBracketed            64 ( 0.8%)             1\n+ast-stats-2 Local                     72 ( 0.9%)             1            72\n+ast-stats-2 WherePredicate            72 ( 0.9%)             1            72\n+ast-stats-2 - BoundPredicate            72 ( 0.9%)             1\n+ast-stats-2 Arm                       96 ( 1.2%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.2%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.2%)             1\n+ast-stats-2 InlineAsm                120 ( 1.5%)             1           120\n+ast-stats-2 Attribute                128 ( 1.6%)             4            32\n+ast-stats-2 - DocComment                32 ( 0.4%)             1\n+ast-stats-2 - Normal                    96 ( 1.2%)             3\n+ast-stats-2 FieldDef                 160 ( 2.0%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.0%)             5            32\n+ast-stats-2 - Local                     32 ( 0.4%)             1\n+ast-stats-2 - Semi                      32 ( 0.4%)             1\n+ast-stats-2 - Expr                      96 ( 1.2%)             3\n+ast-stats-2 Param                    160 ( 2.0%)             4            40\n+ast-stats-2 FnDecl                   200 ( 2.5%)             5            40\n+ast-stats-2 Variant                  240 ( 3.0%)             2           120\n+ast-stats-2 GenericBound             288 ( 3.5%)             4            72\n+ast-stats-2 - Trait                    288 ( 3.5%)             4\n+ast-stats-2 Block                    288 ( 3.5%)             6            48\n+ast-stats-2 AssocItem                416 ( 5.1%)             4           104\n+ast-stats-2 - Type                     208 ( 2.6%)             2\n+ast-stats-2 - Fn                       208 ( 2.6%)             2\n+ast-stats-2 GenericParam             480 ( 5.9%)             5            96\n+ast-stats-2 Pat                      616 ( 7.6%)             7            88\n+ast-stats-2 - Struct                    88 ( 1.1%)             1\n+ast-stats-2 - Wild                      88 ( 1.1%)             1\n+ast-stats-2 - Ident                    440 ( 5.4%)             5\n+ast-stats-2 Expr                     648 ( 8.0%)             9            72\n+ast-stats-2 - Path                      72 ( 0.9%)             1\n+ast-stats-2 - Match                     72 ( 0.9%)             1\n+ast-stats-2 - Struct                    72 ( 0.9%)             1\n+ast-stats-2 - InlineAsm                 72 ( 0.9%)             1\n+ast-stats-2 - Lit                      144 ( 1.8%)             2\n+ast-stats-2 - Block                    216 ( 2.7%)             3\n+ast-stats-2 PathSegment              792 ( 9.8%)            33            24\n+ast-stats-2 Ty                       896 (11.0%)            14            64\n+ast-stats-2 - Rptr                      64 ( 0.8%)             1\n+ast-stats-2 - Ptr                       64 ( 0.8%)             1\n+ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n+ast-stats-2 - Path                     640 ( 7.9%)            10\n+ast-stats-2 Item                   2_024 (24.9%)            11           184\n+ast-stats-2 - Trait                    184 ( 2.3%)             1\n+ast-stats-2 - Enum                     184 ( 2.3%)             1\n+ast-stats-2 - ExternCrate              184 ( 2.3%)             1\n+ast-stats-2 - ForeignMod               184 ( 2.3%)             1\n+ast-stats-2 - Impl                     184 ( 2.3%)             1\n+ast-stats-2 - Fn                       368 ( 4.5%)             2\n+ast-stats-2 - Use                      736 ( 9.1%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  9_144\n+ast-stats-2 Total                  8_120\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}, {"sha": "29425b2e5541791db6c485d904a38981abda173b", "filename": "src/tools/clippy/clippy_lints/src/double_parens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -61,10 +61,10 @@ impl EarlyLintPass for DoubleParens {\n                     }\n                 }\n             },\n-            ExprKind::MethodCall(_, _, ref params, _) => {\n-                if let [ref param] = params[..] {\n-                    if let ExprKind::Paren(_) = param.kind {\n-                        span_lint(cx, DOUBLE_PARENS, param.span, msg);\n+            ExprKind::MethodCall(ref call) => {\n+                if let [ref arg] = call.args[..] {\n+                    if let ExprKind::Paren(_) = arg.kind {\n+                        span_lint(cx, DOUBLE_PARENS, arg.span, msg);\n                     }\n                 }\n             },"}, {"sha": "377bddeaa5feabccaa30f4a6e759baf33b152741", "filename": "src/tools/clippy/clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::is_direct_expn_of;\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_ast::ast::{Expr, ExprKind, MethodCall};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -37,8 +37,8 @@ declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path_segment, receiver, _, _) = &expr.kind;\n-            if matches!(path_segment.ident.name, sym::expect | sym::unwrap);\n+            if let ExprKind::MethodCall(box MethodCall { seg, receiver, .. }) = &expr.kind;\n+            if matches!(seg.ident.name, sym::expect | sym::unwrap);\n             if let ExprKind::Call(caller, _) = &receiver.kind;\n             if is_direct_expn_of(caller.span, \"option_env\").is_some();\n             then {"}, {"sha": "057b7e30642ec5bc0edd134d913bef1ec8c537e4", "filename": "src/tools/clippy/clippy_lints/src/precedence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n-use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_ast::ast::{BinOpKind, Expr, ExprKind, MethodCall, UnOp};\n use rustc_ast::token;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -110,11 +110,11 @@ impl EarlyLintPass for Precedence {\n             let mut arg = operand;\n \n             let mut all_odd = true;\n-            while let ExprKind::MethodCall(path_segment, receiver, _, _) = &arg.kind {\n-                let path_segment_str = path_segment.ident.name.as_str();\n+            while let ExprKind::MethodCall(box MethodCall { seg, receiver, .. }) = &arg.kind {\n+                let seg_str = seg.ident.name.as_str();\n                 all_odd &= ALLOWED_ODD_FUNCTIONS\n                     .iter()\n-                    .any(|odd_function| **odd_function == *path_segment_str);\n+                    .any(|odd_function| **odd_function == *seg_str);\n                 arg = receiver;\n             }\n "}, {"sha": "4cbe9597c5393eee7221480dbb487aa6d863ce76", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -69,24 +69,24 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, ref r#async, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(box ast::Closure { ref asyncness, ref fn_decl, ref body, .. }) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n-                visitor.visit_expr(block);\n+                visitor.visit_expr(body);\n                 if !visitor.found_return {\n                     span_lint_and_then(\n                         cx,\n                         REDUNDANT_CLOSURE_CALL,\n                         expr.span,\n                         \"try not to call a closure in the expression where it is declared\",\n                         |diag| {\n-                            if decl.inputs.is_empty() {\n+                            if fn_decl.inputs.is_empty() {\n                                 let app = Applicability::MachineApplicable;\n-                                let mut hint = Sugg::ast(cx, block, \"..\");\n+                                let mut hint = Sugg::ast(cx, body, \"..\");\n \n-                                if r#async.is_async() {\n+                                if asyncness.is_async() {\n                                     // `async x` is a syntax error, so it becomes `async { x }`\n-                                    if !matches!(block.kind, ast::ExprKind::Block(_, _)) {\n+                                    if !matches!(body.kind, ast::ExprKind::Block(_, _)) {\n                                         hint = hint.blockify();\n                                     }\n "}, {"sha": "78e83880e1a6121020f0d6e0d724fee457fe46e0", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -580,7 +580,7 @@ fn ident_difference_expr_with_base_location(\n         | (Await(_), Await(_))\n         | (Async(_, _, _), Async(_, _, _))\n         | (Block(_, _), Block(_, _))\n-        | (Closure(_, _, _, _, _, _, _), Closure(_, _, _, _, _, _, _))\n+        | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))\n         | (Loop(_, _), Loop(_, _))\n         | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))\n@@ -593,7 +593,7 @@ fn ident_difference_expr_with_base_location(\n         | (Unary(_, _), Unary(_, _))\n         | (Binary(_, _, _), Binary(_, _, _))\n         | (Tup(_), Tup(_))\n-        | (MethodCall(_, _, _, _), MethodCall(_, _, _, _))\n+        | (MethodCall(_), MethodCall(_))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n         | (Array(_), Array(_))"}, {"sha": "bb6fb38e9690e32a3e472c49f1462bc38fa28d1b", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -292,7 +292,7 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n /// So when we fixate on some `ident_k: pat_k`, we try to find `ident_k` in the other pattern\n /// and check that all `fp_i` where `i \u2208 ((0...n) \\ k)` between two patterns are equal.\n fn extend_with_struct_pat(\n-    qself1: &Option<ast::QSelf>,\n+    qself1: &Option<P<ast::QSelf>>,\n     path1: &ast::Path,\n     fps1: &mut [ast::PatField],\n     rest1: bool,"}, {"sha": "5ab351bc29ca0b8b1ba653287f1933cc70d99217", "filename": "src/tools/clippy/clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_ast::ast::{Expr, ExprKind, MethodCall};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -30,8 +30,8 @@ declare_clippy_lint! {\n declare_lint_pass!(UnusedRounding => [UNUSED_ROUNDING]);\n \n fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n-    if let ExprKind::MethodCall(name_ident, receiver, _, _) = &expr.kind\n-        && let method_name = name_ident.ident.name.as_str()\n+    if let ExprKind::MethodCall(box MethodCall { seg, receiver, .. }) = &expr.kind\n+        && let method_name = seg.ident.name.as_str()\n         && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n         && let ExprKind::Lit(token_lit) = &receiver.kind\n         && token_lit.is_semantic_float() {"}, {"sha": "23aed4b5ba2f40f2c675009c338736431a5fdd1e", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -75,11 +75,11 @@ pub fn eq_field_pat(l: &PatField, r: &PatField) -> bool {\n         && over(&l.attrs, &r.attrs, eq_attr)\n }\n \n-pub fn eq_qself(l: &QSelf, r: &QSelf) -> bool {\n+pub fn eq_qself(l: &P<QSelf>, r: &P<QSelf>) -> bool {\n     l.position == r.position && eq_ty(&l.ty, &r.ty)\n }\n \n-pub fn eq_maybe_qself(l: &Option<QSelf>, r: &Option<QSelf>) -> bool {\n+pub fn eq_maybe_qself(l: &Option<P<QSelf>>, r: &Option<P<QSelf>>) -> bool {\n     match (l, r) {\n         (Some(l), Some(r)) => eq_qself(l, r),\n         (None, None) => true,\n@@ -147,8 +147,11 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Array(l), Array(r)) | (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),\n         (Call(lc, la), Call(rc, ra)) => eq_expr(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n-        (MethodCall(lc, ls, la, _), MethodCall(rc, rs, ra, _)) => {\n-            eq_path_seg(lc, rc) && eq_expr(ls, rs) && over(la, ra, |l, r| eq_expr(l, r))\n+        (\n+            MethodCall(box ast::MethodCall { seg: ls, receiver: lr, args: la, .. }),\n+            MethodCall(box ast::MethodCall { seg: rs, receiver: rr, args: ra, .. })\n+        ) => {\n+            eq_path_seg(ls, rs) && eq_expr(lr, rr) && over(la, ra, |l, r| eq_expr(l, r))\n         },\n         (Binary(lo, ll, lr), Binary(ro, rl, rr)) => lo.node == ro.node && eq_expr(ll, rl) && eq_expr(lr, rr),\n         (Unary(lo, l), Unary(ro, r)) => mem::discriminant(lo) == mem::discriminant(ro) && eq_expr(l, r),\n@@ -170,7 +173,26 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AssignOp(lo, lp, lv), AssignOp(ro, rp, rv)) => lo.node == ro.node && eq_expr(lp, rp) && eq_expr(lv, rv),\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n         (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n-        (Closure(lb, lc, la, lm, lf, le, _), Closure(rb, rc, ra, rm, rf, re, _)) => {\n+        (\n+            Closure(box ast::Closure {\n+                binder: lb,\n+                capture_clause: lc,\n+                asyncness: la,\n+                movability: lm,\n+                fn_decl: lf,\n+                body: le,\n+                ..\n+            }),\n+            Closure(box ast::Closure {\n+                binder: rb,\n+                capture_clause: rc,\n+                asyncness: ra,\n+                movability: rm,\n+                fn_decl: rf,\n+                body: re,\n+                ..\n+            })\n+        ) => {\n             eq_closure_binder(lb, rb)\n                 && lc == rc\n                 && la.is_async() == ra.is_async()"}, {"sha": "23f55db773e6c01e52ab624b95a681b019f7ddbb", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -290,10 +290,10 @@ impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         Some(match self.kind {\n             ast::MetaItemKind::Word => {\n-                rewrite_path(context, PathContext::Type, None, &self.path, shape)?\n+                rewrite_path(context, PathContext::Type, &None, &self.path, shape)?\n             }\n             ast::MetaItemKind::List(ref list) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 let has_trailing_comma = crate::expr::span_ends_with_comma(context, self.span);\n                 overflow::rewrite_with_parens(\n                     context,\n@@ -311,7 +311,7 @@ impl Rewrite for ast::MetaItem {\n                 )?\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(path.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max"}, {"sha": "a1a73cf4bd570f2ee495766e207e2e7935487773", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -145,8 +145,8 @@ impl ChainItemKind {\n \n     fn from_ast(context: &RewriteContext<'_>, expr: &ast::Expr) -> (ChainItemKind, Span) {\n         let (kind, span) = match expr.kind {\n-            ast::ExprKind::MethodCall(ref segment, ref receiver, ref expressions, _) => {\n-                let types = if let Some(ref generic_args) = segment.args {\n+            ast::ExprKind::MethodCall(ref call) => {\n+                let types = if let Some(ref generic_args) = call.seg.args {\n                     if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                         data.args\n                             .iter()\n@@ -163,8 +163,8 @@ impl ChainItemKind {\n                 } else {\n                     vec![]\n                 };\n-                let span = mk_sp(receiver.span.hi(), expr.span.hi());\n-                let kind = ChainItemKind::MethodCall(segment.clone(), types, expressions.clone());\n+                let span = mk_sp(call.receiver.span.hi(), expr.span.hi());\n+                let kind = ChainItemKind::MethodCall(call.seg.clone(), types, call.args.clone());\n                 (kind, span)\n             }\n             ast::ExprKind::Field(ref nested, field) => {\n@@ -400,9 +400,7 @@ impl Chain {\n     // is a try! macro, we'll convert it to shorthand when the option is set.\n     fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n         match expr.kind {\n-            ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n-                Some(Self::convert_try(&receiver, context))\n-            }\n+            ast::ExprKind::MethodCall(ref call) => Some(Self::convert_try(&call.receiver, context)),\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)\n             | ast::ExprKind::Await(ref subexpr) => Some(Self::convert_try(subexpr, context)),"}, {"sha": "423c3a997f53da7e8879bbb797b92a2774026569", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -326,16 +326,16 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(\n-        ref binder,\n-        capture,\n-        ref is_async,\n-        movability,\n-        ref fn_decl,\n-        ref body,\n-        _,\n-    ) = expr.kind\n-    {\n+    if let ast::ExprKind::Closure(ref closure) = expr.kind {\n+        let ast::Closure {\n+            ref binder,\n+            capture_clause,\n+            ref asyncness,\n+            movability,\n+            ref fn_decl,\n+            ref body,\n+            fn_decl_span: _,\n+        } = **closure;\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n@@ -347,7 +347,15 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+            binder,\n+            capture_clause,\n+            asyncness,\n+            movability,\n+            fn_decl,\n+            body,\n+            expr.span,\n+            context,\n+            shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "aba1c484bf1ddc028e8507fd59517c9a9691e6a1", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -116,7 +116,7 @@ pub(crate) fn format_expr(\n             rewrite_struct_lit(\n                 context,\n                 path,\n-                qself.as_ref(),\n+                qself,\n                 fields,\n                 rest,\n                 &expr.attrs,\n@@ -169,7 +169,7 @@ pub(crate) fn format_expr(\n             rewrite_match(context, cond, arms, shape, expr.span, &expr.attrs)\n         }\n         ast::ExprKind::Path(ref qself, ref path) => {\n-            rewrite_path(context, PathContext::Expr, qself.as_ref(), path, shape)\n+            rewrite_path(context, PathContext::Expr, qself, path, shape)\n         }\n         ast::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             rewrite_assignment(context, lhs, rhs, None, shape)\n@@ -203,16 +203,16 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(\n-            ref binder,\n-            capture,\n-            ref is_async,\n-            movability,\n-            ref fn_decl,\n-            ref body,\n-            _,\n-        ) => closures::rewrite_closure(\n-            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+        ast::ExprKind::Closure(ref cl) => closures::rewrite_closure(\n+            &cl.binder,\n+            cl.capture_clause,\n+            &cl.asyncness,\n+            cl.movability,\n+            &cl.fn_decl,\n+            &cl.body,\n+            expr.span,\n+            context,\n+            shape,\n         ),\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n@@ -1537,7 +1537,7 @@ fn struct_lit_can_be_aligned(fields: &[ast::ExprField], has_base: bool) -> bool\n fn rewrite_struct_lit<'a>(\n     context: &RewriteContext<'_>,\n     path: &ast::Path,\n-    qself: Option<&ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     fields: &'a [ast::ExprField],\n     struct_rest: &ast::StructRest,\n     attrs: &[ast::Attribute],"}, {"sha": "3f335172590ec808e44a3a667905e1764cd01aba", "filename": "src/tools/rustfmt/src/patterns.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -227,11 +227,10 @@ impl Rewrite for Pat {\n             }\n             PatKind::Tuple(ref items) => rewrite_tuple_pat(items, None, self.span, context, shape),\n             PatKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n+                rewrite_path(context, PathContext::Expr, q_self, path, shape)\n             }\n             PatKind::TupleStruct(ref q_self, ref path, ref pat_vec) => {\n-                let path_str =\n-                    rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)?;\n+                let path_str = rewrite_path(context, PathContext::Expr, q_self, path, shape)?;\n                 rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n             PatKind::Lit(ref expr) => expr.rewrite(context, shape),\n@@ -271,7 +270,7 @@ impl Rewrite for Pat {\n }\n \n fn rewrite_struct_pat(\n-    qself: &Option<ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     path: &ast::Path,\n     fields: &[ast::PatField],\n     ellipsis: bool,\n@@ -281,7 +280,7 @@ fn rewrite_struct_pat(\n ) -> Option<String> {\n     // 2 =  ` {`\n     let path_shape = shape.sub_width(2)?;\n-    let path_str = rewrite_path(context, PathContext::Expr, qself.as_ref(), path, path_shape)?;\n+    let path_str = rewrite_path(context, PathContext::Expr, qself, path, path_shape)?;\n \n     if fields.is_empty() && !ellipsis {\n         return Some(format!(\"{} {{}}\", path_str));"}, {"sha": "d5177a2057b8ab05fb3daebe466de1d87dc32710", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -38,11 +38,11 @@ pub(crate) enum PathContext {\n pub(crate) fn rewrite_path(\n     context: &RewriteContext<'_>,\n     path_context: PathContext,\n-    qself: Option<&ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     path: &ast::Path,\n     shape: Shape,\n ) -> Option<String> {\n-    let skip_count = qself.map_or(0, |x| x.position);\n+    let skip_count = qself.as_ref().map_or(0, |x| x.position);\n \n     let mut result = if path.is_global() && qself.is_none() && path_context != PathContext::Import {\n         \"::\".to_owned()\n@@ -655,7 +655,7 @@ impl Rewrite for ast::PolyTraitRef {\n \n impl Rewrite for ast::TraitRef {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        rewrite_path(context, PathContext::Type, None, &self.path, shape)\n+        rewrite_path(context, PathContext::Type, &None, &self.path, shape)\n     }\n }\n \n@@ -800,7 +800,7 @@ impl Rewrite for ast::Ty {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n             ast::TyKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n+                rewrite_path(context, PathContext::Type, q_self, path, shape)\n             }\n             ast::TyKind::Array(ref ty, ref repeats) => rewrite_pair(\n                 &**ty,"}, {"sha": "136a2c7fce24a802aac4c6e252e818b12db00ea1", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fe5f08fffd16dc20506f7d140e47b074f77964/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=70fe5f08fffd16dc20506f7d140e47b074f77964", "patch": "@@ -479,9 +479,9 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n+        ast::ExprKind::Closure(ref closure) => is_block_expr(context, &closure.body, repr),\n         // This can only be a string lit\n         ast::ExprKind::Lit(_) => {\n             repr.contains('\\n') && trimmed_last_line_width(repr) <= context.config.tab_spaces()"}]}