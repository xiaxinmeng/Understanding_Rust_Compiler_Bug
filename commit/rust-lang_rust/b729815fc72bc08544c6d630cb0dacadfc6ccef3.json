{"sha": "b729815fc72bc08544c6d630cb0dacadfc6ccef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Mjk4MTVmYzcyYmMwODU0NGM2ZDYzMGNiMGRhY2FkZmM2Y2NlZjM=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-06T15:06:44Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-06T15:06:44Z"}, "message": "use a `SmallVec` in `impl_or_trait_item`", "tree": {"sha": "54bfaa6b885bc0554f6875eb87b6677b86803031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54bfaa6b885bc0554f6875eb87b6677b86803031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b729815fc72bc08544c6d630cb0dacadfc6ccef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b729815fc72bc08544c6d630cb0dacadfc6ccef3", "html_url": "https://github.com/rust-lang/rust/commit/b729815fc72bc08544c6d630cb0dacadfc6ccef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b729815fc72bc08544c6d630cb0dacadfc6ccef3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d49aaad4fde33469fdb786c29838a95a5d8a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d49aaad4fde33469fdb786c29838a95a5d8a11", "html_url": "https://github.com/rust-lang/rust/commit/e1d49aaad4fde33469fdb786c29838a95a5d8a11"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "15342235d488a438b282535bcae2709a43f7d4ed", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b729815fc72bc08544c6d630cb0dacadfc6ccef3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b729815fc72bc08544c6d630cb0dacadfc6ccef3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=b729815fc72bc08544c6d630cb0dacadfc6ccef3", "patch": "@@ -1768,7 +1768,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     /// Finds the method with the appropriate name (or return type, as the case may be). If\n     /// `allow_similar_names` is set, find methods with close-matching names.\n-    fn impl_or_trait_item(&self, def_id: DefId) -> Vec<ty::AssocItem> {\n+    // The length of the returned iterator is nearly always 0 or 1 and this\n+    // method is fairly hot.\n+    fn impl_or_trait_item(&self, def_id: DefId) -> SmallVec<[ty::AssocItem; 1]> {\n         if let Some(name) = self.method_name {\n             if self.allow_similar_names {\n                 let max_dist = max(name.as_str().len(), 3) / 3;\n@@ -1784,7 +1786,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_item(def_id, name, Namespace::ValueNS)\n-                    .map_or_else(Vec::new, |x| vec![x])\n+                    .map_or_else(SmallVec::new, |x| SmallVec::from_buf([x]))\n             }\n         } else {\n             self.tcx.associated_items(def_id).in_definition_order().copied().collect()"}]}