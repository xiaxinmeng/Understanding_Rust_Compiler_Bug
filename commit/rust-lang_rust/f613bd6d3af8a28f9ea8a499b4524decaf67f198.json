{"sha": "f613bd6d3af8a28f9ea8a499b4524decaf67f198", "node_id": "C_kwDOAAsO6NoAKGY2MTNiZDZkM2FmOGEyOGY5ZWE4YTQ5OWI0NTI0ZGVjYWY2N2YxOTg", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2022-09-10T14:24:05Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2022-09-10T14:24:05Z"}, "message": "Make the one-liner more descriptive", "tree": {"sha": "df0a852f8fede7113be890c5ba6f4c4fd71b08ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df0a852f8fede7113be890c5ba6f4c4fd71b08ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f613bd6d3af8a28f9ea8a499b4524decaf67f198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f613bd6d3af8a28f9ea8a499b4524decaf67f198", "html_url": "https://github.com/rust-lang/rust/commit/f613bd6d3af8a28f9ea8a499b4524decaf67f198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f613bd6d3af8a28f9ea8a499b4524decaf67f198/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c", "html_url": "https://github.com/rust-lang/rust/commit/5197c96c49fc3b7de3ce9a31f7cc62d2cbd1f70c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "00c922f3ae93fa4c511d96933cb489db243b07c5", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f613bd6d3af8a28f9ea8a499b4524decaf67f198/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f613bd6d3af8a28f9ea8a499b4524decaf67f198/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=f613bd6d3af8a28f9ea8a499b4524decaf67f198", "patch": "@@ -1,4 +1,4 @@\n-//! The `Box<T>` type for heap allocation.\n+//! The pointer type for heap allocation for an owned value of type `T`.\n //!\n //! [`Box<T>`], casually referred to as a 'box', provides the simplest form of\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n@@ -187,7 +187,7 @@ pub use thin::ThinBox;\n \n mod thin;\n \n-/// A pointer type for heap allocation.\n+/// A pointer type for heap allocation for an owned value of type `T`.\n ///\n /// See the [module-level documentation](../../std/boxed/index.html) for more.\n #[lang = \"owned_box\"]"}]}