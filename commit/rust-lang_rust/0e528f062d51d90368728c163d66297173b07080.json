{"sha": "0e528f062d51d90368728c163d66297173b07080", "node_id": "C_kwDOAAsO6NoAKDBlNTI4ZjA2MmQ1MWQ5MDM2ODcyOGMxNjNkNjYyOTcxNzNiMDcwODA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-02T20:38:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-02T20:38:22Z"}, "message": "Rollup merge of #95597 - dtolnay:threadlocalu8, r=Dylan-DPC\n\nRefer to u8 by absolute path in expansion of thread_local\n\nThe standard library's `thread_local!` macro previously referred to `u8` just as `u8`, resolving to whatever `u8` existed in the type namespace at the call site. This PR replaces those with `$crate::primitive::u8` which always refers to `std::primitive::u8` regardless of what's in scope at the call site. Unambiguously naming primitives inside macro-generated code is the reason that std::primitive was introduced in the first place.\n\n<details>\n<summary>Here is the error message prior to this PR \u2b07\ufe0f</summary>\n\n```console\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ expected struct `u8`, found integer\n  |\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | | ^\n  | | |\n  | |_expected struct `u8`, found integer\n  |   this expression has type `u8`\n  |\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ expected `u8`, found struct `u8`\n  |\n  = note: expected raw pointer `*mut u8` (`u8`)\n             found raw pointer `*mut u8` (struct `u8`)\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ expected `u8`, found struct `u8`\n  |\n  = note: expected fn pointer `unsafe extern \"C\" fn(*mut u8)`\n                found fn item `unsafe extern \"C\" fn(*mut u8) {destroy}`\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | | ^\n  | | |\n  | |_expected struct `u8`, found integer\n  |   expected due to this type\n  |\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0369]: binary operation `==` cannot be applied to type `u8`\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | | ^\n  | | |\n  | |_u8\n  |   {integer}\n  |\nnote: an implementation of `PartialEq<_>` might be missing for `u8`\n --> src/main.rs:4:1\n  |\n4 | struct u8;\n  | ^^^^^^^^^^ must implement `PartialEq<_>`\n  = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider annotating `u8` with `#[derive(PartialEq)]`\n  |\n4 | #[derive(PartialEq)]\n  |\n\nerror[E0277]: `u8` doesn't implement `Debug`\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ `u8` cannot be formatted using `{:?}`\n  |\n  = help: the trait `Debug` is not implemented for `u8`\n  = note: add `#[derive(Debug)]` to `u8` or manually `impl Debug for u8`\n  = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n</details>", "tree": {"sha": "0d019163c7a534bfaeda7e8e3ddddd914c602b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d019163c7a534bfaeda7e8e3ddddd914c602b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e528f062d51d90368728c163d66297173b07080", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSLQ+CRBK7hj4Ov3rIwAAFRQIAD4zQXX6z4+rWpGj89v6zlSE\nnzRPzHxQ34892RTOqDmvEDNnqQP5cPs3FL5djdR9KMtkF944PKnuK5NKh1zFhzYA\nb9iN7fOs3FS2IlR7u+3T0SeaL+/UuXzR/6jctHs+YSHtaYUp+7gf0BGqzl1SONh+\n8xhZw5Q6l1xadyEbJ0z6rVk+lpR3VUrP3vN9N7wvfx9arcYjh9jzrc4OKST72Vb3\n64NAsWyzM5cxZQTdIubbZRWVwd1xe1wDtRoaiy8aacR5Fc4WkpKQHuFwhP1QH0wM\nPS1Rj8+Pn67Q54vHszNdzLCJjvQWO+SGjspP4yvJKpP5JoJGFn/bC+X0uaEuf9o=\n=F5B0\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d019163c7a534bfaeda7e8e3ddddd914c602b35\nparent 348e77cd87858ddb0eff5a2eb6c14d2c0b92f3c6\nparent d93af619812711ebf047a8d0e3fa1f86f07d7da9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648931902 +0200\ncommitter GitHub <noreply@github.com> 1648931902 +0200\n\nRollup merge of #95597 - dtolnay:threadlocalu8, r=Dylan-DPC\n\nRefer to u8 by absolute path in expansion of thread_local\n\nThe standard library's `thread_local!` macro previously referred to `u8` just as `u8`, resolving to whatever `u8` existed in the type namespace at the call site. This PR replaces those with `$crate::primitive::u8` which always refers to `std::primitive::u8` regardless of what's in scope at the call site. Unambiguously naming primitives inside macro-generated code is the reason that std::primitive was introduced in the first place.\n\n<details>\n<summary>Here is the error message prior to this PR \u2b07\ufe0f</summary>\n\n```console\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ expected struct `u8`, found integer\n  |\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | | ^\n  | | |\n  | |_expected struct `u8`, found integer\n  |   this expression has type `u8`\n  |\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ expected `u8`, found struct `u8`\n  |\n  = note: expected raw pointer `*mut u8` (`u8`)\n             found raw pointer `*mut u8` (struct `u8`)\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ expected `u8`, found struct `u8`\n  |\n  = note: expected fn pointer `unsafe extern \"C\" fn(*mut u8)`\n                found fn item `unsafe extern \"C\" fn(*mut u8) {destroy}`\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | | ^\n  | | |\n  | |_expected struct `u8`, found integer\n  |   expected due to this type\n  |\n  = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0369]: binary operation `==` cannot be applied to type `u8`\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | | ^\n  | | |\n  | |_u8\n  |   {integer}\n  |\nnote: an implementation of `PartialEq<_>` might be missing for `u8`\n --> src/main.rs:4:1\n  |\n4 | struct u8;\n  | ^^^^^^^^^^ must implement `PartialEq<_>`\n  = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider annotating `u8` with `#[derive(PartialEq)]`\n  |\n4 | #[derive(PartialEq)]\n  |\n\nerror[E0277]: `u8` doesn't implement `Debug`\n --> src/main.rs:6:1\n  |\n6 | / std::thread_local! {\n7 | |     pub static A: i32 = f();\n8 | |     pub static B: i32 = const { 0 };\n9 | | }\n  | |_^ `u8` cannot be formatted using `{:?}`\n  |\n  = help: the trait `Debug` is not implemented for `u8`\n  = note: add `#[derive(Debug)]` to `u8` or manually `impl Debug for u8`\n  = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n</details>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e528f062d51d90368728c163d66297173b07080", "html_url": "https://github.com/rust-lang/rust/commit/0e528f062d51d90368728c163d66297173b07080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e528f062d51d90368728c163d66297173b07080/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "348e77cd87858ddb0eff5a2eb6c14d2c0b92f3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/348e77cd87858ddb0eff5a2eb6c14d2c0b92f3c6", "html_url": "https://github.com/rust-lang/rust/commit/348e77cd87858ddb0eff5a2eb6c14d2c0b92f3c6"}, {"sha": "d93af619812711ebf047a8d0e3fa1f86f07d7da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93af619812711ebf047a8d0e3fa1f86f07d7da9", "html_url": "https://github.com/rust-lang/rust/commit/d93af619812711ebf047a8d0e3fa1f86f07d7da9"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "a41cb02a6070d8e7d92be16117149f46f0644c21", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e528f062d51d90368728c163d66297173b07080/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e528f062d51d90368728c163d66297173b07080/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=0e528f062d51d90368728c163d66297173b07080", "patch": "@@ -217,9 +217,9 @@ macro_rules! __thread_local_inner {\n                 // 1 == dtor registered, dtor not run\n                 // 2 == dtor registered and is running or has run\n                 #[thread_local]\n-                static mut STATE: u8 = 0;\n+                static mut STATE: $crate::primitive::u8 = 0;\n \n-                unsafe extern \"C\" fn destroy(ptr: *mut u8) {\n+                unsafe extern \"C\" fn destroy(ptr: *mut $crate::primitive::u8) {\n                     let ptr = ptr as *mut $t;\n \n                     unsafe {\n@@ -235,7 +235,7 @@ macro_rules! __thread_local_inner {\n                         //   so now.\n                         0 => {\n                             $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(\n-                                $crate::ptr::addr_of_mut!(VAL) as *mut u8,\n+                                $crate::ptr::addr_of_mut!(VAL) as *mut $crate::primitive::u8,\n                                 destroy,\n                             );\n                             STATE = 1;"}, {"sha": "dcff9183ad95a23f52e1143dba78cffd54ef5f4c", "filename": "src/test/ui/thread-local/name-collision.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e528f062d51d90368728c163d66297173b07080/src%2Ftest%2Fui%2Fthread-local%2Fname-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e528f062d51d90368728c163d66297173b07080/src%2Ftest%2Fui%2Fthread-local%2Fname-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local%2Fname-collision.rs?ref=0e528f062d51d90368728c163d66297173b07080", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#[allow(non_camel_case_types)]\n+struct u8;\n+\n+std::thread_local! {\n+    pub static A: i32 = f();\n+    pub static B: i32 = const { 0 };\n+}\n+\n+fn f() -> i32 {\n+    0\n+}\n+\n+fn main() {}"}]}