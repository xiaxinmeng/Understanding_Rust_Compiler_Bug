{"sha": "6ec402d4a66d2c0306e525e1e124cc38ecbeb421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYzQwMmQ0YTY2ZDJjMDMwNmU1MjVlMWUxMjRjYzM4ZWNiZWI0MjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T21:46:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T21:46:03Z"}, "message": "Add makefile bits to run rustc on the testsuite as part of 'make check'. Mostly xfailed.", "tree": {"sha": "00c7639dc9e64a322ce3968871ee85ba0aa534fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c7639dc9e64a322ce3968871ee85ba0aa534fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ec402d4a66d2c0306e525e1e124cc38ecbeb421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec402d4a66d2c0306e525e1e124cc38ecbeb421", "html_url": "https://github.com/rust-lang/rust/commit/6ec402d4a66d2c0306e525e1e124cc38ecbeb421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ec402d4a66d2c0306e525e1e124cc38ecbeb421/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76dc0ae995d45942b8134eb9b64af566ddc29bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/76dc0ae995d45942b8134eb9b64af566ddc29bfb", "html_url": "https://github.com/rust-lang/rust/commit/76dc0ae995d45942b8134eb9b64af566ddc29bfb"}], "stats": {"total": 157, "additions": 103, "deletions": 54}, "files": [{"sha": "af3201211b13db9ec6c92fc1c2e62453d73c56cb", "filename": "src/Makefile", "status": "modified", "additions": 103, "deletions": 43, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/6ec402d4a66d2c0306e525e1e124cc38ecbeb421/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6ec402d4a66d2c0306e525e1e124cc38ecbeb421/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=6ec402d4a66d2c0306e525e1e124cc38ecbeb421", "patch": "@@ -25,6 +25,7 @@ CFG_VALGRIND :=\n \n CFG_LLVM_CONFIG ?= llvm-config\n CFG_BOOT_FLAGS := $(FLAGS)\n+CFG_RUSTC_FLAGS := -nowarn\n \n # On Darwin, we need to run dsymutil so the debugging information ends\n # up in the right place.  On other platforms, it automatically gets\n@@ -81,7 +82,7 @@ ifdef CFG_WINDOWSY\n   CFG_OBJ_SUFFIX := .o\n   CFG_EXE_SUFFIX := .exe\n   CFG_BOOT := ./rustboot.exe\n-  CFG_COMPILER := ./rustc.exe\n+  CFG_RUSTC := ./rustc.exe\n   CFG_GCC_CFLAGS += -march=i686\n   CFG_GCC_LINK_FLAGS += -shared -fPIC\n   CFG_RUN_TARG = $(1)\n@@ -92,7 +93,7 @@ endif\n ifdef CFG_UNIXY\n   CFG_INFO := $(info cfg: unix-y environment)\n   CFG_BOOT := ./rustboot\n-  CFG_COMPILER := ./rustc\n+  CFG_RUSTC := ./rustc\n   CFG_OBJ_SUFFIX := .o\n   CFG_RUN_TARG = LD_LIBRARY_PATH=. $(CFG_VALGRIND) $(1)\n   CFG_GCC := 1\n@@ -102,7 +103,7 @@ ifdef CFG_UNIXY\n     CFG_BOOT_FLAGS += -t win32-x86-pe\n     CFG_RUNTIME := rustrt.dll\n     CFG_STDLIB := std.dll\n-    CFG_COMPILER := ./rustc.exe\n+    CFG_RUSTC := ./rustc.exe\n     ifdef CFG_VALGRIND\n       CFG_VALGRIND += wine\n     endif\n@@ -189,7 +190,7 @@ ifneq ($(CFG_LLVM_CONFIG),)\n       done)\n   ifneq ($(CFG_OCAML_LLVM),)\n     $(info cfg: found LLVM ocaml bindings in $(CFG_OCAML_LLVM))\n-  else \n+  else\n     CFG_LLVM_CONFIG := $(info cfg: LLVM ocaml bindings not found)\n   endif\n endif\n@@ -327,7 +328,7 @@ COMPILER_INPUTS := $(wildcard comp/*.rc comp/*.rs comp/*/*.rs)\n \n GENERATED := boot/fe/lexer.ml boot/util/version.ml\n \n-all: $(CFG_COMPILER) $(MKFILES) $(GENERATED)\n+all: $(CFG_RUSTC) $(MKFILES) $(GENERATED)\n \n boot/util/version.ml: Makefile\n \t$(CFG_QUIET)git log -1 \\\n@@ -379,15 +380,15 @@ endif\n # Main compiler targets and rules\n ######################################################################\n \n-$(CFG_COMPILER): $(COMPILER_INPUTS) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+$(CFG_RUSTC): $(COMPILER_INPUTS) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n \t@$(call CFG_ECHO, compile: $<)\n \t$(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS) \\\n       -minimal -o $@ $<\n \t$(CFG_QUIET)chmod 0755 $@\n \n-self: $(CFG_COMPILER)\n+self: $(CFG_RUSTC)\n \t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)$(call CFG_RUN_TARG, $(CFG_COMPILER)) $(COMPILER_CRATE)\n+\t$(CFG_QUIET)$(call CFG_RUN_TARG, $(CFG_RUSTC)) $(COMPILER_CRATE)\n \n \n ######################################################################\n@@ -491,15 +492,26 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       writing-through-read-alias.rs \\\n                      )\n \n+# Same strategy here for the time being: just list the ones that\n+# work and assume the others don't. Invert this when we're closer\n+# to actually bootstrapping.\n+\n+TEST_XFAILS_SELF := $(filter-out \\\n+                      $(addprefix test/run-pass/, \\\n+                        hello.rs \\\n+                        int.rs), \\\n+                      $(wildcard test/*/*.rs test/*/*.rc))\n \n \n ifdef MINGW_CROSS\n TEST_XFAILS_X86 += test/run-pass/native-mod.rc\n TEST_XFAILS_LLVM += test/run-pass/native-mod.rc\n+TEST_XFAILS_SELF += test/run-pass/native-mod.rc\n endif\n ifdef CFG_WINDOWSY\n TEST_XFAILS_X86 += test/run-pass/native-mod.rc\n TEST_XFAILS_LLVM += test/run-pass/native-mod.rc\n+TEST_XFAILS_SELF += test/run-pass/native-mod.rc\n endif\n \n RPASS_RC := $(wildcard test/run-pass/*.rc)\n@@ -512,72 +524,106 @@ CFAIL_RS := $(wildcard test/compile-fail/*.rs)\n ifdef CHECK_XFAILS\n TEST_RPASS_CRATES_X86 := $(filter $(TEST_XFAILS_X86), $(RPASS_RC))\n TEST_RPASS_CRATES_LLVM := $(filter $(TEST_XFAILS_LLVM), $(RPASS_RC))\n+TEST_RPASS_CRATES_SELF := $(filter $(TEST_XFAILS_SELF), $(RPASS_RC))\n TEST_RPASS_SOURCES_X86 := $(filter $(TEST_XFAILS_X86), $(RPASS_RS))\n TEST_RPASS_SOURCES_LLVM := $(filter $(TEST_XFAILS_LLVM), $(RPASS_RS))\n+TEST_RPASS_SOURCES_SELF := $(filter $(TEST_XFAILS_SELF), $(RPASS_RS))\n else\n TEST_RPASS_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RPASS_RC))\n TEST_RPASS_CRATES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(RPASS_RC))\n+TEST_RPASS_CRATES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RPASS_RC))\n TEST_RPASS_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RPASS_RS))\n TEST_RPASS_SOURCES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(RPASS_RS))\n+TEST_RPASS_SOURCES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RPASS_RS))\n endif\n \n-TEST_RPASS_EXTRAS := $(wildcard test/run-pass/*/*.rs)\n TEST_RPASS_EXES_X86 := \\\n               $(TEST_RPASS_CRATES_X86:.rc=-boot.x86$(CFG_EXE_SUFFIX)) \\\n               $(TEST_RPASS_SOURCES_X86:.rs=-boot.x86$(CFG_EXE_SUFFIX))\n TEST_RPASS_EXES_LLVM := \\\n               $(TEST_RPASS_CRATES_LLVM:.rc=-boot.llvm$(CFG_EXE_SUFFIX)) \\\n               $(TEST_RPASS_SOURCES_LLVM:.rs=-boot.llvm$(CFG_EXE_SUFFIX))\n+TEST_RPASS_EXES_SELF := \\\n+              $(TEST_RPASS_CRATES_SELF:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_RPASS_SOURCES_SELF:.rs=.llvm$(CFG_EXE_SUFFIX))\n+\n TEST_RPASS_OUTS_X86  := \\\n                     $(TEST_RPASS_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n TEST_RPASS_OUTS_LLVM := \\\n                     $(TEST_RPASS_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+TEST_RPASS_OUTS_SELF := \\\n+                    $(TEST_RPASS_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+\n TEST_RPASS_TMPS_X86  := \\\n     $(TEST_RPASS_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86$(CFG_EXE_SUFFIX).tmp)\n TEST_RPASS_TMPS_LLVM := \\\n     $(TEST_RPASS_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n+TEST_RPASS_TMPS_SELF := \\\n+    $(TEST_RPASS_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n \n \n TEST_RFAIL_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RFAIL_RC))\n TEST_RFAIL_CRATES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(RFAIL_RC))\n+TEST_RFAIL_CRATES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RFAIL_RC))\n TEST_RFAIL_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RFAIL_RS))\n TEST_RFAIL_SOURCES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(RFAIL_RS))\n-TEST_RFAIL_EXTRAS := $(wildcard test/run-fail/*/*.rs)\n+TEST_RFAIL_SOURCES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RFAIL_RS))\n+\n TEST_RFAIL_EXES_X86 := \\\n               $(TEST_RFAIL_CRATES_X86:.rc=-boot.x86$(CFG_EXE_SUFFIX)) \\\n               $(TEST_RFAIL_SOURCES_X86:.rs=-boot.x86$(CFG_EXE_SUFFIX))\n TEST_RFAIL_EXES_LLVM := \\\n               $(TEST_RFAIL_CRATES_LLVM:.rc=-boot.llvm$(CFG_EXE_SUFFIX)) \\\n               $(TEST_RFAIL_SOURCES_LLVM:.rs=-boot.llvm$(CFG_EXE_SUFFIX))\n+TEST_RFAIL_EXES_SELF := \\\n+              $(TEST_RFAIL_CRATES_SELF:.rc=-boot.llvm$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_RFAIL_SOURCES_SELF:.rs=-boot.llvm$(CFG_EXE_SUFFIX))\n+\n TEST_RFAIL_OUTS_X86  := \\\n                     $(TEST_RFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n TEST_RFAIL_OUTS_LLVM := \\\n                     $(TEST_RFAIL_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+TEST_RFAIL_OUTS_SELF := \\\n+                    $(TEST_RFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+\n TEST_RFAIL_TMPS_X86  := \\\n     $(TEST_RFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86$(CFG_EXE_SUFFIX).tmp)\n TEST_RFAIL_TMPS_LLVM := \\\n     $(TEST_RFAIL_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n+TEST_RFAIL_TMPS_SELF := \\\n+    $(TEST_RFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n \n \n TEST_CFAIL_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(CFAIL_RC))\n TEST_CFAIL_CRATES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(CFAIL_RC))\n+TEST_CFAIL_CRATES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(CFAIL_RC))\n TEST_CFAIL_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(CFAIL_RS))\n TEST_CFAIL_SOURCES_LLVM := $(filter-out $(TEST_XFAILS_LLVM), $(CFAIL_RS))\n-TEST_CFAIL_EXTRAS := $(wildcard test/compile-fail/*/*.rs)\n+TEST_CFAIL_SOURCES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(CFAIL_RS))\n+\n TEST_CFAIL_EXES_X86 := \\\n               $(TEST_CFAIL_CRATES_X86:.rc=-boot.x86$(CFG_EXE_SUFFIX)) \\\n               $(TEST_CFAIL_SOURCES_X86:.rs=-boot.x86$(CFG_EXE_SUFFIX))\n TEST_CFAIL_EXES_LLVM := \\\n               $(TEST_CFAIL_CRATES_LLVM:.rc=-boot.llvm$(CFG_EXE_SUFFIX)) \\\n               $(TEST_CFAIL_SOURCES_LLVM:.rs=-boot.llvm$(CFG_EXE_SUFFIX))\n+TEST_CFAIL_EXES_SELF := \\\n+              $(TEST_CFAIL_CRATES_SELF:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_CFAIL_SOURCES_SELF:.rs=.llvm$(CFG_EXE_SUFFIX))\n+\n TEST_CFAIL_OUTS_X86 := \\\n                 $(TEST_CFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n TEST_CFAIL_OUTS_LLVM := \\\n                 $(TEST_CFAIL_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+TEST_CFAIL_OUTS_SELF := \\\n+                $(TEST_CFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n+\n TEST_CFAIL_TMPS_X86 := \\\n     $(TEST_CFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86$(CFG_EXE_SUFFIX).tmp)\n TEST_CFAIL_TMPS_LLVM := \\\n     $(TEST_CFAIL_EXES_LLVM:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n+TEST_CFAIL_TMPS_SELF := \\\n+    $(TEST_CFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n \n \n ALL_TEST_CRATES := $(TEST_CFAIL_CRATES_X86) \\\n@@ -602,7 +648,7 @@ compile-check: tidy \\\n        $(TEST_RPASS_EXES_X86) $(TEST_RFAIL_EXES_X86)\n \n \n-ifeq ($(VARIANT),llvm)\n+ifdef CFG_LLVM_CONFIG\n ALL_TEST_CRATES += $(TEST_CFAIL_CRATES_LLVM) \\\n                    $(TEST_RFAIL_CRATES_LLVM) \\\n                    $(TEST_RPASS_CRATES_LLVM)\n@@ -611,20 +657,35 @@ ALL_TEST_SOURCES += $(TEST_CFAIL_SOURCES_LLVM) \\\n                     $(TEST_RFAIL_SOURCES_LLVM) \\\n                     $(TEST_RPASS_SOURCES_LLVM)\n \n-check_nocompile: $(TEST_CFAIL_OUTS_LLVM)\n+ALL_TEST_CRATES += $(TEST_CFAIL_CRATES_SELF) \\\n+                   $(TEST_RFAIL_CRATES_SELF) \\\n+                   $(TEST_RPASS_CRATES_SELF)\n+\n+ALL_TEST_SOURCES += $(TEST_CFAIL_SOURCES_SELF) \\\n+                    $(TEST_RFAIL_SOURCES_SELF) \\\n+                    $(TEST_RPASS_SOURCES_SELF)\n+\n+check_nocompile: $(TEST_CFAIL_OUTS_LLVM) \\\n+                 $(TEST_CFAIL_OUTS_SELF)\n \n check:  tidy \\\n         $(TEST_RPASS_EXES_LLVM) $(TEST_RFAIL_EXES_LLVM) \\\n         $(TEST_RPASS_OUTS_LLVM) $(TEST_RFAIL_OUTS_LLVM) \\\n-        $(TEST_CFAIL_OUTS_LLVM)\n+        $(TEST_CFAIL_OUTS_LLVM) \\\n+        $(TEST_RPASS_EXES_SELF) $(TEST_RFAIL_EXES_SELF) \\\n+        $(TEST_RPASS_OUTS_SELF) $(TEST_RFAIL_OUTS_SELF) \\\n+        $(TEST_CFAIL_OUTS_SELF)\n \n compile-check: tidy \\\n-       $(TEST_RPASS_EXES_LLVM) $(TEST_RFAIL_EXES_LLVM)\n+       $(TEST_RPASS_EXES_LLVM) $(TEST_RFAIL_EXES_LLVM) \\\n+       $(TEST_RPASS_EXES_SELF) $(TEST_RFAIL_EXES_SELF)\n \n endif\n \n-REQ := $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+BREQ := $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+SREQ := $(CFG_RUSTC) $(CFG_RUNTIME) $(CFG_STDLIB)\n BOOT := $(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS)\n+SELF := $(CFG_QUIET)$(CFG_RUSTC) $(CFG_RUSTC_FLAGS)\n \n # Cancel the implicit .out rule in GNU make.\n %.out: %\n@@ -637,36 +698,37 @@ test/run-pass/%.out.tmp: test/run-pass/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n \t@$(call CFG_ECHO, run: $<)\n \t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n \n-test/run-fail/%.out.tmp: test/run-fail/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n+test/run-fail/%-boot.out.tmp: test/run-fail/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n \t$(CFG_QUIET)rm -f $<.tmp\n \t@$(call CFG_ECHO, run: $<)\n \t$(CFG_QUIET)rm -f $@\n \t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) >$@ 2>&1 ; X=$$? ; \\\n       if [ $$X -eq 0 ] ; then exit 1 ; else exit 0 ; fi\n \t$(CFG_QUIET)grep --text --quiet \\\n       \"`awk -F: '/error-pattern/ { print $$2 }' \\\n-        $(basename $(basename $(basename $@))).rs | tr -d '\\n\\r'`\" $@\n+        $(basename $(basename $(basename $@ -boot.out.tmp))).rs \\\n+        | tr -d '\\n\\r'`\" $@\n \n-test/compile-fail/%-boot.x86.out.tmp: test/compile-fail/%.rs $(REQ)\n+test/compile-fail/%-boot.x86.out.tmp: test/compile-fail/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot x86]: $<)\n \t$(CFG_QUIET)rm -f $@\n \t$(BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n \t$(CFG_QUIET)grep --text --quiet \\\n       \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n \n-test/compile-fail/%-boot.llvm.out.tmp: test/compile-fail/%.rs $(REQ)\n+test/compile-fail/%-boot.llvm.out.tmp: test/compile-fail/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot llvm]: $<)\n \t$(CFG_QUIET)rm -f $@\n \t$(BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n \t$(CFG_QUIET)grep --text --quiet \\\n       \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n \n-test/run-pass/%-boot.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rc $(REQ)\n+test/run-pass/%-boot.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rc $(BREQ)\n \t@$(call CFG_ECHO, compile [boot x86]: $<)\n \t$(BOOT) -o $@ $<\n \n test/bench/shootout/%-boot.x86$(CFG_EXE_SUFFIX): \\\n-  test/bench/shootout/%.rs $(REQ)\n+  test/bench/shootout/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot x86]: $<)\n \t$(BOOT) -o $@ $<\n \n@@ -691,26 +753,38 @@ test/bench/shootout/%-boot.x86$(CFG_EXE_SUFFIX): \\\n \t@# programs, I\\'ll live with the noise.\n \t-$(CFG_QUIET)$(DSYMUTIL) $@\n \n-test/run-pass/%-boot.bc: test/run-pass/%.rc $(REQ)\n+test/run-pass/%-boot.bc: test/run-pass/%.rc $(BREQ)\n \t@$(call CFG_ECHO, compile [boot llvm]: $<)\n \t$(BOOT) -o $@ -llvm $<\n \n-test/run-pass/%-boot.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rs $(REQ)\n+test/run-pass/%.bc: test/run-pass/%.rc $(SREQ)\n+\t@$(call CFG_ECHO, compile [rustc]: $<)\n+\t$(SELF) -o $@ $<\n+\n+test/run-pass/%-boot.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot x86]: $<)\n \t$(BOOT) -o $@ $<\n \n-test/run-pass/%-boot.bc: test/run-pass/%.rs $(REQ)\n+test/run-pass/%-boot.bc: test/run-pass/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot llvm]: $<)\n \t$(BOOT) -o $@ -llvm $<\n \n-test/run-fail/%-boot.x86$(CFG_EXE_SUFFIX): test/run-fail/%.rs $(REQ)\n+test/run-pass/%.bc: test/run-pass/%.rs $(SREQ)\n+\t@$(call CFG_ECHO, compile [rustc]: $<)\n+\t$(SELF) -o $@ $<\n+\n+test/run-fail/%-boot.x86$(CFG_EXE_SUFFIX): test/run-fail/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot x86]: $<)\n \t$(BOOT) -o $@ $<\n \n-test/run-fail/%-boot.bc: test/run-fail/%.rs $(REQ)\n+test/run-fail/%-boot.bc: test/run-fail/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [boot llvm]: $<)\n \t$(BOOT) -o $@ -llvm $<\n \n+test/run-fail/%.bc: test/run-fail/%.rs $(BREQ)\n+\t@$(call CFG_ECHO, compile [rustc]: $<)\n+\t$(SELF) -o $@ $<\n+\n \n ######################################################################\n # Auto-dependency\n@@ -834,31 +908,17 @@ clean:\n \t@$(call CFG_ECHO, cleaning)\n \t$(CFG_QUIET)rm -f $(RUNTIME_OBJS)\n \t$(CFG_QUIET)rm -f $(BOOT_CMOS) $(BOOT_CMIS) $(BOOT_CMXS) $(BOOT_OBJS)\n-\t$(CFG_QUIET)rm -f $(CFG_COMPILER)\n+\t$(CFG_QUIET)rm -f $(CFG_RUSTC)\n \t$(CFG_QUIET)rm -f $(ML_DEPFILES) $(C_DEPFILES) $(CRATE_DEPFILES)\n \t$(CFG_QUIET)rm -f $(ML_DEPFILES:%.d=%.d.tmp)\n \t$(CFG_QUIET)rm -f $(C_DEPFILES:%.d=%.d.tmp)\n \t$(CFG_QUIET)rm -f $(CRATE_DEPFILES:%.d=%.d.tmp)\n \t$(CFG_QUIET)rm -f $(GENERATED)\n \t$(CFG_QUIET)rm -f $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n-\t$(CFG_QUIET)rm -f $(TEST_RPASS_EXES_X86) $(TEST_RPASS_OUTS_X86) \\\n-                          $(TEST_RPASS_TMPS_X86)\n-\t$(CFG_QUIET)rm -f $(TEST_RPASS_EXES_LLVM) $(TEST_RPASS_OUTS_LLVM) \\\n-                          $(TEST_RPASS_TMPS_LLVM)\n-\t$(CFG_QUIET)rm -f $(TEST_RFAIL_EXES_X86) $(TEST_RFAIL_OUTS_X86) \\\n-                          $(TEST_RFAIL_TMPS_X86)\n-\t$(CFG_QUIET)rm -f $(TEST_RFAIL_EXES_LLVM) $(TEST_RFAIL_OUTS_LLVM) \\\n-                          $(TEST_RFAIL_TMPS_LLVM)\n-\t$(CFG_QUIET)rm -f $(TEST_CFAIL_EXES_X86) $(TEST_CFAIL_OUTS_X86) \\\n-                          $(TEST_CFAIL_TMPS_X86)\n-\t$(CFG_QUIET)rm -f $(TEST_CFAIL_EXES_LLVM) $(TEST_CFAIL_OUTS_LLVM) \\\n-                          $(TEST_CFAIL_TMPS_LLVM)\n-\t$(CFG_QUIET)rm -rf $(TEST_RPASS_EXES_LLVM:.llvm=.llvm.dSYM)\n-\t$(CFG_QUIET)rm -rf $(TEST_RFAIL_EXES_LLVM:.llvm=.llvm.dSYM)\n \t$(CFG_QUIET)rm -Rf $(PKG_NAME)-*.tar.gz dist\n \t$(CFG_QUIET)rm -f $(foreach ext,cmx cmi cmo cma o a d exe,\\\n                         $(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext))) \\\n-\t$(CFG_QUIET)rm -f $(foreach ext,out llvm x86 o s exe,\\\n+\t$(CFG_QUIET)rm -f $(foreach ext,out llvm x86 o s exe dSYM,\\\n                         $(wildcard test/*/*.$(ext))) \\\n \n "}, {"sha": "a157d42df0b03d42fa0bfafeac7b037125319428", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ec402d4a66d2c0306e525e1e124cc38ecbeb421/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec402d4a66d2c0306e525e1e124cc38ecbeb421/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6ec402d4a66d2c0306e525e1e124cc38ecbeb421", "patch": "@@ -324,7 +324,6 @@ fn C_struct(vec[ValueRef] elts) -> ValueRef {\n fn decl_cdecl_fn(ModuleRef llmod, str name,\n                  vec[TypeRef] inputs, TypeRef output) -> ValueRef {\n     let TypeRef llty = T_fn(inputs, output);\n-    log \"declaring \" + name + \" with type \" + ty_str(llty);\n     let ValueRef llfn =\n         llvm.LLVMAddFunction(llmod, _str.buf(name), llty);\n     llvm.LLVMSetFunctionCallConv(llfn, lib.llvm.LLVMCCallConv);\n@@ -372,13 +371,6 @@ fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> result {\n     for (ValueRef a in args) {\n         call_args += cx.build.ZExtOrBitCast(a, T_int());\n     }\n-    /*\n-     log \"emitting indirect-upcall via \" + abi.upcall_glue_name(n);\n-     for (ValueRef v in call_args) {\n-       log \"arg: \" + val_str(v);\n-     }\n-     log \"emitting call to llglue of type: \" + val_str(llglue);\n-    */\n \n     ret res(cx, cx.build.Call(llglue, call_args));\n }\n@@ -815,7 +807,6 @@ fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n                 case (ast.decl_local(?local)) {\n                     alt (local.init) {\n                         case (some[@ast.expr](?e)) {\n-                            log \"storing init of local \" + local.ident;\n                             auto llptr = cx.fcx.lllocals.get(local.id);\n                             sub = trans_expr(cx, *e);\n                             sub.val = sub.bcx.build.Store(sub.val, llptr);\n@@ -912,7 +903,6 @@ fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n     auto bcx = cx;\n \n     for each (@ast.local local in block_locals(b)) {\n-        log \"declaring local \" + local.ident;\n         auto ty = T_nil();\n         alt (local.ty) {\n             case (some[@ast.ty](?t)) {\n@@ -923,7 +913,6 @@ fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n             }\n         }\n         auto val = bcx.build.Alloca(ty);\n-        log \"built alloca: \" + val_str(val);\n         cx.fcx.lllocals.insert(local.id, val);\n     }\n "}]}