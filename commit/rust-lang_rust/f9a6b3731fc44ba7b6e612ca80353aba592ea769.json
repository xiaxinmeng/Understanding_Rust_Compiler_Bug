{"sha": "f9a6b3731fc44ba7b6e612ca80353aba592ea769", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YTZiMzczMWZjNDRiYTdiNmU2MTJjYTgwMzUzYWJhNTkyZWE3Njk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T07:40:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T08:38:35Z"}, "message": "rustdoc: Add fold_const and fold_constlist to fold", "tree": {"sha": "574f6e53619294b0cf4c50780235ecf1da1edcbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574f6e53619294b0cf4c50780235ecf1da1edcbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a6b3731fc44ba7b6e612ca80353aba592ea769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a6b3731fc44ba7b6e612ca80353aba592ea769", "html_url": "https://github.com/rust-lang/rust/commit/f9a6b3731fc44ba7b6e612ca80353aba592ea769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a6b3731fc44ba7b6e612ca80353aba592ea769/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66ac392feb7b7a26ae98823e7bf9d47cef533fe", "html_url": "https://github.com/rust-lang/rust/commit/d66ac392feb7b7a26ae98823e7bf9d47cef533fe"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "0aea4744ba4b8ecd934706531880fc98446bccf3", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f9a6b3731fc44ba7b6e612ca80353aba592ea769/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a6b3731fc44ba7b6e612ca80353aba592ea769/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=f9a6b3731fc44ba7b6e612ca80353aba592ea769", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: Random import to solve the mystery resolve bug\n+import std;\n+\n export fold;\n export fold_crate, fold_mod, fold_fn, fold_modlist, fold_fnlist;\n export default_seq_fold;\n@@ -11,16 +14,23 @@ enum fold<T> = t<T>;\n type fold_crate<T> = fn~(fold: fold<T>, doc: doc::cratedoc) -> doc::cratedoc;\n type fold_mod<T> = fn~(fold: fold<T>, doc: doc::moddoc) -> doc::moddoc;\n type fold_fn<T> = fn~(fold: fold<T>, doc: doc::fndoc) -> doc::fndoc;\n-type fold_modlist<T> = fn~(fold: fold<T>,list: doc::modlist) -> doc::modlist;\n-type fold_fnlist<T> = fn~(fold: fold<T>,list: doc::fnlist) -> doc::fnlist;\n+type fold_const<T> = fn~(fold: fold<T>, doc: doc::constdoc) -> doc::constdoc;\n+type fold_modlist<T> = fn~(fold: fold<T>, list: doc::modlist) -> doc::modlist;\n+type fold_fnlist<T> = fn~(fold: fold<T>, list: doc::fnlist) -> doc::fnlist;\n+type fold_constlist<T> = fn~(\n+    fold: fold<T>,\n+    list: doc::constlist\n+) -> doc::constlist;\n \n type t<T> = {\n     ctxt: T,\n     fold_crate: fold_crate<T>,\n     fold_mod: fold_mod<T>,\n     fold_fn: fold_fn<T>,\n+    fold_const: fold_const<T>,\n     fold_modlist: fold_modlist<T>,\n-    fold_fnlist: fold_fnlist<T>\n+    fold_fnlist: fold_fnlist<T>,\n+    fold_constlist: fold_constlist<T>\n };\n \n \n@@ -31,16 +41,20 @@ fn mk_fold<T:copy>(\n     fold_crate: fold_crate<T>,\n     fold_mod: fold_mod<T>,\n     fold_fn: fold_fn<T>,\n+    fold_const: fold_const<T>,\n     fold_modlist: fold_modlist<T>,\n-    fold_fnlist: fold_fnlist<T>\n+    fold_fnlist: fold_fnlist<T>,\n+    fold_constlist: fold_constlist<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n         fold_fn: fold_fn,\n+        fold_const: fold_const,\n         fold_modlist: fold_modlist,\n-        fold_fnlist: fold_fnlist\n+        fold_fnlist: fold_fnlist,\n+        fold_constlist: fold_constlist\n     })\n }\n \n@@ -50,8 +64,10 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_crate(f, d)},\n         {|f, d| default_seq_fold_mod(f, d)},\n         {|f, d| default_seq_fold_fn(f, d)},\n+        {|f, d| default_seq_fold_const(f, d)},\n         {|f, d| default_seq_fold_modlist(f, d)},\n-        {|f, d| default_seq_fold_fnlist(f, d)}\n+        {|f, d| default_seq_fold_fnlist(f, d)},\n+        {|f, d| default_seq_fold_constlist(f, d)}\n     )\n }\n \n@@ -82,6 +98,13 @@ fn default_seq_fold_fn<T>(\n     doc\n }\n \n+fn default_seq_fold_const<T>(\n+    _fold: fold<T>,\n+    doc: doc::constdoc\n+) -> doc::constdoc {\n+    doc\n+}\n+\n fn default_seq_fold_modlist<T>(\n     fold: fold<T>,\n     list: doc::modlist\n@@ -100,15 +123,31 @@ fn default_seq_fold_fnlist<T>(\n     })\n }\n \n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn default_fold_should_produce_same_doc() {\n-        let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n-        let ast = parse::from_str(source);\n-        let doc = extract::extract(ast, \"\");\n-        let fld = default_seq_fold(());\n-        let folded = fld.fold_crate(fld, doc);\n-        assert doc == folded;\n-    }\n+fn default_seq_fold_constlist<T>(\n+    fold: fold<T>,\n+    list: doc::constlist\n+) -> doc::constlist {\n+    doc::constlist(vec::map(*list) {|doc|\n+        fold.fold_const(fold, doc)\n+    })\n+}\n+\n+#[test]\n+fn default_fold_should_produce_same_doc() {\n+    let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n+    let ast = parse::from_str(source);\n+    let doc = extract::extract(ast, \"\");\n+    let fld = default_seq_fold(());\n+    let folded = fld.fold_crate(fld, doc);\n+    assert doc == folded;\n+}\n+\n+#[test]\n+fn default_fold_should_produce_same_consts() {\n+    let source = \"const a: int = 0;\";\n+    let ast = parse::from_str(source);\n+    let doc = extract::extract(ast, \"\");\n+    let fld = default_seq_fold(());\n+    let folded = fld.fold_crate(fld, doc);\n+    assert doc == folded;\n }\n\\ No newline at end of file"}]}