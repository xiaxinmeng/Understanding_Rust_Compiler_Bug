{"sha": "d4d270d5030b48d815a0ca19f28c78888847be11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDI3MGQ1MDMwYjQ4ZDgxNWEwY2ExOWYyOGM3ODg4ODg0N2JlMTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T17:22:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T13:01:09Z"}, "message": "Merge BACKEND_CONFIG and CURRENT_MODULE thread locals", "tree": {"sha": "23a143f46bd12601dca5622f19b3515eb5053151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23a143f46bd12601dca5622f19b3515eb5053151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d270d5030b48d815a0ca19f28c78888847be11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d270d5030b48d815a0ca19f28c78888847be11", "html_url": "https://github.com/rust-lang/rust/commit/d4d270d5030b48d815a0ca19f28c78888847be11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d270d5030b48d815a0ca19f28c78888847be11/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fac7f089f8e209ec2181900a322294896cfbcbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fac7f089f8e209ec2181900a322294896cfbcbf", "html_url": "https://github.com/rust-lang/rust/commit/6fac7f089f8e209ec2181900a322294896cfbcbf"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "4b12c1aec992728e9b251d45c5e5440ee0e73393", "filename": "src/driver/jit.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4d270d5030b48d815a0ca19f28c78888847be11/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d270d5030b48d815a0ca19f28c78888847be11/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=d4d270d5030b48d815a0ca19f28c78888847be11", "patch": "@@ -14,9 +14,13 @@ use cranelift_jit::{JITBuilder, JITModule};\n use crate::{prelude::*, BackendConfig};\n use crate::{CodegenCx, CodegenMode};\n \n+struct JitState {\n+    backend_config: BackendConfig,\n+    jit_module: JITModule,\n+}\n+\n thread_local! {\n-    pub static BACKEND_CONFIG: RefCell<Option<BackendConfig>> = RefCell::new(None);\n-    pub static CURRENT_MODULE: RefCell<Option<JITModule>> = RefCell::new(None);\n+    static LAZY_JIT_STATE: RefCell<Option<JitState>> = RefCell::new(None);\n }\n \n pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n@@ -106,10 +110,6 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     // useful as some dynamic linkers use it as a marker to jump over.\n     argv.push(std::ptr::null());\n \n-    BACKEND_CONFIG.with(|tls_backend_config| {\n-        assert!(tls_backend_config.borrow_mut().replace(backend_config).is_none())\n-    });\n-\n     let start_sig = Signature {\n         params: vec![\n             AbiParam::new(jit_module.target_config().pointer_type()),\n@@ -121,8 +121,11 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     let start_func_id = jit_module.declare_function(\"main\", Linkage::Import, &start_sig).unwrap();\n     let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n \n-    CURRENT_MODULE\n-        .with(|current_module| assert!(current_module.borrow_mut().replace(jit_module).is_none()));\n+    LAZY_JIT_STATE.with(|lazy_jit_state| {\n+        let mut lazy_jit_state = lazy_jit_state.borrow_mut();\n+        assert!(lazy_jit_state.is_none());\n+        *lazy_jit_state = Some(JitState { backend_config, jit_module });\n+    });\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_start) };\n@@ -136,11 +139,11 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n         // lift is used to ensure the correct lifetime for instance.\n         let instance = tcx.lift(unsafe { *instance_ptr }).unwrap();\n \n-        CURRENT_MODULE.with(|jit_module| {\n-            let mut jit_module = jit_module.borrow_mut();\n-            let jit_module = jit_module.as_mut().unwrap();\n-            let backend_config =\n-                BACKEND_CONFIG.with(|backend_config| backend_config.borrow().clone().unwrap());\n+        LAZY_JIT_STATE.with(|lazy_jit_state| {\n+            let mut lazy_jit_state = lazy_jit_state.borrow_mut();\n+            let lazy_jit_state = lazy_jit_state.as_mut().unwrap();\n+            let jit_module = &mut lazy_jit_state.jit_module;\n+            let backend_config = lazy_jit_state.backend_config.clone();\n \n             let name = tcx.symbol_name(instance).name.to_string();\n             let sig = crate::abi::get_function_sig(tcx, jit_module.isa().triple(), instance);"}]}