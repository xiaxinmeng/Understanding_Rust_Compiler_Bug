{"sha": "e2492b716370dab5216f0123b3ed1cac78f8304e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDkyYjcxNjM3MGRhYjUyMTZmMDEyM2IzZWQxY2FjNzhmODMwNGU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-16T02:41:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-16T02:41:36Z"}, "message": "Add comments about `waiting_cache`.", "tree": {"sha": "038ea3226ff51e994bd6f0bcfe27a1b04721357d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038ea3226ff51e994bd6f0bcfe27a1b04721357d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2492b716370dab5216f0123b3ed1cac78f8304e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2492b716370dab5216f0123b3ed1cac78f8304e", "html_url": "https://github.com/rust-lang/rust/commit/e2492b716370dab5216f0123b3ed1cac78f8304e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2492b716370dab5216f0123b3ed1cac78f8304e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6391ef4d6e627c87124d512892fe4e0eface96ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6391ef4d6e627c87124d512892fe4e0eface96ae", "html_url": "https://github.com/rust-lang/rust/commit/6391ef4d6e627c87124d512892fe4e0eface96ae"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "9dbae95dc8f60f055649df59b1345751ba4e8d33", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2492b716370dab5216f0123b3ed1cac78f8304e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2492b716370dab5216f0123b3ed1cac78f8304e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=e2492b716370dab5216f0123b3ed1cac78f8304e", "patch": "@@ -151,7 +151,9 @@ pub struct ObligationForest<O: ForestObligation> {\n     /// A cache of predicates that have been successfully completed.\n     done_cache: FxHashSet<O::Predicate>,\n \n-    /// An cache of the nodes in `nodes`, indexed by predicate.\n+    /// A cache of the nodes in `nodes`, indexed by predicate. Unfortunately,\n+    /// its contents are not guaranteed to match those of `nodes`. See the\n+    /// comments in `process_obligation` for details.\n     waiting_cache: FxHashMap<O::Predicate, NodeIndex>,\n \n     scratch: Option<Vec<usize>>,\n@@ -394,6 +396,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n             debug!(\"process_obligations: node {} == {:?}\", i, node);\n \n+            // `processor.process_obligation` can modify the predicate within\n+            // `node.obligation`, and that predicate is the key used for\n+            // `self.waiting_cache`. This means that `self.waiting_cache` can\n+            // get out of sync with `nodes`. It's not very common, but it does\n+            // happen, and code in `compress` has to allow for it.\n             let result = match node.state.get() {\n                 NodeState::Pending => processor.process_obligation(&mut node.obligation),\n                 _ => continue\n@@ -621,7 +628,10 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     }\n                 }\n                 NodeState::Done => {\n-                    // Avoid cloning the key (predicate) in case it exists in the waiting cache\n+                    // This lookup can fail because the contents of\n+                    // `self.waiting_cache` is not guaranteed to match those of\n+                    // `self.nodes`. See the comment in `process_obligation`\n+                    // for more details.\n                     if let Some((predicate, _)) = self.waiting_cache\n                         .remove_entry(node.obligation.as_predicate())\n                     {\n@@ -703,6 +713,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n         }\n \n+        // This updating of `self.waiting_cache` is necessary because the\n+        // removal of nodes within `compress` can fail. See above.\n         let mut kill_list = vec![];\n         for (predicate, index) in &mut self.waiting_cache {\n             let new_i = node_rewrites[index.index()];"}]}