{"sha": "edee46e257ec4aa6d6a78ac4f061cd525ef231f9", "node_id": "C_kwDOAAsO6NoAKGVkZWU0NmUyNTdlYzRhYTZkNmE3OGFjNGYwNjFjZDUyNWVmMjMxZjk", "commit": {"author": {"name": "Waleed Dahshan", "email": "58462210+wmstack@users.noreply.github.com", "date": "2022-03-19T07:52:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-19T07:52:30Z"}, "message": "Provide more useful documentation of conversion methods\n\nI thought that the documentation for these methods needed to be a bit more explanatory for new users. For advanced users, the comments are relatively unnecessary. I think it would be useful to explain precisely what the method does. As a new user, when you see the `into` method, where the type is inferred, if you are new you don't even know what you convert to, because it is implicit. I believe this can help new users understand.", "tree": {"sha": "34f637df112933d0312b2d30573f1973127a9009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f637df112933d0312b2d30573f1973127a9009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edee46e257ec4aa6d6a78ac4f061cd525ef231f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNYu+CRBK7hj4Ov3rIwAAcxAIAD28azhfDUCuYCjSGLD3K092\ndtu7u2KihNVFz7aQ7csaSkh5O9L78N3L6vFUY0SwLKM8jxDrslrOrj3M6qpitxhU\nDiC1q01Cuzz6kqJ+0zn4Uk7FP/XmTqwOxvqs5deAdXVI4L5ynM0F24/NSa/rj5yz\ngNHmBc85moAsr4rPvycnJP7ZM6q/xYsILesAl3bD1P7cqCtFXfnBqnecZsNYrSNT\nUNze1zR/xkrmUxC6f4Cw8ue/a+qcuB+2JzPj/Zlo7GHpG2t6+R7kTpKIGyMwBXoP\n0sJ3Mn3LsxtbSsM9bMlJuuym1eOOMB+QiLMJETNcOOTTqUmT4Dya9m7lEieCy/U=\n=6Huu\n-----END PGP SIGNATURE-----\n", "payload": "tree 34f637df112933d0312b2d30573f1973127a9009\nparent 31535841701e0bf7ef33998024376f2cedd8b3e3\nauthor Waleed Dahshan <58462210+wmstack@users.noreply.github.com> 1647676350 +1100\ncommitter GitHub <noreply@github.com> 1647676350 +1100\n\nProvide more useful documentation of conversion methods\n\nI thought that the documentation for these methods needed to be a bit more explanatory for new users. For advanced users, the comments are relatively unnecessary. I think it would be useful to explain precisely what the method does. As a new user, when you see the `into` method, where the type is inferred, if you are new you don't even know what you convert to, because it is implicit. I believe this can help new users understand."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edee46e257ec4aa6d6a78ac4f061cd525ef231f9", "html_url": "https://github.com/rust-lang/rust/commit/edee46e257ec4aa6d6a78ac4f061cd525ef231f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edee46e257ec4aa6d6a78ac4f061cd525ef231f9/comments", "author": {"login": "wmstack", "id": 58462210, "node_id": "MDQ6VXNlcjU4NDYyMjEw", "avatar_url": "https://avatars.githubusercontent.com/u/58462210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmstack", "html_url": "https://github.com/wmstack", "followers_url": "https://api.github.com/users/wmstack/followers", "following_url": "https://api.github.com/users/wmstack/following{/other_user}", "gists_url": "https://api.github.com/users/wmstack/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmstack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmstack/subscriptions", "organizations_url": "https://api.github.com/users/wmstack/orgs", "repos_url": "https://api.github.com/users/wmstack/repos", "events_url": "https://api.github.com/users/wmstack/events{/privacy}", "received_events_url": "https://api.github.com/users/wmstack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31535841701e0bf7ef33998024376f2cedd8b3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/31535841701e0bf7ef33998024376f2cedd8b3e3", "html_url": "https://github.com/rust-lang/rust/commit/31535841701e0bf7ef33998024376f2cedd8b3e3"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e2ffc8c9121f31339af962b375dcaca9fee16910", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edee46e257ec4aa6d6a78ac4f061cd525ef231f9/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edee46e257ec4aa6d6a78ac4f061cd525ef231f9/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=edee46e257ec4aa6d6a78ac4f061cd525ef231f9", "patch": "@@ -154,7 +154,7 @@ pub const fn identity<T>(x: T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n pub trait AsRef<T: ?Sized> {\n-    /// Performs the conversion.\n+    /// Converts this type into a shared reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_ref(&self) -> &T;\n }\n@@ -196,7 +196,7 @@ pub trait AsRef<T: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n pub trait AsMut<T: ?Sized> {\n-    /// Performs the conversion.\n+    /// Converts this type into a mutable reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_mut(&mut self) -> &mut T;\n }\n@@ -272,7 +272,7 @@ pub trait AsMut<T: ?Sized> {\n #[rustc_diagnostic_item = \"Into\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n-    /// Performs the conversion.\n+    /// Converts this type into the (usually inferred) input type.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into(self) -> T;\n@@ -367,7 +367,7 @@ pub trait Into<T>: Sized {\n     note = \"to coerce a `{T}` into a `{Self}`, use `&*` as a prefix\",\n ))]\n pub trait From<T>: Sized {\n-    /// Performs the conversion.\n+    /// Converts to this type from the input type.\n     #[lang = \"from\"]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}